@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gPlayerPartyLostHP
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gPlayerPartyLostHP,object
	.size	 gPlayerPartyLostHP,4
gPlayerPartyLostHP:
	.word	0x0
	.align	2, 0
	.type	 sPlayerPartyMaxHP,object
	.size	 sPlayerPartyMaxHP,4
sPlayerPartyMaxHP:
	.word	0x0
	.align	2, 0
	.type	 sInfoCard,object
	.size	 sInfoCard,4
sInfoCard:
	.word	0x0
	.align	2, 0
	.type	 sTilemapBuffer,object
	.size	 sTilemapBuffer,4
sTilemapBuffer:
	.word	0x0
	.section .rodata
	.type	 sBattleStyleMovePoints,object
	.size	 sBattleStyleMovePoints,5680
sBattleStyleMovePoints:
	.byte	0x0
	.space	15
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	8
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	6
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.byte	0x1
	.space	9
	.byte	0x1
	.space	4
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	8
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	6
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	6
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	6
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	2
	.byte	0x1
	.space	6
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	2
	.byte	0x1
	.space	6
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	6
	.space	6
	.byte	0x1
	.space	9
	.space	6
	.byte	0x1
	.space	9
	.space	7
	.byte	0x1
	.space	8
	.space	6
	.byte	0x1
	.space	9
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x0
	.space	15
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	6
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	2
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	8
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	5
	.byte	0x1
	.space	9
	.space	1
	.byte	0x1
	.space	14
	.space	7
	.byte	0x1
	.space	8
	.byte	0x1
	.space	6
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	2
	.space	6
	.byte	0x1
	.space	9
	.space	6
	.byte	0x1
	.space	9
	.space	6
	.byte	0x1
	.space	9
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.byte	0x1
	.space	13
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	2
	.space	7
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	6
	.byte	0x1
	.space	8
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.space	15
	.byte	0x1
	.byte	0x1
	.space	14
	.space	1
	.byte	0x1
	.space	14
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x0
	.space	15
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.space	2
	.byte	0x1
	.space	13
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	7
	.byte	0x0
	.space	15
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	7
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	7
	.space	2
	.byte	0x1
	.space	5
	.byte	0x1
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	6
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	7
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	7
	.space	8
	.byte	0x1
	.space	7
	.space	8
	.byte	0x1
	.space	7
	.byte	0x0
	.space	15
	.space	8
	.byte	0x1
	.space	7
	.byte	0x1
	.space	15
	.space	9
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	8
	.byte	0x1
	.space	3
	.space	3
	.byte	0x1
	.space	8
	.byte	0x1
	.space	3
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.space	9
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	2
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	6
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	7
	.space	2
	.byte	0x1
	.space	13
	.space	4
	.byte	0x1
	.space	4
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	2
	.byte	0x1
	.space	13
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	4
	.byte	0x1
	.space	3
	.byte	0x1
	.space	2
	.space	6
	.byte	0x1
	.space	9
	.space	7
	.byte	0x1
	.space	8
	.space	4
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	6
	.byte	0x1
	.space	9
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	12
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.byte	0x0
	.space	15
	.space	7
	.byte	0x1
	.space	8
	.space	3
	.byte	0x1
	.space	12
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	7
	.space	7
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.space	5
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	8
	.byte	0x1
	.space	3
	.byte	0x1
	.space	11
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	7
	.space	8
	.byte	0x1
	.space	7
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	4
	.byte	0x1
	.space	7
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.space	3
	.byte	0x1
	.space	8
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	8
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.byte	0x1
	.space	8
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.byte	0x1
	.space	9
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.space	2
	.byte	0x1
	.space	13
	.byte	0x1
	.space	6
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	8
	.byte	0x1
	.space	2
	.byte	0x1
	.space	4
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x0
	.space	15
	.space	7
	.byte	0x1
	.space	8
	.byte	0x0
	.space	15
	.byte	0x1
	.byte	0x1
	.space	14
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.byte	0x1
	.space	15
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	9
	.byte	0x1
	.space	6
	.space	5
	.byte	0x1
	.space	8
	.byte	0x1
	.space	1
	.space	5
	.byte	0x1
	.space	8
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.byte	0x1
	.space	5
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	8
	.byte	0x1
	.space	8
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x0
	.space	15
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.space	8
	.byte	0x1
	.space	7
	.space	9
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	15
	.byte	0x1
	.space	4
	.byte	0x1
	.space	11
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	9
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.space	6
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.byte	0x1
	.space	11
	.byte	0x1
	.space	3
	.space	14
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	4
	.byte	0x1
	.space	3
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	8
	.byte	0x1
	.space	7
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.space	10
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	9
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	4
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	12
	.space	6
	.byte	0x1
	.space	2
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	2
	.byte	0x1
	.space	6
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	5
	.byte	0x1
	.space	1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	3
	.byte	0x1
	.space	9
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	9
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	9
	.byte	0x1
	.space	1
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	5
	.byte	0x1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.byte	0x1
	.space	13
	.byte	0x1
	.space	1
	.byte	0x1
	.space	13
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	8
	.byte	0x1
	.byte	0x1
	.space	6
	.space	1
	.byte	0x1
	.space	14
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	4
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.byte	0x1
	.space	15
	.byte	0x1
	.space	6
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.byte	0x1
	.space	11
	.space	13
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x0
	.space	15
	.space	6
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	6
	.space	6
	.byte	0x1
	.space	9
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	2
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.byte	0x1
	.space	8
	.byte	0x1
	.space	6
	.space	6
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	6
	.space	4
	.byte	0x1
	.space	4
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.byte	0x1
	.space	1
	.space	8
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.space	9
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.space	4
	.byte	0x1
	.space	4
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	3
	.byte	0x1
	.space	5
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	4
	.byte	0x1
	.byte	0x1
	.space	9
	.byte	0x1
	.space	4
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	9
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	9
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	4
	.byte	0x1
	.space	4
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	3
	.byte	0x1
	.space	2
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	14
	.byte	0x1
	.space	1
	.space	9
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	10
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	9
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	4
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.space	15
	.byte	0x0
	.space	15
	.space	9
	.byte	0x1
	.space	6
	.byte	0x0
	.space	15
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	5
	.byte	0x1
	.space	1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	8
	.byte	0x1
	.space	7
	.space	9
	.byte	0x1
	.space	4
	.byte	0x1
	.space	1
	.byte	0x0
	.space	15
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	15
	.space	7
	.byte	0x1
	.space	6
	.byte	0x1
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	9
	.byte	0x1
	.space	5
	.byte	0x1
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.space	7
	.byte	0x1
	.space	8
	.space	9
	.byte	0x1
	.space	6
	.byte	0x1
	.byte	0x1
	.space	14
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	6
	.byte	0x1
	.byte	0x1
	.space	14
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	8
	.space	7
	.byte	0x1
	.space	1
	.byte	0x1
	.space	5
	.byte	0x1
	.space	3
	.byte	0x1
	.space	3
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.space	1
	.space	7
	.byte	0x1
	.space	2
	.byte	0x1
	.space	2
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.type	 sBattleStyleThresholds,object
	.size	 sBattleStyleThresholds,496
sBattleStyleThresholds:
	.space	5
	.byte	0x1
	.space	10
	.space	4
	.byte	0x2
	.space	1
	.byte	0x1
	.space	1
	.byte	0x2
	.space	7
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	1
	.byte	0x1
	.space	7
	.byte	0x3
	.space	15
	.space	3
	.byte	0x2
	.space	12
	.space	3
	.byte	0x1
	.space	12
	.space	4
	.byte	0x3
	.space	11
	.space	1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	11
	.space	2
	.byte	0x1
	.space	3
	.byte	0x1
	.space	9
	.space	12
	.byte	0x2
	.space	3
	.space	1
	.byte	0x1
	.space	2
	.byte	0x1
	.space	3
	.byte	0x1
	.space	2
	.byte	0x1
	.space	1
	.byte	0x1
	.space	2
	.space	14
	.byte	0x3
	.space	1
	.space	1
	.byte	0x1
	.space	4
	.byte	0x1
	.space	9
	.space	4
	.byte	0x2
	.space	3
	.byte	0x2
	.space	7
	.space	6
	.byte	0x2
	.space	9
	.space	9
	.byte	0x3
	.space	3
	.byte	0x3
	.space	2
	.space	13
	.byte	0x4
	.space	2
	.space	8
	.byte	0x3
	.space	7
	.space	2
	.byte	0x2
	.space	3
	.byte	0x2
	.space	9
	.space	10
	.byte	0x3
	.byte	0x3
	.space	4
	.byte	0x2
	.space	15
	.space	4
	.byte	0x1
	.space	4
	.byte	0x3
	.space	6
	.space	10
	.byte	0x4
	.space	5
	.space	7
	.byte	0x7
	.space	8
	.space	8
	.byte	0x4
	.space	7
	.space	11
	.byte	0x2
	.space	1
	.byte	0x4
	.space	2
	.space	15
	.byte	0x4
	.byte	0x0
	.space	15
	.byte	0x0
	.space	15
	.byte	0x0
	.space	15
	.byte	0x0
	.space	15
	.type	 sUnusedArray,object
sUnusedArray:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0xfd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfd
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xfe
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnusedArray,121
	.type	 sTourneyTreeCursorMovementMap,object
	.size	 sTourneyTreeCursorMovementMap,640
sTourneyTreeCursorMovementMap:
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x0
	.byte	0x2
	.byte	0x9
	.byte	0x10
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x1
	.byte	0x3
	.byte	0xa
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x2
	.byte	0x4
	.byte	0xb
	.byte	0x11
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x3
	.byte	0x5
	.byte	0xc
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x4
	.byte	0x6
	.byte	0xd
	.byte	0x12
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x5
	.byte	0x7
	.byte	0xe
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x6
	.byte	0x0
	.byte	0xf
	.byte	0x13
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x1f
	.byte	0x9
	.byte	0x14
	.byte	0x1f
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x8
	.byte	0xa
	.byte	0x14
	.byte	0x1
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0x9
	.byte	0xb
	.byte	0x15
	.byte	0x2
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xa
	.byte	0xc
	.byte	0x15
	.byte	0x3
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xb
	.byte	0xd
	.byte	0x16
	.byte	0x4
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xc
	.byte	0xe
	.byte	0x16
	.byte	0x5
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xd
	.byte	0xf
	.byte	0x17
	.byte	0x6
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0xe
	.byte	0x1f
	.byte	0x17
	.byte	0x7
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x14
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x18
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x18
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x18
	.byte	0x13
	.byte	0x11
	.byte	0x0
	.byte	0x18
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x15
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x18
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x18
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x18
	.byte	0x10
	.byte	0x12
	.byte	0x2
	.byte	0x18
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x16
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x19
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x19
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x19
	.byte	0x11
	.byte	0x13
	.byte	0x4
	.byte	0x19
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x17
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x19
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x19
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x19
	.byte	0x12
	.byte	0x10
	.byte	0x6
	.byte	0x19
	.byte	0x17
	.byte	0x15
	.byte	0x10
	.byte	0x8
	.byte	0x17
	.byte	0x15
	.byte	0x1a
	.byte	0x8
	.byte	0x17
	.byte	0x15
	.byte	0x1a
	.byte	0x8
	.byte	0x17
	.byte	0x15
	.byte	0x1a
	.byte	0x8
	.byte	0x17
	.byte	0x15
	.byte	0x1a
	.byte	0x8
	.byte	0x14
	.byte	0x16
	.byte	0x11
	.byte	0xa
	.byte	0x14
	.byte	0x16
	.byte	0x1a
	.byte	0xa
	.byte	0x14
	.byte	0x16
	.byte	0x1a
	.byte	0xa
	.byte	0x14
	.byte	0x16
	.byte	0x1a
	.byte	0xa
	.byte	0x14
	.byte	0x16
	.byte	0x1a
	.byte	0xa
	.byte	0x15
	.byte	0x17
	.byte	0x12
	.byte	0xc
	.byte	0x15
	.byte	0x17
	.byte	0x1b
	.byte	0xc
	.byte	0x15
	.byte	0x17
	.byte	0x1b
	.byte	0xc
	.byte	0x15
	.byte	0x17
	.byte	0x1b
	.byte	0xc
	.byte	0x15
	.byte	0x17
	.byte	0x1b
	.byte	0xc
	.byte	0x16
	.byte	0x14
	.byte	0x13
	.byte	0xe
	.byte	0x16
	.byte	0x14
	.byte	0x1b
	.byte	0xe
	.byte	0x16
	.byte	0x14
	.byte	0x1b
	.byte	0xe
	.byte	0x16
	.byte	0x14
	.byte	0x1b
	.byte	0xe
	.byte	0x16
	.byte	0x14
	.byte	0x1b
	.byte	0xe
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x19
	.byte	0x19
	.byte	0x10
	.byte	0x1a
	.byte	0x19
	.byte	0x19
	.byte	0x10
	.byte	0x1c
	.byte	0x19
	.byte	0x19
	.byte	0x10
	.byte	0x1c
	.byte	0x19
	.byte	0x19
	.byte	0x10
	.byte	0x1c
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x18
	.byte	0x18
	.byte	0x12
	.byte	0x1b
	.byte	0x18
	.byte	0x18
	.byte	0x12
	.byte	0x1c
	.byte	0x18
	.byte	0x18
	.byte	0x12
	.byte	0x1c
	.byte	0x18
	.byte	0x18
	.byte	0x12
	.byte	0x1c
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1b
	.byte	0x1b
	.byte	0x18
	.byte	0x14
	.byte	0x1b
	.byte	0x1b
	.byte	0x1d
	.byte	0x14
	.byte	0x1b
	.byte	0x1b
	.byte	0x1d
	.byte	0x14
	.byte	0x1b
	.byte	0x1b
	.byte	0x1d
	.byte	0x14
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1a
	.byte	0x1a
	.byte	0x19
	.byte	0x16
	.byte	0x1a
	.byte	0x1a
	.byte	0x1d
	.byte	0x16
	.byte	0x1a
	.byte	0x1a
	.byte	0x1d
	.byte	0x16
	.byte	0x1a
	.byte	0x1a
	.byte	0x1d
	.byte	0x16
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x18
	.byte	0x1d
	.byte	0xff
	.byte	0xff
	.byte	0x18
	.byte	0x1e
	.byte	0xff
	.byte	0xff
	.byte	0x18
	.byte	0x1e
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1c
	.byte	0x1a
	.byte	0xff
	.byte	0xff
	.byte	0x1e
	.byte	0x1a
	.byte	0xff
	.byte	0xff
	.byte	0x1e
	.byte	0x1a
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x1c
	.byte	0x1d
	.byte	0xff
	.byte	0xff
	.byte	0x1c
	.byte	0x1d
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x8
	.byte	0x0
	.align	2, 0
	.type	 sTourneyTreeBgTemplates,object
	.size	 sTourneyTreeBgTemplates,16
sTourneyTreeBgTemplates:
	.byte	0xc0
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xd5
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xea
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xfb
	.byte	0x21
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sInfoCardBgTemplates,object
	.size	 sInfoCardBgTemplates,16
sInfoCardBgTemplates:
	.byte	0x40
	.byte	0x7
	.byte	0x0
	.space	1
	.byte	0x85
	.byte	0x7
	.byte	0x0
	.space	1
	.byte	0xca
	.byte	0x17
	.byte	0x0
	.space	1
	.byte	0x7b
	.byte	0x10
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sTourneyTreeWindowTemplates,object
sTourneyTreeWindowTemplates:
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x8
	.byte	0x10
	.byte	0xf
	.short	0x10
	.byte	0x0
	.byte	0x16
	.byte	0x3
	.byte	0x8
	.byte	0x10
	.byte	0xf
	.short	0x90
	.byte	0x0
	.byte	0x8
	.byte	0x1
	.byte	0xe
	.byte	0x2
	.byte	0xf
	.short	0x110
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sTourneyTreeWindowTemplates,32
	.align	2, 0
	.type	 sInfoCardWindowTemplates,object
sInfoCardWindowTemplates:
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.short	0x1
	.byte	0x0
	.byte	0x10
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x35
	.byte	0x0
	.byte	0x13
	.byte	0x7
	.byte	0x9
	.byte	0x3
	.byte	0xf
	.short	0x45
	.byte	0x0
	.byte	0x10
	.byte	0xa
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x60
	.byte	0x0
	.byte	0x2
	.byte	0xc
	.byte	0x1a
	.byte	0x7
	.byte	0xf
	.short	0x70
	.byte	0x0
	.byte	0x5
	.byte	0x2
	.byte	0x17
	.byte	0x2
	.byte	0xf
	.short	0x126
	.byte	0x0
	.byte	0x2
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x154
	.byte	0x0
	.byte	0x14
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x164
	.byte	0x0
	.byte	0x2
	.byte	0x10
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.short	0x174
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.short	0x1
	.byte	0x1
	.byte	0x10
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x35
	.byte	0x1
	.byte	0x13
	.byte	0x7
	.byte	0x9
	.byte	0x3
	.byte	0xf
	.short	0x45
	.byte	0x1
	.byte	0x10
	.byte	0xa
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x60
	.byte	0x1
	.byte	0x2
	.byte	0xc
	.byte	0x1a
	.byte	0x7
	.byte	0xf
	.short	0x70
	.byte	0x1
	.byte	0x5
	.byte	0x2
	.byte	0x17
	.byte	0x2
	.byte	0xf
	.short	0x126
	.byte	0x1
	.byte	0x2
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x154
	.byte	0x1
	.byte	0x14
	.byte	0x5
	.byte	0x8
	.byte	0x2
	.byte	0xf
	.short	0x164
	.byte	0x1
	.byte	0x2
	.byte	0x10
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.short	0x174
	.size	 sInfoCardWindowTemplates,144
	.align	2, 0
	.type	 sTourneyTreeScanlineEffectParams,object
	.size	 sTourneyTreeScanlineEffectParams,12
sTourneyTreeScanlineEffectParams:
	.word	0x400000e
	.word	-0x5d9fffff
	.byte	0x1
	.space	3
	.align	2, 0
	.type	 sTourneyTreeButtonsSpriteSheet,object
sTourneyTreeButtonsSpriteSheet:
	.word	gDomeTourneyTreeButtons_Gfx
	.short	0x600
	.short	0x0
	.space	8
	.size	 sTourneyTreeButtonsSpriteSheet,16
	.align	2, 0
	.type	 sTourneyTreeButtonsSpritePal,object
sTourneyTreeButtonsSpritePal:
	.word	gDomeTourneyTreeButtons_Pal
	.short	0x0
	.space	2
	.space	8
	.size	 sTourneyTreeButtonsSpritePal,16
	.align	2, 0
	.type	 sOamData_TourneyTreePokeball,object
	.size	 sOamData_TourneyTreePokeball,8
sOamData_TourneyTreePokeball:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sOamData_TourneyTreeCloseButton,object
	.size	 sOamData_TourneyTreeCloseButton,8
sOamData_TourneyTreeCloseButton:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x10
	.short	0x0
	.align	2, 0
	.type	 sOamData_VerticalScrollArrow,object
	.size	 sOamData_VerticalScrollArrow,8
sOamData_VerticalScrollArrow:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.short	0x0
	.align	2, 0
	.type	 sOamData_HorizontalScrollArrow,object
	.size	 sOamData_HorizontalScrollArrow,8
sOamData_HorizontalScrollArrow:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x20
	.short	0x0
	.align	2, 0
	.type	 sSpriteAnim_TourneyTreePokeballNormal,object
sSpriteAnim_TourneyTreePokeballNormal:
	.short	0x14
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_TourneyTreePokeballNormal,8
	.align	2, 0
	.type	 sSpriteAnim_TourneyTreePokeballSelected,object
sSpriteAnim_TourneyTreePokeballSelected:
	.short	0x18
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_TourneyTreePokeballSelected,8
	.align	2, 0
	.type	 sSpriteAnimTable_TourneyTreePokeball,object
sSpriteAnimTable_TourneyTreePokeball:
	.word	sSpriteAnim_TourneyTreePokeballNormal
	.word	sSpriteAnim_TourneyTreePokeballSelected
	.size	 sSpriteAnimTable_TourneyTreePokeball,8
	.align	2, 0
	.type	 sTourneyTreePokeballSpriteTemplate,object
	.size	 sTourneyTreePokeballSpriteTemplate,24
sTourneyTreePokeballSpriteTemplate:
	.short	0x0
	.short	0xffff
	.word	sOamData_TourneyTreePokeball
	.word	sSpriteAnimTable_TourneyTreePokeball
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_TourneyTreeCancelButtonNormal,object
sSpriteAnim_TourneyTreeCancelButtonNormal:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_TourneyTreeCancelButtonNormal,8
	.align	2, 0
	.type	 sSpriteAnim_TourneyTreeCancelButtonSelected,object
sSpriteAnim_TourneyTreeCancelButtonSelected:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_TourneyTreeCancelButtonSelected,8
	.align	2, 0
	.type	 sSpriteAnimTable_TourneyTreeCancelButton,object
sSpriteAnimTable_TourneyTreeCancelButton:
	.word	sSpriteAnim_TourneyTreeCancelButtonNormal
	.word	sSpriteAnim_TourneyTreeCancelButtonSelected
	.size	 sSpriteAnimTable_TourneyTreeCancelButton,8
	.align	2, 0
	.type	 sCancelButtonSpriteTemplate,object
	.size	 sCancelButtonSpriteTemplate,24
sCancelButtonSpriteTemplate:
	.short	0x0
	.short	0xffff
	.word	sOamData_TourneyTreeCloseButton
	.word	sSpriteAnimTable_TourneyTreeCancelButton
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_TourneyTreeExitButtonNormal,object
sSpriteAnim_TourneyTreeExitButtonNormal:
	.short	0x28
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_TourneyTreeExitButtonNormal,8
	.align	2, 0
	.type	 sSpriteAnim_TourneyTreeExitButtonSelected,object
sSpriteAnim_TourneyTreeExitButtonSelected:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_TourneyTreeExitButtonSelected,8
	.align	2, 0
	.type	 sSpriteAnimTable_TourneyTreeExitButton,object
sSpriteAnimTable_TourneyTreeExitButton:
	.word	sSpriteAnim_TourneyTreeExitButtonNormal
	.word	sSpriteAnim_TourneyTreeExitButtonSelected
	.size	 sSpriteAnimTable_TourneyTreeExitButton,8
	.align	2, 0
	.type	 sExitButtonSpriteTemplate,object
	.size	 sExitButtonSpriteTemplate,24
sExitButtonSpriteTemplate:
	.short	0x0
	.short	0xffff
	.word	sOamData_TourneyTreeCloseButton
	.word	sSpriteAnimTable_TourneyTreeExitButton
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_UpArrow,object
sSpriteAnim_UpArrow:
	.short	0x12
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_UpArrow,8
	.align	2, 0
	.type	 sSpriteAnim_DownArrow,object
sSpriteAnim_DownArrow:
	.short	0x12
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_DownArrow,8
	.align	2, 0
	.type	 sSpriteAnim_LeftArrow,object
sSpriteAnim_LeftArrow:
	.short	0x10
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_LeftArrow,8
	.align	2, 0
	.type	 sSpriteAnim_RightArrow,object
sSpriteAnim_RightArrow:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_RightArrow,8
	.align	2, 0
	.type	 sSpriteAnimTable_VerticalScrollArrow,object
sSpriteAnimTable_VerticalScrollArrow:
	.word	sSpriteAnim_UpArrow
	.word	sSpriteAnim_DownArrow
	.size	 sSpriteAnimTable_VerticalScrollArrow,8
	.align	2, 0
	.type	 sSpriteAnimTable_HorizontalScrollArrow,object
sSpriteAnimTable_HorizontalScrollArrow:
	.word	sSpriteAnim_LeftArrow
	.word	sSpriteAnim_RightArrow
	.size	 sSpriteAnimTable_HorizontalScrollArrow,8
	.align	2, 0
	.type	 sHorizontalScrollArrowSpriteTemplate,object
	.size	 sHorizontalScrollArrowSpriteTemplate,24
sHorizontalScrollArrowSpriteTemplate:
	.short	0x0
	.short	0xffff
	.word	sOamData_HorizontalScrollArrow
	.word	sSpriteAnimTable_HorizontalScrollArrow
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCb_HorizontalScrollArrow
	.align	2, 0
	.type	 sVerticalScrollArrowSpriteTemplate,object
	.size	 sVerticalScrollArrowSpriteTemplate,24
sVerticalScrollArrowSpriteTemplate:
	.short	0x0
	.short	0xffff
	.word	sOamData_VerticalScrollArrow
	.word	sSpriteAnimTable_VerticalScrollArrow
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCb_VerticalScrollArrow
	.type	 sTourneyTreeTrainerIds,object
	.size	 sTourneyTreeTrainerIds,16
sTourneyTreeTrainerIds:
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0x4
	.byte	0x7
	.byte	0xf
	.byte	0xb
	.byte	0x3
	.byte	0x2
	.byte	0xa
	.byte	0xe
	.byte	0x6
	.byte	0x5
	.byte	0xd
	.byte	0x9
	.byte	0x1
	.align	2, 0
	.type	 sBattleDomeFunctions,object
sBattleDomeFunctions:
	.word	InitDomeChallenge
	.word	GetDomeData
	.word	SetDomeData
	.word	BufferDomeRoundText
	.word	BufferDomeOpponentName
	.word	InitDomeOpponentParty
	.word	ShowDomeOpponentInfo
	.word	ShowDomeTourneyTree
	.word	ShowPreviousDomeTourneyTree
	.word	SetDomeOpponentId
	.word	SetDomeOpponentGraphicsId
	.word	ShowNonInteractiveDomeTourneyTree
	.word	ResolveDomeRoundWinners
	.word	SaveDomeChallenge
	.word	IncrementDomeStreaks
	.word	SetFacilityTrainerAndMonPtrs
	.word	ResetSketchedMoves
	.word	RestoreDomePlayerPartyHeldItems
	.word	ReduceDomePlayerPartyToSelectedMons
	.word	GetPlayerSeededBeforeOpponent
	.word	BufferLastDomeWinnerName
	.word	InitRandomTourneyTreeResults
	.word	InitDomeTrainers
	.size	 sBattleDomeFunctions,92
	.align	2, 0
	.type	 sWinStreakFlags,object
sWinStreakFlags:
	.word	0x4
	.word	0x8
	.word	0x100000
	.word	0x200000
	.size	 sWinStreakFlags,16
	.align	2, 0
	.type	 sWinStreakMasks,object
sWinStreakMasks:
	.word	-0x5
	.word	-0x9
	.word	-0x100001
	.word	-0x200001
	.size	 sWinStreakMasks,16
	.type	 sIdToOpponentId,object
	.size	 sIdToOpponentId,64
sIdToOpponentId:
	.byte	0x8
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0x9
	.byte	0xc
	.byte	0x8
	.byte	0x0
	.byte	0xa
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0xb
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0xd
	.byte	0xc
	.byte	0x8
	.byte	0x0
	.byte	0xe
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0xf
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0x1
	.byte	0xc
	.byte	0x8
	.byte	0x0
	.byte	0x2
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0x3
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0x4
	.byte	0x0
	.byte	0x4
	.byte	0x8
	.byte	0x5
	.byte	0xc
	.byte	0x8
	.byte	0x0
	.byte	0x6
	.byte	0x8
	.byte	0xc
	.byte	0x0
	.byte	0x7
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.type	 sTourneyTreeTrainerOpponentIds,object
	.size	 sTourneyTreeTrainerOpponentIds,16
sTourneyTreeTrainerOpponentIds:
	.byte	0x0
	.byte	0x8
	.byte	0x4
	.byte	0xc
	.byte	0x7
	.byte	0xf
	.byte	0x3
	.byte	0xb
	.byte	0x2
	.byte	0xa
	.byte	0x6
	.byte	0xe
	.byte	0x5
	.byte	0xd
	.byte	0x1
	.byte	0x9
	.type	 sIdToMatchNumber,object
	.size	 sIdToMatchNumber,64
sIdToMatchNumber:
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0xe
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0xe
	.byte	0x1
	.byte	0x8
	.byte	0xc
	.byte	0xe
	.byte	0x1
	.byte	0x8
	.byte	0xc
	.byte	0xe
	.byte	0x2
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x2
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x3
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x3
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.byte	0x4
	.byte	0xa
	.byte	0xd
	.byte	0xe
	.byte	0x4
	.byte	0xa
	.byte	0xd
	.byte	0xe
	.byte	0x5
	.byte	0xa
	.byte	0xd
	.byte	0xe
	.byte	0x5
	.byte	0xa
	.byte	0xd
	.byte	0xe
	.byte	0x6
	.byte	0xb
	.byte	0xd
	.byte	0xe
	.byte	0x6
	.byte	0xb
	.byte	0xd
	.byte	0xe
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0xe
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0xe
	.type	 sLastMatchCardNum,object
	.size	 sLastMatchCardNum,4
sLastMatchCardNum:
	.byte	0x17
	.byte	0x1b
	.byte	0x1d
	.byte	0x1e
	.type	 gUnknown_0860D1A0,object
	.size	 gUnknown_0860D1A0,32
gUnknown_0860D1A0:
	.byte	0x10
	.byte	0x18
	.byte	0x1c
	.byte	0x1e
	.byte	0x11
	.byte	0x18
	.byte	0x1c
	.byte	0x1e
	.byte	0x12
	.byte	0x19
	.byte	0x1c
	.byte	0x1e
	.byte	0x13
	.byte	0x19
	.byte	0x1c
	.byte	0x1e
	.byte	0x14
	.byte	0x1a
	.byte	0x1d
	.byte	0x1e
	.byte	0x15
	.byte	0x1a
	.byte	0x1d
	.byte	0x1e
	.byte	0x16
	.byte	0x1b
	.byte	0x1d
	.byte	0x1e
	.byte	0x17
	.byte	0x1b
	.byte	0x1d
	.byte	0x1e
	.type	 gUnknown_0860D1C0,object
	.size	 gUnknown_0860D1C0,16
gUnknown_0860D1C0:
	.byte	0x0
	.byte	0xf
	.byte	0x8
	.byte	0x7
	.byte	0x3
	.byte	0xc
	.byte	0xb
	.byte	0x4
	.byte	0x1
	.byte	0xe
	.byte	0x9
	.byte	0x6
	.byte	0x2
	.byte	0xd
	.byte	0xa
	.byte	0x5
	.align	2, 0
	.type	 sBattleDomePotentialTexts,object
	.size	 sBattleDomePotentialTexts,68
sBattleDomePotentialTexts:
	.word	BattleDome_Text_Potential1
	.word	BattleDome_Text_Potential2
	.word	BattleDome_Text_Potential3
	.word	BattleDome_Text_Potential4
	.word	BattleDome_Text_Potential5
	.word	BattleDome_Text_Potential6
	.word	BattleDome_Text_Potential7
	.word	BattleDome_Text_Potential8
	.word	BattleDome_Text_Potential9
	.word	BattleDome_Text_Potential10
	.word	BattleDome_Text_Potential11
	.word	BattleDome_Text_Potential12
	.word	BattleDome_Text_Potential13
	.word	BattleDome_Text_Potential14
	.word	BattleDome_Text_Potential15
	.word	BattleDome_Text_Potential16
	.word	BattleDome_Text_PotentialDomeAceTucker
	.align	2, 0
	.type	 sBattleDomeOpponentStyleTexts,object
	.size	 sBattleDomeOpponentStyleTexts,128
sBattleDomeOpponentStyleTexts:
	.word	BattleDome_Text_StyleRiskDisaster
	.word	BattleDome_Text_StyleEndureLongBattles
	.word	BattleDome_Text_StyleVariesTactics
	.word	BattleDome_Text_StyleToughWinningPattern
	.word	BattleDome_Text_StyleUsesVeryRareMove
	.word	BattleDome_Text_StyleUsesStartlingMoves
	.word	BattleDome_Text_StyleConstantlyWatchesHP
	.word	BattleDome_Text_StyleStoresAndLoosesPower
	.word	BattleDome_Text_StyleEnfeeblesFoes
	.word	BattleDome_Text_StylePrefersLuckTactics
	.word	BattleDome_Text_StyleRegalAtmosphere
	.word	BattleDome_Text_StylePowerfulLowPPMoves
	.word	BattleDome_Text_StyleEnfeebleThenAttack
	.word	BattleDome_Text_StyleBattlesWhileEnduring
	.word	BattleDome_Text_StyleUpsetsFoesEmotionally
	.word	BattleDome_Text_StyleStrongAndStraightforward
	.word	BattleDome_Text_StyleAggressivelyStrongMoves
	.word	BattleDome_Text_StyleCleverlyDodgesAttacks
	.word	BattleDome_Text_StyleUsesUpsettingMoves
	.word	BattleDome_Text_StyleUsesPopularMoves
	.word	BattleDome_Text_StyleHasPowerfulComboMoves
	.word	BattleDome_Text_StyleUsesHighProbabilityMoves
	.word	BattleDome_Text_StyleAggressivelySpectacularMoves
	.word	BattleDome_Text_StyleEmphasizesOffenseOverDefense
	.word	BattleDome_Text_StyleEmphasizesDefenseOverOffense
	.word	BattleDome_Text_StyleAttacksQuicklyStrongMoves
	.word	BattleDome_Text_StyleUsesAddedEffectMoves
	.word	BattleDome_Text_StyleUsesBalancedMixOfMoves
	.word	BattleDome_Text_StyleSampleMessage1
	.word	BattleDome_Text_StyleSampleMessage2
	.word	BattleDome_Text_StyleSampleMessage3
	.word	BattleDome_Text_StyleSampleMessage4
	.align	2, 0
	.type	 sBattleDomeOpponentStatsTexts,object
sBattleDomeOpponentStatsTexts:
	.word	BattleDome_Text_EmphasizesHPAndAtk
	.word	BattleDome_Text_EmphasizesHPAndDef
	.word	BattleDome_Text_EmphasizesHPAndSpeed
	.word	BattleDome_Text_EmphasizesHPAndSpAtk
	.word	BattleDome_Text_EmphasizesHPAndSpDef
	.word	BattleDome_Text_EmphasizesAtkAndDef
	.word	BattleDome_Text_EmphasizesAtkAndSpeed
	.word	BattleDome_Text_EmphasizesAtkAndSpAtk
	.word	BattleDome_Text_EmphasizesAtkAndSpDef
	.word	BattleDome_Text_EmphasizesDefAndSpeed
	.word	BattleDome_Text_EmphasizesDefAndSpAtk
	.word	BattleDome_Text_EmphasizesDefAndSpDef
	.word	BattleDome_Text_EmphasizesSpeedAndSpAtk
	.word	BattleDome_Text_EmphasizesSpeedAndSpDef
	.word	BattleDome_Text_EmphasizesSpAtkAndSpDef
	.word	BattleDome_Text_EmphasizesHP
	.word	BattleDome_Text_EmphasizesAtk
	.word	BattleDome_Text_EmphasizesDef
	.word	BattleDome_Text_EmphasizesSpeed
	.word	BattleDome_Text_EmphasizesSpAtk
	.word	BattleDome_Text_EmphasizesSpDef
	.word	BattleDome_Text_NeglectsHPAndAtk
	.word	BattleDome_Text_NeglectsHPAndDef
	.word	BattleDome_Text_NeglectsHPAndSpeed
	.word	BattleDome_Text_NeglectsHPAndSpAtk
	.word	BattleDome_Text_NeglectsHPAndSpDef
	.word	BattleDome_Text_NeglectsAtkAndDef
	.word	BattleDome_Text_NeglectsAtkAndSpeed
	.word	BattleDome_Text_NeglectsAtkAndSpAtk
	.word	BattleDome_Text_NeglectsAtkAndSpDef
	.word	BattleDome_Text_NeglectsDefAndSpeed
	.word	BattleDome_Text_NeglectsDefAndSpAtk
	.word	BattleDome_Text_NeglectsDefAndSpDef
	.word	BattleDome_Text_NeglectsSpeedAndSpAtk
	.word	BattleDome_Text_NeglectsSpeedAndSpDef
	.word	BattleDome_Text_NeglectsSpAtkAndSpDef
	.word	BattleDome_Text_NeglectsHP
	.word	BattleDome_Text_NeglectsAtk
	.word	BattleDome_Text_NeglectsDef
	.word	BattleDome_Text_NeglectsSpeed
	.word	BattleDome_Text_NeglectsSpAtk
	.word	BattleDome_Text_NeglectsSpDef
	.word	BattleDome_Text_RaisesMonsWellBalanced
	.size	 sBattleDomeOpponentStatsTexts,172
	.type	 sInfoTrainerMonX,object
	.size	 sInfoTrainerMonX,3
sInfoTrainerMonX:
	.byte	0x68
	.byte	0x88
	.byte	0x68
	.type	 sInfoTrainerMonY,object
	.size	 sInfoTrainerMonY,3
sInfoTrainerMonY:
	.byte	0x26
	.byte	0x3e
	.byte	0x4e
	.type	 sSpeciesNameTextYCoords,object
sSpeciesNameTextYCoords:
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.size	 sSpeciesNameTextYCoords,3
	.type	 sStatTextOffsets,object
	.size	 sStatTextOffsets,5
sStatTextOffsets:
	.byte	0x0
	.byte	0x5
	.byte	0x9
	.byte	0xc
	.byte	0xe
	.align	2, 0
	.type	 sBattleDomeMatchNumberTexts,object
	.size	 sBattleDomeMatchNumberTexts,60
sBattleDomeMatchNumberTexts:
	.word	BattleDome_Text_Round1Match1
	.word	BattleDome_Text_Round1Match2
	.word	BattleDome_Text_Round1Match3
	.word	BattleDome_Text_Round1Match4
	.word	BattleDome_Text_Round1Match5
	.word	BattleDome_Text_Round1Match6
	.word	BattleDome_Text_Round1Match7
	.word	BattleDome_Text_Round1Match8
	.word	BattleDome_Text_Round2Match1
	.word	BattleDome_Text_Round2Match2
	.word	BattleDome_Text_Round2Match3
	.word	BattleDome_Text_Round2Match4
	.word	BattleDome_Text_SemifinalMatch1
	.word	BattleDome_Text_SemifinalMatch2
	.word	BattleDome_Text_FinalMatch
	.align	2, 0
	.type	 sBattleDomeWinTexts,object
sBattleDomeWinTexts:
	.word	BattleDome_Text_LetTheBattleBegin
	.word	BattleDome_Text_TrainerWonUsingMove
	.word	BattleDome_Text_TrainerBecameChamp
	.word	BattleDome_Text_TrainerWonByDefault
	.word	BattleDome_Text_TrainerWonOutrightByDefault
	.word	BattleDome_Text_TrainerWonNoMoves
	.word	BattleDome_Text_TrainerWonOutrightNoMoves
	.size	 sBattleDomeWinTexts,28
	.type	 sLeftTrainerMonX,object
	.size	 sLeftTrainerMonX,3
sLeftTrainerMonX:
	.byte	0x60
	.byte	0x60
	.byte	0x60
	.type	 sLeftTrainerMonY,object
	.size	 sLeftTrainerMonY,3
sLeftTrainerMonY:
	.byte	0x38
	.byte	0x50
	.byte	0x68
	.type	 sRightTrainerMonX,object
	.size	 sRightTrainerMonX,3
sRightTrainerMonX:
	.byte	0x90
	.byte	0x90
	.byte	0x90
	.type	 sRightTrainerMonY,object
	.size	 sRightTrainerMonY,3
sRightTrainerMonY:
	.byte	0x38
	.byte	0x50
	.byte	0x68
	.type	 sTourneyTreeTrainerIds2,object
	.size	 sTourneyTreeTrainerIds2,16
sTourneyTreeTrainerIds2:
	.byte	0x0
	.byte	0x8
	.byte	0xc
	.byte	0x4
	.byte	0x7
	.byte	0xf
	.byte	0xb
	.byte	0x3
	.byte	0x2
	.byte	0xa
	.byte	0xe
	.byte	0x6
	.byte	0x5
	.byte	0xd
	.byte	0x9
	.byte	0x1
	.type	 sCompetitorRangeByMatch,object
	.size	 sCompetitorRangeByMatch,45
sCompetitorRangeByMatch:
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x6
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x2
	.byte	0x0
	.byte	0xa
	.byte	0x2
	.byte	0x0
	.byte	0xc
	.byte	0x2
	.byte	0x0
	.byte	0xe
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.byte	0x1
	.byte	0x4
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x4
	.byte	0x1
	.byte	0xc
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x8
	.byte	0x2
	.byte	0x8
	.byte	0x8
	.byte	0x2
	.byte	0x0
	.byte	0x10
	.byte	0x3
	.type	 sTrainerNamePositions,object
	.size	 sTrainerNamePositions,32
sTrainerNamePositions:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x70
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x70
	.byte	0x0
	.byte	0x30
	.byte	0x1
	.byte	0x40
	.byte	0x1
	.byte	0x30
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x10
	.byte	0x1
	.byte	0x60
	.byte	0x1
	.byte	0x10
	.byte	0x0
	.byte	0x60
	.byte	0x0
	.byte	0x20
	.byte	0x1
	.byte	0x50
	.byte	0x1
	.byte	0x20
	.byte	0x0
	.byte	0x50
	.type	 sTourneyTreePokeballCoords,object
	.size	 sTourneyTreePokeballCoords,62
sTourneyTreePokeballCoords:
	.byte	0x44
	.byte	0x21
	.byte	0x44
	.byte	0x31
	.byte	0x44
	.byte	0x41
	.byte	0x44
	.byte	0x51
	.byte	0x44
	.byte	0x61
	.byte	0x44
	.byte	0x71
	.byte	0x44
	.byte	0x81
	.byte	0x44
	.byte	0x91
	.byte	0xac
	.byte	0x21
	.byte	0xac
	.byte	0x31
	.byte	0xac
	.byte	0x41
	.byte	0xac
	.byte	0x51
	.byte	0xac
	.byte	0x61
	.byte	0xac
	.byte	0x71
	.byte	0xac
	.byte	0x81
	.byte	0xac
	.byte	0x91
	.byte	0x57
	.byte	0x29
	.byte	0x57
	.byte	0x49
	.byte	0x57
	.byte	0x69
	.byte	0x57
	.byte	0x89
	.byte	0x99
	.byte	0x29
	.byte	0x99
	.byte	0x49
	.byte	0x99
	.byte	0x69
	.byte	0x99
	.byte	0x89
	.byte	0x5f
	.byte	0x39
	.byte	0x5f
	.byte	0x79
	.byte	0x91
	.byte	0x39
	.byte	0x91
	.byte	0x79
	.byte	0x67
	.byte	0x59
	.byte	0x89
	.byte	0x59
	.byte	0x78
	.byte	0x59
	.align	2, 0
	.type	 sLineSectionTrainer1Round1,object
sLineSectionTrainer1Round1:
	.byte	0x9
	.byte	0x4
	.short	0x6021
	.byte	0xa
	.byte	0x4
	.short	0x6023
	.byte	0xa
	.byte	0x5
	.short	0x6047
	.byte	0xb
	.byte	0x5
	.short	0x6043
	.size	 sLineSectionTrainer1Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer1Round2,object
sLineSectionTrainer1Round2:
	.byte	0x9
	.byte	0x4
	.short	0x6021
	.byte	0xa
	.byte	0x4
	.short	0x6023
	.byte	0xa
	.byte	0x5
	.short	0x6047
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6043
	.size	 sLineSectionTrainer1Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer1Semifinal,object
sLineSectionTrainer1Semifinal:
	.byte	0x9
	.byte	0x4
	.short	0x6021
	.byte	0xa
	.byte	0x4
	.short	0x6023
	.byte	0xa
	.byte	0x5
	.short	0x6047
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.size	 sLineSectionTrainer1Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer1Final,object
sLineSectionTrainer1Final:
	.byte	0x9
	.byte	0x4
	.short	0x6021
	.byte	0xa
	.byte	0x4
	.short	0x6023
	.byte	0xa
	.byte	0x5
	.short	0x6047
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 sLineSectionTrainer1Final,52
	.align	2, 0
	.type	 sLineSectionTrainer9Round1,object
sLineSectionTrainer9Round1:
	.byte	0x9
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x5
	.short	0x6027
	.byte	0xb
	.byte	0x5
	.short	0x6043
	.size	 sLineSectionTrainer9Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer9Round2,object
sLineSectionTrainer9Round2:
	.byte	0x9
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x5
	.short	0x6027
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6043
	.size	 sLineSectionTrainer9Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer9Semifinal,object
sLineSectionTrainer9Semifinal:
	.byte	0x9
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x5
	.short	0x6027
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.size	 sLineSectionTrainer9Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer9Final,object
sLineSectionTrainer9Final:
	.byte	0x9
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x6
	.short	0x6021
	.byte	0xa
	.byte	0x5
	.short	0x6027
	.byte	0xb
	.byte	0x5
	.short	0x6023
	.byte	0xb
	.byte	0x6
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6047
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 sLineSectionTrainer9Final,52
	.align	2, 0
	.type	 sLineSectionTrainer13Round1,object
sLineSectionTrainer13Round1:
	.byte	0x9
	.byte	0x8
	.short	0x6021
	.byte	0xa
	.byte	0x8
	.short	0x6023
	.byte	0xa
	.byte	0x9
	.short	0x6047
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.size	 sLineSectionTrainer13Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer13Round2,object
sLineSectionTrainer13Round2:
	.byte	0x9
	.byte	0x8
	.short	0x6021
	.byte	0xa
	.byte	0x8
	.short	0x6023
	.byte	0xa
	.byte	0x9
	.short	0x6047
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6043
	.size	 sLineSectionTrainer13Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer13Semifinal,object
sLineSectionTrainer13Semifinal:
	.byte	0x9
	.byte	0x8
	.short	0x6021
	.byte	0xa
	.byte	0x8
	.short	0x6023
	.byte	0xa
	.byte	0x9
	.short	0x6047
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.size	 sLineSectionTrainer13Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer13Final,object
sLineSectionTrainer13Final:
	.byte	0x9
	.byte	0x8
	.short	0x6021
	.byte	0xa
	.byte	0x8
	.short	0x6023
	.byte	0xa
	.byte	0x9
	.short	0x6047
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 sLineSectionTrainer13Final,52
	.align	2, 0
	.type	 sLineSectionTrainer5Round1,object
sLineSectionTrainer5Round1:
	.byte	0x9
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0x9
	.short	0x6027
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.size	 sLineSectionTrainer5Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer5Round2,object
sLineSectionTrainer5Round2:
	.byte	0x9
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0x9
	.short	0x6027
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6043
	.size	 sLineSectionTrainer5Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer5Semifinal,object
sLineSectionTrainer5Semifinal:
	.byte	0x9
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0x9
	.short	0x6027
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.size	 sLineSectionTrainer5Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer5Final,object
sLineSectionTrainer5Final:
	.byte	0x9
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0xa
	.short	0x6021
	.byte	0xa
	.byte	0x9
	.short	0x6027
	.byte	0xb
	.byte	0x9
	.short	0x6021
	.byte	0xb
	.byte	0x8
	.short	0x6027
	.byte	0xb
	.byte	0x7
	.short	0x6027
	.byte	0xc
	.byte	0x7
	.short	0x6023
	.byte	0xc
	.byte	0x8
	.short	0x6027
	.byte	0xc
	.byte	0x9
	.short	0x6027
	.byte	0xc
	.byte	0xa
	.short	0x6027
	.byte	0xc
	.byte	0xb
	.short	0x603b
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 sLineSectionTrainer5Final,52
	.align	2, 0
	.type	 sLineSectionTrainer8Round1,object
sLineSectionTrainer8Round1:
	.byte	0x9
	.byte	0xc
	.short	0x6021
	.byte	0xa
	.byte	0xc
	.short	0x6023
	.byte	0xa
	.byte	0xd
	.short	0x6047
	.byte	0xb
	.byte	0xd
	.short	0x6043
	.size	 sLineSectionTrainer8Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer8Round2,object
sLineSectionTrainer8Round2:
	.byte	0x9
	.byte	0xc
	.short	0x6021
	.byte	0xa
	.byte	0xc
	.short	0x6023
	.byte	0xa
	.byte	0xd
	.short	0x6047
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.size	 sLineSectionTrainer8Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer8Semifinal,object
sLineSectionTrainer8Semifinal:
	.byte	0x9
	.byte	0xc
	.short	0x6021
	.byte	0xa
	.byte	0xc
	.short	0x6023
	.byte	0xa
	.byte	0xd
	.short	0x6047
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.size	 sLineSectionTrainer8Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer8Final,object
sLineSectionTrainer8Final:
	.byte	0x9
	.byte	0xc
	.short	0x6021
	.byte	0xa
	.byte	0xc
	.short	0x6023
	.byte	0xa
	.byte	0xd
	.short	0x6047
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 sLineSectionTrainer8Final,52
	.align	2, 0
	.type	 sLineSectionTrainer16Round1,object
sLineSectionTrainer16Round1:
	.byte	0x9
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xd
	.short	0x6027
	.byte	0xb
	.byte	0xd
	.short	0x6043
	.size	 sLineSectionTrainer16Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer16Round2,object
sLineSectionTrainer16Round2:
	.byte	0x9
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xd
	.short	0x6027
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.size	 sLineSectionTrainer16Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer16Semifinal,object
sLineSectionTrainer16Semifinal:
	.byte	0x9
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xd
	.short	0x6027
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.size	 sLineSectionTrainer16Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer16Final,object
sLineSectionTrainer16Final:
	.byte	0x9
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xe
	.short	0x6021
	.byte	0xa
	.byte	0xd
	.short	0x6027
	.byte	0xb
	.byte	0xd
	.short	0x6023
	.byte	0xb
	.byte	0xe
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6047
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 sLineSectionTrainer16Final,52
	.align	2, 0
	.type	 sLineSectionTrainer12Round1,object
sLineSectionTrainer12Round1:
	.byte	0x9
	.byte	0x10
	.short	0x6021
	.byte	0xa
	.byte	0x10
	.short	0x6023
	.byte	0xa
	.byte	0x11
	.short	0x6047
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.size	 sLineSectionTrainer12Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer12Round2,object
sLineSectionTrainer12Round2:
	.byte	0x9
	.byte	0x10
	.short	0x6021
	.byte	0xa
	.byte	0x10
	.short	0x6023
	.byte	0xa
	.byte	0x11
	.short	0x6047
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.size	 sLineSectionTrainer12Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer12Semifinal,object
sLineSectionTrainer12Semifinal:
	.byte	0x9
	.byte	0x10
	.short	0x6021
	.byte	0xa
	.byte	0x10
	.short	0x6023
	.byte	0xa
	.byte	0x11
	.short	0x6047
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.size	 sLineSectionTrainer12Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer12Final,object
sLineSectionTrainer12Final:
	.byte	0x9
	.byte	0x10
	.short	0x6021
	.byte	0xa
	.byte	0x10
	.short	0x6023
	.byte	0xa
	.byte	0x11
	.short	0x6047
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 sLineSectionTrainer12Final,52
	.align	2, 0
	.type	 sLineSectionTrainer4Round1,object
sLineSectionTrainer4Round1:
	.byte	0x9
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x11
	.short	0x6027
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.size	 sLineSectionTrainer4Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer4Round2,object
sLineSectionTrainer4Round2:
	.byte	0x9
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x11
	.short	0x6027
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.size	 sLineSectionTrainer4Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer4Semifinal,object
sLineSectionTrainer4Semifinal:
	.byte	0x9
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x11
	.short	0x6027
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.size	 sLineSectionTrainer4Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer4Final,object
sLineSectionTrainer4Final:
	.byte	0x9
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x12
	.short	0x602b
	.byte	0xa
	.byte	0x11
	.short	0x6027
	.byte	0xb
	.byte	0x11
	.short	0x6021
	.byte	0xb
	.byte	0x10
	.short	0x6027
	.byte	0xb
	.byte	0xf
	.short	0x6027
	.byte	0xc
	.byte	0xf
	.short	0x6021
	.byte	0xc
	.byte	0xe
	.short	0x6033
	.byte	0xc
	.byte	0xd
	.short	0x6032
	.byte	0xc
	.byte	0xc
	.short	0x6031
	.byte	0xc
	.byte	0xb
	.short	0x6030
	.byte	0xd
	.byte	0xb
	.short	0x602c
	.byte	0xe
	.byte	0xb
	.short	0x602d
	.size	 sLineSectionTrainer4Final,52
	.align	2, 0
	.type	 sLineSectionTrainer3Round1,object
sLineSectionTrainer3Round1:
	.byte	0x14
	.byte	0x4
	.short	0x6021
	.byte	0x13
	.byte	0x4
	.short	0x6025
	.byte	0x13
	.byte	0x5
	.short	0x6049
	.byte	0x12
	.byte	0x5
	.short	0x6045
	.size	 sLineSectionTrainer3Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer3Round2,object
sLineSectionTrainer3Round2:
	.byte	0x14
	.byte	0x4
	.short	0x6021
	.byte	0x13
	.byte	0x4
	.short	0x6025
	.byte	0x13
	.byte	0x5
	.short	0x6049
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6045
	.size	 sLineSectionTrainer3Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer3Semifinal,object
sLineSectionTrainer3Semifinal:
	.byte	0x14
	.byte	0x4
	.short	0x6021
	.byte	0x13
	.byte	0x4
	.short	0x6025
	.byte	0x13
	.byte	0x5
	.short	0x6049
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.size	 sLineSectionTrainer3Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer3Final,object
sLineSectionTrainer3Final:
	.byte	0x14
	.byte	0x4
	.short	0x6021
	.byte	0x13
	.byte	0x4
	.short	0x6025
	.byte	0x13
	.byte	0x5
	.short	0x6049
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 sLineSectionTrainer3Final,52
	.align	2, 0
	.type	 sLineSectionTrainer11Round1,object
sLineSectionTrainer11Round1:
	.byte	0x14
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x5
	.short	0x6029
	.byte	0x12
	.byte	0x5
	.short	0x6045
	.size	 sLineSectionTrainer11Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer11Round2,object
sLineSectionTrainer11Round2:
	.byte	0x14
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x5
	.short	0x6029
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6045
	.size	 sLineSectionTrainer11Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer11Semifinal,object
sLineSectionTrainer11Semifinal:
	.byte	0x14
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x5
	.short	0x6029
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.size	 sLineSectionTrainer11Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer11Final,object
sLineSectionTrainer11Final:
	.byte	0x14
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x6
	.short	0x6021
	.byte	0x13
	.byte	0x5
	.short	0x6029
	.byte	0x12
	.byte	0x5
	.short	0x6025
	.byte	0x12
	.byte	0x6
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6049
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 sLineSectionTrainer11Final,52
	.align	2, 0
	.type	 sLineSectionTrainer15Round1,object
sLineSectionTrainer15Round1:
	.byte	0x14
	.byte	0x8
	.short	0x6021
	.byte	0x13
	.byte	0x8
	.short	0x6025
	.byte	0x13
	.byte	0x9
	.short	0x6049
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.size	 sLineSectionTrainer15Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer15Round2,object
sLineSectionTrainer15Round2:
	.byte	0x14
	.byte	0x8
	.short	0x6021
	.byte	0x13
	.byte	0x8
	.short	0x6025
	.byte	0x13
	.byte	0x9
	.short	0x6049
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6045
	.size	 sLineSectionTrainer15Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer15Semifinal,object
sLineSectionTrainer15Semifinal:
	.byte	0x14
	.byte	0x8
	.short	0x6021
	.byte	0x13
	.byte	0x8
	.short	0x6025
	.byte	0x13
	.byte	0x9
	.short	0x6049
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.size	 sLineSectionTrainer15Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer15Final,object
sLineSectionTrainer15Final:
	.byte	0x14
	.byte	0x8
	.short	0x6021
	.byte	0x13
	.byte	0x8
	.short	0x6025
	.byte	0x13
	.byte	0x9
	.short	0x6049
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 sLineSectionTrainer15Final,52
	.align	2, 0
	.type	 sLineSectionTrainer7Round1,object
sLineSectionTrainer7Round1:
	.byte	0x14
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0x9
	.short	0x6029
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.size	 sLineSectionTrainer7Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer7Round2,object
sLineSectionTrainer7Round2:
	.byte	0x14
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0x9
	.short	0x6029
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6045
	.size	 sLineSectionTrainer7Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer7Semifinal,object
sLineSectionTrainer7Semifinal:
	.byte	0x14
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0x9
	.short	0x6029
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.size	 sLineSectionTrainer7Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer7Final,object
sLineSectionTrainer7Final:
	.byte	0x14
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0xa
	.short	0x6021
	.byte	0x13
	.byte	0x9
	.short	0x6029
	.byte	0x12
	.byte	0x9
	.short	0x6021
	.byte	0x12
	.byte	0x8
	.short	0x6029
	.byte	0x12
	.byte	0x7
	.short	0x6029
	.byte	0x11
	.byte	0x7
	.short	0x6025
	.byte	0x11
	.byte	0x8
	.short	0x6029
	.byte	0x11
	.byte	0x9
	.short	0x6029
	.byte	0x11
	.byte	0xa
	.short	0x6029
	.byte	0x11
	.byte	0xb
	.short	0x603c
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 sLineSectionTrainer7Final,52
	.align	2, 0
	.type	 sLineSectionTrainer6Round1,object
sLineSectionTrainer6Round1:
	.byte	0x14
	.byte	0xc
	.short	0x6021
	.byte	0x13
	.byte	0xc
	.short	0x6025
	.byte	0x13
	.byte	0xd
	.short	0x6049
	.byte	0x12
	.byte	0xd
	.short	0x6045
	.size	 sLineSectionTrainer6Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer6Round2,object
sLineSectionTrainer6Round2:
	.byte	0x14
	.byte	0xc
	.short	0x6021
	.byte	0x13
	.byte	0xc
	.short	0x6025
	.byte	0x13
	.byte	0xd
	.short	0x6049
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.size	 sLineSectionTrainer6Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer6Semifinal,object
sLineSectionTrainer6Semifinal:
	.byte	0x14
	.byte	0xc
	.short	0x6021
	.byte	0x13
	.byte	0xc
	.short	0x6025
	.byte	0x13
	.byte	0xd
	.short	0x6049
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.size	 sLineSectionTrainer6Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer6Final,object
sLineSectionTrainer6Final:
	.byte	0x14
	.byte	0xc
	.short	0x6021
	.byte	0x13
	.byte	0xc
	.short	0x6025
	.byte	0x13
	.byte	0xd
	.short	0x6049
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 sLineSectionTrainer6Final,52
	.align	2, 0
	.type	 sLineSectionTrainer14Round1,object
sLineSectionTrainer14Round1:
	.byte	0x14
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xd
	.short	0x6029
	.byte	0x12
	.byte	0xd
	.short	0x6045
	.size	 sLineSectionTrainer14Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer14Round2,object
sLineSectionTrainer14Round2:
	.byte	0x14
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xd
	.short	0x6029
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.size	 sLineSectionTrainer14Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer14Semifinal,object
sLineSectionTrainer14Semifinal:
	.byte	0x14
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xd
	.short	0x6029
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.size	 sLineSectionTrainer14Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer14Final,object
sLineSectionTrainer14Final:
	.byte	0x14
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xe
	.short	0x6021
	.byte	0x13
	.byte	0xd
	.short	0x6029
	.byte	0x12
	.byte	0xd
	.short	0x6025
	.byte	0x12
	.byte	0xe
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6049
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 sLineSectionTrainer14Final,52
	.align	2, 0
	.type	 sLineSectionTrainer10Round1,object
sLineSectionTrainer10Round1:
	.byte	0x14
	.byte	0x10
	.short	0x6021
	.byte	0x13
	.byte	0x10
	.short	0x6025
	.byte	0x13
	.byte	0x11
	.short	0x6049
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.size	 sLineSectionTrainer10Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer10Round2,object
sLineSectionTrainer10Round2:
	.byte	0x14
	.byte	0x10
	.short	0x6021
	.byte	0x13
	.byte	0x10
	.short	0x6025
	.byte	0x13
	.byte	0x11
	.short	0x6049
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.size	 sLineSectionTrainer10Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer10Semifinal,object
sLineSectionTrainer10Semifinal:
	.byte	0x14
	.byte	0x10
	.short	0x6021
	.byte	0x13
	.byte	0x10
	.short	0x6025
	.byte	0x13
	.byte	0x11
	.short	0x6049
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.size	 sLineSectionTrainer10Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer10Final,object
sLineSectionTrainer10Final:
	.byte	0x14
	.byte	0x10
	.short	0x6021
	.byte	0x13
	.byte	0x10
	.short	0x6025
	.byte	0x13
	.byte	0x11
	.short	0x6049
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 sLineSectionTrainer10Final,52
	.align	2, 0
	.type	 sLineSectionTrainer2Round1,object
sLineSectionTrainer2Round1:
	.byte	0x14
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x11
	.short	0x6029
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.size	 sLineSectionTrainer2Round1,16
	.align	2, 0
	.type	 sLineSectionTrainer2Round2,object
sLineSectionTrainer2Round2:
	.byte	0x14
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x11
	.short	0x6029
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.size	 sLineSectionTrainer2Round2,28
	.align	2, 0
	.type	 sLineSectionTrainer2Semifinal,object
sLineSectionTrainer2Semifinal:
	.byte	0x14
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x11
	.short	0x6029
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.size	 sLineSectionTrainer2Semifinal,44
	.align	2, 0
	.type	 sLineSectionTrainer2Final,object
sLineSectionTrainer2Final:
	.byte	0x14
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x12
	.short	0x602b
	.byte	0x13
	.byte	0x11
	.short	0x6029
	.byte	0x12
	.byte	0x11
	.short	0x6021
	.byte	0x12
	.byte	0x10
	.short	0x6029
	.byte	0x12
	.byte	0xf
	.short	0x6029
	.byte	0x11
	.byte	0xf
	.short	0x6021
	.byte	0x11
	.byte	0xe
	.short	0x6038
	.byte	0x11
	.byte	0xd
	.short	0x6037
	.byte	0x11
	.byte	0xc
	.short	0x6036
	.byte	0x11
	.byte	0xb
	.short	0x6035
	.byte	0x10
	.byte	0xb
	.short	0x602f
	.byte	0xf
	.byte	0xb
	.short	0x602e
	.size	 sLineSectionTrainer2Final,52
	.align	2, 0
	.type	 sTourneyTreeLineSections,object
	.size	 sTourneyTreeLineSections,256
sTourneyTreeLineSections:
	.word	sLineSectionTrainer1Round1
	.word	sLineSectionTrainer1Round2
	.word	sLineSectionTrainer1Semifinal
	.word	sLineSectionTrainer1Final
	.word	sLineSectionTrainer2Round1
	.word	sLineSectionTrainer2Round2
	.word	sLineSectionTrainer2Semifinal
	.word	sLineSectionTrainer2Final
	.word	sLineSectionTrainer3Round1
	.word	sLineSectionTrainer3Round2
	.word	sLineSectionTrainer3Semifinal
	.word	sLineSectionTrainer3Final
	.word	sLineSectionTrainer4Round1
	.word	sLineSectionTrainer4Round2
	.word	sLineSectionTrainer4Semifinal
	.word	sLineSectionTrainer4Final
	.word	sLineSectionTrainer5Round1
	.word	sLineSectionTrainer5Round2
	.word	sLineSectionTrainer5Semifinal
	.word	sLineSectionTrainer5Final
	.word	sLineSectionTrainer6Round1
	.word	sLineSectionTrainer6Round2
	.word	sLineSectionTrainer6Semifinal
	.word	sLineSectionTrainer6Final
	.word	sLineSectionTrainer7Round1
	.word	sLineSectionTrainer7Round2
	.word	sLineSectionTrainer7Semifinal
	.word	sLineSectionTrainer7Final
	.word	sLineSectionTrainer8Round1
	.word	sLineSectionTrainer8Round2
	.word	sLineSectionTrainer8Semifinal
	.word	sLineSectionTrainer8Final
	.word	sLineSectionTrainer9Round1
	.word	sLineSectionTrainer9Round2
	.word	sLineSectionTrainer9Semifinal
	.word	sLineSectionTrainer9Final
	.word	sLineSectionTrainer10Round1
	.word	sLineSectionTrainer10Round2
	.word	sLineSectionTrainer10Semifinal
	.word	sLineSectionTrainer10Final
	.word	sLineSectionTrainer11Round1
	.word	sLineSectionTrainer11Round2
	.word	sLineSectionTrainer11Semifinal
	.word	sLineSectionTrainer11Final
	.word	sLineSectionTrainer12Round1
	.word	sLineSectionTrainer12Round2
	.word	sLineSectionTrainer12Semifinal
	.word	sLineSectionTrainer12Final
	.word	sLineSectionTrainer13Round1
	.word	sLineSectionTrainer13Round2
	.word	sLineSectionTrainer13Semifinal
	.word	sLineSectionTrainer13Final
	.word	sLineSectionTrainer14Round1
	.word	sLineSectionTrainer14Round2
	.word	sLineSectionTrainer14Semifinal
	.word	sLineSectionTrainer14Final
	.word	sLineSectionTrainer15Round1
	.word	sLineSectionTrainer15Round2
	.word	sLineSectionTrainer15Semifinal
	.word	sLineSectionTrainer15Final
	.word	sLineSectionTrainer16Round1
	.word	sLineSectionTrainer16Round2
	.word	sLineSectionTrainer16Semifinal
	.word	sLineSectionTrainer16Final
	.type	 sTourneyTreeLineSectionArrayCounts,object
	.size	 sTourneyTreeLineSectionArrayCounts,64
sTourneyTreeLineSectionArrayCounts:
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
	.byte	0x4
	.byte	0x7
	.byte	0xb
	.byte	0xd
.text
	.align	2, 0
	.globl	CallBattleDomeFunction
	.type	 CallBattleDomeFunction,function
	.thumb_func
CallBattleDomeFunction:
	push	{lr}
	ldr	r1, .L3
	ldr	r0, .L3+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sBattleDomeFunctions
	.word	gSpecialVar_0x8004
.Lfe1:
	.size	 CallBattleDomeFunction,.Lfe1-CallBattleDomeFunction
	.align	2, 0
	.type	 InitDomeChallenge,function
	.thumb_func
InitDomeChallenge:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L7
	ldr	r0, [r4]
	ldr	r1, .L7+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r5, r0, #0x1e
	ldr	r0, .L7+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r0, [r4]
	ldr	r2, .L7+0xc
	add	r0, r0, r2
	mov	r6, #0x0
	strb	r6, [r0]
	ldr	r1, [r4]
	add	r2, r2, #0xa
	add	r0, r1, r2
	strh	r6, [r0]
	ldr	r0, .L7+0x4
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r4]
	ldr	r2, .L7+0x4
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r4, [r4]
	ldr	r0, .L7+0x10
	add	r3, r4, r0
	ldr	r2, .L7+0x14
	lsl	r1, r5, #0x2
	lsl	r0, r7, #0x3
	add	r1, r1, r0
	add	r1, r1, r2
	ldr	r0, [r3]
	ldr	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L6	@cond_branch
	lsl	r0, r5, #0x1
	lsl	r1, r7, #0x2
	add	r0, r0, r1
	ldr	r2, .L7+0x18
	add	r1, r4, r2
	add	r1, r1, r0
	strh	r6, [r1]
.L6:
	ldr	r0, .L7+0x1c
	ldr	r0, [r0]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	mov	r2, #0x5
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x0
	bl	SetDynamicWarp
	ldr	r0, .L7+0x20
	strh	r6, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0x40ce
	.word	0xca8
	.word	0xcdc
	.word	sWinStreakFlags
	.word	0xd0c
	.word	gSaveBlock1Ptr
	.word	gTrainerBattleOpponent_A
.Lfe2:
	.size	 InitDomeChallenge,.Lfe2-InitDomeChallenge
	.align	2, 0
	.type	 GetDomeData,function
	.thumb_func
GetDomeData:
	push	{r4, r5, r6, lr}
	ldr	r0, .L38
	ldr	r0, [r0]
	ldr	r1, .L38+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r5, r0, #0x1e
	ldr	r0, .L38+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L38+0xc
	ldrh	r0, [r0]
	cmp	r0, #0x9
	bls	.LCB153
	b	.L10	@long jump
.LCB153:
	lsl	r0, r0, #0x2
	ldr	r1, .L38+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L39:
	.align	2, 0
.L38:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0x40ce
	.word	gSpecialVar_0x8005
	.word	.L34
	.align	2, 0
	.align	2, 0
.L34:
	.word	.L11
	.word	.L12
	.word	.L14
	.word	.L15
	.word	.L16
	.word	.L17
	.word	.L18
	.word	.L25
	.word	.L32
	.word	.L33
.L11:
	ldr	r3, .L40
	ldr	r0, .L40+0x4
	ldr	r0, [r0]
	lsl	r1, r5, #0x1
	lsl	r2, r6, #0x2
	add	r1, r1, r2
	ldr	r2, .L40+0x8
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r3]
	b	.L10
.L41:
	.align	2, 0
.L40:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd0c
.L12:
	ldr	r4, .L42
	ldr	r0, .L42+0x4
	ldr	r2, [r0]
	ldr	r3, .L42+0x8
	add	r2, r2, r3
	ldr	r3, .L42+0xc
	lsl	r0, r5, #0x2
	lsl	r1, r6, #0x3
	add	r0, r0, r1
	add	r0, r0, r3
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	strh	r0, [r4]
	b	.L10
.L43:
	.align	2, 0
.L42:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xcdc
	.word	sWinStreakFlags
.L14:
	ldr	r1, .L44
	ldr	r0, .L44+0x4
	ldr	r0, [r0]
	ldr	r2, .L44+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	b	.L36
.L45:
	.align	2, 0
.L44:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L15:
	ldr	r1, .L46
	ldr	r0, .L46+0x4
	ldr	r0, [r0]
	ldr	r3, .L46+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	b	.L36
.L47:
	.align	2, 0
.L46:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L16:
	ldr	r1, .L48
	ldr	r0, .L48+0x4
	ldr	r0, [r0]
	ldr	r2, .L48+0x8
	add	r0, r0, r2
	b	.L37
.L49:
	.align	2, 0
.L48:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L17:
	ldr	r1, .L50
	ldr	r0, .L50+0x4
	ldr	r0, [r0]
	ldr	r3, .L50+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	b	.L36
.L51:
	.align	2, 0
.L50:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L18:
	ldr	r0, .L52
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L19	@cond_branch
	cmp	r5, #0
	beq	.L20	@cond_branch
	ldr	r1, .L52+0x4
	ldr	r0, .L52+0x8
	ldr	r0, [r0]
	ldr	r2, .L52+0xc
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	b	.L36
.L53:
	.align	2, 0
.L52:
	.word	0x40ce
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L20:
	ldr	r1, .L54
	ldr	r0, .L54+0x4
	ldr	r0, [r0]
	ldr	r3, .L54+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	b	.L36
.L55:
	.align	2, 0
.L54:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L19:
	cmp	r5, #0
	beq	.L23	@cond_branch
	ldr	r1, .L56
	ldr	r0, .L56+0x4
	ldr	r0, [r0]
	ldr	r2, .L56+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	b	.L36
.L57:
	.align	2, 0
.L56:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L23:
	ldr	r1, .L58
	ldr	r0, .L58+0x4
	ldr	r0, [r0]
	ldr	r3, .L58+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1f
	b	.L36
.L59:
	.align	2, 0
.L58:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L25:
	ldr	r0, .L60
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L26	@cond_branch
	cmp	r5, #0
	beq	.L27	@cond_branch
	ldr	r1, .L60+0x4
	ldr	r0, .L60+0x8
	ldr	r0, [r0]
	ldr	r2, .L60+0xc
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsr	r0, r0, #0x7
	strh	r0, [r1]
	b	.L10
.L61:
	.align	2, 0
.L60:
	.word	0x40ce
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L27:
	ldr	r1, .L62
	ldr	r0, .L62+0x4
	ldr	r0, [r0]
	ldr	r3, .L62+0x8
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x19
	b	.L36
.L63:
	.align	2, 0
.L62:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L26:
	cmp	r5, #0
	beq	.L30	@cond_branch
	ldr	r1, .L64
	ldr	r0, .L64+0x4
	ldr	r0, [r0]
	ldr	r2, .L64+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	b	.L36
.L65:
	.align	2, 0
.L64:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L30:
	ldr	r1, .L66
	ldr	r0, .L66+0x4
	ldr	r0, [r0]
	ldr	r3, .L66+0x8
	add	r0, r0, r3
.L37:
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
.L36:
	lsr	r0, r0, #0x1f
	strh	r0, [r1]
	b	.L10
.L67:
	.align	2, 0
.L66:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd08
.L32:
	bl	ClearSelectedPartyOrder
	ldr	r2, .L68
	ldr	r0, .L68+0x4
	ldr	r0, [r0]
	mov	r1, #0xcb
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	strb	r1, [r2]
	ldrh	r0, [r0]
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x1]
	b	.L10
.L69:
	.align	2, 0
.L68:
	.word	gSelectedOrderFromParty
	.word	gSaveBlock2Ptr
.L33:
	ldr	r2, .L70
	ldr	r0, .L70+0x4
	ldr	r1, [r0]
	ldr	r3, .L70+0x8
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r3, .L70+0xc
	add	r0, r0, r3
	ldrb	r1, [r1]
	add	r0, r0, r1
	strh	r0, [r2]
.L10:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
	.word	0xd0a
	.word	0xfffd
.Lfe3:
	.size	 GetDomeData,.Lfe3-GetDomeData
	.align	2, 0
	.type	 SetDomeData,function
	.thumb_func
SetDomeData:
	push	{r4, r5, lr}
	ldr	r0, .L102
	ldr	r0, [r0]
	ldr	r1, .L102+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r4, r0, #0x1e
	ldr	r0, .L102+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L102+0xc
	ldrh	r0, [r0]
	cmp	r0, #0x8
	bls	.LCB597
	b	.L73	@long jump
.LCB597:
	lsl	r0, r0, #0x2
	ldr	r1, .L102+0x10
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L103:
	.align	2, 0
.L102:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0x40ce
	.word	gSpecialVar_0x8005
	.word	.L97
	.align	2, 0
	.align	2, 0
.L97:
	.word	.L74
	.word	.L75
	.word	.L78
	.word	.L79
	.word	.L80
	.word	.L81
	.word	.L82
	.word	.L89
	.word	.L96
.L74:
	ldr	r0, .L104
	ldr	r2, [r0]
	lsl	r0, r4, #0x1
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	ldr	r1, .L104+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldr	r0, .L104+0x8
	ldrh	r0, [r0]
	strh	r0, [r2]
	b	.L73
.L105:
	.align	2, 0
.L104:
	.word	gSaveBlock2Ptr
	.word	0xd0c
	.word	gSpecialVar_0x8006
.L75:
	ldr	r0, .L106
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L76	@cond_branch
	ldr	r0, .L106+0x4
	ldr	r2, [r0]
	ldr	r0, .L106+0x8
	add	r2, r2, r0
	ldr	r3, .L106+0xc
	lsl	r1, r4, #0x2
	lsl	r0, r5, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r0, [r2]
	ldr	r1, [r1]
	orr	r0, r0, r1
	str	r0, [r2]
	b	.L73
.L107:
	.align	2, 0
.L106:
	.word	gSpecialVar_0x8006
	.word	gSaveBlock2Ptr
	.word	0xcdc
	.word	sWinStreakFlags
.L76:
	ldr	r0, .L108
	ldr	r2, [r0]
	ldr	r1, .L108+0x4
	add	r2, r2, r1
	ldr	r3, .L108+0x8
	lsl	r1, r4, #0x2
	lsl	r0, r5, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r0, [r2]
	ldr	r1, [r1]
	and	r0, r0, r1
	str	r0, [r2]
	b	.L73
.L109:
	.align	2, 0
.L108:
	.word	gSaveBlock2Ptr
	.word	0xcdc
	.word	sWinStreakMasks
.L78:
	ldr	r0, .L110
	ldr	r2, [r0]
	ldr	r0, .L110+0x4
	ldrb	r0, [r0]
	ldr	r1, .L110+0x8
	add	r2, r2, r1
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x2
	neg	r0, r0
	b	.L99
.L111:
	.align	2, 0
.L110:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L79:
	ldr	r0, .L112
	ldr	r3, [r0]
	ldr	r0, .L112+0x4
	ldrb	r0, [r0]
	ldr	r2, .L112+0x8
	add	r3, r3, r2
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3]
	mov	r0, #0x3
	neg	r0, r0
	b	.L100
.L113:
	.align	2, 0
.L112:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L80:
	ldr	r0, .L114
	ldr	r3, [r0]
	ldr	r0, .L114+0x4
	ldrb	r0, [r0]
	ldr	r1, .L114+0x8
	add	r3, r3, r1
	b	.L101
.L115:
	.align	2, 0
.L114:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L81:
	ldr	r0, .L116
	ldr	r3, [r0]
	ldr	r0, .L116+0x4
	ldrb	r0, [r0]
	ldr	r2, .L116+0x8
	add	r3, r3, r2
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r3]
	mov	r0, #0x9
	neg	r0, r0
	b	.L100
.L117:
	.align	2, 0
.L116:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L82:
	ldr	r0, .L118
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x1
	bne	.L83	@cond_branch
	cmp	r4, #0
	beq	.L84	@cond_branch
	ldr	r0, .L118+0x4
	ldr	r3, [r0]
	ldr	r0, .L118+0x8
	ldrb	r0, [r0]
	ldr	r2, .L118+0xc
	add	r3, r3, r2
	and	r1, r1, r0
	lsl	r1, r1, #0x5
	ldrb	r2, [r3]
	mov	r0, #0x21
	neg	r0, r0
	b	.L100
.L119:
	.align	2, 0
.L118:
	.word	0x40ce
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L84:
	ldr	r0, .L120
	ldr	r3, [r0]
	ldr	r0, .L120+0x4
	ldrb	r0, [r0]
	ldr	r2, .L120+0x8
	add	r3, r3, r2
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	ldrb	r2, [r3]
	mov	r0, #0x11
	neg	r0, r0
	b	.L100
.L121:
	.align	2, 0
.L120:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L83:
	cmp	r4, #0
	beq	.L87	@cond_branch
	ldr	r0, .L122
	ldr	r3, [r0]
	ldr	r0, .L122+0x4
	ldrb	r0, [r0]
	ldr	r1, .L122+0x8
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3]
	mov	r0, #0x3
	neg	r0, r0
	b	.L100
.L123:
	.align	2, 0
.L122:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L87:
	ldr	r0, .L124
	ldr	r2, [r0]
	ldr	r0, .L124+0x4
	ldrb	r0, [r0]
	ldr	r1, .L124+0x8
	add	r2, r2, r1
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x2
	neg	r0, r0
	b	.L99
.L125:
	.align	2, 0
.L124:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L89:
	ldr	r0, .L126
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0x1
	bne	.L90	@cond_branch
	cmp	r4, #0
	beq	.L91	@cond_branch
	ldr	r0, .L126+0x4
	ldr	r2, [r0]
	ldr	r0, .L126+0x8
	ldrb	r1, [r0]
	ldr	r0, .L126+0xc
	add	r2, r2, r0
	lsl	r1, r1, #0x7
	ldrb	r3, [r2]
	mov	r0, #0x7f
.L99:
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L73
.L127:
	.align	2, 0
.L126:
	.word	0x40ce
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L91:
	ldr	r0, .L128
	ldr	r3, [r0]
	ldr	r0, .L128+0x4
	ldrb	r0, [r0]
	ldr	r2, .L128+0x8
	add	r3, r3, r2
	and	r1, r1, r0
	lsl	r1, r1, #0x6
	ldrb	r2, [r3]
	mov	r0, #0x41
	neg	r0, r0
	b	.L100
.L129:
	.align	2, 0
.L128:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L90:
	cmp	r4, #0
	beq	.L94	@cond_branch
	ldr	r0, .L130
	ldr	r3, [r0]
	ldr	r0, .L130+0x4
	ldrb	r0, [r0]
	ldr	r1, .L130+0x8
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r3]
	mov	r0, #0x9
	neg	r0, r0
	b	.L100
.L131:
	.align	2, 0
.L130:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L94:
	ldr	r0, .L132
	ldr	r3, [r0]
	ldr	r0, .L132+0x4
	ldrb	r0, [r0]
	ldr	r2, .L132+0x8
	add	r3, r3, r2
.L101:
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
.L100:
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L73
.L133:
	.align	2, 0
.L132:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8006
	.word	0xd08
.L96:
	ldr	r0, .L134
	ldr	r2, [r0]
	ldr	r0, .L134+0x4
	ldrb	r1, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	mov	r0, #0xcb
	lsl	r0, r0, #0x4
	add	r2, r2, r0
	strh	r1, [r2]
.L73:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L135:
	.align	2, 0
.L134:
	.word	gSaveBlock2Ptr
	.word	gSelectedOrderFromParty
.Lfe4:
	.size	 SetDomeData,.Lfe4-SetDomeData
	.align	2, 0
	.type	 InitDomeTrainers,function
	.thumb_func
InitDomeTrainers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x3c
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x20
	bl	AllocZeroed
	str	r0, [sp, #0x18]
	mov	r0, #0x18
	bl	AllocZeroed
	str	r0, [sp, #0x1c]
	ldr	r4, .L258
	ldr	r1, [r4]
	ldr	r2, .L258+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	add	r0, r0, #0x1
	ldr	r3, .L258+0x8
	add	r1, r1, r3
	strb	r0, [r1]
	ldr	r0, .L258+0xc
	bl	VarGet
	ldr	r1, [r4]
	add	r0, r0, #0x1
	ldr	r5, .L258+0x10
	add	r1, r1, r5
	strb	r0, [r1]
	ldr	r2, [r4]
	ldr	r7, .L258+0x14
	add	r3, r2, r7
	ldrh	r0, [r3]
	ldr	r5, .L258+0x18
	add	r1, r5, #0
	orr	r0, r0, r1
	strh	r0, [r3]
	ldr	r3, .L258+0x1c
	add	r2, r2, r3
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r4]
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r0, #0x19
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r1, r1, r3
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r7, #0x0
	mov	sl, r7
	mov	r8, r4
	ldr	r0, .L258+0x20
	mov	r9, r0
	mov	r4, #0x0
.L140:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L258+0x24
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r3, #0x64
	mul	r0, r0, r3
	add	r0, r0, r9
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	mov	r5, r8
	ldr	r1, [r5]
	ldr	r7, .L258+0x28
	add	r1, r1, r7
	add	r1, r1, r4
	strh	r0, [r1]
	mov	r5, #0x0
	mov	r0, sl
	lsl	r7, r0, #0x4
	add	r6, r7, #0
.L144:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r2, .L258+0x24
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r3, #0x64
	mul	r0, r0, r3
	add	r0, r0, r9
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, #0x0
	bl	GetMonData
	mov	r2, r8
	ldr	r1, [r2]
	ldr	r3, .L258+0x2c
	add	r1, r1, r3
	add	r1, r1, r6
	strh	r0, [r1]
	add	r6, r6, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L144	@cond_branch
	mov	r5, #0x0
	ldr	r6, .L258
.L149:
	ldr	r0, [r6]
	ldr	r1, .L258+0x24
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	add	r0, r0, r9
	add	r1, r5, #0
	add	r1, r1, #0x1a
	mov	r2, #0x0
	bl	GetMonData
	ldr	r1, [r6]
	add	r2, r5, r7
	ldr	r3, .L258+0x30
	add	r1, r1, r3
	add	r1, r1, r2
	strb	r0, [r1]
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L149	@cond_branch
	mov	r5, r8
	ldr	r0, [r5]
	ldr	r1, .L258+0x24
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	mov	r2, #0x64
	mul	r0, r0, r2
	add	r0, r0, r9
	bl	GetNature
	ldr	r1, [r5]
	add	r1, r1, r7
	ldr	r3, .L258+0x34
	add	r1, r1, r3
	strb	r0, [r1]
	add	r4, r4, #0x2
	mov	r5, #0x1
	add	sl, sl, r5
	mov	r7, sl
	cmp	r7, #0x2
	ble	.L140	@cond_branch
	mov	sl, r5
	mov	r0, #0x4
	str	r0, [sp, #0x34]
	mov	r1, #0x6
	str	r1, [sp, #0x38]
.L155:
	mov	r2, sl
	cmp	r2, #0x5
	ble	.L169	@cond_branch
.L157:
	bl	GetCurrentFacilityWinStreak
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetRandomScaledFrontierTrainerId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r5, #0x1
	cmp	r5, sl
	bge	.L159	@cond_branch
	ldr	r3, .L258
	ldr	r0, [r3]
	ldr	r7, .L258+0x38
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r2, r3, #0
	cmp	r0, r4
	beq	.L159	@cond_branch
	ldr	r3, .L258+0x14
.L162:
	add	r5, r5, #0x1
	cmp	r5, sl
	bge	.L159	@cond_branch
	ldr	r0, [r2]
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r4
	bne	.L162	@cond_branch
.L159:
	cmp	r5, sl
	bne	.L157	@cond_branch
	ldr	r0, .L258
	ldr	r3, [r0]
	ldr	r1, [sp, #0x34]
	add	r3, r3, r1
	ldr	r2, .L258+0x14
	add	r3, r3, r2
	ldr	r5, .L258+0x18
	add	r0, r5, #0
	add	r2, r4, #0
	and	r2, r2, r0
	ldrh	r0, [r3]
	ldr	r7, .L258+0x3c
	add	r1, r7, #0
	b	.L255
.L259:
	.align	2, 0
.L258:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0xd0a
	.word	0x40ce
	.word	0xd0b
	.word	0xd24
	.word	0x3ff
	.word	0xd25
	.word	gPlayerParty+-0x64
	.word	0xcaa
	.word	0xd64
	.word	0xefc
	.word	0xf04
	.word	0xf0a
	.word	0xd28
	.word	-0x400
.L169:
	bl	GetCurrentFacilityWinStreak
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetRandomScaledFrontierTrainerId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r5, #0x1
	cmp	r5, sl
	bge	.L171	@cond_branch
	ldr	r1, .L261
	ldr	r0, [r1]
	ldr	r2, .L261+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r2, r1, #0
	cmp	r0, r4
	beq	.L171	@cond_branch
	ldr	r3, .L261+0x8
.L174:
	add	r5, r5, #0x1
	cmp	r5, sl
	bge	.L171	@cond_branch
	ldr	r0, [r2]
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r4
	bne	.L174	@cond_branch
.L171:
	cmp	r5, sl
	bne	.L169	@cond_branch
	ldr	r5, .L261
	ldr	r3, [r5]
	ldr	r7, [sp, #0x34]
	add	r3, r3, r7
	ldr	r0, .L261+0x8
	add	r3, r3, r0
	ldr	r1, .L261+0xc
	add	r0, r1, #0
	add	r2, r4, #0
	and	r2, r2, r0
	ldrh	r0, [r3]
	ldr	r5, .L261+0x10
	add	r1, r5, #0
.L255:
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3]
	mov	r5, #0x0
	lsl	r4, r4, #0x10
	str	r4, [sp, #0x2c]
	ldr	r7, [sp, #0x38]
	str	r7, [sp, #0x20]
.L183:
	lsl	r0, r5, #0x1
	mov	r9, r0
	add	r1, r5, #0x1
	str	r1, [sp, #0x24]
	lsl	r2, r5, #0x2
	str	r2, [sp, #0x28]
.L184:
	ldr	r3, [sp, #0x2c]
	lsr	r0, r3, #0x10
	bl	GetRandomFrontierMonFromSet
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r7, #0x0
	cmp	r7, r5
	bge	.L186	@cond_branch
	ldr	r0, .L261
	ldr	r0, [r0]
	ldr	r1, [sp, #0x8]
	mov	r8, r1
	ldr	r2, [sp, #0xc]
	mov	ip, r2
	ldr	r3, .L261+0x14
	add	r0, r0, r3
	ldr	r1, [sp, #0x20]
	add	r4, r1, r0
.L190:
	ldrh	r3, [r4]
	cmp	r3, r6
	beq	.L186	@cond_branch
	ldr	r2, .L261+0x18
	ldr	r1, [r2]
	lsl	r0, r6, #0x4
	add	r2, r0, r1
	ldrh	r0, [r2]
	cmp	r8, r0
	beq	.L186	@cond_branch
	cmp	ip, r0
	beq	.L186	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xa]
	ldrb	r2, [r2, #0xa]
	cmp	r0, r2
	beq	.L186	@cond_branch
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, r5
	blt	.L190	@cond_branch
.L186:
	cmp	r7, r5
	bne	.L184	@cond_branch
	ldr	r3, .L261
	ldr	r0, [r3]
	ldr	r1, [sp, #0x38]
	add	r1, r1, r9
	ldr	r5, .L261+0x14
	add	r0, r0, r5
	add	r0, r0, r1
	strh	r6, [r0]
	ldr	r2, [sp, #0x28]
	add	r2, r2, sp
	add	r2, r2, #0x8
	ldr	r0, .L261+0x18
	ldr	r1, [r0]
	lsl	r0, r6, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2]
	ldr	r5, [sp, #0x24]
	cmp	r5, #0x2
	ble	.L183	@cond_branch
	ldr	r2, [r3]
	ldr	r7, [sp, #0x34]
	add	r2, r2, r7
	ldr	r0, .L261+0x1c
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r3, #0x5
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r5, .L261
	ldr	r2, [r5]
	add	r2, r2, r7
	ldr	r7, .L261+0x1c
	add	r2, r2, r7
	ldrb	r0, [r2]
	sub	r3, r3, #0x14
	add	r1, r3, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r5]
	ldr	r5, [sp, #0x34]
	add	r1, r1, r5
	add	r1, r1, r7
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	strb	r0, [r1]
	add	r5, r5, #0x4
	str	r5, [sp, #0x34]
	ldr	r7, [sp, #0x38]
	add	r7, r7, #0x6
	str	r7, [sp, #0x38]
	mov	r0, #0x1
	add	sl, sl, r0
	mov	r1, sl
	cmp	r1, #0xf
	bgt	.LCB1629
	b	.L155	@long jump
.LCB1629:
	mov	r7, #0x0
	ldr	r2, [sp, #0x18]
	strh	r7, [r2]
	mov	r3, #0x0
	mov	sl, r3
	ldr	r6, .L261+0x20
	ldr	r5, .L261+0x24
.L201:
	ldr	r0, .L261
	ldr	r0, [r0]
	mov	r2, sl
	lsl	r1, r2, #0x1
	ldr	r3, .L261+0x28
	add	r0, r0, r3
	add	r0, r0, r1
	ldrh	r0, [r0]
	sub	r4, r0, #0x1
	mov	r0, #0x64
	mul	r4, r4, r0
	ldr	r0, .L261+0x2c
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x3b
	mov	r2, #0x0
	bl	GetMonData
	ldr	r2, [sp, #0x18]
	ldrh	r1, [r2]
	add	r1, r1, r0
	strh	r1, [r2]
	add	r0, r4, #0
	mov	r1, #0x3c
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x18]
	ldrh	r1, [r3]
	add	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x3e
	mov	r2, #0x0
	bl	GetMonData
	ldr	r2, [sp, #0x18]
	ldrh	r1, [r2]
	add	r1, r1, r0
	strh	r1, [r2]
	add	r0, r4, #0
	mov	r1, #0x3f
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x18]
	ldrh	r1, [r3]
	add	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0x3d
	mov	r2, #0x0
	bl	GetMonData
	ldr	r2, [sp, #0x18]
	ldrh	r1, [r2]
	add	r1, r1, r0
	strh	r1, [r2]
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x18]
	ldrh	r1, [r3]
	add	r1, r1, r0
	strh	r1, [r3]
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	orr	r7, r7, r0
	add	r0, r4, #0
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r0, [r0]
	orr	r7, r7, r0
	mov	r0, #0x1
	add	sl, sl, r0
	mov	r1, sl
	cmp	r1, #0x2
	ble	.L201	@cond_branch
	mov	r4, #0x0
	mov	r1, #0x1
	mov	r5, #0x1f
.L206:
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L207	@cond_branch
	add	r4, r4, #0x1
.L207:
	asr	r7, r7, #0x1
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L206	@cond_branch
	bl	SetFacilityPtrsGetLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	add	r2, r0, #0
	mov	r0, r4
	mul	r0, r0, r2
	mov	r1, #0x14
	bl	__divsi3
	ldr	r3, [sp, #0x18]
	ldrh	r1, [r3]
	add	r1, r1, r0
	strh	r1, [r3]
	mov	r5, #0x1
	mov	sl, r5
	add	r6, r3, #0
	add	r6, r6, #0x2
	mov	r7, #0x2
	str	r7, [sp, #0x30]
.L212:
	mov	r7, #0x0
	strh	r7, [r6]
	ldr	r1, .L261
	ldr	r0, [r1]
	mov	r2, sl
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	ldr	r3, .L261+0x8
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	bl	GetDomeTrainerMonIvs
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r0, [sp, #0x30]
	mov	r9, r0
.L216:
	ldr	r1, .L261
	ldr	r0, [r1]
	mov	r4, r9
	add	r4, r4, sl
	add	r4, r4, r5
	lsl	r4, r4, #0x1
	ldr	r2, .L261+0x14
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r1, [r0]
	ldr	r3, .L261+0x18
	ldr	r0, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrb	r3, [r1, #0xb]
	ldrb	r1, [r1, #0xc]
	str	r1, [sp]
	ldr	r1, [sp, #0x1c]
	str	r1, [sp, #0x4]
	ldr	r1, [sp, #0x14]
	mov	r2, r8
	bl	CalcDomeMonStats
	ldr	r2, [sp, #0x1c]
	ldr	r1, [r2, #0x4]
	ldrh	r0, [r6]
	add	r0, r0, r1
	ldr	r1, [r2, #0x8]
	add	r0, r0, r1
	ldr	r1, [r2, #0x10]
	add	r0, r0, r1
	ldr	r1, [r2, #0x14]
	add	r0, r0, r1
	ldr	r1, [r2, #0xc]
	add	r0, r0, r1
	ldr	r1, [r2]
	add	r0, r0, r1
	strh	r0, [r6]
	ldr	r3, .L261
	ldr	r0, [r3]
	ldr	r1, .L261+0x14
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	ldr	r2, .L261+0x18
	ldr	r1, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r3, .L261+0x24
	add	r1, r1, r3
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x2
	ldr	r2, .L261+0x20
	add	r0, r0, r2
	ldr	r0, [r0]
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	orr	r7, r7, r0
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L216	@cond_branch
	mov	r4, #0x0
	mov	r1, #0x1
	mov	r5, #0x1f
.L221:
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L222	@cond_branch
	add	r4, r4, #0x1
.L222:
	asr	r7, r7, #0x1
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L221	@cond_branch
	ldr	r3, [sp, #0x14]
	mov	r0, r4
	mul	r0, r0, r3
	mov	r1, #0x14
	bl	__divsi3
	ldrh	r1, [r6]
	add	r1, r1, r0
	strh	r1, [r6]
	add	r6, r6, #0x2
	ldr	r5, [sp, #0x30]
	add	r5, r5, #0x2
	str	r5, [sp, #0x30]
	mov	r7, #0x1
	add	sl, sl, r7
	mov	r0, sl
	cmp	r0, #0xf
	ble	.L212	@cond_branch
	mov	r1, #0x0
	mov	sl, r1
	ldr	r2, .L261+0xc
	mov	r8, r2
.L228:
	mov	r5, sl
	add	r5, r5, #0x1
	add	r7, r5, #0
	cmp	r5, #0xf
	bgt	.L227	@cond_branch
	mov	r3, sl
	lsl	r0, r3, #0x1
	ldr	r1, [sp, #0x18]
	add	r6, r0, r1
	lsl	r0, r5, #0x1
	add	r4, r0, r1
.L232:
	ldrh	r1, [r6]
	ldrh	r0, [r4]
	cmp	r1, r0
	bcc	.L256	@cond_branch
	cmp	r1, r0
	bne	.L231	@cond_branch
	ldr	r0, .L261
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r0, r1, r0
	ldr	r2, .L261+0x8
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r2, r0, #0x16
	lsr	r0, r2, #0x16
	cmp	r0, r8
	bne	.L236	@cond_branch
.L256:
	mov	r0, sl
	add	r1, r5, #0
	ldr	r2, [sp, #0x18]
	bl	SwapDomeTrainers
	b	.L260
.L262:
	.align	2, 0
.L261:
	.word	gSaveBlock2Ptr
	.word	0xd28
	.word	0xd24
	.word	0x3ff
	.word	-0x400
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	0xd25
	.word	gBitTable
	.word	gBaseStats
	.word	0xcaa
	.word	gPlayerParty
.L260:
	b	.L231
.L236:
	mov	r3, sl
	lsl	r0, r3, #0x2
	add	r0, r1, r0
	ldr	r1, .L263
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	cmp	r0, r2
	bls	.L231	@cond_branch
	mov	r0, sl
	add	r1, r5, #0
	ldr	r2, [sp, #0x18]
	bl	SwapDomeTrainers
.L231:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0xf
	ble	.L232	@cond_branch
.L227:
	mov	sl, r7
	mov	r2, sl
	cmp	r2, #0xe
	ble	.L228	@cond_branch
	bl	GetFrontierBrainStatus
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L241	@cond_branch
	mov	r3, #0x0
	mov	sl, r3
	ldr	r0, .L263+0x4
	ldr	r1, [r0]
	ldr	r4, .L263
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldr	r3, .L263+0x8
	add	r2, r0, #0
	ldr	r6, .L263+0xc
	cmp	r1, r3
	beq	.L243	@cond_branch
	add	r5, r2, #0
.L244:
	mov	r7, #0x1
	add	sl, sl, r7
	mov	r0, sl
	cmp	r0, #0xf
	bgt	.L243	@cond_branch
	ldr	r0, [r5]
	mov	r7, sl
	lsl	r1, r7, #0x2
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	bne	.L244	@cond_branch
.L243:
	mov	r1, sl
	lsl	r0, r1, #0x1
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L248	@cond_branch
	mov	r5, #0x0
	ldr	r2, [r2]
	ldr	r3, .L263
	add	r2, r2, r3
	ldrh	r1, [r2]
	ldr	r0, .L263+0x10
	and	r0, r0, r1
	ldr	r7, .L263+0x14
	add	r1, r7, #0
	b	.L257
.L264:
	.align	2, 0
.L263:
	.word	0xd24
	.word	gSaveBlock2Ptr
	.word	0x3ff
	.word	sTrainerNamePositions
	.word	-0x400
	.word	0x3fe
.L248:
	mov	r5, #0x1
	ldr	r2, [r2]
	ldr	r0, .L265
	add	r2, r2, r0
	ldrh	r1, [r2]
	ldr	r0, .L265+0x4
	and	r0, r0, r1
	ldr	r3, .L265+0x8
	add	r1, r3, #0
.L257:
	orr	r0, r0, r1
	strh	r0, [r2]
	mov	r7, #0x0
	mov	sl, r7
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r4, r0, #0x1
.L253:
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	GetFrontierBrainMonSpecies
	ldr	r1, .L265+0xc
	ldr	r1, [r1]
	ldr	r2, .L265+0x10
	add	r1, r1, r2
	add	r1, r1, r4
	strh	r0, [r1]
	add	r4, r4, #0x2
	mov	r3, #0x1
	add	sl, sl, r3
	mov	r5, sl
	cmp	r5, #0x2
	ble	.L253	@cond_branch
.L241:
	ldr	r0, [sp, #0x18]
	bl	Free
	ldr	r0, [sp, #0x1c]
	bl	Free
	add	sp, sp, #0x3c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	0xd28
	.word	-0x400
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
.Lfe5:
	.size	 InitDomeTrainers,.Lfe5-InitDomeTrainers
	.align	2, 0
	.type	 CalcDomeMonStats,function
	.thumb_func
CalcDomeMonStats:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	add	r7, r1, #0
	mov	r9, r2
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x40]
	mov	r8, r2
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x18]
	mov	r1, #0x0
	add	r4, r5, #0
	mov	r3, #0x1
	mov	r2, #0x5
.L271:
	add	r0, r4, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L270	@cond_branch
	add	r1, r1, #0x1
.L270:
	lsr	r4, r4, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L271	@cond_branch
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r0, r6, #0x3
	mov	sl, r0
	mov	r1, #0x0
	mov	ip, r1
	mov	r1, sp
	mov	r2, #0x5
.L277:
	mov	r0, ip
	str	r0, [r1]
	add	r0, r5, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L276	@cond_branch
	str	r3, [r1]
.L276:
	lsl	r0, r4, #0x19
	lsr	r4, r0, #0x18
	add	r1, r1, #0x4
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L277	@cond_branch
	ldr	r0, .L289
	cmp	r6, r0
	bne	.L280	@cond_branch
	mov	r0, #0x1
	b	.L288
.L290:
	.align	2, 0
.L289:
	.word	0x12f
.L280:
	mov	r2, sl
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L291
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp]
	cmp	r0, #0
	bge	.L282	@cond_branch
	add	r0, r0, #0x3
.L282:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r0, r0, r7
	add	r0, r0, #0xa
.L288:
	mov	r1, r8
	str	r0, [r1]
	mov	r2, sl
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	ldr	r1, .L291
	add	r4, r0, r1
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	bge	.L283	@cond_branch
	add	r0, r0, #0x3
.L283:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r0, r8
	str	r1, [r0, #0x4]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x1
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0x4]
	ldrb	r0, [r4, #0x2]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp, #0x8]
	cmp	r0, #0
	bge	.L284	@cond_branch
	add	r0, r0, #0x3
.L284:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r0, r8
	str	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x2
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0x8]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp, #0xc]
	cmp	r0, #0
	bge	.L285	@cond_branch
	add	r0, r0, #0x3
.L285:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r0, r8
	str	r1, [r0, #0xc]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x3
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0xc]
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x1
	mov	r2, r9
	add	r1, r0, r2
	ldr	r0, [sp, #0x10]
	cmp	r0, #0
	bge	.L286	@cond_branch
	add	r0, r0, #0x3
.L286:
	asr	r0, r0, #0x2
	add	r0, r1, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r0, r8
	str	r1, [r0, #0x10]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x4
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0x10]
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1
	mov	r1, r9
	add	r2, r0, r1
	ldr	r0, [sp, #0x14]
	cmp	r0, #0
	bge	.L287	@cond_branch
	add	r0, r0, #0x3
.L287:
	asr	r0, r0, #0x2
	add	r0, r2, r0
	mul	r0, r0, r7
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	add	r1, r1, #0x5
	mov	r2, r8
	str	r1, [r2, #0x14]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, [sp, #0x18]
	mov	r2, #0x5
	bl	ModifyStatByNature
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	str	r0, [r1, #0x14]
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	gBaseStats
.Lfe6:
	.size	 CalcDomeMonStats,.Lfe6-CalcDomeMonStats
	.align	2, 0
	.type	 SwapDomeTrainers,function
	.thumb_func
SwapDomeTrainers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r3, r0, #0x1
	mov	ip, r3
	add	r4, r3, r2
	ldrh	r5, [r4]
	lsl	r7, r1, #0x1
	mov	r9, r7
	add	r2, r2, r9
	ldrh	r3, [r2]
	strh	r3, [r4]
	strh	r5, [r2]
	ldr	r2, .L299
	ldr	r5, [r2]
	lsl	r6, r0, #0x2
	add	r6, r5, r6
	ldr	r3, .L299+0x4
	add	r6, r6, r3
	ldrh	r7, [r6]
	mov	sl, r7
	mov	r2, sl
	lsl	r2, r2, #0x16
	mov	r8, r2
	lsl	r2, r1, #0x2
	add	r5, r5, r2
	add	r5, r5, r3
	ldrh	r4, [r5]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x16
	ldr	r3, .L299+0x8
	add	r2, r3, #0
	mov	r7, sl
	and	r2, r2, r7
	orr	r2, r2, r4
	strh	r2, [r6]
	mov	r2, r8
	lsr	r2, r2, #0x16
	mov	r8, r2
	ldrh	r2, [r5]
	and	r3, r3, r2
	mov	r7, r8
	orr	r3, r3, r7
	strh	r3, [r5]
	ldr	r2, .L299
	mov	r8, r2
	add	ip, ip, r0
	add	r9, r9, r1
	mov	r3, r9
	lsl	r4, r3, #0x1
	mov	r7, ip
	lsl	r3, r7, #0x1
	ldr	r7, .L299+0xc
	mov	r6, #0x2
.L297:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r7
	add	r2, r0, r3
	ldrh	r5, [r2]
	add	r0, r0, r4
	ldrh	r1, [r0]
	strh	r1, [r2]
	strh	r5, [r0]
	add	r4, r4, #0x2
	add	r3, r3, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L297	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	-0x400
	.word	0xd64
.Lfe7:
	.size	 SwapDomeTrainers,.Lfe7-SwapDomeTrainers
	.align	2, 0
	.type	 BufferDomeRoundText,function
	.thumb_func
BufferDomeRoundText:
	push	{lr}
	ldr	r0, .L302
	ldr	r2, .L302+0x4
	ldr	r1, .L302+0x8
	ldr	r1, [r1]
	ldr	r3, .L302+0xc
	add	r1, r1, r3
	ldrh	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	pop	{r0}
	bx	r0
.L303:
	.align	2, 0
.L302:
	.word	gStringVar1
	.word	gRoundsStringTable
	.word	gSaveBlock2Ptr
	.word	0xcb2
.Lfe8:
	.size	 BufferDomeRoundText,.Lfe8-BufferDomeRoundText
	.align	2, 0
	.type	 BufferDomeOpponentName,function
	.thumb_func
BufferDomeOpponentName:
	push	{lr}
	ldr	r0, .L305
	ldr	r2, .L305+0x4
	ldr	r1, .L305+0x8
	ldr	r1, [r1]
	ldr	r3, .L305+0xc
	add	r1, r1, r3
	ldrh	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L305+0x10
	ldr	r1, .L305+0x14
	ldrh	r1, [r1]
	bl	CopyDomeTrainerName
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gStringVar1
	.word	gRoundsStringTable
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	gStringVar2
	.word	gTrainerBattleOpponent_A
.Lfe9:
	.size	 BufferDomeOpponentName,.Lfe9-BufferDomeOpponentName
	.align	2, 0
	.type	 InitDomeOpponentParty,function
	.thumb_func
InitDomeOpponentParty:
	push	{r4, r5, lr}
	ldr	r1, .L308
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r4, .L308+0x4
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, #0x0
	bl	GetMonData
	ldr	r5, .L308+0x8
	str	r0, [r5]
	add	r4, r4, #0x64
	add	r0, r4, #0
	mov	r1, #0x3a
	mov	r2, #0x0
	bl	GetMonData
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r5]
	bl	CalculatePlayerPartyCount
	ldr	r0, .L308+0xc
	ldrh	r0, [r0]
	bl	TrainerIdToTournamentId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CreateDomeOpponentMons
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gPlayerPartyLostHP
	.word	gPlayerParty
	.word	sPlayerPartyMaxHP
	.word	gTrainerBattleOpponent_A
.Lfe10:
	.size	 InitDomeOpponentParty,.Lfe10-InitDomeOpponentParty
	.align	2, 0
	.type	 CreateDomeOpponentMon,function
	.thumb_func
CreateDomeOpponentMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x30
	add	r5, r2, #0
	str	r3, [sp, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	str	r1, [sp, #0x28]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, sp, #0xc
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	ldr	r0, [sp, #0x28]
	bl	GetDomeTrainerMonIvs
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x2c]
	bl	SetFacilityPtrsGetLevel
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x64
	ldr	r4, [sp, #0x10]
	mov	r3, r4
	mul	r3, r3, r0
	str	r3, [sp, #0x18]
	ldr	r6, .L317
	add	r0, r3, r6
	ldr	r7, .L317+0x4
	ldr	r4, [r7]
	lsl	r5, r5, #0x1
	ldr	r3, [sp, #0x28]
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x1
	add	r1, r5, r1
	ldr	r6, .L317+0x8
	add	r4, r4, r6
	add	r4, r4, r1
	ldrh	r3, [r4]
	ldr	r7, .L317+0xc
	ldr	r7, [r7]
	mov	r8, r7
	lsl	r3, r3, #0x4
	add	r3, r3, r8
	ldrh	r1, [r3]
	ldrb	r3, [r3, #0xc]
	ldr	r6, [sp, #0x2c]
	str	r6, [sp]
	ldrh	r4, [r4]
	lsl	r4, r4, #0x4
	add	r4, r4, r8
	ldrb	r4, [r4, #0xb]
	str	r4, [sp, #0x4]
	ldr	r7, [sp, #0x14]
	str	r7, [sp, #0x8]
	bl	CreateMonWithEVSpreadNatureOTID
	add	r0, sp, #0xc
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	mov	r6, #0x0
	ldr	r2, [sp, #0x18]
	str	r2, [sp, #0x1c]
	mov	sl, r5
	ldr	r3, .L317+0x8
	mov	r9, r3
	ldr	r3, .L317+0xc
	mov	r4, sl
	str	r4, [sp, #0x20]
.L314:
	ldr	r7, .L317+0x4
	ldr	r1, [r7]
	ldr	r2, [sp, #0x28]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	mov	r8, r0
	mov	r5, sl
	add	r5, r5, r8
	add	r1, r1, r9
	add	r1, r1, r5
	ldrh	r0, [r1]
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	lsl	r4, r6, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0]
	lsl	r2, r6, #0x18
	lsr	r2, r2, #0x18
	mov	ip, r2
	ldr	r7, [sp, #0x1c]
	ldr	r2, .L317
	add	r0, r7, r2
	mov	r2, ip
	str	r3, [sp, #0x24]
	bl	SetMonMoveSlot
	ldr	r7, .L317+0x4
	ldr	r0, [r7]
	add	r0, r0, r9
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldr	r3, [sp, #0x24]
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	add	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r0, [r0]
	cmp	r0, #0xda
	bne	.L313	@cond_branch
	mov	r1, #0x0
	add	r0, sp, #0xc
	strb	r1, [r0]
.L313:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L314	@cond_branch
	mov	r0, #0x64
	ldr	r1, [sp, #0x10]
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L317
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x20
	add	r2, sp, #0xc
	bl	SetMonData
	ldr	r0, .L317+0x4
	ldr	r0, [r0]
	ldr	r1, [sp, #0x20]
	add	r1, r1, r8
	ldr	r2, .L317+0x8
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, .L317+0xc
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0xa]
	lsl	r2, r2, #0x1
	ldr	r0, .L317+0x10
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	add	sp, sp, #0x30
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	gEnemyParty
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gBattleFrontierHeldItems
.Lfe11:
	.size	 CreateDomeOpponentMon,.Lfe11-CreateDomeOpponentMon
	.align	2, 0
	.type	 CreateDomeOpponentMons,function
	.thumb_func
CreateDomeOpponentMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r6, #0x0
	bl	ZeroEnemyPartyMons
	mov	r0, r8
	bl	GetDomeTrainerSelectedMons
	add	r5, r0, #0
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r7, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bls	.L320	@cond_branch
	mov	r4, #0x0
.L324:
	mov	r0, #0x1
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L325	@cond_branch
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r3, r7, #0
	bl	CreateDomeOpponentMon
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L325:
	asr	r5, r5, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L324	@cond_branch
	b	.L327
.L320:
	mov	r4, #0x2
.L331:
	mov	r0, #0x4
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L332	@cond_branch
	lsl	r2, r4, #0x18
	lsr	r2, r2, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r3, r7, #0
	bl	CreateDomeOpponentMon
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L332:
	lsl	r5, r5, #0x1
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L331	@cond_branch
.L327:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 CreateDomeOpponentMons,.Lfe12-CreateDomeOpponentMons
	.align	2, 0
	.globl	GetDomeTrainerSelectedMons
	.type	 GetDomeTrainerSelectedMons,function
	.thumb_func
GetDomeTrainerSelectedMons:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r5, r4, #0
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L335	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	SelectOpponentMonsUsingPersonality
	cmp	r0, #0
	bne	.L337	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	SelectOpponentMonsUsingOtId
	b	.L337
.L335:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	SelectOpponentMonsUsingOtId
	cmp	r0, #0
	bne	.L337	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	SelectOpponentMonsUsingPersonality
.L337:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 GetDomeTrainerSelectedMons,.Lfe13-GetDomeTrainerSelectedMons
	.align	2, 0
	.type	 SelectOpponentMonsUsingPersonality,function
	.thumb_func
SelectOpponentMonsUsingPersonality:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, r8
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x18]
.L343:
	mov	r2, r9
	lsl	r0, r2, #0x2
	mov	r2, sp
	add	r1, r2, r0
	mov	r0, #0x0
	str	r0, [r1]
	mov	r7, #0x0
	mov	r0, r9
	add	r0, r0, #0x1
	str	r0, [sp, #0x14]
	add	r5, r1, #0
	mov	r1, r9
	lsl	r1, r1, #0x1
	str	r1, [sp, #0x10]
.L347:
	mov	r6, #0x0
	add	r2, r7, #0x1
	mov	sl, r2
.L351:
	ldr	r0, .L358
	ldr	r1, [r0]
	ldr	r2, [sp, #0x18]
	add	r0, r1, r2
	ldr	r2, .L358+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	ldr	r2, .L358+0x8
	cmp	r0, r2
	bne	.L352	@cond_branch
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsl	r1, r7, #0x18
	lsr	r0, r0, #0x18
	lsr	r1, r1, #0x18
	bl	GetFrontierBrainMonMove
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	b	.L357
.L359:
	.align	2, 0
.L358:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	0x3fe
.L352:
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x1
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r2, .L360
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L360+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	lsl	r1, r7, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0]
.L357:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L360+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	bl	GetTypeEffectivenessPoints
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r5]
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L351	@cond_branch
	mov	r7, sl
	cmp	r7, #0x3
	ble	.L347	@cond_branch
	ldr	r0, [sp, #0x14]
	mov	r9, r0
	cmp	r0, #0x2
	ble	.L343	@cond_branch
	mov	r0, sp
	ldr	r1, [sp, #0xc]
	bl	SelectOpponentMonsFromParty
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L361:
	.align	2, 0
.L360:
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gPlayerParty
.Lfe14:
	.size	 SelectOpponentMonsUsingPersonality,.Lfe14-SelectOpponentMonsUsingPersonality
	.align	2, 0
	.type	 SelectOpponentMonsUsingOtId,function
	.thumb_func
SelectOpponentMonsUsingOtId:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0xc]
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, r8
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x18]
.L366:
	mov	r2, r9
	lsl	r0, r2, #0x2
	mov	r2, sp
	add	r1, r2, r0
	mov	r0, #0x0
	str	r0, [r1]
	mov	r7, #0x0
	mov	r0, r9
	add	r0, r0, #0x1
	str	r0, [sp, #0x14]
	add	r5, r1, #0
	mov	r1, r9
	lsl	r1, r1, #0x1
	str	r1, [sp, #0x10]
.L370:
	mov	r6, #0x0
	add	r2, r7, #0x1
	mov	sl, r2
.L374:
	ldr	r0, .L381
	ldr	r1, [r0]
	ldr	r2, [sp, #0x18]
	add	r0, r1, r2
	ldr	r2, .L381+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	ldr	r2, .L381+0x8
	cmp	r0, r2
	bne	.L375	@cond_branch
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsl	r1, r7, #0x18
	lsr	r0, r0, #0x18
	lsr	r1, r1, #0x18
	bl	GetFrontierBrainMonMove
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	b	.L380
.L382:
	.align	2, 0
.L381:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	0x3fe
.L375:
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x1
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r2, .L383
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L383+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	lsl	r1, r7, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0]
.L380:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, .L383+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetTypeEffectivenessPoints
	ldr	r1, [r5]
	add	r1, r1, r0
	str	r1, [r5]
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L374	@cond_branch
	mov	r7, sl
	cmp	r7, #0x3
	ble	.L370	@cond_branch
	ldr	r0, [sp, #0x14]
	mov	r9, r0
	cmp	r0, #0x2
	ble	.L366	@cond_branch
	mov	r0, sp
	ldr	r1, [sp, #0xc]
	bl	SelectOpponentMonsFromParty
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L384:
	.align	2, 0
.L383:
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gPlayerParty
.Lfe15:
	.size	 SelectOpponentMonsUsingOtId,.Lfe15-SelectOpponentMonsUsingOtId
	.align	2, 0
	.type	 SelectOpponentMonsFromParty,function
	.thumb_func
SelectOpponentMonsFromParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	mov	sl, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r3, #0x2
	add	r0, sp, #0x8
.L389:
	str	r3, [r0]
	sub	r0, r0, #0x4
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L389	@cond_branch
	mov	r3, sl
	ldr	r2, [r3]
	ldr	r0, [r3, #0x4]
	cmp	r2, r0
	bne	.L391	@cond_branch
	ldr	r0, [r3, #0x8]
	cmp	r2, r0
	bne	.L391	@cond_branch
	cmp	r1, #0
	beq	.L398	@cond_branch
	mov	r3, #0x0
	ldr	r4, .L416
.L395:
	str	r3, [sp, #0x14]
	bl	Random
	mov	r1, #0x3
	and	r1, r1, r0
	ldr	r3, [sp, #0x14]
	cmp	r1, #0x3
	beq	.L393	@cond_branch
	lsl	r0, r1, #0x2
	add	r0, r0, r4
	ldr	r1, [r0]
	ldr	r0, [sp, #0xc]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L393	@cond_branch
	ldr	r0, [sp, #0xc]
	orr	r0, r0, r1
	str	r0, [sp, #0xc]
	add	r3, r3, #0x1
.L393:
	cmp	r3, #0x2
	bne	.L395	@cond_branch
	b	.L398
.L417:
	.align	2, 0
.L416:
	.word	gBitTable
.L391:
	mov	r3, #0x0
	mov	r9, sp
	mov	r8, sl
.L402:
	add	r2, r3, #0x1
	cmp	r2, #0x2
	bgt	.L401	@cond_branch
	mov	r6, r8
	mov	r7, r9
	lsl	r0, r2, #0x2
	mov	r1, sp
	add	r5, r0, r1
	mov	r1, sl
	add	r4, r0, r1
.L406:
	ldr	r0, [r6]
	ldr	r1, [r4]
	cmp	r0, r1
	bge	.L407	@cond_branch
	str	r1, [r6]
	str	r0, [r4]
	ldr	r1, [r7]
	ldr	r0, [r5]
	str	r0, [r7]
	str	r1, [r5]
.L407:
	ldr	r1, [r6]
	ldr	r0, [r4]
	cmp	r1, r0
	bne	.L405	@cond_branch
	str	r2, [sp, #0x10]
	str	r3, [sp, #0x14]
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	ldr	r2, [sp, #0x10]
	ldr	r3, [sp, #0x14]
	cmp	r1, #0
	beq	.L405	@cond_branch
	ldr	r1, [r6]
	ldr	r0, [r4]
	str	r0, [r6]
	str	r1, [r4]
	ldr	r1, [r7]
	ldr	r0, [r5]
	str	r0, [r7]
	str	r1, [r5]
.L405:
	add	r5, r5, #0x4
	add	r4, r4, #0x4
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L406	@cond_branch
.L401:
	mov	r4, #0x4
	add	r9, r9, r4
	add	r8, r8, r4
	add	r3, r3, #0x1
	cmp	r3, #0x1
	ble	.L402	@cond_branch
	ldr	r2, .L418
	mov	r1, sp
	mov	r3, #0x1
.L414:
	ldmia	r1!, {r0}
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldr	r4, [sp, #0xc]
	orr	r4, r4, r0
	str	r4, [sp, #0xc]
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L414	@cond_branch
.L398:
	ldr	r0, [sp, #0xc]
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L419:
	.align	2, 0
.L418:
	.word	gBitTable
.Lfe16:
	.size	 SelectOpponentMonsFromParty,.Lfe16-SelectOpponentMonsFromParty
	.align	2, 0
	.type	 GetTypeEffectivenessPoints,function
	.thumb_func
GetTypeEffectivenessPoints:
	.syntax unified

    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x8
    adds r3, r0, 0
    adds r4, r1, 0
    str r2, [sp]
    movs r6, 0
    movs r2, 0x14
    cmp r3, 0
    beq _0818FFF0
    ldr r0, =0x0000ffff
    cmp r3, r0
    beq _0818FFF0
    ldr r0, =gBattleMoves
    lsls r1, r3, 1
    adds r1, r3
    lsls r1, 2
    adds r3, r1, r0
    ldrb r0, [r3, 0x1]
    cmp r0, 0
    bne _0818FFFC
_0818FFF0:
    movs r0, 0
    b _08190156
    .pool
_0818FFFC:
    ldr r1, =gBaseStats
    lsls r0, r4, 3
    subs r0, r4
    lsls r0, 2
    adds r0, r1
    ldrb r1, [r0, 0x6]
    mov r10, r1
    ldrb r1, [r0, 0x7]
    mov r9, r1
    ldrb r0, [r0, 0x16]
    mov r8, r0
    ldrb r3, [r3, 0x2]
    str r3, [sp, 0x4]
    cmp r0, 0x1A
    bne _0819002C
    cmp r3, 0x4
    bne _0819002C
    ldr r0, [sp]
    cmp r0, 0x1
    bne _081900AA
    movs r2, 0x8
    b _081900A4
    .pool
_0819002C:
    ldr r0, =gTypeEffectiveness
    adds r1, r6, r0
    ldrb r0, [r1]
    ldr r7, =gTypeEffectiveness
    cmp r0, 0xFF
    beq _081900A4
    adds r4, r1, 0
_0819003A:
    ldrb r0, [r4]
    cmp r0, 0xFE
    beq _08190096
    ldrb r0, [r4]
    ldr r1, [sp, 0x4]
    cmp r0, r1
    bne _08190096
    ldrb r0, [r4, 0x1]
    adds r5, r6, 0x1
    cmp r0, r10
    bne _0819006C
    adds r1, r6, 0x2
    mov r0, r8
    cmp r0, 0x19
    bne _0819005E
    ldrb r0, [r4, 0x2]
    cmp r0, 0x28
    bne _0819006C
_0819005E:
    adds r0, r1, r7
    ldrb r0, [r0]
    muls r0, r2
    movs r1, 0xA
    bl __divsi3
    adds r2, r0, 0
_0819006C:
    adds r0, r5, r7
    ldrb r0, [r0]
    cmp r0, r9
    bne _08190096
    cmp r10, r9
    beq _08190096
    adds r1, r6, 0x2
    mov r0, r8
    cmp r0, 0x19
    bne _08190088
    adds r0, r1, r7
    ldrb r0, [r0]
    cmp r0, 0x28
    bne _08190096
_08190088:
    adds r0, r1, r7
    ldrb r0, [r0]
    muls r0, r2
    movs r1, 0xA
    bl __divsi3
    adds r2, r0, 0
_08190096:
    adds r4, 0x3
    adds r6, 0x3
    ldr r1, =gTypeEffectiveness
    adds r0, r6, r1
    ldrb r0, [r0]
    cmp r0, 0xFF
    bne _0819003A
_081900A4:
    ldr r0, [sp]
    cmp r0, 0x1
    beq _081900E0
_081900AA:
    ldr r1, [sp]
    cmp r1, 0x1
    bgt _081900BC
    cmp r1, 0
    beq _081900C4
    b _08190154
    .pool
_081900BC:
    ldr r0, [sp]
    cmp r0, 0x2
    beq _08190114
    b _08190154
_081900C4:
    cmp r2, 0xA
    beq _08190146
    cmp r2, 0xA
    ble _08190146
    cmp r2, 0x28
    beq _0819014A
    cmp r2, 0x28
    bgt _081900DA
    cmp r2, 0x14
    beq _08190104
    b _08190146
_081900DA:
    cmp r2, 0x50
    bne _08190146
    b _08190100
_081900E0:
    cmp r2, 0xA
    beq _08190104
    cmp r2, 0xA
    bgt _081900F2
    cmp r2, 0
    beq _08190100
    cmp r2, 0x5
    beq _0819014A
    b _08190146
_081900F2:
    cmp r2, 0x28
    beq _08190108
    cmp r2, 0x28
    ble _08190146
    cmp r2, 0x50
    beq _0819010E
    b _08190146
_08190100:
    movs r2, 0x8
    b _08190154
_08190104:
    movs r2, 0x2
    b _08190154
_08190108:
    movs r2, 0x2
    negs r2, r2
    b _08190154
_0819010E:
    movs r2, 0x4
    negs r2, r2
    b _08190154
_08190114:
    cmp r2, 0xA
    beq _08190146
    cmp r2, 0xA
    bgt _08190126
    cmp r2, 0
    beq _0819013A
    cmp r2, 0x5
    beq _08190140
    b _08190146
_08190126:
    cmp r2, 0x28
    beq _0819014E
    cmp r2, 0x28
    bgt _08190134
    cmp r2, 0x14
    beq _0819014A
    b _08190146
_08190134:
    cmp r2, 0x50
    beq _08190152
    b _08190146
_0819013A:
    movs r2, 0x10
    negs r2, r2
    b _08190154
_08190140:
    movs r2, 0x8
    negs r2, r2
    b _08190154
_08190146:
    movs r2, 0
    b _08190154
_0819014A:
    movs r2, 0x4
    b _08190154
_0819014E:
    movs r2, 0xC
    b _08190154
_08190152:
    movs r2, 0x14
_08190154:
    adds r0, r2, 0
_08190156:
    add sp, 0x8
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r1}
    bx r1
                
.syntax divided
	.code	16
.Lfe17:
	.size	 GetTypeEffectivenessPoints,.Lfe17-GetTypeEffectivenessPoints
	.align	2, 0
	.type	 GetDomeTrainerMonIvs,function
	.thumb_func
GetDomeTrainerMonIvs:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	cmp	r0, #0x63
	bls	.L423	@cond_branch
	mov	r1, #0x6
	cmp	r0, #0x77
	bls	.L423	@cond_branch
	mov	r1, #0x9
	cmp	r0, #0x8b
	bls	.L423	@cond_branch
	mov	r1, #0xc
	cmp	r0, #0x9f
	bls	.L423	@cond_branch
	mov	r1, #0xf
	cmp	r0, #0xb3
	bls	.L423	@cond_branch
	mov	r1, #0x12
	cmp	r0, #0xc7
	bls	.L423	@cond_branch
	mov	r1, #0x1f
	cmp	r0, #0xdb
	bhi	.L423	@cond_branch
	mov	r1, #0x15
.L423:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 GetDomeTrainerMonIvs,.Lfe18-GetDomeTrainerMonIvs
	.align	2, 0
	.type	 TournamentIdOfOpponent,function
	.thumb_func
TournamentIdOfOpponent:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r2, r1, #0
	mov	r5, #0x0
	ldr	r0, .L460
	ldr	r1, [r0]
	ldr	r4, .L460+0x4
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	mov	ip, r0
	ldr	r6, .L460+0x8
	cmp	r1, r2
	beq	.L438	@cond_branch
	mov	r7, ip
.L439:
	add	r5, r5, #0x1
	cmp	r5, #0xf
	bgt	.L438	@cond_branch
	ldr	r0, [r7]
	lsl	r1, r5, #0x2
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r2
	bne	.L439	@cond_branch
.L438:
	cmp	r3, #0
	beq	.L443	@cond_branch
	cmp	r3, #0x3
	bne	.L444	@cond_branch
	lsl	r0, r5, #0x2
	add	r1, r0, #0x3
	add	r1, r1, r6
	ldrb	r1, [r1]
	add	r4, r1, #0
	add	r4, r4, #0x8
	b	.L445
.L461:
	.align	2, 0
.L460:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	sIdToOpponentId
.L444:
	lsl	r0, r5, #0x2
	add	r1, r3, r0
	add	r1, r1, r6
	ldrb	r1, [r1]
	add	r4, r1, #0x4
.L445:
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r2, [r0]
	cmp	r2, r4
	bge	.L447	@cond_branch
	ldr	r1, .L462
	add	r0, r2, r1
	ldrb	r3, [r0]
	add	r6, r1, #0
	cmp	r3, r5
	beq	.L448	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	lsl	r1, r3, #0x2
	add	r0, r0, r1
	ldr	r3, .L462+0x4
	add	r0, r0, r3
	b	.L458
.L463:
	.align	2, 0
.L462:
	.word	sTourneyTreeTrainerOpponentIds
	.word	0xd25
.L448:
	add	r2, r2, #0x1
	cmp	r2, r4
	bge	.L447	@cond_branch
	add	r0, r2, r6
	ldrb	r1, [r0]
	cmp	r1, r5
	beq	.L448	@cond_branch
	mov	r3, ip
	ldr	r0, [r3]
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldr	r1, .L464
	add	r0, r0, r1
.L458:
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L448	@cond_branch
.L447:
	cmp	r2, r4
	beq	.L459	@cond_branch
	ldr	r0, .L464+0x4
	add	r0, r2, r0
	ldrb	r0, [r0]
	b	.L457
.L465:
	.align	2, 0
.L464:
	.word	0xd25
	.word	sTourneyTreeTrainerOpponentIds
.L443:
	mov	r3, ip
	ldr	r1, [r3]
	lsl	r0, r5, #0x2
	add	r0, r0, r6
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r1, r1, r0
	ldr	r0, .L466
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L455	@cond_branch
.L459:
	mov	r0, #0xff
	b	.L457
.L467:
	.align	2, 0
.L466:
	.word	0xd25
.L455:
	add	r0, r2, #0
.L457:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 TournamentIdOfOpponent,.Lfe19-TournamentIdOfOpponent
	.align	2, 0
	.type	 SetDomeOpponentId,function
	.thumb_func
SetDomeOpponentId:
	push	{lr}
	bl	TrainerIdOfPlayerOpponent
	ldr	r1, .L469
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L470:
	.align	2, 0
.L469:
	.word	gTrainerBattleOpponent_A
.Lfe20:
	.size	 SetDomeOpponentId,.Lfe20-SetDomeOpponentId
	.align	2, 0
	.type	 TrainerIdOfPlayerOpponent,function
	.thumb_func
TrainerIdOfPlayerOpponent:
	push	{r4, lr}
	ldr	r0, .L472
	ldr	r4, [r0]
	ldr	r1, .L472+0x4
	add	r0, r4, r1
	ldrh	r0, [r0]
	ldr	r1, .L472+0x8
	bl	TournamentIdOfOpponent
	lsl	r0, r0, #0x2
	add	r4, r4, r0
	ldr	r0, .L472+0xc
	add	r4, r4, r0
	ldrh	r0, [r4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	pop	{r4}
	pop	{r1}
	bx	r1
.L473:
	.align	2, 0
.L472:
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	0x3ff
	.word	0xd24
.Lfe21:
	.size	 TrainerIdOfPlayerOpponent,.Lfe21-TrainerIdOfPlayerOpponent
	.align	2, 0
	.type	 SetDomeOpponentGraphicsId,function
	.thumb_func
SetDomeOpponentGraphicsId:
	push	{lr}
	ldr	r0, .L475
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	SetBattleFacilityTrainerGfxId
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	gTrainerBattleOpponent_A
.Lfe22:
	.size	 SetDomeOpponentGraphicsId,.Lfe22-SetDomeOpponentGraphicsId
	.align	2, 0
	.type	 SaveDomeChallenge,function
	.thumb_func
SaveDomeChallenge:
	push	{r4, lr}
	ldr	r4, .L478
	ldr	r0, [r4]
	ldr	r1, .L478+0x4
	ldrh	r1, [r1]
	ldr	r2, .L478+0x8
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	mov	r1, #0x0
	bl	VarSet
	ldr	r1, [r4]
	ldr	r0, .L478+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	bl	SaveGameFrontier
	pop	{r4}
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
	.word	0xca8
	.word	0xca9
.Lfe23:
	.size	 SaveDomeChallenge,.Lfe23-SaveDomeChallenge
	.align	2, 0
	.type	 IncrementDomeStreaks,function
	.thumb_func
IncrementDomeStreaks:
	push	{r4, r5, lr}
	ldr	r5, .L484
	ldr	r0, [r5]
	ldr	r1, .L484+0x4
	add	r0, r0, r1
	ldrb	r4, [r0]
	lsl	r4, r4, #0x1e
	lsr	r4, r4, #0x1e
	ldr	r0, .L484+0x8
	bl	VarGet
	lsl	r0, r0, #0x18
	ldr	r1, [r5]
	lsl	r4, r4, #0x1
	lsr	r0, r0, #0x16
	add	r4, r4, r0
	ldr	r3, .L484+0xc
	add	r1, r1, r3
	add	r1, r1, r4
	ldrh	r0, [r1]
	ldr	r2, .L484+0x10
	cmp	r0, r2
	bhi	.L481	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1]
.L481:
	ldr	r0, [r5]
	ldr	r1, .L484+0x14
	add	r0, r0, r1
	add	r1, r0, r4
	ldrh	r0, [r1]
	cmp	r0, r2
	bhi	.L482	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1]
.L482:
	ldr	r0, [r5]
	add	r1, r0, r3
	add	r1, r1, r4
	ldr	r2, .L484+0x18
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r1, [r1]
	ldrh	r2, [r0]
	cmp	r1, r2
	bls	.L483	@cond_branch
	strh	r1, [r0]
.L483:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L485:
	.align	2, 0
.L484:
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	0x40ce
	.word	0xd0c
	.word	0x3e6
	.word	0xd1c
	.word	0xd14
.Lfe24:
	.size	 IncrementDomeStreaks,.Lfe24-IncrementDomeStreaks
	.align	2, 0
	.type	 ShowDomeOpponentInfo,function
	.thumb_func
ShowDomeOpponentInfo:
	push	{r4, r5, lr}
	ldr	r0, .L487
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L487+0x4
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	add	r4, r4, r1
	mov	r5, #0x0
	strh	r5, [r4, #0x8]
	bl	TrainerIdOfPlayerOpponent
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	TrainerIdToTournamentId
	strh	r0, [r4, #0xa]
	strh	r5, [r4, #0xc]
	strh	r5, [r4, #0xe]
	ldr	r0, .L487+0x8
	bl	SetMainCallback2
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	Task_ShowTourneyInfoCard
	.word	gTasks
	.word	CB2_TourneyTree
.Lfe25:
	.size	 ShowDomeOpponentInfo,.Lfe25-ShowDomeOpponentInfo
	.align	2, 0
	.type	 Task_ShowTourneyInfoCard,function
	.thumb_func
Task_ShowTourneyInfoCard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r1, .L511
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	mov	r0, #0xa
	ldrsh	r5, [r6, r0]
	mov	r2, #0xc
	ldrsh	r1, [r6, r2]
	mov	r9, r1
	mov	r0, #0xe
	ldrsh	r7, [r6, r0]
	mov	r1, #0x8
	ldrsh	r4, [r6, r1]
	cmp	r4, #0x1
	beq	.L494	@cond_branch
	cmp	r4, #0x1
	bgt	.L509	@cond_branch
	cmp	r4, #0
	beq	.L491	@cond_branch
	b	.L490
.L512:
	.align	2, 0
.L511:
	.word	gTasks
.L509:
	cmp	r4, #0x2
	bne	.LCB4281
	b	.L495	@long jump
.LCB4281:
	cmp	r4, #0x3
	bne	.LCB4283
	b	.L497	@long jump
.LCB4283:
	b	.L490
.L491:
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x1
	bl	EnableInterrupts
	str	r4, [sp, #0x4]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L513
	add	r0, sp, #0x4
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L513+0x4
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r0, .L513+0x8
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	ldr	r0, .L513+0xc
	strh	r4, [r0]
	ldr	r0, .L513+0x10
	strh	r4, [r0]
	ldr	r0, .L513+0x14
	strh	r4, [r0]
	ldr	r0, .L513+0x18
	strh	r4, [r0]
	ldr	r0, .L513+0x1c
	strh	r4, [r0]
	ldr	r0, .L513+0x20
	strh	r4, [r0]
	mov	r2, r9
	cmp	r2, #0x2
	bne	.L492	@cond_branch
	ldr	r0, .L513+0x24
	strh	r4, [r0]
	ldr	r0, .L513+0x28
	strh	r4, [r0]
	b	.L493
.L514:
	.align	2, 0
.L513:
	.word	0x5006000
	.word	sInfoCardBgTemplates
	.word	sInfoCardWindowTemplates
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L492:
	ldr	r0, .L515
	strh	r4, [r0]
	ldr	r1, .L515+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
.L493:
	ldr	r0, .L515+0x8
	mov	r2, sl
	lsl	r1, r2, #0x2
	add	r1, r1, sl
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L490
.L516:
	.align	2, 0
.L515:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
.L494:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x42
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x46
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r1, .L517
	mov	r0, #0x4
	strb	r0, [r1]
	b	.L510
.L518:
	.align	2, 0
.L517:
	.word	gReservedSpritePaletteCount
.L495:
	ldr	r1, .L519
	mov	r5, #0x80
	lsl	r5, r5, #0x6
	mov	r7, #0x0
	str	r7, [sp]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L519+0x4
	mov	r4, #0x1
	str	r4, [sp]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L519+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	str	r4, [sp]
	mov	r0, #0x3
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r0, .L519+0xc
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L519+0x10
	mov	r4, #0x80
	lsl	r4, r4, #0x2
	mov	r1, #0x0
	add	r2, r4, #0
	bl	LoadCompressedPalette
	ldr	r0, .L519+0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r2, r4, #0
	bl	LoadCompressedPalette
	ldr	r0, .L519+0x18
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	mov	r0, r9
	cmp	r0, #0x2
	bne	.L496	@cond_branch
	ldr	r0, .L519+0x1c
	mov	r1, #0x50
	mov	r2, #0x20
	bl	LoadCompressedPalette
.L496:
	str	r7, [sp, #0x8]
	add	r0, sp, #0x8
	ldr	r1, .L519+0x20
	ldr	r2, .L519+0x24
	bl	CpuSet
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
.L510:
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L490
.L520:
	.align	2, 0
.L519:
	.word	gDomeTourneyInfoCard_Gfx
	.word	gDomeTourneyInfoCard_Tilemap
	.word	gDomeTourneyInfoCardBg_Tilemap
	.word	sTourneyTreeButtonsSpriteSheet
	.word	gDomeTourneyTree_Pal
	.word	gDomeTourneyTreeButtons_Pal
	.word	gBattleWindowTextPalette
	.word	gDomeTourneyMatchCardBg_Pal
	.word	gPlttBufferFaded
	.word	0x5000100
.L497:
	ldr	r0, .L521
	bl	SetVBlankCallback
	ldr	r4, .L521+0x4
	mov	r0, #0x14
	bl	AllocZeroed
	str	r0, [r4]
	mov	r6, #0x0
	lsl	r5, r5, #0x18
	mov	r2, #0xff
.L501:
	ldr	r1, [r4]
	add	r1, r1, r6
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L501	@cond_branch
	bl	LoadMonIconPalettes
	ldr	r0, .L521+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L521+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	strh	r1, [r0, #0xc]
	mov	r1, r9
	strh	r1, [r0, #0xe]
	strh	r7, [r0, #0x10]
	mov	r2, r9
	cmp	r2, #0x2
	bne	.L503	@cond_branch
	lsr	r1, r5, #0x18
	mov	r0, #0x0
	bl	DisplayMatchInfoOnCard
	ldr	r0, .L521+0x4
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0x10]
	b	.L504
.L522:
	.align	2, 0
.L521:
	.word	VblankCb_TourneyInfoCard
	.word	sInfoCard
	.word	Task_HandleInfoCardInput
	.word	gTasks
.L503:
	lsr	r1, r5, #0x18
	mov	r0, #0x0
	bl	DisplayTrainerInfoOnCard
.L504:
	mov	r1, #0xfa
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, r9
	cmp	r0, #0
	beq	.L505	@cond_branch
	ldr	r5, .L523
	add	r0, r5, #0
	mov	r1, #0x78
	mov	r2, #0x4
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	ldr	r1, .L523+0x4
	mov	r8, r1
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	add	r0, r5, #0
	mov	r1, #0x78
	mov	r2, #0x9c
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	ldr	r5, .L523+0x8
	add	r0, r5, #0
	mov	r1, #0x6
	mov	r2, #0x50
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	mov	r2, r8
	add	r4, r0, r2
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r1, r9
	cmp	r1, #0x1
	bne	.L506	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L506:
	add	r0, r5, #0
	mov	r1, #0xea
	mov	r2, #0x50
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r8
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	mov	r0, #0x1
	strh	r0, [r4, #0x30]
.L505:
	mov	r0, sl
	bl	DestroyTask
.L490:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	sVerticalScrollArrowSpriteTemplate
	.word	gSprites
	.word	sHorizontalScrollArrowSpriteTemplate
.Lfe26:
	.size	 Task_ShowTourneyInfoCard,.Lfe26-Task_ShowTourneyInfoCard
	.align	2, 0
	.type	 SpriteCb_TrainerIconCardScrollUp,function
	.thumb_func
SpriteCb_TrainerIconCardScrollUp:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x22]
	add	r1, r0, #0x4
	strh	r1, [r2, #0x22]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L526	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	blt	.L527	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L527:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	bne	.L529	@cond_branch
	ldr	r0, .L531
	str	r0, [r2, #0x1c]
	b	.L529
.L532:
	.align	2, 0
.L531:
	.word	SpriteCallbackDummy
.L526:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xbf
	ble	.L529	@cond_branch
	ldr	r0, .L533
	ldr	r0, [r0]
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrh	r0, [r2, #0x34]
	bl	FreeAndDestroyTrainerPicSprite
.L529:
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	sInfoCard
.Lfe27:
	.size	 SpriteCb_TrainerIconCardScrollUp,.Lfe27-SpriteCb_TrainerIconCardScrollUp
	.align	2, 0
	.type	 SpriteCb_TrainerIconCardScrollDown,function
	.thumb_func
SpriteCb_TrainerIconCardScrollDown:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x22]
	sub	r1, r0, #0x4
	strh	r1, [r2, #0x22]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L536	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc0
	bgt	.L537	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L537:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	bne	.L539	@cond_branch
	ldr	r0, .L541
	str	r0, [r2, #0x1c]
	b	.L539
.L542:
	.align	2, 0
.L541:
	.word	SpriteCallbackDummy
.L536:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bgt	.L539	@cond_branch
	ldr	r0, .L543
	ldr	r0, [r0]
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrh	r0, [r2, #0x34]
	bl	FreeAndDestroyTrainerPicSprite
.L539:
	pop	{r0}
	bx	r0
.L544:
	.align	2, 0
.L543:
	.word	sInfoCard
.Lfe28:
	.size	 SpriteCb_TrainerIconCardScrollDown,.Lfe28-SpriteCb_TrainerIconCardScrollDown
	.align	2, 0
	.type	 SpriteCb_TrainerIconCardScrollLeft,function
	.thumb_func
SpriteCb_TrainerIconCardScrollLeft:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x20]
	add	r1, r0, #0x4
	strh	r1, [r2, #0x20]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L546	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	blt	.L547	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L547:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L549	@cond_branch
	ldr	r0, .L551
	str	r0, [r2, #0x1c]
	b	.L549
.L552:
	.align	2, 0
.L551:
	.word	SpriteCallbackDummy
.L546:
	lsl	r1, r1, #0x10
	ldr	r0, .L553
	cmp	r1, r0
	ble	.L549	@cond_branch
	ldr	r0, .L553+0x4
	ldr	r0, [r0]
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrh	r0, [r2, #0x34]
	bl	FreeAndDestroyTrainerPicSprite
.L549:
	pop	{r0}
	bx	r0
.L554:
	.align	2, 0
.L553:
	.word	0x10f0000
	.word	sInfoCard
.Lfe29:
	.size	 SpriteCb_TrainerIconCardScrollLeft,.Lfe29-SpriteCb_TrainerIconCardScrollLeft
	.align	2, 0
	.type	 SpriteCb_TrainerIconCardScrollRight,function
	.thumb_func
SpriteCb_TrainerIconCardScrollRight:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x20]
	sub	r1, r0, #0x4
	strh	r1, [r2, #0x20]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	beq	.L556	@cond_branch
	lsl	r1, r1, #0x10
	mov	r0, #0x88
	lsl	r0, r0, #0x11
	cmp	r1, r0
	bgt	.L557	@cond_branch
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
.L557:
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L559	@cond_branch
	ldr	r0, .L561
	str	r0, [r2, #0x1c]
	b	.L559
.L562:
	.align	2, 0
.L561:
	.word	SpriteCallbackDummy
.L556:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bgt	.L559	@cond_branch
	ldr	r0, .L563
	ldr	r0, [r0]
	mov	r3, #0x32
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrh	r0, [r2, #0x34]
	bl	FreeAndDestroyTrainerPicSprite
.L559:
	pop	{r0}
	bx	r0
.L564:
	.align	2, 0
.L563:
	.word	sInfoCard
.Lfe30:
	.size	 SpriteCb_TrainerIconCardScrollRight,.Lfe30-SpriteCb_TrainerIconCardScrollRight
	.align	2, 0
	.type	 SpriteCb_MonIcon,function
	.thumb_func
SpriteCb_MonIcon:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x34
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L566	@cond_branch
	add	r0, r1, #0
	bl	UpdateMonIconFrame
.L566:
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 SpriteCb_MonIcon,.Lfe31-SpriteCb_MonIcon
	.align	2, 0
	.type	 SpriteCb_MonIconCardScrollUp,function
	.thumb_func
SpriteCb_MonIconCardScrollUp:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L568	@cond_branch
	add	r0, r4, #0
	bl	UpdateMonIconFrame
.L568:
	ldrh	r0, [r4, #0x22]
	add	r1, r0, #0x4
	strh	r1, [r4, #0x22]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L569	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	blt	.L570	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L570:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	bne	.L572	@cond_branch
	ldr	r0, .L574
	str	r0, [r4, #0x1c]
	b	.L572
.L575:
	.align	2, 0
.L574:
	.word	SpriteCb_MonIcon
.L569:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xaf
	ble	.L572	@cond_branch
	ldr	r0, .L576
	ldr	r0, [r0]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	add	r0, r4, #0
	bl	FreeAndDestroyMonIconSprite
.L572:
	pop	{r4}
	pop	{r0}
	bx	r0
.L577:
	.align	2, 0
.L576:
	.word	sInfoCard
.Lfe32:
	.size	 SpriteCb_MonIconCardScrollUp,.Lfe32-SpriteCb_MonIconCardScrollUp
	.align	2, 0
	.type	 SpriteCb_MonIconCardScrollDown,function
	.thumb_func
SpriteCb_MonIconCardScrollDown:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L579	@cond_branch
	add	r0, r4, #0
	bl	UpdateMonIconFrame
.L579:
	ldrh	r0, [r4, #0x22]
	sub	r1, r0, #0x4
	strh	r1, [r4, #0x22]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L580	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb0
	bgt	.L581	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L581:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x28
	bne	.L583	@cond_branch
	ldr	r0, .L585
	str	r0, [r4, #0x1c]
	b	.L583
.L586:
	.align	2, 0
.L585:
	.word	SpriteCb_MonIcon
.L580:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bgt	.L583	@cond_branch
	ldr	r0, .L587
	ldr	r0, [r0]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	add	r0, r4, #0
	bl	FreeAndDestroyMonIconSprite
.L583:
	pop	{r4}
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	sInfoCard
.Lfe33:
	.size	 SpriteCb_MonIconCardScrollDown,.Lfe33-SpriteCb_MonIconCardScrollDown
	.align	2, 0
	.type	 SpriteCb_MonIconCardScrollLeft,function
	.thumb_func
SpriteCb_MonIconCardScrollLeft:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L590	@cond_branch
	add	r0, r4, #0
	bl	UpdateMonIconFrame
.L590:
	ldrh	r0, [r4, #0x20]
	add	r1, r0, #0x4
	strh	r1, [r4, #0x20]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L591	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	blt	.L592	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L592:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L594	@cond_branch
	ldr	r0, .L596
	str	r0, [r4, #0x1c]
	b	.L594
.L597:
	.align	2, 0
.L596:
	.word	SpriteCb_MonIcon
.L591:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L594	@cond_branch
	ldr	r0, .L598
	ldr	r0, [r0]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	add	r0, r4, #0
	bl	FreeAndDestroyMonIconSprite
.L594:
	pop	{r4}
	pop	{r0}
	bx	r0
.L599:
	.align	2, 0
.L598:
	.word	sInfoCard
.Lfe34:
	.size	 SpriteCb_MonIconCardScrollLeft,.Lfe34-SpriteCb_MonIconCardScrollLeft
	.align	2, 0
	.type	 SpriteCb_MonIconCardScrollRight,function
	.thumb_func
SpriteCb_MonIconCardScrollRight:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L601	@cond_branch
	add	r0, r4, #0
	bl	UpdateMonIconFrame
.L601:
	ldrh	r0, [r4, #0x20]
	sub	r1, r0, #0x4
	strh	r1, [r4, #0x20]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L602	@cond_branch
	lsl	r1, r1, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	cmp	r1, r0
	bgt	.L603	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L603:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L605	@cond_branch
	ldr	r0, .L607
	str	r0, [r4, #0x1c]
	b	.L605
.L608:
	.align	2, 0
.L607:
	.word	SpriteCb_MonIcon
.L602:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bgt	.L605	@cond_branch
	ldr	r0, .L609
	ldr	r0, [r0]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	add	r0, r4, #0
	bl	FreeAndDestroyMonIconSprite
.L605:
	pop	{r4}
	pop	{r0}
	bx	r0
.L610:
	.align	2, 0
.L609:
	.word	sInfoCard
.Lfe35:
	.size	 SpriteCb_MonIconCardScrollRight,.Lfe35-SpriteCb_MonIconCardScrollRight
	.align	2, 0
	.type	 SpriteCb_HorizontalScrollArrow,function
	.thumb_func
SpriteCb_HorizontalScrollArrow:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r6, [r3, r0]
	ldr	r2, .L634
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r7, #0x10
	ldrsh	r1, [r4, r7]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	ldr	r1, .L634+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	sl, r0
	ldr	r1, .L634+0x8
	ldr	r5, [r1]
	ldr	r7, .L634+0xc
	add	r0, r5, r7
	ldrh	r0, [r0]
	mov	ip, r0
	mov	r7, #0xe
	ldrsh	r0, [r4, r7]
	mov	r9, r2
	mov	r8, r1
	cmp	r0, #0x1
	bne	.L612	@cond_branch
	mov	r1, #0x30
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L613	@cond_branch
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r1, r5, r0
	ldr	r7, .L634+0x10
	add	r1, r1, r7
	ldrb	r2, [r1]
	lsl	r1, r2, #0x1d
	add	r4, r0, #0
	cmp	r1, #0
	bge	.L614	@cond_branch
	ldr	r0, .L634+0x14
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	sub	r1, r1, #0x1
	lsl	r0, r2, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r1, r0
	blt	.L632	@cond_branch
.L614:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r4
	ldr	r2, .L634+0x10
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L616	@cond_branch
	ldr	r0, .L634+0x14
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	sub	r0, r0, #0x1
	cmp	r0, ip
	blt	.L632	@cond_branch
.L616:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	mov	r7, #0x8
	ldrsh	r0, [r0, r7]
	b	.L633
.L635:
	.align	2, 0
.L634:
	.word	gTasks
	.word	sTourneyTreeTrainerIds
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	0xd25
	.word	sInfoCard
.L613:
	ldr	r0, .L636
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	bne	.L632	@cond_branch
	b	.L629
.L637:
	.align	2, 0
.L636:
	.word	sInfoCard
.L612:
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	beq	.L624	@cond_branch
	ldr	r0, .L638
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	bls	.L632	@cond_branch
	mov	r7, #0x8
	ldrsh	r0, [r4, r7]
	b	.L633
.L639:
	.align	2, 0
.L638:
	.word	sInfoCard
.L624:
	ldr	r0, .L640
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	beq	.L629	@cond_branch
.L632:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L623
.L641:
	.align	2, 0
.L640:
	.word	sInfoCard
.L629:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
.L633:
	cmp	r0, #0x2
	bne	.L623	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L623:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 SpriteCb_HorizontalScrollArrow,.Lfe36-SpriteCb_HorizontalScrollArrow
	.align	2, 0
	.type	 SpriteCb_VerticalScrollArrow,function
	.thumb_func
SpriteCb_VerticalScrollArrow:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	ldr	r2, .L652
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	mov	r2, #0xe
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L643	@cond_branch
	ldr	r0, .L652+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	bne	.L651	@cond_branch
	b	.L648
.L653:
	.align	2, 0
.L652:
	.word	gTasks
	.word	sInfoCard
.L643:
	ldr	r0, .L654
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	beq	.L648	@cond_branch
.L651:
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x2
	bne	.L647	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L647
.L655:
	.align	2, 0
.L654:
	.word	sInfoCard
.L648:
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L647:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 SpriteCb_VerticalScrollArrow,.Lfe37-SpriteCb_VerticalScrollArrow
	.align	2, 0
	.type	 Task_HandleInfoCardInput,function
	.thumb_func
Task_HandleInfoCardInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L874
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r3, #0xe
	ldrsh	r2, [r0, r3]
	mov	r9, r2
	mov	r4, #0x10
	ldrsh	r7, [r0, r4]
	mov	r5, #0x8
	ldrsh	r0, [r0, r5]
	cmp	r0, #0x8
	bls	.LCB5751
	bl	.L657	@far jump
.LCB5751:
	lsl	r0, r0, #0x2
	ldr	r1, .L874+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L875:
	.align	2, 0
.L874:
	.word	gTasks
	.word	.L868
	.align	2, 0
	.align	2, 0
.L868:
	.word	.L658
	.word	.L660
	.word	.L662
	.word	.L678
	.word	.L834
	.word	.L837
	.word	.L840
	.word	.L843
	.word	.L846
.L658:
	ldr	r0, .L876
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB5778
	bl	.L657	@far jump
.LCB5778:
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L876+0x4
	mov	r6, r8
	lsl	r0, r6, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x8]
	bl	.L657	@ far jump
.L877:
	.align	2, 0
.L876:
	.word	gPaletteFade
	.word	gTasks
.L660:
	ldr	r0, .L878
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5813
	bl	.L657	@far jump
.LCB5813:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r2, .L878+0x4
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	bl	.L657	@ far jump
.L879:
	.align	2, 0
.L878:
	.word	gPaletteFade
	.word	gTasks
.L662:
	mov	r0, r8
	bl	Task_GetInfoCardInput
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x8
	bgt	.L677	@cond_branch
	cmp	r6, #0x1
	bge	.L666	@cond_branch
	bl	.L657	@ far jump
.L677:
	cmp	r6, #0x9
	beq	.LCB5847
	bl	.L657	@far jump
.LCB5847:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L880
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0x8]
	bl	.L657	@ far jump
.L881:
	.align	2, 0
.L880:
	.word	gTasks
.L666:
	ldr	r1, .L882
	mov	r4, r8
	lsl	r2, r4, #0x2
	add	r0, r2, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0x12]
	mov	r5, #0xc
	ldrsh	r0, [r0, r5]
	mov	r1, #0x0
	mov	r9, r2
	cmp	r0, #0
	beq	.L667	@cond_branch
	mov	r1, #0x9
.L667:
	add	r6, r1, #0
	add	r0, r6, #0
	add	r0, r0, #0x9
	cmp	r6, r0
	bge	.L670	@cond_branch
	add	r5, r0, #0
.L672:
	lsl	r4, r6, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r6, r6, #0x1
	cmp	r6, r5
	blt	.L672	@cond_branch
.L670:
	ldr	r0, .L882
	mov	r1, r9
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	bl	.L657	@ far jump
.L883:
	.align	2, 0
.L882:
	.word	gTasks
.L678:
	mov	r6, r8
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	ldr	r2, .L884
	add	r0, r0, r2
	mov	r3, #0x12
	ldrsh	r6, [r0, r3]
	sub	r0, r6, #0x1
	mov	r9, r1
	cmp	r0, #0x7
	bls	.LCB5945
	bl	.L657	@far jump
.LCB5945:
	lsl	r0, r0, #0x2
	ldr	r1, .L884+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L885:
	.align	2, 0
.L884:
	.word	gTasks
	.word	.L832
	.align	2, 0
	.align	2, 0
.L832:
	.word	.L681
	.word	.L711
	.word	.L740
	.word	.L786
	.word	.L681
	.word	.L711
	.word	.L763
	.word	.L809
.L681:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L886
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L682	@cond_branch
	ldr	r0, .L886+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L886+0x8
	strh	r1, [r0]
	ldr	r0, .L886+0xc
	strh	r1, [r0]
	ldr	r1, .L886+0x10
	mov	r0, #0xa0
	strh	r0, [r1]
	b	.L683
.L887:
	.align	2, 0
.L886:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L682:
	ldr	r0, .L888
	strh	r2, [r0]
	ldr	r1, .L888+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r0, .L888+0x8
	strh	r2, [r0]
	ldr	r0, .L888+0xc
	strh	r2, [r0]
.L683:
	cmp	r6, #0x1
	bne	.L684	@cond_branch
	ldr	r5, .L888+0x10
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	cmp	r1, #0
	bne	.L685	@cond_branch
	ldr	r0, .L888+0x14
	strh	r1, [r0]
	ldr	r1, .L888+0x18
	mov	r6, #0xa0
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r1]
	ldr	r3, .L888+0x1c
	ldr	r2, .L888+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r4, #0xa
	ldrsh	r1, [r0, r4]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	b	.L687
.L889:
	.align	2, 0
.L888:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sInfoCard
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L685:
	ldr	r1, .L890
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r1]
	ldr	r0, .L890+0x4
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r3, .L890+0x8
	ldr	r2, .L890+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r6, #0xa
	ldrsh	r1, [r0, r6]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	ldr	r0, [r5]
	strb	r4, [r0, #0x10]
	b	.L687
.L891:
	.align	2, 0
.L890:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L684:
	ldr	r6, .L892
	ldr	r1, [r6]
	ldrb	r5, [r1, #0x10]
	cmp	r5, #0
	bne	.L688	@cond_branch
	ldr	r4, .L892+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x11
	bl	BufferDomeWinString
	ldr	r0, .L892+0x8
	strh	r5, [r0]
	ldr	r1, .L892+0xc
	mov	r3, #0xa0
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r2, [r6]
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x11]
	bl	DisplayTrainerInfoOnCard
	b	.L687
.L893:
	.align	2, 0
.L892:
	.word	sInfoCard
	.word	gTasks
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L688:
	cmp	r5, #0x2
	bne	.L690	@cond_branch
	ldr	r4, .L894
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x11
	bl	BufferDomeWinString
	ldr	r1, .L894+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L894+0x8
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r2, [r6]
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	bl	DisplayTrainerInfoOnCard
	b	.L687
.L895:
	.align	2, 0
.L894:
	.word	gTasks
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L690:
	ldr	r1, .L896
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r1, .L896+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L896+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0xa
	ldrsh	r0, [r0, r4]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x10
	orr	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	bl	DisplayMatchInfoOnCard
.L687:
	mov	r6, #0x0
	ldr	r5, .L896+0xc
	mov	sl, r5
	ldr	r3, .L896+0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L896+0x8
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L695:
	cmp	r6, #0x1
	bgt	.L696	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L694	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L896+0x14
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L694
.L897:
	.align	2, 0
.L896:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sInfoCard
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollUp
.L696:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L694	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L898
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L694:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L695	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L898+0x4
	mov	ip, r2
	ldr	r3, .L898+0x8
	ldr	r1, .L898+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L704:
	cmp	r6, #0x9
	bgt	.L705	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L703	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L898+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L703
.L899:
	.align	2, 0
.L898:
	.word	SpriteCb_MonIconCardScrollUp
	.word	sInfoCard
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollUp
.L705:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L703	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L900
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L703:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L704	@cond_branch
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L900+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x4
	bl	.L870	@ far jump
.L901:
	.align	2, 0
.L900:
	.word	SpriteCb_MonIconCardScrollUp
	.word	gTasks
.L711:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L902
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L712	@cond_branch
	ldr	r0, .L902+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L902+0x8
	strh	r1, [r0]
	ldr	r0, .L902+0xc
	strh	r1, [r0]
	ldr	r1, .L902+0x10
	ldr	r2, .L902+0x14
	add	r0, r2, #0
	strh	r0, [r1]
	b	.L713
.L903:
	.align	2, 0
.L902:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	0xff60
.L712:
	ldr	r0, .L904
	strh	r2, [r0]
	ldr	r1, .L904+0x4
	ldr	r3, .L904+0x8
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L904+0xc
	strh	r2, [r0]
	ldr	r0, .L904+0x10
	strh	r2, [r0]
.L713:
	cmp	r6, #0x2
	bne	.L714	@cond_branch
	ldr	r5, .L904+0x14
	ldr	r0, [r5]
	ldrb	r1, [r0, #0x10]
	cmp	r1, #0
	bne	.L715	@cond_branch
	ldr	r0, .L904+0x18
	strh	r1, [r0]
	ldr	r1, .L904+0x1c
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r3, .L904+0x20
	ldr	r2, .L904+0x24
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r4, #0xa
	ldrsh	r1, [r0, r4]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	b	.L717
.L905:
	.align	2, 0
.L904:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	0xff60
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sInfoCard
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L715:
	ldr	r0, .L906
	mov	r4, #0x0
	strh	r4, [r0]
	ldr	r0, .L906+0x4
	strh	r4, [r0]
	ldr	r3, .L906+0x8
	ldr	r2, .L906+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r6, #0xa
	ldrsh	r1, [r0, r6]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	ldr	r0, [r5]
	strb	r4, [r0, #0x10]
	b	.L717
.L907:
	.align	2, 0
.L906:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L714:
	ldr	r6, .L908
	ldr	r1, [r6]
	ldrb	r5, [r1, #0x10]
	cmp	r5, #0
	bne	.L718	@cond_branch
	ldr	r4, .L908+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r2, #0xa
	ldrsh	r0, [r0, r2]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x11
	bl	BufferDomeWinString
	ldr	r0, .L908+0x8
	strh	r5, [r0]
	ldr	r1, .L908+0xc
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r2, [r6]
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x11]
	bl	DisplayTrainerInfoOnCard
	b	.L717
.L909:
	.align	2, 0
.L908:
	.word	sInfoCard
	.word	gTasks
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L718:
	cmp	r5, #0x2
	bne	.L720	@cond_branch
	ldr	r4, .L910
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r3, #0xa
	ldrsh	r0, [r0, r3]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r1, #0x11
	bl	BufferDomeWinString
	ldr	r1, .L910+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L910+0x8
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r2, [r6]
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	bl	DisplayTrainerInfoOnCard
	b	.L717
.L911:
	.align	2, 0
.L910:
	.word	gTasks
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L720:
	ldr	r1, .L912
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	strh	r0, [r1]
	ldr	r1, .L912+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L912+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	bl	DisplayMatchInfoOnCard
.L717:
	mov	r6, #0x0
	ldr	r0, .L912+0xc
	mov	sl, r0
	ldr	r3, .L912+0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L912+0x8
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L725:
	cmp	r6, #0x1
	bgt	.L726	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L724	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L912+0x14
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L724
.L913:
	.align	2, 0
.L912:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sInfoCard
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollDown
.L726:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L724	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L914
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L724:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L725	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L914+0x4
	mov	ip, r2
	ldr	r3, .L914+0x8
	ldr	r1, .L914+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L734:
	cmp	r6, #0x9
	bgt	.L735	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L733	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L914+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L733
.L915:
	.align	2, 0
.L914:
	.word	SpriteCb_MonIconCardScrollDown
	.word	sInfoCard
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollDown
.L735:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L733	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L916
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L733:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L734	@cond_branch
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L916+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x5
	bl	.L870	@ far jump
.L917:
	.align	2, 0
.L916:
	.word	SpriteCb_MonIconCardScrollDown
	.word	gTasks
.L740:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L918
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L741	@cond_branch
	ldr	r0, .L918+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L918+0x8
	strh	r1, [r0]
	ldr	r2, .L918+0xc
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r2]
	ldr	r0, .L918+0x10
	strh	r1, [r0]
	b	.L742
.L919:
	.align	2, 0
.L918:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L741:
	ldr	r1, .L920
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L920+0x4
	strh	r2, [r0]
	ldr	r0, .L920+0x8
	strh	r2, [r0]
	ldr	r0, .L920+0xc
	strh	r2, [r0]
.L742:
	ldr	r0, .L920+0x10
	ldr	r4, [r0]
	ldrb	r0, [r4, #0x10]
	cmp	r0, #0
	bne	.L743	@cond_branch
	ldr	r1, .L920+0x14
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	strh	r0, [r1]
	ldr	r1, .L920+0x18
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r3, .L920+0x1c
	ldr	r2, .L920+0x20
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r5, #0xa
	ldrsh	r1, [r0, r5]
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayTrainerInfoOnCard
	b	.L744
.L921:
	.align	2, 0
.L920:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sInfoCard
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sTourneyTreeTrainerIds
	.word	gTasks
.L743:
	ldr	r1, .L922
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r1]
	ldr	r1, .L922+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r3, .L922+0x8
	ldr	r2, .L922+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r5, #0xa
	ldrsh	r1, [r0, r5]
	lsl	r1, r1, #0x2
	sub	r1, r1, #0x1
	ldrb	r4, [r4, #0x10]
	add	r1, r1, r4
	add	r1, r1, r3
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayMatchInfoOnCard
.L744:
	mov	r6, #0x0
	ldr	r0, .L922+0x10
	mov	sl, r0
	ldr	r3, .L922+0x14
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L922+0xc
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L748:
	cmp	r6, #0x1
	bgt	.L749	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L747	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L922+0x18
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L747
.L923:
	.align	2, 0
.L922:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sIdToMatchNumber
	.word	gTasks
	.word	sInfoCard
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollLeft
.L749:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L747	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L924
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L747:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L748	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L924+0x4
	mov	ip, r2
	ldr	r3, .L924+0x8
	ldr	r1, .L924+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L757:
	cmp	r6, #0x9
	bgt	.L758	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L756	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L924+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L756
.L925:
	.align	2, 0
.L924:
	.word	SpriteCb_MonIconCardScrollLeft
	.word	sInfoCard
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollLeft
.L758:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L756	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L926
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L756:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L757	@cond_branch
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L926+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x6
	b	.L870
.L927:
	.align	2, 0
.L926:
	.word	SpriteCb_MonIconCardScrollLeft
	.word	gTasks
.L763:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L928
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L764	@cond_branch
	ldr	r0, .L928+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L928+0x8
	strh	r1, [r0]
	ldr	r2, .L928+0xc
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	strh	r0, [r2]
	ldr	r0, .L928+0x10
	strh	r1, [r0]
	b	.L765
.L929:
	.align	2, 0
.L928:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L764:
	ldr	r1, .L930
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L930+0x4
	strh	r2, [r0]
	ldr	r0, .L930+0x8
	strh	r2, [r0]
	ldr	r0, .L930+0xc
	strh	r2, [r0]
.L765:
	ldr	r0, .L930+0x10
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x10]
	cmp	r0, #0
	bne	.L766	@cond_branch
	ldr	r1, .L930+0x14
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	strh	r0, [r1]
	ldr	r1, .L930+0x18
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L930+0x1c
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x11]
	bl	DisplayTrainerInfoOnCard
	b	.L767
.L931:
	.align	2, 0
.L930:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sInfoCard
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
.L766:
	ldr	r1, .L932
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L932+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L932+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	bl	DisplayMatchInfoOnCard
.L767:
	mov	r6, #0x0
	ldr	r0, .L932+0xc
	mov	sl, r0
	ldr	r3, .L932+0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L932+0x8
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L771:
	cmp	r6, #0x1
	bgt	.L772	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L770	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L932+0x14
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L770
.L933:
	.align	2, 0
.L932:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sInfoCard
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollLeft
.L772:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L770	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L934
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L770:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L771	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L934+0x4
	mov	ip, r2
	ldr	r3, .L934+0x8
	ldr	r1, .L934+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L780:
	cmp	r6, #0x9
	bgt	.L781	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L779	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L934+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L779
.L935:
	.align	2, 0
.L934:
	.word	SpriteCb_MonIconCardScrollLeft
	.word	sInfoCard
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollLeft
.L781:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L779	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L936
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L779:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L780	@cond_branch
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L936+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x6
	b	.L870
.L937:
	.align	2, 0
.L936:
	.word	SpriteCb_MonIconCardScrollLeft
	.word	gTasks
.L786:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L938
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L787	@cond_branch
	ldr	r0, .L938+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L938+0x8
	strh	r1, [r0]
	ldr	r2, .L938+0xc
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	add	r0, r6, #0
	strh	r0, [r2]
	ldr	r0, .L938+0x10
	strh	r1, [r0]
	b	.L788
.L939:
	.align	2, 0
.L938:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L787:
	ldr	r1, .L940
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L940+0x4
	strh	r2, [r0]
	ldr	r0, .L940+0x8
	strh	r2, [r0]
	ldr	r0, .L940+0xc
	strh	r2, [r0]
.L788:
	ldr	r0, .L940+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	bne	.L789	@cond_branch
	ldr	r1, .L940+0x14
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L940+0x18
	mov	r0, #0xa0
	strh	r0, [r1]
	b	.L790
.L941:
	.align	2, 0
.L940:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sInfoCard
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.L789:
	ldr	r0, .L942
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L942+0x4
	strh	r1, [r0]
.L790:
	ldr	r4, .L942+0x8
	ldr	r5, .L942+0xc
	ldr	r3, [r5]
	ldr	r2, .L942+0x10
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r6, #0xa
	ldrsh	r1, [r0, r6]
	lsl	r1, r1, #0x2
	sub	r1, r1, #0x1
	ldrb	r3, [r3, #0x10]
	add	r1, r1, r3
	add	r1, r1, r4
	mov	r4, r9
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	add	r4, r4, r2
	ldrb	r2, [r4, #0xc]
	mov	r0, #0x2
	orr	r0, r0, r2
	ldrb	r1, [r1]
	bl	DisplayMatchInfoOnCard
	mov	r6, #0x0
	ldr	r7, .L942+0x14
	mov	ip, r6
	mov	sl, r5
	add	r5, r7, #0
	add	r5, r5, #0x1c
.L794:
	cmp	r6, #0x1
	bgt	.L795	@cond_branch
	mov	r1, sl
	ldr	r0, [r1]
	add	r3, r0, r6
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L793	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L942+0x18
	str	r1, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r4, #0xc]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r2, ip
	strh	r2, [r0, #0x30]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r6, [r0, #0x32]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r1, [r0, #0x34]
	b	.L793
.L943:
	.align	2, 0
.L942:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	sIdToMatchNumber
	.word	sInfoCard
	.word	gTasks
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollRight
.L795:
	mov	r3, sl
	ldr	r0, [r3]
	add	r3, r0, r6
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L793	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L944
	str	r1, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r4, #0xc]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r6, [r0, #0x32]
.L793:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L794	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L944+0x4
	mov	ip, r2
	ldr	r3, .L944+0x8
	ldr	r1, .L944+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L803:
	cmp	r6, #0x9
	bgt	.L804	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L802	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L944+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L802
.L945:
	.align	2, 0
.L944:
	.word	SpriteCb_MonIconCardScrollRight
	.word	sInfoCard
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollRight
.L804:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L802	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L946
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L802:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L803	@cond_branch
	b	.L871
.L947:
	.align	2, 0
.L946:
	.word	SpriteCb_MonIconCardScrollRight
.L809:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L948
	add	r0, r0, r4
	mov	r5, #0xc
	ldrsh	r2, [r0, r5]
	cmp	r2, #0
	beq	.L810	@cond_branch
	ldr	r0, .L948+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L948+0x8
	strh	r1, [r0]
	ldr	r2, .L948+0xc
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	add	r0, r6, #0
	strh	r0, [r2]
	ldr	r0, .L948+0x10
	strh	r1, [r0]
	b	.L811
.L949:
	.align	2, 0
.L948:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.L810:
	ldr	r1, .L950
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r0, r3, #0
	strh	r0, [r1]
	ldr	r0, .L950+0x4
	strh	r2, [r0]
	ldr	r0, .L950+0x8
	strh	r2, [r0]
	ldr	r0, .L950+0xc
	strh	r2, [r0]
.L811:
	ldr	r0, .L950+0x10
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x10]
	cmp	r0, #0x2
	bne	.L812	@cond_branch
	ldr	r1, .L950+0x14
	mov	r4, #0x80
	lsl	r4, r4, #0x1
	add	r0, r4, #0
	strh	r0, [r1]
	ldr	r1, .L950+0x18
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L950+0x1c
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x2
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	bl	DisplayTrainerInfoOnCard
	b	.L813
.L951:
	.align	2, 0
.L950:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sInfoCard
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
.L812:
	ldr	r1, .L952
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L952+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L952+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r5, #0xa
	ldrsh	r0, [r0, r5]
	add	r2, r0, #0
	sub	r2, r2, #0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x2
	orr	r0, r0, r1
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	bl	DisplayMatchInfoOnCard
.L813:
	mov	r6, #0x0
	ldr	r0, .L952+0xc
	mov	sl, r0
	ldr	r3, .L952+0x10
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L952+0x8
	add	r5, r0, r1
	mov	ip, r6
	add	r4, r3, #0
	add	r4, r4, #0x1c
	mov	r7, #0x1
.L817:
	cmp	r6, #0x1
	bgt	.L818	@cond_branch
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L816	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L952+0x14
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L816
.L953:
	.align	2, 0
.L952:
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sInfoCard
	.word	gSprites
	.word	SpriteCb_TrainerIconCardScrollRight
.L818:
	mov	r2, sl
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L816	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L954
	str	r1, [r0]
	ldrb	r0, [r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r5, #0xc]
	eor	r0, r0, r7
	strh	r0, [r1, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, ip
	strh	r1, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L816:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L817	@cond_branch
	mov	r6, #0x8
	ldr	r2, .L954+0x4
	mov	ip, r2
	ldr	r3, .L954+0x8
	ldr	r1, .L954+0xc
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r4, #0x0
	add	r7, r3, #0
	add	r7, r7, #0x1c
.L826:
	cmp	r6, #0x9
	bgt	.L827	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L825	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L954+0x10
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r1, [r0, #0x34]
	b	.L825
.L955:
	.align	2, 0
.L954:
	.word	SpriteCb_MonIconCardScrollRight
	.word	sInfoCard
	.word	gSprites
	.word	gTasks
	.word	SpriteCb_TrainerIconCardScrollRight
.L827:
	mov	r2, ip
	ldr	r0, [r2]
	add	r2, r0, r6
	ldrb	r0, [r2]
	cmp	r0, #0xff
	beq	.L825	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldr	r1, .L956
	str	r1, [r0]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r5, #0xc]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r6, [r0, #0x32]
.L825:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L826	@cond_branch
.L871:
	mov	r0, r9
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L956+0x4
	add	r0, r0, r3
	mov	r2, #0x0
	mov	r1, #0x7
.L870:
	strh	r1, [r0, #0x8]
	strh	r2, [r0, #0x12]
	b	.L657
.L957:
	.align	2, 0
.L956:
	.word	SpriteCb_MonIconCardScrollRight
	.word	gTasks
.L834:
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r5, .L958
	add	r1, r0, r5
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x29
	beq	.L844	@cond_branch
	ldr	r1, .L958+0x4
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L958+0x8
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L958+0xc
	b	.L872
.L959:
	.align	2, 0
.L958:
	.word	gTasks
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_Y
.L837:
	mov	r6, r8
	lsl	r0, r6, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r2, .L960
	add	r1, r0, r2
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x29
	beq	.L844	@cond_branch
	ldr	r1, .L960+0x4
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L960+0x8
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L960+0xc
	b	.L873
.L961:
	.align	2, 0
.L960:
	.word	gTasks
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_Y
.L840:
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r4, .L962
	add	r1, r0, r4
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x41
	beq	.L844	@cond_branch
	ldr	r1, .L962+0x4
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L962+0x8
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L962+0xc
.L872:
	ldrh	r0, [r1]
	sub	r0, r0, #0x4
	strh	r0, [r1]
	b	.L657
.L963:
	.align	2, 0
.L962:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG1_X
	.word	gBattle_BG2_X
.L843:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r6, .L964
	add	r1, r0, r6
	ldrh	r0, [r1, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x12]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x41
	beq	.L844	@cond_branch
	ldr	r1, .L964+0x4
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L964+0x8
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	ldr	r1, .L964+0xc
.L873:
	ldrh	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r1]
	b	.L657
.L965:
	.align	2, 0
.L964:
	.word	gTasks
	.word	gBattle_BG0_X
	.word	gBattle_BG1_X
	.word	gBattle_BG2_X
.L844:
	mov	r0, #0x2
	strh	r0, [r1, #0x8]
	b	.L657
.L846:
	ldr	r0, .L966
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L657	@cond_branch
	mov	r6, #0x0
	ldr	r4, .L966+0x4
.L851:
	cmp	r6, #0x1
	bgt	.L852	@cond_branch
	ldr	r0, [r4]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L850	@cond_branch
	bl	FreeAndDestroyTrainerPicSprite
	b	.L850
.L967:
	.align	2, 0
.L966:
	.word	gPaletteFade
	.word	sInfoCard
.L852:
	ldr	r0, [r4]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L850	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L968
	add	r0, r0, r1
	bl	FreeAndDestroyMonIconSprite
.L850:
	add	r6, r6, #0x1
	cmp	r6, #0x7
	ble	.L851	@cond_branch
	mov	r6, #0x8
	ldr	r4, .L968+0x4
.L860:
	cmp	r6, #0x9
	bgt	.L861	@cond_branch
	ldr	r0, [r4]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L859	@cond_branch
	bl	FreeAndDestroyTrainerPicSprite
	b	.L859
.L969:
	.align	2, 0
.L968:
	.word	gSprites
	.word	sInfoCard
.L861:
	ldr	r0, [r4]
	add	r1, r0, r6
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L859	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L970
	add	r0, r0, r1
	bl	FreeAndDestroyMonIconSprite
.L859:
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L860	@cond_branch
	bl	FreeMonIconPalettes
	ldr	r4, .L970+0x4
	ldr	r0, [r4]
	bl	Free
	mov	r5, #0x0
	str	r5, [r4]
	bl	FreeAllWindowBuffers
	mov	r0, r9
	cmp	r0, #0
	bne	.L866	@cond_branch
	ldr	r0, .L970+0x8
	bl	SetMainCallback2
	b	.L867
.L971:
	.align	2, 0
.L970:
	.word	gSprites
	.word	sInfoCard
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L866:
	ldr	r0, .L972
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L972+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r5, [r1, #0x8]
	strh	r5, [r1, #0xa]
	mov	r0, #0x3
	strh	r0, [r1, #0xc]
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x10]
	strh	r0, [r1, #0xe]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x14]
	strh	r0, [r1, #0x10]
.L867:
	mov	r0, r8
	bl	DestroyTask
.L657:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L973:
	.align	2, 0
.L972:
	.word	Task_ShowTourneyTree
	.word	gTasks
.Lfe38:
	.size	 Task_HandleInfoCardInput,.Lfe38-Task_HandleInfoCardInput
	.align	2, 0
	.type	 Task_GetInfoCardInput,function
	.thumb_func
Task_GetInfoCardInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r7, #0x0
	ldr	r2, .L1016
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	ip, r0
	mov	r1, #0x10
	ldrsh	r6, [r0, r1]
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r3, #0xa
	ldrsh	r5, [r0, r3]
	ldr	r0, .L1016+0x4
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	sl, r0
	ldr	r3, .L1016+0x8
	ldr	r0, [r3]
	ldr	r1, .L1016+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r8, r0
	ldr	r1, .L1016+0x10
	ldrh	r4, [r1, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r4
	add	r2, r1, #0
	cmp	r0, #0
	beq	.L975	@cond_branch
	mov	r7, #0x9
.L975:
	mov	r3, ip
	mov	r1, #0xe
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.LCB9087
	b	.L1011	@long jump
.LCB9087:
	cmp	r0, #0x1
	beq	.LCB9089
	b	.L977	@long jump
.LCB9089:
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L978	@cond_branch
	ldr	r0, .L1016+0x14
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	bne	.L978	@cond_branch
	cmp	r5, #0
	bne	.L979	@cond_branch
	mov	r5, #0xf
	b	.L980
.L1017:
	.align	2, 0
.L1016:
	.word	gTasks
	.word	sTourneyTreeTrainerIds
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	gMain
	.word	sInfoCard
.L979:
	sub	r5, r5, #0x1
.L980:
	mov	r7, #0x1
	b	.L981
.L978:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L982	@cond_branch
	ldr	r0, .L1018
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0
	bne	.L982	@cond_branch
	cmp	r5, #0xf
	bne	.L983	@cond_branch
	mov	r5, #0x0
	b	.L984
.L1019:
	.align	2, 0
.L1018:
	.word	sInfoCard
.L983:
	add	r5, r5, #0x1
.L984:
	mov	r7, #0x2
	b	.L981
.L982:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L986	@cond_branch
	ldr	r0, .L1020
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L986	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x10]
	mov	r7, #0x3
	b	.L981
.L1021:
	.align	2, 0
.L1020:
	.word	sInfoCard
.L986:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L981	@cond_branch
	ldr	r2, .L1022
	ldr	r0, [r2]
	mov	r3, sl
	lsl	r1, r3, #0x2
	add	r0, r0, r1
	ldr	r2, .L1022+0x4
	add	r0, r0, r2
	ldrb	r3, [r0]
	lsl	r0, r3, #0x1d
	mov	ip, r1
	cmp	r0, #0
	bge	.L989	@cond_branch
	ldr	r0, .L1022+0x8
	ldr	r2, [r0]
	ldrb	r4, [r2, #0x10]
	sub	r1, r4, #0x1
	lsl	r0, r3, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r1, r0
	bge	.L989	@cond_branch
	add	r0, r4, #0x1
	strb	r0, [r2, #0x10]
	mov	r7, #0x4
.L989:
	ldr	r3, .L1022
	ldr	r0, [r3]
	add	r0, r0, ip
	ldr	r1, .L1022+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L981	@cond_branch
	ldr	r0, .L1022+0x8
	ldr	r3, [r0]
	ldrb	r1, [r3, #0x10]
	sub	r0, r1, #0x1
	cmp	r0, r8
	bge	.L981	@cond_branch
	add	r0, r1, #0x1
	strb	r0, [r3, #0x10]
	mov	r7, #0x4
.L981:
	cmp	r7, #0x9
	beq	.LCB9258
	b	.L994	@long jump
.LCB9258:
	ldr	r0, .L1022+0x8
	ldr	r3, [r0]
	ldrb	r0, [r3, #0x10]
	cmp	r0, #0
	beq	.L992	@cond_branch
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	ldr	r2, .L1022+0xc
	add	r1, r1, r2
	ldr	r2, .L1022+0x10
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x2
	sub	r0, r0, #0x1
	ldrb	r3, [r3, #0x10]
	add	r0, r0, r3
	b	.L1013
.L1023:
	.align	2, 0
.L1022:
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	sInfoCard
	.word	gTasks
	.word	gUnknown_0860D1A0
.L992:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r3, .L1024
	add	r0, r0, r3
	b	.L1014
.L1025:
	.align	2, 0
.L1024:
	.word	gTasks
.L977:
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L995	@cond_branch
	ldr	r0, .L1026
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	bne	.L995	@cond_branch
	cmp	r5, #0x10
	bne	.L996	@cond_branch
	ldr	r0, .L1026+0x4
	add	r0, r0, r8
	ldrb	r5, [r0]
	b	.L997
.L1027:
	.align	2, 0
.L1026:
	.word	sInfoCard
	.word	sLastMatchCardNum
.L996:
	sub	r5, r5, #0x1
.L997:
	mov	r7, #0x5
	b	.L998
.L995:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L999	@cond_branch
	ldr	r0, .L1028
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	cmp	r0, #0x1
	bne	.L999	@cond_branch
	ldr	r0, .L1028+0x4
	add	r0, r0, r8
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L1000	@cond_branch
	mov	r5, #0x10
	b	.L1001
.L1029:
	.align	2, 0
.L1028:
	.word	sInfoCard
	.word	sLastMatchCardNum
.L1000:
	add	r5, r5, #0x1
.L1001:
	mov	r7, #0x6
	b	.L998
.L999:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1003	@cond_branch
	ldr	r0, .L1030
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L1003	@cond_branch
	mov	r7, #0x7
	sub	r0, r0, #0x1
	b	.L1015
.L1031:
	.align	2, 0
.L1030:
	.word	sInfoCard
.L1003:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L998	@cond_branch
	ldr	r0, .L1032
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0x1
	bhi	.L998	@cond_branch
	mov	r7, #0x8
	add	r0, r0, #0x1
.L1015:
	strb	r0, [r1, #0x10]
.L998:
	cmp	r7, #0x9
	bne	.L994	@cond_branch
	ldr	r0, .L1032
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x10]
	cmp	r1, #0
	bne	.L1007	@cond_branch
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	ldr	r2, .L1032+0x4
	add	r1, r1, r2
	ldr	r2, .L1032+0x8
	ldrb	r0, [r0, #0x11]
	b	.L1013
.L1033:
	.align	2, 0
.L1032:
	.word	sInfoCard
	.word	gTasks
	.word	gUnknown_0860D1C0
.L1007:
	cmp	r1, #0x2
	bne	.L1009	@cond_branch
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	ldr	r3, .L1034
	add	r1, r1, r3
	ldr	r2, .L1034+0x4
	ldrb	r0, [r0, #0x12]
.L1013:
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1, #0xa]
	b	.L994
.L1035:
	.align	2, 0
.L1034:
	.word	gTasks
	.word	gUnknown_0860D1C0
.L1009:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L1036
	add	r0, r0, r1
.L1014:
	strh	r5, [r0, #0xa]
.L994:
	cmp	r7, #0
	beq	.L1011	@cond_branch
	cmp	r7, #0x9
	beq	.L1011	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L1036
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0xa]
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0xc]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0xc]
.L1011:
	add	r0, r7, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1037:
	.align	2, 0
.L1036:
	.word	gTasks
.Lfe39:
	.size	 Task_GetInfoCardInput,.Lfe39-Task_GetInfoCardInput
	.align	2, 0
	.type	 DisplayTrainerInfoOnCard,function
	.thumb_func
DisplayTrainerInfoOnCard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x58
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x1c]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x20]
	mov	r5, #0x0
	mov	r0, #0x0
	str	r0, [sp, #0x28]
	mov	r1, #0x0
	str	r1, [sp, #0x2c]
	mov	r2, #0x0
	str	r2, [sp, #0x30]
	mov	r4, #0x0
	mov	r0, #0x24
	bl	AllocZeroed
	mov	r8, r0
	ldr	r0, .L1233
	ldr	r1, [r0]
	ldr	r3, [sp, #0x20]
	lsl	r0, r3, #0x2
	add	r0, r1, r0
	ldr	r2, .L1233+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	str	r0, [sp, #0x24]
	mov	r0, #0x1
	ldr	r3, [sp, #0x1c]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1039	@cond_branch
	mov	r5, #0x8
	mov	r4, #0x9
	str	r4, [sp, #0x28]
	mov	r4, #0x2
.L1039:
	mov	r0, #0x2
	ldr	r2, [sp, #0x1c]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1040	@cond_branch
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r3, [sp, #0x2c]
.L1040:
	mov	r0, #0x4
	ldr	r2, [sp, #0x1c]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1041	@cond_branch
	mov	r3, #0xa0
	str	r3, [sp, #0x30]
.L1041:
	mov	r0, #0x8
	ldr	r2, [sp, #0x1c]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1042	@cond_branch
	ldr	r3, .L1233+0x8
	str	r3, [sp, #0x2c]
.L1042:
	mov	r0, #0x10
	ldr	r2, [sp, #0x1c]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1043	@cond_branch
	mov	r3, #0xa0
	neg	r3, r3
	str	r3, [sp, #0x30]
.L1043:
	ldr	r0, .L1233+0xc
	ldr	r2, [sp, #0x24]
	cmp	r2, r0
	bne	.L1044	@cond_branch
	ldrb	r0, [r1, #0x8]
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L1225
.L1234:
	.align	2, 0
.L1233:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	-0x100
	.word	0x3ff
.L1044:
	ldr	r0, .L1235
	ldr	r3, [sp, #0x24]
	cmp	r3, r0
	bne	.L1046	@cond_branch
	bl	GetDomeBrainTrainerPicId
	b	.L1226
.L1236:
	.align	2, 0
.L1235:
	.word	0x3fe
.L1046:
	ldr	r0, [sp, #0x24]
	bl	GetFrontierTrainerFrontSpriteId
.L1226:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1225:
	ldr	r2, [sp, #0x2c]
	add	r2, r2, #0x30
	ldr	r3, [sp, #0x30]
	add	r3, r3, #0x40
	add	r1, r4, #0
	add	r1, r1, #0xc
	str	r1, [sp]
	ldr	r1, .L1237
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	bl	CreateTrainerPicSprite
	ldr	r1, .L1237+0x4
	ldr	r1, [r1]
	add	r1, r1, r5
	strb	r0, [r1]
	mov	r0, #0x1e
	ldr	r4, [sp, #0x1c]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L1048	@cond_branch
	ldr	r2, .L1237+0x8
	ldr	r0, .L1237+0x4
	ldr	r0, [r0]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1048:
	mov	r7, #0x0
	ldr	r0, [sp, #0x20]
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x3c]
	add	r1, r5, #0x2
	ldr	r2, [sp, #0x28]
	lsl	r2, r2, #0x18
	str	r2, [sp, #0x44]
	ldr	r3, [sp, #0x28]
	add	r3, r3, #0x4
	str	r3, [sp, #0x40]
	ldr	r4, [sp, #0x20]
	add	r0, r0, r4
	ldr	r6, .L1237+0x4
	ldr	r2, .L1237+0x8
	mov	sl, r2
	add	r4, r1, #0
	lsl	r5, r0, #0x1
	mov	r3, #0x0
	mov	r9, r3
.L1052:
	ldr	r0, .L1237+0xc
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1053	@cond_branch
	ldr	r0, .L1237+0x10
	ldr	r0, [r0]
	ldr	r2, .L1237+0x14
	add	r0, r0, r2
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldr	r1, .L1237+0x18
	add	r1, r7, r1
	ldrb	r2, [r1]
	ldr	r3, [sp, #0x2c]
	orr	r2, r2, r3
	b	.L1227
.L1238:
	.align	2, 0
.L1237:
	.word	0xffff
	.word	sInfoCard
	.word	gSprites
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	sInfoTrainerMonX
.L1053:
	ldr	r0, .L1239
	ldr	r3, [sp, #0x24]
	cmp	r3, r0
	bne	.L1055	@cond_branch
	ldr	r0, .L1239+0x4
	ldr	r0, [r0]
	ldr	r1, .L1239+0x8
	add	r0, r0, r1
	add	r0, r0, r5
	ldrh	r0, [r0]
	ldr	r1, .L1239+0xc
	add	r1, r7, r1
	ldrb	r2, [r1]
	ldr	r3, [sp, #0x2c]
	orr	r2, r2, r3
	b	.L1227
.L1240:
	.align	2, 0
.L1239:
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	sInfoTrainerMonX
.L1055:
	ldr	r0, .L1241
	ldr	r0, [r0]
	ldr	r3, .L1241+0x4
	add	r0, r0, r3
	add	r0, r0, r5
	ldrh	r1, [r0]
	ldr	r0, .L1241+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L1241+0xc
	add	r1, r7, r1
	ldrb	r2, [r1]
	ldr	r1, [sp, #0x2c]
	orr	r2, r2, r1
.L1227:
	ldr	r1, .L1241+0x10
	add	r1, r7, r1
	ldrb	r3, [r1]
	ldr	r1, [sp, #0x30]
	add	r3, r3, r1
	mov	r1, r9
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	ldr	r1, .L1241+0x14
	bl	CreateMonIcon
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrb	r1, [r0, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r0, #0x1e
	ldr	r3, [sp, #0x1c]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1051	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1051:
	add	r4, r4, #0x1
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x2
	ble	.L1052	@cond_branch
	add	r0, sp, #0xc
	mov	r2, #0x0
	mov	r3, #0x2
	strb	r3, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r2, [r0, #0x7]
	add	r1, r0, #0
	add	r0, r2, #0
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	ldrb	r0, [r0, #0x7]
	strb	r0, [r1, #0x9]
	add	r0, r1, #0
	strb	r3, [r0, #0xa]
	strb	r2, [r0, #0xb]
	add	r3, r0, #0
	ldrb	r2, [r3, #0xc]
	mov	r1, #0x10
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	add	r2, r3, #0
	mov	r0, #0xe0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	add	r1, r2, #0
	mov	r0, #0xd0
	strb	r0, [r1, #0xd]
	mov	r7, #0x0
	ldr	r0, .L1241+0x18
	ldr	r4, [sp, #0x24]
	cmp	r4, r0
	bne	.L1059	@cond_branch
	ldr	r0, .L1241+0x1c
	add	r0, r0, #0x3c
	ldrb	r5, [r0]
	b	.L1060
.L1242:
	.align	2, 0
.L1241:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	sInfoTrainerMonX
	.word	sInfoTrainerMonY
	.word	SpriteCb_MonIcon
	.word	0x3ff
	.word	gFacilityClassToTrainerClass
.L1059:
	ldr	r0, .L1243
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1061	@cond_branch
	bl	GetDomeBrainTrainerClass
	b	.L1228
.L1244:
	.align	2, 0
.L1243:
	.word	0x3fe
.L1061:
	ldr	r0, [sp, #0x24]
	bl	GetFrontierOpponentClass
.L1228:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1060:
	ldr	r2, .L1245
	mov	r0, #0xd
	mov	r1, r5
	mul	r1, r1, r0
	add	r0, r7, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L1064	@cond_branch
	ldr	r3, .L1245+0x4
	add	r0, r1, r2
	add	r2, r7, r0
.L1066:
	add	r0, r7, r3
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r2, r2, #0x1
	add	r7, r7, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L1066	@cond_branch
.L1064:
	ldr	r5, .L1245+0x4
	add	r1, r7, r5
	mov	r0, #0x0
	strb	r0, [r1]
	add	r0, r7, #0x1
	add	r0, r0, r5
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r0, .L1245+0x8
	ldr	r2, [sp, #0x24]
	cmp	r2, r0
	bne	.L1068	@cond_branch
	ldr	r0, .L1245+0xc
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	StringAppend
	b	.L1069
.L1246:
	.align	2, 0
.L1245:
	.word	gTrainerClassNames
	.word	gStringVar1
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1068:
	ldr	r0, .L1247
	ldr	r3, [sp, #0x24]
	cmp	r3, r0
	bne	.L1070	@cond_branch
	ldr	r4, .L1247+0x4
	add	r0, r4, #0
	bl	CopyDomeBrainTrainerName
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringAppend
	b	.L1069
.L1248:
	.align	2, 0
.L1247:
	.word	0x3fe
	.word	gStringVar2
.L1070:
	ldr	r4, .L1249
	ldr	r1, [sp, #0x24]
	add	r0, r4, #0
	bl	CopyDomeTrainerName
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringAppend
.L1069:
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x5]
	ldr	r4, .L1249+0x4
	add	r1, sp, #0xc
	ldrb	r3, [r1, #0xa]
	add	r1, r4, #0
	mov	r2, #0xd0
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0xc
	mov	r5, #0x0
	strb	r0, [r1, #0x8]
	str	r4, [sp, #0xc]
	add	r0, r1, #0
	add	r4, sp, #0x28
	ldrb	r4, [r4]
	strb	r4, [r0, #0x4]
	ldr	r0, [sp, #0x44]
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, sp, #0xc
	strb	r5, [r0, #0xa]
	mov	r7, #0x0
	add	r6, r0, #0
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x20]
	add	r0, r1, r2
	lsl	r0, r0, #0x1
	mov	r9, r0
	mov	r3, #0xb
	mov	sl, r3
.L1075:
	ldr	r0, .L1249+0x8
	add	r0, r7, r0
	ldrb	r0, [r0]
	strb	r0, [r6, #0x9]
	ldr	r0, .L1249+0xc
	ldr	r4, [sp, #0x24]
	cmp	r4, r0
	bne	.L1076	@cond_branch
	ldr	r0, .L1249+0x10
	ldr	r1, [r0]
	lsl	r0, r7, #0x1
	add	r0, r0, r9
	ldr	r2, .L1249+0x14
	add	r1, r1, r2
	b	.L1229
.L1250:
	.align	2, 0
.L1249:
	.word	gStringVar2
	.word	gStringVar1
	.word	sSpeciesNameTextYCoords
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1076:
	ldr	r0, .L1251
	ldr	r4, [sp, #0x24]
	cmp	r4, r0
	bne	.L1078	@cond_branch
	ldr	r0, .L1251+0x4
	ldr	r1, [r0]
	lsl	r0, r7, #0x1
	add	r0, r0, r9
	ldr	r2, .L1251+0x8
	add	r1, r1, r2
	b	.L1229
.L1252:
	.align	2, 0
.L1251:
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1078:
	ldr	r4, .L1253
	ldr	r1, [r4]
	lsl	r0, r7, #0x1
	add	r0, r0, r9
	ldr	r2, .L1253+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r1, [r1]
	ldr	r0, .L1253+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
.L1229:
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r3, sl
	mul	r3, r3, r0
	add	r0, r3, #0
	ldr	r1, .L1253+0xc
	add	r0, r0, r1
	str	r0, [sp, #0xc]
	add	r0, r7, #0x1
	ldr	r4, [sp, #0x28]
	add	r0, r0, r4
	mov	r1, #0x0
	strb	r0, [r6, #0x4]
	cmp	r7, #0x1
	bne	.L1080	@cond_branch
	mov	r0, #0x7
	strb	r0, [r6, #0x8]
	b	.L1081
.L1254:
	.align	2, 0
.L1253:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gSpeciesNames
.L1080:
	strb	r1, [r6, #0x8]
.L1081:
	add	r5, r7, #0x1
	ldr	r0, [sp, #0x28]
	add	r4, r5, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r7, r5, #0
	cmp	r7, #0x2
	ble	.L1075	@cond_branch
	ldr	r4, [sp, #0x40]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L1255
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1083	@cond_branch
	ldr	r0, .L1255+0x4
	ldr	r0, [r0, #0x40]
	b	.L1230
.L1256:
	.align	2, 0
.L1255:
	.word	0x3fe
	.word	sBattleDomePotentialTexts
.L1083:
	ldr	r0, .L1257
	ldr	r2, [sp, #0x20]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
.L1230:
	str	r0, [sp, #0xc]
	add	r1, sp, #0xc
	mov	r2, #0x0
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	add	r0, r1, #0
	add	r3, sp, #0x40
	ldrb	r3, [r3]
	strb	r3, [r0, #0x4]
	strb	r2, [r0, #0x8]
	mov	r1, #0x4
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0x0
	bl	AddTextPrinter
	mov	r7, #0x0
	ldr	r3, .L1257+0x4
.L1088:
	mov	r5, #0x0
	add	r4, r7, #0x1
	str	r4, [sp, #0x38]
	lsl	r0, r7, #0x1
	str	r0, [sp, #0x34]
	lsl	r2, r7, #0x4
.L1092:
	mov	r6, #0x0
	lsl	r1, r5, #0x1
	mov	sl, r1
	mov	r4, r8
	mov	r9, r2
.L1096:
	ldr	r0, .L1257+0x8
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1097	@cond_branch
	lsl	r0, r7, #0x18
	lsl	r1, r5, #0x18
	lsr	r0, r0, #0x18
	lsr	r1, r1, #0x18
	str	r2, [sp, #0x48]
	str	r3, [sp, #0x4c]
	bl	GetFrontierBrainMonMove
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xc
	add	r0, r6, r0
	ldr	r3, [sp, #0x4c]
	add	r0, r0, r3
	ldrh	r1, [r4]
	ldrb	r0, [r0]
	add	r1, r1, r0
	strh	r1, [r4]
	ldr	r2, [sp, #0x48]
	b	.L1095
.L1258:
	.align	2, 0
.L1257:
	.word	sBattleDomePotentialTexts
	.word	sBattleStyleMovePoints
	.word	0x3fe
.L1097:
	ldr	r0, .L1259
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1099	@cond_branch
	ldr	r0, .L1259+0x4
	ldr	r0, [r0]
	ldr	r1, .L1259+0x8
	add	r0, r0, r1
	add	r0, r0, r9
	b	.L1231
.L1260:
	.align	2, 0
.L1259:
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xefc
.L1099:
	ldr	r0, .L1261
	ldr	r0, [r0]
	mov	ip, r0
	ldr	r0, [sp, #0x3c]
	ldr	r1, [sp, #0x20]
	add	r0, r0, r1
	str	r0, [sp, #0x50]
	lsl	r0, r0, #0x1
	ldr	r1, [sp, #0x34]
	add	r0, r1, r0
	ldr	r1, .L1261+0x4
	add	r1, r1, ip
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L1261+0x8
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	add	r0, r0, #0x2
	add	r0, r0, sl
.L1231:
	ldrh	r0, [r0]
	lsl	r0, r0, #0x4
	add	r0, r6, r0
	add	r0, r0, r3
	ldrh	r1, [r4]
	ldrb	r0, [r0]
	add	r1, r1, r0
	strh	r1, [r4]
.L1095:
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L1096	@cond_branch
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1092	@cond_branch
	ldr	r7, [sp, #0x38]
	cmp	r7, #0x2
	ble	.L1088	@cond_branch
	mov	r7, #0x0
	ldr	r2, .L1261+0xc
	mov	r9, r2
	ldr	r3, .L1261+0x10
	mov	sl, r3
.L1107:
	mov	r4, #0x0
	mov	r6, #0x0
	mov	r5, #0x0
	mov	r3, r8
	lsl	r0, r7, #0x4
	mov	r1, sl
	add	r2, r0, r1
.L1111:
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L1110	@cond_branch
	add	r4, r4, #0x1
	mov	r1, #0x0
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	beq	.L1110	@cond_branch
	ldrb	r1, [r2]
	cmp	r0, r1
	blt	.L1110	@cond_branch
	add	r6, r6, #0x1
.L1110:
	add	r3, r3, #0x2
	add	r2, r2, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0xf
	ble	.L1111	@cond_branch
	cmp	r4, r6
	beq	.L1105	@cond_branch
	add	r7, r7, #0x1
	cmp	r7, #0x1e
	bls	.L1107	@cond_branch
.L1105:
	lsl	r0, r7, #0x2
	add	r0, r0, r9
	ldr	r0, [r0]
	str	r0, [sp, #0xc]
	add	r0, sp, #0xc
	mov	r1, #0x14
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r1, #0x0
	mov	r0, r8
	add	r0, r0, #0x22
.L1120:
	strh	r1, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r8
	bge	.L1120	@cond_branch
	ldr	r2, [sp, #0x24]
	ldr	r3, .L1261+0x14
	add	r0, r2, r3
	cmp	r0, #0x1
	bls	.LCB10595
	b	.L1122	@long jump
.LCB10595:
	mov	r7, #0x0
	mov	r4, #0x0
	mov	r9, r4
.L1126:
	mov	r5, #0x0
	mov	r4, r8
	mov	r6, r9
.L1130:
	ldr	r0, .L1261+0x18
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1131	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r6, #0x18
	bl	GetFrontierBrainMonEvs
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L1232
.L1262:
	.align	2, 0
.L1261:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	sBattleDomeOpponentStyleTexts
	.word	sBattleStyleThresholds
	.word	-0x3fe
	.word	0x3fe
.L1131:
	ldr	r0, .L1263
	ldr	r0, [r0]
	lsl	r1, r7, #0x4
	add	r1, r5, r1
	ldr	r2, .L1263+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
.L1232:
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L1130	@cond_branch
	mov	r3, r8
	ldrh	r0, [r3]
	ldrh	r4, [r3, #0xc]
	add	r0, r0, r4
	strh	r0, [r3, #0xc]
	mov	r5, #0x0
	mov	r4, r8
.L1137:
	ldr	r0, .L1263+0x8
	ldr	r1, [sp, #0x24]
	cmp	r1, r0
	bne	.L1138	@cond_branch
	mov	r2, r9
	lsr	r0, r2, #0x18
	bl	GetFrontierBrainMonNature
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	b	.L1139
.L1264:
	.align	2, 0
.L1263:
	.word	gSaveBlock2Ptr
	.word	0xf04
	.word	0x3fe
.L1138:
	ldr	r0, .L1265
	ldr	r0, [r0]
	lsl	r1, r7, #0x4
	add	r0, r0, r1
	ldr	r3, .L1265+0x4
	add	r0, r0, r3
	ldrb	r2, [r0]
.L1139:
	ldr	r1, .L1265+0x8
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	add	r0, r5, r0
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L1140	@cond_branch
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	mov	r0, #0x6e
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	ldrh	r1, [r4, #0xe]
	add	r1, r1, r0
	strh	r1, [r4, #0xe]
	b	.L1136
.L1266:
	.align	2, 0
.L1265:
	.word	gSaveBlock2Ptr
	.word	0xf0a
	.word	gNatureStatTable
.L1140:
	cmp	r0, #0
	bge	.L1142	@cond_branch
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	mov	r0, #0x5a
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	ldrh	r1, [r4, #0xe]
	add	r1, r1, r0
	strh	r1, [r4, #0xe]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	b	.L1136
.L1142:
	ldrh	r0, [r4, #0x2]
	ldrh	r3, [r4, #0xe]
	add	r0, r0, r3
	strh	r0, [r4, #0xe]
.L1136:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L1137	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0x11
	add	r9, r9, r4
	add	r7, r7, #0x1
	cmp	r7, #0x2
	bgt	.LCB10777
	b	.L1126	@long jump
.LCB10777:
	mov	r5, #0x0
	mov	r1, r8
	mov	r7, #0x5
.L1149:
	mov	r2, #0xc
	ldrsh	r0, [r1, r2]
	add	r5, r5, r0
	add	r1, r1, #0x2
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L1149	@cond_branch
	mov	r6, #0x64
	mov	r4, r8
	mov	r7, #0x5
.L1154:
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	mul	r0, r0, r6
	add	r1, r5, #0
	bl	__divsi3
	strh	r0, [r4]
	add	r4, r4, #0x2
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L1154	@cond_branch
	b	.L1156
.L1122:
	ldr	r4, .L1267
	mov	sl, r4
	ldr	r1, [sp, #0x3c]
	ldr	r2, [sp, #0x20]
	add	r0, r1, r2
	lsl	r0, r0, #0x1
	mov	r9, r0
	mov	r7, #0x2
.L1160:
	ldr	r3, .L1267+0x4
	ldr	r0, [r3]
	ldr	r4, .L1267+0x8
	add	r0, r0, r4
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r2, sl
	ldr	r1, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0xb]
	mov	r6, #0x0
	mov	r4, #0x0
	mov	r3, #0x1
	mov	r1, r8
	mov	r5, #0x5
.L1164:
	strh	r4, [r1]
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1165	@cond_branch
	add	r6, r6, #0x1
.L1165:
	asr	r2, r2, #0x1
	add	r1, r1, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L1164	@cond_branch
	mov	r0, #0xff
	lsl	r0, r0, #0x1
	add	r1, r6, #0
	bl	__divsi3
	add	r6, r0, #0
	ldr	r3, .L1267+0x4
	ldr	r0, [r3]
	ldr	r4, .L1267+0x8
	add	r0, r0, r4
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r2, sl
	ldr	r1, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0xb]
	mov	r3, #0x1
	mov	r1, r8
	mov	r5, #0x5
.L1170:
	add	r0, r2, #0
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1171	@cond_branch
	strh	r6, [r1]
.L1171:
	asr	r2, r2, #0x1
	add	r1, r1, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L1170	@cond_branch
	mov	r3, r8
	ldrh	r0, [r3]
	ldrh	r4, [r3, #0xc]
	add	r0, r0, r4
	strh	r0, [r3, #0xc]
	mov	r5, #0x0
	mov	r4, r8
.L1176:
	ldr	r1, .L1267+0x4
	ldr	r0, [r1]
	ldr	r2, .L1267+0x8
	add	r0, r0, r2
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r3, sl
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrb	r2, [r0, #0xc]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	add	r0, r5, r0
	ldr	r1, .L1267+0xc
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L1177	@cond_branch
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	mov	r0, #0x6e
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	ldrh	r1, [r4, #0xe]
	add	r1, r1, r0
	strh	r1, [r4, #0xe]
	b	.L1175
.L1268:
	.align	2, 0
.L1267:
	.word	gFacilityTrainerMons
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gNatureStatTable
.L1177:
	cmp	r0, #0
	bge	.L1179	@cond_branch
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	mov	r0, #0x5a
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	ldrh	r1, [r4, #0xe]
	add	r1, r1, r0
	strh	r1, [r4, #0xe]
	ldrh	r0, [r4, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1a]
	b	.L1175
.L1179:
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r4, #0xe]
	add	r0, r0, r1
	strh	r0, [r4, #0xe]
.L1175:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L1176	@cond_branch
	mov	r2, #0x2
	add	r9, r9, r2
	sub	r7, r7, #0x1
	cmp	r7, #0
	blt	.LCB11033
	b	.L1160	@long jump
.LCB11033:
	mov	r5, #0x0
	mov	r1, r8
	mov	r7, #0x5
.L1186:
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	add	r5, r5, r0
	add	r1, r1, #0x2
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L1186	@cond_branch
	mov	r6, #0x64
	mov	r4, r8
	mov	r7, #0x5
.L1191:
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	mul	r0, r0, r6
	add	r1, r5, #0
	bl	__divsi3
	strh	r0, [r4]
	add	r4, r4, #0x2
	sub	r7, r7, #0x1
	cmp	r7, #0
	bge	.L1191	@cond_branch
.L1156:
	mov	r7, #0x0
	mov	r5, #0x0
	mov	r6, #0x0
	mov	r4, r8
	mov	sl, r8
	mov	r9, r8
.L1196:
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	cmp	r1, #0x1d
	ble	.L1197	@cond_branch
	cmp	r7, #0x2
	bne	.L1198	@cond_branch
	mov	r3, r8
	mov	r0, #0xc
	ldrsh	r3, [r3, r0]
	mov	ip, r3
	cmp	ip, r1
	bge	.L1199	@cond_branch
	mov	r2, r8
	ldrh	r2, [r2, #0xe]
	add	r3, sp, #0x54
	strh	r2, [r3]
	mov	r2, r8
	mov	r3, #0xe
	ldrsh	r0, [r2, r3]
	cmp	r0, r1
	bge	.L1200	@cond_branch
	cmp	ip, r0
	bge	.L1201	@cond_branch
	add	r0, sp, #0x54
	ldrh	r0, [r0]
	strh	r0, [r2, #0xc]
	strh	r6, [r2, #0xe]
	b	.L1197
.L1201:
	mov	r1, r8
	strh	r6, [r1, #0xe]
	b	.L1197
.L1200:
	add	r2, sp, #0x54
	ldrh	r3, [r2]
	mov	r2, r8
	strh	r3, [r2, #0xc]
	strh	r6, [r2, #0xe]
	b	.L1197
.L1199:
	mov	r3, r8
	mov	r2, #0xe
	ldrsh	r0, [r3, r2]
	cmp	r0, r1
	bge	.L1197	@cond_branch
	strh	r6, [r3, #0xe]
	b	.L1197
.L1198:
	mov	r3, r9
	strh	r6, [r3, #0xc]
	mov	r0, #0x2
	add	r9, r9, r0
	add	r7, r7, #0x1
.L1197:
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1195	@cond_branch
	cmp	r5, #0x2
	bne	.L1208	@cond_branch
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x1
	bgt	.L1210	@cond_branch
	cmp	r0, #0x1
	bne	.L1195	@cond_branch
	mov	r3, r8
	mov	r1, #0x10
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r2, #0x18
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L1209	@cond_branch
	mov	r1, #0x12
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r2, #0x18
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	bne	.L1209	@cond_branch
.L1210:
	mov	r3, r8
	ldrh	r0, [r3, #0x12]
	strh	r0, [r3, #0x10]
	strh	r6, [r3, #0x12]
	b	.L1195
.L1209:
	mov	r1, #0x18
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L1195	@cond_branch
	mov	r2, r8
	mov	r3, #0x10
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1212	@cond_branch
	ldrh	r0, [r2, #0x12]
	strh	r0, [r2, #0x10]
	strh	r6, [r2, #0x12]
	b	.L1195
.L1212:
	mov	r2, r8
	mov	r3, #0x12
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	mov	r1, #0x18
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1195	@cond_branch
	strh	r6, [r2, #0x12]
	b	.L1195
.L1208:
	mov	r2, sl
	strh	r6, [r2, #0x10]
	mov	r3, #0x2
	add	sl, sl, r3
	add	r5, r5, #0x1
.L1195:
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L1196	@cond_branch
	cmp	r7, #0x2
	bne	.L1217	@cond_branch
	ldr	r0, .L1269
	mov	r4, r8
	mov	r1, #0xc
	ldrsh	r2, [r4, r1]
	add	r0, r2, r0
	mov	r3, #0xe
	ldrsh	r1, [r4, r3]
	sub	r1, r1, #0x1
	sub	r1, r1, r2
	ldrb	r0, [r0]
	add	r7, r1, r0
	b	.L1218
.L1270:
	.align	2, 0
.L1269:
	.word	sStatTextOffsets
.L1217:
	cmp	r7, #0x1
	bne	.L1219	@cond_branch
	mov	r4, r8
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	add	r7, r0, #0
	add	r7, r7, #0xf
	b	.L1218
.L1219:
	cmp	r5, #0x2
	bne	.L1221	@cond_branch
	ldr	r0, .L1271
	mov	r3, r8
	mov	r4, #0x10
	ldrsh	r2, [r3, r4]
	add	r0, r2, r0
	mov	r4, #0x12
	ldrsh	r1, [r3, r4]
	sub	r1, r1, #0x1
	sub	r1, r1, r2
	ldrb	r0, [r0]
	add	r1, r1, r0
	add	r7, r1, #0
	add	r7, r7, #0x15
	b	.L1218
.L1272:
	.align	2, 0
.L1271:
	.word	sStatTextOffsets
.L1221:
	cmp	r5, #0x1
	bne	.L1223	@cond_branch
	mov	r1, r8
	mov	r2, #0x10
	ldrsh	r0, [r1, r2]
	add	r7, r0, #0
	add	r7, r7, #0x24
	b	.L1218
.L1223:
	mov	r7, #0x2a
.L1218:
	lsl	r0, r7, #0x2
	ldr	r3, .L1273
	add	r0, r0, r3
	ldr	r0, [r0]
	str	r0, [sp, #0xc]
	add	r0, sp, #0xc
	mov	r1, #0x24
	strb	r1, [r0, #0x7]
	strb	r1, [r0, #0x9]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r0, r8
	bl	Free
	add	sp, sp, #0x58
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1274:
	.align	2, 0
.L1273:
	.word	sBattleDomeOpponentStatsTexts
.Lfe40:
	.size	 DisplayTrainerInfoOnCard,.Lfe40-DisplayTrainerInfoOnCard
	.align	2, 0
	.type	 BufferDomeWinString,function
	.thumb_func
BufferDomeWinString:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	str	r1, [sp]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	mov	r8, r0
	ldr	r2, .L1305
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	add	r1, r0, r2
	ldrb	r6, [r1]
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r6, r0
	add	r3, r2, #0
	cmp	r6, r0
	bge	.L1277	@cond_branch
	ldr	r5, .L1305+0x4
	ldr	r1, .L1305+0x8
	mov	sl, r1
	ldr	r2, .L1305+0xc
	mov	r9, r2
.L1279:
	ldr	r0, .L1305+0x10
	add	r0, r6, r0
	ldrb	r4, [r0]
	ldr	r0, [r5]
	lsl	r1, r4, #0x2
	add	r0, r0, r1
	ldr	r2, .L1305+0x14
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1278	@cond_branch
	ldr	r0, [sp]
	add	r0, r0, r8
	strb	r4, [r0]
	ldr	r2, [r5]
	add	r0, r2, r1
	ldr	r1, .L1305+0x18
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r1, r0, #0x16
	lsr	r0, r1, #0x16
	cmp	r0, sl
	bne	.L1281	@cond_branch
	ldr	r0, .L1305+0x1c
	add	r1, r2, #0
	bl	StringCopy
	b	.L1282
.L1306:
	.align	2, 0
.L1305:
	.word	sCompetitorRangeByMatch
	.word	gSaveBlock2Ptr
	.word	0x3ff
	.word	0x3fe
	.word	sTourneyTreeTrainerIds2
	.word	0xd25
	.word	0xd24
	.word	gStringVar1
.L1281:
	lsr	r0, r1, #0x16
	cmp	r0, r9
	bne	.L1283	@cond_branch
	ldr	r0, .L1307
	bl	CopyDomeBrainTrainerName
	b	.L1282
.L1308:
	.align	2, 0
.L1307:
	.word	gStringVar1
.L1283:
	lsr	r1, r1, #0x16
	ldr	r0, .L1309
	bl	CopyDomeTrainerName
.L1282:
	mov	r2, #0x1
	add	r8, r8, r2
	ldr	r3, .L1309+0x4
.L1278:
	add	r6, r6, #0x1
	lsl	r1, r7, #0x1
	add	r1, r1, r7
	add	r0, r1, r3
	ldrb	r2, [r0]
	add	r0, r3, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r2, r2, r0
	cmp	r6, r2
	blt	.L1279	@cond_branch
.L1277:
	mov	r5, r8
	cmp	r5, #0x2
	bne	.L1286	@cond_branch
	mov	r0, #0x0
	b	.L1303
.L1310:
	.align	2, 0
.L1309:
	.word	gStringVar1
	.word	sCompetitorRangeByMatch
.L1286:
	mov	ip, r3
	lsl	r3, r7, #0x1
	add	r0, r3, r7
	mov	r2, ip
	add	r1, r0, r2
	ldrb	r6, [r1]
	mov	r1, ip
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r6, r0
	str	r3, [sp, #0x8]
	cmp	r6, r0
	blt	.LCB11511
	b	.L1288	@long jump
.LCB11511:
	ldr	r5, .L1311
	mov	sl, r5
	ldr	r0, .L1311+0x4
	mov	r9, r0
.L1290:
	ldr	r0, .L1311+0x8
	add	r0, r6, r0
	ldrb	r4, [r0]
	mov	r1, sl
	ldr	r0, [r1]
	lsl	r2, r4, #0x2
	str	r2, [sp, #0xc]
	add	r0, r0, r2
	add	r0, r0, r9
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1d
	cmp	r0, #0
	bge	.L1291	@cond_branch
	lsl	r2, r2, #0x1b
	add	r1, r3, r7
	mov	r0, ip
	add	r0, r0, #0x2
	add	r1, r1, r0
	lsr	r2, r2, #0x1e
	ldrb	r1, [r1]
	cmp	r2, r1
	bcc	.L1291	@cond_branch
	ldr	r0, [sp]
	add	r0, r0, r8
	strb	r4, [r0]
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r0, sl
	ldr	r3, [r0]
	ldr	r5, [sp, #0xc]
	add	r2, r3, r5
	add	r0, r2, #0
	add	r0, r0, r9
	ldrb	r5, [r0]
	mov	ip, r5
	mov	r0, ip
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r0, r1
	bne	.L1292	@cond_branch
	lsl	r4, r4, #0x1
	mov	r1, #0xec
	lsl	r1, r1, #0x4
	add	r0, r3, r1
	add	r0, r0, r4
	ldrh	r1, [r0]
	mov	r0, #0xd
	mul	r1, r1, r0
	ldr	r0, .L1311+0xc
	add	r1, r1, r0
	ldr	r0, .L1311+0x10
	bl	StringCopy
	mov	r2, sl
	ldr	r1, [r2]
	ldr	r5, [sp, #0xc]
	add	r0, r1, r5
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r2, r0, #0x18
	lsr	r0, r2, #0x1d
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0xec
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L1291	@cond_branch
	lsr	r0, r2, #0x1d
	cmp	r0, #0
	bne	.L1291	@cond_branch
	mov	r1, #0x4
	str	r1, [sp, #0x4]
	b	.L1291
.L1312:
	.align	2, 0
.L1311:
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	sTourneyTreeTrainerIds2
	.word	gMoveNames
	.word	gStringVar2
.L1292:
	ldr	r5, .L1313
	add	r0, r2, r5
	ldrh	r0, [r0]
	lsl	r1, r0, #0x16
	ldr	r0, .L1313+0x4
	cmp	r1, r0
	bne	.L1295	@cond_branch
	ldr	r0, .L1313+0x8
	add	r1, r3, #0
	bl	StringCopy
	b	.L1291
.L1314:
	.align	2, 0
.L1313:
	.word	0xd24
	.word	-0x400000
	.word	gStringVar1
.L1295:
	ldr	r0, .L1315
	cmp	r1, r0
	bne	.L1297	@cond_branch
	ldr	r0, .L1315+0x4
	bl	CopyDomeBrainTrainerName
	b	.L1291
.L1316:
	.align	2, 0
.L1315:
	.word	-0x800000
	.word	gStringVar1
.L1297:
	lsr	r1, r1, #0x16
	ldr	r0, .L1317
	bl	CopyDomeTrainerName
.L1291:
	mov	r0, r8
	cmp	r0, #0x2
	beq	.L1288	@cond_branch
	add	r6, r6, #0x1
	ldr	r1, .L1317+0x4
	mov	ip, r1
	ldr	r3, [sp, #0x8]
	add	r1, r3, r7
	mov	r2, ip
	add	r0, r1, r2
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r2, r2, r0
	cmp	r6, r2
	bge	.LCB11709
	b	.L1290	@long jump
.LCB11709:
.L1288:
	cmp	r7, #0xe
	beq	.L1301	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	b	.L1304
.L1318:
	.align	2, 0
.L1317:
	.word	gStringVar1
	.word	sCompetitorRangeByMatch
.L1301:
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x2
.L1304:
.L1303:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 BufferDomeWinString,.Lfe41-BufferDomeWinString
	.align	2, 0
	.type	 DisplayMatchInfoOnCard,function
	.thumb_func
DisplayMatchInfoOnCard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x80
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x34]
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0x3c]
	mov	r7, #0x0
	mov	r1, #0x0
	str	r1, [sp, #0x40]
	mov	r2, #0x0
	str	r2, [sp, #0x44]
	mov	r9, r2
	mov	r0, #0x1
	ldr	r3, [sp, #0x34]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1320	@cond_branch
	mov	r7, #0x8
	str	r7, [sp, #0x3c]
	mov	r7, #0x9
	mov	r0, #0x2
	mov	r9, r0
.L1320:
	mov	r0, #0x2
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1321	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	str	r2, [sp, #0x40]
.L1321:
	mov	r0, #0x4
	ldr	r3, [sp, #0x34]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1322	@cond_branch
	mov	r0, #0xa0
	str	r0, [sp, #0x44]
.L1322:
	mov	r0, #0x8
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1323	@cond_branch
	ldr	r2, .L1381
	str	r2, [sp, #0x40]
.L1323:
	mov	r0, #0x10
	ldr	r3, [sp, #0x34]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1324	@cond_branch
	mov	r0, #0xa0
	neg	r0, r0
	str	r0, [sp, #0x44]
.L1324:
	ldr	r4, .L1381+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x11
	add	r0, r6, #0
	bl	BufferDomeWinString
	str	r0, [sp, #0x38]
	mov	r5, #0x0
	mov	r1, sp
	add	r1, r1, #0x1c
	str	r1, [sp, #0x48]
	mov	r2, sp
	add	r2, r2, #0x24
	str	r2, [sp, #0x4c]
	lsl	r1, r6, #0x1
	mov	r3, sp
	add	r3, r3, #0x2c
	str	r3, [sp, #0x50]
	ldr	r0, [sp, #0x40]
	add	r0, r0, #0x30
	mov	r8, r0
	ldr	r2, [sp, #0x44]
	add	r2, r2, #0x58
	str	r2, [sp, #0x78]
	mov	r3, #0xc
	add	r3, r3, r9
	mov	sl, r3
	ldr	r0, [sp, #0x40]
	add	r0, r0, #0xc0
	str	r0, [sp, #0x7c]
	mov	r2, r9
	add	r2, r2, #0xd
	str	r2, [sp, #0x74]
	ldr	r3, [sp, #0x3c]
	add	r3, r3, #0x1
	mov	r9, r3
	ldr	r0, [sp, #0x3c]
	add	r0, r0, #0x2
	str	r0, [sp, #0x54]
	ldr	r2, [sp, #0x3c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x5c]
	add	r3, r7, #0
	add	r3, r3, #0x8
	str	r3, [sp, #0x6c]
	add	r0, r7, #0x6
	str	r0, [sp, #0x64]
	add	r2, r7, #0x7
	str	r2, [sp, #0x68]
	lsl	r3, r6, #0x2
	str	r3, [sp, #0x58]
	add	r0, r7, #0x5
	str	r0, [sp, #0x60]
	ldr	r0, [r4]
	add	r0, r0, #0x11
	mov	ip, r0
	ldr	r0, .L1381+0x8
	ldr	r4, [r0]
	ldr	r0, .L1381+0xc
	mov	r3, #0x0
	add	r1, r1, r6
	add	r1, r1, r0
	ldrb	r6, [r1]
.L1328:
	ldr	r1, [sp, #0x48]
	add	r2, r3, r1
	mov	r7, ip
	add	r0, r7, r5
	ldrb	r0, [r0]
	str	r0, [r2]
	ldr	r7, [sp, #0x4c]
	add	r1, r3, r7
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldr	r7, .L1381+0x10
	add	r0, r0, r7
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	str	r0, [r1]
	ldr	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r4, r0
	ldr	r1, .L1381+0x14
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r0, r6
	bhi	.L1329	@cond_branch
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	bge	.L1329	@cond_branch
	ldr	r2, [sp, #0x50]
	add	r1, r3, r2
	mov	r0, #0x1
	b	.L1374
.L1382:
	.align	2, 0
.L1381:
	.word	-0x100
	.word	sInfoCard
	.word	gSaveBlock2Ptr
	.word	sCompetitorRangeByMatch+0x2
	.word	0xd24
	.word	0xd25
.L1329:
	ldr	r7, [sp, #0x50]
	add	r1, r3, r7
	mov	r0, #0x0
.L1374:
	str	r0, [r1]
	add	r3, r3, #0x4
	add	r5, r5, #0x1
	cmp	r5, #0x1
	ble	.L1328	@cond_branch
	ldr	r1, [sp, #0x24]
	ldr	r0, .L1383
	cmp	r1, r0
	bne	.L1332	@cond_branch
	ldr	r0, .L1383+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r2, r8
	ldr	r3, [sp, #0x78]
	mov	r1, sl
	str	r1, [sp]
	b	.L1375
.L1384:
	.align	2, 0
.L1383:
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1332:
	ldr	r0, .L1385
	cmp	r1, r0
	bne	.L1334	@cond_branch
	bl	GetDomeBrainTrainerPicId
	b	.L1376
.L1386:
	.align	2, 0
.L1385:
	.word	0x3fe
.L1334:
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	GetFrontierTrainerFrontSpriteId
.L1376:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, r8
	ldr	r3, [sp, #0x78]
	mov	r7, sl
	str	r7, [sp]
.L1375:
	ldr	r1, .L1387
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	bl	CreateTrainerPicSprite
	ldr	r1, .L1387+0x4
	ldr	r1, [r1]
	ldr	r2, [sp, #0x3c]
	add	r1, r1, r2
	strb	r0, [r1]
	mov	r0, #0x1e
	ldr	r3, [sp, #0x34]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L1336	@cond_branch
	ldr	r2, .L1387+0x8
	ldr	r0, .L1387+0x4
	ldr	r0, [r0]
	ldr	r7, [sp, #0x3c]
	add	r0, r0, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1336:
	ldr	r0, [sp, #0x2c]
	cmp	r0, #0
	beq	.L1337	@cond_branch
	ldr	r2, .L1387+0x8
	ldr	r0, .L1387+0x4
	ldr	r0, [r0]
	ldr	r1, [sp, #0x3c]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x30
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L1337:
	ldr	r2, [sp, #0x4c]
	ldr	r1, [r2, #0x4]
	ldr	r0, .L1387+0xc
	cmp	r1, r0
	bne	.L1338	@cond_branch
	ldr	r0, .L1387+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L1377
.L1388:
	.align	2, 0
.L1387:
	.word	0xffff
	.word	sInfoCard
	.word	gSprites
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1338:
	ldr	r0, .L1389
	cmp	r1, r0
	bne	.L1340	@cond_branch
	bl	GetDomeBrainTrainerPicId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [sp, #0x7c]
	ldr	r3, [sp, #0x78]
	ldr	r1, [sp, #0x74]
	str	r1, [sp]
	b	.L1378
.L1390:
	.align	2, 0
.L1389:
	.word	0x3fe
.L1340:
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	GetFrontierTrainerFrontSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1377:
	ldr	r2, [sp, #0x7c]
	ldr	r3, [sp, #0x78]
	ldr	r7, [sp, #0x74]
	str	r7, [sp]
.L1378:
	ldr	r1, .L1391
	str	r1, [sp, #0x4]
	mov	r1, #0x1
	bl	CreateTrainerPicSprite
	ldr	r1, .L1391+0x4
	ldr	r1, [r1]
	add	r1, r1, r9
	strb	r0, [r1]
	mov	r0, #0x1e
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1342	@cond_branch
	ldr	r2, .L1391+0x8
	ldr	r0, .L1391+0x4
	ldr	r0, [r0]
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1342:
	ldr	r2, [sp, #0x50]
	ldr	r0, [r2, #0x4]
	cmp	r0, #0
	beq	.L1343	@cond_branch
	ldr	r2, .L1391+0x8
	ldr	r0, .L1391+0x4
	ldr	r0, [r0]
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xf
	and	r1, r1, r2
	mov	r2, #0x30
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
.L1343:
	mov	r5, #0x0
	ldr	r3, [sp, #0x38]
	lsl	r3, r3, #0x2
	str	r3, [sp, #0x70]
	mov	r8, r5
	ldr	r6, .L1391+0x4
	ldr	r7, .L1391+0x8
	ldr	r4, [sp, #0x54]
	mov	r9, r5
	mov	r0, #0x1
	mov	sl, r0
.L1347:
	ldr	r1, [sp, #0x24]
	ldr	r0, .L1391+0xc
	cmp	r1, r0
	bne	.L1348	@cond_branch
	ldr	r0, .L1391+0x10
	ldr	r2, [r0]
	ldr	r1, [sp, #0x1c]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1391+0x14
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L1379
.L1392:
	.align	2, 0
.L1391:
	.word	0xffff
	.word	sInfoCard
	.word	gSprites
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1348:
	ldr	r0, .L1393
	cmp	r1, r0
	bne	.L1350	@cond_branch
	ldr	r0, .L1393+0x4
	ldr	r2, [r0]
	ldr	r1, [sp, #0x1c]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1393+0x8
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L1379
.L1394:
	.align	2, 0
.L1393:
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1350:
	ldr	r0, .L1395
	ldr	r2, [r0]
	ldr	r1, [sp, #0x1c]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1395+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r1, [r2]
	ldr	r0, .L1395+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
.L1379:
	ldr	r1, .L1395+0xc
	add	r1, r5, r1
	ldrb	r2, [r1]
	ldr	r3, [sp, #0x40]
	orr	r2, r2, r3
	ldr	r1, .L1395+0x10
	add	r1, r5, r1
	ldrb	r3, [r1]
	ldr	r1, [sp, #0x44]
	add	r3, r3, r1
	mov	r1, r8
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, sl
	str	r1, [sp, #0x8]
	ldr	r1, .L1395+0x14
	bl	CreateMonIcon
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrb	r1, [r0, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r0, #0x1e
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1352	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1352:
	ldr	r0, [sp, #0x2c]
	cmp	r0, #0
	beq	.L1346	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	mov	r2, #0x30
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	mov	r2, sl
	strh	r2, [r0, #0x34]
.L1346:
	add	r4, r4, #0x1
	mov	r3, #0x2
	add	r9, r9, r3
	add	r5, r5, #0x1
	cmp	r5, #0x2
	bgt	.LCB12465
	b	.L1347	@long jump
.LCB12465:
	mov	r5, #0x0
	ldr	r6, .L1395+0x18
	ldr	r7, .L1395+0x1c
	mov	r8, r7
	ldr	r4, [sp, #0x5c]
	mov	r9, r5
	mov	r7, #0x0
.L1358:
	ldr	r0, [sp, #0x4c]
	ldr	r1, [r0, #0x4]
	ldr	r0, .L1395+0x20
	cmp	r1, r0
	bne	.L1359	@cond_branch
	ldr	r0, .L1395
	ldr	r2, [r0]
	ldr	r3, [sp, #0x48]
	ldr	r1, [r3, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1395+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L1380
.L1396:
	.align	2, 0
.L1395:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	sLeftTrainerMonX
	.word	sLeftTrainerMonY
	.word	SpriteCb_MonIcon
	.word	sInfoCard
	.word	gSprites
	.word	0x3ff
.L1359:
	ldr	r0, .L1397
	cmp	r1, r0
	bne	.L1361	@cond_branch
	ldr	r0, .L1397+0x4
	ldr	r2, [r0]
	ldr	r0, [sp, #0x48]
	ldr	r1, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1397+0x8
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r0, [r2]
	b	.L1380
.L1398:
	.align	2, 0
.L1397:
	.word	0x3fe
	.word	gSaveBlock2Ptr
	.word	0xd64
.L1361:
	ldr	r0, .L1399
	ldr	r2, [r0]
	ldr	r0, [sp, #0x48]
	ldr	r1, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldr	r1, .L1399+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldrh	r1, [r2]
	ldr	r0, .L1399+0x8
	ldr	r0, [r0]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
.L1380:
	ldr	r1, .L1399+0xc
	add	r1, r5, r1
	ldrb	r2, [r1]
	ldr	r3, [sp, #0x40]
	orr	r2, r2, r3
	ldr	r1, .L1399+0x10
	add	r1, r5, r1
	ldrb	r3, [r1]
	ldr	r1, [sp, #0x44]
	add	r3, r3, r1
	str	r7, [sp]
	str	r7, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	ldr	r1, .L1399+0x14
	bl	CreateMonIcon
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r1, [r0, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	strb	r1, [r0, #0x5]
	mov	r0, #0x1e
	ldr	r1, [sp, #0x34]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1363	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L1363:
	ldr	r2, [sp, #0x50]
	ldr	r0, [r2, #0x4]
	cmp	r0, #0
	beq	.L1357	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	mov	r2, #0x30
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mov	r1, #0x1
	strh	r1, [r0, #0x34]
.L1357:
	add	r4, r4, #0x1
	mov	r3, #0x2
	add	r9, r9, r3
	add	r5, r5, #0x1
	cmp	r5, #0x2
	bgt	.LCB12690
	b	.L1358	@long jump
.LCB12690:
	add	r0, sp, #0xc
	mov	r5, #0x0
	strb	r5, [r0, #0x6]
	add	r1, r0, #0
	mov	r0, #0x2
	strb	r0, [r1, #0x7]
	add	r0, r1, #0
	ldrb	r0, [r0, #0x6]
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	ldrb	r0, [r0, #0x7]
	strb	r0, [r1, #0x9]
	add	r0, r1, #0
	strb	r5, [r0, #0xa]
	strb	r5, [r0, #0xb]
	add	r3, r0, #0
	ldrb	r2, [r3, #0xc]
	mov	r1, #0x10
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	add	r2, r3, #0
	mov	r0, #0xe0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	add	r1, r2, #0
	mov	r0, #0xd0
	strb	r0, [r1, #0xd]
	ldr	r4, .L1399+0x18
	ldr	r0, .L1399+0x1c
	ldr	r7, [sp, #0x70]
	add	r0, r7, r0
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	str	r4, [sp, #0xc]
	add	r0, sp, #0xc
	add	r1, sp, #0x6c
	ldrb	r1, [r1]
	strb	r1, [r0, #0x4]
	add	r1, r0, #0
	mov	r0, #0x1
	strb	r0, [r1, #0x5]
	ldr	r4, [sp, #0x6c]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	strb	r5, [r0, #0x8]
	add	r1, r0, #0
	strb	r5, [r0, #0x7]
	strb	r5, [r1, #0x9]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	ldr	r1, [sp, #0x24]
	ldr	r0, .L1399+0x20
	cmp	r1, r0
	bne	.L1366	@cond_branch
	ldr	r0, .L1399+0x24
	ldr	r1, .L1399
	ldr	r1, [r1]
	bl	StringCopy
	b	.L1367
.L1400:
	.align	2, 0
.L1399:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	sRightTrainerMonX
	.word	sRightTrainerMonY
	.word	SpriteCb_MonIcon
	.word	gStringVar4
	.word	sBattleDomeWinTexts
	.word	0x3ff
	.word	gStringVar1
.L1366:
	ldr	r0, .L1401
	cmp	r1, r0
	bne	.L1368	@cond_branch
	ldr	r0, .L1401+0x4
	bl	CopyDomeBrainTrainerName
	b	.L1367
.L1402:
	.align	2, 0
.L1401:
	.word	0x3fe
	.word	gStringVar1
.L1368:
	ldr	r0, .L1403
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	CopyDomeTrainerName
.L1367:
	add	r0, sp, #0xc
	mov	r4, #0x2
	strb	r4, [r0, #0x5]
	strb	r4, [r0, #0xa]
	ldr	r5, .L1403
	str	r5, [sp, #0xc]
	add	r2, sp, #0x64
	ldrb	r2, [r2]
	strb	r2, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	ldr	r1, [sp, #0xc]
	add	r2, sp, #0xc
	ldrb	r3, [r2, #0xa]
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0xc
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	strb	r4, [r0, #0x7]
	strb	r4, [r1, #0x9]
	ldr	r4, [sp, #0x64]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	ldr	r3, [sp, #0x4c]
	ldr	r1, [r3, #0x4]
	ldr	r0, .L1403+0x4
	cmp	r1, r0
	bne	.L1370	@cond_branch
	ldr	r0, .L1403+0x8
	ldr	r1, [r0]
	add	r0, r5, #0
	bl	StringCopy
	b	.L1371
.L1404:
	.align	2, 0
.L1403:
	.word	gStringVar1
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1370:
	ldr	r0, .L1405
	cmp	r1, r0
	bne	.L1372	@cond_branch
	add	r0, r5, #0
	bl	CopyDomeBrainTrainerName
	b	.L1371
.L1406:
	.align	2, 0
.L1405:
	.word	0x3fe
.L1372:
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	bl	CopyDomeTrainerName
.L1371:
	ldr	r0, .L1407
	str	r0, [sp, #0xc]
	add	r0, sp, #0xc
	mov	r6, #0x0
	add	r7, sp, #0x68
	ldrb	r7, [r7]
	strb	r7, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	ldr	r1, [sp, #0xc]
	add	r2, sp, #0xc
	ldrb	r3, [r2, #0xa]
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0xc
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	mov	r5, #0x2
	strb	r5, [r0, #0x7]
	strb	r5, [r1, #0x9]
	ldr	r4, [sp, #0x68]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	r0, sp, #0xc
	strb	r6, [r0, #0xa]
	ldr	r0, .L1407+0x4
	ldr	r1, [sp, #0x58]
	add	r0, r1, r0
	ldr	r0, [r0]
	str	r0, [sp, #0xc]
	add	r0, sp, #0xc
	add	r2, sp, #0x60
	ldrb	r2, [r2]
	strb	r2, [r0, #0x4]
	ldrb	r0, [r0, #0x5]
	ldr	r1, [sp, #0xc]
	add	r2, sp, #0xc
	ldrb	r3, [r2, #0xa]
	mov	r2, #0xa0
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0xc
	strb	r0, [r1, #0x8]
	add	r0, r1, #0
	strb	r5, [r0, #0x7]
	strb	r5, [r1, #0x9]
	ldr	r4, [sp, #0x60]
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, sp, #0xc
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	add	sp, sp, #0x80
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1408:
	.align	2, 0
.L1407:
	.word	gStringVar1
	.word	sBattleDomeMatchNumberTexts
.Lfe42:
	.size	 DisplayMatchInfoOnCard,.Lfe42-DisplayMatchInfoOnCard
	.align	2, 0
	.type	 ShowDomeTourneyTree,function
	.thumb_func
ShowDomeTourneyTree:
	push	{lr}
	ldr	r0, .L1410
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1410+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	strh	r2, [r1, #0xa]
	mov	r0, #0x2
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0x10]
	ldr	r0, .L1410+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L1411:
	.align	2, 0
.L1410:
	.word	Task_ShowTourneyTree
	.word	gTasks
	.word	CB2_TourneyTree
.Lfe43:
	.size	 ShowDomeTourneyTree,.Lfe43-ShowDomeTourneyTree
	.align	2, 0
	.type	 ShowPreviousDomeTourneyTree,function
	.thumb_func
ShowPreviousDomeTourneyTree:
	push	{r4, lr}
	bl	SetFacilityTrainerAndMonPtrs
	ldr	r4, .L1413
	ldr	r2, [r4]
	ldr	r1, .L1413+0x4
	add	r0, r2, r1
	ldrb	r1, [r0]
	sub	r1, r1, #0x1
	ldr	r0, .L1413+0x8
	add	r2, r2, r0
	mov	r0, #0x3
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r4]
	ldr	r1, .L1413+0xc
	add	r0, r0, r1
	mov	r4, #0x0
	mov	r1, #0x3
	strh	r1, [r0]
	ldr	r0, .L1413+0x10
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1413+0x14
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	strh	r4, [r1, #0xa]
	mov	r0, #0x2
	strh	r0, [r1, #0xc]
	mov	r0, #0x1
	strh	r0, [r1, #0x10]
	ldr	r0, .L1413+0x18
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L1414:
	.align	2, 0
.L1413:
	.word	gSaveBlock2Ptr
	.word	0xd0a
	.word	0xca9
	.word	0xcb2
	.word	Task_ShowTourneyTree
	.word	gTasks
	.word	CB2_TourneyTree
.Lfe44:
	.size	 ShowPreviousDomeTourneyTree,.Lfe44-ShowPreviousDomeTourneyTree
	.align	2, 0
	.type	 Task_HandleTourneyTreeInput,function
	.thumb_func
Task_HandleTourneyTreeInput:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1440
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0xa
	ldrsh	r7, [r0, r2]
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x7
	bls	.LCB13126
	b	.L1416	@long jump
.LCB13126:
	lsl	r0, r0, #0x2
	ldr	r1, .L1440+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1441:
	.align	2, 0
.L1440:
	.word	gTasks
	.word	.L1438
	.align	2, 0
	.align	2, 0
.L1438:
	.word	.L1417
	.word	.L1419
	.word	.L1421
	.word	.L1430
	.word	.L1416
	.word	.L1433
	.word	.L1416
	.word	.L1436
.L1417:
	ldr	r0, .L1442
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB13153
	b	.L1416	@long jump
.LCB13153:
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L1442+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	ldr	r1, .L1442+0x8
	add	r0, r0, r1
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L1416
.L1443:
	.align	2, 0
.L1442:
	.word	gPaletteFade
	.word	gTasks
	.word	gSprites
.L1419:
	ldr	r0, .L1444
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB13196
	b	.L1416	@long jump
.LCB13196:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	b	.L1416
.L1445:
	.align	2, 0
.L1444:
	.word	gPaletteFade
.L1421:
	add	r0, r5, #0
	bl	UpdateTourneyTreeCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB13220
	b	.L1416	@long jump
.LCB13220:
	cmp	r0, #0x1
	ble	.L1424	@cond_branch
	cmp	r0, #0x2
	beq	.L1426	@cond_branch
	cmp	r0, #0x3
	beq	.L1427	@cond_branch
.L1424:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1446
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x7
	strh	r1, [r0, #0x8]
	b	.L1416
.L1447:
	.align	2, 0
.L1446:
	.word	gTasks
.L1426:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1448
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3
	strh	r1, [r0, #0x8]
	b	.L1416
.L1449:
	.align	2, 0
.L1448:
	.word	gTasks
.L1427:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1450
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x5
	strh	r1, [r0, #0x8]
	b	.L1416
.L1451:
	.align	2, 0
.L1450:
	.word	gTasks
.L1430:
	ldr	r0, .L1452
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.LCB13312
	b	.L1416	@long jump
.LCB13312:
	bl	FreeAllWindowBuffers
	bl	ScanlineEffect_Stop
	ldr	r4, .L1452+0x4
	ldr	r0, [r4]
	bl	Free
	str	r6, [r4]
	ldr	r0, .L1452+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L1452+0xc
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r3, #0x0
	strh	r6, [r1, #0x8]
	ldr	r0, .L1452+0x10
	add	r0, r7, r0
	ldrb	r0, [r0]
	strh	r0, [r1, #0xa]
	mov	r0, #0x1
	strh	r0, [r1, #0xc]
	strh	r5, [r1, #0xe]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x4
	strh	r1, [r0, #0x8]
	ldr	r0, .L1452+0x14
	ldr	r0, [r0]
	strb	r3, [r0, #0x10]
	b	.L1416
.L1453:
	.align	2, 0
.L1452:
	.word	gPaletteFade
	.word	sTilemapBuffer
	.word	Task_ShowTourneyInfoCard
	.word	gTasks
	.word	sTourneyTreeTrainerIds
	.word	sInfoCard
.L1433:
	ldr	r0, .L1454
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	bne	.L1416	@cond_branch
	bl	FreeAllWindowBuffers
	bl	ScanlineEffect_Stop
	ldr	r4, .L1454+0x4
	ldr	r0, [r4]
	bl	Free
	str	r6, [r4]
	ldr	r0, .L1454+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L1454+0xc
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r6, [r0, #0x8]
	add	r1, r7, #0
	sub	r1, r1, #0x10
	strh	r1, [r0, #0xa]
	mov	r1, #0x2
	strh	r1, [r0, #0xc]
	strh	r5, [r0, #0xe]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x6
	strh	r1, [r0, #0x8]
	b	.L1416
.L1455:
	.align	2, 0
.L1454:
	.word	gPaletteFade
	.word	sTilemapBuffer
	.word	Task_ShowTourneyInfoCard
	.word	gTasks
.L1436:
	ldr	r0, .L1456
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	bne	.L1416	@cond_branch
	bl	FreeAllWindowBuffers
	bl	ScanlineEffect_Stop
	ldr	r4, .L1456+0x4
	ldr	r0, [r4]
	bl	Free
	str	r6, [r4]
	ldr	r0, .L1456+0x8
	bl	SetMainCallback2
	ldr	r1, .L1456+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	bl	DestroyTask
	add	r0, r5, #0
	bl	DestroyTask
.L1416:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1457:
	.align	2, 0
.L1456:
	.word	gPaletteFade
	.word	sTilemapBuffer
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
	.word	gTasks
.Lfe45:
	.size	 Task_HandleTourneyTreeInput,.Lfe45-Task_HandleTourneyTreeInput
	.align	2, 0
	.type	 UpdateTourneyTreeCursor,function
	.thumb_func
UpdateTourneyTreeCursor:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x1
	mov	r9, r0
	mov	r1, #0x4
	mov	r8, r1
	ldr	r1, .L1475
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xa
	ldrsh	r5, [r0, r1]
	ldr	r0, .L1475+0x4
	ldr	r0, [r0]
	ldr	r1, .L1475+0x8
	add	r0, r0, r1
	ldrh	r6, [r0]
	ldr	r0, .L1475+0xc
	ldrh	r1, [r0, #0x2e]
	add	r2, r1, #0
	add	r3, r0, #0
	cmp	r2, #0x2
	beq	.L1460	@cond_branch
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1462	@cond_branch
	cmp	r5, #0x1f
	bne	.L1459	@cond_branch
.L1460:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r9, r0
	b	.L1461
.L1476:
	.align	2, 0
.L1475:
	.word	gTasks
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	gMain
.L1459:
	cmp	r5, #0xf
	bgt	.L1463	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x2
	mov	r9, r1
	b	.L1461
.L1463:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x3
	mov	r9, r0
	b	.L1461
.L1462:
	cmp	r2, #0x40
	bne	.L1466	@cond_branch
	ldr	r0, .L1477
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1466	@cond_branch
	mov	r1, #0x0
	mov	r8, r1
	b	.L1461
.L1478:
	.align	2, 0
.L1477:
	.word	sTourneyTreeCursorMovementMap
.L1466:
	ldrh	r0, [r3, #0x2e]
	cmp	r0, #0x80
	bne	.L1468	@cond_branch
	ldr	r0, .L1479
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1468	@cond_branch
	mov	r0, #0x1
	b	.L1474
.L1480:
	.align	2, 0
.L1479:
	.word	sTourneyTreeCursorMovementMap
.L1468:
	ldrh	r0, [r3, #0x2e]
	cmp	r0, #0x20
	bne	.L1470	@cond_branch
	ldr	r0, .L1481
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r0, r0, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1470	@cond_branch
	mov	r1, #0x2
	mov	r8, r1
	b	.L1461
.L1482:
	.align	2, 0
.L1481:
	.word	sTourneyTreeCursorMovementMap
.L1470:
	ldrh	r0, [r3, #0x2e]
	cmp	r0, #0x10
	bne	.L1461	@cond_branch
	ldr	r0, .L1483
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L1461	@cond_branch
	mov	r0, #0x3
.L1474:
	mov	r8, r0
.L1461:
	mov	r1, r8
	cmp	r1, #0x4
	beq	.L1473	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r4, .L1483+0x4
	add	r0, r0, r4
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r2, .L1483
	lsl	r1, r6, #0x2
	add	r1, r1, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r5, [r1]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r1, .L1483+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0xa]
.L1473:
	mov	r0, r9
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1484:
	.align	2, 0
.L1483:
	.word	sTourneyTreeCursorMovementMap
	.word	gSprites
	.word	gTasks
.Lfe46:
	.size	 UpdateTourneyTreeCursor,.Lfe46-UpdateTourneyTreeCursor
	.align	2, 0
	.type	 ShowNonInteractiveDomeTourneyTree,function
	.thumb_func
ShowNonInteractiveDomeTourneyTree:
	push	{lr}
	ldr	r0, .L1486
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1486+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r2, [r1, #0x8]
	mov	r0, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x2
	strh	r0, [r1, #0xc]
	strh	r2, [r1, #0x10]
	ldr	r0, .L1486+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L1487:
	.align	2, 0
.L1486:
	.word	Task_ShowTourneyTree
	.word	gTasks
	.word	CB2_TourneyTree
.Lfe47:
	.size	 ShowNonInteractiveDomeTourneyTree,.Lfe47-ShowNonInteractiveDomeTourneyTree
	.align	2, 0
	.type	 ResolveDomeRoundWinners,function
	.thumb_func
ResolveDomeRoundWinners:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r7, .L1499
	ldrh	r0, [r7]
	cmp	r0, #0x1
	bne	.L1489	@cond_branch
	ldr	r5, .L1499+0x4
	ldrh	r0, [r5]
	bl	TrainerIdToTournamentId
	ldr	r4, .L1499+0x8
	ldr	r2, [r4]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r6, .L1499+0xc
	add	r2, r2, r6
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5]
	bl	TrainerIdToTournamentId
	ldr	r1, [r4]
	lsl	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r2, .L1499+0x10
	mov	r8, r2
	add	r1, r1, r8
	add	r0, r0, r6
	mov	r3, #0x3
	ldrb	r2, [r1]
	and	r2, r2, r3
	lsl	r2, r2, #0x3
	ldrb	r3, [r0]
	mov	r1, #0x19
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r5]
	bl	TrainerIdToTournamentId
	ldr	r2, [r4]
	lsl	r0, r0, #0x1
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r1, r2, r3
	add	r1, r1, r0
	ldr	r0, .L1499+0x14
	ldrh	r0, [r0, #0x22]
	strh	r0, [r1]
	add	r2, r2, r8
	ldrh	r0, [r2]
	cmp	r0, #0x2
	bhi	.L1491	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DecideRoundWinners
	b	.L1491
.L1500:
	.align	2, 0
.L1499:
	.word	gSpecialVar_0x8005
	.word	gTrainerBattleOpponent_A
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	0xcb2
	.word	gBattleResults
.L1489:
	ldr	r5, .L1501
	add	r0, r5, #0
	bl	TrainerIdToTournamentId
	ldr	r4, .L1501+0x4
	ldr	r2, [r4]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	ldr	r6, .L1501+0x8
	add	r2, r2, r6
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	bl	TrainerIdToTournamentId
	ldr	r1, [r4]
	lsl	r0, r0, #0x2
	add	r0, r1, r0
	ldr	r2, .L1501+0xc
	add	r1, r1, r2
	add	r0, r0, r6
	mov	r3, #0x3
	ldrb	r2, [r1]
	and	r2, r2, r3
	lsl	r2, r2, #0x3
	ldrb	r3, [r0]
	mov	r1, #0x19
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r5, #0
	bl	TrainerIdToTournamentId
	ldr	r1, [r4]
	lsl	r0, r0, #0x1
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	add	r1, r1, r0
	ldr	r0, .L1501+0x10
	ldrh	r0, [r0, #0x24]
	strh	r0, [r1]
	ldr	r0, .L1501+0x14
	ldrb	r0, [r0]
	cmp	r0, #0x9
	beq	.L1493	@cond_branch
	ldrh	r0, [r7]
	cmp	r0, #0x9
	bne	.L1492	@cond_branch
.L1493:
	add	r0, r5, #0
	bl	TrainerIdToTournamentId
	ldr	r2, [r4]
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, r6
	ldrb	r1, [r2]
	mov	r0, #0x1f
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
.L1492:
	ldr	r0, .L1501+0x4
	ldr	r0, [r0]
	ldr	r1, .L1501+0xc
	add	r0, r0, r1
	ldrh	r4, [r0]
	cmp	r4, #0x3
	bgt	.L1491	@cond_branch
.L1497:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	DecideRoundWinners
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1497	@cond_branch
.L1491:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1502:
	.align	2, 0
.L1501:
	.word	0x3ff
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	0xcb2
	.word	gBattleResults
	.word	gBattleOutcome
.Lfe48:
	.size	 ResolveDomeRoundWinners,.Lfe48-ResolveDomeRoundWinners
	.align	2, 0
	.type	 GetWinningMove,function
	.thumb_func
GetWinningMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x84
	str	r0, [sp, #0x48]
	str	r1, [sp, #0x4c]
	lsl	r4, r2, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	str	r0, [sp, #0x54]
	mov	r1, #0x0
	str	r1, [sp, #0x58]
	bl	SetFacilityPtrsGetLevel
	mov	r2, #0x0
	str	r2, [sp, #0x50]
	add	r3, sp, #0x30
	mov	sl, r3
	ldr	r5, [sp, #0x4c]
	lsl	r5, r5, #0x1
	str	r5, [sp, #0x70]
	sub	r4, r4, #0x1
	str	r4, [sp, #0x78]
.L1507:
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, [sp, #0x50]
	lsl	r1, r1, #0x2
	str	r1, [sp, #0x74]
	ldr	r2, [sp, #0x48]
	lsl	r2, r2, #0x2
	str	r2, [sp, #0x6c]
	ldr	r3, [sp, #0x50]
	add	r3, r3, #0x1
	str	r3, [sp, #0x60]
.L1511:
	ldr	r4, [sp, #0x74]
	add	r4, r4, r9
	lsl	r0, r4, #0x2
	mov	r5, sp
	add	r1, r5, r0
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L1575
	ldr	r3, [r0]
	ldr	r1, [sp, #0x6c]
	add	r0, r3, r1
	ldr	r2, .L1575+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	ldr	r1, .L1575+0x8
	cmp	r0, r1
	bne	.L1512	@cond_branch
	ldr	r3, [sp, #0x50]
	lsl	r0, r3, #0x18
	mov	r5, r9
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r0, #0x18
	bl	GetFrontierBrainMonMove
	lsl	r1, r4, #0x1
	add	r1, r1, sl
	strh	r0, [r1]
	b	.L1513
.L1576:
	.align	2, 0
.L1575:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	-0x800000
.L1512:
	lsl	r2, r4, #0x1
	add	r2, r2, sl
	ldr	r1, [sp, #0x48]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	ldr	r4, [sp, #0x50]
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	ldr	r5, .L1577
	add	r1, r3, r5
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldr	r1, .L1577+0x4
	ldr	r1, [r1]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	mov	r3, r9
	lsl	r1, r3, #0x1
	add	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
.L1513:
	ldr	r0, .L1577+0x8
	ldr	r1, [sp, #0x74]
	add	r1, r1, r9
	lsl	r1, r1, #0x1
	add	r1, r1, sl
	ldrh	r2, [r1]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r6, [r1, #0x1]
	cmp	r6, #0
	bne	.L1514	@cond_branch
	mov	r6, #0x28
	b	.L1515
.L1578:
	.align	2, 0
.L1577:
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gBattleMoves
.L1514:
	cmp	r6, #0x1
	bne	.L1516	@cond_branch
	mov	r6, #0x3c
	b	.L1515
.L1516:
	add	r1, r2, #0
	cmp	r1, #0x78
	beq	.L1519	@cond_branch
	cmp	r1, #0x99
	bne	.L1515	@cond_branch
.L1519:
	lsr	r0, r6, #0x1f
	add	r0, r6, r0
	asr	r6, r0, #0x1
.L1515:
	mov	r1, #0x0
	mov	r4, r9
	add	r4, r4, #0x1
	str	r4, [sp, #0x64]
	ldr	r5, [sp, #0x70]
	ldr	r2, [sp, #0x4c]
	add	r0, r5, r2
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x5c]
.L1523:
	lsl	r7, r1, #0x1
	add	r1, r1, #0x1
	str	r1, [sp, #0x68]
	ldr	r3, [sp, #0x5c]
	add	r3, r3, r7
	mov	r8, r3
.L1524:
	bl	Random
	add	r4, r0, #0
	bl	Random
	lsl	r4, r4, #0x10
	lsr	r5, r4, #0x10
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
	ldr	r2, .L1579
	ldr	r0, [r2]
	ldr	r4, .L1579+0x4
	add	r0, r0, r4
	add	r0, r0, r8
	ldrh	r4, [r0]
	ldr	r3, .L1579+0x8
	ldr	r0, [r3]
	lsl	r4, r4, #0x4
	add	r4, r4, r0
	add	r0, r5, #0
	str	r2, [sp, #0x7c]
	str	r3, [sp, #0x80]
	bl	GetNatureFromPersonality
	ldrb	r1, [r4, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [sp, #0x7c]
	ldr	r3, [sp, #0x80]
	cmp	r1, r0
	bne	.L1524	@cond_branch
	ldr	r0, [r2]
	ldr	r2, [sp, #0x5c]
	add	r1, r7, r2
	ldr	r4, .L1579+0x4
	add	r0, r0, r4
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L1529	@cond_branch
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L1579+0xc
	add	r0, r0, r5
	ldrb	r2, [r0, #0x17]
	b	.L1530
.L1580:
	.align	2, 0
.L1579:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gBaseStats
.L1529:
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L1581
	add	r0, r0, r2
	ldrb	r2, [r0, #0x16]
.L1530:
	ldr	r4, [sp, #0x74]
	add	r4, r4, r9
	lsl	r0, r4, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x6
	and	r0, r0, r5
	cmp	r0, #0x6
	bne	.L1531	@cond_branch
	lsl	r0, r4, #0x2
	mov	r3, sp
	add	r1, r3, r0
	b	.L1573
.L1582:
	.align	2, 0
.L1581:
	.word	gBaseStats
.L1531:
	mov	r0, #0x29
	and	r0, r0, r5
	cmp	r0, #0
	bne	.L1522	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r5
	cmp	r0, #0
	beq	.L1535	@cond_branch
	lsl	r0, r4, #0x2
	mov	r5, sp
	add	r2, r5, r0
	lsl	r1, r6, #0x1
	b	.L1574
.L1535:
	mov	r0, #0x4
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L1537	@cond_branch
	lsl	r0, r4, #0x2
	mov	r1, sp
	add	r2, r1, r0
	lsr	r1, r6, #0x1f
	add	r1, r6, r1
	asr	r1, r1, #0x1
.L1574:
	ldr	r0, [r2]
	add	r0, r0, r1
	str	r0, [r2]
	b	.L1522
.L1537:
	lsl	r0, r4, #0x2
	mov	r2, sp
	add	r1, r2, r0
.L1573:
	ldr	r0, [r1]
	add	r0, r0, r6
	str	r0, [r1]
.L1522:
	ldr	r1, [sp, #0x68]
	cmp	r1, #0x2
	bgt	.LCB14318
	b	.L1523	@long jump
.LCB14318:
	ldr	r2, [sp, #0x74]
	add	r2, r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, sp
	ldr	r1, [r0]
	ldr	r3, [sp, #0x54]
	cmp	r3, r1
	bge	.L1540	@cond_branch
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x58]
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x54]
	b	.L1510
.L1540:
	ldr	r4, [sp, #0x54]
	cmp	r4, r1
	bne	.L1510	@cond_branch
	ldr	r5, [sp, #0x58]
	lsl	r0, r5, #0x1
	add	r0, r0, sl
	lsl	r1, r2, #0x1
	add	r1, r1, sl
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L1510	@cond_branch
	lsl	r0, r2, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x58]
.L1510:
	ldr	r0, [sp, #0x64]
	mov	r9, r0
	cmp	r0, #0x3
	bgt	.LCB14368
	b	.L1511	@long jump
.LCB14368:
	ldr	r1, [sp, #0x60]
	str	r1, [sp, #0x50]
	cmp	r1, #0x2
	bgt	.LCB14375
	b	.L1507	@long jump
.LCB14375:
	ldr	r2, [sp, #0x58]
	mov	r9, r2
	b	.L1546
.L1549:
	mov	r3, #0x0
	mov	r9, r3
	mov	r1, #0x0
	mov	r4, sl
	mov	r3, sl
	mov	r2, sp
.L1553:
	ldr	r0, [r2]
	ldr	r5, [sp, #0x54]
	cmp	r5, r0
	bge	.L1554	@cond_branch
	mov	r9, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0x54]
	b	.L1552
.L1554:
	ldr	r5, [sp, #0x54]
	cmp	r5, r0
	bne	.L1552	@cond_branch
	mov	r5, r9
	lsl	r0, r5, #0x1
	add	r0, r4, r0
	ldrh	r0, [r0]
	ldrh	r5, [r3]
	cmp	r0, r5
	bcs	.L1552	@cond_branch
	mov	r9, r1
.L1552:
	add	r3, r3, #0x2
	add	r2, r2, #0x4
	add	r1, r1, #0x1
	cmp	r1, #0xb
	ble	.L1553	@cond_branch
	ldr	r0, [sp, #0x50]
	ldr	r1, [sp, #0x78]
	cmp	r0, r1
	beq	.L1548	@cond_branch
.L1546:
	mov	r2, #0x0
	str	r2, [sp, #0x50]
	mov	r3, r9
	lsl	r7, r3, #0x2
	ldr	r4, [sp, #0x78]
	cmp	r2, r4
	bge	.L1560	@cond_branch
	lsl	r0, r3, #0x1
	mov	r5, sl
	add	r6, r5, r0
	ldr	r0, [sp, #0x48]
	lsl	r5, r0, #0x18
.L1562:
	ldr	r0, .L1583
	ldr	r4, [r0]
	ldr	r2, [sp, #0x50]
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r5, #0x18
	bl	sub_81953E8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r4, r4, r3
	add	r4, r4, r0
	ldrh	r0, [r4]
	ldrh	r4, [r6]
	cmp	r0, r4
	beq	.L1560	@cond_branch
	ldr	r0, [sp, #0x50]
	add	r0, r0, #0x1
	str	r0, [sp, #0x50]
	ldr	r1, [sp, #0x78]
	cmp	r0, r1
	blt	.L1562	@cond_branch
.L1560:
	ldr	r2, [sp, #0x50]
	ldr	r3, [sp, #0x78]
	cmp	r2, r3
	beq	.L1548	@cond_branch
	mov	r4, sp
	add	r1, r4, r7
	mov	r0, #0x0
	str	r0, [r1]
	mov	r5, #0x0
	str	r5, [sp, #0x54]
	mov	r9, r5
	mov	r2, sp
	mov	r1, #0xb
.L1569:
	ldmia	r2!, {r0}
	add	r9, r9, r0
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L1569	@cond_branch
	mov	r0, r9
	cmp	r0, #0
	bne	.L1549	@cond_branch
.L1548:
	mov	r1, r9
	lsl	r0, r1, #0x2
	add	r0, r0, sp
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L1572	@cond_branch
	ldr	r2, [sp, #0x58]
	mov	r9, r2
.L1572:
	mov	r3, r9
	lsl	r0, r3, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	add	sp, sp, #0x84
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1584:
	.align	2, 0
.L1583:
	.word	gSaveBlock2Ptr
.Lfe49:
	.size	 GetWinningMove,.Lfe49-GetWinningMove
	.align	2, 0
	.type	 Task_ShowTourneyTree,function
	.thumb_func
Task_ShowTourneyTree:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L1654
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0xa
	ldrsh	r1, [r0, r2]
	mov	sl, r1
	mov	r3, #0xc
	ldrsh	r4, [r0, r3]
	mov	r1, #0x8
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x5
	bls	.LCB14583
	b	.L1586	@long jump
.LCB14583:
	lsl	r0, r0, #0x2
	ldr	r1, .L1654+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1655:
	.align	2, 0
.L1654:
	.word	gTasks
	.word	.L1643
	.align	2, 0
	.align	2, 0
.L1643:
	.word	.L1587
	.word	.L1588
	.word	.L1589
	.word	.L1590
	.word	.L1599
	.word	.L1630
.L1587:
	mov	r0, #0x0
	bl	SetHBlankCallback
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x3
	bl	EnableInterrupts
	mov	r4, #0x0
	str	r4, [sp, #0x14]
	add	r0, sp, #0x14
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	ldr	r2, .L1656
	bl	CpuSet
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L1656+0x4
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r0, .L1656+0x8
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	ldr	r0, .L1656+0xc
	strh	r4, [r0]
	ldr	r0, .L1656+0x10
	strh	r4, [r0]
	ldr	r0, .L1656+0x14
	strh	r4, [r0]
	ldr	r0, .L1656+0x18
	strh	r4, [r0]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r1, #0xb0
	lsl	r1, r1, #0x4
	mov	r0, #0x3
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r1, .L1656+0x1c
	mov	r2, r8
	lsl	r0, r2, #0x2
	b	.L1646
.L1657:
	.align	2, 0
.L1656:
	.word	0x5006000
	.word	sTourneyTreeBgTemplates
	.word	sTourneyTreeWindowTemplates
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
.L1588:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L1658
	mov	r0, #0x40
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x9f
	bl	SetGpuReg
	ldr	r1, .L1658+0x4
	mov	r0, #0x42
	bl	SetGpuReg
	mov	r0, #0x46
	mov	r1, #0x9f
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r1, .L1658+0x8
	mov	r3, r8
	lsl	r0, r3, #0x2
	b	.L1646
.L1659:
	.align	2, 0
.L1658:
	.word	0x5860
	.word	0x9098
	.word	gTasks
.L1589:
	ldr	r4, .L1660
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	bl	AllocZeroed
	add	r1, r0, #0
	str	r1, [r4]
	ldr	r0, .L1660+0x4
	bl	LZDecompressWram
	ldr	r1, [r4]
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	ldr	r1, .L1660+0x8
	mov	r5, #0x80
	lsl	r5, r5, #0x6
	mov	r6, #0x0
	str	r6, [sp]
	mov	r0, #0x1
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L1660+0xc
	str	r6, [sp]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L1660+0x10
	mov	r4, #0x1
	str	r4, [sp]
	mov	r0, #0x2
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r1, .L1660+0x14
	str	r4, [sp]
	mov	r0, #0x3
	add	r2, r5, #0
	mov	r3, #0x0
	bl	DecompressAndLoadBgGfxUsingHeap
	ldr	r0, .L1660+0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x2
	mov	r1, #0x0
	add	r2, r4, #0
	bl	LoadCompressedPalette
	ldr	r0, .L1660+0x1c
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r2, r4, #0
	bl	LoadCompressedPalette
	ldr	r0, .L1660+0x20
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadCompressedPalette
	str	r6, [sp, #0x18]
	add	r0, sp, #0x18
	ldr	r1, .L1660+0x24
	ldr	r2, .L1660+0x28
	bl	CpuSet
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	ldr	r1, .L1660+0x2c
	mov	r4, r8
	lsl	r0, r4, #0x2
.L1646:
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L1586
.L1661:
	.align	2, 0
.L1660:
	.word	sTilemapBuffer
	.word	gDomeTourneyLineMask_Tilemap
	.word	gDomeTourneyBg_Gfx
	.word	gDomeTourneyLine_Gfx
	.word	gDomeTourneyLineDown_Tilemap
	.word	gDomeTourneyLineUp_Tilemap
	.word	gDomeTourneyTree_Pal
	.word	gDomeTourneyTreeButtons_Pal
	.word	gBattleWindowTextPalette
	.word	gPlttBufferFaded
	.word	0x5000100
	.word	gTasks
.L1590:
	ldr	r0, .L1662
	bl	LoadCompressedSpriteSheet
	mov	r0, r8
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x1c]
	mov	r1, sl
	cmp	r1, #0
	bne	.L1591	@cond_branch
	mov	r5, #0x0
	ldr	r4, .L1662+0x4
.L1595:
	ldrb	r1, [r4]
	ldrb	r2, [r4, #0x1]
	ldr	r0, .L1662+0x8
	mov	r3, #0x0
	bl	CreateSprite
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x1e
	bls	.L1595	@cond_branch
	ldr	r0, .L1662+0xc
	ldr	r1, [sp, #0x1c]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x10
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1597	@cond_branch
	ldr	r0, .L1662+0x10
	mov	r1, #0xda
	mov	r2, #0xc
	mov	r3, #0x0
	bl	CreateSprite
	b	.L1591
.L1663:
	.align	2, 0
.L1662:
	.word	sTourneyTreeButtonsSpriteSheet
	.word	sTourneyTreePokeballCoords
	.word	sTourneyTreePokeballSpriteTemplate
	.word	gTasks
	.word	sExitButtonSpriteTemplate
.L1597:
	ldr	r0, .L1664
	mov	r1, #0xda
	mov	r2, #0xc
	mov	r3, #0x0
	bl	CreateSprite
.L1591:
	ldr	r1, .L1664+0x4
	mov	r0, #0x0
	bl	SetGpuReg
	b	.L1647
.L1665:
	.align	2, 0
.L1664:
	.word	sCancelButtonSpriteTemplate
	.word	0x7f40
.L1599:
	add	r0, sp, #0x4
	mov	r2, #0x0
	mov	r1, #0x2
	strb	r1, [r0, #0x5]
	ldr	r0, .L1666
	str	r0, [sp, #0x4]
	add	r0, sp, #0x4
	strb	r1, [r0, #0x4]
	strb	r2, [r0, #0x6]
	strb	r2, [r0, #0x7]
	strb	r1, [r0, #0xa]
	strb	r2, [r0, #0xb]
	ldrb	r0, [r0, #0x5]
	ldr	r1, [sp, #0x4]
	add	r2, sp, #0x4
	ldrb	r3, [r2, #0xa]
	mov	r2, #0x70
	bl	GetStringCenterAlignXOffsetWithLetterSpacing
	add	r1, sp, #0x4
	strb	r0, [r1, #0x8]
	mov	r0, #0x1
	strb	r0, [r1, #0x9]
	add	r3, r1, #0
	ldrb	r2, [r3, #0xc]
	mov	r1, #0x10
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	add	r2, r3, #0
	mov	r0, #0xe0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	add	r1, r2, #0
	mov	r0, #0xd0
	strb	r0, [r1, #0xd]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	mov	r3, r8
	lsl	r3, r3, #0x2
	str	r3, [sp, #0x1c]
	add	r4, sp, #0x4
	mov	r0, #0xf
	mov	r9, r0
	mov	r1, #0x0
	str	r1, [sp, #0x20]
	mov	r2, #0x0
	str	r2, [sp, #0x24]
	mov	r7, #0x0
	mov	r5, #0xf
.L1603:
	ldr	r3, .L1666+0x4
	ldr	r0, [r3]
	add	r0, r0, r7
	ldr	r1, .L1666+0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldr	r0, .L1666+0xc
	bl	CopyDomeTrainerName
	mov	r2, sl
	cmp	r2, #0x1
	bne	.L1604	@cond_branch
	ldr	r3, .L1666+0x4
	ldr	r2, [r3]
	add	r0, r2, r7
	ldr	r1, .L1666+0x10
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	blt	.L1648	@cond_branch
	ldr	r3, .L1666+0x14
	add	r0, r2, r3
	ldrh	r1, [r0]
	cmp	r1, #0x1
	beq	.L1609	@cond_branch
	ldr	r2, [sp, #0x24]
	lsr	r0, r2, #0x18
	sub	r1, r1, #0x2
	b	.L1649
.L1667:
	.align	2, 0
.L1666:
	.word	gText_BattleTourney
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	gDisplayedStringBattle
	.word	0xd25
	.word	0xcb2
.L1604:
	mov	r3, sl
	cmp	r3, #0
	bne	.L1609	@cond_branch
	ldr	r0, .L1668
	ldr	r2, [r0]
	add	r0, r2, r7
	ldr	r1, .L1668+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1d
	cmp	r0, #0
	bge	.L1611	@cond_branch
.L1648:
	lsl	r1, r1, #0x1b
	lsr	r0, r1, #0x1e
	cmp	r0, #0
	beq	.L1609	@cond_branch
	sub	r1, r0, #0x1
	ldr	r2, [sp, #0x24]
	lsr	r0, r2, #0x18
.L1649:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	DrawTourneyAdvancementLine
	b	.L1609
.L1669:
	.align	2, 0
.L1668:
	.word	gSaveBlock2Ptr
	.word	0xd25
.L1611:
	ldr	r3, .L1670
	add	r1, r2, r3
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L1609	@cond_branch
	ldr	r0, [sp, #0x1c]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r2, .L1670+0x4
	add	r0, r0, r2
	mov	r3, #0x10
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	beq	.L1615	@cond_branch
	ldrh	r1, [r1]
	b	.L1616
.L1671:
	.align	2, 0
.L1670:
	.word	0xcb2
	.word	gTasks
.L1615:
	ldrh	r0, [r1]
	sub	r1, r0, #0x1
.L1616:
	ldr	r2, [sp, #0x24]
	lsr	r0, r2, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	DrawTourneyAdvancementLine
.L1609:
	ldr	r0, [sp, #0x1c]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r3, .L1672
	add	r0, r0, r3
	mov	r1, #0x10
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L1617	@cond_branch
	ldr	r2, .L1672+0x4
	ldr	r0, [r2]
	ldr	r3, .L1672+0x8
	add	r0, r0, r3
	ldrh	r3, [r0]
	add	r6, r2, #0
	b	.L1618
.L1673:
	.align	2, 0
.L1672:
	.word	gTasks
	.word	gSaveBlock2Ptr
	.word	0xcb2
.L1617:
	ldr	r1, .L1674
	ldr	r0, [r1]
	ldr	r2, .L1674+0x4
	add	r0, r0, r2
	ldrh	r0, [r0]
	sub	r3, r0, #0x1
	add	r6, r1, #0
.L1618:
	mov	r0, sl
	cmp	r0, #0x1
	bne	.L1621	@cond_branch
	ldr	r2, [r6]
	add	r0, r2, r7
	ldr	r1, .L1674+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1b
	lsr	r1, r1, #0x1e
	ldr	r0, .L1674+0x4
	add	r2, r2, r0
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	cmp	r1, r0
	blt	.L1620	@cond_branch
.L1621:
	mov	r1, sl
	cmp	r1, #0
	bne	.L1619	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, r7
	ldr	r2, .L1674+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1e
	cmp	r0, r3
	bgt	.L1619	@cond_branch
.L1620:
	ldr	r0, [r6]
	add	r1, r0, r7
	ldr	r3, .L1674+0x8
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1619	@cond_branch
	ldr	r2, .L1674+0xc
	add	r0, r1, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	ldr	r3, .L1674+0x10
	cmp	r0, r3
	bne	.L1622	@cond_branch
	ldrb	r1, [r4, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0x30
	orr	r0, r0, r1
	strb	r0, [r4, #0xc]
	ldrb	r1, [r4, #0xd]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0x40
	b	.L1650
.L1675:
	.align	2, 0
.L1674:
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	0xd25
	.word	0xd24
	.word	0x3ff
.L1622:
	ldrb	r1, [r4, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0xb0
	b	.L1651
.L1619:
	ldr	r0, [r6]
	add	r0, r0, r7
	ldr	r1, .L1676
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	ldr	r2, .L1676+0x4
	cmp	r0, r2
	bne	.L1625	@cond_branch
	ldrb	r1, [r4, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0x30
	orr	r0, r0, r1
	strb	r0, [r4, #0xc]
	ldrb	r1, [r4, #0xd]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0x40
	b	.L1650
.L1677:
	.align	2, 0
.L1676:
	.word	0xd24
	.word	0x3ff
.L1625:
	ldrb	r1, [r4, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0xe0
.L1651:
	orr	r0, r0, r1
	strb	r0, [r4, #0xc]
	ldrb	r1, [r4, #0xd]
	mov	r0, r9
	and	r0, r0, r1
	mov	r1, #0xd0
.L1650:
	orr	r0, r0, r1
	strb	r0, [r4, #0xd]
	ldr	r0, .L1678
	ldr	r3, [sp, #0x20]
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1627	@cond_branch
	ldrb	r0, [r4, #0x5]
	ldrb	r3, [r4, #0xa]
	ldr	r1, .L1678+0x4
	mov	r2, #0x3d
	bl	GetStringWidthDifference
	b	.L1652
.L1679:
	.align	2, 0
.L1678:
	.word	sTrainerNamePositions
	.word	gDisplayedStringBattle
.L1627:
	mov	r0, #0x3
.L1652:
	strb	r0, [r4, #0x8]
	ldr	r0, .L1680
	str	r0, [sp, #0x4]
	ldr	r0, .L1680+0x4
	ldr	r1, [sp, #0x20]
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r4, #0x4]
	ldr	r2, .L1680+0x8
	add	r0, r1, r2
	ldrb	r0, [r0]
	strb	r0, [r4, #0x9]
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	ldr	r3, [sp, #0x20]
	add	r3, r3, #0x2
	str	r3, [sp, #0x20]
	ldr	r0, [sp, #0x24]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	str	r0, [sp, #0x24]
	add	r7, r7, #0x4
	sub	r5, r5, #0x1
	cmp	r5, #0
	blt	.LCB15411
	b	.L1603	@long jump
.LCB15411:
.L1647:
	ldr	r0, .L1680+0xc
	ldr	r1, [sp, #0x1c]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1586
.L1681:
	.align	2, 0
.L1680:
	.word	gDisplayedStringBattle
	.word	sTrainerNamePositions
	.word	sTrainerNamePositions+0x1
	.word	gTasks
.L1630:
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	mov	r0, #0x2
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldr	r0, .L1682
	bl	SetHBlankCallback
	ldr	r0, .L1682+0x4
	bl	SetVBlankCallback
	cmp	r4, #0x2
	bne	.L1631	@cond_branch
	mov	r2, sl
	cmp	r2, #0
	bne	.L1632	@cond_branch
	ldr	r0, .L1682+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L1682+0xc
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r3, sl
	strh	r3, [r1, #0x8]
	strh	r3, [r1, #0xa]
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r0, [r0, #0x10]
	strh	r0, [r1, #0x14]
	b	.L1634
.L1683:
	.align	2, 0
.L1682:
	.word	HblankCb_TourneyTree
	.word	VblankCb_TourneyTree
	.word	Task_HandleTourneyTreeInput
	.word	gTasks
.L1632:
	ldr	r0, .L1684
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1684+0x4
	b	.L1653
.L1685:
	.align	2, 0
.L1684:
	.word	Task_HandleStaticTourneyTreeInput
	.word	gTasks
.L1631:
	ldr	r1, .L1686
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r3, #0xe
	ldrsh	r5, [r0, r3]
.L1653:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
.L1634:
	bl	ScanlineEffect_Clear
	ldr	r0, .L1686+0x4
	ldr	r2, .L1686+0x8
	mov	r4, #0xf0
	lsl	r4, r4, #0x3
	add	r1, r0, r4
	mov	r5, #0x5a
.L1637:
	strh	r2, [r0]
	strh	r2, [r1]
	add	r1, r1, #0x2
	add	r0, r0, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L1637	@cond_branch
	mov	r5, #0x5b
	ldr	r3, .L1686+0xc
	ldr	r0, .L1686+0x4
	ldr	r2, .L1686+0x10
	ldr	r4, .L1686+0x14
	add	r1, r0, r4
	add	r0, r0, #0xb6
.L1641:
	strh	r2, [r0]
	strh	r2, [r1]
	add	r1, r1, #0x2
	add	r0, r0, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x9f
	ble	.L1641	@cond_branch
	ldr	r0, [r3]
	ldr	r1, [r3, #0x4]
	ldr	r2, [r3, #0x8]
	bl	ScanlineEffect_SetParams
	mov	r0, r8
	bl	DestroyTask
.L1586:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1687:
	.align	2, 0
.L1686:
	.word	gTasks
	.word	gScanlineEffectRegBuffers
	.word	0x1f0a
	.word	sTourneyTreeScanlineEffectParams
	.word	0x1f09
	.word	0x836
.Lfe50:
	.size	 Task_ShowTourneyTree,.Lfe50-Task_ShowTourneyTree
	.align	2, 0
	.type	 DrawTourneyAdvancementLine,function
	.thumb_func
DrawTourneyAdvancementLine:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r4, .L1694
	lsl	r2, r1, #0x2
	lsl	r3, r0, #0x4
	add	r2, r2, r3
	add	r2, r2, r4
	ldr	r3, [r2]
	ldr	r2, .L1694+0x4
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1690	@cond_branch
	mov	r7, #0x1
	add	r4, r3, #0
	add	r5, r4, #0x2
	add	r6, r0, #0
.L1692:
	ldrb	r2, [r4]
	ldrb	r3, [r4, #0x1]
	str	r7, [sp]
	str	r7, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	add	r1, r5, #0
	bl	CopyToBgTilemapBufferRect_ChangePalette
	add	r4, r4, #0x4
	add	r5, r5, #0x4
	sub	r6, r6, #0x1
	cmp	r6, #0
	bne	.L1692	@cond_branch
.L1690:
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1695:
	.align	2, 0
.L1694:
	.word	sTourneyTreeLineSections
	.word	sTourneyTreeLineSectionArrayCounts
.Lfe51:
	.size	 DrawTourneyAdvancementLine,.Lfe51-DrawTourneyAdvancementLine
	.align	2, 0
	.type	 Task_HandleStaticTourneyTreeInput,function
	.thumb_func
Task_HandleStaticTourneyTreeInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L1719
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bls	.LCB15710
	b	.L1697	@long jump
.LCB15710:
	lsl	r0, r0, #0x2
	ldr	r1, .L1719+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1720:
	.align	2, 0
.L1719:
	.word	gTasks
	.word	.L1716
	.align	2, 0
	.align	2, 0
.L1716:
	.word	.L1698
	.word	.L1699
	.word	.L1710
	.word	.L1712
	.word	.L1714
.L1698:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r1, .L1721
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L1697
.L1722:
	.align	2, 0
.L1721:
	.word	gTasks
.L1699:
	ldr	r0, .L1723
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB15762
	b	.L1697	@long jump
.LCB15762:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r2, #0x0
	mov	r3, #0x2
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	mov	r1, #0x40
	strh	r1, [r0, #0xe]
	add	r0, sp, #0x4
	strb	r3, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r2, [r0, #0x7]
	strb	r3, [r0, #0xa]
	strb	r2, [r0, #0xb]
	add	r3, r0, #0
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x50
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	add	r2, r3, #0
	mov	r0, #0xb0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	add	r1, r2, #0
	mov	r0, #0xd0
	strb	r0, [r1, #0xd]
	mov	r7, #0x0
	ldr	r0, .L1723+0x4
	mov	r9, r0
	ldr	r1, .L1723+0x8
	mov	r8, r1
	add	r4, r2, #0
	ldr	r6, .L1723+0xc
	mov	r5, #0x0
.L1704:
	mov	r2, r8
	ldr	r0, [r2]
	add	r0, r0, r5
	ldr	r1, .L1723+0x10
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	mov	r0, r9
	bl	CopyDomeTrainerName
	mov	r0, r8
	ldr	r2, [r0]
	add	r0, r2, r5
	ldr	r1, .L1723+0x14
	add	r0, r0, r1
	ldrb	r3, [r0]
	lsl	r1, r3, #0x1b
	lsr	r1, r1, #0x1e
	ldr	r0, .L1723+0x18
	add	r2, r2, r0
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
	cmp	r1, r0
	bne	.L1705	@cond_branch
	lsl	r0, r3, #0x1d
	cmp	r0, #0
	bge	.L1705	@cond_branch
	ldrb	r0, [r6]
	cmp	r0, #0
	bne	.L1706	@cond_branch
	ldrb	r0, [r4, #0x5]
	ldrb	r3, [r4, #0xa]
	mov	r1, r9
	mov	r2, #0x3d
	bl	GetStringWidthDifference
	b	.L1718
.L1724:
	.align	2, 0
.L1723:
	.word	gPaletteFade
	.word	gDisplayedStringBattle
	.word	gSaveBlock2Ptr
	.word	sTrainerNamePositions
	.word	0xd24
	.word	0xd25
	.word	0xcb2
.L1706:
	mov	r0, #0x3
.L1718:
	strb	r0, [r4, #0x8]
	mov	r1, r9
	str	r1, [sp, #0x4]
	ldrb	r0, [r6]
	strb	r0, [r4, #0x4]
	ldrb	r0, [r6, #0x1]
	strb	r0, [r4, #0x9]
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
.L1705:
	mov	r2, r8
	ldr	r1, [r2]
	add	r0, r1, r5
	ldr	r2, .L1725
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1703	@cond_branch
	sub	r2, r2, #0x73
	add	r0, r1, r2
	ldrh	r1, [r0]
	sub	r1, r1, #0x1
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	bl	DrawTourneyAdvancementLine
.L1703:
	add	r6, r6, #0x2
	add	r5, r5, #0x4
	add	r7, r7, #0x1
	cmp	r7, #0xf
	ble	.L1704	@cond_branch
	b	.L1697
.L1726:
	.align	2, 0
.L1725:
	.word	0xd25
.L1710:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xe]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1697	@cond_branch
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	b	.L1697
.L1712:
	ldr	r0, .L1727
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1697	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1727+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x4
	strh	r1, [r0, #0x8]
	b	.L1697
.L1728:
	.align	2, 0
.L1727:
	.word	gMain
	.word	gTasks
.L1714:
	ldr	r0, .L1729
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1697	@cond_branch
	ldr	r0, .L1729+0x4
	bl	SetMainCallback2
	add	r0, r4, #0
	bl	DestroyTask
.L1697:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1730:
	.align	2, 0
.L1729:
	.word	gPaletteFade
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe52:
	.size	 Task_HandleStaticTourneyTreeInput,.Lfe52-Task_HandleStaticTourneyTreeInput
	.align	2, 0
	.type	 CB2_TourneyTree,function
	.thumb_func
CB2_TourneyTree:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	RunTextPrinters
	bl	UpdatePaletteFade
	bl	RunTasks
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 CB2_TourneyTree,.Lfe53-CB2_TourneyTree
	.align	2, 0
	.type	 VblankCb_TourneyInfoCard,function
	.thumb_func
VblankCb_TourneyInfoCard:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x80
	mov	r2, #0x1
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x80
	mov	r2, #0x2
	bl	ChangeBgY
	ldr	r0, .L1733
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L1733+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L1733+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L1733+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	ldr	r0, .L1733+0x10
	ldrh	r1, [r0]
	mov	r0, #0x18
	bl	SetGpuReg
	ldr	r0, .L1733+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1a
	bl	SetGpuReg
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.L1734:
	.align	2, 0
.L1733:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
.Lfe54:
	.size	 VblankCb_TourneyInfoCard,.Lfe54-VblankCb_TourneyInfoCard
	.align	2, 0
	.type	 HblankCb_TourneyTree,function
	.thumb_func
HblankCb_TourneyTree:
	push	{lr}
	ldr	r0, .L1757
	ldrh	r0, [r0]
	add	r1, r0, #0
	cmp	r0, #0x29
	bls	.L1754	@cond_branch
	cmp	r0, #0x31
	bhi	.L1738	@cond_branch
	ldr	r1, .L1757+0x4
	ldr	r2, .L1757+0x8
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1757+0xc
	b	.L1756
.L1758:
	.align	2, 0
.L1757:
	.word	0x4000006
	.word	0x4000048
	.word	0x3b3b
	.word	-0x6764aaa8
.L1738:
	cmp	r0, #0x39
	bls	.L1754	@cond_branch
	cmp	r0, #0x4a
	bhi	.L1742	@cond_branch
	ldr	r1, .L1759
	ldr	r2, .L1759+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1759+0x8
	b	.L1756
.L1760:
	.align	2, 0
.L1759:
	.word	0x4000048
	.word	0x3b3b
	.word	-0x6f67a7a0
.L1742:
	cmp	r0, #0x51
	bhi	.L1744	@cond_branch
	ldr	r1, .L1761
	ldr	r2, .L1761+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1761+0x8
	b	.L1756
.L1762:
	.align	2, 0
.L1761:
	.word	0x4000048
	.word	0x3b3b
	.word	-0x6764aaa8
.L1744:
	cmp	r0, #0x5e
	bls	.L1754	@cond_branch
	cmp	r0, #0x66
	bhi	.L1748	@cond_branch
	ldr	r1, .L1763
	ldr	r2, .L1763+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1763+0x8
	b	.L1756
.L1764:
	.align	2, 0
.L1763:
	.word	0x4000048
	.word	0x3737
	.word	-0x6764aaa8
.L1748:
	cmp	r0, #0x76
	bhi	.L1750	@cond_branch
	ldr	r1, .L1765
	ldr	r2, .L1765+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1765+0x8
	b	.L1756
.L1766:
	.align	2, 0
.L1765:
	.word	0x4000048
	.word	0x3737
	.word	-0x6f67a7a0
.L1750:
	cmp	r0, #0x7e
	bls	.L1754	@cond_branch
	cmp	r1, #0x86
	bhi	.L1754	@cond_branch
	ldr	r1, .L1767
	ldr	r2, .L1767+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	ldr	r0, .L1767+0x8
	b	.L1756
.L1768:
	.align	2, 0
.L1767:
	.word	0x4000048
	.word	0x3737
	.word	-0x6764aaa8
.L1754:
	ldr	r1, .L1769
	ldr	r2, .L1769+0x4
	add	r0, r2, #0
	strh	r0, [r1]
	sub	r1, r1, #0x8
	mov	r0, #0x0
.L1756:
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1770:
	.align	2, 0
.L1769:
	.word	0x4000048
	.word	0x3f3f
.Lfe55:
	.size	 HblankCb_TourneyTree,.Lfe55-HblankCb_TourneyTree
	.align	2, 0
	.type	 VblankCb_TourneyTree,function
	.thumb_func
VblankCb_TourneyTree:
	push	{lr}
	ldr	r0, .L1772
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L1772+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L1772+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L1772+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, #0x2
	mov	r1, #0x80
	mov	r2, #0x2
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x80
	mov	r2, #0x1
	bl	ChangeBgY
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.L1773:
	.align	2, 0
.L1772:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
.Lfe56:
	.size	 VblankCb_TourneyTree,.Lfe56-VblankCb_TourneyTree
	.align	2, 0
	.type	 SetFacilityTrainerAndMonPtrs,function
	.thumb_func
SetFacilityTrainerAndMonPtrs:
	ldr	r1, .L1775
	ldr	r0, .L1775+0x4
	str	r0, [r1]
	ldr	r1, .L1775+0x8
	ldr	r0, .L1775+0xc
	str	r0, [r1]
	bx	lr
.L1776:
	.align	2, 0
.L1775:
	.word	gFacilityTrainerMons
	.word	gBattleFrontierMons
	.word	gFacilityTrainers
	.word	gBattleFrontierTrainers
.Lfe57:
	.size	 SetFacilityTrainerAndMonPtrs,.Lfe57-SetFacilityTrainerAndMonPtrs
	.align	2, 0
	.type	 ResetSketchedMoves,function
	.thumb_func
ResetSketchedMoves:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r3, #0x0
.L1781:
	ldr	r0, .L1794
	ldr	r1, [r0]
	ldr	r0, .L1794+0x4
	add	r0, r3, r0
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r2, .L1794+0x8
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	mov	sl, r0
	mov	r6, #0x0
	add	r0, r3, #0x1
	str	r0, [sp]
	mov	r1, #0x64
	mov	r0, sl
	mul	r0, r0, r1
	mov	r2, #0x8e
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	mov	r9, r2
	mov	r7, r3
	mul	r7, r7, r1
.L1785:
	mov	r5, #0x0
	add	r0, r6, #0x1
	mov	r8, r0
	b	.L1786
.L1795:
	.align	2, 0
.L1794:
	.word	gSaveBlock2Ptr
	.word	gSelectedOrderFromParty
	.word	0xcaa
.L1789:
	add	r5, r5, #0x1
.L1786:
	cmp	r5, #0x3
	bgt	.L1787	@cond_branch
	ldr	r1, .L1796
	ldr	r0, [r1]
	add	r0, r0, r9
	add	r1, r5, #0
	add	r1, r1, #0xd
	mov	r2, #0x0
	str	r3, [sp, #0x4]
	bl	GetMonData
	add	r4, r0, #0
	add	r1, r6, #0
	add	r1, r1, #0xd
	ldr	r2, .L1796+0x4
	add	r0, r7, r2
	mov	r2, #0x0
	bl	GetMonData
	ldr	r3, [sp, #0x4]
	cmp	r4, r0
	bne	.L1789	@cond_branch
.L1787:
	cmp	r5, #0x4
	bne	.L1784	@cond_branch
	lsl	r2, r6, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L1796+0x4
	add	r0, r7, r1
	mov	r1, #0xa6
	str	r3, [sp, #0x4]
	bl	SetMonMoveSlot
	ldr	r3, [sp, #0x4]
.L1784:
	mov	r6, r8
	cmp	r6, #0x3
	ble	.L1785	@cond_branch
	ldr	r2, .L1796
	ldr	r0, [r2]
	mov	r2, #0x64
	mov	r1, sl
	mul	r1, r1, r2
	add	r0, r0, r1
	mov	r1, #0x8e
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, r3
	mul	r1, r1, r2
	ldr	r2, .L1796+0x4
	add	r1, r1, r2
	mov	r2, #0x64
	bl	memcpy
	ldr	r3, [sp]
	cmp	r3, #0x1
	ble	.L1781	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1797:
	.align	2, 0
.L1796:
	.word	gSaveBlock1Ptr
	.word	gPlayerParty
.Lfe58:
	.size	 ResetSketchedMoves,.Lfe58-ResetSketchedMoves
	.align	2, 0
	.type	 RestoreDomePlayerPartyHeldItems,function
	.thumb_func
RestoreDomePlayerPartyHeldItems:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r4, #0x0
	ldr	r7, .L1804
	mov	r6, #0x64
	mov	r5, #0x0
.L1802:
	ldr	r0, .L1804+0x4
	ldr	r1, [r0]
	ldr	r0, .L1804+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r2, .L1804+0xc
	add	r1, r1, r2
	add	r1, r1, r0
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	mov	r1, r0
	mul	r1, r1, r6
	mov	r0, #0x8e
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r7]
	add	r0, r0, r1
	mov	r1, #0xc
	mov	r2, #0x0
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	ldr	r0, .L1804+0x10
	add	r0, r5, r0
	mov	r1, #0xc
	mov	r2, sp
	bl	SetMonData
	add	r5, r5, #0x64
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L1802	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1805:
	.align	2, 0
.L1804:
	.word	gSaveBlock1Ptr
	.word	gSaveBlock2Ptr
	.word	gSelectedOrderFromParty
	.word	0xcaa
	.word	gPlayerParty
.Lfe59:
	.size	 RestoreDomePlayerPartyHeldItems,.Lfe59-RestoreDomePlayerPartyHeldItems
	.align	2, 0
	.type	 ReduceDomePlayerPartyToSelectedMons,function
	.thumb_func
ReduceDomePlayerPartyToSelectedMons:
	push	{lr}
	bl	ReducePlayerPartyToSelectedMons
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 ReduceDomePlayerPartyToSelectedMons,.Lfe60-ReduceDomePlayerPartyToSelectedMons
	.align	2, 0
	.type	 GetPlayerSeededBeforeOpponent,function
	.thumb_func
GetPlayerSeededBeforeOpponent:
	push	{r4, lr}
	ldr	r0, .L1811
	ldrh	r0, [r0]
	bl	TrainerIdToTournamentId
	add	r4, r0, #0
	ldr	r0, .L1811+0x4
	bl	TrainerIdToTournamentId
	cmp	r4, r0
	ble	.L1808	@cond_branch
	ldr	r1, .L1811+0x8
	mov	r0, #0x1
	b	.L1810
.L1812:
	.align	2, 0
.L1811:
	.word	gTrainerBattleOpponent_A
	.word	0x3ff
	.word	gSpecialVar_Result
.L1808:
	ldr	r1, .L1813
	mov	r0, #0x2
.L1810:
	strh	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1814:
	.align	2, 0
.L1813:
	.word	gSpecialVar_Result
.Lfe61:
	.size	 GetPlayerSeededBeforeOpponent,.Lfe61-GetPlayerSeededBeforeOpponent
	.align	2, 0
	.type	 BufferLastDomeWinnerName,function
	.thumb_func
BufferLastDomeWinnerName:
	push	{r4, lr}
	bl	SetFacilityTrainerAndMonPtrs
	mov	r2, #0x0
	ldr	r3, .L1822
	ldr	r0, [r3]
	ldr	r1, .L1822+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1817	@cond_branch
	add	r4, r3, #0
	add	r3, r1, #0
.L1818:
	add	r2, r2, #0x1
	cmp	r2, #0xf
	bgt	.L1817	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L1818	@cond_branch
.L1817:
	ldr	r0, .L1822+0x8
	ldr	r1, .L1822
	ldr	r1, [r1]
	lsl	r2, r2, #0x2
	add	r1, r1, r2
	ldr	r2, .L1822+0xc
	add	r1, r1, r2
	ldrh	r1, [r1]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	bl	CopyDomeTrainerName
	pop	{r4}
	pop	{r0}
	bx	r0
.L1823:
	.align	2, 0
.L1822:
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	gStringVar1
	.word	0xd24
.Lfe62:
	.size	 BufferLastDomeWinnerName,.Lfe62-BufferLastDomeWinnerName
	.align	2, 0
	.type	 InitRandomTourneyTreeResults,function
	.thumb_func
InitRandomTourneyTreeResults:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	ldr	r4, .L1898
	ldr	r2, [r4]
	ldr	r5, .L1898+0x4
	add	r0, r2, r5
	ldrb	r1, [r0]
	ldr	r6, .L1898+0x8
	add	r0, r2, r6
	ldrb	r0, [r0]
	cmn	r1, r0
	beq	.L1825	@cond_branch
	ldr	r1, .L1898+0xc
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.LCB16736
	b	.L1824	@long jump
.LCB16736:
.L1825:
	mov	r0, #0x20
	bl	AllocZeroed
	str	r0, [sp, #0x18]
	mov	r0, #0x18
	bl	AllocZeroed
	str	r0, [sp, #0x1c]
	ldr	r1, [r4]
	ldr	r2, .L1898+0x10
	add	r1, r1, r2
	ldrb	r2, [r1]
	lsl	r0, r2, #0x1e
	lsr	r0, r0, #0x1e
	str	r0, [sp, #0x14]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r4]
	mov	r1, #0x1
	add	r0, r0, r5
	strb	r1, [r0]
	ldr	r0, [r4]
	add	r0, r0, r6
	strb	r1, [r0]
	mov	r3, #0x0
	mov	sl, r3
	mov	r4, #0x0
	str	r4, [sp, #0x38]
	mov	r5, #0x0
	str	r5, [sp, #0x3c]
.L1830:
	mov	r0, sl
	cmp	r0, #0x4
	bgt	.L1833	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L1834
.L1899:
	.align	2, 0
.L1898:
	.word	gSaveBlock2Ptr
	.word	0xd0a
	.word	0xd0b
	.word	0xca8
	.word	0xca9
.L1833:
	mov	r1, sl
	cmp	r1, #0xe
	bgt	.L1835	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x14
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r0, #0
	add	r4, r4, #0xa
	b	.L1834
.L1835:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r4, r0, #0
	add	r4, r4, #0x1e
.L1834:
	mov	r6, #0x0
	cmp	r6, sl
	bge	.L1832	@cond_branch
	ldr	r2, .L1900
	ldr	r0, [r2]
	ldr	r3, .L1900+0x4
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r4
	beq	.L1832	@cond_branch
	add	r3, r2, #0
	ldr	r2, .L1900+0x4
.L1839:
	add	r6, r6, #0x1
	cmp	r6, sl
	bge	.L1832	@cond_branch
	ldr	r0, [r3]
	lsl	r1, r6, #0x2
	add	r0, r0, r1
	add	r0, r0, r2
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r4
	bne	.L1839	@cond_branch
.L1832:
	cmp	r6, sl
	bne	.L1830	@cond_branch
	ldr	r5, .L1900
	ldr	r3, [r5]
	ldr	r0, [sp, #0x38]
	add	r3, r3, r0
	ldr	r1, .L1900+0x4
	add	r3, r3, r1
	ldr	r2, .L1900+0x8
	add	r0, r2, #0
	add	r2, r4, #0
	and	r2, r2, r0
	ldrh	r0, [r3]
	ldr	r5, .L1900+0xc
	add	r1, r5, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strh	r0, [r3]
	mov	r6, #0x0
	lsl	r4, r4, #0x10
	str	r4, [sp, #0x30]
	ldr	r0, [sp, #0x3c]
	str	r0, [sp, #0x20]
.L1848:
	add	r1, r6, #0x1
	str	r1, [sp, #0x24]
	lsl	r2, r6, #0x2
	str	r2, [sp, #0x2c]
	lsl	r3, r6, #0x1
	str	r3, [sp, #0x28]
.L1849:
	ldr	r4, [sp, #0x30]
	lsr	r0, r4, #0x10
	bl	GetRandomFrontierMonFromSet
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r7, #0x0
	cmp	r7, r6
	bge	.L1851	@cond_branch
	ldr	r0, .L1900
	ldr	r0, [r0]
	ldr	r1, .L1900+0x10
	mov	r9, r1
	ldr	r2, [sp, #0x8]
	mov	r8, r2
	ldr	r3, [sp, #0xc]
	mov	ip, r3
	ldr	r4, .L1900+0x14
	add	r0, r0, r4
	ldr	r1, [sp, #0x20]
	add	r4, r1, r0
.L1855:
	ldrh	r3, [r4]
	cmp	r3, r5
	beq	.L1851	@cond_branch
	mov	r2, r9
	ldr	r1, [r2]
	lsl	r0, r5, #0x4
	add	r2, r0, r1
	ldrh	r0, [r2]
	cmp	r8, r0
	beq	.L1851	@cond_branch
	cmp	ip, r0
	beq	.L1851	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xa]
	ldrb	r2, [r2, #0xa]
	cmp	r0, r2
	beq	.L1851	@cond_branch
	add	r4, r4, #0x2
	add	r7, r7, #0x1
	cmp	r7, r6
	blt	.L1855	@cond_branch
.L1851:
	cmp	r7, r6
	bne	.L1849	@cond_branch
	ldr	r3, .L1900
	ldr	r0, [r3]
	ldr	r4, [sp, #0x28]
	ldr	r2, [sp, #0x3c]
	add	r1, r4, r2
	ldr	r3, .L1900+0x14
	add	r0, r0, r3
	add	r0, r0, r1
	strh	r5, [r0]
	ldr	r2, [sp, #0x2c]
	add	r2, r2, sp
	add	r2, r2, #0x8
	ldr	r3, .L1900+0x10
	ldr	r1, [r3]
	lsl	r0, r5, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2]
	ldr	r6, [sp, #0x24]
	cmp	r6, #0x2
	ble	.L1848	@cond_branch
	ldr	r4, .L1900
	ldr	r2, [r4]
	ldr	r5, [sp, #0x38]
	add	r2, r2, r5
	ldr	r0, .L1900+0x18
	add	r2, r2, r0
	ldrb	r0, [r2]
	mov	r4, #0x5
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r5, .L1900
	ldr	r2, [r5]
	ldr	r0, [sp, #0x38]
	add	r2, r2, r0
	ldr	r1, .L1900+0x18
	add	r2, r2, r1
	ldrb	r0, [r2]
	sub	r4, r4, #0x14
	add	r1, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r5]
	ldr	r5, [sp, #0x38]
	add	r1, r1, r5
	ldr	r0, .L1900+0x18
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	strb	r0, [r1]
	add	r5, r5, #0x4
	str	r5, [sp, #0x38]
	ldr	r1, [sp, #0x3c]
	add	r1, r1, #0x6
	str	r1, [sp, #0x3c]
	mov	r2, #0x1
	add	sl, sl, r2
	mov	r4, sl
	cmp	r4, #0xf
	bgt	.LCB17065
	b	.L1830	@long jump
.LCB17065:
	mov	r5, #0x0
	mov	sl, r5
	ldr	r5, [sp, #0x18]
	mov	r0, #0x0
	str	r0, [sp, #0x34]
.L1866:
	mov	r7, #0x0
	strh	r7, [r5]
	ldr	r1, .L1900
	ldr	r0, [r1]
	mov	r2, sl
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	ldr	r3, .L1900+0x4
	add	r0, r0, r3
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	bl	GetDomeTrainerMonIvs
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r6, #0x0
	ldr	r4, [sp, #0x34]
	mov	r9, r4
.L1870:
	ldr	r1, .L1900
	ldr	r0, [r1]
	mov	r4, r9
	add	r4, r4, sl
	add	r4, r4, r6
	lsl	r4, r4, #0x1
	ldr	r2, .L1900+0x14
	add	r0, r0, r2
	add	r0, r0, r4
	ldrh	r1, [r0]
	ldr	r3, .L1900+0x10
	ldr	r0, [r3]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrb	r3, [r1, #0xb]
	ldrb	r1, [r1, #0xc]
	str	r1, [sp]
	ldr	r1, [sp, #0x1c]
	str	r1, [sp, #0x4]
	mov	r1, #0x32
	mov	r2, r8
	bl	CalcDomeMonStats
	ldr	r2, [sp, #0x1c]
	ldr	r1, [r2, #0x4]
	ldrh	r0, [r5]
	add	r0, r0, r1
	ldr	r1, [r2, #0x8]
	add	r0, r0, r1
	ldr	r1, [r2, #0x10]
	add	r0, r0, r1
	ldr	r1, [r2, #0x14]
	add	r0, r0, r1
	ldr	r1, [r2, #0xc]
	add	r0, r0, r1
	ldr	r1, [r2]
	add	r0, r0, r1
	strh	r0, [r5]
	ldr	r3, .L1900
	ldr	r0, [r3]
	ldr	r1, .L1900+0x14
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	ldr	r2, .L1900+0x10
	ldr	r1, [r2]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r3, .L1900+0x1c
	add	r1, r1, r3
	ldrb	r0, [r1, #0x6]
	lsl	r0, r0, #0x2
	ldr	r4, .L1900+0x20
	add	r0, r0, r4
	ldr	r0, [r0]
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x7]
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r0, [r0]
	orr	r7, r7, r0
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L1870	@cond_branch
	mov	r4, #0x0
	mov	r1, #0x1
	mov	r6, #0x1f
.L1875:
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1876	@cond_branch
	add	r4, r4, #0x1
.L1876:
	asr	r7, r7, #0x1
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L1875	@cond_branch
	mov	r1, #0x32
	mov	r0, r4
	mul	r0, r0, r1
	mov	r1, #0x14
	bl	__divsi3
	ldrh	r1, [r5]
	add	r1, r1, r0
	strh	r1, [r5]
	add	r5, r5, #0x2
	ldr	r2, [sp, #0x34]
	add	r2, r2, #0x2
	str	r2, [sp, #0x34]
	mov	r3, #0x1
	add	sl, sl, r3
	mov	r4, sl
	cmp	r4, #0xf
	ble	.L1866	@cond_branch
	mov	r5, #0x0
	mov	sl, r5
	ldr	r7, [sp, #0x18]
.L1882:
	mov	r6, sl
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bgt	.L1881	@cond_branch
	mov	r8, r7
	ldr	r5, .L1900+0x4
	lsl	r0, r6, #0x1
	ldr	r1, [sp, #0x18]
	add	r4, r0, r1
.L1886:
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r0, [r4]
	cmp	r1, r0
	bcs	.L1887	@cond_branch
	mov	r0, sl
	add	r1, r6, #0
	ldr	r2, [sp, #0x18]
	bl	SwapDomeTrainers
	b	.L1885
.L1901:
	.align	2, 0
.L1900:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	0x3ff
	.word	-0x400
	.word	gFacilityTrainerMons
	.word	0xd64
	.word	0xd25
	.word	gBaseStats
	.word	gBitTable
.L1887:
	cmp	r1, r0
	bne	.L1885	@cond_branch
	ldr	r0, .L1902
	ldr	r1, [r0]
	mov	r3, sl
	lsl	r0, r3, #0x2
	add	r0, r1, r0
	add	r0, r0, r5
	ldrh	r2, [r0]
	lsl	r2, r2, #0x16
	lsl	r0, r6, #0x2
	add	r1, r1, r0
	add	r1, r1, r5
	ldrh	r0, [r1]
	lsl	r0, r0, #0x16
	cmp	r2, r0
	bls	.L1885	@cond_branch
	mov	r0, sl
	add	r1, r6, #0
	ldr	r2, [sp, #0x18]
	bl	SwapDomeTrainers
.L1885:
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0xf
	ble	.L1886	@cond_branch
.L1881:
	add	r7, r7, #0x2
	mov	r4, #0x1
	add	sl, sl, r4
	mov	r5, sl
	cmp	r5, #0xe
	ble	.L1882	@cond_branch
	ldr	r0, [sp, #0x18]
	bl	Free
	ldr	r0, [sp, #0x1c]
	bl	Free
	mov	r0, #0x0
	mov	sl, r0
.L1896:
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	DecideRoundWinners
	mov	r2, #0x1
	add	sl, sl, r2
	mov	r3, sl
	cmp	r3, #0x3
	ble	.L1896	@cond_branch
	ldr	r0, .L1902
	ldr	r1, [r0]
	ldr	r4, .L1902+0x4
	add	r1, r1, r4
	ldrb	r2, [r1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	ldr	r5, [sp, #0x14]
	orr	r0, r0, r5
	strb	r0, [r1]
.L1824:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1903:
	.align	2, 0
.L1902:
	.word	gSaveBlock2Ptr
	.word	0xca9
.Lfe63:
	.size	 InitRandomTourneyTreeResults,.Lfe63-InitRandomTourneyTreeResults
	.align	2, 0
	.type	 TrainerIdToTournamentId,function
	.thumb_func
TrainerIdToTournamentId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r4, .L1911
	ldr	r0, [r4]
	ldr	r1, .L1911+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	beq	.L1906	@cond_branch
	add	r5, r4, #0
	add	r4, r1, #0
.L1907:
	add	r2, r2, #0x1
	cmp	r2, #0xf
	bgt	.L1906	@cond_branch
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	bne	.L1907	@cond_branch
.L1906:
	add	r0, r2, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1912:
	.align	2, 0
.L1911:
	.word	gSaveBlock2Ptr
	.word	0xd24
.Lfe64:
	.size	 TrainerIdToTournamentId,.Lfe64-TrainerIdToTournamentId
	.align	2, 0
	.globl	TrainerIdToDomeTournamentId
	.type	 TrainerIdToDomeTournamentId,function
	.thumb_func
TrainerIdToDomeTournamentId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	mov	r2, #0x0
	ldr	r4, .L1920
	ldr	r0, [r4]
	ldr	r1, .L1920+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	beq	.L1915	@cond_branch
	add	r5, r4, #0
	add	r4, r1, #0
.L1916:
	add	r2, r2, #0x1
	cmp	r2, #0xf
	bgt	.L1915	@cond_branch
	ldr	r0, [r5]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, r4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	cmp	r0, r3
	bne	.L1916	@cond_branch
.L1915:
	add	r0, r2, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1921:
	.align	2, 0
.L1920:
	.word	gSaveBlock2Ptr
	.word	0xd24
.Lfe65:
	.size	 TrainerIdToDomeTournamentId,.Lfe65-TrainerIdToDomeTournamentId
	.align	2, 0
	.type	 sub_81953E8,function
	.thumb_func
sub_81953E8:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1927
	ldr	r0, .L1927+0x4
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, r2
	ldrb	r0, [r1]
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	bl	BufferDomeWinString
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L1923	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	b	.L1926
.L1928:
	.align	2, 0
.L1927:
	.word	gUnknown_0860D1A0
	.word	gUnknown_0860D1C0
.L1923:
	mov	r0, sp
	ldrb	r0, [r0, #0x1]
.L1926:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 sub_81953E8,.Lfe66-sub_81953E8
	.align	2, 0
	.type	 DecideRoundWinners,function
	.thumb_func
DecideRoundWinners:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r1, #0x0
	str	r1, [sp, #0x10]
	mov	r5, #0x0
	mov	r1, #0x3
	ldr	r0, [sp]
	and	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x14]
.L1933:
	ldr	r2, .L1980
	ldr	r0, [r2]
	lsl	r4, r5, #0x2
	add	r1, r0, r4
	ldr	r3, .L1980+0x4
	add	r0, r1, r3
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	add	r2, r5, #0x1
	str	r2, [sp, #0x24]
	cmp	r0, #0
	bge	.LCB17626
	b	.L1932	@long jump
.LCB17626:
	sub	r3, r3, #0x1
	add	r0, r1, r3
	ldrh	r0, [r0]
	lsl	r1, r0, #0x16
	ldr	r0, .L1980+0x8
	cmp	r1, r0
	bne	.LCB17640
	b	.L1932	@long jump
.LCB17640:
	str	r5, [sp, #0x4]
	lsr	r1, r1, #0x16
	ldr	r0, [sp]
	bl	TournamentIdOfOpponent
	str	r0, [sp, #0x8]
	ldr	r0, .L1980
	ldr	r3, [r0]
	add	r0, r3, r4
	ldr	r1, .L1980+0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	ldr	r1, .L1980+0x10
	cmp	r0, r1
	bne	.L1936	@cond_branch
	ldr	r2, [sp, #0x8]
	cmp	r2, #0xff
	beq	.L1936	@cond_branch
	lsl	r2, r2, #0x2
	add	r1, r3, r2
	ldr	r3, .L1980+0x4
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, .L1980
	ldr	r1, [r0]
	add	r1, r1, r2
	ldr	r2, .L1980+0x4
	add	r1, r1, r2
	ldrb	r0, [r1]
	sub	r3, r3, #0x1d
	and	r0, r0, r3
	ldr	r2, [sp, #0x14]
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r0, r5, #0
	ldr	r1, [sp, #0x8]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r3, .L1980
	ldr	r1, [r3]
	ldr	r5, [sp, #0x8]
	lsl	r2, r5, #0x1
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	add	r1, r1, r2
	b	.L1978
.L1981:
	.align	2, 0
.L1980:
	.word	gSaveBlock2Ptr
	.word	0xd25
	.word	-0x400000
	.word	0xd24
	.word	-0x800000
.L1936:
	ldr	r4, .L1982
	ldr	r3, [r4]
	ldr	r0, [sp, #0x8]
	lsl	r2, r0, #0x2
	add	r0, r3, r2
	ldr	r1, .L1982+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x16
	ldr	r1, .L1982+0x8
	str	r2, [sp, #0x30]
	cmp	r0, r1
	bne	.L1938	@cond_branch
	ldr	r2, [sp, #0x4]
	cmp	r2, #0xff
	beq	.L1938	@cond_branch
	lsl	r2, r2, #0x2
	add	r1, r3, r2
	ldr	r3, .L1982+0xc
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r1, [r4]
	add	r1, r1, r2
	ldr	r0, .L1982+0xc
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	ldr	r3, [sp, #0x14]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r1, [r4]
	ldr	r3, [sp, #0x4]
	lsl	r2, r3, #0x1
	mov	r3, #0xec
	lsl	r3, r3, #0x4
	add	r1, r1, r3
	add	r1, r1, r2
	strh	r0, [r1]
	add	r5, r5, #0x1
	str	r5, [sp, #0x24]
	b	.L1932
.L1983:
	.align	2, 0
.L1982:
	.word	gSaveBlock2Ptr
	.word	0xd24
	.word	-0x800000
	.word	0xd25
.L1938:
	add	r5, r5, #0x1
	str	r5, [sp, #0x24]
	ldr	r5, [sp, #0x8]
	cmp	r5, #0xff
	bne	.LCB17791
	b	.L1932	@long jump
.LCB17791:
	mov	r0, #0x0
	mov	sl, r0
	lsl	r1, r5, #0x1
	str	r1, [sp, #0x2c]
	ldr	r2, [sp, #0x4]
	lsl	r2, r2, #0x1
	str	r2, [sp, #0x28]
	ldr	r3, [sp, #0x4]
	add	r0, r2, r3
	lsl	r0, r0, #0x1
	mov	r9, r0
	add	r0, r1, r5
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x18]
.L1944:
	mov	r5, #0x0
	mov	r0, r9
	str	r0, [sp, #0x38]
.L1948:
	mov	r6, #0x0
	lsl	r7, r5, #0x1
	ldr	r4, [sp, #0x18]
.L1952:
	ldr	r2, .L1984
	ldr	r1, [r2]
	ldr	r3, .L1984+0x4
	add	r1, r1, r3
	ldr	r2, [sp, #0x38]
	add	r0, r1, r2
	ldrh	r0, [r0]
	ldr	r3, .L1984+0x8
	mov	r8, r3
	ldr	r2, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r2
	add	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x2
	bl	GetTypeEffectivenessPoints
	ldr	r1, [sp, #0xc]
	add	r1, r1, r0
	str	r1, [sp, #0xc]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L1952	@cond_branch
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1948	@cond_branch
	ldr	r2, .L1984
	ldr	r0, [r2]
	ldr	r3, .L1984+0x4
	add	r0, r0, r3
	add	r0, r0, r9
	ldrh	r0, [r0]
	mov	r5, r8
	ldr	r1, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r0, .L1984+0xc
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r1, #0x1]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x2]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x3]
	add	r0, r0, r2
	ldrb	r3, [r1, #0x4]
	add	r0, r0, r3
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	ldr	r5, [sp, #0xc]
	add	r5, r5, r0
	str	r5, [sp, #0xc]
	mov	r0, #0x2
	add	r9, r9, r0
	mov	r1, #0x1
	add	sl, sl, r1
	mov	r2, sl
	cmp	r2, #0x2
	ble	.L1944	@cond_branch
	bl	Random
	mov	r1, #0x1f
	and	r1, r1, r0
	add	r5, r5, r1
	ldr	r3, [sp, #0x4]
	add	r5, r5, r3
	str	r5, [sp, #0xc]
	mov	r5, #0x0
	mov	sl, r5
	ldr	r1, [sp, #0x2c]
	ldr	r2, [sp, #0x8]
	add	r0, r1, r2
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x1c]
	ldr	r5, [sp, #0x28]
	add	r0, r5, r3
	lsl	r0, r0, #0x1
	str	r0, [sp, #0x20]
.L1959:
	mov	r5, #0x0
	mov	r0, sl
	lsl	r3, r0, #0x1
	mov	r1, #0x1
	add	sl, sl, r1
	ldr	r2, [sp, #0x1c]
	add	r2, r2, r3
	mov	r8, r2
.L1963:
	mov	r6, #0x0
	lsl	r7, r5, #0x1
	add	r5, r5, #0x1
	str	r5, [sp, #0x3c]
	ldr	r4, [sp, #0x20]
.L1967:
	ldr	r5, .L1984
	ldr	r1, [r5]
	ldr	r0, .L1984+0x4
	add	r1, r1, r0
	mov	r2, r8
	add	r0, r1, r2
	ldrh	r0, [r0]
	ldr	r5, .L1984+0x8
	mov	r9, r5
	ldr	r2, [r5]
	lsl	r0, r0, #0x4
	add	r0, r0, r2
	add	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	add	r1, r1, r4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x4
	add	r1, r1, r2
	ldrh	r1, [r1]
	mov	r2, #0x2
	str	r3, [sp, #0x34]
	bl	GetTypeEffectivenessPoints
	ldr	r1, [sp, #0x10]
	add	r1, r1, r0
	str	r1, [sp, #0x10]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	ldr	r3, [sp, #0x34]
	cmp	r6, #0x2
	ble	.L1967	@cond_branch
	ldr	r5, [sp, #0x3c]
	cmp	r5, #0x3
	ble	.L1963	@cond_branch
	ldr	r2, .L1984
	ldr	r0, [r2]
	ldr	r5, [sp, #0x1c]
	add	r1, r3, r5
	ldr	r2, .L1984+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r3, r9
	ldr	r1, [r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r1
	ldrh	r2, [r0]
	ldr	r0, .L1984+0xc
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	ldrb	r2, [r1, #0x1]
	add	r0, r0, r2
	ldrb	r5, [r1, #0x2]
	add	r0, r0, r5
	ldrb	r2, [r1, #0x3]
	add	r0, r0, r2
	ldrb	r2, [r1, #0x4]
	add	r0, r0, r2
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	ldr	r3, [sp, #0x10]
	add	r3, r3, r0
	str	r3, [sp, #0x10]
	mov	r5, sl
	cmp	r5, #0x2
	ble	.L1959	@cond_branch
	bl	Random
	mov	r1, #0x1f
	and	r1, r1, r0
	ldr	r0, [sp, #0x10]
	add	r0, r0, r1
	ldr	r1, [sp, #0x8]
	add	r0, r0, r1
	str	r0, [sp, #0x10]
	ldr	r2, [sp, #0xc]
	cmp	r2, r0
	ble	.L1971	@cond_branch
	ldr	r3, .L1984
	ldr	r1, [r3]
	ldr	r5, [sp, #0x30]
	add	r1, r1, r5
	ldr	r0, .L1984+0x10
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, r5
	ldr	r3, .L1984+0x10
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r5, #0x19
	neg	r5, r5
	and	r0, r0, r5
	ldr	r2, [sp, #0x14]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [sp, #0x4]
	ldr	r1, [sp, #0x8]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r3, .L1984
	ldr	r1, [r3]
	mov	r5, #0xec
	lsl	r5, r5, #0x4
	add	r1, r1, r5
	ldr	r2, [sp, #0x2c]
	add	r1, r1, r2
	b	.L1978
.L1985:
	.align	2, 0
.L1984:
	.word	gSaveBlock2Ptr
	.word	0xd64
	.word	gFacilityTrainerMons
	.word	gBaseStats
	.word	0xd25
.L1971:
	ldr	r3, [sp, #0xc]
	ldr	r5, [sp, #0x10]
	cmp	r3, r5
	bge	.L1973	@cond_branch
	ldr	r0, .L1986
	ldr	r1, [r0]
	ldr	r3, [sp, #0x4]
	lsl	r2, r3, #0x2
	add	r1, r1, r2
	ldr	r5, .L1986+0x4
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r5, .L1986
	ldr	r1, [r5]
	add	r1, r1, r2
	ldr	r0, .L1986+0x4
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	ldr	r3, [sp, #0x14]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r1, [r5]
	mov	r5, #0xec
	lsl	r5, r5, #0x4
	add	r1, r1, r5
	ldr	r2, [sp, #0x28]
	add	r1, r1, r2
	b	.L1978
.L1987:
	.align	2, 0
.L1986:
	.word	gSaveBlock2Ptr
	.word	0xd25
.L1973:
	ldr	r3, [sp, #0x4]
	ldr	r5, [sp, #0x8]
	cmp	r3, r5
	ble	.L1975	@cond_branch
	ldr	r0, .L1988
	ldr	r1, [r0]
	ldr	r2, [sp, #0x30]
	add	r1, r1, r2
	ldr	r3, .L1988+0x4
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r5, #0x4
	orr	r0, r0, r5
	strb	r0, [r1]
	ldr	r0, .L1988
	ldr	r1, [r0]
	add	r1, r1, r2
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	ldr	r3, [sp, #0x14]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [sp, #0x4]
	ldr	r1, [sp, #0x8]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r5, .L1988
	ldr	r1, [r5]
	mov	r2, #0xec
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r3, [sp, #0x2c]
	b	.L1979
.L1989:
	.align	2, 0
.L1988:
	.word	gSaveBlock2Ptr
	.word	0xd25
.L1975:
	ldr	r5, .L1990
	ldr	r1, [r5]
	ldr	r0, [sp, #0x4]
	lsl	r2, r0, #0x2
	add	r1, r1, r2
	ldr	r3, .L1990+0x4
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r5, #0x4
	orr	r0, r0, r5
	strb	r0, [r1]
	ldr	r0, .L1990
	ldr	r1, [r0]
	add	r1, r1, r2
	add	r1, r1, r3
	ldrb	r0, [r1]
	mov	r2, #0x19
	neg	r2, r2
	and	r0, r0, r2
	ldr	r3, [sp, #0x14]
	orr	r0, r0, r3
	strb	r0, [r1]
	ldr	r0, [sp, #0x8]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp]
	bl	GetWinningMove
	ldr	r5, .L1990
	ldr	r1, [r5]
	mov	r2, #0xec
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	ldr	r3, [sp, #0x28]
.L1979:
	add	r1, r1, r3
.L1978:
	strh	r0, [r1]
.L1932:
	ldr	r5, [sp, #0x24]
	cmp	r5, #0xf
	bgt	.LCB18294
	b	.L1933	@long jump
.LCB18294:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1991:
	.align	2, 0
.L1990:
	.word	gSaveBlock2Ptr
	.word	0xd25
.Lfe67:
	.size	 DecideRoundWinners,.Lfe67-DecideRoundWinners
	.align	2, 0
	.type	 CopyDomeTrainerName,function
	.thumb_func
CopyDomeTrainerName:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r4, #0x0
	bl	SetFacilityPtrsGetLevel
	ldr	r0, .L2008
	cmp	r5, r0
	bne	.L1993	@cond_branch
	add	r0, r6, #0
	bl	CopyDomeBrainTrainerName
	b	.L1994
.L2009:
	.align	2, 0
.L2008:
	.word	0x3fe
.L1993:
	ldr	r0, .L2010
	cmp	r5, r0
	bne	.L1995	@cond_branch
	ldr	r0, .L2010+0x4
	ldr	r2, [r0]
.L1999:
	add	r0, r6, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L1999	@cond_branch
	b	.L2001
.L2011:
	.align	2, 0
.L2010:
	.word	0x3ff
	.word	gSaveBlock2Ptr
.L1995:
	ldr	r0, .L2012
	cmp	r5, r0
	bhi	.L2001	@cond_branch
	ldr	r0, .L2012+0x4
	ldr	r1, [r0]
	mov	r0, #0x34
	mul	r0, r0, r5
	add	r0, r0, r1
	add	r2, r0, #0x4
.L2006:
	add	r0, r6, r4
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x6
	ble	.L2006	@cond_branch
.L2001:
	add	r1, r6, r4
	mov	r0, #0xff
	strb	r0, [r1]
.L1994:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2013:
	.align	2, 0
.L2012:
	.word	0x12b
	.word	gFacilityTrainers
.Lfe68:
	.size	 CopyDomeTrainerName,.Lfe68-CopyDomeTrainerName
	.align	2, 0
	.type	 GetDomeBrainTrainerPicId,function
	.thumb_func
GetDomeBrainTrainerPicId:
	ldr	r0, .L2015
	ldr	r1, .L2015+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L2016:
	.align	2, 0
.L2015:
	.word	gTrainers
	.word	0x7df3
.Lfe69:
	.size	 GetDomeBrainTrainerPicId,.Lfe69-GetDomeBrainTrainerPicId
	.align	2, 0
	.type	 GetDomeBrainTrainerClass,function
	.thumb_func
GetDomeBrainTrainerClass:
	ldr	r0, .L2018
	ldr	r1, .L2018+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L2019:
	.align	2, 0
.L2018:
	.word	gTrainers
	.word	0x7df1
.Lfe70:
	.size	 GetDomeBrainTrainerClass,.Lfe70-GetDomeBrainTrainerClass
	.align	2, 0
	.type	 CopyDomeBrainTrainerName,function
	.thumb_func
CopyDomeBrainTrainerName:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	ldr	r4, .L2026
.L2024:
	add	r0, r3, r2
	add	r1, r2, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0x6
	ble	.L2024	@cond_branch
	add	r1, r3, r2
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2027:
	.align	2, 0
.L2026:
	.word	gTrainers+0x7df4
.Lfe71:
	.size	 CopyDomeBrainTrainerName,.Lfe71-CopyDomeBrainTrainerName
.text
	.align	2, 0

