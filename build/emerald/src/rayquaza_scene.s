@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sRayScene,object
	.size	 sRayScene,4
sRayScene:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sTasksForAnimations,object
sTasksForAnimations:
	.word	Task_DuoFightAnim
	.word	Task_DuoFightAnim
	.word	Task_RayTakesFlightAnim
	.word	Task_RayDescendsAnim
	.word	Task_RayChargesAnim
	.word	Task_RayChasesAwayAnim
	.word	Task_EndAfterFadeScreen
	.size	 sTasksForAnimations,28
	.align	2, 0
	.type	 sOamData_862A6BC,object
	.size	 sOamData_862A6BC,8
sOamData_862A6BC:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sOamData_862A6C4,object
	.size	 sOamData_862A6C4,8
sOamData_862A6C4:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sOamData_862A6CC,object
	.size	 sOamData_862A6CC,8
sOamData_862A6CC:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sOamData_862A6D4,object
	.size	 sOamData_862A6D4,8
sOamData_862A6D4:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sOamData_862A6DC,object
	.size	 sOamData_862A6DC,8
sOamData_862A6DC:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sOamData_862A6E4,object
	.size	 sOamData_862A6E4,8
sOamData_862A6E4:
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x80
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sOamData_862A6EC,object
	.size	 sOamData_862A6EC,8
sOamData_862A6EC:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sOamData_862A6F4,object
	.size	 sOamData_862A6F4,8
sOamData_862A6F4:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x8
	.short	0x0
	.align	2, 0
	.type	 sSpriteAnim_862A6FC,object
sSpriteAnim_862A6FC:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	0x40
	.byte	0x1e
	.space	1
	.short	0x80
	.byte	0x1e
	.space	1
	.short	0x40
	.byte	0x1e
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A6FC,20
	.align	2, 0
	.type	 sSpriteAnim_862A710,object
sSpriteAnim_862A710:
	.short	0xc0
	.byte	0x1e
	.space	1
	.short	0x100
	.byte	0x1e
	.space	1
	.short	0x140
	.byte	0x1e
	.space	1
	.short	0x100
	.byte	0x1e
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A710,20
	.align	2, 0
	.type	 sSpriteAnimTable_862A724,object
sSpriteAnimTable_862A724:
	.word	sSpriteAnim_862A6FC
	.word	sSpriteAnim_862A710
	.size	 sSpriteAnimTable_862A724,8
	.align	2, 0
	.type	 sUnknown_0862A72C,object
	.size	 sUnknown_0862A72C,24
sUnknown_0862A72C:
	.short	0x7729
	.short	0x7729
	.word	sOamData_862A6BC
	.word	sSpriteAnimTable_862A724
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_862A744,object
sSpriteAnim_862A744:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A744,8
	.align	2, 0
	.type	 sSpriteAnimTable_862A74C,object
sSpriteAnimTable_862A74C:
	.word	sSpriteAnim_862A744
	.size	 sSpriteAnimTable_862A74C,4
	.align	2, 0
	.type	 sUnknown_0862A750,object
	.size	 sUnknown_0862A750,24
sUnknown_0862A750:
	.short	0x772a
	.short	0x7729
	.word	sOamData_862A6C4
	.word	sSpriteAnimTable_862A74C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_862A768,object
sSpriteAnim_862A768:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A768,8
	.align	2, 0
	.type	 sSpriteAnimTable_862A770,object
sSpriteAnimTable_862A770:
	.word	sSpriteAnim_862A768
	.size	 sSpriteAnimTable_862A770,4
	.align	2, 0
	.type	 sUnknown_0862A774,object
	.size	 sUnknown_0862A774,24
sUnknown_0862A774:
	.short	0x772b
	.short	0x7729
	.word	sOamData_862A6CC
	.word	sSpriteAnimTable_862A770
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_862A78C,object
sSpriteAnim_862A78C:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A78C,8
	.align	2, 0
	.type	 sSpriteAnim_862A794,object
sSpriteAnim_862A794:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A794,8
	.align	2, 0
	.type	 sSpriteAnim_862A79C,object
sSpriteAnim_862A79C:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A79C,8
	.align	2, 0
	.type	 sSpriteAnim_862A7A4,object
sSpriteAnim_862A7A4:
	.short	0x18
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A7A4,8
	.align	2, 0
	.type	 sSpriteAnim_862A7AC,object
sSpriteAnim_862A7AC:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A7AC,8
	.align	2, 0
	.type	 sSpriteAnim_862A7B4,object
sSpriteAnim_862A7B4:
	.short	0x28
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A7B4,8
	.align	2, 0
	.type	 sSpriteAnim_862A7BC,object
sSpriteAnim_862A7BC:
	.short	0x30
	.byte	0x24
	.space	1
	.short	0x40
	.byte	0x24
	.space	1
	.short	0x50
	.byte	0x24
	.space	1
	.short	0x40
	.byte	0x24
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A7BC,20
	.align	2, 0
	.type	 sSpriteAnim_862A7D0,object
sSpriteAnim_862A7D0:
	.short	0x38
	.byte	0x24
	.space	1
	.short	0x48
	.byte	0x24
	.space	1
	.short	0x58
	.byte	0x24
	.space	1
	.short	0x48
	.byte	0x24
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A7D0,20
	.align	2, 0
	.type	 sSpriteAnim_862A7E4,object
sSpriteAnim_862A7E4:
	.short	0x60
	.byte	0x24
	.space	1
	.short	0x68
	.byte	0x24
	.space	1
	.short	0x70
	.byte	0x24
	.space	1
	.short	0x68
	.byte	0x24
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A7E4,20
	.align	2, 0
	.type	 sSpriteAnimTable_862A7F8,object
sSpriteAnimTable_862A7F8:
	.word	sSpriteAnim_862A78C
	.word	sSpriteAnim_862A794
	.word	sSpriteAnim_862A79C
	.word	sSpriteAnim_862A7A4
	.word	sSpriteAnim_862A7AC
	.word	sSpriteAnim_862A7B4
	.word	sSpriteAnim_862A7BC
	.word	sSpriteAnim_862A7D0
	.word	sSpriteAnim_862A7E4
	.size	 sSpriteAnimTable_862A7F8,36
	.align	2, 0
	.type	 sUnknown_0862A81C,object
	.size	 sUnknown_0862A81C,24
sUnknown_0862A81C:
	.short	0x772c
	.short	0x772c
	.word	sOamData_862A6D4
	.word	sSpriteAnimTable_862A7F8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_862A834,object
sSpriteAnim_862A834:
	.short	0x0
	.byte	0x24
	.space	1
	.short	0x2
	.byte	0x24
	.space	1
	.short	0x4
	.byte	0x24
	.space	1
	.short	0x2
	.byte	0x24
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A834,20
	.align	2, 0
	.type	 sSpriteAnimTable_862A848,object
sSpriteAnimTable_862A848:
	.word	sSpriteAnim_862A834
	.size	 sSpriteAnimTable_862A848,4
	.align	2, 0
	.type	 sUnknown_0862A84C,object
	.size	 sUnknown_0862A84C,24
sUnknown_0862A84C:
	.short	0x772d
	.short	0x772c
	.word	sOamData_862A6DC
	.word	sSpriteAnimTable_862A848
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862A864,object
	.size	 sUnknown_0862A864,24
sUnknown_0862A864:
	.short	0x772e
	.short	0x772c
	.word	sOamData_862A6C4
	.word	sSpriteAnimTable_862A74C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862A87C,object
	.size	 sUnknown_0862A87C,12
sUnknown_0862A87C:
	.word	0x4000014
	.word	-0x5d9fffff
	.byte	0x1
	.space	3
	.align	2, 0
	.type	 sUnknown_0862A888,object
	.size	 sUnknown_0862A888,12
sUnknown_0862A888:
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xd2
	.byte	0x11
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sSpriteAnim_862A894,object
sSpriteAnim_862A894:
	.short	0x0
	.byte	0x14
	.space	1
	.short	0x40
	.byte	0x14
	.space	1
	.short	0x80
	.byte	0x14
	.space	1
	.short	0x40
	.byte	0x14
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A894,20
	.align	2, 0
	.type	 sSpriteAnim_862A8A8,object
sSpriteAnim_862A8A8:
	.short	0xc0
	.byte	0x14
	.space	1
	.short	0x100
	.byte	0x14
	.space	1
	.short	0x140
	.byte	0x14
	.space	1
	.short	0x100
	.byte	0x14
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A8A8,20
	.align	2, 0
	.type	 sSpriteAnimTable_862A8BC,object
sSpriteAnimTable_862A8BC:
	.word	sSpriteAnim_862A894
	.word	sSpriteAnim_862A8A8
	.size	 sSpriteAnimTable_862A8BC,8
	.align	2, 0
	.type	 sUnknown_0862A8C4,object
	.size	 sUnknown_0862A8C4,8
sUnknown_0862A8C4:
	.word	gRaySceneGroudon_Gfx
	.short	0x3000
	.short	0x7729
	.align	2, 0
	.type	 sUnknown_0862A8CC,object
	.size	 sUnknown_0862A8CC,8
sUnknown_0862A8CC:
	.word	gRaySceneGroudon_Pal
	.short	0x7729
	.space	2
	.align	2, 0
	.type	 sUnknown_0862A8D4,object
	.size	 sUnknown_0862A8D4,24
sUnknown_0862A8D4:
	.short	0x7729
	.short	0x7729
	.word	sOamData_862A6BC
	.word	sSpriteAnimTable_862A8BC
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_862A8EC,object
sSpriteAnim_862A8EC:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A8EC,8
	.align	2, 0
	.type	 sSpriteAnimTable_862A8F4,object
sSpriteAnimTable_862A8F4:
	.word	sSpriteAnim_862A8EC
	.size	 sSpriteAnimTable_862A8F4,4
	.align	2, 0
	.type	 sUnknown_0862A8F8,object
	.size	 sUnknown_0862A8F8,8
sUnknown_0862A8F8:
	.word	gRaySceneGroudon2_Gfx
	.short	0x200
	.short	0x772a
	.align	2, 0
	.type	 sUnknown_0862A900,object
	.size	 sUnknown_0862A900,24
sUnknown_0862A900:
	.short	0x772a
	.short	0x7729
	.word	sOamData_862A6C4
	.word	sSpriteAnimTable_862A8F4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_862A918,object
sSpriteAnim_862A918:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A918,8
	.align	2, 0
	.type	 sSpriteAnimTable_862A920,object
sSpriteAnimTable_862A920:
	.word	sSpriteAnim_862A918
	.size	 sSpriteAnimTable_862A920,4
	.align	2, 0
	.type	 sUnknown_0862A924,object
	.size	 sUnknown_0862A924,8
sUnknown_0862A924:
	.word	gRaySceneGroudon3_Gfx
	.short	0x400
	.short	0x772b
	.align	2, 0
	.type	 sUnknown_0862A92C,object
	.size	 sUnknown_0862A92C,24
sUnknown_0862A92C:
	.short	0x772b
	.short	0x7729
	.word	sOamData_862A6CC
	.word	sSpriteAnimTable_862A920
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_862A944,object
sSpriteAnim_862A944:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A944,8
	.align	2, 0
	.type	 sSpriteAnim_862A94C,object
sSpriteAnim_862A94C:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A94C,8
	.align	2, 0
	.type	 sSpriteAnim_862A954,object
sSpriteAnim_862A954:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A954,8
	.align	2, 0
	.type	 sSpriteAnim_862A95C,object
sSpriteAnim_862A95C:
	.short	0x18
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A95C,8
	.align	2, 0
	.type	 sSpriteAnim_862A964,object
sSpriteAnim_862A964:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A964,8
	.align	2, 0
	.type	 sSpriteAnim_862A96C,object
sSpriteAnim_862A96C:
	.short	0x28
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862A96C,8
	.align	2, 0
	.type	 sSpriteAnim_862A974,object
sSpriteAnim_862A974:
	.short	0x30
	.byte	0x18
	.space	1
	.short	0x40
	.byte	0x18
	.space	1
	.short	0x50
	.byte	0x18
	.space	1
	.short	0x40
	.byte	0x18
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A974,20
	.align	2, 0
	.type	 sSpriteAnim_862A988,object
sSpriteAnim_862A988:
	.short	0x38
	.byte	0x18
	.space	1
	.short	0x48
	.byte	0x18
	.space	1
	.short	0x58
	.byte	0x18
	.space	1
	.short	0x48
	.byte	0x18
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A988,20
	.align	2, 0
	.type	 sSpriteAnim_862A99C,object
sSpriteAnim_862A99C:
	.short	0x60
	.byte	0x18
	.space	1
	.short	0x68
	.byte	0x18
	.space	1
	.short	0x70
	.byte	0x18
	.space	1
	.short	0x68
	.byte	0x18
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A99C,20
	.align	2, 0
	.type	 sSpriteAnimTable_862A9B0,object
sSpriteAnimTable_862A9B0:
	.word	sSpriteAnim_862A944
	.word	sSpriteAnim_862A94C
	.word	sSpriteAnim_862A954
	.word	sSpriteAnim_862A95C
	.word	sSpriteAnim_862A964
	.word	sSpriteAnim_862A96C
	.word	sSpriteAnim_862A974
	.word	sSpriteAnim_862A988
	.word	sSpriteAnim_862A99C
	.size	 sSpriteAnimTable_862A9B0,36
	.align	2, 0
	.type	 sUnknown_0862A9D4,object
	.size	 sUnknown_0862A9D4,8
sUnknown_0862A9D4:
	.word	gRaySceneKyogre_Gfx
	.short	0xf00
	.short	0x772c
	.align	2, 0
	.type	 sUnknown_0862A9DC,object
	.size	 sUnknown_0862A9DC,8
sUnknown_0862A9DC:
	.word	gRaySceneKyogre_Pal
	.short	0x772c
	.space	2
	.align	2, 0
	.type	 sUnknown_0862A9E4,object
	.size	 sUnknown_0862A9E4,24
sUnknown_0862A9E4:
	.short	0x772c
	.short	0x772c
	.word	sOamData_862A6D4
	.word	sSpriteAnimTable_862A9B0
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sSpriteAnim_862A9FC,object
sSpriteAnim_862A9FC:
	.short	0x0
	.byte	0x18
	.space	1
	.short	0x2
	.byte	0x18
	.space	1
	.short	0x4
	.byte	0x18
	.space	1
	.short	0x2
	.byte	0x18
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862A9FC,20
	.align	2, 0
	.type	 sSpriteAnimTable_862AA10,object
sSpriteAnimTable_862AA10:
	.word	sSpriteAnim_862A9FC
	.size	 sSpriteAnimTable_862AA10,4
	.align	2, 0
	.type	 sUnknown_0862AA14,object
	.size	 sUnknown_0862AA14,8
sUnknown_0862AA14:
	.word	gRaySceneKyogre2_Gfx
	.short	0xc0
	.short	0x772d
	.align	2, 0
	.type	 sUnknown_0862AA1C,object
	.size	 sUnknown_0862AA1C,24
sUnknown_0862AA1C:
	.short	0x772d
	.short	0x772c
	.word	sOamData_862A6DC
	.word	sSpriteAnimTable_862AA10
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862AA34,object
	.size	 sUnknown_0862AA34,8
sUnknown_0862AA34:
	.word	gRaySceneKyogre3_Gfx
	.short	0x200
	.short	0x772e
	.align	2, 0
	.type	 sUnknown_0862AA3C,object
	.size	 sUnknown_0862AA3C,24
sUnknown_0862AA3C:
	.short	0x772e
	.short	0x772c
	.word	sOamData_862A6C4
	.word	sSpriteAnimTable_862A8F4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862AA54,object
	.size	 sUnknown_0862AA54,12
sUnknown_0862AA54:
	.byte	0xf8
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xd6
	.byte	0x13
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sSpriteAnim_862AA60,object
sSpriteAnim_862AA60:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862AA60,8
	.align	2, 0
	.type	 sSpriteAnimTable_862AA68,object
sSpriteAnimTable_862AA68:
	.word	sSpriteAnim_862AA60
	.size	 sSpriteAnimTable_862AA68,4
	.align	2, 0
	.type	 sSpriteAffineAnim_862AA6C,object
sSpriteAffineAnim_862AA6C:
	.short	-0x40
	.short	-0x40
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x20
	.short	0x20
	.byte	0x0
	.byte	0xe
	.space	2
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 sSpriteAffineAnim_862AA6C,32
	.align	2, 0
	.type	 sSpriteAffineAnimTable_862AA8C,object
sSpriteAffineAnimTable_862AA8C:
	.word	sSpriteAffineAnim_862AA6C
	.size	 sSpriteAffineAnimTable_862AA8C,4
	.align	2, 0
	.type	 sUnknown_0862AA90,object
	.size	 sUnknown_0862AA90,8
sUnknown_0862AA90:
	.word	gRaySceneSmoke_Gfx
	.short	0x100
	.short	0x775b
	.align	2, 0
	.type	 sUnknown_0862AA98,object
	.size	 sUnknown_0862AA98,8
sUnknown_0862AA98:
	.word	gRaySceneSmoke_Pal
	.short	0x775b
	.space	2
	.align	2, 0
	.type	 sUnknown_0862AAA0,object
	.size	 sUnknown_0862AAA0,24
sUnknown_0862AAA0:
	.short	0x775b
	.short	0x775b
	.word	sOamData_862A6D4
	.word	sSpriteAnimTable_862AA68
	.word	0x0
	.word	sSpriteAffineAnimTable_862AA8C
	.word	sub_81D8260
	.type	 sUnknown_0862AAB8,object
sUnknown_0862AAB8:
	.byte	-0x1
	.byte	0x5
	.byte	-0x3
	.byte	-0x4
	.byte	0x5
	.byte	-0x3
	.byte	-0x7
	.byte	0x2
	.byte	-0x9
	.byte	-0x1
	.byte	0x1
	.byte	-0x5
	.byte	0x3
	.byte	0x4
	.byte	-0x5
	.byte	0x3
	.byte	0x7
	.byte	-0x2
	.byte	0x9
	.byte	0x1
	.size	 sUnknown_0862AAB8,20
	.align	2, 0
	.type	 sUnknown_0862AACC,object
	.size	 sUnknown_0862AACC,16
sUnknown_0862AACC:
	.byte	0xf0
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xe5
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xda
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xc7
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sSpriteAnim_862AADC,object
sSpriteAnim_862AADC:
	.short	0x0
	.byte	0x20
	.space	1
	.short	0x40
	.byte	0x20
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862AADC,12
	.align	2, 0
	.type	 sSpriteAnimTable_862AAE8,object
sSpriteAnimTable_862AAE8:
	.word	sSpriteAnim_862AADC
	.size	 sSpriteAnimTable_862AAE8,4
	.align	2, 0
	.type	 sSpriteAnim_862AAEC,object
sSpriteAnim_862AAEC:
	.short	0x0
	.byte	0x20
	.space	1
	.short	0x8
	.byte	0x20
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862AAEC,12
	.align	2, 0
	.type	 sSpriteAnimTable_862AAF8,object
sSpriteAnimTable_862AAF8:
	.word	sSpriteAnim_862AAEC
	.size	 sSpriteAnimTable_862AAF8,4
	.align	2, 0
	.type	 sUnknown_0862AAFC,object
	.size	 sUnknown_0862AAFC,8
sUnknown_0862AAFC:
	.word	gRaySceneRayquazaFly1_Gfx
	.short	0x1000
	.short	0x775c
	.align	2, 0
	.type	 sUnknown_0862AB04,object
	.size	 sUnknown_0862AB04,8
sUnknown_0862AB04:
	.word	gRaySceneRayquazaTail_Gfx
	.short	0x200
	.short	0x775d
	.align	2, 0
	.type	 sUnknown_0862AB0C,object
	.size	 sUnknown_0862AB0C,8
sUnknown_0862AB0C:
	.word	gRaySceneRayquaza_Pal
	.short	0x775c
	.space	2
	.align	2, 0
	.type	 sUnknown_0862AB14,object
	.size	 sUnknown_0862AB14,24
sUnknown_0862AB14:
	.short	0x775c
	.short	0x775c
	.word	sOamData_862A6BC
	.word	sSpriteAnimTable_862AAE8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862AB2C,object
	.size	 sUnknown_0862AB2C,24
sUnknown_0862AB2C:
	.short	0x775d
	.short	0x775c
	.word	sOamData_862A6E4
	.word	sSpriteAnimTable_862AAF8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862AB44,object
	.size	 sUnknown_0862AB44,16
sUnknown_0862AB44:
	.byte	0xf8
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xe5
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xda
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xcf
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sSpriteAnim_862AB54,object
sSpriteAnim_862AB54:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862AB54,8
	.align	2, 0
	.type	 sSpriteAnim_862AB5C,object
sSpriteAnim_862AB5C:
	.short	0x0
	.byte	0x30
	.space	1
	.short	0x40
	.byte	0x20
	.space	1
	.short	0x0
	.byte	0x30
	.space	1
	.short	0x80
	.byte	0x20
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862AB5C,20
	.align	2, 0
	.type	 sSpriteAnimTable_862AB70,object
sSpriteAnimTable_862AB70:
	.word	sSpriteAnim_862AB54
	.word	sSpriteAnim_862AB5C
	.size	 sSpriteAnimTable_862AB70,8
	.align	2, 0
	.type	 sSpriteAnim_862AB78,object
sSpriteAnim_862AB78:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862AB78,8
	.align	2, 0
	.type	 sSpriteAnimTable_862AB80,object
sSpriteAnimTable_862AB80:
	.word	sSpriteAnim_862AB78
	.size	 sSpriteAnimTable_862AB80,4
	.align	2, 0
	.type	 sSpriteAnim_862AB84,object
sSpriteAnim_862AB84:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862AB84,8
	.align	2, 0
	.type	 sSpriteAnim_862AB8C,object
sSpriteAnim_862AB8C:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862AB8C,8
	.align	2, 0
	.type	 sSpriteAnim_862AB94,object
sSpriteAnim_862AB94:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862AB94,8
	.align	2, 0
	.type	 sSpriteAnimTable_862AB9C,object
sSpriteAnimTable_862AB9C:
	.word	sSpriteAnim_862AB84
	.word	sSpriteAnim_862AB8C
	.word	sSpriteAnim_862AB94
	.size	 sSpriteAnimTable_862AB9C,12
	.align	2, 0
	.type	 sSpriteAnim_862ABA8,object
sSpriteAnim_862ABA8:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862ABA8,8
	.align	2, 0
	.type	 sSpriteAnim_862ABB0,object
sSpriteAnim_862ABB0:
	.short	0x40
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862ABB0,8
	.align	2, 0
	.type	 sSpriteAnim_862ABB8,object
sSpriteAnim_862ABB8:
	.short	0x80
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862ABB8,8
	.align	2, 0
	.type	 sSpriteAnim_862ABC0,object
sSpriteAnim_862ABC0:
	.short	0xc0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862ABC0,8
	.align	2, 0
	.type	 sSpriteAnimTable_862ABC8,object
sSpriteAnimTable_862ABC8:
	.word	sSpriteAnim_862ABA8
	.word	sSpriteAnim_862ABB0
	.word	sSpriteAnim_862ABB8
	.word	sSpriteAnim_862ABC0
	.size	 sSpriteAnimTable_862ABC8,16
	.align	2, 0
	.type	 sSpriteAnim_862ABD8,object
sSpriteAnim_862ABD8:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862ABD8,8
	.align	2, 0
	.type	 sSpriteAnim_862ABE0,object
sSpriteAnim_862ABE0:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862ABE0,8
	.align	2, 0
	.type	 sSpriteAnim_862ABE8,object
sSpriteAnim_862ABE8:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862ABE8,8
	.align	2, 0
	.type	 sSpriteAnim_862ABF0,object
sSpriteAnim_862ABF0:
	.short	0x30
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 sSpriteAnim_862ABF0,8
	.align	2, 0
	.type	 sSpriteAnimTable_862ABF8,object
sSpriteAnimTable_862ABF8:
	.word	sSpriteAnim_862ABD8
	.word	sSpriteAnim_862ABE0
	.word	sSpriteAnim_862ABE8
	.word	sSpriteAnim_862ABF0
	.size	 sSpriteAnimTable_862ABF8,16
	.align	2, 0
	.type	 sSpriteAnim_862AC08,object
sSpriteAnim_862AC08:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x4
	.byte	0x8
	.space	1
	.short	0x8
	.byte	0x8
	.space	1
	.short	0xc
	.byte	0x8
	.space	1
	.short	0x10
	.byte	0x8
	.space	1
	.short	0x14
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sSpriteAnim_862AC08,28
	.align	2, 0
	.type	 sSpriteAnimTable_862AC24,object
sSpriteAnimTable_862AC24:
	.word	sSpriteAnim_862AC08
	.size	 sSpriteAnimTable_862AC24,4
	.align	2, 0
	.type	 sUnknown_0862AC28,object
	.size	 sUnknown_0862AC28,8
sUnknown_0862AC28:
	.word	gRaySceneGroudonLeft_Gfx
	.short	0x1800
	.short	0x7765
	.align	2, 0
	.type	 sUnknown_0862AC30,object
	.size	 sUnknown_0862AC30,8
sUnknown_0862AC30:
	.word	gRaySceneGroudonTail_Gfx
	.short	0x80
	.short	0x7766
	.align	2, 0
	.type	 sUnknown_0862AC38,object
	.size	 sUnknown_0862AC38,8
sUnknown_0862AC38:
	.word	gRaySceneKyogreRight_Gfx
	.short	0x600
	.short	0x7768
	.align	2, 0
	.type	 sUnknown_0862AC40,object
	.size	 sUnknown_0862AC40,8
sUnknown_0862AC40:
	.word	gRaySceneRayquazaHover_Gfx
	.short	0x2000
	.short	0x7769
	.align	2, 0
	.type	 sUnknown_0862AC48,object
	.size	 sUnknown_0862AC48,8
sUnknown_0862AC48:
	.word	gRaySceneRayquazaFlyIn_Gfx
	.short	0x800
	.short	0x776a
	.align	2, 0
	.type	 sUnknown_0862AC50,object
	.size	 sUnknown_0862AC50,8
sUnknown_0862AC50:
	.word	gRaySceneSplash_Gfx
	.short	0x300
	.short	0x776b
	.align	2, 0
	.type	 sUnknown_0862AC58,object
	.size	 sUnknown_0862AC58,8
sUnknown_0862AC58:
	.word	gRaySceneGroudonLeft_Pal
	.short	0x7765
	.space	2
	.align	2, 0
	.type	 sUnknown_0862AC60,object
	.size	 sUnknown_0862AC60,8
sUnknown_0862AC60:
	.word	gRaySceneKyogreRight_Pal
	.short	0x7768
	.space	2
	.align	2, 0
	.type	 sUnknown_0862AC68,object
	.size	 sUnknown_0862AC68,8
sUnknown_0862AC68:
	.word	gRaySceneRayquazaHover_Pal
	.short	0x7769
	.space	2
	.align	2, 0
	.type	 sUnknown_0862AC70,object
	.size	 sUnknown_0862AC70,8
sUnknown_0862AC70:
	.word	gRaySceneSplash_Pal
	.short	0x776b
	.space	2
	.align	2, 0
	.type	 sUnknown_0862AC78,object
	.size	 sUnknown_0862AC78,24
sUnknown_0862AC78:
	.short	0x7765
	.short	0x7765
	.word	sOamData_862A6BC
	.word	sSpriteAnimTable_862AB70
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862AC90,object
	.size	 sUnknown_0862AC90,24
sUnknown_0862AC90:
	.short	0x7766
	.short	0x7765
	.word	sOamData_862A6EC
	.word	sSpriteAnimTable_862AB80
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862ACA8,object
	.size	 sUnknown_0862ACA8,24
sUnknown_0862ACA8:
	.short	0x7768
	.short	0x7768
	.word	sOamData_862A6C4
	.word	sSpriteAnimTable_862AB9C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862ACC0,object
	.size	 sUnknown_0862ACC0,24
sUnknown_0862ACC0:
	.short	0x7769
	.short	0x7769
	.word	sOamData_862A6BC
	.word	sSpriteAnimTable_862ABC8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81D961C
	.align	2, 0
	.type	 sUnknown_0862ACD8,object
	.size	 sUnknown_0862ACD8,24
sUnknown_0862ACD8:
	.short	0x776a
	.short	0x7769
	.word	sOamData_862A6C4
	.word	sSpriteAnimTable_862ABF8
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862ACF0,object
	.size	 sUnknown_0862ACF0,24
sUnknown_0862ACF0:
	.short	0x776b
	.short	0x776b
	.word	sOamData_862A6F4
	.word	sSpriteAnimTable_862AC24
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0862AD08,object
	.size	 sUnknown_0862AD08,12
sUnknown_0862AD08:
	.byte	0xf4
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xe5
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xd2
	.byte	0x1
	.byte	0x0
	.space	1
.text
	.align	2, 0
	.globl	DoRayquazaScene
	.type	 DoRayquazaScene,function
	.thumb_func
DoRayquazaScene:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r8, r2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L3
	ldr	r0, .L3+0x4
	bl	AllocZeroed
	str	r0, [r6]
	ldr	r1, .L3+0x8
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r0, [r6]
	mov	r1, r8
	str	r1, [r0]
	ldr	r1, .L3+0xc
	add	r0, r0, r1
	strb	r5, [r0]
	ldr	r0, .L3+0x10
	bl	SetMainCallback2
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	sRayScene
	.word	0x2018
	.word	0x2006
	.word	0x2007
	.word	CB2_InitRayquazaScene
.Lfe1:
	.size	 DoRayquazaScene,.Lfe1-DoRayquazaScene
	.align	2, 0
	.type	 CB2_InitRayquazaScene,function
	.thumb_func
CB2_InitRayquazaScene:
	push	{lr}
	bl	SetVBlankHBlankCallbacksToNull
	bl	clear_scheduled_bg_copies_to_vram
	bl	ScanlineEffect_Stop
	bl	FreeAllSpritePalettes
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	ResetTasks
	mov	r0, #0x0
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	FillPalette
	ldr	r1, .L6
	ldr	r0, .L6+0x4
	ldr	r0, [r0]
	ldr	r2, .L6+0x8
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	CreateTask
	ldr	r0, .L6+0xc
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	sTasksForAnimations
	.word	sRayScene
	.word	0x2006
	.word	CB2_RayquazaScene
.Lfe2:
	.size	 CB2_InitRayquazaScene,.Lfe2-CB2_InitRayquazaScene
	.align	2, 0
	.type	 CB2_RayquazaScene,function
	.thumb_func
CB2_RayquazaScene:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	do_scheduled_bg_tilemap_copies_to_vram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 CB2_RayquazaScene,.Lfe3-CB2_RayquazaScene
	.align	2, 0
	.type	 VBlankCB_RayquazaScene,function
	.thumb_func
VBlankCB_RayquazaScene:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 VBlankCB_RayquazaScene,.Lfe4-VBlankCB_RayquazaScene
	.align	2, 0
	.type	 Task_EndAfterFadeScreen,function
	.thumb_func
Task_EndAfterFadeScreen:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L12
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L11	@cond_branch
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r4, .L12+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	bl	SetMainCallback2
	ldr	r0, [r4]
	bl	Free
	add	r0, r5, #0
	bl	DestroyTask
.L11:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	gPaletteFade
	.word	sRayScene
.Lfe5:
	.size	 Task_EndAfterFadeScreen,.Lfe5-Task_EndAfterFadeScreen
	.align	2, 0
	.type	 Task_SetNextAnim,function
	.thumb_func
Task_SetNextAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r6, r3, #0
	ldr	r0, .L19
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L15	@cond_branch
	ldr	r2, .L19+0x4
	ldr	r1, [r2]
	ldr	r4, .L19+0x8
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L16	@cond_branch
	ldr	r0, .L19+0xc
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L19+0x10
	b	.L18
.L20:
	.align	2, 0
.L19:
	.word	gPaletteFade
	.word	sRayScene
	.word	0x2007
	.word	gTasks
	.word	Task_EndAfterFadeScreen
.L16:
	ldr	r4, .L21
	add	r1, r1, r4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, [r2]
	ldr	r1, .L21+0x4
	add	r0, r2, r1
	strh	r5, [r0]
	ldr	r0, .L21+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r3, .L21+0xc
	add	r2, r2, r4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r0, [r0]
.L18:
	str	r0, [r1]
.L15:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	0x2006
	.word	0x2004
	.word	gTasks
	.word	sTasksForAnimations
.Lfe6:
	.size	 Task_SetNextAnim,.Lfe6-Task_SetNextAnim
	.align	2, 0
	.type	 sub_81D68C8,function
	.thumb_func
sub_81D68C8:
	push	{lr}
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0xf0
	bl	SetGpuReg
	ldr	r1, .L24
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L24+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L24+0x8
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L25:
	.align	2, 0
.L24:
	.word	0x1888
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe7:
	.size	 sub_81D68C8,.Lfe7-sub_81D68C8
	.align	2, 0
	.type	 sub_81D6904,function
	.thumb_func
sub_81D6904:
	push	{lr}
	mov	r0, #0x48
	mov	r1, #0x3f
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_81D6904,.Lfe8-sub_81D6904
	.align	2, 0
	.type	 Task_HandleDuoFightPre,function
	.thumb_func
Task_HandleDuoFightPre:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L38
	add	r5, r0, r1
	bl	sub_81D750C
	ldr	r0, .L38+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L27	@cond_branch
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	cmp	r1, #0x40
	bne	.L29	@cond_branch
	bl	sub_81D7438
	b	.L30
.L39:
	.align	2, 0
.L38:
	.word	gTasks+0x8
	.word	gPaletteFade
.L29:
	cmp	r1, #0x90
	bne	.L31	@cond_branch
	bl	sub_81D7480
	b	.L30
.L31:
	cmp	r1, #0x94
	beq	.L35	@cond_branch
	mov	r0, #0xa4
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L30	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	DuoFightEnd
	b	.L27
.L35:
	bl	sub_81D74C8
.L30:
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
.L27:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 Task_HandleDuoFightPre,.Lfe9-Task_HandleDuoFightPre
	.align	2, 0
	.type	 sub_81D6984,function
	.thumb_func
sub_81D6984:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L41
	mov	r8, r0
	mov	r1, #0x58
	mov	r2, #0x48
	mov	r3, #0x3
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L41+0x4
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r0, r6, #0
	add	r0, r0, #0x1c
	add	r0, r4, r0
	ldr	r1, .L41+0x8
	str	r1, [r0]
	add	r0, r6, #0
	add	r0, r0, #0x2e
	add	r4, r4, r0
	mov	r0, r8
	mov	r1, #0x38
	mov	r2, #0x68
	mov	r3, #0x3
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldr	r0, .L41+0xc
	mov	r1, #0x4b
	mov	r2, #0x65
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x2]
	ldr	r0, .L41+0x10
	mov	r1, #0x6d
	mov	r2, #0x72
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x4]
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r0, r5, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L42:
	.align	2, 0
.L41:
	.word	sUnknown_0862A72C
	.word	gSprites
	.word	sub_81D6A20
	.word	sUnknown_0862A750
	.word	sUnknown_0862A774
.Lfe10:
	.size	 sub_81D6984,.Lfe10-sub_81D6984
	.align	2, 0
	.type	 sub_81D6A20,function
	.thumb_func
sub_81D6A20:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	add	r0, r0, r3
	mov	ip, r0
	ldrh	r0, [r0, #0xa]
	add	r0, r0, #0x1
	mov	r1, #0x1f
	and	r0, r0, r1
	mov	r1, ip
	strh	r0, [r1, #0xa]
	cmp	r0, #0
	bne	.L44	@cond_branch
	ldrh	r1, [r3, #0x20]
	mov	r2, #0x20
	ldrsh	r0, [r3, r2]
	cmp	r0, #0x48
	beq	.L44	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x20]
	ldr	r2, .L55
	mov	r4, #0x2e
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	mov	r0, ip
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	mov	r0, ip
	mov	r4, #0x4
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
.L44:
	add	r0, r3, #0
	add	r0, r0, #0x2b
	ldrb	r3, [r0]
	cmp	r3, #0x1
	beq	.L48	@cond_branch
	cmp	r3, #0x1
	bgt	.L52	@cond_branch
	cmp	r3, #0
	beq	.L46	@cond_branch
	b	.L45
.L56:
	.align	2, 0
.L55:
	.word	gSprites
.L52:
	cmp	r3, #0x2
	beq	.L49	@cond_branch
	cmp	r3, #0x3
	beq	.L48	@cond_branch
	b	.L45
.L46:
	ldr	r2, .L57
	mov	r0, ip
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	mov	r0, ip
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
	mov	r0, ip
	mov	r4, #0x4
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	mov	r0, ip
	mov	r4, #0x4
	ldrsh	r1, [r0, r4]
	b	.L53
.L58:
	.align	2, 0
.L57:
	.word	gSprites
.L48:
	ldr	r2, .L59
	mov	r0, ip
	mov	r3, #0x2
	ldrsh	r1, [r0, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L59+0x4
	strh	r1, [r0, #0x24]
	mov	r4, ip
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r3, #0x0
	strh	r3, [r0, #0x26]
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	neg	r1, r1
	b	.L54
.L60:
	.align	2, 0
.L59:
	.word	gSprites
	.word	0xffff
.L49:
	ldr	r2, .L61
	mov	r3, ip
	mov	r4, #0x2
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L61+0x4
	strh	r1, [r0, #0x24]
	mov	r0, #0x2
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r3, #0x1
	strh	r3, [r0, #0x26]
	mov	r4, ip
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L61+0x8
.L54:
	strh	r1, [r0, #0x24]
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
.L53:
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
.L45:
	pop	{r4}
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gSprites
	.word	0xffff
	.word	0xfffe
.Lfe11:
	.size	 sub_81D6A20,.Lfe11-sub_81D6A20
	.align	2, 0
	.type	 sub_81D6B7C,function
	.thumb_func
sub_81D6B7C:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r5, .L64
	add	r0, r5, #0
	mov	r1, #0x88
	mov	r2, #0x60
	mov	r3, #0x1
	bl	CreateSprite
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L64+0x4
	lsl	r4, r0, #0x4
	add	r4, r4, r8
	lsl	r4, r4, #0x2
	add	r0, r6, #0
	add	r0, r0, #0x1c
	add	r0, r4, r0
	ldr	r1, .L64+0x8
	str	r1, [r0]
	add	r0, r6, #0
	add	r0, r0, #0x2e
	add	r4, r4, r0
	add	r0, r5, #0
	mov	r1, #0xa8
	mov	r2, #0x60
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4]
	add	r0, r5, #0
	mov	r1, #0x88
	mov	r2, #0x70
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	orr	r0, r0, r1
	strh	r0, [r4]
	add	r0, r5, #0
	mov	r1, #0xa8
	mov	r2, #0x70
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x2]
	add	r0, r5, #0
	mov	r1, #0x88
	mov	r2, #0x80
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	orr	r0, r0, r1
	strh	r0, [r4, #0x2]
	add	r0, r5, #0
	mov	r1, #0xa8
	mov	r2, #0x80
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x4]
	add	r0, r5, #0
	mov	r1, #0x68
	mov	r2, #0x80
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	add	r0, r5, #0
	mov	r1, #0x88
	mov	r2, #0x80
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x6]
	add	r0, r5, #0
	mov	r1, #0xb8
	mov	r2, #0x80
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	orr	r0, r0, r1
	strh	r0, [r4, #0x6]
	ldr	r0, .L64+0xc
	mov	r1, #0xd0
	mov	r2, #0x84
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x8]
	ldr	r0, .L64+0x10
	mov	r1, #0xc8
	mov	r2, #0x78
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x8]
	orr	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrh	r1, [r4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x2
	bl	StartSpriteAnim
	ldrh	r1, [r4, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x3
	bl	StartSpriteAnim
	ldrb	r1, [r4, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x4
	bl	StartSpriteAnim
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	bl	StartSpriteAnim
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x6
	bl	StartSpriteAnim
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x7
	bl	StartSpriteAnim
	ldrb	r1, [r4, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x8
	bl	StartSpriteAnim
	mov	r0, r8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L65:
	.align	2, 0
.L64:
	.word	sUnknown_0862A81C
	.word	gSprites
	.word	sub_81D6D20
	.word	sUnknown_0862A84C
	.word	sUnknown_0862A864
.Lfe12:
	.size	 sub_81D6B7C,.Lfe12-sub_81D6B7C
	.align	2, 0
	.type	 sub_81D6D20,function
	.thumb_func
sub_81D6D20:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r3, r4, #0
	add	r3, r3, #0x2e
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	mov	r1, #0x1f
	and	r0, r0, r1
	strh	r0, [r3, #0xa]
	ldr	r7, .L78
	cmp	r0, #0
	bne	.L67	@cond_branch
	ldrh	r1, [r4, #0x20]
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x98
	beq	.L67	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r4, #0x2e]
	mov	r2, #0xff
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0x2]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0x4]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0x6]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0x8]
	and	r2, r2, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
.L67:
	add	r6, r7, #0
	mov	r5, #0xff
	ldrb	r1, [r3, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x2b
	ldrb	r2, [r0]
	cmp	r2, #0x1
	beq	.L71	@cond_branch
	cmp	r2, #0x1
	bgt	.L75	@cond_branch
	cmp	r2, #0
	beq	.L69	@cond_branch
	b	.L68
.L79:
	.align	2, 0
.L78:
	.word	gSprites
.L75:
	cmp	r2, #0x2
	bne	.LCB1090
	b	.L72	@long jump
.LCB1090:
	cmp	r2, #0x3
	beq	.L71	@cond_branch
	b	.L68
.L69:
	strh	r2, [r4, #0x26]
	ldrh	r1, [r3]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x2]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x4]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x6]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x8]
	and	r1, r1, r5
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	b	.L76
.L71:
	mov	r2, #0x1
	strh	r2, [r4, #0x26]
	ldrh	r1, [r3]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3, #0x8]
	b	.L77
.L72:
	strh	r2, [r4, #0x26]
	ldrh	r1, [r3]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x2]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x8]
	and	r1, r1, r5
.L77:
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
.L76:
	strh	r2, [r0, #0x26]
.L68:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 sub_81D6D20,.Lfe13-sub_81D6D20
	.align	2, 0
	.type	 VBlankCB_DuoFight,function
	.thumb_func
VBlankCB_DuoFight:
	push	{lr}
	bl	VBlankCB_RayquazaScene
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 VBlankCB_DuoFight,.Lfe14-VBlankCB_DuoFight
	.align	2, 0
	.type	 sub_81D6FE0,function
	.thumb_func
sub_81D6FE0:
	push	{r4, lr}
	bl	ResetVramOamAndBgCntRegs
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L82
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r4, .L82+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x4
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L82+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L82+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	bl	ResetAllBgsCoordinates
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	sUnknown_0862A888
	.word	sRayScene
	.word	0x804
	.word	0x1004
.Lfe15:
	.size	 sub_81D6FE0,.Lfe15-sub_81D6FE0
	.align	2, 0
	.type	 sub_81D706C,function
	.thumb_func
sub_81D706C:
	push	{r4, lr}
	add	sp, sp, #-0x4
	bl	ResetTempTileDataBuffers
	ldr	r1, .L89
	mov	r0, #0x0
	str	r0, [sp]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
.L85:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L85	@cond_branch
	ldr	r0, .L89+0x4
	ldr	r4, .L89+0x8
	ldr	r1, [r4]
	add	r1, r1, #0x4
	bl	LZDecompressWram
	ldr	r0, .L89+0xc
	ldr	r1, [r4]
	ldr	r2, .L89+0x10
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L89+0x14
	ldr	r1, [r4]
	ldr	r2, .L89+0x18
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L89+0x1c
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	ldr	r0, .L89+0x20
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L89+0x24
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L89+0x28
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L89+0x2c
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L89+0x30
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L89+0x34
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L89+0x38
	bl	LoadCompressedSpritePalette
	ldr	r0, .L89+0x3c
	bl	LoadCompressedSpritePalette
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gRaySceneClouds_Gfx
	.word	gRaySceneClouds2_Tilemap
	.word	sRayScene
	.word	gRaySceneClouds1_Tilemap
	.word	0x804
	.word	gRaySceneClouds3_Tilemap
	.word	0x1004
	.word	gRaySceneClouds_Pal
	.word	sUnknown_0862A8C4
	.word	sUnknown_0862A8F8
	.word	sUnknown_0862A924
	.word	sUnknown_0862A9D4
	.word	sUnknown_0862AA14
	.word	sUnknown_0862AA34
	.word	sUnknown_0862A8CC
	.word	sUnknown_0862A9DC
.Lfe16:
	.size	 sub_81D706C,.Lfe16-sub_81D706C
	.align	2, 0
	.type	 Task_DuoFightAnim,function
	.thumb_func
Task_DuoFightAnim:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r6, r1, #0x3
	ldr	r7, .L94
	add	r5, r6, r7
	bl	ScanlineEffect_Clear
	bl	sub_81D6FE0
	bl	sub_81D706C
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r1, .L94+0x4
	ldr	r2, .L94+0x8
	add	r0, sp, #0x4
	bl	CpuFastSet
	ldr	r2, .L94+0xc
	ldr	r0, [r2]
	ldr	r1, [r2, #0x4]
	ldr	r2, [r2, #0x8]
	bl	ScanlineEffect_SetParams
	strh	r4, [r5]
	ldr	r0, .L94+0x10
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x2]
	ldr	r0, .L94+0x14
	ldr	r0, [r0]
	ldr	r1, .L94+0x18
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L92	@cond_branch
	bl	sub_81D6984
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x4]
	bl	sub_81D6B7C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x6]
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L94+0x1c
	str	r1, [r0]
	b	.L93
.L95:
	.align	2, 0
.L94:
	.word	gTasks+0x8
	.word	gScanlineEffectRegBuffers
	.word	0x10003c0
	.word	sUnknown_0862A87C
	.word	sub_81D7228
	.word	sRayScene
	.word	0x2006
	.word	Task_HandleDuoFightPre
.L92:
	bl	sub_81D7664
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x4]
	bl	sub_81D78BC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x6]
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L96
	str	r1, [r0]
	bl	StopMapMusic
.L93:
	mov	r4, #0x1
	neg	r4, r4
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L96+0x4
	bl	SetVBlankCallback
	mov	r0, #0x53
	bl	PlaySE
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L97:
	.align	2, 0
.L96:
	.word	Task_HandleDuoFight
	.word	VBlankCB_DuoFight
.Lfe17:
	.size	 Task_DuoFightAnim,.Lfe17-Task_DuoFightAnim
	.align	2, 0
	.type	 sub_81D7228,function
	.thumb_func
sub_81D7228:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L118
	add	r3, r1, r0
	mov	r1, #0x18
	ldr	r7, .L118+0x4
	ldr	r4, .L118+0x8
	mov	r0, #0xf0
	lsl	r0, r0, #0x3
	add	r5, r4, r0
.L102:
	lsl	r0, r1, #0x10
	asr	r1, r0, #0x10
	add	r6, r0, #0
	cmp	r1, #0x2f
	bgt	.L103	@cond_branch
	lsl	r1, r1, #0x1
	add	r2, r1, r4
	ldrh	r0, [r3]
	lsr	r0, r0, #0x8
	strh	r0, [r2]
	add	r1, r1, r5
	ldrh	r0, [r3]
	b	.L116
.L119:
	.align	2, 0
.L118:
	.word	gTasks+0x8
	.word	sRayScene
	.word	gScanlineEffectRegBuffers
.L103:
	cmp	r1, #0x3f
	bgt	.L105	@cond_branch
	lsl	r1, r1, #0x1
	add	r2, r1, r4
	ldrh	r0, [r3, #0x2]
	lsr	r0, r0, #0x8
	strh	r0, [r2]
	add	r1, r1, r5
	ldrh	r0, [r3, #0x2]
	b	.L116
.L105:
	cmp	r1, #0x4b
	bgt	.L107	@cond_branch
	lsl	r1, r1, #0x1
	add	r2, r1, r4
	ldrh	r0, [r3, #0x4]
	lsr	r0, r0, #0x8
	strh	r0, [r2]
	add	r1, r1, r5
	ldrh	r0, [r3, #0x4]
	b	.L116
.L107:
	cmp	r1, #0x53
	bgt	.L109	@cond_branch
	lsl	r1, r1, #0x1
	add	r2, r1, r4
	ldrh	r0, [r3, #0x6]
	lsr	r0, r0, #0x8
	strh	r0, [r2]
	add	r1, r1, r5
	ldrh	r0, [r3, #0x6]
	b	.L116
.L109:
	cmp	r1, #0x57
	bgt	.L111	@cond_branch
	lsl	r1, r1, #0x1
	add	r2, r1, r4
	ldrh	r0, [r3, #0x8]
	lsr	r0, r0, #0x8
	strh	r0, [r2]
	add	r1, r1, r5
	ldrh	r0, [r3, #0x8]
	b	.L116
.L111:
	lsl	r1, r1, #0x1
	add	r2, r1, r4
	ldrh	r0, [r3, #0xa]
	lsr	r0, r0, #0x8
	strh	r0, [r2]
	add	r1, r1, r5
	ldrh	r0, [r3, #0xa]
.L116:
	lsr	r0, r0, #0x8
	strh	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r0, r6, r1
	lsr	r1, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5b
	ble	.L102	@cond_branch
	ldr	r0, [r7]
	ldr	r1, .L120
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L114	@cond_branch
	mov	r1, #0xe0
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r3]
	add	r0, r0, r1
	strh	r0, [r3]
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r3, #0x2]
	add	r0, r0, r1
	strh	r0, [r3, #0x2]
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r3, #0x4]
	add	r0, r0, r1
	strh	r0, [r3, #0x4]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r3, #0x6]
	add	r0, r0, r1
	strh	r0, [r3, #0x6]
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0xc0
	b	.L117
.L121:
	.align	2, 0
.L120:
	.word	0x2006
.L114:
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	add	r0, r1, #0
	ldrh	r1, [r3]
	add	r0, r0, r1
	strh	r0, [r3]
	mov	r1, #0xa0
	lsl	r1, r1, #0x2
	add	r0, r1, #0
	ldrh	r1, [r3, #0x2]
	add	r0, r0, r1
	strh	r0, [r3, #0x2]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	add	r0, r1, #0
	ldrh	r1, [r3, #0x4]
	add	r0, r0, r1
	strh	r0, [r3, #0x4]
	mov	r1, #0xc0
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r3, #0x6]
	add	r0, r0, r1
	strh	r0, [r3, #0x6]
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r3, #0x8]
	add	r0, r0, r1
.L117:
	strh	r0, [r3, #0x8]
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x80
	strh	r0, [r3, #0xa]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_81D7228,.Lfe18-sub_81D7228
	.align	2, 0
	.type	 Task_HandleDuoFight,function
	.thumb_func
Task_HandleDuoFight:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r7, .L136
	add	r4, r0, r7
	bl	sub_81D750C
	ldr	r0, .L136+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	bne	.L122	@cond_branch
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x20
	beq	.L125	@cond_branch
	cmp	r1, #0x70
	bne	.L124	@cond_branch
.L125:
	bl	sub_81D7438
	b	.L126
.L137:
	.align	2, 0
.L136:
	.word	gTasks+0x8
	.word	gPaletteFade
.L124:
	cmp	r1, #0xd8
	bne	.L127	@cond_branch
	bl	sub_81D7480
	b	.L126
.L127:
	cmp	r1, #0xdc
	bne	.L129	@cond_branch
	bl	sub_81D74C8
	b	.L126
.L129:
	mov	r0, #0xbe
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L133	@cond_branch
	add	r0, r0, #0x20
	cmp	r1, r0
	bne	.L126	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	bl	DuoFightEnd
	b	.L122
.L133:
	mov	r1, #0x91
	lsl	r1, r1, #0x2
	mov	r0, #0x50
	bl	SetGpuReg
	add	r2, r7, #0
	sub	r2, r2, #0x8
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L138
	str	r1, [r0]
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r6, [r0, #0x8]
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0xc]
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r4, #0x6]
	strh	r1, [r0, #0xe]
	bl	ScanlineEffect_Stop
.L126:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
.L122:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L139:
	.align	2, 0
.L138:
	.word	sub_81D752C
.Lfe19:
	.size	 Task_HandleDuoFight,.Lfe19-Task_HandleDuoFight
	.align	2, 0
	.type	 sub_81D7438,function
	.thumb_func
sub_81D7438:
	push	{r4, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x57
	bl	PlaySE
	ldr	r0, .L141
	ldr	r1, .L141+0x4
	str	r1, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	sub_80A2C44
	ldr	r0, .L141+0x8
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	sub_80A2C44
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	0x7fff
	.word	0xffff
	.word	-0x10000
.Lfe20:
	.size	 sub_81D7438,.Lfe20-sub_81D7438
	.align	2, 0
	.type	 sub_81D7480,function
	.thumb_func
sub_81D7480:
	push	{r4, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x57
	bl	PlaySE
	ldr	r0, .L144
	ldr	r1, .L144+0x4
	str	r1, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x10
	bl	sub_80A2C44
	ldr	r0, .L144+0x8
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x10
	bl	sub_80A2C44
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	0x7fff
	.word	0xffff
	.word	-0x10000
.Lfe21:
	.size	 sub_81D7480,.Lfe21-sub_81D7480
	.align	2, 0
	.type	 sub_81D74C8,function
	.thumb_func
sub_81D74C8:
	push	{r4, lr}
	add	sp, sp, #-0xc
	ldr	r0, .L147
	ldr	r1, .L147+0x4
	str	r1, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x4
	mov	r2, #0x10
	mov	r3, #0x0
	bl	sub_80A2C44
	ldr	r0, .L147+0x8
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	mov	r1, #0x4
	mov	r2, #0x10
	mov	r3, #0x0
	bl	sub_80A2C44
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L148:
	.align	2, 0
.L147:
	.word	0x7fff
	.word	0xffff
	.word	-0x10000
.Lfe22:
	.size	 sub_81D74C8,.Lfe22-sub_81D74C8
	.align	2, 0
	.type	 sub_81D750C,function
	.thumb_func
sub_81D750C:
	push	{lr}
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x2
	mov	r2, #0x1
	bl	ChangeBgX
	mov	r1, #0x80
	lsl	r1, r1, #0x4
	mov	r0, #0x2
	mov	r2, #0x2
	bl	ChangeBgY
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 sub_81D750C,.Lfe23-sub_81D750C
	.align	2, 0
	.type	 sub_81D752C,function
	.thumb_func
sub_81D752C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L154
	add	r5, r1, r0
	mov	r0, #0x4
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L154+0x4
	add	r0, r0, r4
	bl	sub_81D7860
	mov	r0, #0x6
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	sub_81D7D14
	mov	r0, #0x1
	bl	GetBgY
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x1
	bl	GetBgY
	cmp	r0, #0
	beq	.L152	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	cmp	r4, r0
	bls	.L151	@cond_branch
.L152:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x1
	mov	r2, #0x2
	bl	ChangeBgY
.L151:
	ldrh	r2, [r5]
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x10
	beq	.L153	@cond_branch
	add	r2, r2, #0x1
	strh	r2, [r5]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L153:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L155:
	.align	2, 0
.L154:
	.word	gTasks+0x8
	.word	gSprites
.Lfe24:
	.size	 sub_81D752C,.Lfe24-sub_81D752C
	.align	2, 0
	.type	 DuoFightEnd,function
	.thumb_func
DuoFightEnd:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	add	r4, r1, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x54
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	mov	r1, #0x0
	str	r1, [sp]
	add	r1, r4, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L157
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L157+0x4
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L158:
	.align	2, 0
.L157:
	.word	gTasks
	.word	Task_DuoFightEnd
.Lfe25:
	.size	 DuoFightEnd,.Lfe25-DuoFightEnd
	.align	2, 0
	.type	 Task_DuoFightEnd,function
	.thumb_func
Task_DuoFightEnd:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r6, r1, #0x3
	ldr	r7, .L161
	add	r5, r6, r7
	bl	sub_81D750C
	ldr	r0, .L161+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L160	@cond_branch
	ldrb	r0, [r5, #0x2]
	bl	DestroyTask
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	ScanlineEffect_Stop
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	strh	r4, [r5]
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L161+0x8
	str	r1, [r0]
.L160:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	Task_SetNextAnim
.Lfe26:
	.size	 Task_DuoFightEnd,.Lfe26-Task_DuoFightEnd
	.align	2, 0
	.type	 sub_81D7664,function
	.thumb_func
sub_81D7664:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L164
	mov	r8, r0
	mov	r1, #0x62
	mov	r2, #0x48
	mov	r3, #0x3
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r6, .L164+0x4
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r0, r6, #0
	add	r0, r0, #0x1c
	add	r0, r4, r0
	ldr	r1, .L164+0x8
	str	r1, [r0]
	add	r0, r6, #0
	add	r0, r0, #0x2e
	add	r4, r4, r0
	mov	r0, r8
	mov	r1, #0x42
	mov	r2, #0x68
	mov	r3, #0x3
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldr	r0, .L164+0xc
	mov	r1, #0x55
	mov	r2, #0x65
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x2]
	ldr	r0, .L164+0x10
	mov	r1, #0x77
	mov	r2, #0x72
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x4]
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r0, r5, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L165:
	.align	2, 0
.L164:
	.word	sUnknown_0862A8D4
	.word	gSprites
	.word	sub_81D7700
	.word	sUnknown_0862A900
	.word	sUnknown_0862A92C
.Lfe27:
	.size	 sub_81D7664,.Lfe27-sub_81D7664
	.align	2, 0
	.type	 sub_81D7700,function
	.thumb_func
sub_81D7700:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	add	r0, r0, r3
	mov	ip, r0
	ldrh	r0, [r0, #0xa]
	add	r0, r0, #0x1
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, ip
	strh	r0, [r1, #0xa]
	mov	r1, #0x7
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L167	@cond_branch
	ldrh	r1, [r3, #0x20]
	mov	r2, #0x20
	ldrsh	r0, [r3, r2]
	cmp	r0, #0x48
	beq	.L167	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x20]
	ldr	r2, .L178
	mov	r4, #0x2e
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	mov	r0, ip
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	mov	r0, ip
	mov	r4, #0x4
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
.L167:
	add	r0, r3, #0
	add	r0, r0, #0x2b
	ldrb	r3, [r0]
	cmp	r3, #0x1
	beq	.L171	@cond_branch
	cmp	r3, #0x1
	bgt	.L175	@cond_branch
	cmp	r3, #0
	beq	.L169	@cond_branch
	b	.L168
.L179:
	.align	2, 0
.L178:
	.word	gSprites
.L175:
	cmp	r3, #0x2
	beq	.L172	@cond_branch
	cmp	r3, #0x3
	beq	.L171	@cond_branch
	b	.L168
.L169:
	ldr	r2, .L180
	mov	r0, ip
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	mov	r0, ip
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
	mov	r0, ip
	mov	r4, #0x4
	ldrsh	r1, [r0, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	mov	r0, ip
	mov	r4, #0x4
	ldrsh	r1, [r0, r4]
	b	.L176
.L181:
	.align	2, 0
.L180:
	.word	gSprites
.L171:
	ldr	r2, .L182
	mov	r0, ip
	mov	r3, #0x2
	ldrsh	r1, [r0, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L182+0x4
	strh	r1, [r0, #0x24]
	mov	r4, ip
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r3, #0x0
	strh	r3, [r0, #0x26]
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	neg	r1, r1
	b	.L177
.L183:
	.align	2, 0
.L182:
	.word	gSprites
	.word	0xffff
.L172:
	ldr	r2, .L184
	mov	r3, ip
	mov	r4, #0x2
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L184+0x4
	strh	r1, [r0, #0x24]
	mov	r0, #0x2
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r3, #0x1
	strh	r3, [r0, #0x26]
	mov	r4, ip
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L184+0x8
.L177:
	strh	r1, [r0, #0x24]
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
.L176:
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
.L168:
	pop	{r4}
	pop	{r0}
	bx	r0
.L185:
	.align	2, 0
.L184:
	.word	gSprites
	.word	0xffff
	.word	0xfffe
.Lfe28:
	.size	 sub_81D7700,.Lfe28-sub_81D7700
	.align	2, 0
	.type	 sub_81D7860,function
	.thumb_func
sub_81D7860:
	push	{r4, lr}
	add	r1, r0, #0
	add	r3, r1, #0
	add	r3, r3, #0x2e
	ldrh	r2, [r1, #0x22]
	mov	r4, #0x22
	ldrsh	r0, [r1, r4]
	cmp	r0, #0xa0
	bgt	.L187	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x8
	strh	r0, [r1, #0x22]
	ldr	r2, .L188
	mov	r0, #0x2e
	ldrsh	r1, [r1, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r4, #0x2
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r0, #0x4
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
.L187:
	pop	{r4}
	pop	{r0}
	bx	r0
.L189:
	.align	2, 0
.L188:
	.word	gSprites
.Lfe29:
	.size	 sub_81D7860,.Lfe29-sub_81D7860
	.align	2, 0
	.type	 sub_81D78BC,function
	.thumb_func
sub_81D78BC:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r5, .L191
	add	r0, r5, #0
	mov	r1, #0x7e
	mov	r2, #0x60
	mov	r3, #0x1
	bl	CreateSprite
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L191+0x4
	lsl	r4, r0, #0x4
	add	r4, r4, r8
	lsl	r4, r4, #0x2
	add	r0, r6, #0
	add	r0, r0, #0x1c
	add	r0, r4, r0
	ldr	r1, .L191+0x8
	str	r1, [r0]
	add	r0, r6, #0
	add	r0, r0, #0x2e
	add	r4, r4, r0
	add	r0, r5, #0
	mov	r1, #0x9e
	mov	r2, #0x60
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4]
	add	r0, r5, #0
	mov	r1, #0x7e
	mov	r2, #0x70
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	orr	r0, r0, r1
	strh	r0, [r4]
	add	r0, r5, #0
	mov	r1, #0x9e
	mov	r2, #0x70
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x2]
	add	r0, r5, #0
	mov	r1, #0x7e
	mov	r2, #0x80
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	orr	r0, r0, r1
	strh	r0, [r4, #0x2]
	add	r0, r5, #0
	mov	r1, #0x9e
	mov	r2, #0x80
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x4]
	add	r0, r5, #0
	mov	r1, #0x5e
	mov	r2, #0x80
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	orr	r0, r0, r1
	strh	r0, [r4, #0x4]
	add	r0, r5, #0
	mov	r1, #0x7e
	mov	r2, #0x80
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x6]
	add	r0, r5, #0
	mov	r1, #0xae
	mov	r2, #0x80
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	orr	r0, r0, r1
	strh	r0, [r4, #0x6]
	ldr	r0, .L191+0xc
	mov	r1, #0xc6
	mov	r2, #0x84
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x8
	strh	r0, [r4, #0x8]
	ldr	r0, .L191+0x10
	mov	r1, #0xbe
	mov	r2, #0x78
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x8]
	orr	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrh	r1, [r4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x2
	bl	StartSpriteAnim
	ldrh	r1, [r4, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x3
	bl	StartSpriteAnim
	ldrb	r1, [r4, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x4
	bl	StartSpriteAnim
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	bl	StartSpriteAnim
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x6
	bl	StartSpriteAnim
	ldrh	r1, [r4, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x7
	bl	StartSpriteAnim
	ldrb	r1, [r4, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x8
	bl	StartSpriteAnim
	mov	r0, r8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L192:
	.align	2, 0
.L191:
	.word	sUnknown_0862A9E4
	.word	gSprites
	.word	sub_81D7A60
	.word	sUnknown_0862AA1C
	.word	sUnknown_0862AA3C
.Lfe30:
	.size	 sub_81D78BC,.Lfe30-sub_81D78BC
	.align	2, 0
	.type	 sub_81D7A60,function
	.thumb_func
sub_81D7A60:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r3, r4, #0
	add	r3, r3, #0x2e
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	mov	r1, #0xf
	and	r0, r0, r1
	strh	r0, [r3, #0xa]
	mov	r1, #0x7
	and	r1, r1, r0
	ldr	r7, .L205
	cmp	r1, #0
	bne	.L194	@cond_branch
	ldrh	r1, [r4, #0x20]
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x98
	beq	.L194	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r4, #0x2e]
	mov	r2, #0xff
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0x2]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0x4]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0x6]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r1, [r3, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	ldrh	r0, [r3, #0x8]
	and	r2, r2, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	ldrh	r1, [r0, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x20]
.L194:
	add	r6, r7, #0
	mov	r5, #0xff
	ldrb	r1, [r3, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x2b
	ldrb	r2, [r0]
	cmp	r2, #0x1
	beq	.L198	@cond_branch
	cmp	r2, #0x1
	bgt	.L202	@cond_branch
	cmp	r2, #0
	beq	.L196	@cond_branch
	b	.L195
.L206:
	.align	2, 0
.L205:
	.word	gSprites
.L202:
	cmp	r2, #0x2
	bne	.LCB3149
	b	.L199	@long jump
.LCB3149:
	cmp	r2, #0x3
	beq	.L198	@cond_branch
	b	.L195
.L196:
	strh	r2, [r4, #0x26]
	ldrh	r1, [r3]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x2]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x4]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x6]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x8]
	and	r1, r1, r5
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	b	.L203
.L198:
	mov	r2, #0x1
	strh	r2, [r4, #0x26]
	ldrh	r1, [r3]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3, #0x2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrb	r1, [r3, #0x8]
	b	.L204
.L199:
	strh	r2, [r4, #0x26]
	ldrh	r1, [r3]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x2]
	add	r1, r5, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r2, [r0, #0x26]
	ldrh	r1, [r3, #0x8]
	and	r1, r1, r5
.L204:
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r7
.L203:
	strh	r2, [r0, #0x26]
.L195:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 sub_81D7A60,.Lfe31-sub_81D7A60
	.align	2, 0
	.type	 sub_81D7D14,function
	.thumb_func
sub_81D7D14:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0x2e
	add	r0, r0, r2
	mov	ip, r0
	ldrh	r1, [r2, #0x22]
	mov	r3, #0x22
	ldrsh	r0, [r2, r3]
	cmp	r0, #0xa0
	bgt	.L208	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x8
	strh	r0, [r2, #0x22]
	ldr	r3, .L209
	ldrh	r1, [r2, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	ldrh	r0, [r2, #0x2e]
	mov	r2, #0xff
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r0, ip
	ldrh	r1, [r0, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r1, ip
	ldrh	r0, [r1, #0x2]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r0, ip
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r1, ip
	ldrh	r0, [r1, #0x4]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r0, ip
	ldrh	r1, [r0, #0x6]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r1, ip
	ldrh	r0, [r1, #0x6]
	add	r1, r2, #0
	and	r1, r1, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r0, ip
	ldrh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
	mov	r1, ip
	ldrh	r0, [r1, #0x8]
	and	r2, r2, r0
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x8
	strh	r1, [r0, #0x22]
.L208:
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	gSprites
.Lfe32:
	.size	 sub_81D7D14,.Lfe32-sub_81D7D14
	.align	2, 0
	.type	 sub_81D7E10,function
	.thumb_func
sub_81D7E10:
	push	{r4, lr}
	bl	ResetVramOamAndBgCntRegs
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L212
	mov	r0, #0x1
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r4, .L212+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x4
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L212+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L212+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	bl	ResetAllBgsCoordinates
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L213:
	.align	2, 0
.L212:
	.word	sUnknown_0862AA54
	.word	sRayScene
	.word	0x804
	.word	0x1004
.Lfe33:
	.size	 sub_81D7E10,.Lfe33-sub_81D7E10
	.align	2, 0
	.type	 sub_81D7E9C,function
	.thumb_func
sub_81D7E9C:
	push	{r4, lr}
	add	sp, sp, #-0x4
	bl	ResetTempTileDataBuffers
	ldr	r1, .L219
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L219+0x4
	str	r4, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L219+0x8
	str	r4, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
.L215:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L215	@cond_branch
	ldr	r0, .L219+0xc
	ldr	r4, .L219+0x10
	ldr	r1, [r4]
	add	r1, r1, #0x4
	bl	LZDecompressWram
	ldr	r0, .L219+0x14
	ldr	r1, [r4]
	ldr	r2, .L219+0x18
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L219+0x1c
	ldr	r1, [r4]
	ldr	r2, .L219+0x20
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L219+0x24
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	ldr	r0, .L219+0x28
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L219+0x2c
	bl	LoadCompressedSpritePalette
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gRaySceneClouds_Gfx
	.word	gRaySceneOvercast_Gfx
	.word	gRaySceneRayquaza_Gfx
	.word	gRaySceneClouds2_Tilemap
	.word	sRayScene
	.word	gRaySceneOvercast_Tilemap
	.word	0x804
	.word	gRaySceneRayquaza_Tilemap
	.word	0x1004
	.word	gRaySceneRayquaza_Pal
	.word	sUnknown_0862AA90
	.word	sUnknown_0862AA98
.Lfe34:
	.size	 sub_81D7E9C,.Lfe34-sub_81D7E9C
	.align	2, 0
	.type	 Task_RayTakesFlightAnim,function
	.thumb_func
Task_RayTakesFlightAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L222
	add	r6, r4, r5
	mov	r0, #0xe8
	lsl	r0, r0, #0x1
	bl	PlayNewMapMusic
	bl	sub_81D7E10
	bl	sub_81D7E9C
	mov	r1, #0x94
	lsl	r1, r1, #0x2
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L222+0x4
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldr	r0, .L222+0x8
	bl	SetVBlankCallback
	ldr	r0, .L222+0xc
	mov	r1, #0x0
	bl	CreateTask
	mov	r0, #0x0
	strh	r0, [r6]
	strh	r0, [r6, #0x2]
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L222+0x10
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gTasks+0x8
	.word	0x808
	.word	VBlankCB_RayquazaScene
	.word	sub_81D81A4
	.word	Task_HandleRayTakesFlight
.Lfe35:
	.size	 Task_RayTakesFlightAnim,.Lfe35-Task_RayTakesFlightAnim
	.align	2, 0
	.type	 Task_HandleRayTakesFlight,function
	.thumb_func
Task_HandleRayTakesFlight:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L241
	add	r4, r0, r1
	mov	r0, #0x0
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L229	@cond_branch
	cmp	r5, #0x1
	bgt	.L240	@cond_branch
	cmp	r5, #0
	beq	.L226	@cond_branch
	b	.L225
.L242:
	.align	2, 0
.L241:
	.word	gTasks+0x8
.L240:
	cmp	r5, #0x2
	beq	.L233	@cond_branch
	cmp	r5, #0x3
	bne	.LCB3845
	b	.L237	@long jump
.LCB3845:
	b	.L225
.L226:
	ldrh	r1, [r4, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x8
	bne	.L227	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	strh	r5, [r4, #0x4]
	mov	r0, #0x1e
	strh	r0, [r4, #0x6]
	strh	r5, [r4, #0x8]
	mov	r0, #0x7
	strh	r0, [r4, #0xa]
	strh	r5, [r4, #0x2]
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L225
.L227:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2]
	b	.L225
.L229:
	ldrh	r1, [r4, #0x6]
	ldrh	r3, [r4, #0x4]
	add	r0, r1, r3
	strh	r0, [r4, #0x4]
	ldrh	r2, [r4, #0xa]
	ldrh	r3, [r4, #0x8]
	add	r0, r2, r3
	strh	r0, [r4, #0x8]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L230	@cond_branch
	sub	r0, r1, #0x3
	strh	r0, [r4, #0x6]
.L230:
	lsl	r0, r2, #0x10
	cmp	r0, #0
	beq	.L231	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r4, #0xa]
.L231:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xff
	ble	.L232	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r4, #0x4]
	mov	r1, #0x0
	strh	r1, [r4, #0x6]
	mov	r0, #0xc
	strh	r0, [r4, #0xc]
	mov	r3, #0x1
	neg	r3, r3
	add	r0, r3, #0
	strh	r0, [r4, #0xe]
	strh	r1, [r4, #0x2]
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
.L232:
	mov	r1, #0xf0
	lsl	r1, r1, #0x7
	mov	r2, #0xc0
	lsl	r2, r2, #0x5
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x20
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp]
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	str	r0, [sp, #0x4]
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r3, #0x78
	bl	SetBgAffine
	b	.L225
.L233:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	mov	r1, #0xf0
	lsl	r1, r1, #0x7
	mov	r2, #0xc0
	lsl	r2, r2, #0x5
	ldrh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x12
	add	r0, r0, #0x20
	ldrh	r3, [r4, #0x8]
	add	r0, r0, r3
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp]
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	str	r0, [sp, #0x4]
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	str	r0, [sp, #0x8]
	mov	r5, #0x0
	str	r5, [sp, #0xc]
	mov	r0, #0x2
	mov	r3, #0x78
	bl	SetBgAffine
	ldrh	r0, [r4, #0xe]
	ldrh	r1, [r4, #0xc]
	add	r0, r0, r1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0xc
	beq	.L235	@cond_branch
	mov	r0, #0xc
	neg	r0, r0
	cmp	r1, r0
	bne	.L225	@cond_branch
.L235:
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0xe]
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	ldr	r0, .L243
	cmp	r1, r0
	ble	.L225	@cond_branch
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x6
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L225
.L244:
	.align	2, 0
.L243:
	.word	0x127
.L237:
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x4]
	mov	r1, #0xf0
	lsl	r1, r1, #0x7
	mov	r2, #0xc0
	lsl	r2, r2, #0x5
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x20
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp]
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	str	r0, [sp, #0x4]
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r3, #0x78
	bl	SetBgAffine
	add	r0, r6, #0
	bl	Task_RayTakesFlightEnd
.L225:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Task_HandleRayTakesFlight,.Lfe36-Task_HandleRayTakesFlight
	.align	2, 0
	.type	 Task_RayTakesFlightEnd,function
	.thumb_func
Task_RayTakesFlightEnd:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L247
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L246	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r0, .L247+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L247+0x8
	str	r0, [r1]
.L246:
	pop	{r4}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_SetNextAnim
.Lfe37:
	.size	 Task_RayTakesFlightEnd,.Lfe37-Task_RayTakesFlightEnd
	.align	2, 0
	.type	 sub_81D81A4,function
	.thumb_func
sub_81D81A4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L253
	add	r4, r0, r1
	ldrh	r1, [r4, #0x2]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L250	@cond_branch
	ldr	r0, .L253+0x4
	ldr	r3, .L253+0x8
	mov	r1, #0x0
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x1
	add	r1, r2, r3
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x12
	mov	r6, #0xf0
	lsl	r6, r6, #0xf
	add	r1, r1, r6
	asr	r1, r1, #0x10
	add	r3, r3, #0x1
	add	r2, r2, r3
	ldrb	r2, [r2, #0]
	lsl	r2, r2, #24
	asr	r2, r2, #24
	lsl	r2, r2, #0x12
	mov	r3, #0xa0
	lsl	r3, r3, #0xf
	add	r2, r2, r3
	asr	r2, r2, #0x10
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L253+0xc
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r1
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	strh	r0, [r3, #0x2e]
	ldrb	r2, [r3, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	mov	r2, #0x4
	orr	r0, r0, r2
	mov	r2, #0x3
	orr	r0, r0, r2
	strb	r0, [r3, #0x1]
	ldrb	r0, [r3, #0x5]
	and	r1, r1, r0
	mov	r0, #0x8
	orr	r1, r1, r0
	strb	r1, [r3, #0x5]
	add	r0, r3, #0
	bl	InitSpriteAffineAnim
	ldrh	r1, [r4]
	mov	r6, #0x0
	ldrsh	r0, [r4, r6]
	cmp	r0, #0x9
	bne	.L251	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	b	.L249
.L254:
	.align	2, 0
.L253:
	.word	gTasks+0x8
	.word	sUnknown_0862AAA0
	.word	sUnknown_0862AAB8
	.word	gSprites
.L251:
	add	r0, r1, #0x1
	strh	r0, [r4]
.L250:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
.L249:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 sub_81D81A4,.Lfe38-sub_81D81A4
	.align	2, 0
	.type	 sub_81D8260,function
	.thumb_func
sub_81D8260:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L256	@cond_branch
	strh	r0, [r2, #0x24]
	b	.L258
.L256:
	ldr	r1, .L259
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r3, [r2, #0x24]
	add	r0, r0, r3
	strh	r0, [r2, #0x24]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r1, [r2, #0x26]
	add	r0, r0, r1
.L258:
	strh	r0, [r2, #0x26]
	ldrh	r0, [r2, #0x30]
	add	r0, r0, #0x1
	mov	r1, #0xf
	and	r0, r0, r1
	strh	r0, [r2, #0x30]
	pop	{r0}
	bx	r0
.L260:
	.align	2, 0
.L259:
	.word	sUnknown_0862AAB8
.Lfe39:
	.size	 sub_81D8260,.Lfe39-sub_81D8260
	.align	2, 0
	.type	 sub_81D82B0,function
	.thumb_func
sub_81D82B0:
	push	{r4, lr}
	bl	ResetVramOamAndBgCntRegs
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L262
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r4, .L262+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x4
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L262+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L262+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L262+0x10
	add	r1, r1, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	bl	ResetAllBgsCoordinates
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x3
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L263:
	.align	2, 0
.L262:
	.word	sUnknown_0862AACC
	.word	sRayScene
	.word	0x804
	.word	0x1004
	.word	0x1804
.Lfe40:
	.size	 sub_81D82B0,.Lfe40-sub_81D82B0
	.align	2, 0
	.type	 sub_81D8358,function
	.thumb_func
sub_81D8358:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	bl	ResetTempTileDataBuffers
	ldr	r1, .L269
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L269+0x4
	str	r4, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	add	r7, sp, #0x8
.L265:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	bne	.L265	@cond_branch
	ldr	r0, .L269+0x8
	ldr	r5, .L269+0xc
	ldr	r1, [r5]
	add	r1, r1, #0x4
	bl	LZDecompressWram
	ldr	r0, .L269+0x10
	ldr	r1, [r5]
	ldr	r4, .L269+0x14
	add	r1, r1, r4
	bl	LZDecompressWram
	str	r6, [sp, #0x4]
	ldr	r1, [r5]
	ldr	r0, .L269+0x18
	add	r1, r1, r0
	ldr	r2, .L269+0x1c
	add	r0, sp, #0x4
	bl	CpuFastSet
	ldr	r1, [r5]
	add	r4, r1, r4
	ldr	r0, .L269+0x20
	add	r1, r1, r0
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r0, r4, #0
	bl	CpuFastSet
	str	r6, [sp, #0x8]
	ldr	r1, [r5]
	ldr	r0, .L269+0x24
	add	r1, r1, r0
	ldr	r2, .L269+0x28
	add	r0, r7, #0
	bl	CpuFastSet
	ldr	r0, .L269+0x2c
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	ldr	r0, .L269+0x30
	ldr	r1, .L269+0x34
	strh	r1, [r0]
	ldr	r0, .L269+0x38
	strh	r1, [r0]
	ldr	r0, .L269+0x3c
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L269+0x40
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L269+0x44
	bl	LoadCompressedSpritePalette
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L270:
	.align	2, 0
.L269:
	.word	gRaySceneRayquazaLight_Gfx
	.word	gRaySceneOvercast2_Gfx
	.word	gRaySceneRayquazaLight_Tilemap
	.word	sRayScene
	.word	gRaySceneOvercast2_Tilemap
	.word	0x1804
	.word	0x1004
	.word	0x1000200
	.word	0x804
	.word	0x904
	.word	0x10000d0
	.word	gRaySceneOvercast2_Pal
	.word	gPlttBufferUnfaded
	.word	0x7fff
	.word	gPlttBufferFaded
	.word	sUnknown_0862AAFC
	.word	sUnknown_0862AB04
	.word	sUnknown_0862AB0C
.Lfe41:
	.size	 sub_81D8358,.Lfe41-sub_81D8358
	.align	2, 0
	.type	 sub_81D844C,function
	.thumb_func
sub_81D844C:
	push	{r4, r5, lr}
	mov	r0, #0x6
	bl	GetGpuReg
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r1, r2, #0
	sub	r1, r1, #0x18
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x6f
	bhi	.L272	@cond_branch
	ldr	r0, .L282
	ldr	r0, [r0]
	ldr	r3, .L282+0x4
	add	r0, r0, r3
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	cmp	r1, r0
	bgt	.L272	@cond_branch
	ldr	r1, .L282+0x8
	ldr	r3, .L282+0xc
	b	.L280
.L283:
	.align	2, 0
.L282:
	.word	sRayScene
	.word	0x2008
	.word	0x4000052
	.word	0xd08
.L272:
	ldr	r1, .L284
	mov	r3, #0x80
	lsl	r3, r3, #0x5
.L280:
	add	r0, r3, #0
	strh	r0, [r1]
	cmp	r2, #0
	bne	.L274	@cond_branch
	ldr	r0, .L284+0x4
	ldr	r1, [r0]
	ldr	r2, .L284+0x8
	add	r3, r1, r2
	ldrh	r4, [r3]
	mov	r1, #0x0
	ldrsh	r2, [r3, r1]
	ldr	r1, .L284+0xc
	add	r5, r0, #0
	cmp	r2, r1
	bgt	.L275	@cond_branch
	cmp	r2, #0x27
	bgt	.L276	@cond_branch
	add	r0, r4, #0x4
	b	.L281
.L285:
	.align	2, 0
.L284:
	.word	0x4000052
	.word	sRayScene
	.word	0x2008
	.word	0x1fff
.L276:
	cmp	r2, #0x4f
	bgt	.L278	@cond_branch
	add	r0, r4, #0x2
	b	.L281
.L278:
	add	r0, r4, #0x1
.L281:
	strh	r0, [r3]
.L275:
	ldr	r1, [r5]
	ldr	r2, .L286
	add	r1, r1, r2
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
.L274:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	0x200a
.Lfe42:
	.size	 sub_81D844C,.Lfe42-sub_81D844C
	.align	2, 0
	.type	 Task_RayDescendsAnim,function
	.thumb_func
Task_RayDescendsAnim:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r6, .L289
	add	r5, r4, r6
	bl	sub_81D82B0
	bl	sub_81D8358
	ldr	r1, .L289+0x4
	mov	r0, #0x50
	bl	SetGpuRegBits
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	mov	r8, r0
	mov	r0, #0x52
	mov	r1, r8
	bl	SetGpuReg
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldr	r0, .L289+0x8
	bl	SetVBlankCallback
	ldr	r0, .L289+0xc
	ldr	r0, [r0]
	ldr	r1, .L289+0x10
	add	r2, r0, r1
	mov	r1, #0x0
	strh	r1, [r2]
	ldr	r2, .L289+0x14
	add	r0, r0, r2
	strh	r1, [r0]
	strh	r1, [r5]
	strh	r1, [r5, #0x2]
	strh	r1, [r5, #0x4]
	strh	r1, [r5, #0x6]
	mov	r0, r8
	strh	r0, [r5, #0x8]
	sub	r6, r6, #0x8
	add	r4, r4, r6
	ldr	r0, .L289+0x18
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L290:
	.align	2, 0
.L289:
	.word	gTasks+0x8
	.word	0x1e41
	.word	VBlankCB_RayquazaScene
	.word	sRayScene
	.word	0x2008
	.word	0x200a
	.word	Task_HandleRayDescends
.Lfe43:
	.size	 Task_RayDescendsAnim,.Lfe43-Task_RayDescendsAnim
	.align	2, 0
	.type	 Task_HandleRayDescends,function
	.thumb_func
Task_HandleRayDescends:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L309
	add	r5, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x4
	bhi	.L292	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L309+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L310:
	.align	2, 0
.L309:
	.word	gTasks+0x8
	.word	.L306
	.align	2, 0
	.align	2, 0
.L306:
	.word	.L293
	.word	.L296
	.word	.L300
	.word	.L303
	.word	.L305
.L293:
	ldrh	r1, [r5, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x8
	bne	.L301	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	mov	r4, #0x0
	str	r4, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	strh	r4, [r5, #0x2]
	b	.L308
.L296:
	ldr	r0, .L311
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L292	@cond_branch
	ldrh	r2, [r5, #0x2]
	mov	r3, #0x2
	ldrsh	r0, [r5, r3]
	cmp	r0, #0xa
	bne	.L298	@cond_branch
	strh	r1, [r5, #0x2]
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	ldr	r0, .L311+0x4
	bl	SetHBlankCallback
	mov	r0, #0x3
	bl	EnableInterrupts
	b	.L292
.L312:
	.align	2, 0
.L311:
	.word	gPaletteFade
	.word	sub_81D844C
.L298:
	add	r0, r2, #0x1
	strh	r0, [r5, #0x2]
	b	.L292
.L300:
	ldrh	r1, [r5, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x50
	bne	.L301	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2]
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	bl	sub_81D86CC
	b	.L292
.L301:
	add	r0, r1, #0x1
	strh	r0, [r5, #0x2]
	b	.L292
.L303:
	ldrh	r0, [r5, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2]
	lsl	r0, r0, #0x10
	mov	r1, #0xb8
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bne	.L292	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2]
.L308:
	ldrh	r0, [r5]
	add	r0, r0, #0x1
	strh	r0, [r5]
	b	.L292
.L305:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L313
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L313+0x4
	str	r1, [r0]
.L292:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gTasks
	.word	Task_RayDescendsEnd
.Lfe44:
	.size	 Task_HandleRayDescends,.Lfe44-Task_HandleRayDescends
	.align	2, 0
	.type	 Task_RayDescendsEnd,function
	.thumb_func
Task_RayDescendsEnd:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L317
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L316	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldr	r0, .L317+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L317+0x8
	str	r0, [r1]
.L316:
	pop	{r4}
	pop	{r0}
	bx	r0
.L318:
	.align	2, 0
.L317:
	.word	gPaletteFade
	.word	gTasks
	.word	Task_SetNextAnim
.Lfe45:
	.size	 Task_RayDescendsEnd,.Lfe45-Task_RayDescendsEnd
	.align	2, 0
	.type	 sub_81D86CC,function
	.thumb_func
sub_81D86CC:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r0, .L320
	mov	r1, #0xa0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CreateSprite
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r6, #0x4
	add	r5, r5, r6
	lsl	r5, r5, #0x2
	ldr	r4, .L320+0x4
	add	r0, r5, r4
	mov	r8, r0
	ldr	r0, .L320+0x8
	mov	r2, #0x30
	neg	r2, r2
	mov	r1, #0xb8
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r8
	strh	r0, [r1]
	add	r3, r4, #0
	sub	r3, r3, #0x2e
	sub	r4, r4, #0x12
	add	r4, r5, r4
	ldr	r0, .L320+0xc
	str	r0, [r4]
	add	r5, r5, r3
	ldrb	r0, [r5, #0x5]
	mov	r2, #0xc
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	mov	r4, #0x0
	ldrsh	r1, [r1, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x5]
	orr	r1, r1, r2
	strb	r1, [r0, #0x5]
	add	r0, r6, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L321:
	.align	2, 0
.L320:
	.word	sUnknown_0862AB14
	.word	gSprites+0x2e
	.word	sUnknown_0862AB2C
	.word	sub_81D874C
.Lfe46:
	.size	 sub_81D86CC,.Lfe46-sub_81D86CC
	.align	2, 0
	.type	 sub_81D874C,function
	.thumb_func
sub_81D874C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r5, #0
	add	r4, r4, #0x2e
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L323	@cond_branch
	mov	r0, #0xc
	strh	r0, [r4, #0x6]
	mov	r0, #0x8
	b	.L338
.L323:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L325	@cond_branch
	mov	r0, #0x9
	strh	r0, [r4, #0x6]
	mov	r0, #0x7
	b	.L338
.L325:
	mov	r0, #0x86
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L327	@cond_branch
	mov	r0, #0x8
	strh	r0, [r4, #0x6]
	mov	r0, #0x6
	b	.L338
.L327:
	mov	r0, #0x8c
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L329	@cond_branch
	mov	r0, #0x7
	strh	r0, [r4, #0x6]
	mov	r0, #0x5
	b	.L338
.L329:
	mov	r0, #0x92
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L331	@cond_branch
	mov	r0, #0x6
	strh	r0, [r4, #0x6]
	mov	r0, #0x4
	b	.L338
.L331:
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L333	@cond_branch
	mov	r0, #0x5
	strh	r0, [r4, #0x6]
	mov	r0, #0x3
	b	.L338
.L333:
	mov	r0, #0xa0
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L324	@cond_branch
	mov	r0, #0x4
	strh	r0, [r4, #0x6]
	mov	r0, #0x2
.L338:
	strh	r0, [r4, #0x8]
.L324:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	mov	r2, #0x6
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L336	@cond_branch
	ldrh	r0, [r5, #0x24]
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x24]
	ldr	r2, .L339
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x24]
.L336:
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	mov	r2, #0x8
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L337	@cond_branch
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	ldr	r2, .L339
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x26]
.L337:
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L340:
	.align	2, 0
.L339:
	.word	gSprites
.Lfe47:
	.size	 sub_81D874C,.Lfe47-sub_81D874C
	.align	2, 0
	.type	 sub_81D8828,function
	.thumb_func
sub_81D8828:
	push	{r4, lr}
	bl	ResetVramOamAndBgCntRegs
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L342
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r4, .L342+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x4
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L342+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L342+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L342+0x10
	add	r1, r1, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	bl	ResetAllBgsCoordinates
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x3
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0xc1
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	sUnknown_0862AB44
	.word	sRayScene
	.word	0x804
	.word	0x1004
	.word	0x1804
.Lfe48:
	.size	 sub_81D8828,.Lfe48-sub_81D8828
	.align	2, 0
	.type	 sub_81D88D0,function
	.thumb_func
sub_81D88D0:
	push	{r4, lr}
	add	sp, sp, #-0x4
	bl	ResetTempTileDataBuffers
	ldr	r1, .L349
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L349+0x4
	str	r4, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L349+0x8
	str	r4, [sp]
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
.L345:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L345	@cond_branch
	ldr	r0, .L349+0xc
	ldr	r4, .L349+0x10
	ldr	r1, [r4]
	add	r1, r1, #0x4
	bl	LZDecompressWram
	ldr	r0, .L349+0x14
	ldr	r1, [r4]
	ldr	r2, .L349+0x18
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L349+0x1c
	ldr	r1, [r4]
	ldr	r2, .L349+0x20
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L349+0x24
	ldr	r1, [r4]
	ldr	r2, .L349+0x28
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L349+0x2c
	mov	r1, #0x0
	mov	r2, #0x80
	bl	LoadCompressedPalette
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L350:
	.align	2, 0
.L349:
	.word	gRaySceneRayquazaChase_Gfx
	.word	gRaySceneChaseStreaks_Gfx
	.word	gRaySceneChaseBg_Gfx
	.word	gRayChaseRayquazaChase2_Tilemap
	.word	sRayScene
	.word	gRayChaseRayquazaChase_Tilemap
	.word	0x804
	.word	gRaySceneChaseStreaks_Tilemap
	.word	0x1004
	.word	gRaySceneChaseBg_Tilemap
	.word	0x1804
	.word	gRaySceneChase_Pal
.Lfe49:
	.size	 sub_81D88D0,.Lfe49-sub_81D88D0
	.align	2, 0
	.type	 Task_RayChargesAnim,function
	.thumb_func
Task_RayChargesAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L352
	add	r6, r4, r5
	bl	sub_81D8828
	bl	sub_81D88D0
	bl	sub_81D68C8
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldr	r0, .L352+0x4
	bl	SetVBlankCallback
	mov	r0, #0x0
	strh	r0, [r6]
	strh	r0, [r6, #0x2]
	ldr	r0, .L352+0x8
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x4]
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L352+0xc
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L353:
	.align	2, 0
.L352:
	.word	gTasks+0x8
	.word	VBlankCB_RayquazaScene
	.word	sub_81D8AD8
	.word	Task_HandleRayCharges
.Lfe50:
	.size	 Task_RayChargesAnim,.Lfe50-Task_RayChargesAnim
	.align	2, 0
	.type	 Task_HandleRayCharges,function
	.thumb_func
Task_HandleRayCharges:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L372
	add	r4, r0, r1
	bl	sub_81D8BB4
	ldrh	r1, [r4, #0x6]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L355	@cond_branch
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bgt	.L355	@cond_branch
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x59
	bgt	.L355	@cond_branch
	mov	r0, #0x67
	bl	PlaySE
.L355:
	ldrh	r0, [r4, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x6]
	mov	r0, #0x0
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L360	@cond_branch
	cmp	r5, #0x1
	bgt	.L369	@cond_branch
	cmp	r5, #0
	beq	.L357	@cond_branch
	b	.L356
.L373:
	.align	2, 0
.L372:
	.word	gTasks+0x8
.L369:
	cmp	r5, #0x2
	beq	.L363	@cond_branch
	cmp	r5, #0x3
	beq	.L366	@cond_branch
	b	.L356
.L357:
	ldrh	r1, [r4, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x8
	bne	.L364	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	strh	r5, [r4, #0x2]
	b	.L370
.L360:
	ldrh	r1, [r4, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x7f
	bne	.L364	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	ldr	r2, .L374
	mov	r0, #0x4
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L374+0x4
	b	.L371
.L375:
	.align	2, 0
.L374:
	.word	gTasks
	.word	sub_81D8B2C
.L363:
	ldrh	r1, [r4, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xc
	bne	.L364	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
.L370:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L356
.L364:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2]
	b	.L356
.L366:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L376
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L376+0x4
.L371:
	str	r1, [r0]
.L356:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L377:
	.align	2, 0
.L376:
	.word	gTasks
	.word	Task_RayChargesEnd
.Lfe51:
	.size	 Task_HandleRayCharges,.Lfe51-Task_HandleRayCharges
	.align	2, 0
	.type	 sub_81D8AD8,function
	.thumb_func
sub_81D8AD8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L380
	add	r5, r1, r0
	ldrh	r1, [r5, #0x1e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L379	@cond_branch
	bl	Random
	mov	r4, #0x7
	add	r1, r4, #0
	and	r1, r1, r0
	sub	r1, r1, #0x4
	lsl	r1, r1, #0x8
	mov	r0, #0x1
	mov	r2, #0x0
	bl	ChangeBgX
	bl	Random
	and	r4, r4, r0
	sub	r4, r4, #0x4
	lsl	r4, r4, #0x8
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0x0
	bl	ChangeBgY
.L379:
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1e]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L381:
	.align	2, 0
.L380:
	.word	gTasks+0x8
.Lfe52:
	.size	 sub_81D8AD8,.Lfe52-sub_81D8AD8
	.align	2, 0
	.type	 sub_81D8B2C,function
	.thumb_func
sub_81D8B2C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L388
	add	r4, r1, r0
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L383	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	mov	r0, #0xa
	strh	r0, [r4, #0x2]
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r1, #0
	b	.L387
.L389:
	.align	2, 0
.L388:
	.word	gTasks+0x8
.L383:
	cmp	r0, #0x1
	bne	.L384	@cond_branch
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x8
	mov	r0, #0x1
	mov	r2, #0x2
	bl	ChangeBgX
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x8
	mov	r0, #0x1
	mov	r2, #0x1
	bl	ChangeBgY
	ldrh	r0, [r4, #0x4]
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xa
	neg	r1, r1
	cmp	r0, r1
	bne	.L384	@cond_branch
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	neg	r0, r0
.L387:
	strh	r0, [r4, #0x4]
.L384:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 sub_81D8B2C,.Lfe53-sub_81D8B2C
	.align	2, 0
	.type	 sub_81D8BB4,function
	.thumb_func
sub_81D8BB4:
	push	{r4, lr}
	mov	r4, #0x80
	lsl	r4, r4, #0x3
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x2
	bl	ChangeBgX
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x1
	bl	ChangeBgY
	mov	r4, #0x80
	lsl	r4, r4, #0x4
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x2
	bl	ChangeBgX
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x1
	bl	ChangeBgY
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 sub_81D8BB4,.Lfe54-sub_81D8BB4
	.align	2, 0
	.type	 Task_RayChargesEnd,function
	.thumb_func
Task_RayChargesEnd:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r5, r1, #0x3
	ldr	r6, .L393
	add	r4, r5, r6
	bl	sub_81D8BB4
	ldr	r0, .L393+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L392	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_81D6904
	ldrb	r0, [r4, #0x4]
	bl	DestroyTask
	add	r0, r6, #0
	sub	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r1, .L393+0x8
	str	r1, [r0]
.L392:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L394:
	.align	2, 0
.L393:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	Task_SetNextAnim
.Lfe55:
	.size	 Task_RayChargesEnd,.Lfe55-Task_RayChargesEnd
	.align	2, 0
	.type	 sub_81D8C38,function
	.thumb_func
sub_81D8C38:
	push	{r4, lr}
	bl	ResetVramOamAndBgCntRegs
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L396
	mov	r0, #0x1
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r4, .L396+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x4
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L396+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L396+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	bl	ResetAllBgsCoordinates
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0xc1
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L397:
	.align	2, 0
.L396:
	.word	sUnknown_0862AD08
	.word	sRayScene
	.word	0x804
	.word	0x1004
.Lfe56:
	.size	 sub_81D8C38,.Lfe56-sub_81D8C38
	.align	2, 0
	.type	 sub_81D8CC4,function
	.thumb_func
sub_81D8CC4:
	push	{r4, lr}
	add	sp, sp, #-0x4
	bl	ResetTempTileDataBuffers
	ldr	r1, .L403
	mov	r4, #0x0
	str	r4, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L403+0x4
	str	r4, [sp]
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
.L399:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L399	@cond_branch
	ldr	r0, .L403+0x8
	ldr	r4, .L403+0xc
	ldr	r1, [r4]
	ldr	r2, .L403+0x10
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L403+0x14
	ldr	r1, [r4]
	add	r1, r1, #0x4
	bl	LZDecompressWram
	ldr	r0, .L403+0x18
	ldr	r1, [r4]
	ldr	r2, .L403+0x1c
	add	r1, r1, r2
	bl	LZDecompressWram
	ldr	r0, .L403+0x20
	mov	r1, #0x0
	mov	r2, #0x60
	bl	LoadCompressedPalette
	ldr	r0, .L403+0x24
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L403+0x28
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L403+0x2c
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L403+0x30
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L403+0x34
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L403+0x38
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L403+0x3c
	bl	LoadCompressedSpritePalette
	ldr	r0, .L403+0x40
	bl	LoadCompressedSpritePalette
	ldr	r0, .L403+0x44
	bl	LoadCompressedSpritePalette
	ldr	r0, .L403+0x48
	bl	LoadCompressedSpritePalette
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	gRaySceneHushRing_Gfx
	.word	gRaySceneHushBg_Gfx
	.word	gRaySceneHushRing_Tilemap
	.word	sRayScene
	.word	0x804
	.word	gRaySceneHushBg_Tilemap
	.word	gRaySceneHushRing_Map
	.word	0x1004
	.word	gRaySceneHushBg_Pal
	.word	sUnknown_0862AC28
	.word	sUnknown_0862AC30
	.word	sUnknown_0862AC38
	.word	sUnknown_0862AC40
	.word	sUnknown_0862AC48
	.word	sUnknown_0862AC50
	.word	sUnknown_0862AC58
	.word	sUnknown_0862AC60
	.word	sUnknown_0862AC68
	.word	sUnknown_0862AC70
.Lfe57:
	.size	 sub_81D8CC4,.Lfe57-sub_81D8CC4
	.align	2, 0
	.type	 Task_RayChasesAwayAnim,function
	.thumb_func
Task_RayChasesAwayAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L406
	add	r6, r4, r5
	bl	sub_81D8C38
	bl	sub_81D8CC4
	bl	sub_81D68C8
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	ClearGpuRegBits
	ldr	r1, .L406+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L406+0x8
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldr	r0, .L406+0xc
	bl	SetVBlankCallback
	mov	r0, #0x0
	strh	r0, [r6]
	strh	r0, [r6, #0x2]
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L406+0x10
	str	r0, [r4]
	ldr	r0, .L406+0x14
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x4]
	mov	r0, #0x4
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x0
	strh	r2, [r0, #0x8]
	mov	r0, #0x4
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r2, [r0, #0xa]
	mov	r0, #0x4
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r2, [r0, #0xc]
	mov	r0, #0x4
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x1
	strh	r2, [r0, #0xe]
	mov	r0, #0x4
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r2, [r0, #0x10]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L407:
	.align	2, 0
.L406:
	.word	gTasks+0x8
	.word	0x241
	.word	0xe09
	.word	VBlankCB_RayquazaScene
	.word	Task_HandleRayChasesAway
	.word	sub_81D8FB0
.Lfe58:
	.size	 Task_RayChasesAwayAnim,.Lfe58-Task_RayChasesAwayAnim
	.align	2, 0
	.type	 Task_HandleRayChasesAway,function
	.thumb_func
Task_HandleRayChasesAway:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r7, r0, #0x3
	ldr	r0, .L427
	mov	r8, r0
	add	r4, r7, r0
	mov	r1, #0x0
	ldrsh	r5, [r4, r1]
	cmp	r5, #0x1
	beq	.L413	@cond_branch
	cmp	r5, #0x1
	bgt	.L424	@cond_branch
	cmp	r5, #0
	beq	.L410	@cond_branch
	b	.L409
.L428:
	.align	2, 0
.L427:
	.word	gTasks+0x8
.L424:
	cmp	r5, #0x2
	beq	.L417	@cond_branch
	cmp	r5, #0x3
	beq	.L421	@cond_branch
	b	.L409
.L410:
	ldrh	r1, [r4, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x8
	bne	.L415	@cond_branch
	add	r0, r6, #0
	bl	sub_81D90A8
	mov	r0, #0x1
	neg	r0, r0
	str	r5, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	strh	r5, [r4, #0x2]
	b	.L425
.L413:
	ldr	r2, .L429
	mov	r0, #0xa
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L429+0x4
	cmp	r1, r0
	bne	.L409	@cond_branch
	ldrh	r1, [r4, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x40
	bne	.L415	@cond_branch
	add	r0, r6, #0
	bl	sub_81D94D4
	add	r0, r6, #0
	bl	sub_81D93D8
	b	.L426
.L430:
	.align	2, 0
.L429:
	.word	gSprites
	.word	sub_81D97E0
.L415:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2]
	b	.L409
.L417:
	ldrh	r2, [r4, #0x2]
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	mov	r0, #0xe0
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L418	@cond_branch
.L426:
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
.L425:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L409
.L418:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x2]
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	mov	r1, #0x90
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	bne	.L409	@cond_branch
	ldr	r0, .L431
	ldr	r1, .L431+0x4
	str	r1, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	sub_80A2C44
	ldr	r0, .L431+0x8
	str	r4, [sp]
	str	r4, [sp, #0x4]
	mov	r1, #0x1
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	sub_80A2C44
	b	.L409
.L432:
	.align	2, 0
.L431:
	.word	0xfffe
	.word	0xffff
	.word	-0x10000
.L421:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x4
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, r8
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L433
	str	r1, [r0]
.L409:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L434:
	.align	2, 0
.L433:
	.word	Task_RayChasesAwayEnd
.Lfe59:
	.size	 Task_HandleRayChasesAway,.Lfe59-Task_HandleRayChasesAway
	.align	2, 0
	.type	 sub_81D8FB0,function
	.thumb_func
sub_81D8FB0:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L441
	add	r4, r1, r0
	ldrh	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L436	@cond_branch
	ldrh	r1, [r4, #0x2]
	add	r1, r1, #0xe
	lsl	r1, r1, #0x8
	mov	r2, #0xf8
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	and	r1, r1, r0
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x9
	mov	r2, #0xf
	and	r0, r0, r2
	orr	r1, r1, r0
	mov	r0, #0x52
	bl	SetGpuReg
	ldrh	r1, [r4, #0x2]
	ldrh	r0, [r4, #0x6]
	sub	r1, r1, r0
	strh	r1, [r4, #0x2]
	ldrh	r0, [r4, #0x8]
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r4, #0x4]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, #0x3
	neg	r0, r0
	cmp	r1, r0
	beq	.L438	@cond_branch
	cmp	r1, #0
	bne	.L437	@cond_branch
.L438:
	mov	r1, #0x6
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x6]
.L437:
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	beq	.L440	@cond_branch
	cmp	r0, #0
	bne	.L436	@cond_branch
.L440:
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x8]
.L436:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L442:
	.align	2, 0
.L441:
	.word	gTasks+0x8
.Lfe60:
	.size	 sub_81D8FB0,.Lfe60-sub_81D8FB0
	.align	2, 0
	.type	 Task_RayChasesAwayEnd,function
	.thumb_func
Task_RayChasesAwayEnd:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r6, r1, #0x3
	ldr	r7, .L448
	add	r4, r6, r7
	ldr	r0, .L448+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L444	@cond_branch
	bl	StopMapMusic
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L445	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_81D6904
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	ldrb	r0, [r4, #0x4]
	bl	DestroyTask
.L445:
	ldrh	r1, [r4, #0x2]
	mov	r2, #0x2
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x20
	bne	.L446	@cond_branch
	strh	r5, [r4, #0x2]
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L448+0x8
	str	r1, [r0]
	b	.L444
.L449:
	.align	2, 0
.L448:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	Task_SetNextAnim
.L446:
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2]
.L444:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe61:
	.size	 Task_RayChasesAwayEnd,.Lfe61-Task_RayChasesAwayEnd
	.align	2, 0
	.type	 sub_81D90A8,function
	.thumb_func
sub_81D90A8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L451
	add	r4, r4, r0
	ldr	r0, .L451+0x4
	mov	r1, #0x40
	mov	r2, #0x78
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x6]
	mov	r0, #0x6
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L451+0x8
	mov	sl, r1
	add	r7, r0, r1
	ldr	r0, .L451+0xc
	mov	r1, #0x10
	mov	r2, #0x82
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	mov	r2, #0x2e
	neg	r2, r2
	add	r2, r2, sl
	mov	r8, r2
	mov	r1, #0x6
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x5]
	mov	r6, #0xd
	neg	r6, r6
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r2, #0x4
	mov	r9, r2
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r1, #0x0
	ldrsh	r0, [r7, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x5]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r5, .L451+0x10
	add	r0, r5, #0
	mov	r1, #0xa0
	mov	r2, #0x80
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x8]
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, sl
	add	r7, r0, r1
	add	r0, r5, #0
	mov	r1, #0xc0
	mov	r2, #0x80
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	add	r0, r5, #0
	mov	r1, #0xe0
	mov	r2, #0x80
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x2]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x5]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r1, #0x0
	ldrsh	r0, [r7, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x5]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r1, #0x2
	ldrsh	r0, [r7, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x5]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r0, #0x0
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r2, #0x2
	ldrsh	r1, [r7, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mov	r1, #0x2
	bl	StartSpriteAnim
	ldr	r0, .L451+0x14
	mov	r2, #0x41
	neg	r2, r2
	mov	r1, #0x78
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xa]
	mov	r0, #0xa
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, sl
	add	r7, r0, r1
	ldr	r0, .L451+0x18
	mov	r2, #0x71
	neg	r2, r2
	mov	r1, #0x78
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrb	r2, [r1, #0x5]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r2, r9
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r0, #0x0
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrb	r1, [r0, #0x5]
	and	r6, r6, r1
	orr	r6, r6, r2
	strb	r6, [r0, #0x5]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	gTasks+0x8
	.word	sUnknown_0862AC78
	.word	gSprites+0x2e
	.word	sUnknown_0862AC90
	.word	sUnknown_0862ACA8
	.word	sUnknown_0862ACC0
	.word	sUnknown_0862ACD8
.Lfe62:
	.size	 sub_81D90A8,.Lfe62-sub_81D90A8
	.align	2, 0
	.type	 sub_81D9274,function
	.thumb_func
sub_81D9274:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	ldr	r0, .L454
	add	r2, r2, r0
	ldr	r3, .L454+0x4
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0x1c
	add	r1, r1, r3
	mov	r8, r1
	add	r0, r0, r8
	ldr	r6, .L454+0x8
	str	r6, [r0]
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r4, #0x0
	strh	r4, [r0, #0x36]
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x38]
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r5, #0x4
	strh	r5, [r0, #0x3a]
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x3c]
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	str	r6, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x36]
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r4, [r0, #0x38]
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r5, [r0, #0x3a]
	mov	r0, #0x8
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L455:
	.align	2, 0
.L454:
	.word	gTasks+0x8
	.word	gSprites
	.word	sub_81D9338
.Lfe63:
	.size	 sub_81D9274,.Lfe63-sub_81D9274
	.align	2, 0
	.type	 sub_81D9338,function
	.thumb_func
sub_81D9338:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x36]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L457	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L458	@cond_branch
	ldrh	r0, [r4, #0x20]
	ldrh	r3, [r4, #0x3a]
	sub	r0, r0, r3
	strh	r0, [r4, #0x20]
	ldr	r2, .L462
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, r3
	b	.L461
.L463:
	.align	2, 0
.L462:
	.word	gSprites
.L458:
	ldrh	r2, [r4, #0x3a]
	ldrh	r1, [r4, #0x20]
	add	r0, r2, r1
	strh	r0, [r4, #0x20]
	ldr	r3, .L464
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x20]
	add	r2, r2, r1
	strh	r2, [r0, #0x20]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r4, #0x3a]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
.L461:
	strh	r1, [r0, #0x20]
	ldrh	r1, [r4, #0x38]
	add	r1, r1, #0x1
	mov	r2, #0x0
	strh	r1, [r4, #0x38]
	ldrh	r0, [r4, #0x3a]
	sub	r0, r0, r1
	strh	r0, [r4, #0x3a]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x3
	bne	.L457	@cond_branch
	strh	r2, [r4, #0x36]
	strh	r2, [r4, #0x38]
	strh	r2, [r4, #0x3a]
	ldr	r0, .L464+0x4
	str	r0, [r4, #0x1c]
	b	.L456
.L465:
	.align	2, 0
.L464:
	.word	gSprites
	.word	SpriteCallbackDummy
.L457:
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
.L456:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 sub_81D9338,.Lfe64-sub_81D9338
	.align	2, 0
	.type	 sub_81D93D8,function
	.thumb_func
sub_81D93D8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	ldr	r0, .L467
	add	r2, r2, r0
	ldr	r3, .L467+0x4
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L467+0x8
	str	r1, [r0]
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x1
	bl	StartSpriteAnim
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	gTasks+0x8
	.word	gSprites
	.word	sub_81D9420
.Lfe65:
	.size	 sub_81D93D8,.Lfe65-sub_81D93D8
	.align	2, 0
	.type	 sub_81D9420,function
	.thumb_func
sub_81D9420:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L475	@cond_branch
	cmp	r0, #0x1
	bgt	.L479	@cond_branch
	cmp	r0, #0
	beq	.L472	@cond_branch
	b	.L470
.L479:
	cmp	r0, #0x2
	beq	.L472	@cond_branch
	cmp	r0, #0x3
	beq	.L475	@cond_branch
	b	.L470
.L472:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1a
	mov	r1, #0xc
	bl	__umodsi3
	lsl	r0, r0, #0x18
	ldr	r2, .L480
	cmp	r0, #0
	bne	.L473	@cond_branch
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x20]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x2
	strh	r1, [r0, #0x20]
.L473:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x26]
	b	.L470
.L481:
	.align	2, 0
.L480:
	.word	gSprites
.L475:
	ldr	r2, .L482
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L482+0x4
	strh	r1, [r0, #0x26]
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1a
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L470	@cond_branch
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x22]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x22]
.L470:
	pop	{r4}
	pop	{r0}
	bx	r0
.L483:
	.align	2, 0
.L482:
	.word	gSprites
	.word	0xfffe
.Lfe66:
	.size	 sub_81D9420,.Lfe66-sub_81D9420
	.align	2, 0
	.type	 sub_81D94D4,function
	.thumb_func
sub_81D94D4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L485
	add	r1, r1, r0
	mov	r0, #0x8
	ldrsh	r1, [r1, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L485+0x4
	add	r4, r0, r2
	sub	r2, r2, #0x12
	add	r0, r0, r2
	ldr	r3, .L485+0x8
	str	r3, [r0]
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	str	r3, [r0]
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	str	r3, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L486:
	.align	2, 0
.L485:
	.word	gTasks+0x8
	.word	gSprites+0x2e
	.word	sub_81D9528
.Lfe67:
	.size	 sub_81D94D4,.Lfe67-sub_81D94D4
	.align	2, 0
	.type	 sub_81D9528,function
	.thumb_func
sub_81D9528:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	ldrh	r1, [r7, #0x36]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L488	@cond_branch
	ldrh	r1, [r7, #0x24]
	mov	r2, #0x24
	ldrsh	r0, [r7, r2]
	cmp	r0, #0x1
	bne	.L489	@cond_branch
	ldr	r0, .L497
	b	.L496
.L498:
	.align	2, 0
.L497:
	.word	0xffff
.L489:
	mov	r0, #0x1
.L496:
	strh	r0, [r7, #0x24]
.L488:
	mov	r1, #0x38
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x80
	bne	.L491	@cond_branch
	ldr	r2, .L499
	mov	r8, r2
	mov	r0, r8
	mov	r1, #0x98
	mov	r2, #0x84
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x3c]
	ldr	r5, .L499+0x4
	mov	r1, #0x3c
	ldrsh	r0, [r7, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	mov	r6, #0x4
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
	mov	r0, r8
	mov	r1, #0xe0
	mov	r2, #0x84
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7, #0x3c]
	mov	r2, #0x3c
	ldrsh	r1, [r7, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r0, #0x5]
	and	r4, r4, r1
	orr	r4, r4, r6
	strb	r4, [r0, #0x5]
	mov	r0, #0x3c
	ldrsh	r1, [r7, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrh	r0, [r7, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x38]
.L491:
	ldrh	r1, [r7, #0x38]
	mov	r2, #0x38
	ldrsh	r0, [r7, r2]
	cmp	r0, #0x7f
	ble	.L492	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x20
	beq	.L494	@cond_branch
	ldrh	r0, [r7, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r7, #0x26]
	b	.L494
.L500:
	.align	2, 0
.L499:
	.word	sUnknown_0862ACF0
	.word	gSprites
.L492:
	add	r0, r1, #0x1
	strh	r0, [r7, #0x38]
.L494:
	ldrh	r0, [r7, #0x36]
	mov	r1, #0x3f
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L495	@cond_branch
	mov	r0, #0xa5
	bl	PlaySE
.L495:
	ldrh	r0, [r7, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x36]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe68:
	.size	 sub_81D9528,.Lfe68-sub_81D9528
	.align	2, 0
	.type	 sub_81D961C,function
	.thumb_func
sub_81D961C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x40
	bgt	.L502	@cond_branch
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x26]
	ldr	r5, .L522
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x26]
	add	r1, r1, #0x2
	strh	r1, [r0, #0x26]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x40
	beq	.LCB7189
	b	.L504	@long jump
.LCB7189:
	mov	r3, #0x30
	neg	r3, r3
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_81D9868
	mov	r2, #0x5
	strh	r2, [r4, #0x36]
	ldr	r0, .L522+0x4
	strh	r0, [r4, #0x38]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x3
	strh	r1, [r0, #0x36]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x38]
	b	.L504
.L523:
	.align	2, 0
.L522:
	.word	gSprites
	.word	0xffff
.L502:
	cmp	r1, #0x6f
	bgt	.L505	@cond_branch
	add	r0, r4, #0
	bl	sub_81D97E0
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L506	@cond_branch
	mov	r0, #0x68
	bl	PlaySE
.L506:
	mov	r0, #0x36
	ldrsh	r1, [r4, r0]
	mov	r0, #0x3
	neg	r0, r0
	cmp	r1, r0
	bne	.L504	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, #0x30
	mov	r3, #0x10
	bl	sub_81D9868
	b	.L504
.L505:
	cmp	r1, #0x70
	bne	.L509	@cond_branch
	ldr	r2, .L524
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x7
	strh	r1, [r0, #0x36]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strh	r1, [r0, #0x38]
	b	.L521
.L525:
	.align	2, 0
.L524:
	.word	gSprites
.L509:
	ldr	r0, .L526
	cmp	r1, r0
	bgt	.L511	@cond_branch
.L521:
	add	r0, r4, #0
	bl	sub_81D97E0
	b	.L504
.L527:
	.align	2, 0
.L526:
	.word	0x147
.L511:
	mov	r0, #0xa4
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L513	@cond_branch
	add	r0, r4, #0
	bl	sub_81D97E0
	add	r0, r4, #0
	mov	r1, #0x3
	mov	r2, #0x30
	mov	r3, #0x10
	bl	sub_81D9868
	mov	r3, #0x1
	strh	r3, [r4, #0x24]
	ldr	r2, .L528
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	mov	r0, #0xcb
	lsl	r0, r0, #0x1
	mov	r1, #0x0
	bl	PlayCry1
	ldr	r0, .L528+0x4
	mov	r1, #0x0
	bl	CreateTask
	b	.L504
.L529:
	.align	2, 0
.L528:
	.word	gSprites
	.word	sub_81D98B4
.L513:
	mov	r0, #0xb0
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L517	@cond_branch
	add	r0, r0, #0x18
	cmp	r1, r0
	bne	.L504	@cond_branch
	mov	r3, #0x0
	strh	r3, [r4, #0x24]
	ldr	r2, .L530
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x24]
	add	r0, r4, #0
	bl	sub_81D97E0
	add	r0, r4, #0
	mov	r1, #0x2
	mov	r2, #0x30
	mov	r3, #0x10
	bl	sub_81D9868
	ldr	r0, .L530+0x4
	str	r0, [r4, #0x1c]
	b	.L501
.L531:
	.align	2, 0
.L530:
	.word	gSprites
	.word	sub_81D97E0
.L517:
	ldr	r0, .L532
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_81D9274
.L504:
	ldrh	r2, [r4, #0x3c]
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	mov	r0, #0xa4
	lsl	r0, r0, #0x1
	cmp	r1, r0
	ble	.L520	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L520	@cond_branch
	mov	r1, #0x24
	ldrsh	r2, [r4, r1]
	neg	r2, r2
	strh	r2, [r4, #0x24]
	ldr	r3, .L532+0x4
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r2, [r0, #0x24]
.L520:
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
.L501:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L533:
	.align	2, 0
.L532:
	.word	Task_HandleRayChasesAway
	.word	gSprites
.Lfe69:
	.size	 sub_81D961C,.Lfe69-sub_81D961C
	.align	2, 0
	.type	 sub_81D97E0,function
	.thumb_func
sub_81D97E0:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L541
	add	r4, r0, r5
	ldrh	r1, [r3, #0x3a]
	ldrh	r0, [r4, #0x36]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L535	@cond_branch
	ldrh	r2, [r3, #0x36]
	ldrh	r1, [r3, #0x26]
	add	r0, r2, r1
	strh	r0, [r3, #0x26]
	mov	r7, #0x2e
	ldrsh	r1, [r3, r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x26]
	add	r2, r2, r1
	strh	r2, [r0, #0x26]
	ldrh	r0, [r3, #0x38]
	ldrh	r2, [r3, #0x36]
	add	r0, r0, r2
	strh	r0, [r3, #0x36]
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x10
	ldrh	r6, [r4, #0x38]
	mov	r7, #0x38
	ldrsh	r2, [r4, r7]
	cmp	r5, r2
	bge	.L537	@cond_branch
	mov	r0, #0x36
	ldrsh	r1, [r3, r0]
	add	r0, r2, #0
	cmn	r1, r0
	bgt	.L535	@cond_branch
.L537:
	cmp	r5, r2
	ble	.L538	@cond_branch
	strh	r6, [r3, #0x36]
	b	.L539
.L542:
	.align	2, 0
.L541:
	.word	gSprites
.L538:
	mov	r0, #0x36
	ldrsh	r1, [r3, r0]
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	cmn	r1, r0
	bge	.L539	@cond_branch
	neg	r0, r6
	strh	r0, [r3, #0x36]
.L539:
	mov	r7, #0x38
	ldrsh	r0, [r3, r7]
	neg	r0, r0
	strh	r0, [r3, #0x38]
.L535:
	ldrh	r0, [r3, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x3a]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 sub_81D97E0,.Lfe70-sub_81D97E0
	.align	2, 0
	.type	 sub_81D9868,function
	.thumb_func
sub_81D9868:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r4, #0x2e
	ldrsh	r1, [r0, r4]
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	ldr	r1, .L544
	add	r4, r4, r1
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldrh	r1, [r0, #0x20]
	add	r2, r2, r1
	strh	r2, [r4, #0x20]
	lsl	r3, r3, #0x10
	asr	r3, r3, #0x10
	ldrh	r1, [r0, #0x22]
	add	r3, r3, r1
	strh	r3, [r4, #0x22]
	ldrh	r1, [r0, #0x24]
	strh	r1, [r4, #0x24]
	ldrh	r1, [r0, #0x26]
	strh	r1, [r4, #0x26]
	add	r1, r5, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	add	r1, r5, #0
	bl	StartSpriteAnim
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L545:
	.align	2, 0
.L544:
	.word	gSprites
.Lfe71:
	.size	 sub_81D9868,.Lfe71-sub_81D9868
	.align	2, 0
	.type	 sub_81D98B4,function
	.thumb_func
sub_81D98B4:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L560
	add	r4, r0, r1
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L549	@cond_branch
	cmp	r1, #0x1
	bgt	.L558	@cond_branch
	cmp	r1, #0
	beq	.L548	@cond_branch
	b	.L547
.L561:
	.align	2, 0
.L560:
	.word	gTasks+0x8
.L558:
	cmp	r1, #0x2
	beq	.L555	@cond_branch
	b	.L547
.L548:
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	mov	r0, #0x40
	str	r0, [sp]
	add	r0, r0, #0xc0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r1, [sp, #0xc]
	mov	r0, #0x2
	add	r1, r2, #0
	mov	r3, #0x78
	bl	SetBgAffine
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
	mov	r0, #0x10
	strh	r0, [r4, #0x8]
	b	.L559
.L549:
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8
	bne	.L550	@cond_branch
	mov	r0, #0x12
	bl	PlaySE
.L550:
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x2
	bne	.L551	@cond_branch
.L559:
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L547
.L551:
	ldrh	r5, [r4, #0x8]
	ldrh	r1, [r4, #0x2]
	add	r0, r5, r1
	strh	r0, [r4, #0x2]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	mov	r3, #0x6
	ldrsh	r0, [r4, r3]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L553	@cond_branch
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	beq	.L553	@cond_branch
	sub	r0, r5, #0x2
	strh	r0, [r4, #0x8]
.L553:
	ldrh	r0, [r4, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x6]
	mov	r2, #0x80
	lsl	r2, r2, #0x7
	mov	r0, #0x40
	str	r0, [sp]
	ldrh	r0, [r4, #0x2]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r3, #0
	sub	r0, r1, r0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	str	r0, [sp, #0x4]
	ldrh	r0, [r4, #0x2]
	sub	r1, r1, r0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	str	r1, [sp, #0x8]
	mov	r5, #0x0
	str	r5, [sp, #0xc]
	mov	r0, #0x2
	add	r1, r2, #0
	mov	r3, #0x78
	bl	SetBgAffine
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xff
	ble	.L547	@cond_branch
	strh	r5, [r4, #0x2]
	strh	r5, [r4, #0x6]
	strh	r5, [r4, #0xa]
	mov	r0, #0x10
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0x4]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x4]
	b	.L547
.L555:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	ClearGpuRegBits
	add	r0, r5, #0
	bl	DestroyTask
.L547:
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 sub_81D98B4,.Lfe72-sub_81D98B4
.text
	.align	2, 0

