@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_0203A0F8
	.section ewram_data,"aw"
	.align	1, 0
	.type	 gUnknown_0203A0F8,object
	.size	 gUnknown_0203A0F8,8
gUnknown_0203A0F8:
	.short	0x0
	.space	6
	.globl	gPowderParticlesAnimCmds
	.section .rodata
	.align	2, 0
	.type	 gPowderParticlesAnimCmds,object
gPowderParticlesAnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x6
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xa
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0xe
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gPowderParticlesAnimCmds,36
	.globl	gPowderParticlesAnimTable
	.align	2, 0
	.type	 gPowderParticlesAnimTable,object
gPowderParticlesAnimTable:
	.word	gPowderParticlesAnimCmds
	.size	 gPowderParticlesAnimTable,4
	.globl	gSleepPowderParticleSpriteTemplate
	.align	2, 0
	.type	 gSleepPowderParticleSpriteTemplate,object
	.size	 gSleepPowderParticleSpriteTemplate,24
gSleepPowderParticleSpriteTemplate:
	.short	0x2753
	.short	0x2753
	.word	gOamData_AffineOff_ObjNormal_8x16
	.word	gPowderParticlesAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.globl	gStunSporeParticleSpriteTemplate
	.align	2, 0
	.type	 gStunSporeParticleSpriteTemplate,object
	.size	 gStunSporeParticleSpriteTemplate,24
gStunSporeParticleSpriteTemplate:
	.short	0x2754
	.short	0x2754
	.word	gOamData_AffineOff_ObjNormal_8x16
	.word	gPowderParticlesAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.globl	gPoisonPowderParticleSpriteTemplate
	.align	2, 0
	.type	 gPoisonPowderParticleSpriteTemplate,object
	.size	 gPoisonPowderParticleSpriteTemplate,24
gPoisonPowderParticleSpriteTemplate:
	.short	0x2751
	.short	0x2751
	.word	gOamData_AffineOff_ObjNormal_8x16
	.word	gPowderParticlesAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMovePowderParticle
	.globl	gSolarbeamBigOrbAnimCmds1
	.align	2, 0
	.type	 gSolarbeamBigOrbAnimCmds1,object
gSolarbeamBigOrbAnimCmds1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSolarbeamBigOrbAnimCmds1,8
	.globl	gSolarbeamBigOrbAnimCmds2
	.align	2, 0
	.type	 gSolarbeamBigOrbAnimCmds2,object
gSolarbeamBigOrbAnimCmds2:
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSolarbeamBigOrbAnimCmds2,8
	.globl	gSolarbeamBigOrbAnimCmds3
	.align	2, 0
	.type	 gSolarbeamBigOrbAnimCmds3,object
gSolarbeamBigOrbAnimCmds3:
	.short	0x2
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSolarbeamBigOrbAnimCmds3,8
	.globl	gSolarbeamBigOrbAnimCmds4
	.align	2, 0
	.type	 gSolarbeamBigOrbAnimCmds4,object
gSolarbeamBigOrbAnimCmds4:
	.short	0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSolarbeamBigOrbAnimCmds4,8
	.globl	gSolarbeamBigOrbAnimCmds5
	.align	2, 0
	.type	 gSolarbeamBigOrbAnimCmds5,object
gSolarbeamBigOrbAnimCmds5:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSolarbeamBigOrbAnimCmds5,8
	.globl	gSolarbeamBigOrbAnimCmds6
	.align	2, 0
	.type	 gSolarbeamBigOrbAnimCmds6,object
gSolarbeamBigOrbAnimCmds6:
	.short	0x5
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSolarbeamBigOrbAnimCmds6,8
	.globl	gSolarbeamBigOrbAnimCmds7
	.align	2, 0
	.type	 gSolarbeamBigOrbAnimCmds7,object
gSolarbeamBigOrbAnimCmds7:
	.short	0x6
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSolarbeamBigOrbAnimCmds7,8
	.globl	gSolarbeamSmallOrbAnimCms
	.align	2, 0
	.type	 gSolarbeamSmallOrbAnimCms,object
gSolarbeamSmallOrbAnimCms:
	.short	0x7
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSolarbeamSmallOrbAnimCms,8
	.globl	gPowerAbsorptionOrbAnimCmds
	.align	2, 0
	.type	 gPowerAbsorptionOrbAnimCmds,object
gPowerAbsorptionOrbAnimCmds:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gPowerAbsorptionOrbAnimCmds,8
	.globl	gSolarbeamBigOrbAnimTable
	.align	2, 0
	.type	 gSolarbeamBigOrbAnimTable,object
gSolarbeamBigOrbAnimTable:
	.word	gSolarbeamBigOrbAnimCmds1
	.word	gSolarbeamBigOrbAnimCmds2
	.word	gSolarbeamBigOrbAnimCmds3
	.word	gSolarbeamBigOrbAnimCmds4
	.word	gSolarbeamBigOrbAnimCmds5
	.word	gSolarbeamBigOrbAnimCmds6
	.word	gSolarbeamBigOrbAnimCmds7
	.size	 gSolarbeamBigOrbAnimTable,28
	.globl	gSolarbeamSmallOrbAnimTable
	.align	2, 0
	.type	 gSolarbeamSmallOrbAnimTable,object
gSolarbeamSmallOrbAnimTable:
	.word	gSolarbeamSmallOrbAnimCms
	.size	 gSolarbeamSmallOrbAnimTable,4
	.globl	gPowerAbsorptionOrbAnimTable
	.align	2, 0
	.type	 gPowerAbsorptionOrbAnimTable,object
gPowerAbsorptionOrbAnimTable:
	.word	gPowerAbsorptionOrbAnimCmds
	.size	 gPowerAbsorptionOrbAnimTable,4
	.globl	gPowerAbsorptionOrbAffineAnimCmds
	.align	2, 0
	.type	 gPowerAbsorptionOrbAffineAnimCmds,object
gPowerAbsorptionOrbAffineAnimCmds:
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gPowerAbsorptionOrbAffineAnimCmds,16
	.globl	gPowerAbsorptionOrbAffineAnimTable
	.align	2, 0
	.type	 gPowerAbsorptionOrbAffineAnimTable,object
gPowerAbsorptionOrbAffineAnimTable:
	.word	gPowerAbsorptionOrbAffineAnimCmds
	.size	 gPowerAbsorptionOrbAffineAnimTable,4
	.globl	gPowerAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gPowerAbsorptionOrbSpriteTemplate,object
	.size	 gPowerAbsorptionOrbSpriteTemplate,24
gPowerAbsorptionOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineNormal_ObjBlend_16x16
	.word	gPowerAbsorptionOrbAnimTable
	.word	0x0
	.word	gPowerAbsorptionOrbAffineAnimTable
	.word	AnimPowerAbsorptionOrb
	.globl	gSolarbeamBigOrbSpriteTemplate
	.align	2, 0
	.type	 gSolarbeamBigOrbSpriteTemplate,object
	.size	 gSolarbeamBigOrbSpriteTemplate,24
gSolarbeamBigOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gSolarbeamBigOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSolarbeamBigOrb
	.globl	gSolarbeamSmallOrbSpriteTemplate
	.align	2, 0
	.type	 gSolarbeamSmallOrbSpriteTemplate,object
	.size	 gSolarbeamSmallOrbSpriteTemplate,24
gSolarbeamSmallOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gSolarbeamSmallOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSolarbeamSmallOrb
	.globl	gStockpileAbsorptionOrbAffineCmds
	.align	2, 0
	.type	 gStockpileAbsorptionOrbAffineCmds,object
gStockpileAbsorptionOrbAffineCmds:
	.short	0x140
	.short	0x140
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xe
	.short	-0xe
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gStockpileAbsorptionOrbAffineCmds,24
	.globl	gStockpileAbsorptionOrbAffineAnimTable
	.align	2, 0
	.type	 gStockpileAbsorptionOrbAffineAnimTable,object
gStockpileAbsorptionOrbAffineAnimTable:
	.word	gStockpileAbsorptionOrbAffineCmds
	.size	 gStockpileAbsorptionOrbAffineAnimTable,4
	.globl	gStockpileAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gStockpileAbsorptionOrbSpriteTemplate,object
	.size	 gStockpileAbsorptionOrbSpriteTemplate,24
gStockpileAbsorptionOrbSpriteTemplate:
	.short	0x27fb
	.short	0x27fb
	.word	gOamData_AffineDouble_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gStockpileAbsorptionOrbAffineAnimTable
	.word	AnimPowerAbsorptionOrb
	.globl	gAbsorptionOrbAffineAnimCmds
	.align	2, 0
	.type	 gAbsorptionOrbAffineAnimCmds,object
gAbsorptionOrbAffineAnimCmds:
	.short	-0x5
	.short	-0x5
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gAbsorptionOrbAffineAnimCmds,16
	.globl	gAbsorptionOrbAffineAnimTable
	.align	2, 0
	.type	 gAbsorptionOrbAffineAnimTable,object
gAbsorptionOrbAffineAnimTable:
	.word	gAbsorptionOrbAffineAnimCmds
	.size	 gAbsorptionOrbAffineAnimTable,4
	.globl	gAbsorptionOrbSpriteTemplate
	.align	2, 0
	.type	 gAbsorptionOrbSpriteTemplate,object
	.size	 gAbsorptionOrbSpriteTemplate,24
gAbsorptionOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineNormal_ObjBlend_16x16
	.word	gPowerAbsorptionOrbAnimTable
	.word	0x0
	.word	gAbsorptionOrbAffineAnimTable
	.word	AnimAbsorptionOrb
	.globl	gHyperBeamOrbSpriteTemplate
	.align	2, 0
	.type	 gHyperBeamOrbSpriteTemplate,object
	.size	 gHyperBeamOrbSpriteTemplate,24
gHyperBeamOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gSolarbeamBigOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimHyperBeamOrb
	.globl	gLeechSeedAnimCmds1
	.align	2, 0
	.type	 gLeechSeedAnimCmds1,object
gLeechSeedAnimCmds1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeechSeedAnimCmds1,8
	.globl	gLeechSeedAnimCmds2
	.align	2, 0
	.type	 gLeechSeedAnimCmds2,object
gLeechSeedAnimCmds2:
	.short	0x4
	.byte	0x7
	.space	1
	.short	0x8
	.byte	0x7
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gLeechSeedAnimCmds2,12
	.globl	gLeechSeedAnimTable
	.align	2, 0
	.type	 gLeechSeedAnimTable,object
gLeechSeedAnimTable:
	.word	gLeechSeedAnimCmds1
	.word	gLeechSeedAnimCmds2
	.size	 gLeechSeedAnimTable,8
	.globl	gLeechSeedSpriteTemplate
	.align	2, 0
	.type	 gLeechSeedSpriteTemplate,object
	.size	 gLeechSeedSpriteTemplate,24
gLeechSeedSpriteTemplate:
	.short	0x2716
	.short	0x2716
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gLeechSeedAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLeechSeed
	.globl	gSporeParticleAnimCmds1
	.align	2, 0
	.type	 gSporeParticleAnimCmds1,object
gSporeParticleAnimCmds1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gSporeParticleAnimCmds1,8
	.globl	gSporeParticleAnimCmds2
	.align	2, 0
	.type	 gSporeParticleAnimCmds2,object
gSporeParticleAnimCmds2:
	.short	0x4
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 gSporeParticleAnimCmds2,8
	.globl	gSporeParticleAnimTable
	.align	2, 0
	.type	 gSporeParticleAnimTable,object
gSporeParticleAnimTable:
	.word	gSporeParticleAnimCmds1
	.word	gSporeParticleAnimCmds2
	.size	 gSporeParticleAnimTable,8
	.globl	gSporeParticleSpriteTemplate
	.align	2, 0
	.type	 gSporeParticleSpriteTemplate,object
	.size	 gSporeParticleSpriteTemplate,24
gSporeParticleSpriteTemplate:
	.short	0x27ae
	.short	0x27ae
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gSporeParticleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSporeParticle
	.globl	gPetalDanceBigFlowerAnimCmds
	.align	2, 0
	.type	 gPetalDanceBigFlowerAnimCmds,object
gPetalDanceBigFlowerAnimCmds:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gPetalDanceBigFlowerAnimCmds,8
	.globl	gPetalDanceSmallFlowerAnimCmds
	.align	2, 0
	.type	 gPetalDanceSmallFlowerAnimCmds,object
gPetalDanceSmallFlowerAnimCmds:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gPetalDanceSmallFlowerAnimCmds,8
	.globl	gPetalDanceBigFlowerAnimTable
	.align	2, 0
	.type	 gPetalDanceBigFlowerAnimTable,object
gPetalDanceBigFlowerAnimTable:
	.word	gPetalDanceBigFlowerAnimCmds
	.size	 gPetalDanceBigFlowerAnimTable,4
	.globl	gPetalDanceSmallFlowerAnimTable
	.align	2, 0
	.type	 gPetalDanceSmallFlowerAnimTable,object
gPetalDanceSmallFlowerAnimTable:
	.word	gPetalDanceSmallFlowerAnimCmds
	.size	 gPetalDanceSmallFlowerAnimTable,4
	.globl	gPetalDanceBigFlowerSpriteTemplate
	.align	2, 0
	.type	 gPetalDanceBigFlowerSpriteTemplate,object
	.size	 gPetalDanceBigFlowerSpriteTemplate,24
gPetalDanceBigFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gPetalDanceBigFlowerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPetalDanceBigFlower
	.globl	gPetalDanceSmallFlowerSpriteTemplate
	.align	2, 0
	.type	 gPetalDanceSmallFlowerSpriteTemplate,object
	.size	 gPetalDanceSmallFlowerSpriteTemplate,24
gPetalDanceSmallFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gPetalDanceSmallFlowerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPetalDanceSmallFlower
	.globl	gRazorLeafParticleAnimCmds1
	.align	2, 0
	.type	 gRazorLeafParticleAnimCmds1,object
gRazorLeafParticleAnimCmds1:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x14
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0x4
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gRazorLeafParticleAnimCmds1,44
	.globl	gRazorLeafParticleAnimCmds2
	.align	2, 0
	.type	 gRazorLeafParticleAnimCmds2,object
gRazorLeafParticleAnimCmds2:
	.short	0x18
	.byte	0x5
	.space	1
	.short	0x1c
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gRazorLeafParticleAnimCmds2,16
	.globl	gRazorLeafParticleAnimTable
	.align	2, 0
	.type	 gRazorLeafParticleAnimTable,object
gRazorLeafParticleAnimTable:
	.word	gRazorLeafParticleAnimCmds1
	.word	gRazorLeafParticleAnimCmds2
	.size	 gRazorLeafParticleAnimTable,8
	.globl	gRazorLeafParticleSpriteTemplate
	.align	2, 0
	.type	 gRazorLeafParticleSpriteTemplate,object
	.size	 gRazorLeafParticleSpriteTemplate,24
gRazorLeafParticleSpriteTemplate:
	.short	0x274f
	.short	0x274f
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gRazorLeafParticleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimRazorLeafParticle
	.globl	gTwisterLeafSpriteTemplate
	.align	2, 0
	.type	 gTwisterLeafSpriteTemplate,object
	.size	 gTwisterLeafSpriteTemplate,24
gTwisterLeafSpriteTemplate:
	.short	0x274f
	.short	0x274f
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gRazorLeafParticleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMoveTwisterParticle
	.globl	gRazorLeafCutterAnimCmds
	.align	2, 0
	.type	 gRazorLeafCutterAnimCmds,object
gRazorLeafCutterAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x43
	.space	1
	.short	0x0
	.byte	0xc3
	.space	1
	.short	0x0
	.byte	0x83
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gRazorLeafCutterAnimCmds,20
	.globl	gRazorLeafCutterAnimTable
	.align	2, 0
	.type	 gRazorLeafCutterAnimTable,object
gRazorLeafCutterAnimTable:
	.word	gRazorLeafCutterAnimCmds
	.size	 gRazorLeafCutterAnimTable,4
	.globl	gRazorLeafCutterSpriteTemplate
	.align	2, 0
	.type	 gRazorLeafCutterSpriteTemplate,object
	.size	 gRazorLeafCutterSpriteTemplate,24
gRazorLeafCutterSpriteTemplate:
	.short	0x27b0
	.short	0x27b0
	.word	gOamData_AffineOff_ObjNormal_32x16
	.word	gRazorLeafCutterAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTranslateLinearSingleSineWave
	.globl	gSwiftStarAffineAnimCmds
	.align	2, 0
	.type	 gSwiftStarAffineAnimCmds,object
gSwiftStarAffineAnimCmds:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gSwiftStarAffineAnimCmds,16
	.globl	gSwiftStarAffineAnimTable
	.align	2, 0
	.type	 gSwiftStarAffineAnimTable,object
gSwiftStarAffineAnimTable:
	.word	gSwiftStarAffineAnimCmds
	.size	 gSwiftStarAffineAnimTable,4
	.globl	gSwiftStarSpriteTemplate
	.align	2, 0
	.type	 gSwiftStarSpriteTemplate,object
	.size	 gSwiftStarSpriteTemplate,24
gSwiftStarSpriteTemplate:
	.short	0x27be
	.short	0x27be
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSwiftStarAffineAnimTable
	.word	AnimTranslateLinearSingleSineWave
	.globl	gConstrictBindingAnimCmds1
	.align	2, 0
	.type	 gConstrictBindingAnimCmds1,object
gConstrictBindingAnimCmds1:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x4
	.space	1
	.short	0x60
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gConstrictBindingAnimCmds1,20
	.globl	gConstrictBindingAnimCmds2
	.align	2, 0
	.type	 gConstrictBindingAnimCmds2,object
gConstrictBindingAnimCmds2:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x40
	.byte	0x44
	.space	1
	.short	0x60
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 gConstrictBindingAnimCmds2,20
	.globl	gConstrictBindingAnimTable
	.align	2, 0
	.type	 gConstrictBindingAnimTable,object
gConstrictBindingAnimTable:
	.word	gConstrictBindingAnimCmds1
	.word	gConstrictBindingAnimCmds2
	.size	 gConstrictBindingAnimTable,8
	.globl	gConstrictBindingAffineAnimCmds1
	.align	2, 0
	.type	 gConstrictBindingAffineAnimCmds1,object
gConstrictBindingAffineAnimCmds1:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 gConstrictBindingAffineAnimCmds1,32
	.globl	gConstrictBindingAffineAnimCmds2
	.align	2, 0
	.type	 gConstrictBindingAffineAnimCmds2,object
gConstrictBindingAffineAnimCmds2:
	.short	-0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	-0xb
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x7fff
	.space	6
	.size	 gConstrictBindingAffineAnimCmds2,32
	.globl	gConstrictBindingAffineAnimTable
	.align	2, 0
	.type	 gConstrictBindingAffineAnimTable,object
gConstrictBindingAffineAnimTable:
	.word	gConstrictBindingAffineAnimCmds1
	.word	gConstrictBindingAffineAnimCmds2
	.size	 gConstrictBindingAffineAnimTable,8
	.globl	gConstrictBindingSpriteTemplate
	.align	2, 0
	.type	 gConstrictBindingSpriteTemplate,object
	.size	 gConstrictBindingSpriteTemplate,24
gConstrictBindingSpriteTemplate:
	.short	0x27ca
	.short	0x27ca
	.word	gOamData_AffineNormal_ObjNormal_64x32
	.word	gConstrictBindingAnimTable
	.word	0x0
	.word	gConstrictBindingAffineAnimTable
	.word	AnimConstrictBinding
	.globl	gMimicOrbAffineAnimCmds1
	.align	2, 0
	.type	 gMimicOrbAffineAnimCmds1,object
gMimicOrbAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x30
	.short	0x30
	.byte	0x0
	.byte	0xe
	.space	2
	.short	0x7fff
	.space	6
	.size	 gMimicOrbAffineAnimCmds1,24
	.globl	gMimicOrbAffineAnimCmds2
	.align	2, 0
	.type	 gMimicOrbAffineAnimCmds2,object
gMimicOrbAffineAnimCmds2:
	.short	-0x10
	.short	-0x10
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gMimicOrbAffineAnimCmds2,16
	.globl	gMimicOrbAffineAnimTable
	.align	2, 0
	.type	 gMimicOrbAffineAnimTable,object
gMimicOrbAffineAnimTable:
	.word	gMimicOrbAffineAnimCmds1
	.word	gMimicOrbAffineAnimCmds2
	.size	 gMimicOrbAffineAnimTable,8
	.globl	gMimicOrbSpriteTemplate
	.align	2, 0
	.type	 gMimicOrbSpriteTemplate,object
	.size	 gMimicOrbSpriteTemplate,24
gMimicOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gPowerAbsorptionOrbAnimTable
	.word	0x0
	.word	gMimicOrbAffineAnimTable
	.word	AnimMimicOrb
	.globl	gIngrainRootAnimCmds1
	.align	2, 0
	.type	 gIngrainRootAnimCmds1,object
gIngrainRootAnimCmds1:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	0x30
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 gIngrainRootAnimCmds1,20
	.globl	gIngrainRootAnimCmds2
	.align	2, 0
	.type	 gIngrainRootAnimCmds2,object
gIngrainRootAnimCmds2:
	.short	0x0
	.byte	0x47
	.space	1
	.short	0x10
	.byte	0x47
	.space	1
	.short	0x20
	.byte	0x47
	.space	1
	.short	0x30
	.byte	0x47
	.space	1
	.short	-0x1
	.space	2
	.size	 gIngrainRootAnimCmds2,20
	.globl	gIngrainRootAnimCmds3
	.align	2, 0
	.type	 gIngrainRootAnimCmds3,object
gIngrainRootAnimCmds3:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	-0x1
	.space	2
	.size	 gIngrainRootAnimCmds3,16
	.globl	gIngrainRootAnimCmds4
	.align	2, 0
	.type	 gIngrainRootAnimCmds4,object
gIngrainRootAnimCmds4:
	.short	0x0
	.byte	0x47
	.space	1
	.short	0x10
	.byte	0x47
	.space	1
	.short	0x20
	.byte	0x47
	.space	1
	.short	-0x1
	.space	2
	.size	 gIngrainRootAnimCmds4,16
	.globl	gIngrainRootAnimTable
	.align	2, 0
	.type	 gIngrainRootAnimTable,object
gIngrainRootAnimTable:
	.word	gIngrainRootAnimCmds1
	.word	gIngrainRootAnimCmds2
	.word	gIngrainRootAnimCmds3
	.word	gIngrainRootAnimCmds4
	.size	 gIngrainRootAnimTable,16
	.globl	gIngrainRootSpriteTemplate
	.align	2, 0
	.type	 gIngrainRootSpriteTemplate,object
	.size	 gIngrainRootSpriteTemplate,24
gIngrainRootSpriteTemplate:
	.short	0x27ef
	.short	0x27ef
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gIngrainRootAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimIngrainRoot
	.globl	gFrenzyPlantRootSpriteTemplate
	.align	2, 0
	.type	 gFrenzyPlantRootSpriteTemplate,object
	.size	 gFrenzyPlantRootSpriteTemplate,24
gFrenzyPlantRootSpriteTemplate:
	.short	0x27ef
	.short	0x27ef
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gIngrainRootAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFrenzyPlantRoot
	.globl	gIngrainOrbAnimCmds
	.align	2, 0
	.type	 gIngrainOrbAnimCmds,object
gIngrainOrbAnimCmds:
	.short	0x3
	.byte	0x3
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gIngrainOrbAnimCmds,12
	.globl	gIngrainOrbAnimTable
	.align	2, 0
	.type	 gIngrainOrbAnimTable,object
gIngrainOrbAnimTable:
	.word	gIngrainOrbAnimCmds
	.size	 gIngrainOrbAnimTable,4
	.globl	gIngrainOrbSpriteTemplate
	.align	2, 0
	.type	 gIngrainOrbSpriteTemplate,object
	.size	 gIngrainOrbSpriteTemplate,24
gIngrainOrbSpriteTemplate:
	.short	0x27a3
	.short	0x27a3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gIngrainOrbAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimIngrainOrb
	.globl	gFallingBagAnimCmds
	.align	2, 0
	.type	 gFallingBagAnimCmds,object
gFallingBagAnimCmds:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 gFallingBagAnimCmds,8
	.globl	gFallingBagAnimTable
	.align	2, 0
	.type	 gFallingBagAnimTable,object
gFallingBagAnimTable:
	.word	gFallingBagAnimCmds
	.size	 gFallingBagAnimTable,4
	.globl	gFallingBagAffineAnimCmds1
	.align	2, 0
	.type	 gFallingBagAffineAnimCmds1,object
gFallingBagAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xa
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x14
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xa
	.space	2
	.short	0x7fff
	.space	6
	.size	 gFallingBagAffineAnimCmds1,32
	.globl	gFallingBagAffineAnimCmds2
	.align	2, 0
	.type	 gFallingBagAffineAnimCmds2,object
gFallingBagAffineAnimCmds2:
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x2
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x4
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x2
	.space	2
	.short	0x7fff
	.space	6
	.size	 gFallingBagAffineAnimCmds2,56
	.globl	gFallingBagAffineAnimTable
	.align	2, 0
	.type	 gFallingBagAffineAnimTable,object
gFallingBagAffineAnimTable:
	.word	gFallingBagAffineAnimCmds1
	.word	gFallingBagAffineAnimCmds2
	.size	 gFallingBagAffineAnimTable,8
	.globl	gPresentSpriteTemplate
	.align	2, 0
	.type	 gPresentSpriteTemplate,object
	.size	 gPresentSpriteTemplate,24
gPresentSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gFallingBagAnimTable
	.word	0x0
	.word	gFallingBagAffineAnimTable
	.word	AnimPresent
	.globl	gKnockOffItemSpriteTemplate
	.align	2, 0
	.type	 gKnockOffItemSpriteTemplate,object
	.size	 gKnockOffItemSpriteTemplate,24
gKnockOffItemSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gFallingBagAnimTable
	.word	0x0
	.word	gFallingBagAffineAnimTable
	.word	AnimKnockOffItem
	.globl	gPresentHealParticleAnimCmds
	.align	2, 0
	.type	 gPresentHealParticleAnimCmds,object
gPresentHealParticleAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x4
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0x4
	.space	1
	.short	0xc
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gPresentHealParticleAnimCmds,20
	.globl	gPresentHealParticleAnimTable
	.align	2, 0
	.type	 gPresentHealParticleAnimTable,object
gPresentHealParticleAnimTable:
	.word	gPresentHealParticleAnimCmds
	.size	 gPresentHealParticleAnimTable,4
	.globl	gPresentHealParticleSpriteTemplate
	.align	2, 0
	.type	 gPresentHealParticleSpriteTemplate,object
	.size	 gPresentHealParticleSpriteTemplate,24
gPresentHealParticleSpriteTemplate:
	.short	0x27d3
	.short	0x27d3
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gPresentHealParticleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimPresentHealParticle
	.globl	gItemStealSpriteTemplate
	.align	2, 0
	.type	 gItemStealSpriteTemplate,object
	.size	 gItemStealSpriteTemplate,24
gItemStealSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gFallingBagAnimTable
	.word	0x0
	.word	gFallingBagAffineAnimTable
	.word	AnimItemSteal
	.globl	gTrickBagAffineAnimCmds1
	.align	2, 0
	.type	 gTrickBagAffineAnimCmds1,object
gTrickBagAffineAnimCmds1:
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x7fff
	.space	6
	.size	 gTrickBagAffineAnimCmds1,16
	.globl	gTrickBagAffineAnimCmds2
	.align	2, 0
	.type	 gTrickBagAffineAnimCmds2,object
gTrickBagAffineAnimCmds2:
	.short	0x0
	.short	-0xa
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	-0x6
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	-0x2
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x2
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0x6
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x0
	.short	0xa
	.byte	0x0
	.byte	0x3
	.space	2
	.short	0x7fff
	.space	6
	.size	 gTrickBagAffineAnimCmds2,64
	.globl	gTrickBagAffineAnimTable
	.align	2, 0
	.type	 gTrickBagAffineAnimTable,object
gTrickBagAffineAnimTable:
	.word	gTrickBagAffineAnimCmds1
	.word	gTrickBagAffineAnimCmds2
	.word	gFallingBagAffineAnimCmds1
	.word	gFallingBagAffineAnimCmds2
	.size	 gTrickBagAffineAnimTable,16
	.globl	gTrickBagSpriteTemplate
	.align	2, 0
	.type	 gTrickBagSpriteTemplate,object
	.size	 gTrickBagSpriteTemplate,24
gTrickBagSpriteTemplate:
	.short	0x27f0
	.short	0x27f0
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gFallingBagAnimTable
	.word	0x0
	.word	gTrickBagAffineAnimTable
	.word	AnimTrickBag
	.globl	gTrickBagCoordinates
	.type	 gTrickBagCoordinates,object
gTrickBagCoordinates:
	.byte	0x5
	.byte	0x18
	.byte	0x1
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	-0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x8
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x10
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x7f
	.size	 gTrickBagCoordinates,33
	.globl	gLeafBladeAnimCmds1
	.align	2, 0
	.type	 gLeafBladeAnimCmds1,object
gLeafBladeAnimCmds1:
	.short	0x1c
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeafBladeAnimCmds1,8
	.globl	gLeafBladeAnimCmds2
	.align	2, 0
	.type	 gLeafBladeAnimCmds2,object
gLeafBladeAnimCmds2:
	.short	0x20
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeafBladeAnimCmds2,8
	.globl	gLeafBladeAnimCmds3
	.align	2, 0
	.type	 gLeafBladeAnimCmds3,object
gLeafBladeAnimCmds3:
	.short	0x14
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeafBladeAnimCmds3,8
	.globl	gLeafBladeAnimCmds4
	.align	2, 0
	.type	 gLeafBladeAnimCmds4,object
gLeafBladeAnimCmds4:
	.short	0x1c
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeafBladeAnimCmds4,8
	.globl	gLeafBladeAnimCmds5
	.align	2, 0
	.type	 gLeafBladeAnimCmds5,object
gLeafBladeAnimCmds5:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeafBladeAnimCmds5,8
	.globl	gLeafBladeAnimCmds6
	.align	2, 0
	.type	 gLeafBladeAnimCmds6,object
gLeafBladeAnimCmds6:
	.short	0x10
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeafBladeAnimCmds6,8
	.globl	gLeafBladeAnimCmds7
	.align	2, 0
	.type	 gLeafBladeAnimCmds7,object
gLeafBladeAnimCmds7:
	.short	0x1c
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gLeafBladeAnimCmds7,8
	.globl	gLeafBladeAnimTable
	.align	2, 0
	.type	 gLeafBladeAnimTable,object
gLeafBladeAnimTable:
	.word	gLeafBladeAnimCmds1
	.word	gLeafBladeAnimCmds2
	.word	gLeafBladeAnimCmds3
	.word	gLeafBladeAnimCmds4
	.word	gLeafBladeAnimCmds5
	.word	gLeafBladeAnimCmds6
	.word	gLeafBladeAnimCmds7
	.size	 gLeafBladeAnimTable,28
	.globl	gLeafBladeSpriteTemplate
	.align	2, 0
	.type	 gLeafBladeSpriteTemplate,object
	.size	 gLeafBladeSpriteTemplate,24
gLeafBladeSpriteTemplate:
	.short	0x274f
	.short	0x274f
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gLeafBladeAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gAromatherapyBigFlowerAffineAnimCmds
	.align	2, 0
	.type	 gAromatherapyBigFlowerAffineAnimCmds,object
gAromatherapyBigFlowerAffineAnimCmds:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gAromatherapyBigFlowerAffineAnimCmds,24
	.globl	gAromatherapyBigFlowerAffineAnimTable
	.align	2, 0
	.type	 gAromatherapyBigFlowerAffineAnimTable,object
gAromatherapyBigFlowerAffineAnimTable:
	.word	gAromatherapyBigFlowerAffineAnimCmds
	.size	 gAromatherapyBigFlowerAffineAnimTable,4
	.globl	gAromatherapySmallFlowerSpriteTemplate
	.align	2, 0
	.type	 gAromatherapySmallFlowerSpriteTemplate,object
	.size	 gAromatherapySmallFlowerSpriteTemplate,24
gAromatherapySmallFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gPetalDanceSmallFlowerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFlyingParticle
	.globl	gAromatherapyBigFlowerSpriteTemplate
	.align	2, 0
	.type	 gAromatherapyBigFlowerSpriteTemplate,object
	.size	 gAromatherapyBigFlowerSpriteTemplate,24
gAromatherapyBigFlowerSpriteTemplate:
	.short	0x27af
	.short	0x27af
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gPetalDanceBigFlowerAnimTable
	.word	0x0
	.word	gAromatherapyBigFlowerAffineAnimTable
	.word	AnimFlyingParticle
	.globl	gSilverWindBigSparkAffineAnimCmds
	.align	2, 0
	.type	 gSilverWindBigSparkAffineAnimCmds,object
gSilverWindBigSparkAffineAnimCmds:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf6
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gSilverWindBigSparkAffineAnimCmds,24
	.globl	gSilverWindMediumSparkAffineAnimCmds
	.align	2, 0
	.type	 gSilverWindMediumSparkAffineAnimCmds,object
gSilverWindMediumSparkAffineAnimCmds:
	.short	0xc0
	.short	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf4
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gSilverWindMediumSparkAffineAnimCmds,24
	.globl	gSilverWindSmallSparkAffineAnimCmds
	.align	2, 0
	.type	 gSilverWindSmallSparkAffineAnimCmds,object
gSilverWindSmallSparkAffineAnimCmds:
	.short	0x8f
	.short	0x8f
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xf1
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gSilverWindSmallSparkAffineAnimCmds,24
	.globl	gSilverWindBigSparkAffineAnimTable
	.align	2, 0
	.type	 gSilverWindBigSparkAffineAnimTable,object
gSilverWindBigSparkAffineAnimTable:
	.word	gSilverWindBigSparkAffineAnimCmds
	.size	 gSilverWindBigSparkAffineAnimTable,4
	.globl	gSilverWindMediumSparkAffineAnimTable
	.align	2, 0
	.type	 gSilverWindMediumSparkAffineAnimTable,object
gSilverWindMediumSparkAffineAnimTable:
	.word	gSilverWindMediumSparkAffineAnimCmds
	.size	 gSilverWindMediumSparkAffineAnimTable,4
	.globl	gSilverWindSmallSparkAffineAnimTable
	.align	2, 0
	.type	 gSilverWindSmallSparkAffineAnimTable,object
gSilverWindSmallSparkAffineAnimTable:
	.word	gSilverWindSmallSparkAffineAnimCmds
	.size	 gSilverWindSmallSparkAffineAnimTable,4
	.globl	gSilverWindBigSparkSpriteTemplate
	.align	2, 0
	.type	 gSilverWindBigSparkSpriteTemplate,object
	.size	 gSilverWindBigSparkSpriteTemplate,24
gSilverWindBigSparkSpriteTemplate:
	.short	0x281f
	.short	0x281f
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSilverWindBigSparkAffineAnimTable
	.word	AnimFlyingParticle
	.globl	gSilverWindMediumSparkSpriteTemplate
	.align	2, 0
	.type	 gSilverWindMediumSparkSpriteTemplate,object
	.size	 gSilverWindMediumSparkSpriteTemplate,24
gSilverWindMediumSparkSpriteTemplate:
	.short	0x281f
	.short	0x281f
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSilverWindMediumSparkAffineAnimTable
	.word	AnimFlyingParticle
	.globl	gSilverWindSmallSparkSpriteTemplate
	.align	2, 0
	.type	 gSilverWindSmallSparkSpriteTemplate,object
	.size	 gSilverWindSmallSparkSpriteTemplate,24
gSilverWindSmallSparkSpriteTemplate:
	.short	0x281f
	.short	0x281f
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSilverWindSmallSparkAffineAnimTable
	.word	AnimFlyingParticle
	.globl	gMagicalLeafBlendColors
	.align	1, 0
	.type	 gMagicalLeafBlendColors,object
gMagicalLeafBlendColors:
	.short	0x1f
	.short	0x27f
	.short	0x3ff
	.short	0x3e0
	.short	0x7dc5
	.short	0x7d56
	.short	0x7eb6
	.size	 gMagicalLeafBlendColors,14
	.globl	gNeedleArmSpikeSpriteTemplate
	.align	2, 0
	.type	 gNeedleArmSpikeSpriteTemplate,object
	.size	 gNeedleArmSpikeSpriteTemplate,24
gNeedleArmSpikeSpriteTemplate:
	.short	0x281a
	.short	0x281a
	.word	gOamData_AffineNormal_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimNeedleArmSpike
	.globl	gWhipAnimCmds1
	.align	2, 0
	.type	 gWhipAnimCmds1,object
gWhipAnimCmds1:
	.short	0x40
	.byte	0x3
	.space	1
	.short	0x50
	.byte	0x3
	.space	1
	.short	0x60
	.byte	0x3
	.space	1
	.short	0x70
	.byte	0x6
	.space	1
	.short	-0x1
	.space	2
	.size	 gWhipAnimCmds1,20
	.globl	gWhipAnimCmds2
	.align	2, 0
	.type	 gWhipAnimCmds2,object
gWhipAnimCmds2:
	.short	0x40
	.byte	0x43
	.space	1
	.short	0x50
	.byte	0x43
	.space	1
	.short	0x60
	.byte	0x43
	.space	1
	.short	0x70
	.byte	0x46
	.space	1
	.short	-0x1
	.space	2
	.size	 gWhipAnimCmds2,20
	.globl	gWhipAnimTable
	.align	2, 0
	.type	 gWhipAnimTable,object
gWhipAnimTable:
	.word	gWhipAnimCmds1
	.word	gWhipAnimCmds2
	.size	 gWhipAnimTable,8
	.globl	gSlamHitSpriteTemplate
	.align	2, 0
	.type	 gSlamHitSpriteTemplate,object
	.size	 gSlamHitSpriteTemplate,24
gSlamHitSpriteTemplate:
	.short	0x2748
	.short	0x2748
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gWhipAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWhipHit
	.globl	gVineWhipSpriteTemplate
	.align	2, 0
	.type	 gVineWhipSpriteTemplate,object
	.size	 gVineWhipSpriteTemplate,24
gVineWhipSpriteTemplate:
	.short	0x282f
	.short	0x282f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gWhipAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimWhipHit
	.globl	gUnknown_08592900
	.align	2, 0
	.type	 gUnknown_08592900,object
gUnknown_08592900:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592900,24
	.globl	gUnknown_08592918
	.align	2, 0
	.type	 gUnknown_08592918,object
gUnknown_08592918:
	.word	gUnknown_08592900
	.size	 gUnknown_08592918,4
	.globl	gUnknown_0859291C
	.align	2, 0
	.type	 gUnknown_0859291C,object
	.size	 gUnknown_0859291C,24
gUnknown_0859291C:
	.short	0x2725
	.short	0x2725
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gUnknown_08592918
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81009F8
	.globl	gUnknown_08592934
	.align	2, 0
	.type	 gUnknown_08592934,object
	.size	 gUnknown_08592934,24
gUnknown_08592934:
	.short	0x2726
	.short	0x2726
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gUnknown_08592918
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_81009F8
	.globl	gUnknown_0859294C
	.align	2, 0
	.type	 gUnknown_0859294C,object
gUnknown_0859294C:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859294C,16
	.globl	gUnknown_0859295C
	.align	2, 0
	.type	 gUnknown_0859295C,object
gUnknown_0859295C:
	.short	0x100
	.short	0x100
	.byte	0x20
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859295C,16
	.globl	gUnknown_0859296C
	.align	2, 0
	.type	 gUnknown_0859296C,object
gUnknown_0859296C:
	.short	0x100
	.short	0x100
	.byte	0x40
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859296C,16
	.globl	gUnknown_0859297C
	.align	2, 0
	.type	 gUnknown_0859297C,object
gUnknown_0859297C:
	.short	0x100
	.short	0x100
	.byte	0x60
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859297C,16
	.globl	gUnknown_0859298C
	.align	2, 0
	.type	 gUnknown_0859298C,object
gUnknown_0859298C:
	.short	0x100
	.short	0x100
	.byte	0x80
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859298C,16
	.globl	gUnknown_0859299C
	.align	2, 0
	.type	 gUnknown_0859299C,object
gUnknown_0859299C:
	.short	0x100
	.short	0x100
	.byte	0xa0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_0859299C,16
	.globl	gUnknown_085929AC
	.align	2, 0
	.type	 gUnknown_085929AC,object
gUnknown_085929AC:
	.short	0x100
	.short	0x100
	.byte	0xc0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085929AC,16
	.globl	gUnknown_085929BC
	.align	2, 0
	.type	 gUnknown_085929BC,object
gUnknown_085929BC:
	.short	0x100
	.short	0x100
	.byte	0xe0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gUnknown_085929BC,16
	.globl	gUnknown_085929CC
	.align	2, 0
	.type	 gUnknown_085929CC,object
gUnknown_085929CC:
	.word	gUnknown_0859294C
	.word	gUnknown_0859295C
	.word	gUnknown_0859296C
	.word	gUnknown_0859297C
	.word	gUnknown_0859298C
	.word	gUnknown_0859299C
	.word	gUnknown_085929AC
	.word	gUnknown_085929BC
	.size	 gUnknown_085929CC,32
	.globl	gUnknown_085929EC
	.align	2, 0
	.type	 gUnknown_085929EC,object
	.size	 gUnknown_085929EC,24
gUnknown_085929EC:
	.short	0x279f
	.short	0x279f
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gUnknown_085929CC
	.word	sub_8100A94
	.globl	gCuttingSliceAnimCmds
	.align	2, 0
	.type	 gCuttingSliceAnimCmds,object
gCuttingSliceAnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x20
	.byte	0x5
	.space	1
	.short	0x30
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gCuttingSliceAnimCmds,20
	.globl	gCuttingSliceAnimTable
	.align	2, 0
	.type	 gCuttingSliceAnimTable,object
gCuttingSliceAnimTable:
	.word	gCuttingSliceAnimCmds
	.size	 gCuttingSliceAnimTable,4
	.globl	gCuttingSliceSpriteTemplate
	.align	2, 0
	.type	 gCuttingSliceSpriteTemplate,object
	.size	 gCuttingSliceSpriteTemplate,24
gCuttingSliceSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gCuttingSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimCuttingSlice
	.globl	gAirCutterSliceSpriteTemplate
	.align	2, 0
	.type	 gAirCutterSliceSpriteTemplate,object
	.size	 gAirCutterSliceSpriteTemplate,24
gAirCutterSliceSpriteTemplate:
	.short	0x279a
	.short	0x279a
	.word	gOamData_AffineOff_ObjBlend_32x32
	.word	gCuttingSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimAirCutterSlice
	.globl	gUnknown_08592A4C
	.align	2, 0
	.type	 gUnknown_08592A4C,object
gUnknown_08592A4C:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A4C,8
	.globl	gUnknown_08592A54
	.align	2, 0
	.type	 gUnknown_08592A54,object
gUnknown_08592A54:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A54,8
	.globl	gUnknown_08592A5C
	.align	2, 0
	.type	 gUnknown_08592A5C,object
gUnknown_08592A5C:
	.short	0x8
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A5C,8
	.globl	gUnknown_08592A64
	.align	2, 0
	.type	 gUnknown_08592A64,object
gUnknown_08592A64:
	.short	0xc
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A64,8
	.globl	gUnknown_08592A6C
	.align	2, 0
	.type	 gUnknown_08592A6C,object
gUnknown_08592A6C:
	.short	0x10
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A6C,8
	.globl	gUnknown_08592A74
	.align	2, 0
	.type	 gUnknown_08592A74,object
gUnknown_08592A74:
	.short	0x14
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A74,8
	.globl	gUnknown_08592A7C
	.align	2, 0
	.type	 gUnknown_08592A7C,object
gUnknown_08592A7C:
	.short	0x0
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A7C,8
	.globl	gUnknown_08592A84
	.align	2, 0
	.type	 gUnknown_08592A84,object
gUnknown_08592A84:
	.short	0x4
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A84,8
	.globl	gUnknown_08592A8C
	.align	2, 0
	.type	 gUnknown_08592A8C,object
gUnknown_08592A8C:
	.short	0x8
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A8C,8
	.globl	gUnknown_08592A94
	.align	2, 0
	.type	 gUnknown_08592A94,object
gUnknown_08592A94:
	.short	0xc
	.byte	0x81
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592A94,8
	.globl	gUnknown_08592A9C
	.align	2, 0
	.type	 gUnknown_08592A9C,object
gUnknown_08592A9C:
	.word	gUnknown_08592A4C
	.word	gUnknown_08592A54
	.word	gUnknown_08592A5C
	.word	gUnknown_08592A64
	.word	gUnknown_08592A6C
	.word	gUnknown_08592A74
	.word	gUnknown_08592A7C
	.word	gUnknown_08592A84
	.word	gUnknown_08592A8C
	.word	gUnknown_08592A94
	.size	 gUnknown_08592A9C,40
	.globl	gUnknown_08592AC4
	.align	2, 0
	.type	 gUnknown_08592AC4,object
	.size	 gUnknown_08592AC4,24
gUnknown_08592AC4:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gUnknown_08592A9C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8100E1C
	.globl	gProtectSpriteTemplate
	.align	2, 0
	.type	 gProtectSpriteTemplate,object
	.size	 gProtectSpriteTemplate,24
gProtectSpriteTemplate:
	.short	0x2828
	.short	0x2828
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimProtect
	.globl	gMilkBottleAffineAnimCmds1
	.align	2, 0
	.type	 gMilkBottleAffineAnimCmds1,object
gMilkBottleAffineAnimCmds1:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gMilkBottleAffineAnimCmds1,16
	.globl	gMilkBottleAffineAnimCmds2
	.align	2, 0
	.type	 gMilkBottleAffineAnimCmds2,object
gMilkBottleAffineAnimCmds2:
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0xc
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfe
	.byte	0x18
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x6
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x2
	.byte	0xc
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gMilkBottleAffineAnimCmds2,48
	.globl	gMilkBottleAffineAnimTable
	.align	2, 0
	.type	 gMilkBottleAffineAnimTable,object
gMilkBottleAffineAnimTable:
	.word	gMilkBottleAffineAnimCmds1
	.word	gMilkBottleAffineAnimCmds2
	.size	 gMilkBottleAffineAnimTable,8
	.globl	gMilkBottleSpriteTemplate
	.align	2, 0
	.type	 gMilkBottleSpriteTemplate,object
	.size	 gMilkBottleSpriteTemplate,24
gMilkBottleSpriteTemplate:
	.short	0x2773
	.short	0x2773
	.word	gOamData_AffineNormal_ObjBlend_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gMilkBottleAffineAnimTable
	.word	AnimMilkBottle
	.globl	gGrantingStarsAnimCmds
	.align	2, 0
	.type	 gGrantingStarsAnimCmds,object
gGrantingStarsAnimCmds:
	.short	0x0
	.byte	0x7
	.space	1
	.short	0x10
	.byte	0x7
	.space	1
	.short	0x20
	.byte	0x7
	.space	1
	.short	0x30
	.byte	0x7
	.space	1
	.short	0x40
	.byte	0x7
	.space	1
	.short	0x50
	.byte	0x7
	.space	1
	.short	0x60
	.byte	0x7
	.space	1
	.short	0x70
	.byte	0x7
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gGrantingStarsAnimCmds,36
	.globl	gGrantingStarsAnimTable
	.align	2, 0
	.type	 gGrantingStarsAnimTable,object
gGrantingStarsAnimTable:
	.word	gGrantingStarsAnimCmds
	.size	 gGrantingStarsAnimTable,4
	.globl	gGrantingStarsSpriteTemplate
	.align	2, 0
	.type	 gGrantingStarsSpriteTemplate,object
	.size	 gGrantingStarsSpriteTemplate,24
gGrantingStarsSpriteTemplate:
	.short	0x2741
	.short	0x2741
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gGrantingStarsAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimGrantingStars
	.globl	gSparklingStarsSpriteTemplate
	.align	2, 0
	.type	 gSparklingStarsSpriteTemplate,object
	.size	 gSparklingStarsSpriteTemplate,24
gSparklingStarsSpriteTemplate:
	.short	0x2741
	.short	0x2741
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gGrantingStarsAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSparkingStars
	.globl	gUnknown_08592BAC
	.align	2, 0
	.type	 gUnknown_08592BAC,object
gUnknown_08592BAC:
	.short	0x0
	.byte	0xa
	.space	1
	.short	0x4
	.byte	0xa
	.space	1
	.short	0x8
	.byte	0xa
	.space	1
	.short	0xc
	.byte	0xa
	.space	1
	.short	0x10
	.byte	0x1a
	.space	1
	.short	0x10
	.byte	0x5
	.space	1
	.short	0x14
	.byte	0x5
	.space	1
	.short	0x18
	.byte	0xf
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592BAC,36
	.globl	gUnknown_08592BD0
	.align	2, 0
	.type	 gUnknown_08592BD0,object
gUnknown_08592BD0:
	.short	0x0
	.byte	0x4a
	.space	1
	.short	0x4
	.byte	0x4a
	.space	1
	.short	0x8
	.byte	0x4a
	.space	1
	.short	0xc
	.byte	0x4a
	.space	1
	.short	0x10
	.byte	0x5a
	.space	1
	.short	0x10
	.byte	0x45
	.space	1
	.short	0x14
	.byte	0x45
	.space	1
	.short	0x18
	.byte	0x4f
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_08592BD0,36
	.globl	gUnknown_08592BF4
	.align	2, 0
	.type	 gUnknown_08592BF4,object
gUnknown_08592BF4:
	.word	gUnknown_08592BAC
	.word	gUnknown_08592BD0
	.size	 gUnknown_08592BF4,8
	.globl	gUnknown_08592BFC
	.align	2, 0
	.type	 gUnknown_08592BFC,object
	.size	 gUnknown_08592BFC,24
gUnknown_08592BFC:
	.short	0x2730
	.short	0x2730
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gUnknown_08592BF4
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101440
	.globl	gSleepLetterZAnimCmds
	.align	2, 0
	.type	 gSleepLetterZAnimCmds,object
gSleepLetterZAnimCmds:
	.short	0x0
	.byte	0x28
	.space	1
	.short	-0x1
	.space	2
	.size	 gSleepLetterZAnimCmds,8
	.globl	gSleepLetterZAnimTable
	.align	2, 0
	.type	 gSleepLetterZAnimTable,object
gSleepLetterZAnimTable:
	.word	gSleepLetterZAnimCmds
	.size	 gSleepLetterZAnimTable,4
	.globl	gSleepLetterZAffineAnimCmds1
	.align	2, 0
	.type	 gSleepLetterZAffineAnimCmds1,object
gSleepLetterZAffineAnimCmds1:
	.short	0x14
	.short	0x14
	.byte	0xe2
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0x1
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSleepLetterZAffineAnimCmds1,24
	.globl	gSleepLetterZAffineAnimCmds1_2
	.align	2, 0
	.type	 gSleepLetterZAffineAnimCmds1_2,object
gSleepLetterZAffineAnimCmds1_2:
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0x1
	.byte	0x18
	.space	2
	.short	0x7ffd
	.short	0xa
	.space	4
	.size	 gSleepLetterZAffineAnimCmds1_2,24
	.globl	gSleepLetterZAffineAnimCmds2
	.align	2, 0
	.type	 gSleepLetterZAffineAnimCmds2,object
gSleepLetterZAffineAnimCmds2:
	.short	0x14
	.short	0x14
	.byte	0x1e
	.byte	0x0
	.space	2
	.short	0x8
	.short	0x8
	.byte	0xff
	.byte	0x18
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSleepLetterZAffineAnimCmds2,24
	.globl	gSleepLetterZAffineAnimCmds2_2
	.align	2, 0
	.type	 gSleepLetterZAffineAnimCmds2_2,object
gSleepLetterZAffineAnimCmds2_2:
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0xff
	.byte	0x18
	.space	2
	.short	0x7ffd
	.short	0xa
	.space	4
	.size	 gSleepLetterZAffineAnimCmds2_2,24
	.globl	gSleepLetterZAffineAnimTable
	.align	2, 0
	.type	 gSleepLetterZAffineAnimTable,object
gSleepLetterZAffineAnimTable:
	.word	gSleepLetterZAffineAnimCmds1
	.word	gSleepLetterZAffineAnimCmds2
	.size	 gSleepLetterZAffineAnimTable,8
	.globl	gSleepLetterZSpriteTemplate
	.align	2, 0
	.type	 gSleepLetterZSpriteTemplate,object
	.size	 gSleepLetterZSpriteTemplate,24
gSleepLetterZSpriteTemplate:
	.short	0x27f4
	.short	0x27f4
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gSleepLetterZAnimTable
	.word	0x0
	.word	gSleepLetterZAffineAnimTable
	.word	AnimSleepLetterZ
	.globl	gLockOnTargetSpriteTemplate
	.align	2, 0
	.type	 gLockOnTargetSpriteTemplate,object
	.size	 gLockOnTargetSpriteTemplate,24
gLockOnTargetSpriteTemplate:
	.short	0x271e
	.short	0x271e
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLockOnTarget
	.globl	gLockOnMoveTargetSpriteTemplate
	.align	2, 0
	.type	 gLockOnMoveTargetSpriteTemplate,object
	.size	 gLockOnMoveTargetSpriteTemplate,24
gLockOnMoveTargetSpriteTemplate:
	.short	0x271e
	.short	0x271e
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimLockOnMoveTarget
	.globl	gInclineMonCoordTable
	.type	 gInclineMonCoordTable,object
gInclineMonCoordTable:
	.byte	0x40
	.byte	0x40
	.byte	0x0
	.byte	-0x40
	.byte	-0x40
	.byte	0x40
	.byte	0x20
	.byte	-0x20
	.size	 gInclineMonCoordTable,8
	.globl	gBowMonSpriteTemplate
	.align	2, 0
	.type	 gBowMonSpriteTemplate,object
	.size	 gBowMonSpriteTemplate,24
gBowMonSpriteTemplate:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBowMon
	.globl	gUnknown_08592CF0
	.align	2, 0
	.type	 gUnknown_08592CF0,object
	.size	 gUnknown_08592CF0,24
gUnknown_08592CF0:
	.short	0x0
	.short	0x0
	.word	gDummyOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8101B90
	.globl	gSlashSliceAnimCmds1
	.align	2, 0
	.type	 gSlashSliceAnimCmds1,object
gSlashSliceAnimCmds1:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gSlashSliceAnimCmds1,20
	.globl	gSlashSliceAnimCmds2
	.align	2, 0
	.type	 gSlashSliceAnimCmds2,object
gSlashSliceAnimCmds2:
	.short	0x30
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gSlashSliceAnimCmds2,8
	.globl	gSlashSliceAnimTable
	.align	2, 0
	.type	 gSlashSliceAnimTable,object
gSlashSliceAnimTable:
	.word	gSlashSliceAnimCmds1
	.word	gSlashSliceAnimCmds2
	.size	 gSlashSliceAnimTable,8
	.globl	gSlashSliceSpriteTemplate
	.align	2, 0
	.type	 gSlashSliceSpriteTemplate,object
	.size	 gSlashSliceSpriteTemplate,24
gSlashSliceSpriteTemplate:
	.short	0x27c7
	.short	0x27c7
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gSlashSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSlashSlice
	.globl	gFalseSwipeSliceSpriteTemplate
	.align	2, 0
	.type	 gFalseSwipeSliceSpriteTemplate,object
	.size	 gFalseSwipeSliceSpriteTemplate,24
gFalseSwipeSliceSpriteTemplate:
	.short	0x282e
	.short	0x282e
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gSlashSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFalseSwipeSlice
	.globl	gFalseSwipePositionedSliceSpriteTemplate
	.align	2, 0
	.type	 gFalseSwipePositionedSliceSpriteTemplate,object
	.size	 gFalseSwipePositionedSliceSpriteTemplate,24
gFalseSwipePositionedSliceSpriteTemplate:
	.short	0x282e
	.short	0x282e
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gSlashSliceAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimFalseSwipePositionedSlice
	.globl	gEndureEnergyAnimCmds
	.align	2, 0
	.type	 gEndureEnergyAnimCmds,object
gEndureEnergyAnimCmds:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x8
	.byte	0xc
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x18
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gEndureEnergyAnimCmds,20
	.globl	gEndureEnergyAnimTable
	.align	2, 0
	.type	 gEndureEnergyAnimTable,object
gEndureEnergyAnimTable:
	.word	gEndureEnergyAnimCmds
	.size	 gEndureEnergyAnimTable,4
	.globl	gEndureEnergySpriteTemplate
	.align	2, 0
	.type	 gEndureEnergySpriteTemplate,object
	.size	 gEndureEnergySpriteTemplate,24
gEndureEnergySpriteTemplate:
	.short	0x27c8
	.short	0x27c8
	.word	gOamData_AffineOff_ObjNormal_16x32
	.word	gEndureEnergyAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimEndureEnergy
	.globl	gSharpenSphereAnimCmds
	.align	2, 0
	.type	 gSharpenSphereAnimCmds,object
gSharpenSphereAnimCmds:
	.short	0x0
	.byte	0x12
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x12
	.space	1
	.short	0x0
	.byte	0x6
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x12
	.space	1
	.short	0x10
	.byte	0x6
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x12
	.space	1
	.short	0x20
	.byte	0x6
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x12
	.space	1
	.short	0x30
	.byte	0x6
	.space	1
	.short	0x40
	.byte	0x36
	.space	1
	.short	-0x1
	.space	2
	.size	 gSharpenSphereAnimCmds,60
	.globl	gSharpenSphereAnimTable
	.align	2, 0
	.type	 gSharpenSphereAnimTable,object
gSharpenSphereAnimTable:
	.word	gSharpenSphereAnimCmds
	.size	 gSharpenSphereAnimTable,4
	.globl	gSharpenSphereSpriteTemplate
	.align	2, 0
	.type	 gSharpenSphereSpriteTemplate,object
	.size	 gSharpenSphereSpriteTemplate,24
gSharpenSphereSpriteTemplate:
	.short	0x27c9
	.short	0x27c9
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gSharpenSphereAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSharpenSphere
	.globl	gOctazookaBallSpriteTemplate
	.align	2, 0
	.type	 gOctazookaBallSpriteTemplate,object
	.size	 gOctazookaBallSpriteTemplate,24
gOctazookaBallSpriteTemplate:
	.short	0x2721
	.short	0x2721
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	TranslateAnimSpriteToTargetMonLocation
	.globl	gOctazookaAnimCmds
	.align	2, 0
	.type	 gOctazookaAnimCmds,object
gOctazookaAnimCmds:
	.short	0x0
	.byte	0x3
	.space	1
	.short	0x10
	.byte	0x3
	.space	1
	.short	0x20
	.byte	0x3
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x3
	.space	1
	.short	-0x1
	.space	2
	.size	 gOctazookaAnimCmds,24
	.globl	gOctazookaAnimTable
	.align	2, 0
	.type	 gOctazookaAnimTable,object
gOctazookaAnimTable:
	.word	gOctazookaAnimCmds
	.size	 gOctazookaAnimTable,4
	.globl	gOctazookaSmokeSpriteTemplate
	.align	2, 0
	.type	 gOctazookaSmokeSpriteTemplate,object
	.size	 gOctazookaSmokeSpriteTemplate,24
gOctazookaSmokeSpriteTemplate:
	.short	0x272e
	.short	0x272e
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gOctazookaAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gConversionAnimCmds
	.align	2, 0
	.type	 gConversionAnimCmds,object
gConversionAnimCmds:
	.short	0x3
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x1
	.byte	0x5
	.space	1
	.short	0x0
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gConversionAnimCmds,20
	.globl	gConversionAnimTable
	.align	2, 0
	.type	 gConversionAnimTable,object
gConversionAnimTable:
	.word	gConversionAnimCmds
	.size	 gConversionAnimTable,4
	.globl	gConversionAffineAnimCmds
	.align	2, 0
	.type	 gConversionAffineAnimCmds,object
gConversionAffineAnimCmds:
	.short	0x200
	.short	0x200
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gConversionAffineAnimCmds,16
	.globl	gConversionAffineAnimTable
	.align	2, 0
	.type	 gConversionAffineAnimTable,object
gConversionAffineAnimTable:
	.word	gConversionAffineAnimCmds
	.size	 gConversionAffineAnimTable,4
	.globl	gConversionSpriteTemplate
	.align	2, 0
	.type	 gConversionSpriteTemplate,object
	.size	 gConversionSpriteTemplate,24
gConversionSpriteTemplate:
	.short	0x2722
	.short	0x2722
	.word	gOamData_AffineDouble_ObjBlend_8x8
	.word	gConversionAnimTable
	.word	0x0
	.word	gConversionAffineAnimTable
	.word	AnimConversion
	.globl	gConversion2AnimCmds
	.align	2, 0
	.type	 gConversion2AnimCmds,object
gConversion2AnimCmds:
	.short	0x0
	.byte	0x5
	.space	1
	.short	0x1
	.byte	0x5
	.space	1
	.short	0x2
	.byte	0x5
	.space	1
	.short	0x3
	.byte	0x5
	.space	1
	.short	-0x1
	.space	2
	.size	 gConversion2AnimCmds,20
	.globl	gConversion2AnimTable
	.align	2, 0
	.type	 gConversion2AnimTable,object
gConversion2AnimTable:
	.word	gConversion2AnimCmds
	.size	 gConversion2AnimTable,4
	.globl	gConversion2SpriteTemplate
	.align	2, 0
	.type	 gConversion2SpriteTemplate,object
	.size	 gConversion2SpriteTemplate,24
gConversion2SpriteTemplate:
	.short	0x2722
	.short	0x2722
	.word	gOamData_AffineDouble_ObjBlend_8x8
	.word	gConversion2AnimTable
	.word	0x0
	.word	gConversionAffineAnimTable
	.word	AnimConversion2
	.globl	gMoonSpriteTemplate
	.align	2, 0
	.type	 gMoonSpriteTemplate,object
	.size	 gMoonSpriteTemplate,24
gMoonSpriteTemplate:
	.short	0x27d2
	.short	0x27d2
	.word	gOamData_AffineOff_ObjBlend_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMoon
	.globl	gMoonlightSparkleAnimCmds
	.align	2, 0
	.type	 gMoonlightSparkleAnimCmds,object
gMoonlightSparkleAnimCmds:
	.short	0x0
	.byte	0x8
	.space	1
	.short	0x4
	.byte	0x8
	.space	1
	.short	0x8
	.byte	0x8
	.space	1
	.short	0xc
	.byte	0x8
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gMoonlightSparkleAnimCmds,20
	.globl	gMoonlightSparkleAnimTable
	.align	2, 0
	.type	 gMoonlightSparkleAnimTable,object
gMoonlightSparkleAnimTable:
	.word	gMoonlightSparkleAnimCmds
	.size	 gMoonlightSparkleAnimTable,4
	.globl	gMoonlightSparkleSpriteTemplate
	.align	2, 0
	.type	 gMoonlightSparkleSpriteTemplate,object
	.size	 gMoonlightSparkleSpriteTemplate,24
gMoonlightSparkleSpriteTemplate:
	.short	0x27d3
	.short	0x27d3
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gMoonlightSparkleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimMoonlightSparkle
	.globl	gHealingBlueStarAnimCmds
	.align	2, 0
	.type	 gHealingBlueStarAnimCmds,object
gHealingBlueStarAnimCmds:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x3
	.space	1
	.short	0x40
	.byte	0x5
	.space	1
	.short	0x50
	.byte	0x3
	.space	1
	.short	0x60
	.byte	0x2
	.space	1
	.short	0x0
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gHealingBlueStarAnimCmds,36
	.globl	gHealingBlueStarAnimTable
	.align	2, 0
	.type	 gHealingBlueStarAnimTable,object
gHealingBlueStarAnimTable:
	.word	gHealingBlueStarAnimCmds
	.size	 gHealingBlueStarAnimTable,4
	.globl	gHealingBlueStarSpriteTemplate
	.align	2, 0
	.type	 gHealingBlueStarSpriteTemplate,object
	.size	 gHealingBlueStarSpriteTemplate,24
gHealingBlueStarSpriteTemplate:
	.short	0x272f
	.short	0x272f
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gHealingBlueStarAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSpriteOnMonPos
	.globl	gHornHitSpriteTemplate
	.align	2, 0
	.type	 gHornHitSpriteTemplate,object
	.size	 gHornHitSpriteTemplate,24
gHornHitSpriteTemplate:
	.short	0x2724
	.short	0x2724
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimHornHit
	.globl	gSuperFangAnimCmds
	.align	2, 0
	.type	 gSuperFangAnimCmds,object
gSuperFangAnimCmds:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gSuperFangAnimCmds,20
	.globl	gSuperFangAnimTable
	.align	2, 0
	.type	 gSuperFangAnimTable,object
gSuperFangAnimTable:
	.word	gSuperFangAnimCmds
	.size	 gSuperFangAnimTable,4
	.globl	gSuperFangSpriteTemplate
	.align	2, 0
	.type	 gSuperFangSpriteTemplate,object
	.size	 gSuperFangSpriteTemplate,24
gSuperFangSpriteTemplate:
	.short	0x27d0
	.short	0x27d0
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gSuperFangAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimSuperFang
	.globl	gWavyMusicNotesAnimCmds1
	.align	2, 0
	.type	 gWavyMusicNotesAnimCmds1,object
gWavyMusicNotesAnimCmds1:
	.short	0x0
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gWavyMusicNotesAnimCmds1,8
	.globl	gWavyMusicNotesAnimCmds2
	.align	2, 0
	.type	 gWavyMusicNotesAnimCmds2,object
gWavyMusicNotesAnimCmds2:
	.short	0x4
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gWavyMusicNotesAnimCmds2,8
	.globl	gWavyMusicNotesAnimCmds3
	.align	2, 0
	.type	 gWavyMusicNotesAnimCmds3,object
gWavyMusicNotesAnimCmds3:
	.short	0x8
	.byte	0x29
	.space	1
	.short	-0x1
	.space	2
	.size	 gWavyMusicNotesAnimCmds3,8
	.globl	gWavyMusicNotesAnimCmds4
	.align	2, 0
	.type	 gWavyMusicNotesAnimCmds4,object
gWavyMusicNotesAnimCmds4:
	.short	0xc
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gWavyMusicNotesAnimCmds4,8
	.globl	gWavyMusicNotesAnimCmds5
	.align	2, 0
	.type	 gWavyMusicNotesAnimCmds5,object
gWavyMusicNotesAnimCmds5:
	.short	0x10
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gWavyMusicNotesAnimCmds5,8
	.globl	gWavyMusicNotesAnimCmds6
	.align	2, 0
	.type	 gWavyMusicNotesAnimCmds6,object
gWavyMusicNotesAnimCmds6:
	.short	0x14
	.byte	0xa
	.space	1
	.short	-0x1
	.space	2
	.size	 gWavyMusicNotesAnimCmds6,8
	.globl	gWavyMusicNotesAnimCmds7
	.align	2, 0
	.type	 gWavyMusicNotesAnimCmds7,object
gWavyMusicNotesAnimCmds7:
	.short	0x0
	.byte	0x8a
	.space	1
	.short	-0x1
	.space	2
	.size	 gWavyMusicNotesAnimCmds7,8
	.globl	gWavyMusicNotesAnimCmds8
	.align	2, 0
	.type	 gWavyMusicNotesAnimCmds8,object
gWavyMusicNotesAnimCmds8:
	.short	0x4
	.byte	0x8a
	.space	1
	.short	-0x1
	.space	2
	.size	 gWavyMusicNotesAnimCmds8,8
	.globl	gMusicNotesAnimTable
	.align	2, 0
	.type	 gMusicNotesAnimTable,object
gMusicNotesAnimTable:
	.word	gWavyMusicNotesAnimCmds1
	.word	gWavyMusicNotesAnimCmds2
	.word	gWavyMusicNotesAnimCmds3
	.word	gWavyMusicNotesAnimCmds4
	.word	gWavyMusicNotesAnimCmds5
	.word	gWavyMusicNotesAnimCmds6
	.word	gWavyMusicNotesAnimCmds7
	.word	gWavyMusicNotesAnimCmds8
	.size	 gMusicNotesAnimTable,32
	.globl	gWavyMusicNotesAffineAnimCmds
	.align	2, 0
	.type	 gWavyMusicNotesAffineAnimCmds,object
gWavyMusicNotesAffineAnimCmds:
	.short	0xc
	.short	0xc
	.byte	0x0
	.byte	0x10
	.space	2
	.short	-0xc
	.short	-0xc
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffe
	.short	0x0
	.space	4
	.size	 gWavyMusicNotesAffineAnimCmds,24
	.globl	gMusicNotesAffineAnimTable
	.align	2, 0
	.type	 gMusicNotesAffineAnimTable,object
gMusicNotesAffineAnimTable:
	.word	gWavyMusicNotesAffineAnimCmds
	.size	 gMusicNotesAffineAnimTable,4
	.globl	gWavyMusicNotesSpriteTemplate
	.align	2, 0
	.type	 gWavyMusicNotesSpriteTemplate,object
	.size	 gWavyMusicNotesSpriteTemplate,24
gWavyMusicNotesSpriteTemplate:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gMusicNotesAnimTable
	.word	0x0
	.word	gMusicNotesAffineAnimTable
	.word	AnimWavyMusicNotes
	.globl	gParticlesColorBlendTable
	.align	1, 0
	.type	 gParticlesColorBlendTable,object
gParticlesColorBlendTable:
	.short	0x2758
	.short	0x7fff
	.short	0x735f
	.short	0x6adf
	.short	0x623f
	.short	0x59bf
	.short	0x2771
	.short	0x7fff
	.short	0x6bf9
	.short	0x57f4
	.short	0x43ef
	.short	0x33ea
	.short	0x27c9
	.short	0x7fff
	.short	0x63ff
	.short	0x47ff
	.short	0x2bff
	.short	0xfff
	.short	0x27bf
	.short	0x7fff
	.short	0x7f9a
	.short	0x7f55
	.short	0x7f10
	.short	0x7ecc
	.size	 gParticlesColorBlendTable,48
	.globl	gFastFlyingMusicNotesSpriteTemplate
	.align	2, 0
	.type	 gFastFlyingMusicNotesSpriteTemplate,object
	.size	 gFastFlyingMusicNotesSpriteTemplate,24
gFastFlyingMusicNotesSpriteTemplate:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gMusicNotesAnimTable
	.word	0x0
	.word	gMusicNotesAffineAnimTable
	.word	AnimFlyingMusicNotes
	.globl	gBellyDrumHandSpriteTemplate
	.align	2, 0
	.type	 gBellyDrumHandSpriteTemplate,object
	.size	 gBellyDrumHandSpriteTemplate,24
gBellyDrumHandSpriteTemplate:
	.short	0x27d1
	.short	0x27d1
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimBellyDrumHand
	.globl	gSlowFlyingMusicNotesAffineAnimCmds
	.align	2, 0
	.type	 gSlowFlyingMusicNotesAffineAnimCmds,object
gSlowFlyingMusicNotesAffineAnimCmds:
	.short	0xa0
	.short	0xa0
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x4
	.short	0x4
	.byte	0x0
	.byte	0x1
	.space	2
	.short	0x7ffe
	.short	0x1
	.space	4
	.size	 gSlowFlyingMusicNotesAffineAnimCmds,24
	.globl	gSlowFlyingMusicNotesAffineAnimTable
	.align	2, 0
	.type	 gSlowFlyingMusicNotesAffineAnimTable,object
gSlowFlyingMusicNotesAffineAnimTable:
	.word	gSlowFlyingMusicNotesAffineAnimCmds
	.size	 gSlowFlyingMusicNotesAffineAnimTable,4
	.globl	gSlowFlyingMusicNotesSpriteTemplate
	.align	2, 0
	.type	 gSlowFlyingMusicNotesSpriteTemplate,object
	.size	 gSlowFlyingMusicNotesSpriteTemplate,24
gSlowFlyingMusicNotesSpriteTemplate:
	.short	0x2758
	.short	0x2758
	.word	gOamData_AffineDouble_ObjNormal_16x16
	.word	gMusicNotesAnimTable
	.word	0x0
	.word	gSlowFlyingMusicNotesAffineAnimTable
	.word	AnimSlowFlyingMusicNotes
	.globl	gMetronomeThroughtBubbleAnimCmds1
	.align	2, 0
	.type	 gMetronomeThroughtBubbleAnimCmds1,object
gMetronomeThroughtBubbleAnimCmds1:
	.short	0x0
	.byte	0x42
	.space	1
	.short	0x10
	.byte	0x42
	.space	1
	.short	0x20
	.byte	0x42
	.space	1
	.short	0x30
	.byte	0x42
	.space	1
	.short	-0x1
	.space	2
	.size	 gMetronomeThroughtBubbleAnimCmds1,20
	.globl	gMetronomeThroughtBubbleAnimCmds3
	.align	2, 0
	.type	 gMetronomeThroughtBubbleAnimCmds3,object
gMetronomeThroughtBubbleAnimCmds3:
	.short	0x30
	.byte	0x42
	.space	1
	.short	0x20
	.byte	0x42
	.space	1
	.short	0x10
	.byte	0x42
	.space	1
	.short	0x0
	.byte	0x42
	.space	1
	.short	-0x1
	.space	2
	.size	 gMetronomeThroughtBubbleAnimCmds3,20
	.globl	gMetronomeThroughtBubbleAnimCmds2
	.align	2, 0
	.type	 gMetronomeThroughtBubbleAnimCmds2,object
gMetronomeThroughtBubbleAnimCmds2:
	.short	0x0
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x30
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gMetronomeThroughtBubbleAnimCmds2,20
	.globl	gMetronomeThroughtBubbleAnimCmds4
	.align	2, 0
	.type	 gMetronomeThroughtBubbleAnimCmds4,object
gMetronomeThroughtBubbleAnimCmds4:
	.short	0x30
	.byte	0x2
	.space	1
	.short	0x20
	.byte	0x2
	.space	1
	.short	0x10
	.byte	0x2
	.space	1
	.short	0x0
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gMetronomeThroughtBubbleAnimCmds4,20
	.globl	gMetronomeThroughtBubbleAnimTable
	.align	2, 0
	.type	 gMetronomeThroughtBubbleAnimTable,object
gMetronomeThroughtBubbleAnimTable:
	.word	gMetronomeThroughtBubbleAnimCmds1
	.word	gMetronomeThroughtBubbleAnimCmds2
	.word	gMetronomeThroughtBubbleAnimCmds3
	.word	gMetronomeThroughtBubbleAnimCmds4
	.size	 gMetronomeThroughtBubbleAnimTable,16
	.globl	gThoughtBubbleSpriteTemplate
	.align	2, 0
	.type	 gThoughtBubbleSpriteTemplate,object
	.size	 gThoughtBubbleSpriteTemplate,24
gThoughtBubbleSpriteTemplate:
	.short	0x27e1
	.short	0x27e1
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gMetronomeThroughtBubbleAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimThoughtBubble
	.globl	gMetronomeFingerAffineAnimCmds1
	.align	2, 0
	.type	 gMetronomeFingerAffineAnimCmds1,object
gMetronomeFingerAffineAnimCmds1:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x1e
	.short	0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gMetronomeFingerAffineAnimCmds1,24
	.globl	gMetronomeFingerAffineAnimCmds2
	.align	2, 0
	.type	 gMetronomeFingerAffineAnimCmds2,object
gMetronomeFingerAffineAnimCmds2:
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0xb
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xb
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	-0x1e
	.short	-0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gMetronomeFingerAffineAnimCmds2,40
	.globl	gMetronomeFingerAffineAnimCmds2_2
	.align	2, 0
	.type	 gMetronomeFingerAffineAnimCmds2_2,object
gMetronomeFingerAffineAnimCmds2_2:
	.short	0x10
	.short	0x10
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x1e
	.short	0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x10
	.space	2
	.short	0x7ffd
	.short	0x0
	.space	4
	.short	0x0
	.short	0x0
	.byte	0x4
	.byte	0xb
	.space	2
	.short	0x0
	.short	0x0
	.byte	0xfc
	.byte	0xb
	.space	2
	.short	0x7ffd
	.short	0x2
	.space	4
	.short	-0x1e
	.short	-0x1e
	.byte	0x0
	.byte	0x8
	.space	2
	.short	0x7fff
	.space	6
	.size	 gMetronomeFingerAffineAnimCmds2_2,72
	.globl	gMetronomeFingerAffineAnimTable
	.align	2, 0
	.type	 gMetronomeFingerAffineAnimTable,object
gMetronomeFingerAffineAnimTable:
	.word	gMetronomeFingerAffineAnimCmds1
	.word	gMetronomeFingerAffineAnimCmds2
	.size	 gMetronomeFingerAffineAnimTable,8
	.globl	gMetronomeFingerSpriteTemplate
	.align	2, 0
	.type	 gMetronomeFingerSpriteTemplate,object
	.size	 gMetronomeFingerSpriteTemplate,24
gMetronomeFingerSpriteTemplate:
	.short	0x2750
	.short	0x2750
	.word	gOamData_AffineDouble_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gMetronomeFingerAffineAnimTable
	.word	AnimMetronomeFinger
	.globl	gFollowMeFingerSpriteTemplate
	.align	2, 0
	.type	 gFollowMeFingerSpriteTemplate,object
	.size	 gFollowMeFingerSpriteTemplate,24
gFollowMeFingerSpriteTemplate:
	.short	0x2750
	.short	0x2750
	.word	gOamData_AffineNormal_ObjNormal_32x32
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gMetronomeFingerAffineAnimTable
	.word	AnimFollowMeFinger
	.globl	gTauntFingerAnimCmds1
	.align	2, 0
	.type	 gTauntFingerAnimCmds1,object
gTauntFingerAnimCmds1:
	.short	0x0
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gTauntFingerAnimCmds1,8
	.globl	gTauntFingerAnimCmds2
	.align	2, 0
	.type	 gTauntFingerAnimCmds2,object
gTauntFingerAnimCmds2:
	.short	0x0
	.byte	0x41
	.space	1
	.short	-0x1
	.space	2
	.size	 gTauntFingerAnimCmds2,8
	.globl	gTauntFingerAnimCmds3
	.align	2, 0
	.type	 gTauntFingerAnimCmds3,object
gTauntFingerAnimCmds3:
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x0
	.byte	0x4
	.space	1
	.short	0x10
	.byte	0x4
	.space	1
	.short	0x20
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gTauntFingerAnimCmds3,32
	.globl	gTauntFingerAnimCmds4
	.align	2, 0
	.type	 gTauntFingerAnimCmds4,object
gTauntFingerAnimCmds4:
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x0
	.byte	0x44
	.space	1
	.short	0x10
	.byte	0x44
	.space	1
	.short	0x20
	.byte	0x44
	.space	1
	.short	-0x1
	.space	2
	.size	 gTauntFingerAnimCmds4,32
	.globl	gTauntFingerAnimTable
	.align	2, 0
	.type	 gTauntFingerAnimTable,object
gTauntFingerAnimTable:
	.word	gTauntFingerAnimCmds1
	.word	gTauntFingerAnimCmds2
	.word	gTauntFingerAnimCmds3
	.word	gTauntFingerAnimCmds4
	.size	 gTauntFingerAnimTable,16
	.globl	gTauntFingerSpriteTemplate
	.align	2, 0
	.type	 gTauntFingerSpriteTemplate,object
	.size	 gTauntFingerSpriteTemplate,24
gTauntFingerSpriteTemplate:
	.short	0x27e6
	.short	0x27e6
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gTauntFingerAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	AnimTauntFinger
.text
	.align	2, 0
	.type	 AnimMovePowderParticle,function
	.thumb_func
AnimMovePowderParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L6
	ldrh	r0, [r5]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldrh	r0, [r5, #0x8]
	neg	r0, r0
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L3:
	ldrh	r0, [r5, #0x8]
.L5:
	strh	r0, [r4, #0x34]
	ldr	r0, .L8
	ldrh	r0, [r0, #0xa]
	strh	r0, [r4, #0x36]
	ldr	r0, .L8+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	gBattleAnimArgs
	.word	AnimMovePowderParticle_Step
.Lfe1:
	.size	 AnimMovePowderParticle,.Lfe1-AnimMovePowderParticle
	.align	2, 0
	.type	 AnimMovePowderParticle_Step,function
	.thumb_func
AnimMovePowderParticle_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L11	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r1, r1, r0
	strh	r1, [r4, #0x32]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L12
.L11:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L12:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 AnimMovePowderParticle_Step,.Lfe2-AnimMovePowderParticle_Step
	.align	2, 0
	.type	 AnimPowerAbsorptionOrb,function
	.thumb_func
AnimPowerAbsorptionOrb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L14
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L14+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L14+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L14+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	StartAnimLinearTranslation
	.word	DestroySpriteAndMatrix
.Lfe3:
	.size	 AnimPowerAbsorptionOrb,.Lfe3-AnimPowerAbsorptionOrb
	.align	2, 0
	.type	 AnimSolarbeamBigOrb,function
	.thumb_func
AnimSolarbeamBigOrb:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L17
	ldrb	r1, [r5, #0x6]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L17+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L17+0x8
	str	r0, [r4, #0x1c]
	ldr	r1, .L17+0xc
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L18:
	.align	2, 0
.L17:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe4:
	.size	 AnimSolarbeamBigOrb,.Lfe4-AnimSolarbeamBigOrb
	.align	2, 0
	.type	 AnimSolarbeamSmallOrb,function
	.thumb_func
AnimSolarbeamSmallOrb:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r6, .L20
	ldrh	r0, [r6, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldr	r5, .L20+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r6, #0x6]
	strh	r0, [r4, #0x38]
	ldr	r1, .L20+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimSolarbeamSmallOrb_Step
.Lfe5:
	.size	 AnimSolarbeamSmallOrb,.Lfe5-AnimSolarbeamSmallOrb
	.align	2, 0
	.type	 AnimSolarbeamSmallOrb_Step,function
	.thumb_func
AnimSolarbeamSmallOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L23	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
	b	.L24
.L23:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	ble	.L25	@cond_branch
	ldr	r0, .L28
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x1
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	gBattleAnimTarget
.L25:
	ldr	r0, .L30
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x6
.L27:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0xf
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
.L24:
	pop	{r4}
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gBattleAnimTarget
.Lfe6:
	.size	 AnimSolarbeamSmallOrb_Step,.Lfe6-AnimSolarbeamSmallOrb_Step
	.align	2, 0
	.globl	AnimTask_CreateSmallSolarbeamOrbs
	.type	 AnimTask_CreateSmallSolarbeamOrbs,function
	.thumb_func
AnimTask_CreateSmallSolarbeamOrbs:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L35
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L33	@cond_branch
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	mov	r0, #0x6
	strh	r0, [r5, #0x8]
	ldr	r1, .L35+0x4
	mov	r0, #0xf
	strh	r0, [r1]
	strh	r2, [r1, #0x2]
	mov	r0, #0x50
	strh	r0, [r1, #0x4]
	strh	r2, [r1, #0x6]
	ldr	r4, .L35+0x8
	ldr	r0, .L35+0xc
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	CreateSpriteAndAnimate
.L33:
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xf
	bne	.L34	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L34:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	gSolarbeamSmallOrbSpriteTemplate
	.word	gBattleAnimTarget
.Lfe7:
	.size	 AnimTask_CreateSmallSolarbeamOrbs,.Lfe7-AnimTask_CreateSmallSolarbeamOrbs
	.align	2, 0
	.type	 AnimAbsorptionOrb,function
	.thumb_func
AnimAbsorptionOrb:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r6, .L38
	ldrh	r0, [r6, #0x6]
	strh	r0, [r4, #0x2e]
	ldr	r5, .L38+0x4
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L38+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimAbsorptionOrb_Step
.Lfe8:
	.size	 AnimAbsorptionOrb,.Lfe8-AnimAbsorptionOrb
	.align	2, 0
	.type	 AnimAbsorptionOrb_Step,function
	.thumb_func
AnimAbsorptionOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L41:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 AnimAbsorptionOrb_Step,.Lfe9-AnimAbsorptionOrb_Step
	.align	2, 0
	.type	 AnimHyperBeamOrb,function
	.thumb_func
AnimHyperBeamOrb:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	Random2
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x7
	and	r1, r1, r0
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r4, .L46
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x14
	b	.L45
.L47:
	.align	2, 0
.L46:
	.word	gBattleAnimAttacker
.L43:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x14
.L45:
	strh	r0, [r5, #0x20]
	bl	Random2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1f
	and	r0, r0, r1
	add	r0, r0, #0x40
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x20]
	strh	r0, [r5, #0x30]
	ldr	r4, .L48
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x22]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	add	r0, r5, #0
	bl	InitAnimFastLinearTranslationWithSpeed
	bl	Random2
	mov	r1, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x38]
	add	r0, r5, #0
	add	r0, r0, #0x43
	ldrb	r0, [r0]
	strh	r0, [r5, #0x3a]
	ldr	r1, .L48+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L49:
	.align	2, 0
.L48:
	.word	gBattleAnimTarget
	.word	AnimHyperBeamOrb_Step
.Lfe10:
	.size	 AnimHyperBeamOrb,.Lfe10-AnimHyperBeamOrb
	.align	2, 0
	.type	 AnimHyperBeamOrb_Step,function
	.thumb_func
AnimHyperBeamOrb_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimFastTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
	b	.L52
.L51:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0xc
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7e
	bgt	.L53	@cond_branch
	ldrh	r0, [r4, #0x3a]
	b	.L55
.L53:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
.L55:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x18
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
.L52:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 AnimHyperBeamOrb_Step,.Lfe11-AnimHyperBeamOrb_Step
	.align	2, 0
	.type	 AnimLeechSeed,function
	.thumb_func
AnimLeechSeed:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L58
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L57	@cond_branch
	ldr	r1, .L58+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L57:
	ldr	r4, .L58+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r5, .L58+0x8
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L58+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimLeechSeed_Step
.Lfe12:
	.size	 AnimLeechSeed,.Lfe12-AnimLeechSeed
	.align	2, 0
	.type	 AnimLeechSeed_Step,function
	.thumb_func
AnimLeechSeed_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L61	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	ldr	r0, .L62
	str	r0, [r4, #0x1c]
	ldr	r1, .L62+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
.L61:
	pop	{r4}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	WaitAnimForDuration
	.word	AnimLeechSeedSprouts
.Lfe13:
	.size	 AnimLeechSeed_Step,.Lfe13-AnimLeechSeed_Step
	.align	2, 0
	.type	 AnimLeechSeedSprouts,function
	.thumb_func
AnimLeechSeedSprouts:
	push	{r4, lr}
	add	r4, r0, #0
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x3c
	strh	r0, [r4, #0x2e]
	ldr	r0, .L65
	str	r0, [r4, #0x1c]
	ldr	r1, .L65+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe14:
	.size	 AnimLeechSeedSprouts,.Lfe14-AnimLeechSeedSprouts
	.align	2, 0
	.type	 AnimSporeParticle,function
	.thumb_func
AnimSporeParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimTarget
	ldr	r5, .L69
	ldrb	r1, [r5, #0x8]
	add	r0, r4, #0
	bl	StartSpriteAnim
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L68	@cond_branch
	ldrb	r0, [r4, #0x1]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
.L68:
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x30]
	ldr	r1, .L69+0x4
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L70:
	.align	2, 0
.L69:
	.word	gBattleAnimArgs
	.word	AnimSporeParticle_Step
.Lfe15:
	.size	 AnimSporeParticle,.Lfe15-AnimSporeParticle
	.align	2, 0
	.type	 AnimSporeParticle_Step,function
	.thumb_func
AnimSporeParticle_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	neg	r1, r1
	bl	Cos
	ldrh	r1, [r4, #0x32]
	add	r1, r1, #0x18
	strh	r1, [r4, #0x32]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L72	@cond_branch
	ldr	r0, .L77
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	b	.L76
.L78:
	.align	2, 0
.L77:
	.word	gBattleAnimTarget
.L72:
	ldr	r0, .L79
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L74	@cond_branch
	mov	r2, #0x3
.L74:
	mov	r0, #0x3
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
.L76:
	strb	r0, [r4, #0x5]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L75	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L75:
	pop	{r4}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gBattleAnimTarget
.Lfe16:
	.size	 AnimSporeParticle_Step,.Lfe16-AnimSporeParticle_Step
	.align	2, 0
	.globl	AnimTask_SporeDoubleBattle
	.type	 AnimTask_SporeDoubleBattle,function
	.thumb_func
AnimTask_SporeDoubleBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L83	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L82	@cond_branch
.L83:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L84
.L82:
	ldr	r0, .L87
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L85	@cond_branch
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, #0x3
	bl	SetAnimBgAttribute
	b	.L86
.L88:
	.align	2, 0
.L87:
	.word	gBattleAnimTarget
.L85:
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L86:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L84:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 AnimTask_SporeDoubleBattle,.Lfe17-AnimTask_SporeDoubleBattle
	.align	2, 0
	.type	 AnimPetalDanceBigFlower,function
	.thumb_func
AnimPetalDanceBigFlower:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L90
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldr	r0, .L90+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x4]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x40
	strh	r0, [r4, #0x38]
	ldr	r1, .L90+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimPetalDanceBigFlower_Step
.Lfe18:
	.size	 AnimPetalDanceBigFlower,.Lfe18-AnimPetalDanceBigFlower
	.align	2, 0
	.type	 AnimPetalDanceBigFlower_Step,function
	.thumb_func
AnimPetalDanceBigFlower_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L93	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x20
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x5
	neg	r1, r1
	bl	Cos
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	sub	r0, r0, #0x40
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7f
	bhi	.L94	@cond_branch
	ldr	r0, .L98
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	sub	r0, r0, #0x1
	b	.L97
.L99:
	.align	2, 0
.L98:
	.word	gBattleAnimAttacker
.L94:
	ldr	r0, .L100
	ldrb	r0, [r0]
	bl	GetBattlerSpriteSubpriority
	add	r0, r0, #0x1
.L97:
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L96
.L101:
	.align	2, 0
.L100:
	.word	gBattleAnimAttacker
.L93:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L96:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimPetalDanceBigFlower_Step,.Lfe19-AnimPetalDanceBigFlower_Step
	.align	2, 0
	.type	 AnimPetalDanceSmallFlower,function
	.thumb_func
AnimPetalDanceSmallFlower:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r5, .L103
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	ldr	r0, .L103+0x4
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x4]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x40
	strh	r0, [r4, #0x38]
	ldr	r1, .L103+0x8
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	AnimPetalDanceSmallFlower_Step
.Lfe20:
	.size	 AnimPetalDanceSmallFlower,.Lfe20-AnimPetalDanceSmallFlower
	.align	2, 0
	.type	 AnimPetalDanceSmallFlower_Step,function
	.thumb_func
AnimPetalDanceSmallFlower_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L106	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x38]
	add	r0, r1, #0
	sub	r0, r0, #0x3b
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bls	.L108	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0xbb
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x4
	bhi	.L107	@cond_branch
.L108:
	ldrb	r2, [r4, #0x3]
	lsl	r1, r2, #0x1a
	lsr	r1, r1, #0x1b
	mov	r0, #0x8
	eor	r1, r1, r0
	lsl	r1, r1, #0x1
	sub	r0, r0, #0x47
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
.L107:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x5
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L109
.L106:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L109:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 AnimPetalDanceSmallFlower_Step,.Lfe21-AnimPetalDanceSmallFlower_Step
	.align	2, 0
	.type	 AnimRazorLeafParticle,function
	.thumb_func
AnimRazorLeafParticle:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L111
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L111+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldr	r0, .L111+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L112:
	.align	2, 0
.L111:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimRazorLeafParticle_Step1
.Lfe22:
	.size	 AnimRazorLeafParticle,.Lfe22-AnimRazorLeafParticle
	.align	2, 0
	.type	 AnimRazorLeafParticle_Step1,function
	.thumb_func
AnimRazorLeafParticle_Step1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x32]
	mov	r2, #0x32
	ldrsh	r3, [r1, r2]
	cmp	r3, #0
	bne	.L114	@cond_branch
	ldrh	r0, [r1, #0x30]
	mov	r2, #0x1
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L115	@cond_branch
	mov	r0, #0x80
	strh	r0, [r1, #0x2e]
	strh	r3, [r1, #0x30]
	strh	r3, [r1, #0x32]
	b	.L116
.L115:
	strh	r2, [r1, #0x2e]
	strh	r2, [r1, #0x30]
	strh	r2, [r1, #0x32]
.L116:
	ldr	r0, .L118
	str	r0, [r1, #0x1c]
	b	.L117
.L119:
	.align	2, 0
.L118:
	.word	AnimRazorLeafParticle_Step2
.L114:
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x32]
	ldrh	r0, [r1, #0x2e]
	ldrh	r2, [r1, #0x20]
	add	r0, r0, r2
	strh	r0, [r1, #0x20]
	ldrh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x22]
	add	r0, r0, r2
	strh	r0, [r1, #0x22]
.L117:
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 AnimRazorLeafParticle_Step1,.Lfe23-AnimRazorLeafParticle_Step1
	.align	2, 0
	.type	 AnimRazorLeafParticle_Step2,function
	.thumb_func
AnimRazorLeafParticle_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L126
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L121	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x19
	bl	Sin
	neg	r0, r0
	b	.L125
.L127:
	.align	2, 0
.L126:
	.word	gBattleAnimAttacker
.L121:
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x19
	bl	Sin
.L125:
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L123	@cond_branch
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
.L123:
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x50
	ble	.L124	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L124:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 AnimRazorLeafParticle_Step2,.Lfe24-AnimRazorLeafParticle_Step2
	.align	2, 0
	.type	 AnimTranslateLinearSingleSineWave,function
	.thumb_func
AnimTranslateLinearSingleSineWave:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L136
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L129	@cond_branch
	ldr	r1, .L136+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L129:
	ldr	r6, .L136+0x4
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	mov	r1, #0xc
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L130	@cond_branch
	ldr	r4, .L136+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	b	.L134
.L137:
	.align	2, 0
.L136:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L130:
	ldr	r0, .L138
	ldrb	r0, [r0]
	add	r2, r5, #0
	add	r2, r2, #0x32
	add	r3, r5, #0
	add	r3, r3, #0x36
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
	ldrh	r0, [r6, #0x4]
	ldrh	r1, [r5, #0x32]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r6, #0x6]
	ldrh	r1, [r5, #0x36]
	add	r0, r0, r1
.L134:
	strh	r0, [r5, #0x36]
	ldr	r0, .L138+0x4
	ldrh	r0, [r0, #0xa]
	strh	r0, [r5, #0x38]
	add	r0, r5, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L138+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L138
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L132	@cond_branch
	mov	r0, #0x1
	b	.L135
.L139:
	.align	2, 0
.L138:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L132:
	mov	r0, #0x0
.L135:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L140
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	AnimTranslateLinearSingleSineWave_Step
.Lfe25:
	.size	 AnimTranslateLinearSingleSineWave,.Lfe25-AnimTranslateLinearSingleSineWave
	.align	2, 0
	.type	 AnimTranslateLinearSingleSineWave_Step,function
	.thumb_func
AnimTranslateLinearSingleSineWave_Step:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	mov	r7, #0x0
	ldrh	r5, [r6, #0x2e]
	ldrh	r4, [r6, #0x3c]
	mov	r0, #0x1
	strh	r0, [r6, #0x2e]
	add	r0, r6, #0
	bl	TranslateAnimHorizontalArc
	ldrh	r0, [r6, #0x3c]
	strh	r5, [r6, #0x2e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	cmp	r4, #0xc8
	ble	.L143	@cond_branch
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x37
	bgt	.L143	@cond_branch
	ldrh	r0, [r6, #0x6]
	cmp	r0, #0
	bne	.L149	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r6, #0x6]
.L143:
	ldrh	r0, [r6, #0x6]
	cmp	r0, #0
	beq	.L144	@cond_branch
.L149:
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r3, r6, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r6, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x6]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bne	.L144	@cond_branch
	mov	r7, #0x1
.L144:
	mov	r2, #0x20
	ldrsh	r0, [r6, r2]
	mov	r2, #0x24
	ldrsh	r1, [r6, r2]
	add	r0, r0, r1
	add	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bhi	.L147	@cond_branch
	mov	r0, #0x22
	ldrsh	r1, [r6, r0]
	mov	r2, #0x26
	ldrsh	r0, [r6, r2]
	add	r1, r1, r0
	cmp	r1, #0xa0
	bgt	.L147	@cond_branch
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	bge	.L146	@cond_branch
.L147:
	mov	r7, #0x1
.L146:
	cmp	r7, #0
	beq	.L148	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L148:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 AnimTranslateLinearSingleSineWave_Step,.Lfe26-AnimTranslateLinearSingleSineWave_Step
	.align	2, 0
	.globl	AnimMoveTwisterParticle
	.type	 AnimMoveTwisterParticle,function
	.thumb_func
AnimMoveTwisterParticle:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L151	@cond_branch
	ldr	r0, .L152
	ldrb	r0, [r0]
	add	r2, r4, #0
	add	r2, r2, #0x20
	add	r3, r4, #0
	add	r3, r3, #0x22
	mov	r1, #0x1
	bl	SetAverageBattlerPositions
.L151:
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x20
	strh	r0, [r4, #0x22]
	ldr	r1, .L152+0x4
	ldrh	r0, [r1]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x32]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x36]
	ldr	r0, .L152+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimMoveTwisterParticle_Step
.Lfe27:
	.size	 AnimMoveTwisterParticle,.Lfe27-AnimMoveTwisterParticle
	.align	2, 0
	.type	 AnimMoveTwisterParticle_Step,function
	.thumb_func
AnimMoveTwisterParticle_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	bne	.L155	@cond_branch
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x22]
	b	.L156
.L155:
	cmp	r0, #0
	ble	.L156	@cond_branch
	ldrh	r0, [r4, #0x22]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x22]
	sub	r0, r1, #0x2
	strh	r0, [r4, #0x30]
.L156:
	ldrh	r3, [r4, #0x32]
	ldrh	r5, [r4, #0x38]
	add	r2, r3, r5
	strh	r2, [r4, #0x38]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r5, #0x36
	ldrsh	r0, [r4, r5]
	cmp	r1, r0
	bge	.L158	@cond_branch
	add	r0, r2, r3
	strh	r0, [r4, #0x38]
.L158:
	ldrh	r1, [r4, #0x38]
	mov	r0, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r5, #0x38
	ldrsh	r0, [r4, r5]
	mov	r1, #0x5
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L159	@cond_branch
	ldr	r0, .L163
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	b	.L162
.L164:
	.align	2, 0
.L163:
	.word	gBattleAnimTarget
.L159:
	ldr	r0, .L165
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
.L162:
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L161	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L161:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	gBattleAnimTarget
.Lfe28:
	.size	 AnimMoveTwisterParticle_Step,.Lfe28-AnimMoveTwisterParticle_Step
	.align	2, 0
	.type	 AnimConstrictBinding,function
	.thumb_func
AnimConstrictBinding:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r4, .L168
	ldrb	r1, [r4, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAffineAnim
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x3a]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r5, #0x3c]
	ldr	r0, .L168+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	gBattleAnimArgs
	.word	AnimConstrictBinding_Step1
.Lfe29:
	.size	 AnimConstrictBinding,.Lfe29-AnimConstrictBinding
	.align	2, 0
	.type	 AnimConstrictBinding_Step1,function
	.thumb_func
AnimConstrictBinding_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L172
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L172+0x4
	cmp	r1, r0
	bne	.L171	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldr	r0, .L172+0x8
	str	r0, [r4, #0x1c]
.L171:
	pop	{r4}
	pop	{r0}
	bx	r0
.L173:
	.align	2, 0
.L172:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	AnimConstrictBinding_Step2
.Lfe30:
	.size	 AnimConstrictBinding_Step1,.Lfe30-AnimConstrictBinding_Step1
	.align	2, 0
	.type	 AnimConstrictBinding_Step2,function
	.thumb_func
AnimConstrictBinding_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L175	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0xb
	b	.L181
.L175:
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0xb
.L181:
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	bne	.L177	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x32]
.L177:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldrh	r0, [r4, #0x3c]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L179	@cond_branch
	ldrh	r1, [r4, #0x3a]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	b	.L178
.L179:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L178:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 AnimConstrictBinding_Step2,.Lfe31-AnimConstrictBinding_Step2
	.align	2, 0
	.globl	AnimTask_ShrinkTargetCopy
	.type	 AnimTask_ShrinkTargetCopy,function
	.thumb_func
AnimTask_ShrinkTargetCopy:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L185
	mov	sl, r0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r2, sl
	add	r7, r0, r2
	add	r0, r7, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L183	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L184
.L186:
	.align	2, 0
.L185:
	.word	gSprites
.L183:
	add	r0, r1, #0
	mov	r1, #0x1
	bl	PrepareBattlerSpriteForRotScale
	ldr	r0, .L187
	lsl	r6, r4, #0x2
	add	r6, r6, r4
	lsl	r6, r6, #0x3
	add	r6, r6, r0
	ldrb	r0, [r7, #0x5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strh	r0, [r6, #0x24]
	ldr	r0, .L187+0x4
	mov	r9, r0
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	mov	r8, r1
	mov	r1, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r7, #0x5]
	mov	r5, #0xd
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0x5]
	mov	r0, #0x3
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	lsl	r4, r1, #0x4
	add	r4, r4, r1
	lsl	r4, r4, #0x2
	add	r4, r4, sl
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	strh	r0, [r6, #0x26]
	mov	r2, r9
	ldrb	r1, [r2]
	mov	r0, #0x2
	eor	r0, r0, r1
	bl	GetBattlerSpriteBGPriority
	mov	r1, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r0, [r4, #0x5]
	and	r5, r5, r0
	orr	r5, r5, r1
	strb	r5, [r4, #0x5]
	ldr	r1, .L187+0x8
	ldrh	r0, [r1]
	strh	r0, [r6, #0x8]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r6, #0xa]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r6, #0x1e]
	ldr	r0, .L187+0xc
	str	r0, [r6]
.L184:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L188:
	.align	2, 0
.L187:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimTask_DuplicateAndShrinkToPos_Step1
.Lfe32:
	.size	 AnimTask_ShrinkTargetCopy,.Lfe32-AnimTask_ShrinkTargetCopy
	.align	2, 0
	.type	 AnimTask_DuplicateAndShrinkToPos_Step1,function
	.thumb_func
AnimTask_DuplicateAndShrinkToPos_Step1:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L192
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x8]
	ldrh	r0, [r4, #0x1c]
	add	r1, r1, r0
	strh	r1, [r4, #0x1c]
	ldr	r2, .L192+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r5, #0x24]
	ldr	r0, .L192+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	ldrh	r0, [r5, #0x24]
	neg	r0, r0
	strh	r0, [r5, #0x24]
.L190:
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x10
	strh	r0, [r4, #0x1e]
	mov	r0, #0x1e
	ldrsh	r2, [r4, r0]
	add	r0, r6, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	add	r0, r6, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L191	@cond_branch
	strh	r0, [r4, #0x8]
	ldr	r0, .L192+0xc
	str	r0, [r4]
.L191:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L193:
	.align	2, 0
.L192:
	.word	gTasks
	.word	gSprites
	.word	gBattleAnimTarget
	.word	AnimTask_DuplicateAndShrinkToPos_Step2
.Lfe33:
	.size	 AnimTask_DuplicateAndShrinkToPos_Step1,.Lfe33-AnimTask_DuplicateAndShrinkToPos_Step1
	.align	2, 0
	.type	 AnimTask_DuplicateAndShrinkToPos_Step2,function
	.thumb_func
AnimTask_DuplicateAndShrinkToPos_Step2:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L200
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L200+0x4
	cmp	r1, r0
	bne	.L195	@cond_branch
	ldr	r0, .L200+0x8
	lsl	r2, r3, #0x2
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r7, r1, r0
	mov	r1, #0x8
	ldrsh	r5, [r7, r1]
	add	r4, r0, #0
	cmp	r5, #0
	bne	.L197	@cond_branch
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	ldr	r6, .L200+0xc
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	strh	r5, [r1, #0x24]
	strh	r5, [r1, #0x26]
	mov	r5, #0x3
	ldrh	r2, [r7, #0x24]
	and	r2, r2, r5
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r4, #0xd
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	mov	r0, #0x3
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r7, #0x26]
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r1, #0x5]
	and	r4, r4, r2
	orr	r4, r4, r0
	strb	r4, [r1, #0x5]
	ldrh	r0, [r7, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r7, #0x8]
	b	.L194
.L201:
	.align	2, 0
.L200:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
	.word	gSprites
.L195:
	ldr	r1, .L202
	lsl	r2, r3, #0x2
	add	r0, r2, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0x8
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0
	beq	.L194	@cond_branch
.L197:
	add	r1, r2, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	bne	.L194	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L194:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	gTasks
.Lfe34:
	.size	 AnimTask_DuplicateAndShrinkToPos_Step2,.Lfe34-AnimTask_DuplicateAndShrinkToPos_Step2
	.align	2, 0
	.type	 AnimMimicOrb,function
	.thumb_func
AnimMimicOrb:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L206	@cond_branch
	cmp	r0, #0x1
	beq	.L208	@cond_branch
	b	.L205
.L206:
	ldr	r6, .L212
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L207	@cond_branch
	ldr	r1, .L212+0x4
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1]
.L207:
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L212+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	b	.L205
.L213:
	.align	2, 0
.L212:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L208:
	add	r2, r5, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	add	r0, r5, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L205	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	mov	r0, #0x19
	strh	r0, [r5, #0x2e]
	ldr	r4, .L214
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L214+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L214+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L205:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L215:
	.align	2, 0
.L214:
	.word	gBattleAnimAttacker
	.word	InitAndRunAnimFastLinearTranslation
	.word	DestroyAnimSprite
.Lfe35:
	.size	 AnimMimicOrb,.Lfe35-AnimMimicOrb
	.align	2, 0
	.type	 AnimIngrainRoot,function
	.thumb_func
AnimIngrainRoot:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L217	@cond_branch
	ldr	r4, .L219
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L219+0x4
	ldrh	r0, [r4]
	strh	r0, [r5, #0x24]
	ldrh	r0, [r4, #0x2]
	strh	r0, [r5, #0x26]
	ldrb	r0, [r4, #0x4]
	add	r0, r0, #0x1e
	add	r1, r5, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r4, #0x6]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	mov	r2, #0x22
	ldrsh	r0, [r5, r2]
	mov	r2, #0x26
	ldrsh	r1, [r5, r2]
	add	r0, r0, r1
	cmp	r0, #0x78
	ble	.L217	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r1, r0, #0
	sub	r1, r1, #0x78
	ldrh	r2, [r5, #0x26]
	add	r0, r0, r2
	add	r1, r1, r0
	strh	r1, [r5, #0x22]
.L217:
	ldr	r0, .L219+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimRootFlickerOut
.Lfe36:
	.size	 AnimIngrainRoot,.Lfe36-AnimIngrainRoot
	.align	2, 0
	.type	 AnimFrenzyPlantRoot,function
	.thumb_func
AnimFrenzyPlantRoot:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	mov	r9, r0
	ldr	r4, .L222
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L222+0x4
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	sub	r4, r4, r5
	lsl	r4, r4, #0x10
	lsr	r2, r2, #0x18
	mov	r1, r8
	sub	r2, r2, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsr	r3, r4, #0x10
	mov	sl, r3
	asr	r4, r4, #0x10
	ldr	r6, .L222+0x8
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	mul	r0, r0, r4
	mov	r1, #0x64
	str	r2, [sp]
	bl	__divsi3
	add	r5, r5, r0
	mov	r3, r9
	strh	r5, [r3, #0x20]
	ldr	r2, [sp]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x0
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	add	r8, r8, r0
	mov	r1, r8
	mov	r0, r9
	strh	r1, [r0, #0x22]
	ldrh	r0, [r6, #0x2]
	mov	r3, r9
	strh	r0, [r3, #0x24]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r3, #0x26]
	ldrb	r0, [r6, #0x6]
	add	r0, r0, #0x1e
	mov	r1, r9
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0x8]
	mov	r0, r9
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0xa]
	mov	r1, r9
	strh	r0, [r1, #0x32]
	ldr	r0, .L222+0xc
	str	r0, [r1, #0x1c]
	ldr	r1, .L222+0x10
	mov	r3, r9
	ldrh	r0, [r3, #0x20]
	strh	r0, [r1]
	ldrh	r0, [r3, #0x22]
	strh	r0, [r1, #0x2]
	mov	r0, sl
	strh	r0, [r1, #0x4]
	ldr	r2, [sp]
	strh	r2, [r1, #0x6]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimRootFlickerOut
	.word	gUnknown_0203A0F8
.Lfe37:
	.size	 AnimFrenzyPlantRoot,.Lfe37-AnimFrenzyPlantRoot
	.align	2, 0
	.type	 AnimRootFlickerOut,function
	.thumb_func
AnimRootFlickerOut:
	push	{lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	add	r1, r1, #0x1
	strh	r1, [r3, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	sub	r0, r0, #0xa
	cmp	r1, r0
	ble	.L225	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r3, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	mov	r2, #0x3e
	add	r2, r2, r3
	mov	ip, r2
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
.L225:
	mov	r2, #0x2e
	ldrsh	r1, [r3, r2]
	mov	r2, #0x32
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	ble	.L226	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L226:
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 AnimRootFlickerOut,.Lfe38-AnimRootFlickerOut
	.align	2, 0
	.type	 AnimIngrainOrb,function
	.thumb_func
AnimIngrainOrb:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L228	@cond_branch
	ldr	r5, .L230
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L230+0x4
	lsr	r0, r0, #0x18
	ldrh	r2, [r4]
	add	r0, r0, r2
	strh	r0, [r6, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	strh	r0, [r6, #0x22]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r6, #0x30]
	ldrh	r0, [r4, #0x6]
	strh	r0, [r6, #0x32]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x34]
.L228:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2e]
	ldrh	r1, [r6, #0x30]
	mul	r0, r0, r1
	strh	r0, [r6, #0x24]
	mov	r2, #0x2e
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, #0xff
	and	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r6, r2]
	bl	Sin
	strh	r0, [r6, #0x26]
	mov	r0, #0x2e
	ldrsh	r1, [r6, r0]
	mov	r2, #0x34
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	ble	.L229	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L229:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe39:
	.size	 AnimIngrainOrb,.Lfe39-AnimIngrainOrb
	.align	2, 0
	.type	 sub_80FF9B8,function
	.thumb_func
sub_80FF9B8:
	push	{r4, r5, lr}
	mov	r2, #0x20
	ldrsh	r4, [r0, r2]
	lsl	r4, r4, #0x8
	mov	r3, #0x22
	ldrsh	r2, [r0, r3]
	orr	r4, r4, r2
	mov	r5, #0x3a
	ldrsh	r2, [r0, r5]
	lsl	r2, r2, #0x8
	mov	r5, #0x3c
	ldrsh	r3, [r0, r5]
	orr	r2, r2, r3
	lsl	r1, r1, #0x8
	strh	r4, [r0, #0x38]
	strh	r2, [r0, #0x3a]
	strh	r1, [r0, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 sub_80FF9B8,.Lfe40-sub_80FF9B8
	.align	2, 0
	.globl	moveAlongLinearPath
	.type	 moveAlongLinearPath,function
	.thumb_func
moveAlongLinearPath:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r8, r0
	ldrh	r0, [r0, #0x38]
	lsr	r1, r0, #0x8
	mov	sl, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r1, r8
	ldrh	r0, [r1, #0x3a]
	lsr	r2, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrh	r1, [r1, #0x3c]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r3, #0xff
	and	r3, r3, r1
	cmp	r2, #0
	bne	.L234	@cond_branch
	mov	r2, #0x20
	neg	r2, r2
	b	.L235
.L234:
	cmp	r2, #0xff
	bne	.L235	@cond_branch
	mov	r2, #0x88
	lsl	r2, r2, #0x1
.L235:
	mov	r0, r9
	sub	r4, r4, r0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, sl
	sub	r0, r2, r1
	lsl	r5, r3, #0x10
	asr	r5, r5, #0x10
	mul	r0, r0, r5
	lsl	r1, r6, #0x10
	asr	r7, r1, #0x10
	add	r1, r7, #0
	bl	__divsi3
	add	r6, r0, #0
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, r4
	mul	r0, r0, r5
	add	r1, r7, #0
	bl	__divsi3
	add	r6, r6, sl
	mov	r1, r8
	strh	r6, [r1, #0x20]
	add	r0, r0, r9
	strh	r0, [r1, #0x22]
	add	r5, r5, #0x1
	lsl	r5, r5, #0x10
	lsr	r3, r5, #0x10
	asr	r5, r5, #0x10
	cmp	r5, r7
	beq	.L237	@cond_branch
	lsl	r1, r7, #0x8
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x10
	orr	r0, r0, r1
	mov	r1, r8
	strh	r0, [r1, #0x3c]
	mov	r0, #0x0
	b	.L238
.L237:
	mov	r0, #0x1
.L238:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 moveAlongLinearPath,.Lfe41-moveAlongLinearPath
	.align	2, 0
	.type	 AnimItemSteal_Step2,function
	.thumb_func
AnimItemSteal_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xa
	bne	.L240	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L240:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	ble	.L241	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L241:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 AnimItemSteal_Step2,.Lfe42-AnimItemSteal_Step2
	.align	2, 0
	.type	 AnimItemSteal_Step1,function
	.thumb_func
AnimItemSteal_Step1:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L243	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L243:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	moveAlongLinearPath
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L244	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L245
	str	r0, [r4, #0x1c]
.L244:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L246:
	.align	2, 0
.L245:
	.word	AnimItemSteal_Step2
.Lfe43:
	.size	 AnimItemSteal_Step1,.Lfe43-AnimItemSteal_Step1
	.align	2, 0
	.type	 AnimPresent,function
	.thumb_func
AnimPresent:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	ldr	r4, .L251
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L251+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L248	@cond_branch
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80FF9B8
	mov	r0, #0x1
	b	.L250
.L252:
	.align	2, 0
.L251:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
.L248:
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80FF9B8
	mov	r0, #0x3
.L250:
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L253
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L254:
	.align	2, 0
.L253:
	.word	AnimItemSteal_Step1
.Lfe44:
	.size	 AnimPresent,.Lfe44-AnimPresent
	.align	2, 0
	.type	 sub_80FFB90,function
	.thumb_func
sub_80FFB90:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L256	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L256:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	bl	moveAlongLinearPath
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L257	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L257:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 sub_80FFB90,.Lfe45-sub_80FFB90
	.align	2, 0
	.type	 AnimKnockOffItem,function
	.thumb_func
AnimKnockOffItem:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r4, .L263
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L259	@cond_branch
	strh	r0, [r5, #0x3a]
	add	r0, r6, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x28
	bl	sub_80FF9B8
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L263+0x4
	b	.L262
.L264:
	.align	2, 0
.L263:
	.word	gBattleAnimTarget
	.word	AnimItemSteal_Step1
.L259:
	mov	r0, #0xff
	strh	r0, [r5, #0x3a]
	add	r0, r6, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L261	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x3a]
.L261:
	add	r0, r5, #0
	mov	r1, #0x28
	bl	sub_80FF9B8
	mov	r0, #0x3
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L265
.L262:
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L266:
	.align	2, 0
.L265:
	.word	sub_80FFB90
.Lfe46:
	.size	 AnimKnockOffItem,.Lfe46-AnimKnockOffItem
	.align	2, 0
	.type	 AnimPresentHealParticle,function
	.thumb_func
AnimPresentHealParticle:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L268	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L270
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x30]
.L268:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	mul	r0, r0, r1
	strh	r0, [r4, #0x26]
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L269	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L269:
	pop	{r4}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gBattleAnimArgs
.Lfe47:
	.size	 AnimPresentHealParticle,.Lfe47-AnimPresentHealParticle
	.align	2, 0
	.type	 AnimItemSteal,function
	.thumb_func
AnimItemSteal:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	ldr	r4, .L276
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L276+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	ldrb	r4, [r4]
	cmp	r0, r4
	bne	.L273	@cond_branch
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80FF9B8
	mov	r0, #0x1
	b	.L275
.L277:
	.align	2, 0
.L276:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L273:
	strh	r6, [r5, #0x3a]
	add	r0, r2, #0
	add	r0, r0, #0xa
	strh	r0, [r5, #0x3c]
	add	r0, r5, #0
	mov	r1, #0x3c
	bl	sub_80FF9B8
	mov	r0, #0x3
.L275:
	strh	r0, [r5, #0x34]
	mov	r0, #0x3c
	strh	r0, [r5, #0x36]
	ldr	r0, .L278
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	AnimItemSteal_Step3
.Lfe48:
	.size	 AnimItemSteal,.Lfe48-AnimItemSteal
	.align	2, 0
	.type	 AnimItemSteal_Step3,function
	.thumb_func
AnimItemSteal_Step3:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x7
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	ldrh	r1, [r4, #0x2e]
	add	r1, r1, r0
	mov	r5, #0x0
	strh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x7f
	ble	.L281	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x2e]
.L281:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x80
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	lsl	r2, r2, #0x3
	mov	r1, #0x1e
	sub	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L282	@cond_branch
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7d
	bl	PlaySE12WithPanning
.L282:
	add	r0, r4, #0
	bl	moveAlongLinearPath
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L283	@cond_branch
	strh	r5, [r4, #0x26]
	strh	r5, [r4, #0x2e]
	ldr	r0, .L284
	str	r0, [r4, #0x1c]
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x7d
	bl	PlaySE12WithPanning
.L283:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	AnimItemSteal_Step2
.Lfe49:
	.size	 AnimItemSteal_Step3,.Lfe49-AnimItemSteal_Step3
	.align	2, 0
	.type	 AnimTrickBag,function
	.thumb_func
AnimTrickBag:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L287	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L288	@cond_branch
	ldr	r0, .L295
	ldrh	r1, [r0, #0x2]
	strh	r1, [r4, #0x30]
	mov	r1, #0x78
	strh	r1, [r4, #0x20]
	add	r5, r0, #0
	b	.L289
.L296:
	.align	2, 0
.L295:
	.word	gBattleAnimArgs
.L288:
	ldr	r0, .L297
	mov	r1, #0x2
	ldrsh	r3, [r0, r1]
	add	r1, r3, #0
	sub	r1, r1, #0x20
	add	r2, r1, #0
	add	r5, r0, #0
	cmp	r1, #0
	bge	.L290	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0xdf
.L290:
	asr	r0, r2, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	strh	r0, [r4, #0x30]
	mov	r0, #0x46
	strh	r0, [r4, #0x20]
.L289:
	ldrh	r0, [r5]
	strh	r0, [r4, #0x22]
	strh	r0, [r4, #0x32]
	mov	r0, #0x14
	strh	r0, [r4, #0x36]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3c
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	ldr	r0, .L297+0x4
	str	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xbe
	bhi	.L292	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
	b	.L294
.L298:
	.align	2, 0
.L297:
	.word	gBattleAnimArgs
	.word	AnimTrickBag_Step1
.L292:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
.L294:
	strb	r0, [r1]
.L287:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 AnimTrickBag,.Lfe50-AnimTrickBag
	.align	2, 0
	.type	 AnimTrickBag_Step1,function
	.thumb_func
AnimTrickBag_Step1:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L301	@cond_branch
	cmp	r0, #0x1
	beq	.L304	@cond_branch
	b	.L300
.L301:
	ldrh	r5, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4e
	ble	.L302	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L300
.L302:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__divsi3
	add	r0, r5, r0
	strh	r0, [r4, #0x32]
	ldrh	r1, [r4, #0x36]
	add	r1, r1, #0x3
	strh	r1, [r4, #0x36]
	strh	r0, [r4, #0x22]
	b	.L300
.L304:
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L300	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L300	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	strh	r0, [r4, #0x32]
	ldr	r0, .L308
	str	r0, [r4, #0x1c]
.L300:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	AnimTrickBag_Step2
.Lfe51:
	.size	 AnimTrickBag_Step1,.Lfe51-AnimTrickBag_Step1
	.align	2, 0
	.type	 AnimTrickBag_Step2,function
	.thumb_func
AnimTrickBag_Step2:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L318
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r3, r0, r1
	add	r0, r5, #0x1
	add	r0, r3, r0
	ldrh	r2, [r4, #0x32]
	mov	r6, #0x32
	ldrsh	r1, [r4, r6]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r1, r0
	bne	.L311	@cond_branch
	add	r0, r5, #0x2
	add	r0, r3, r0
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x7f
	bne	.L312	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L318+0x4
	str	r0, [r4, #0x1c]
.L312:
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L313
.L319:
	.align	2, 0
.L318:
	.word	gTrickBagCoordinates
	.word	AnimTrickBag_Step3
.L311:
	add	r0, r2, #0x1
	strh	r0, [r4, #0x32]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	add	r1, r0, r5
	mov	r2, #0x0
	ldrsb	r2, [r1, r2]
	add	r1, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mul	r0, r0, r2
	ldrh	r1, [r4, #0x30]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x30]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L314	@cond_branch
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xbe
	bhi	.L315	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1f
	b	.L317
.L315:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x1d
.L317:
	strb	r0, [r1]
.L314:
	mov	r6, #0x30
	ldrsh	r0, [r4, r6]
	mov	r1, #0x3c
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
.L313:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 AnimTrickBag_Step2,.Lfe52-AnimTrickBag_Step2
	.align	2, 0
	.type	 AnimTrickBag_Step3,function
	.thumb_func
AnimTrickBag_Step3:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x14
	ble	.L321	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L321:
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsr	r0, r1, #0x1f
	add	r0, r1, r0
	asr	r0, r0, #0x1
	lsl	r0, r0, #0x1
	sub	r1, r1, r0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	mov	r0, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 AnimTrickBag_Step3,.Lfe53-AnimTrickBag_Step3
	.align	2, 0
	.globl	AnimTask_LeafBlade
	.type	 AnimTask_LeafBlade,function
	.thumb_func
AnimTask_LeafBlade:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L326
	add	r5, r0, r1
	ldr	r4, .L326+0x4
	ldrb	r0, [r4]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	strh	r0, [r5, #0x10]
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x16]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x1c]
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r5, #0x1e]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0x1
	bne	.L323	@cond_branch
	mov	r1, #0x1
.L323:
	strh	r1, [r5, #0x12]
	mov	r3, #0x12
	ldrsh	r0, [r5, r3]
	lsl	r0, r0, #0x6
	mov	r1, #0x38
	sub	r1, r1, r0
	strh	r1, [r5, #0x1a]
	ldrh	r0, [r5, #0x16]
	sub	r0, r0, r1
	ldrh	r1, [r5, #0x14]
	add	r0, r0, r1
	strh	r0, [r5, #0x18]
	ldr	r0, .L326+0x8
	mov	r2, #0x18
	ldrsh	r1, [r5, r2]
	mov	r3, #0x1a
	ldrsh	r2, [r5, r3]
	ldrb	r3, [r5, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0xc]
	cmp	r0, #0x40
	bne	.L325	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L325:
	ldr	r4, .L326+0xc
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xa
	strh	r1, [r0, #0x2e]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r5, #0x18]
	strh	r1, [r0, #0x30]
	mov	r3, #0xc
	ldrsh	r0, [r5, r3]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r5, r3]
	mul	r1, r1, r0
	ldrh	r0, [r5, #0x14]
	sub	r0, r0, r1
	strh	r0, [r2, #0x32]
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r5, #0x1a]
	strh	r1, [r0, #0x34]
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, #0x1e
	ldrsh	r0, [r5, r2]
	lsr	r2, r0, #0x1f
	add	r0, r0, r2
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r2, [r5, r3]
	mul	r0, r0, r2
	ldrh	r2, [r5, #0x16]
	add	r0, r0, r2
	strh	r0, [r1, #0x36]
	mov	r3, #0xc
	ldrsh	r1, [r5, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	LeafBladeGetPosFactor
	mov	r1, #0xc
	ldrsh	r2, [r5, r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	strh	r0, [r1, #0x38]
	mov	r2, #0xc
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	InitAnimArcTranslation
	ldr	r0, .L326+0x10
	str	r0, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	gTasks
	.word	gBattleAnimTarget
	.word	gLeafBladeSpriteTemplate
	.word	gSprites
	.word	AnimTask_LeafBlade_Step
.Lfe54:
	.size	 AnimTask_LeafBlade,.Lfe54-AnimTask_LeafBlade
	.align	2, 0
	.type	 AnimTask_LeafBlade_Step,function
	.thumb_func
AnimTask_LeafBlade_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L362
	add	r6, r0, r1
	mov	r0, #0xc
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L362+0x4
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r5, [r6, r1]
	cmp	r5, #0x7
	bne	.LCB4111
	b	.L343	@long jump
.LCB4111:
	cmp	r5, #0x7
	bgt	.L356	@cond_branch
	cmp	r5, #0x3
	bne	.LCB4115
	b	.L339	@long jump
.LCB4115:
	cmp	r5, #0x3
	bgt	.L357	@cond_branch
	cmp	r5, #0x1
	beq	.L336	@cond_branch
	cmp	r5, #0x1
	bgt	.L337	@cond_branch
	cmp	r5, #0
	beq	.L334	@cond_branch
	b	.L329
.L363:
	.align	2, 0
.L362:
	.word	gTasks
	.word	gSprites
.L357:
	cmp	r5, #0x5
	bne	.LCB4135
	b	.L340	@long jump
.LCB4135:
	cmp	r5, #0x5
	ble	.LCB4137
	b	.L341	@long jump
.LCB4137:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4147
	b	.L329	@long jump
.LCB4147:
	mov	r0, #0x5
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L356:
	cmp	r5, #0xb
	bne	.LCB4155
	b	.L347	@long jump
.LCB4155:
	cmp	r5, #0xb
	bgt	.L358	@cond_branch
	cmp	r5, #0x9
	bne	.LCB4159
	b	.L344	@long jump
.LCB4159:
	cmp	r5, #0x9
	ble	.LCB4161
	b	.L345	@long jump
.LCB4161:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4171
	b	.L329	@long jump
.LCB4171:
	mov	r0, #0x9
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L358:
	cmp	r5, #0xd
	bne	.LCB4179
	b	.L350	@long jump
.LCB4179:
	cmp	r5, #0xd
	bge	.LCB4181
	b	.L348	@long jump
.LCB4181:
	cmp	r5, #0xff
	bne	.LCB4183
	b	.L352	@long jump
.LCB4183:
	b	.L329
.L334:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4200
	b	.L329	@long jump
.LCB4200:
	mov	r0, #0x1
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L336:
	ldrh	r2, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r2, r2, r3
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x14]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	ldrh	r0, [r6, #0x10]
	add	r0, r0, #0x2
	strh	r0, [r6, #0x10]
	strh	r5, [r6, #0xe]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L337:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4264
	b	.L329	@long jump
.LCB4264:
	mov	r0, #0x3
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L339:
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x14]
	sub	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x16]
	sub	r0, r0, r1
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	mov	r0, #0x2
	strh	r0, [r6, #0xe]
	ldrh	r0, [r6, #0x10]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L340:
	ldrh	r1, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r1, r1, r3
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	ldrh	r1, [r6, #0x14]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r2, #0x1e
	ldrsh	r0, [r6, r2]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r0, r0, r1
	ldrh	r1, [r6, #0x16]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	sub	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x3
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L341:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB4420
	b	.L329	@long jump
.LCB4420:
	mov	r0, #0x7
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L343:
	ldrh	r2, [r4, #0x24]
	ldrh	r3, [r4, #0x20]
	add	r2, r2, r3
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x14]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x16]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	add	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x4
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L344:
	ldrh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r1, [r4, #0x20]
	ldrh	r2, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r2, r2, r3
	strh	r2, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r3, #0x12
	ldrsh	r1, [r6, r3]
	mul	r1, r1, r0
	ldrh	r0, [r6, #0x14]
	sub	r0, r0, r1
	strh	r0, [r4, #0x32]
	strh	r2, [r4, #0x34]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r0, #0xa
	mov	r2, #0x12
	ldrsh	r1, [r6, r2]
	mul	r0, r0, r1
	ldrh	r3, [r6, #0x16]
	add	r0, r0, r3
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	mov	r0, #0x5
	strh	r0, [r6, #0xe]
	ldrh	r0, [r6, #0x10]
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L345:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	mov	r0, #0xb
	strh	r0, [r6, #0x26]
	mov	r0, #0xff
	b	.L361
.L347:
	ldrh	r2, [r4, #0x24]
	ldrh	r0, [r4, #0x20]
	add	r2, r2, r0
	mov	r0, #0x0
	strh	r2, [r4, #0x20]
	ldrh	r1, [r4, #0x26]
	ldrh	r3, [r4, #0x22]
	add	r1, r1, r3
	strh	r1, [r4, #0x22]
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0xa
	strh	r0, [r4, #0x2e]
	strh	r2, [r4, #0x30]
	ldrh	r0, [r6, #0x18]
	strh	r0, [r4, #0x32]
	strh	r1, [r4, #0x34]
	ldrh	r0, [r6, #0x1a]
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	LeafBladeGetPosFactor
	strh	r0, [r4, #0x38]
	ldrh	r1, [r6, #0x10]
	sub	r1, r1, #0x2
	strh	r1, [r6, #0x10]
	mov	r0, #0x6
	strh	r0, [r6, #0xe]
	add	r0, r4, #0
	add	r0, r0, #0x43
	strb	r1, [r0]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L348:
	add	r0, r6, #0
	add	r1, r2, #0
	bl	AnimTask_LeafBlade_Step2
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	b	.L361
.L350:
	mov	r1, #0x20
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L329	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L329
.L352:
	ldrh	r0, [r6, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L329	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0xa]
	ldrh	r0, [r6, #0x26]
.L361:
	strh	r0, [r6, #0x8]
.L329:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 AnimTask_LeafBlade_Step,.Lfe55-AnimTask_LeafBlade_Step
	.align	2, 0
	.type	 LeafBladeGetPosFactor,function
	.thumb_func
LeafBladeGetPosFactor:
	push	{lr}
	mov	r2, #0x8
	mov	r3, #0x36
	ldrsh	r1, [r0, r3]
	mov	r3, #0x22
	ldrsh	r0, [r0, r3]
	cmp	r1, r0
	bge	.L365	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
.L365:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 LeafBladeGetPosFactor,.Lfe56-LeafBladeGetPosFactor
	.align	2, 0
	.type	 AnimTask_LeafBlade_Step2,function
	.thumb_func
AnimTask_LeafBlade_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldrh	r0, [r6, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L367	@cond_branch
	mov	r0, #0x0
	strh	r0, [r6, #0x24]
	ldr	r0, .L369
	mov	r8, r0
	mov	r2, #0xc
	ldrsh	r1, [r6, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	ldrh	r2, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r2, r2, r0
	ldr	r0, .L369+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldrb	r3, [r6, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L367	@cond_branch
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	mov	r0, r8
	add	r4, r5, r0
	strh	r7, [r4, #0x3a]
	mov	r0, #0xc
	strh	r0, [r4, #0x3c]
	ldr	r0, .L369+0x8
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
	ldrh	r2, [r6, #0x22]
	mov	r0, #0x1
	and	r0, r0, r2
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	ldrb	r1, [r6, #0xe]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldrh	r0, [r6, #0x10]
	add	r4, r4, #0x43
	strb	r0, [r4]
	mov	r0, r8
	add	r0, r0, #0x1c
	add	r5, r5, r0
	ldr	r0, .L369+0xc
	str	r0, [r5]
.L367:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	gSprites
	.word	gLeafBladeSpriteTemplate
	.word	gTasks
	.word	AnimTask_LeafBlade_Step2_Callback
.Lfe57:
	.size	 AnimTask_LeafBlade_Step2,.Lfe57-AnimTask_LeafBlade_Step2
	.align	2, 0
	.type	 AnimTask_LeafBlade_Step2_Callback,function
	.thumb_func
AnimTask_LeafBlade_Step2_Callback:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L372	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L372	@cond_branch
	ldr	r3, .L374
	mov	r0, #0x3c
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x3a
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	DestroySprite
.L372:
	pop	{r4}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	gTasks
.Lfe58:
	.size	 AnimTask_LeafBlade_Step2_Callback,.Lfe58-AnimTask_LeafBlade_Step2_Callback
	.align	2, 0
	.type	 AnimFlyingParticle,function
	.thumb_func
AnimFlyingParticle:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	ldr	r0, .L393
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L377	@cond_branch
	ldr	r0, .L393+0x4
	b	.L389
.L394:
	.align	2, 0
.L393:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L377:
	ldr	r0, .L395
.L389:
	ldrb	r6, [r0]
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L379	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x36]
	ldr	r1, .L395+0x4
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x32]
	ldr	r0, .L395+0x8
	b	.L390
.L396:
	.align	2, 0
.L395:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xfff0
.L379:
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	ldr	r1, .L397
	ldrh	r0, [r1, #0x6]
	neg	r0, r0
	strh	r0, [r4, #0x32]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
.L390:
	strh	r0, [r4, #0x20]
	add	r7, r1, #0
	add	r5, r7, #0
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x34]
	mov	r1, #0xa
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L383	@cond_branch
	cmp	r0, #0x1
	bgt	.L388	@cond_branch
	cmp	r0, #0
	beq	.L382	@cond_branch
	b	.L381
.L398:
	.align	2, 0
.L397:
	.word	gBattleAnimArgs
.L388:
	cmp	r0, #0x2
	beq	.L384	@cond_branch
	cmp	r0, #0x3
	beq	.L385	@cond_branch
	b	.L381
.L382:
	ldrh	r0, [r5]
	b	.L391
.L383:
	ldrh	r0, [r5]
	strh	r0, [r4, #0x22]
	b	.L392
.L384:
	add	r0, r6, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5]
	add	r0, r0, r5
.L391:
	strh	r0, [r4, #0x22]
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	b	.L381
.L385:
	ldr	r0, .L399
	ldrb	r0, [r0]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r7, [r7]
	add	r0, r0, r7
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	bl	GetAnimBattlerSpriteId
.L392:
	add	r0, r6, #0
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r4, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x5]
.L381:
	ldr	r0, .L399+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L400:
	.align	2, 0
.L399:
	.word	gBattleAnimTarget
	.word	AnimFlyingParticle_Step
.Lfe59:
	.size	 AnimFlyingParticle,.Lfe59-AnimFlyingParticle
	.align	2, 0
	.type	 AnimFlyingParticle_Step,function
	.thumb_func
AnimFlyingParticle_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x3c
	ldrsh	r3, [r4, r0]
	ldrh	r0, [r4, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3c]
	mov	r1, #0x30
	ldrsh	r2, [r4, r1]
	ldr	r1, .L406
	mov	r5, #0x2e
	ldrsh	r0, [r4, r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mul	r0, r0, r2
	asr	r0, r0, #0x8
	strh	r0, [r4, #0x26]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mul	r0, r0, r3
	strh	r0, [r4, #0x24]
	mov	r5, #0x34
	ldrsh	r0, [r4, r5]
	mul	r0, r0, r3
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L402	@cond_branch
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	mov	r5, #0x20
	ldrsh	r1, [r4, r5]
	add	r0, r0, r1
	cmp	r0, #0xf7
	ble	.L401	@cond_branch
	b	.L404
.L407:
	.align	2, 0
.L406:
	.word	gSineTable
.L402:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r2, #0x20
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x10
	neg	r1, r1
	cmp	r0, r1
	bgt	.L401	@cond_branch
.L404:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L401:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 AnimFlyingParticle_Step,.Lfe60-AnimFlyingParticle_Step
	.align	2, 0
	.globl	AnimTask_CycleMagicalLeafPal
	.type	 AnimTask_CycleMagicalLeafPal,function
	.thumb_func
AnimTask_CycleMagicalLeafPal:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L418
	add	r5, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L410	@cond_branch
	cmp	r0, #0x1
	beq	.L411	@cond_branch
	b	.L409
.L419:
	.align	2, 0
.L418:
	.word	gTasks
.L410:
	ldr	r0, .L420
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r4, r2, #0
	add	r0, r0, r4
	strh	r0, [r5, #0x18]
	ldr	r0, .L420+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	add	r0, r0, r4
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L409
.L421:
	.align	2, 0
.L420:
	.word	0x274f
	.word	0x27b0
.L411:
	ldrh	r0, [r5, #0x1a]
	add	r0, r0, #0x1
	mov	r7, #0x0
	strh	r0, [r5, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L409	@cond_branch
	strh	r7, [r5, #0x1a]
	ldrh	r0, [r5, #0x18]
	ldrb	r2, [r5, #0x1c]
	ldr	r4, .L422
	mov	r3, #0x1e
	ldrsh	r1, [r5, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r5, #0x20]
	ldrb	r2, [r5, #0x1c]
	mov	r3, #0x1e
	ldrsh	r1, [r5, r3]
	lsl	r1, r1, #0x1
	add	r1, r1, r4
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x11
	bne	.L409	@cond_branch
	strh	r7, [r5, #0x1c]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x7
	bne	.L409	@cond_branch
	strh	r7, [r5, #0x1e]
.L409:
	ldr	r0, .L422+0x4
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L417	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L417:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	gMagicalLeafBlendColors
	.word	gBattleAnimArgs
.Lfe61:
	.size	 AnimTask_CycleMagicalLeafPal,.Lfe61-AnimTask_CycleMagicalLeafPal
	.align	2, 0
	.type	 AnimNeedleArmSpike,function
	.thumb_func
AnimNeedleArmSpike:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r1, .L433
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L425	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
	b	.L426
.L434:
	.align	2, 0
.L433:
	.word	gBattleAnimArgs
.L425:
	mov	r3, #0x0
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L427	@cond_branch
	ldr	r4, .L435
	b	.L432
.L436:
	.align	2, 0
.L435:
	.word	gBattleAnimAttacker
.L427:
	ldr	r4, .L437
.L432:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L437+0x4
	ldrh	r1, [r0, #0x8]
	strh	r1, [r6, #0x2e]
	mov	r3, #0x2
	ldrsh	r1, [r0, r3]
	add	r7, r0, #0
	cmp	r1, #0
	bne	.L429	@cond_branch
	ldrh	r0, [r7, #0x4]
	add	r0, r0, r5
	strh	r0, [r6, #0x20]
	ldrh	r0, [r7, #0x6]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	strh	r5, [r6, #0x38]
	strh	r2, [r6, #0x3a]
	b	.L430
.L438:
	.align	2, 0
.L437:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L429:
	strh	r5, [r6, #0x20]
	strh	r2, [r6, #0x22]
	ldrh	r0, [r7, #0x4]
	add	r0, r0, r5
	strh	r0, [r6, #0x38]
	ldrh	r0, [r7, #0x6]
	add	r0, r0, r2
	strh	r0, [r6, #0x3a]
.L430:
	ldrh	r4, [r6, #0x20]
	lsl	r0, r4, #0x4
	strh	r0, [r6, #0x30]
	ldrh	r5, [r6, #0x22]
	lsl	r0, r5, #0x4
	strh	r0, [r6, #0x32]
	mov	r1, #0x38
	ldrsh	r0, [r6, r1]
	mov	r2, #0x20
	ldrsh	r1, [r6, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r3, #0x8
	ldrsh	r1, [r7, r3]
	bl	__divsi3
	strh	r0, [r6, #0x34]
	mov	r1, #0x3a
	ldrsh	r0, [r6, r1]
	mov	r2, #0x22
	ldrsh	r1, [r6, r2]
	sub	r0, r0, r1
	lsl	r0, r0, #0x4
	mov	r3, #0x8
	ldrsh	r1, [r7, r3]
	bl	__divsi3
	strh	r0, [r6, #0x36]
	ldrh	r0, [r6, #0x38]
	sub	r0, r0, r4
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r1, [r6, #0x3a]
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2Neg
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L431	@cond_branch
	ldr	r1, .L439
	add	r0, r4, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L431:
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	str	r4, [sp]
	add	r0, r6, #0
	mov	r1, #0x0
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	ldr	r0, .L439+0x4
	str	r0, [r6, #0x1c]
.L426:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L440:
	.align	2, 0
.L439:
	.word	-0x8000
	.word	AnimNeedleArmSpike_Step
.Lfe62:
	.size	 AnimNeedleArmSpike,.Lfe62-AnimNeedleArmSpike
	.align	2, 0
	.type	 AnimNeedleArmSpike_Step,function
	.thumb_func
AnimNeedleArmSpike_Step:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r3, [r2, #0x2e]
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L442	@cond_branch
	ldrh	r0, [r2, #0x34]
	ldrh	r4, [r2, #0x30]
	add	r0, r0, r4
	strh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x36]
	ldrh	r4, [r2, #0x32]
	add	r1, r1, r4
	strh	r1, [r2, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r2, #0x22]
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x2e]
	b	.L443
.L442:
	add	r0, r2, #0
	bl	DestroySpriteAndMatrix
.L443:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 AnimNeedleArmSpike_Step,.Lfe63-AnimNeedleArmSpike_Step
	.align	2, 0
	.type	 sub_81009DC,function
	.thumb_func
sub_81009DC:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L445:
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 sub_81009DC,.Lfe64-sub_81009DC
	.align	2, 0
	.type	 sub_81009F8,function
	.thumb_func
sub_81009F8:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L450
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L447	@cond_branch
	ldr	r2, .L450+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	b	.L449
.L451:
	.align	2, 0
.L450:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L447:
	ldr	r0, .L452
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
.L449:
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L452+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L452+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe65:
	.size	 sub_81009F8,.Lfe65-sub_81009F8
	.align	2, 0
	.type	 AnimWhipHit,function
	.thumb_func
AnimWhipHit:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L456
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L455	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L455:
	ldr	r0, .L456+0x4
	str	r0, [r5, #0x1c]
	ldr	r4, .L456+0x8
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L457:
	.align	2, 0
.L456:
	.word	gBattleAnimAttacker
	.word	sub_81009DC
	.word	gBattleAnimArgs
.Lfe66:
	.size	 AnimWhipHit,.Lfe66-AnimWhipHit
	.align	2, 0
	.type	 sub_8100A94,function
	.thumb_func
sub_8100A94:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L459
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r1, #0xc]
	add	r0, r4, #0
	bl	StartSpriteAffineAnim
	ldr	r1, .L459+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L459+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe67:
	.size	 sub_8100A94,.Lfe67-sub_8100A94
	.align	2, 0
	.type	 AnimCuttingSlice,function
	.thumb_func
AnimCuttingSlice:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L466
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L462	@cond_branch
	ldrh	r0, [r5, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
.L462:
	ldr	r0, .L466+0x4
	str	r0, [r5, #0x1c]
	ldr	r0, .L466+0x8
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L463	@cond_branch
	ldrh	r0, [r3]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	b	.L464
.L467:
	.align	2, 0
.L466:
	.word	gBattleAnimTarget
	.word	AnimSlice_Step
	.word	gBattleAnimArgs
.L463:
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r3]
	sub	r0, r0, r1
	strh	r0, [r5, #0x20]
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L464:
	ldrh	r0, [r3, #0x2]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	ldr	r1, .L468
	add	r0, r1, #0
	ldrh	r2, [r5, #0x30]
	add	r1, r0, r2
	strh	r1, [r5, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r2, [r5, #0x32]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	ldrh	r0, [r3, #0x4]
	strh	r0, [r5, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L465	@cond_branch
	neg	r0, r1
	strh	r0, [r5, #0x30]
.L465:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L469:
	.align	2, 0
.L468:
	.word	-0x400
.Lfe68:
	.size	 AnimCuttingSlice,.Lfe68-AnimCuttingSlice
	.align	2, 0
	.type	 AnimAirCutterSlice,function
	.thumb_func
AnimAirCutterSlice:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	ldr	r0, .L484
	mov	r1, #0x6
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L472	@cond_branch
	cmp	r0, #0x1
	ble	.L476	@cond_branch
	cmp	r0, #0x2
	beq	.L473	@cond_branch
	b	.L476
.L485:
	.align	2, 0
.L484:
	.word	gBattleAnimArgs
.L472:
	ldr	r5, .L486
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r5]
	eor	r4, r4, r0
	add	r0, r4, #0
	b	.L483
.L487:
	.align	2, 0
.L486:
	.word	gBattleAnimTarget
.L473:
	ldr	r5, .L488
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldrb	r0, [r5]
	mov	r2, #0x2
	mov	r8, r2
	mov	r1, r8
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L471	@cond_branch
	ldrb	r0, [r5]
	mov	r2, r8
	eor	r0, r0, r2
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	lsr	r7, r0, #0x1
	ldrb	r0, [r5]
	mov	r1, r8
	eor	r0, r0, r1
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	lsr	r4, r0, #0x1
	b	.L471
.L489:
	.align	2, 0
.L488:
	.word	gBattleAnimTarget
.L476:
	ldr	r4, .L490
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrb	r0, [r4]
.L483:
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L471:
	strh	r7, [r6, #0x20]
	strh	r4, [r6, #0x22]
	ldr	r0, .L490
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L479	@cond_branch
	ldrh	r0, [r6, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r6, #0x22]
.L479:
	ldr	r0, .L490+0x4
	str	r0, [r6, #0x1c]
	ldr	r0, .L490+0x8
	mov	r2, #0x4
	ldrsh	r1, [r0, r2]
	add	r3, r0, #0
	cmp	r1, #0
	bne	.L480	@cond_branch
	ldrh	r0, [r3]
	ldrh	r1, [r6, #0x20]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	b	.L481
.L491:
	.align	2, 0
.L490:
	.word	gBattleAnimTarget
	.word	AnimSlice_Step
	.word	gBattleAnimArgs
.L480:
	ldrh	r0, [r6, #0x20]
	ldrh	r1, [r3]
	sub	r0, r0, r1
	strh	r0, [r6, #0x20]
	add	r2, r6, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L481:
	ldrh	r0, [r3, #0x2]
	ldrh	r2, [r6, #0x22]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	ldr	r1, .L492
	add	r0, r1, #0
	ldrh	r2, [r6, #0x30]
	add	r1, r0, r2
	strh	r1, [r6, #0x30]
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r2, [r6, #0x32]
	add	r0, r0, r2
	strh	r0, [r6, #0x32]
	ldrh	r0, [r3, #0x4]
	strh	r0, [r6, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L482	@cond_branch
	neg	r0, r1
	strh	r0, [r6, #0x30]
.L482:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	-0x400
.Lfe69:
	.size	 AnimAirCutterSlice,.Lfe69-AnimAirCutterSlice
	.align	2, 0
	.type	 AnimSlice_Step,function
	.thumb_func
AnimSlice_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r0, r1, r2
	strh	r0, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L495	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x18
	b	.L498
.L495:
	add	r0, r1, #0
	sub	r0, r0, #0x18
.L498:
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x32]
	sub	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bne	.L497	@cond_branch
	ldr	r1, .L499
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	mov	r0, #0x3
	strh	r0, [r4, #0x2e]
	ldr	r0, .L499+0x4
	str	r0, [r4, #0x1c]
.L497:
	pop	{r4}
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	DestroyAnimSprite
	.word	WaitAnimForDuration
.Lfe70:
	.size	 AnimSlice_Step,.Lfe70-AnimSlice_Step
	.align	2, 0
	.globl	unref_sub_8100D38
	.type	 unref_sub_8100D38,function
	.thumb_func
unref_sub_8100D38:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x32]
	mov	r2, #0x32
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x1
	ble	.L502	@cond_branch
	ldrh	r1, [r5, #0x34]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L503	@cond_branch
	add	r3, r5, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x5
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r4, .L507
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r3, [r0]
	add	r1, r2, #0
	and	r1, r1, r3
	strb	r1, [r0]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r2, r2, r1
	strb	r2, [r0]
	b	.L504
.L508:
	.align	2, 0
.L507:
	.word	gSprites
.L503:
	add	r1, r5, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r3, .L509
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
.L504:
	mov	r0, #0x0
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	b	.L505
.L510:
	.align	2, 0
.L509:
	.word	gSprites
.L502:
	add	r0, r1, #0x1
	strh	r0, [r5, #0x32]
.L505:
	mov	r1, #0x34
	ldrsh	r0, [r5, r1]
	cmp	r0, #0xa
	bne	.L506	@cond_branch
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L511
	add	r0, r0, r4
	bl	DestroySprite
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r0, r5, #0
	bl	DestroyAnimSprite
.L506:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L512:
	.align	2, 0
.L511:
	.word	gSprites
.Lfe71:
	.size	 unref_sub_8100D38,.Lfe71-unref_sub_8100D38
	.align	2, 0
	.type	 sub_8100E1C,function
	.thumb_func
sub_8100E1C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L517
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L517+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L514	@cond_branch
	ldrh	r0, [r5, #0x20]
	ldrh	r1, [r4]
	sub	r0, r0, r1
	b	.L516
.L518:
	.align	2, 0
.L517:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L514:
	ldrh	r0, [r4]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
.L516:
	strh	r0, [r5, #0x20]
	ldr	r4, .L519
	ldrb	r1, [r4, #0xa]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x6]
	neg	r0, r0
	strh	r0, [r5, #0x30]
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x34]
	ldr	r1, .L519+0x4
	str	r1, [r5, #0x1c]
	add	r0, r5, #0
	bl	_call_via_r1
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	gBattleAnimArgs
	.word	sub_8100E80
.Lfe72:
	.size	 sub_8100E1C,.Lfe72-sub_8100E1C
	.align	2, 0
	.type	 sub_8100E80,function
	.thumb_func
sub_8100E80:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x64
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r1, #0x14
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7f
	bgt	.L522	@cond_branch
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0x0
	b	.L525
.L522:
	add	r1, r4, #0
	add	r1, r1, #0x43
	mov	r0, #0xe
.L525:
	strb	r0, [r1]
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x2e]
	add	r0, r0, r2
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x82
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L524	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L524:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 sub_8100E80,.Lfe73-sub_8100E80
	.align	2, 0
	.type	 AnimProtect,function
	.thumb_func
AnimProtect:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L527	@cond_branch
	ldr	r1, .L531
	ldrh	r0, [r1, #0x2]
	add	r0, r0, #0x8
	strh	r0, [r1, #0x2]
.L527:
	ldr	r6, .L531+0x4
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	ldr	r4, .L531
	lsr	r0, r0, #0x18
	ldrh	r1, [r4]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldrb	r0, [r6]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L529	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L528	@cond_branch
.L529:
	ldrb	r0, [r6]
	bl	GetBattlerSpriteBGPriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r5, #0x5]
	b	.L530
.L532:
	.align	2, 0
.L531:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L528:
	ldrb	r0, [r6]
	bl	GetBattlerSpriteBGPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
.L530:
	ldr	r0, .L533
	ldrh	r0, [r0, #0x4]
	strh	r0, [r5, #0x2e]
	ldr	r0, .L533+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	mov	r4, #0x10
	mov	r0, #0x10
	strh	r0, [r5, #0x3c]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r0, [r5, #0x3c]
	lsl	r1, r0, #0x8
	sub	r4, r4, r0
	orr	r1, r1, r4
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L533+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gBattleAnimArgs
	.word	0x2828
	.word	AnimProtect_Step
.Lfe74:
	.size	 AnimProtect,.Lfe74-AnimProtect
	.align	2, 0
	.type	 AnimProtect_Step,function
	.thumb_func
AnimProtect_Step:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x60
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	neg	r0, r0
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L536	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldr	r1, .L547
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r5, [r0]
	mov	r2, #0x0
	add	r6, r1, #0
	add	r3, r6, #0
.L537:
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	add	r2, r2, #0x1
	add	r0, r0, r2
	lsl	r1, r0, #0x1
	add	r1, r1, r3
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	cmp	r2, #0x5
	ble	.L537	@cond_branch
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	strh	r5, [r0]
.L536:
	ldrh	r2, [r4, #0x3c]
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x6
	ble	.L542	@cond_branch
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	ble	.L543	@cond_branch
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L542	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
	sub	r2, r2, #0x1
	strh	r2, [r4, #0x3c]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L542:
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L543	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L544
.L548:
	.align	2, 0
.L547:
	.word	gPlttBufferFaded
.L543:
	ldrh	r0, [r4, #0x3a]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L544	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x3a]
	ldrh	r2, [r4, #0x3c]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x3c]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L544	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L549
	str	r0, [r4, #0x1c]
.L544:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L550:
	.align	2, 0
.L549:
	.word	DestroyAnimSpriteAndDisableBlend
.Lfe75:
	.size	 AnimProtect_Step,.Lfe75-AnimProtect_Step
	.align	2, 0
	.type	 AnimMilkBottle,function
	.thumb_func
AnimMilkBottle:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L552
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L552+0x4
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r5, [r4, #0x34]
	strh	r5, [r4, #0x36]
	strh	r5, [r4, #0x3a]
	mov	r0, #0x10
	strh	r0, [r4, #0x3c]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L552+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	gBattleAnimTarget
	.word	0xffe8
	.word	AnimMilkBottle_Step1
.Lfe76:
	.size	 AnimMilkBottle,.Lfe76-AnimMilkBottle
	.align	2, 0
	.type	 AnimMilkBottle_Step1,function
	.thumb_func
AnimMilkBottle_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB6751
	b	.L555	@long jump
.LCB6751:
	lsl	r0, r0, #0x2
	ldr	r1, .L578
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L579:
	.align	2, 0
.L578:
	.word	.L575
	.align	2, 0
	.align	2, 0
.L575:
	.word	.L556
	.word	.L563
	.word	.L565
	.word	.L573
	.word	.L574
.L556:
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB6777
	b	.L555	@long jump
.LCB6777:
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L558	@cond_branch
	ldrh	r1, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L560	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x3a]
	b	.L560
.L558:
	ldrh	r1, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L560	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x3c]
.L560:
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L555	@cond_branch
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L555	@cond_branch
	strh	r0, [r4, #0x30]
	b	.L577
.L563:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L555	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	b	.L577
.L565:
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x4
	bl	AnimMilkBottle_Step2
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L566	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
.L566:
	ldrh	r0, [r4, #0x32]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L555	@cond_branch
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L568	@cond_branch
	ldrh	r1, [r4, #0x3a]
	mov	r2, #0x3a
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L570	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x3a]
	b	.L570
.L568:
	ldrh	r1, [r4, #0x3c]
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xf
	bgt	.L570	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x3c]
.L570:
	ldrh	r1, [r4, #0x3c]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0x3a]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x3a
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L555	@cond_branch
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bne	.L555	@cond_branch
	strh	r1, [r4, #0x30]
	strh	r1, [r4, #0x32]
	b	.L577
.L573:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L577:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L555
.L574:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L555:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 AnimMilkBottle_Step1,.Lfe77-AnimMilkBottle_Step1
	.align	2, 0
	.type	 AnimMilkBottle_Step2,function
	.thumb_func
AnimMilkBottle_Step2:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xb
	bgt	.L581	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L581:
	ldrh	r5, [r4, #0x34]
	add	r0, r5, #0
	sub	r0, r0, #0x12
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	cmp	r0, #0x17
	bhi	.L582	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L582:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2f
	ble	.L583	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x36]
.L583:
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0x9
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r1, #0xe
	bl	__divsi3
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L584	@cond_branch
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	neg	r0, r0
	strh	r0, [r4, #0x26]
.L584:
	add	r0, r5, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3b
	ble	.L585	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x34]
.L585:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 AnimMilkBottle_Step2,.Lfe78-AnimMilkBottle_Step2
	.align	2, 0
	.type	 AnimGrantingStars,function
	.thumb_func
AnimGrantingStars:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L588
	mov	r1, #0x4
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L587	@cond_branch
	add	r0, r4, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
.L587:
	mov	r0, #0x0
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r5, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldrh	r0, [r5, #0xa]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r5, #0x8]
	strh	r0, [r4, #0x32]
	ldr	r1, .L588+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L588+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L589:
	.align	2, 0
.L588:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearFixedPoint
.Lfe79:
	.size	 AnimGrantingStars,.Lfe79-AnimGrantingStars
	.align	2, 0
	.type	 AnimSparkingStars,function
	.thumb_func
AnimSparkingStars:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L599
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L591	@cond_branch
	ldr	r0, .L599+0x4
	b	.L597
.L600:
	.align	2, 0
.L599:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L591:
	ldr	r0, .L601
.L597:
	ldrb	r6, [r0]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L593	@cond_branch
	mov	r1, #0x2
	add	r0, r6, #0
	eor	r0, r0, r1
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldr	r4, .L601+0x4
	ldrb	r1, [r4, #0xc]
	add	r2, r5, #0
	add	r2, r2, #0x20
	add	r3, r5, #0
	add	r3, r3, #0x22
	add	r0, r6, #0
	bl	SetAverageBattlerPositions
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	b	.L594
.L602:
	.align	2, 0
.L601:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L593:
	ldr	r4, .L603
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L595	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x1
	b	.L598
.L604:
	.align	2, 0
.L603:
	.word	gBattleAnimArgs
.L595:
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	add	r0, r6, #0
	mov	r1, #0x3
.L598:
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x2]
	add	r0, r0, r4
	strh	r0, [r5, #0x22]
	ldr	r0, .L605
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
.L594:
	ldr	r1, .L605
	ldrh	r0, [r1, #0xa]
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r5, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r5, #0x32]
	ldr	r1, .L605+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L605+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	gBattleAnimArgs
	.word	DestroyAnimSprite
	.word	TranslateSpriteLinearFixedPoint
.Lfe80:
	.size	 AnimSparkingStars,.Lfe80-AnimSparkingStars
	.align	2, 0
	.type	 sub_8101440,function
	.thumb_func
sub_8101440:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L610
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L608	@cond_branch
	ldr	r0, .L610+0x4
	ldrh	r1, [r0]
	ldrh	r2, [r4, #0x20]
	add	r1, r1, r2
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	b	.L609
.L611:
	.align	2, 0
.L610:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L608:
	ldr	r2, .L612
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
.L609:
	ldr	r0, .L612+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L613:
	.align	2, 0
.L612:
	.word	gBattleAnimArgs
	.word	sub_81014A0
.Lfe81:
	.size	 sub_8101440,.Lfe81-sub_8101440
	.align	2, 0
	.type	 sub_81014A0,function
	.thumb_func
sub_81014A0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L615	@cond_branch
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r0, #0x1e
	sub	r0, r0, r1
	mov	r1, #0x3
	bl	__divsi3
	strh	r0, [r4, #0x26]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x12
	asr	r0, r0, #0x10
	mov	r1, #0x3
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L615:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L616	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L616:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 sub_81014A0,.Lfe82-sub_81014A0
	.align	2, 0
	.type	 AnimSleepLetterZ,function
	.thumb_func
AnimSleepLetterZ:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L620
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L618	@cond_branch
	ldr	r1, .L620+0x4
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L619
.L621:
	.align	2, 0
.L620:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L618:
	ldr	r2, .L622
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldr	r0, .L622+0x4
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L619:
	ldr	r0, .L622+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L623:
	.align	2, 0
.L622:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	AnimSleepLetterZ_Step
.Lfe83:
	.size	 AnimSleepLetterZ,.Lfe83-AnimSleepLetterZ
	.align	2, 0
	.type	 AnimSleepLetterZ_Step,function
	.thumb_func
AnimSleepLetterZ_Step:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x28
	bl	__divsi3
	neg	r0, r0
	strh	r0, [r4, #0x26]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x1
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L625	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L625:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 AnimSleepLetterZ_Step,.Lfe84-AnimSleepLetterZ_Step
	.align	2, 0
	.type	 AnimLockOnTarget,function
	.thumb_func
AnimLockOnTarget:
	push	{lr}
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x20]
	ldrh	r1, [r0, #0x22]
	sub	r1, r1, #0x20
	strh	r1, [r0, #0x22]
	mov	r1, #0x14
	strh	r1, [r0, #0x2e]
	ldr	r1, .L627
	str	r1, [r0, #0x1c]
	ldr	r1, .L627+0x4
	bl	StoreSpriteCallbackInData6
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	WaitAnimForDuration
	.word	AnimLockOnTarget_Step1
.Lfe85:
	.size	 AnimLockOnTarget,.Lfe85-AnimLockOnTarget
	.align	2, 0
	.type	 AnimLockOnTarget_Step1,function
	.thumb_func
AnimLockOnTarget_Step1:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r6, [r5, #0x38]
	mov	r1, #0x1
	add	r0, r1, #0
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L631	@cond_branch
	cmp	r0, #0x1
	beq	.L632	@cond_branch
	b	.L630
.L631:
	strh	r1, [r5, #0x2e]
	ldr	r0, .L635
	str	r0, [r5, #0x1c]
	ldr	r1, .L635+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	b	.L630
.L636:
	.align	2, 0
.L635:
	.word	WaitAnimForDuration
	.word	AnimLockOnTarget_Step1
.L632:
	ldrh	r3, [r5, #0x24]
	ldrh	r0, [r5, #0x20]
	add	r3, r3, r0
	mov	r0, #0x0
	strh	r3, [r5, #0x20]
	ldrh	r4, [r5, #0x26]
	ldrh	r1, [r5, #0x22]
	add	r4, r4, r1
	strh	r4, [r5, #0x22]
	strh	r0, [r5, #0x26]
	strh	r0, [r5, #0x24]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	ldr	r2, .L637
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x18
	lsl	r0, r0, #0x1
	add	r1, r0, r2
	ldrb	r1, [r1, #0]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	add	r3, r3, r1
	strh	r3, [r5, #0x32]
	add	r2, r2, #0x1
	add	r0, r0, r2
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	add	r4, r4, r0
	strh	r4, [r5, #0x36]
	ldr	r0, .L637+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L637+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r1, #0
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xd2
	bl	PlaySE12WithPanning
.L630:
	ldrh	r0, [r5, #0x38]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r5, #0x38]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	gInclineMonCoordTable
	.word	StartAnimLinearTranslation
	.word	AnimLockOnTarget_Step2
.Lfe86:
	.size	 AnimLockOnTarget_Step1,.Lfe86-AnimLockOnTarget_Step1
	.align	2, 0
	.type	 AnimLockOnTarget_Step2,function
	.thumb_func
AnimLockOnTarget_Step2:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L640	@cond_branch
	mov	r0, #0xa
	strh	r0, [r2, #0x2e]
	ldr	r0, .L642
	str	r0, [r2, #0x1c]
	ldr	r1, .L642+0x4
	add	r0, r2, #0
	bl	StoreSpriteCallbackInData6
	b	.L641
.L643:
	.align	2, 0
.L642:
	.word	WaitAnimForDuration
	.word	AnimLockOnTarget_Step3
.L640:
	ldr	r0, .L644
	str	r0, [r2, #0x1c]
.L641:
	pop	{r0}
	bx	r0
.L645:
	.align	2, 0
.L644:
	.word	AnimLockOnTarget_Step1
.Lfe87:
	.size	 AnimLockOnTarget_Step2,.Lfe87-AnimLockOnTarget_Step2
	.align	2, 0
	.type	 AnimLockOnTarget_Step3,function
	.thumb_func
AnimLockOnTarget_Step3:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x6]
	cmp	r1, #0
	bne	.L647	@cond_branch
	mov	r0, #0x3
	strh	r0, [r5, #0x2e]
	strh	r1, [r5, #0x30]
	strh	r1, [r5, #0x32]
	ldr	r0, .L657
	str	r0, [r5, #0x1c]
	ldr	r1, .L657+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	b	.L648
.L658:
	.align	2, 0
.L657:
	.word	WaitAnimForDuration
	.word	AnimLockOnTarget_Step4
.L647:
	ldrh	r0, [r5, #0x6]
	cmp	r0, #0x2
	beq	.L651	@cond_branch
	cmp	r0, #0x2
	bgt	.L655	@cond_branch
	cmp	r0, #0x1
	beq	.L650	@cond_branch
	b	.L653
.L655:
	cmp	r0, #0x3
	beq	.L652	@cond_branch
	b	.L653
.L650:
	ldr	r6, .L659
	add	r7, r6, #0
	b	.L649
.L660:
	.align	2, 0
.L659:
	.word	0xfff8
.L651:
	ldr	r7, .L661
	b	.L656
.L662:
	.align	2, 0
.L661:
	.word	0xfff8
.L652:
	mov	r7, #0x8
	ldr	r6, .L663
	b	.L649
.L664:
	.align	2, 0
.L663:
	.word	0xfff8
.L653:
	mov	r7, #0x8
.L656:
	mov	r6, #0x8
.L649:
	ldrh	r0, [r5, #0x24]
	ldrh	r1, [r5, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r5, #0x20]
	ldrh	r0, [r5, #0x26]
	ldrh	r2, [r5, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x22]
	strh	r1, [r5, #0x26]
	strh	r1, [r5, #0x24]
	mov	r0, #0x6
	strh	r0, [r5, #0x2e]
	ldr	r4, .L665
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r7
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L665+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L665+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L648:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L666:
	.align	2, 0
.L665:
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	AnimLockOnTarget_Step5
.Lfe88:
	.size	 AnimLockOnTarget_Step3,.Lfe88-AnimLockOnTarget_Step3
	.align	2, 0
	.type	 AnimLockOnTarget_Step4,function
	.thumb_func
AnimLockOnTarget_Step4:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L668	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x3
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L670	@cond_branch
	mov	r0, #0x10
	b	.L675
.L668:
	ldrh	r0, [r4, #0x30]
	sub	r0, r0, #0x3
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L670	@cond_branch
	mov	r0, #0x0
.L675:
	strh	r0, [r4, #0x30]
.L670:
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	sub_80A75AC
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L676
	bl	BlendPalettes
	mov	r3, #0x30
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bne	.L672	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	ldrb	r1, [r4, #0x5]
	lsr	r1, r1, #0x4
	lsl	r0, r1, #0x5
	ldr	r2, .L676+0x4
	add	r0, r0, r2
	lsl	r1, r1, #0x4
	ldr	r3, .L676+0x8
	add	r2, r3, #0
	orr	r1, r1, r2
	mov	r2, #0x4
	bl	LoadPalette
	mov	r0, #0x3f
	bl	BattleAnimAdjustPanning
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc0
	bl	PlaySE12WithPanning
	b	.L673
.L677:
	.align	2, 0
.L676:
	.word	0x7fff
	.word	gPlttBufferUnfaded+0x210
	.word	0x101
.L672:
	cmp	r0, #0
	bne	.L673	@cond_branch
	ldr	r0, .L678
	str	r0, [r4, #0x1c]
.L673:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	AnimLockOnTarget_Step5
.Lfe89:
	.size	 AnimLockOnTarget_Step4,.Lfe89-AnimLockOnTarget_Step4
	.align	2, 0
	.type	 AnimLockOnTarget_Step5,function
	.thumb_func
AnimLockOnTarget_Step5:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L682
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L682+0x4
	cmp	r1, r0
	bne	.L681	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	strh	r0, [r2, #0x2e]
	ldr	r0, .L682+0x8
	str	r0, [r2, #0x1c]
.L681:
	pop	{r0}
	bx	r0
.L683:
	.align	2, 0
.L682:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	AnimLockOnTarget_Step6
.Lfe90:
	.size	 AnimLockOnTarget_Step5,.Lfe90-AnimLockOnTarget_Step5
	.align	2, 0
	.type	 AnimLockOnTarget_Step6,function
	.thumb_func
AnimLockOnTarget_Step6:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L685	@cond_branch
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L685:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x8
	bne	.L686	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L686:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 AnimLockOnTarget_Step6,.Lfe91-AnimLockOnTarget_Step6
	.align	2, 0
	.type	 AnimLockOnMoveTarget,function
	.thumb_func
AnimLockOnMoveTarget:
	push	{r4, lr}
	add	r3, r0, #0
	ldr	r0, .L695
	ldrh	r0, [r0]
	strh	r0, [r3, #0x6]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L688	@cond_branch
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	b	.L689
.L696:
	.align	2, 0
.L695:
	.word	gBattleAnimArgs
.L688:
	cmp	r0, #0x2
	bne	.L690	@cond_branch
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x20
	b	.L694
.L690:
	cmp	r0, #0x3
	bne	.L692	@cond_branch
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	sub	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	b	.L694
.L692:
	ldrh	r0, [r3, #0x20]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x20]
	ldrh	r0, [r3, #0x22]
	add	r0, r0, #0x18
	strh	r0, [r3, #0x22]
	ldrb	r1, [r3, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x30
.L694:
	orr	r0, r0, r1
	strb	r0, [r3, #0x3]
.L689:
	ldrh	r2, [r3, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x10
	ldr	r4, .L697
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L697+0x4
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	ldr	r1, .L697+0x8
	str	r1, [r3, #0x1c]
	add	r0, r3, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	0x3ff
	.word	-0x400
	.word	AnimLockOnTarget
.Lfe92:
	.size	 AnimLockOnMoveTarget,.Lfe92-AnimLockOnMoveTarget
	.align	2, 0
	.type	 AnimBowMon,function
	.thumb_func
AnimBowMon:
	push	{lr}
	add	r3, r0, #0
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	ldr	r0, .L708
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	beq	.L702	@cond_branch
	cmp	r0, #0x1
	bgt	.L706	@cond_branch
	cmp	r0, #0
	beq	.L701	@cond_branch
	b	.L704
.L709:
	.align	2, 0
.L708:
	.word	gBattleAnimArgs
.L706:
	cmp	r0, #0x2
	beq	.L703	@cond_branch
	b	.L704
.L701:
	ldr	r0, .L710
	b	.L707
.L711:
	.align	2, 0
.L710:
	.word	AnimBowMon_Step1
.L702:
	ldr	r0, .L712
	b	.L707
.L713:
	.align	2, 0
.L712:
	.word	AnimBowMon_Step2
.L703:
	ldr	r0, .L714
	b	.L707
.L715:
	.align	2, 0
.L714:
	.word	AnimBowMon_Step3
.L704:
	ldr	r0, .L716
.L707:
	str	r0, [r3, #0x1c]
	pop	{r0}
	bx	r0
.L717:
	.align	2, 0
.L716:
	.word	AnimBowMon_Step4
.Lfe93:
	.size	 AnimBowMon,.Lfe93-AnimBowMon
	.align	2, 0
	.type	 AnimBowMon_Step1,function
	.thumb_func
AnimBowMon_Step1:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x6
	strh	r0, [r4, #0x2e]
	ldr	r5, .L721
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r2, #0x2
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L719	@cond_branch
	mov	r1, #0x2
.L719:
	strh	r1, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L721+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	ldr	r1, .L721+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L721+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L722:
	.align	2, 0
.L721:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	AnimBowMon_Step1_Callback
	.word	TranslateMonSpriteLinear
.Lfe94:
	.size	 AnimBowMon_Step1,.Lfe94-AnimBowMon_Step1
	.align	2, 0
	.type	 AnimBowMon_Step1_Callback,function
	.thumb_func
AnimBowMon_Step1_Callback:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x2e
	ldrsh	r6, [r5, r0]
	cmp	r6, #0
	bne	.L724	@cond_branch
	ldr	r1, .L728
	ldr	r4, .L728+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5, #0x34]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	ldr	r2, .L728+0x8
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L725	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	add	r1, r0, #0
.L725:
	strh	r1, [r5, #0x36]
	strh	r6, [r5, #0x38]
.L724:
	ldrh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r5, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L727	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L728+0xc
	str	r0, [r5, #0x1c]
.L727:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L729:
	.align	2, 0
.L728:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	-0x300
	.word	AnimBowMon_Step4
.Lfe95:
	.size	 AnimBowMon_Step1_Callback,.Lfe95-AnimBowMon_Step1_Callback
	.align	2, 0
	.type	 AnimBowMon_Step2,function
	.thumb_func
AnimBowMon_Step2:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x4
	strh	r0, [r4, #0x2e]
	ldr	r5, .L733
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x3
	cmp	r0, #0
	beq	.L731	@cond_branch
	mov	r0, #0x3
	neg	r0, r0
	add	r1, r0, #0
.L731:
	strh	r1, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L733+0x4
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x34]
	ldr	r1, .L733+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L733+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L734:
	.align	2, 0
.L733:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	AnimBowMon_Step4
	.word	TranslateMonSpriteLinear
.Lfe96:
	.size	 AnimBowMon_Step2,.Lfe96-AnimBowMon_Step2
	.align	2, 0
	.type	 AnimBowMon_Step3,function
	.thumb_func
AnimBowMon_Step3:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L736	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x2e]
	ldr	r0, .L737
	str	r0, [r1, #0x1c]
.L736:
	pop	{r0}
	bx	r0
.L738:
	.align	2, 0
.L737:
	.word	AnimBowMon_Step3_Callback
.Lfe97:
	.size	 AnimBowMon_Step3,.Lfe97-AnimBowMon_Step3
	.align	2, 0
	.type	 AnimBowMon_Step3_Callback,function
	.thumb_func
AnimBowMon_Step3_Callback:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L740	@cond_branch
	ldr	r1, .L745
	ldr	r4, .L745+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r5, #0x34]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x3a]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L741	@cond_branch
	mov	r0, #0xfc
	lsl	r0, r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, #0xc0
	lsl	r0, r0, #0x4
	b	.L744
.L746:
	.align	2, 0
.L745:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.L741:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x36]
	mov	r0, #0xf4
	lsl	r0, r0, #0x8
.L744:
	strh	r0, [r5, #0x38]
.L740:
	ldrh	r0, [r5, #0x36]
	ldrh	r1, [r5, #0x38]
	add	r0, r0, r1
	strh	r0, [r5, #0x38]
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r5, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L743	@cond_branch
	ldrh	r0, [r5, #0x34]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	ldr	r0, .L747
	str	r0, [r5, #0x1c]
.L743:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	AnimBowMon_Step4
.Lfe98:
	.size	 AnimBowMon_Step3_Callback,.Lfe98-AnimBowMon_Step3_Callback
	.align	2, 0
	.type	 AnimBowMon_Step4,function
	.thumb_func
AnimBowMon_Step4:
	push	{lr}
	bl	DestroyAnimSprite
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 AnimBowMon_Step4,.Lfe99-AnimBowMon_Step4
	.align	2, 0
	.type	 sub_8101B90,function
	.thumb_func
sub_8101B90:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	ldr	r1, .L751
	str	r1, [r0, #0x1c]
	bx	lr
.L752:
	.align	2, 0
.L751:
	.word	sub_8101BA0
.Lfe100:
	.size	 sub_8101B90,.Lfe100-sub_8101B90
	.align	2, 0
	.type	 sub_8101BA0,function
	.thumb_func
sub_8101BA0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x2e
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L758	@cond_branch
	cmp	r5, #0x1
	bgt	.L764	@cond_branch
	cmp	r5, #0
	beq	.L755	@cond_branch
	b	.L754
.L764:
	cmp	r5, #0x2
	beq	.L760	@cond_branch
	b	.L754
.L755:
	strh	r5, [r4, #0x30]
	ldr	r1, .L765
	ldr	r2, .L765+0x4
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	strh	r0, [r4, #0x32]
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x34]
	ldr	r2, .L765+0x8
	add	r1, r2, #0
	cmp	r0, #0
	beq	.L756	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r1, r0, #0
.L756:
	strh	r1, [r4, #0x36]
	strh	r5, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
.L758:
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L754	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L754
.L766:
	.align	2, 0
.L765:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	-0x200
.L760:
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x38]
	add	r0, r0, r1
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x38]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L754	@cond_branch
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L754:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 sub_8101BA0,.Lfe101-sub_8101BA0
	.align	2, 0
	.globl	AnimTask_SkullBashPosition
	.type	 AnimTask_SkullBashPosition,function
	.thumb_func
AnimTask_SkullBashPosition:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L776
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldr	r1, .L776+0x4
	ldr	r2, .L776+0x8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r4, #0x0
	strh	r0, [r5, #0x8]
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	strh	r2, [r5, #0xa]
	strh	r4, [r5, #0xc]
	ldr	r0, .L776+0xc
	mov	r3, #0x0
	ldrsh	r1, [r0, r3]
	cmp	r1, #0
	beq	.L770	@cond_branch
	cmp	r1, #0x1
	beq	.L772	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	b	.L768
.L777:
	.align	2, 0
.L776:
	.word	gTasks
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L770:
	strh	r1, [r5, #0xc]
	mov	r0, #0x8
	strh	r0, [r5, #0xe]
	strh	r1, [r5, #0x10]
	mov	r0, #0x3
	strh	r0, [r5, #0x12]
	cmp	r2, #0
	bne	.L771	@cond_branch
	neg	r0, r0
	strh	r0, [r5, #0x12]
.L771:
	ldr	r0, .L778
	b	.L775
.L779:
	.align	2, 0
.L778:
	.word	AnimTask_SkullBashPositionSet
.L772:
	mov	r0, #0x8
	strh	r0, [r5, #0xe]
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	strh	r0, [r5, #0x10]
	mov	r1, #0xc0
	strh	r1, [r5, #0x12]
	cmp	r2, #0
	bne	.L773	@cond_branch
	neg	r0, r0
	strh	r0, [r5, #0x10]
	neg	r0, r1
	strh	r0, [r5, #0x12]
.L773:
	ldr	r0, .L780
.L775:
	str	r0, [r5]
.L768:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L781:
	.align	2, 0
.L780:
	.word	AnimTask_SkullBashPositionReset
.Lfe102:
	.size	 AnimTask_SkullBashPosition,.Lfe102-AnimTask_SkullBashPosition
	.align	2, 0
	.type	 AnimTask_SkullBashPositionSet,function
	.thumb_func
AnimTask_SkullBashPositionSet:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L815
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bls	.LCB8840
	b	.L783	@long jump
.LCB8840:
	lsl	r0, r0, #0x2
	ldr	r1, .L815+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L816:
	.align	2, 0
.L815:
	.word	gTasks
	.word	.L809
	.align	2, 0
	.align	2, 0
.L809:
	.word	.L784
	.word	.L789
	.word	.L794
	.word	.L801
	.word	.L806
.L784:
	mov	r2, #0xe
	ldrsh	r1, [r4, r2]
	cmp	r1, #0
	beq	.L785	@cond_branch
	ldrh	r2, [r4, #0x12]
	ldrh	r3, [r4, #0x10]
	add	r2, r2, r3
	b	.L811
.L785:
	mov	r0, #0x8
	strh	r0, [r4, #0xe]
	strh	r1, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r1, #0xc0
	cmp	r0, #0
	bne	.L787	@cond_branch
	mov	r2, #0xc0
	neg	r2, r2
	add	r1, r2, #0
.L787:
	strh	r1, [r4, #0x12]
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	b	.L812
.L789:
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L790	@cond_branch
	ldrh	r0, [r4, #0x12]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x10]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromRotation
	b	.L813
.L790:
	mov	r0, #0x8
	strh	r0, [r4, #0xe]
	ldr	r2, .L817
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x2
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L792	@cond_branch
	mov	r1, #0x2
.L792:
	strh	r1, [r4, #0x12]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L812
.L818:
	.align	2, 0
.L817:
	.word	gSprites
.L794:
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L795	@cond_branch
	ldrh	r1, [r4, #0x14]
	mov	r3, #0x14
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L796	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x14]
	b	.L783
.L796:
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L798	@cond_branch
	ldr	r2, .L819
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x12]
	ldrh	r2, [r4, #0x10]
	add	r1, r1, r2
	b	.L814
.L820:
	.align	2, 0
.L819:
	.word	gSprites
.L798:
	ldr	r2, .L821
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	ldrh	r2, [r4, #0x12]
	sub	r1, r1, r2
.L814:
	strh	r1, [r0, #0x24]
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L813
.L822:
	.align	2, 0
.L821:
	.word	gSprites
.L795:
	ldr	r2, .L823
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0x10]
	strh	r1, [r0, #0x24]
	mov	r0, #0xc
	strh	r0, [r4, #0xe]
	b	.L812
.L824:
	.align	2, 0
.L823:
	.word	gSprites
.L801:
	ldrh	r1, [r4, #0xe]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L802	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	b	.L783
.L802:
	mov	r0, #0x3
	strh	r0, [r4, #0xe]
	ldr	r2, .L825
	mov	r3, #0x8
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x24]
	strh	r0, [r4, #0x10]
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	mov	r2, #0x8
	neg	r2, r2
	add	r1, r2, #0
	cmp	r0, #0
	bne	.L804	@cond_branch
	mov	r1, #0x8
.L804:
	strh	r1, [r4, #0x12]
.L812:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L783
.L826:
	.align	2, 0
.L825:
	.word	gSprites
.L806:
	mov	r3, #0xe
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L807	@cond_branch
	ldrh	r2, [r4, #0x12]
	ldrh	r0, [r4, #0x10]
	add	r2, r2, r0
.L811:
	strh	r2, [r4, #0x10]
	ldr	r3, .L827
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	strh	r2, [r0, #0x24]
.L813:
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L783
.L828:
	.align	2, 0
.L827:
	.word	gSprites
.L807:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L783:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe103:
	.size	 AnimTask_SkullBashPositionSet,.Lfe103-AnimTask_SkullBashPositionSet
	.align	2, 0
	.type	 AnimTask_SkullBashPositionReset,function
	.thumb_func
AnimTask_SkullBashPositionReset:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L832
	add	r4, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L830	@cond_branch
	ldrh	r0, [r4, #0x10]
	ldrh	r1, [r4, #0x12]
	sub	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrb	r0, [r4, #0x8]
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	ldrh	r3, [r4, #0x10]
	add	r1, r2, #0
	bl	SetSpriteRotScale
	ldrb	r0, [r4, #0x8]
	bl	SetBattlerSpriteYOffsetFromRotation
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	b	.L831
.L833:
	.align	2, 0
.L832:
	.word	gTasks
.L830:
	ldrb	r0, [r4, #0x8]
	bl	ResetSpriteRotScale
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L831:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 AnimTask_SkullBashPositionReset,.Lfe104-AnimTask_SkullBashPositionReset
	.align	2, 0
	.type	 AnimSlashSlice,function
	.thumb_func
AnimSlashSlice:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L838
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L835	@cond_branch
	ldr	r4, .L838+0x4
	b	.L837
.L839:
	.align	2, 0
.L838:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L835:
	ldr	r4, .L840
.L837:
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	strh	r0, [r5, #0x30]
	ldr	r1, .L840+0x4
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L840+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L841:
	.align	2, 0
.L840:
	.word	gBattleAnimTarget
	.word	AnimFalseSwipeSlice_Step3
	.word	RunStoredCallbackWhenAnimEnds
.Lfe105:
	.size	 AnimSlashSlice,.Lfe105-AnimSlashSlice
	.align	2, 0
	.type	 AnimFalseSwipeSlice,function
	.thumb_func
AnimFalseSwipeSlice:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L843
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L843+0x4
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	ldr	r1, .L843+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L843+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L844:
	.align	2, 0
.L843:
	.word	gBattleAnimTarget
	.word	0xffd0
	.word	AnimFalseSwipeSlice_Step1
	.word	RunStoredCallbackWhenAnimEnds
.Lfe106:
	.size	 AnimFalseSwipeSlice,.Lfe106-AnimFalseSwipeSlice
	.align	2, 0
	.type	 AnimFalseSwipePositionedSlice,function
	.thumb_func
AnimFalseSwipePositionedSlice:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L846
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L846+0x4
	ldr	r2, .L846+0x8
	add	r0, r0, r2
	ldrh	r1, [r1]
	add	r0, r0, r1
	mov	r6, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	strh	r6, [r4, #0x2e]
	strh	r6, [r4, #0x30]
	ldr	r0, .L846+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L847:
	.align	2, 0
.L846:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	0xffd0
	.word	AnimFalseSwipeSlice_Step3
.Lfe107:
	.size	 AnimFalseSwipePositionedSlice,.Lfe107-AnimFalseSwipePositionedSlice
	.align	2, 0
	.type	 AnimFalseSwipeSlice_Step1,function
	.thumb_func
AnimFalseSwipeSlice_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L849	@cond_branch
	mov	r0, #0xc
	strh	r0, [r4, #0x2e]
	mov	r0, #0x8
	strh	r0, [r4, #0x30]
	mov	r0, #0x0
	strh	r0, [r4, #0x32]
	ldr	r1, .L850
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L850+0x4
	str	r0, [r4, #0x1c]
.L849:
	pop	{r4}
	pop	{r0}
	bx	r0
.L851:
	.align	2, 0
.L850:
	.word	AnimFalseSwipeSlice_Step2
	.word	TranslateSpriteLinear
.Lfe108:
	.size	 AnimFalseSwipeSlice_Step1,.Lfe108-AnimFalseSwipeSlice_Step1
	.align	2, 0
	.type	 AnimFalseSwipeSlice_Step2,function
	.thumb_func
AnimFalseSwipeSlice_Step2:
	mov	r1, #0x0
	strh	r1, [r0, #0x2e]
	strh	r1, [r0, #0x30]
	ldr	r1, .L853
	str	r1, [r0, #0x1c]
	bx	lr
.L854:
	.align	2, 0
.L853:
	.word	AnimFalseSwipeSlice_Step3
.Lfe109:
	.size	 AnimFalseSwipeSlice_Step2,.Lfe109-AnimFalseSwipeSlice_Step2
	.align	2, 0
	.type	 AnimFalseSwipeSlice_Step3,function
	.thumb_func
AnimFalseSwipeSlice_Step3:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L856	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2e]
	mov	r0, #0x3e
	add	r0, r0, r3
	mov	ip, r0
	ldrb	r2, [r0]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldrh	r0, [r3, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x8
	ble	.L856	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimSprite
.L856:
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 AnimFalseSwipeSlice_Step3,.Lfe110-AnimFalseSwipeSlice_Step3
	.align	2, 0
	.type	 AnimEndureEnergy,function
	.thumb_func
AnimEndureEnergy:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L862
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L859	@cond_branch
	ldr	r4, .L862+0x4
	b	.L861
.L863:
	.align	2, 0
.L862:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L859:
	ldr	r4, .L864
.L861:
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x4]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldr	r0, .L864+0x4
	ldrh	r0, [r0, #0x6]
	strh	r0, [r5, #0x30]
	ldr	r0, .L864+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L865:
	.align	2, 0
.L864:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimEndureEnergy_Step
.Lfe111:
	.size	 AnimEndureEnergy,.Lfe111-AnimEndureEnergy
	.align	2, 0
	.type	 AnimEndureEnergy_Step,function
	.thumb_func
AnimEndureEnergy_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x30
	ldrsh	r1, [r2, r3]
	cmp	r0, r1
	ble	.L867	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x22]
.L867:
	ldrh	r0, [r2, #0x22]
	ldrh	r1, [r2, #0x2e]
	sub	r0, r0, r1
	strh	r0, [r2, #0x22]
	add	r0, r2, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L868	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L868:
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 AnimEndureEnergy_Step,.Lfe112-AnimEndureEnergy_Step
	.align	2, 0
	.type	 AnimSharpenSphere,function
	.thumb_func
AnimSharpenSphere:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r6, .L870
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r0, [r6]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0xc
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x2e]
	mov	r0, #0x2
	strh	r0, [r4, #0x30]
	strh	r5, [r4, #0x32]
	strh	r5, [r4, #0x34]
	strh	r5, [r4, #0x36]
	sub	r0, r0, #0x42
	bl	BattleAnimAdjustPanning
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x38]
	ldr	r0, .L870+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L871:
	.align	2, 0
.L870:
	.word	gBattleAnimAttacker
	.word	AnimSharpenSphere_Step
.Lfe113:
	.size	 AnimSharpenSphere,.Lfe113-AnimSharpenSphere
	.align	2, 0
	.type	 AnimSharpenSphere_Step,function
	.thumb_func
AnimSharpenSphere_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L873	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L874	@cond_branch
	ldrh	r0, [r4, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x36]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L874	@cond_branch
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xc2
	bl	PlaySE12WithPanning
.L874:
	mov	r1, #0x0
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L873	@cond_branch
	strh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L873:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L877	@cond_branch
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	ble	.L877	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L877	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L877:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 AnimSharpenSphere_Step,.Lfe114-AnimSharpenSphere_Step
	.align	2, 0
	.type	 AnimConversion,function
	.thumb_func
AnimConversion:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L879	@cond_branch
	ldr	r4, .L882
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r5, .L882+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r5]
	add	r0, r0, r1
	strh	r0, [r6, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x2]
	add	r0, r0, r5
	strh	r0, [r6, #0x22]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L880	@cond_branch
	ldrh	r0, [r6, #0x22]
	add	r0, r0, #0xa
	strh	r0, [r6, #0x22]
.L880:
	ldrh	r0, [r6, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x2e]
.L879:
	ldr	r0, .L882+0x4
	ldrh	r1, [r0, #0xe]
	ldr	r0, .L882+0x8
	cmp	r1, r0
	bne	.L881	@cond_branch
	add	r0, r6, #0
	bl	DestroyAnimSprite
.L881:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L883:
	.align	2, 0
.L882:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	0xffff
.Lfe115:
	.size	 AnimConversion,.Lfe115-AnimConversion
	.align	2, 0
	.globl	AnimTask_ConversionAlphaBlend
	.type	 AnimTask_ConversionAlphaBlend,function
	.thumb_func
AnimTask_ConversionAlphaBlend:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L892
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L885	@cond_branch
	ldr	r1, .L892+0x4
	ldr	r0, .L892+0x8
	strh	r0, [r1, #0xe]
	b	.L891
.L893:
	.align	2, 0
.L892:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	0xffff
.L885:
	cmp	r0, #0x2
	bne	.L887	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	b	.L886
.L887:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L886	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r2, [r4, #0xa]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xa]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L886	@cond_branch
.L891:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
.L886:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe116:
	.size	 AnimTask_ConversionAlphaBlend,.Lfe116-AnimTask_ConversionAlphaBlend
	.align	2, 0
	.type	 AnimConversion2,function
	.thumb_func
AnimConversion2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimTarget
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L895
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4, #0x2e]
	ldr	r0, .L895+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L896:
	.align	2, 0
.L895:
	.word	gBattleAnimArgs
	.word	AnimConversion2_Step
.Lfe117:
	.size	 AnimConversion2,.Lfe117-AnimConversion2
	.align	2, 0
	.type	 AnimConversion2_Step,function
	.thumb_func
AnimConversion2_Step:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r1, [r5, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r5, r2]
	cmp	r0, #0
	beq	.L898	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r5, #0x2e]
	b	.L899
.L898:
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, #0x1e
	strh	r0, [r5, #0x2e]
	ldr	r4, .L900
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x36]
	ldr	r0, .L900+0x4
	str	r0, [r5, #0x1c]
	ldr	r1, .L900+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
.L899:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L901:
	.align	2, 0
.L900:
	.word	gBattleAnimAttacker
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe118:
	.size	 AnimConversion2_Step,.Lfe118-AnimConversion2_Step
	.align	2, 0
	.globl	AnimTask_Conversion2AlphaBlend
	.type	 AnimTask_Conversion2AlphaBlend,function
	.thumb_func
AnimTask_Conversion2AlphaBlend:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L905
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L903	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r1, [r4, #0xa]
	add	r1, r1, #0x1
	strh	r1, [r4, #0xa]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L903	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L903:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L906:
	.align	2, 0
.L905:
	.word	gTasks
.Lfe119:
	.size	 AnimTask_Conversion2AlphaBlend,.Lfe119-AnimTask_Conversion2AlphaBlend
	.align	2, 0
	.globl	unref_sub_8102434
	.type	 unref_sub_8102434,function
	.thumb_func
unref_sub_8102434:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L915
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L909	@cond_branch
	ldr	r6, .L915+0x4
	ldr	r5, .L915+0x8
.L911:
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L912	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L912	@cond_branch
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
.L912:
	mov	r1, #0x2
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L910	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L910	@cond_branch
	add	r0, r4, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
.L910:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L915
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L911	@cond_branch
.L909:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L916:
	.align	2, 0
.L915:
	.word	gBattlersCount
	.word	gBattleAnimArgs
	.word	gHealthboxSpriteIds
.Lfe120:
	.size	 unref_sub_8102434,.Lfe120-unref_sub_8102434
	.align	2, 0
	.globl	unref_sub_81024A8
	.type	 unref_sub_81024A8,function
	.thumb_func
unref_sub_81024A8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	b	.L923
.L921:
	ldr	r0, .L924
	add	r0, r4, r0
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L923:
	ldr	r0, .L924+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L921	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L925:
	.align	2, 0
.L924:
	.word	gHealthboxSpriteIds
	.word	gBattlersCount
.Lfe121:
	.size	 unref_sub_81024A8,.Lfe121-unref_sub_81024A8
	.align	2, 0
	.type	 AnimMoon,function
	.thumb_func
AnimMoon:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L927	@cond_branch
	mov	r0, #0x30
	strh	r0, [r4, #0x20]
	mov	r0, #0x28
	b	.L929
.L927:
	ldr	r0, .L930
	ldrh	r1, [r0]
	strh	r1, [r4, #0x20]
	ldrh	r0, [r0, #0x2]
.L929:
	strh	r0, [r4, #0x22]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r4, #0x1]
	ldrb	r0, [r4, #0x3]
	mov	r1, #0xc0
	orr	r0, r0, r1
	strb	r0, [r4, #0x3]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L930+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L931:
	.align	2, 0
.L930:
	.word	gBattleAnimArgs
	.word	AnimMoon_Step
.Lfe122:
	.size	 AnimMoon,.Lfe122-AnimMoon
	.align	2, 0
	.type	 AnimMoon_Step,function
	.thumb_func
AnimMoon_Step:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L933	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L933:
	pop	{r0}
	bx	r0
.Lfe123:
	.size	 AnimMoon_Step,.Lfe123-AnimMoon_Step
	.align	2, 0
	.type	 AnimMoonlightSparkle,function
	.thumb_func
AnimMoonlightSparkle:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L935
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r2, .L935+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x2e]
	strh	r1, [r4, #0x30]
	strh	r1, [r4, #0x32]
	strh	r1, [r4, #0x34]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	ldr	r0, .L935+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L936:
	.align	2, 0
.L935:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimMoonlightSparkle_Step
.Lfe124:
	.size	 AnimMoonlightSparkle,.Lfe124-AnimMoonlightSparkle
	.align	2, 0
	.type	 AnimMoonlightSparkle_Step,function
	.thumb_func
AnimMoonlightSparkle_Step:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L938	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x32]
	mov	r3, #0x32
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x77
	bgt	.L938	@cond_branch
	ldrh	r0, [r1, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	add	r0, r2, #0x1
	strh	r0, [r1, #0x32]
.L938:
	mov	r2, #0x2e
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L940	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L940:
	pop	{r0}
	bx	r0
.Lfe125:
	.size	 AnimMoonlightSparkle_Step,.Lfe125-AnimMoonlightSparkle_Step
	.align	2, 0
	.globl	AnimTask_MoonlightEndFade
	.type	 AnimTask_MoonlightEndFade,function
	.thumb_func
AnimTask_MoonlightEndFade:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r4, #0x0
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	mov	r8, r0
	ldr	r0, .L942
	mov	r1, r8
	and	r1, r1, r0
	mov	r8, r1
	ldr	r0, .L942+0x4
	mov	r9, r0
	lsl	r5, r7, #0x2
	add	r5, r5, r7
	lsl	r5, r5, #0x3
	add	r6, r5, r0
	strh	r4, [r6, #0x8]
	strh	r4, [r6, #0xa]
	strh	r4, [r6, #0xc]
	strh	r1, [r6, #0xe]
	strh	r4, [r6, #0x10]
	strh	r4, [r6, #0x12]
	strh	r4, [r6, #0x14]
	mov	r0, #0xd
	strh	r0, [r6, #0x16]
	mov	r0, #0xe
	strh	r0, [r6, #0x18]
	mov	r0, #0xf
	strh	r0, [r6, #0x1a]
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	sub_80A76C4
	mov	sl, r0
	mov	r1, r8
	orr	r1, r1, r0
	mov	r8, r1
	mov	r0, #0x8
	add	r9, r9, r0
	add	r5, r5, r9
	add	r0, r5, #0
	add	r0, r0, #0x1c
	add	r5, r5, #0x1e
	add	r1, r5, #0
	mov	r2, r8
	bl	StorePointerInVars
	ldr	r0, .L942+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x80
	lsl	r4, r4, #0x9
	add	r1, r4, #0
	lsl	r1, r1, r0
	mov	r0, sl
	orr	r0, r0, r1
	mov	sl, r0
	ldr	r0, .L942+0xc
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, r0
	mov	r1, sl
	orr	r4, r4, r1
	ldr	r0, .L942+0x10
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L942+0x14
	str	r1, [r6]
	add	r0, r7, #0
	bl	_call_via_r1
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L943:
	.align	2, 0
.L942:
	.word	0xffff
	.word	gTasks
	.word	0x27d2
	.word	0x27d3
	.word	0x7fbb
	.word	AnimTask_MoonlightEndFade_Step
.Lfe126:
	.size	 AnimTask_MoonlightEndFade,.Lfe126-AnimTask_MoonlightEndFade
	.align	2, 0
	.type	 AnimTask_MoonlightEndFade_Step,function
	.thumb_func
AnimTask_MoonlightEndFade_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L978
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L961	@cond_branch
	cmp	r1, #0x1
	bgt	.L976	@cond_branch
	cmp	r1, #0
	beq	.L946	@cond_branch
	b	.L945
.L979:
	.align	2, 0
.L978:
	.word	gTasks
.L976:
	cmp	r1, #0x2
	bne	.LCB10503
	b	.L970	@long jump
.LCB10503:
	cmp	r1, #0x3
	bne	.LCB10505
	b	.L972	@long jump
.LCB10505:
	b	.L945
.L946:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB10517
	b	.L945	@long jump
.LCB10517:
	strh	r1, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xf
	bgt	.L948	@cond_branch
	ldrh	r0, [r4, #0x16]
	ldrh	r1, [r4, #0x10]
	add	r0, r0, r1
	strh	r0, [r4, #0x10]
	ldrh	r2, [r4, #0x18]
	ldrh	r3, [r4, #0x12]
	add	r2, r2, r3
	strh	r2, [r4, #0x12]
	ldrh	r1, [r4, #0x1a]
	ldrh	r5, [r4, #0x14]
	add	r1, r1, r5
	strh	r1, [r4, #0x14]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x13
	lsl	r2, r2, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x13
	lsl	r1, r1, #0x10
	lsr	r2, r2, #0xb
	orr	r0, r0, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	ip, r0
	b	.L949
.L948:
	ldr	r7, .L980
	mov	ip, r7
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L949:
	mov	r2, #0x1
	mov	r3, #0x0
	mov	r1, #0x0
.L953:
	mov	r5, #0xe
	ldrsh	r0, [r4, r5]
	and	r0, r0, r2
	lsl	r5, r2, #0x11
	add	r6, r3, #0
	add	r6, r6, #0x10
	add	r1, r1, #0x1
	mov	r8, r1
	cmp	r0, #0
	beq	.L954	@cond_branch
	mov	r1, #0x1
	ldr	r2, .L980+0x4
.L958:
	add	r0, r3, r1
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	mov	r7, ip
	strh	r7, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L958	@cond_branch
.L954:
	lsr	r2, r5, #0x10
	lsl	r0, r6, #0x10
	lsr	r3, r0, #0x10
	mov	r1, r8
	lsl	r0, r1, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, #0xf
	bls	.L953	@cond_branch
	b	.L945
.L981:
	.align	2, 0
.L980:
	.word	0x7fbb
	.word	gPlttBufferFaded
.L961:
	ldr	r0, .L982
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L945	@cond_branch
	mov	r2, #0x0
	ldr	r3, .L982+0x4
	mov	r5, #0x14
	add	r5, r5, r3
	mov	ip, r5
	ldr	r7, .L982+0x8
	mov	r8, r7
	ldr	r6, .L982+0xc
	mov	r5, #0x1
.L966:
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r1, r0, #0x2
	mov	r7, ip
	add	r0, r1, r7
	ldr	r0, [r0]
	cmp	r0, r8
	beq	.L968	@cond_branch
	cmp	r0, r6
	bne	.L965	@cond_branch
.L968:
	add	r0, r1, r3
	strh	r5, [r0, #0x2e]
.L965:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3f
	bls	.L966	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	b	.L977
.L983:
	.align	2, 0
.L982:
	.word	gPaletteFade
	.word	gSprites
	.word	gMoonSpriteTemplate
	.word	gMoonlightSparkleSpriteTemplate
.L970:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	ble	.L945	@cond_branch
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	bl	LoadPointerFromVars
	ldr	r1, .L984
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
.L977:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L945
.L985:
	.align	2, 0
.L984:
	.word	0x7fbb
.L972:
	ldr	r0, .L986
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L945	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L945:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L987:
	.align	2, 0
.L986:
	.word	gPaletteFade
.Lfe127:
	.size	 AnimTask_MoonlightEndFade_Step,.Lfe127-AnimTask_MoonlightEndFade_Step
	.align	2, 0
	.type	 AnimHornHit,function
	.thumb_func
AnimHornHit:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r6, .L996
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bgt	.L989	@cond_branch
	mov	r0, #0x2
	strh	r0, [r6, #0x4]
.L989:
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x7f
	ble	.L990	@cond_branch
	mov	r0, #0x7f
	strh	r0, [r6, #0x4]
.L990:
	mov	r0, #0x0
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r6, #0x4]
	strh	r0, [r5, #0x30]
	ldr	r4, .L996+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6]
	add	r0, r0, r1
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x2]
	add	r0, r0, r6
	strh	r0, [r5, #0x22]
	ldrh	r1, [r5, #0x20]
	strh	r1, [r5, #0x3a]
	strh	r0, [r5, #0x3c]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L991	@cond_branch
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	add	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L996+0x8
	b	.L995
.L997:
	.align	2, 0
.L996:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	-0x1400
.L991:
	ldr	r0, .L998
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L993	@cond_branch
	ldrh	r0, [r5, #0x20]
	sub	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	add	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x5
.L995:
	bl	__divsi3
	strh	r0, [r5, #0x34]
	lsl	r4, r4, #0x7
	strh	r4, [r5, #0x36]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L998+0x4
	bl	__divsi3
	strh	r0, [r5, #0x38]
	b	.L992
.L999:
	.align	2, 0
.L998:
	.word	gBattleAnimAttacker
	.word	-0xa00
.L993:
	ldrh	r0, [r5, #0x20]
	add	r0, r0, #0x28
	strh	r0, [r5, #0x20]
	ldrh	r4, [r5, #0x22]
	sub	r4, r4, #0x14
	strh	r4, [r5, #0x22]
	lsl	r0, r0, #0x7
	strh	r0, [r5, #0x32]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	ldr	r0, .L1000
	bl	__divsi3
	strh	r0, [r5, #0x34]
	lsl	r4, r4, #0x7
	strh	r4, [r5, #0x36]
	mov	r0, #0x30
	ldrsh	r1, [r5, r0]
	mov	r0, #0xa0
	lsl	r0, r0, #0x4
	bl	__divsi3
	strh	r0, [r5, #0x38]
	ldrb	r1, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x30
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L992:
	ldr	r0, .L1000+0x4
	str	r0, [r5, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1001:
	.align	2, 0
.L1000:
	.word	-0x1400
	.word	AnimHornHit_Step
.Lfe128:
	.size	 AnimHornHit,.Lfe128-AnimHornHit
	.align	2, 0
	.type	 AnimHornHit_Step,function
	.thumb_func
AnimHornHit_Step:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x32]
	add	r0, r0, r1
	strh	r0, [r2, #0x32]
	ldrh	r1, [r2, #0x38]
	ldrh	r3, [r2, #0x36]
	add	r1, r1, r3
	strh	r1, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x17
	strh	r0, [r2, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x17
	strh	r1, [r2, #0x22]
	ldrh	r0, [r2, #0x30]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1003	@cond_branch
	ldrh	r0, [r2, #0x3a]
	strh	r0, [r2, #0x20]
	ldrh	r0, [r2, #0x3c]
	strh	r0, [r2, #0x22]
.L1003:
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L1004	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimSprite
.L1004:
	pop	{r0}
	bx	r0
.Lfe129:
	.size	 AnimHornHit_Step,.Lfe129-AnimHornHit_Step
	.align	2, 0
	.globl	AnimTask_DoubleTeam
	.type	 AnimTask_DoubleTeam,function
	.thumb_func
AnimTask_DoubleTeam:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	ldr	r1, .L1018
	add	r6, r0, r1
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x8]
	ldr	r0, .L1018+0x4
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0xa]
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	ldr	r2, .L1018+0x8
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r4, r0, #0x4
	mov	r5, #0x1
	ldr	r2, .L1018+0xc
.L1009:
	add	r1, r3, r5
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	add	r0, r4, r5
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L1009	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x10
	mov	r2, #0xb
	mov	r3, #0x0
	bl	BlendPalette
	mov	r0, #0x0
	strh	r0, [r6, #0xe]
	mov	r5, #0x0
	ldr	r7, .L1018+0x8
	mov	r1, #0x1c
	add	r1, r1, r7
	mov	r9, r1
	b	.L1011
.L1019:
	.align	2, 0
.L1018:
	.word	gTasks
	.word	0x2771
	.word	gSprites
	.word	gPlttBufferUnfaded
.L1013:
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r4, r2, r7
	ldrb	r1, [r6, #0xa]
	lsl	r1, r1, #0x4
	ldrb	r3, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	lsl	r0, r5, #0x7
	strh	r0, [r4, #0x30]
	mov	r0, r8
	strh	r0, [r4, #0x32]
	add	r2, r2, r9
	ldr	r0, .L1020
	str	r0, [r2]
	ldrh	r0, [r6, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r6, #0xe]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L1011:
	cmp	r5, #0x1
	bhi	.L1012	@cond_branch
	mov	r0, #0x0
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1013	@cond_branch
.L1012:
	ldr	r0, .L1020+0x4
	str	r0, [r6]
	ldr	r0, .L1020+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1016	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	ClearGpuRegBits
	b	.L1017
.L1021:
	.align	2, 0
.L1020:
	.word	AnimDoubleTeam
	.word	AnimTask_DoubleTeam_Step
	.word	gBattleAnimAttacker
.L1016:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	ClearGpuRegBits
.L1017:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe130:
	.size	 AnimTask_DoubleTeam,.Lfe130-AnimTask_DoubleTeam
	.align	2, 0
	.type	 AnimTask_DoubleTeam_Step,function
	.thumb_func
AnimTask_DoubleTeam_Step:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L1026
	add	r0, r0, r1
	mov	r1, #0xe
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1023	@cond_branch
	ldr	r0, .L1026+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1024	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	mov	r0, #0x0
	bl	SetGpuRegBits
	b	.L1025
.L1027:
	.align	2, 0
.L1026:
	.word	gTasks
	.word	gBattleAnimAttacker
.L1024:
	mov	r1, #0x80
	lsl	r1, r1, #0x3
	mov	r0, #0x0
	bl	SetGpuRegBits
.L1025:
	ldr	r0, .L1028
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
.L1023:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1029:
	.align	2, 0
.L1028:
	.word	0x2771
.Lfe131:
	.size	 AnimTask_DoubleTeam_Step,.Lfe131-AnimTask_DoubleTeam_Step
	.align	2, 0
	.type	 AnimDoubleTeam,function
	.thumb_func
AnimDoubleTeam:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L1031	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x34]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x2e]
.L1031:
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x40
	ble	.L1032	@cond_branch
	ldr	r2, .L1034
	mov	r0, #0x32
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0xe]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0xe]
	add	r0, r5, #0
	bl	obj_delete_but_dont_free_vram
	b	.L1033
.L1035:
	.align	2, 0
.L1034:
	.word	gTasks
.L1032:
	ldr	r4, .L1036
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0x6
	bl	__divsi3
	strh	r0, [r5, #0x36]
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	mov	r1, #0xd
	bl	__divsi3
	strh	r0, [r5, #0x38]
	ldrh	r1, [r5, #0x30]
	add	r1, r1, r0
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x30]
	mov	r1, #0x30
	ldrsh	r0, [r5, r1]
	mov	r2, #0x36
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
.L1033:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1037:
	.align	2, 0
.L1036:
	.word	gSineTable
.Lfe132:
	.size	 AnimDoubleTeam,.Lfe132-AnimDoubleTeam
	.align	2, 0
	.type	 AnimSuperFang,function
	.thumb_func
AnimSuperFang:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L1039
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1039+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1040:
	.align	2, 0
.L1039:
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe133:
	.size	 AnimSuperFang,.Lfe133-AnimSuperFang
	.align	2, 0
	.globl	AnimTask_MusicNotesRainbowBlend
	.type	 AnimTask_MusicNotesRainbowBlend,function
	.thumb_func
AnimTask_MusicNotesRainbowBlend:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r4, .L1059
	ldrh	r0, [r4]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	beq	.L1042	@cond_branch
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	mov	r2, #0x1
	ldr	r5, .L1059+0x4
.L1046:
	add	r1, r3, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L1046	@cond_branch
.L1042:
	mov	r4, #0x1
	ldr	r0, .L1059
	mov	r8, r0
.L1051:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r5, r0, #0x2
	mov	r1, r8
	add	r0, r5, r1
	ldrh	r0, [r0]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r4, r4, #0x1
	mov	ip, r4
	cmp	r3, #0xff
	beq	.L1050	@cond_branch
	lsl	r0, r3, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r3, r0, #0x10
	mov	r2, #0x1
	ldr	r7, .L1059+0x4
	ldr	r6, .L1059
	add	r4, r5, #0
.L1056:
	add	r1, r3, r2
	lsl	r1, r1, #0x1
	add	r1, r1, r7
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x5
	bls	.L1056	@cond_branch
.L1050:
	mov	r1, ip
	lsl	r0, r1, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L1051	@cond_branch
	mov	r0, r9
	bl	DestroyAnimVisualTask
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1060:
	.align	2, 0
.L1059:
	.word	gParticlesColorBlendTable
	.word	gPlttBufferFaded
.Lfe134:
	.size	 AnimTask_MusicNotesRainbowBlend,.Lfe134-AnimTask_MusicNotesRainbowBlend
	.align	2, 0
	.globl	AnimTask_MusicNotesClearRainbowBlend
	.type	 AnimTask_MusicNotesClearRainbowBlend,function
	.thumb_func
AnimTask_MusicNotesClearRainbowBlend:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x1
	ldr	r6, .L1067
.L1065:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r0, [r0]
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L1065	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1068:
	.align	2, 0
.L1067:
	.word	gParticlesColorBlendTable
.Lfe135:
	.size	 AnimTask_MusicNotesClearRainbowBlend,.Lfe135-AnimTask_MusicNotesClearRainbowBlend
	.align	2, 0
	.type	 AnimWavyMusicNotes,function
	.thumb_func
AnimWavyMusicNotes:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r4, .L1073
	ldrb	r1, [r4]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r2, .L1073+0x4
	mov	r0, #0x2
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1070	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r5, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
.L1070:
	ldrh	r0, [r4, #0x2]
	mov	r1, #0x0
	strh	r0, [r5, #0x30]
	strh	r1, [r5, #0x32]
	ldrh	r0, [r4, #0x4]
	strh	r0, [r5, #0x34]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1071	@cond_branch
	mov	r6, #0x30
	mov	r3, #0x28
	b	.L1072
.L1074:
	.align	2, 0
.L1073:
	.word	gBattleAnimArgs
	.word	gParticlesColorBlendTable
.L1071:
	ldr	r4, .L1075
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L1072:
	ldrh	r0, [r5, #0x20]
	lsl	r1, r0, #0x4
	strh	r1, [r5, #0x36]
	ldrh	r1, [r5, #0x22]
	lsl	r2, r1, #0x4
	strh	r2, [r5, #0x38]
	sub	r0, r6, r0
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r1, r3, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r2, r5, #0
	add	r2, r2, #0x3a
	add	r3, r5, #0
	add	r3, r3, #0x3c
	mov	r4, #0x28
	str	r4, [sp]
	bl	AnimWavyMusicNotesGetNextPos
	ldr	r0, .L1075+0x4
	str	r0, [r5, #0x1c]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1076:
	.align	2, 0
.L1075:
	.word	gBattleAnimTarget
	.word	AnimWavyMusicNotes_Step
.Lfe136:
	.size	 AnimWavyMusicNotes,.Lfe136-AnimWavyMusicNotes
	.align	2, 0
	.type	 AnimWavyMusicNotesGetNextPos,function
	.thumb_func
AnimWavyMusicNotesGetNextPos:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r2, #0
	mov	r8, r3
	ldr	r2, [sp, #0x18]
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r1, r2, #0x18
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bge	.L1078	@cond_branch
	lsl	r0, r1, #0x18
	neg	r0, r0
	lsr	r1, r0, #0x18
.L1078:
	lsl	r5, r2, #0x8
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	add	r0, r5, #0
	bl	__divsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L1079	@cond_branch
	mov	r4, #0x1
.L1079:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	strh	r0, [r7]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x8
	add	r1, r4, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe137:
	.size	 AnimWavyMusicNotesGetNextPos,.Lfe137-AnimWavyMusicNotesGetNextPos
	.align	2, 0
	.type	 AnimWavyMusicNotes_Step,function
	.thumb_func
AnimWavyMusicNotes_Step:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x2e]
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r1, r0, r1
	add	r0, r1, #0
	cmp	r1, #0
	bge	.L1081	@cond_branch
	add	r0, r0, #0xff
.L1081:
	asr	r0, r0, #0x8
	lsl	r0, r0, #0x8
	sub	r0, r1, r0
	ldrh	r1, [r4, #0x3a]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	ldrh	r2, [r4, #0x3c]
	ldrh	r3, [r4, #0x38]
	add	r2, r2, r3
	strh	r2, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x20]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x14
	strh	r2, [r4, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xf
	bl	Sin
	strh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	mov	r1, #0x88
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bhi	.L1083	@cond_branch
	lsl	r0, r2, #0x10
	asr	r1, r0, #0x10
	mov	r0, #0x10
	neg	r0, r0
	cmp	r1, r0
	blt	.L1083	@cond_branch
	cmp	r1, #0x80
	ble	.L1082	@cond_branch
.L1083:
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
	b	.L1084
.L1082:
	mov	r0, #0x34
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	beq	.L1084	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x32]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, r1
	ble	.L1084	@cond_branch
	strh	r5, [r4, #0x32]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3
	ble	.L1086	@cond_branch
	strh	r5, [r4, #0x30]
.L1086:
	ldr	r2, .L1088
	mov	r3, #0x30
	ldrsh	r1, [r4, r3]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1084	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
.L1084:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1089:
	.align	2, 0
.L1088:
	.word	gParticlesColorBlendTable
.Lfe138:
	.size	 AnimWavyMusicNotes_Step,.Lfe138-AnimWavyMusicNotes_Step
	.align	2, 0
	.type	 AnimFlyingMusicNotes,function
	.thumb_func
AnimFlyingMusicNotes:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	ldr	r7, .L1092
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1091	@cond_branch
	ldr	r1, .L1092+0x4
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	neg	r0, r0
	strh	r0, [r1, #0x2]
.L1091:
	ldrb	r0, [r7]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r4, .L1092+0x4
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x2]
	add	r0, r0, r1
	mov	r5, #0x0
	strh	r0, [r6, #0x20]
	ldrb	r0, [r7]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r6, #0x22]
	ldrb	r1, [r4]
	add	r0, r6, #0
	bl	StartSpriteAnim
	strh	r5, [r6, #0x32]
	strh	r5, [r6, #0x34]
	ldrh	r0, [r6, #0x20]
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x36]
	ldrh	r0, [r6, #0x22]
	lsl	r0, r0, #0x4
	strh	r0, [r6, #0x38]
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x4
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r6, #0x3a]
	mov	r2, #0x4
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x7
	mov	r1, #0x5
	bl	__divsi3
	strh	r0, [r6, #0x3c]
	ldr	r0, .L1092+0x8
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1093:
	.align	2, 0
.L1092:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	AnimFlyingMusicNotes_Step
.Lfe139:
	.size	 AnimFlyingMusicNotes,.Lfe139-AnimFlyingMusicNotes
	.align	2, 0
	.type	 AnimFlyingMusicNotes_Step,function
	.thumb_func
AnimFlyingMusicNotes_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x36]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x3c]
	ldrh	r2, [r4, #0x38]
	add	r1, r1, r2
	strh	r1, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x14
	strh	r0, [r4, #0x20]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	strh	r1, [r4, #0x22]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x5
	ble	.L1095	@cond_branch
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L1095	@cond_branch
	ldrh	r0, [r4, #0x32]
	add	r0, r0, #0x10
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0x12
	bl	Cos
	strh	r0, [r4, #0x24]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	mov	r1, #0x12
	bl	Sin
	strh	r0, [r4, #0x26]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1095	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x34]
.L1095:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x30
	bne	.L1097	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L1097:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe140:
	.size	 AnimFlyingMusicNotes_Step,.Lfe140-AnimFlyingMusicNotes_Step
	.align	2, 0
	.type	 AnimBellyDrumHand,function
	.thumb_func
AnimBellyDrumHand:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L1101
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x1
	bne	.L1099	@cond_branch
	ldrb	r0, [r5, #0x3]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x10
	orr	r1, r1, r0
	strb	r1, [r5, #0x3]
	mov	r6, #0x10
	b	.L1100
.L1102:
	.align	2, 0
.L1101:
	.word	gBattleAnimArgs
.L1099:
	ldr	r6, .L1103
.L1100:
	ldr	r4, .L1103+0x4
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r6
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x8
	strh	r0, [r5, #0x22]
	mov	r0, #0x8
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1103+0x8
	str	r0, [r5, #0x1c]
	ldr	r1, .L1103+0xc
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1104:
	.align	2, 0
.L1103:
	.word	0xfff0
	.word	gBattleAnimAttacker
	.word	WaitAnimForDuration
	.word	DestroyAnimSprite
.Lfe141:
	.size	 AnimBellyDrumHand,.Lfe141-AnimBellyDrumHand
	.align	2, 0
	.type	 AnimSlowFlyingMusicNotes,function
	.thumb_func
AnimSlowFlyingMusicNotes:
	push	{r4, r5, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x8
	strh	r0, [r4, #0x22]
	ldr	r5, .L1109
	ldrb	r1, [r5, #0x2]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r2, .L1109+0x4
	mov	r0, #0x4
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.L1106	@cond_branch
	lsl	r2, r0, #0x4
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
.L1106:
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	mov	r2, #0x20
	cmp	r0, #0
	bne	.L1107	@cond_branch
	ldr	r2, .L1109+0x8
.L1107:
	mov	r0, #0x28
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x20]
	strh	r1, [r4, #0x30]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	sub	r0, r0, #0x28
	strh	r0, [r4, #0x36]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x38]
	ldr	r0, .L1109+0xc
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1110:
	.align	2, 0
.L1109:
	.word	gBattleAnimArgs
	.word	gParticlesColorBlendTable
	.word	0xffe0
	.word	AnimSlowFlyingMusicNotes_Step
.Lfe142:
	.size	 AnimSlowFlyingMusicNotes,.Lfe142-AnimSlowFlyingMusicNotes
	.align	2, 0
	.type	 AnimSlowFlyingMusicNotes_Step,function
	.thumb_func
AnimSlowFlyingMusicNotes_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1112	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x8
	bl	Sin
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldrh	r2, [r4, #0x24]
	mov	r3, #0x24
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bge	.L1113	@cond_branch
	lsl	r0, r1, #0x10
	neg	r0, r0
	lsr	r1, r0, #0x10
.L1113:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r2
	strh	r0, [r4, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r1, #0x4
	bl	Sin
	ldrh	r3, [r4, #0x26]
	add	r0, r0, r3
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x38]
	b	.L1114
.L1112:
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L1114:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe143:
	.size	 AnimSlowFlyingMusicNotes_Step,.Lfe143-AnimSlowFlyingMusicNotes_Step
	.align	2, 0
	.globl	SetSpriteNextToMonHead
	.type	 SetSpriteNextToMonHead,function
	.thumb_func
SetSpriteNextToMonHead:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1116	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x5
	bl	GetBattlerSpriteCoordAttr
	add	r0, r0, #0x8
	b	.L1119
.L1116:
	add	r0, r5, #0
	mov	r1, #0x4
	bl	GetBattlerSpriteCoordAttr
	sub	r0, r0, #0x8
.L1119:
	strh	r0, [r6, #0x20]
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoordAttr
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1118	@cond_branch
	add	r0, r0, #0x3
.L1118:
	asr	r0, r0, #0x2
	sub	r0, r4, r0
	strh	r0, [r6, #0x22]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe144:
	.size	 SetSpriteNextToMonHead,.Lfe144-SetSpriteNextToMonHead
	.align	2, 0
	.type	 AnimThoughtBubble,function
	.thumb_func
AnimThoughtBubble:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1125
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1121	@cond_branch
	ldr	r0, .L1125+0x4
	b	.L1124
.L1126:
	.align	2, 0
.L1125:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1121:
	ldr	r0, .L1127
.L1124:
	ldrb	r4, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetSpriteNextToMonHead
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r1, r1, #0x1f
	ldr	r0, .L1127+0x4
	ldrh	r0, [r0, #0x2]
	strh	r0, [r5, #0x2e]
	add	r0, r1, #0x2
	strh	r0, [r5, #0x30]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r1, .L1127+0x8
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1127+0xc
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1128:
	.align	2, 0
.L1127:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
	.word	AnimThoughtBubble_Step
	.word	RunStoredCallbackWhenAnimEnds
.Lfe145:
	.size	 AnimThoughtBubble,.Lfe145-AnimThoughtBubble
	.align	2, 0
	.type	 AnimThoughtBubble_Step,function
	.thumb_func
AnimThoughtBubble_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1130	@cond_branch
	ldr	r1, .L1131
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldrh	r1, [r4, #0x30]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r0, .L1131+0x4
	str	r0, [r4, #0x1c]
.L1130:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1132:
	.align	2, 0
.L1131:
	.word	DestroyAnimSprite
	.word	RunStoredCallbackWhenAnimEnds
.Lfe146:
	.size	 AnimThoughtBubble_Step,.Lfe146-AnimThoughtBubble_Step
	.align	2, 0
	.type	 AnimMetronomeFinger,function
	.thumb_func
AnimMetronomeFinger:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L1137
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1134	@cond_branch
	ldr	r0, .L1137+0x4
	b	.L1136
.L1138:
	.align	2, 0
.L1137:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1134:
	ldr	r0, .L1139
.L1136:
	ldrb	r0, [r0]
	add	r1, r4, #0
	bl	SetSpriteNextToMonHead
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r1, .L1139+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1139+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1140:
	.align	2, 0
.L1139:
	.word	gBattleAnimTarget
	.word	AnimMetronomeFinger_Step
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe147:
	.size	 AnimMetronomeFinger,.Lfe147-AnimMetronomeFinger
	.align	2, 0
	.type	 AnimMetronomeFinger_Step,function
	.thumb_func
AnimMetronomeFinger_Step:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L1142	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r1, .L1143
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1143+0x4
	str	r0, [r4, #0x1c]
.L1142:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1144:
	.align	2, 0
.L1143:
	.word	DestroySpriteAndMatrix
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe148:
	.size	 AnimMetronomeFinger_Step,.Lfe148-AnimMetronomeFinger_Step
	.align	2, 0
	.type	 AnimFollowMeFinger,function
	.thumb_func
AnimFollowMeFinger:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r0, .L1150
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1146	@cond_branch
	ldr	r0, .L1150+0x4
	b	.L1149
.L1151:
	.align	2, 0
.L1150:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1146:
	ldr	r0, .L1152
.L1149:
	ldrb	r5, [r0]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r4, #0x20]
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoordAttr
	strh	r0, [r4, #0x22]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x9
	bgt	.L1148	@cond_branch
	mov	r0, #0xa
	strh	r0, [r4, #0x22]
.L1148:
	mov	r0, #0x1
	strh	r0, [r4, #0x2e]
	strh	r6, [r4, #0x30]
	add	r1, r4, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	strh	r0, [r4, #0x32]
	ldrb	r0, [r1]
	add	r0, r0, #0x4
	strh	r0, [r4, #0x34]
	strh	r6, [r4, #0x36]
	ldr	r1, .L1152+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1152+0x8
	str	r0, [r4, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1153:
	.align	2, 0
.L1152:
	.word	gBattleAnimTarget
	.word	AnimFollowMeFinger_Step1
	.word	RunStoredCallbackWhenAffineAnimEnds
.Lfe149:
	.size	 AnimFollowMeFinger,.Lfe149-AnimFollowMeFinger
	.align	2, 0
	.type	 AnimFollowMeFinger_Step1,function
	.thumb_func
AnimFollowMeFinger_Step1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x36]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xc
	ble	.L1155	@cond_branch
	ldr	r0, .L1156
	str	r0, [r1, #0x1c]
.L1155:
	pop	{r0}
	bx	r0
.L1157:
	.align	2, 0
.L1156:
	.word	AnimFollowMeFinger_Step2
.Lfe150:
	.size	 AnimFollowMeFinger_Step1,.Lfe150-AnimFollowMeFinger_Step1
	.align	2, 0
	.type	 AnimFollowMeFinger_Step2,function
	.thumb_func
AnimFollowMeFinger_Step2:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0x4
	strh	r1, [r2, #0x30]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xfe
	ble	.L1159	@cond_branch
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L1160	@cond_branch
	strh	r0, [r2, #0x24]
	ldr	r0, .L1164
	str	r0, [r2, #0x1c]
	b	.L1158
.L1165:
	.align	2, 0
.L1164:
	.word	AnimMetronomeFinger_Step
.L1160:
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r2, #0x30]
.L1159:
	mov	r1, #0x30
	ldrsh	r0, [r2, r1]
	cmp	r0, #0x4f
	ble	.L1162	@cond_branch
	ldrh	r0, [r2, #0x34]
	add	r1, r2, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
.L1162:
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	cmp	r0, #0x9f
	ble	.L1163	@cond_branch
	ldrh	r0, [r2, #0x32]
	add	r1, r2, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
.L1163:
	ldr	r1, .L1166
	mov	r3, #0x30
	ldrsh	r0, [r2, r3]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x13
	asr	r1, r0, #0x1
	add	r0, r0, r1
	strh	r0, [r2, #0x24]
.L1158:
	pop	{r0}
	bx	r0
.L1167:
	.align	2, 0
.L1166:
	.word	gSineTable
.Lfe151:
	.size	 AnimFollowMeFinger_Step2,.Lfe151-AnimFollowMeFinger_Step2
	.align	2, 0
	.type	 AnimTauntFinger,function
	.thumb_func
AnimTauntFinger:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L1175
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L1169	@cond_branch
	ldr	r0, .L1175+0x4
	b	.L1173
.L1176:
	.align	2, 0
.L1175:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
.L1169:
	ldr	r0, .L1177
.L1173:
	ldrb	r4, [r0]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	SetSpriteNextToMonHead
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1171	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x0
	bl	StartSpriteAnim
	mov	r0, #0x2
	b	.L1174
.L1178:
	.align	2, 0
.L1177:
	.word	gBattleAnimTarget
.L1171:
	add	r0, r5, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	mov	r0, #0x3
.L1174:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L1179
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1180:
	.align	2, 0
.L1179:
	.word	AnimTauntFinger_Step1
.Lfe152:
	.size	 AnimTauntFinger,.Lfe152-AnimTauntFinger
	.align	2, 0
	.type	 AnimTauntFinger_Step1,function
	.thumb_func
AnimTauntFinger_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	ble	.L1182	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r1, .L1183
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L1183+0x4
	str	r0, [r4, #0x1c]
.L1182:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1184:
	.align	2, 0
.L1183:
	.word	AnimTauntFinger_Step2
	.word	RunStoredCallbackWhenAnimEnds
.Lfe153:
	.size	 AnimTauntFinger_Step1,.Lfe153-AnimTauntFinger_Step1
	.align	2, 0
	.type	 AnimTauntFinger_Step2,function
	.thumb_func
AnimTauntFinger_Step2:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	ble	.L1186	@cond_branch
	add	r0, r1, #0
	bl	DestroyAnimSprite
.L1186:
	pop	{r0}
	bx	r0
.Lfe154:
	.size	 AnimTauntFinger_Step2,.Lfe154-AnimTauntFinger_Step2
.text
	.align	2, 0

