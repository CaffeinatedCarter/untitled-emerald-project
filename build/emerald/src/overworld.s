@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sUnknown_020322D8,object
	.size	 sUnknown_020322D8,1
sUnknown_020322D8:
	.byte	0x0
	.globl	gLastUsedWarp
	.align	2, 0
	.type	 gLastUsedWarp,object
	.size	 gLastUsedWarp,8
gLastUsedWarp:
	.byte	0x0
	.space	7
	.align	2, 0
	.type	 sWarpDestination,object
	.size	 sWarpDestination,8
sWarpDestination:
	.byte	0x0
	.space	7
	.align	2, 0
	.type	 gFixedDiveWarp,object
	.size	 gFixedDiveWarp,8
gFixedDiveWarp:
	.byte	0x0
	.space	7
	.align	2, 0
	.type	 gFixedHoleWarp,object
	.size	 gFixedHoleWarp,8
gFixedHoleWarp:
	.byte	0x0
	.space	7
	.align	1, 0
	.type	 sLastMapSectionId,object
	.size	 sLastMapSectionId,2
sLastMapSectionId:
	.short	0x0
	.align	2, 0
	.type	 gInitialPlayerAvatarState,object
	.size	 gInitialPlayerAvatarState,4
gInitialPlayerAvatarState:
	.byte	0x0
	.space	3
	.align	1, 0
	.type	 sAmbientCrySpecies,object
	.size	 sAmbientCrySpecies,2
sAmbientCrySpecies:
	.short	0x0
	.type	 sIsAmbientCryWaterMon,object
	.size	 sIsAmbientCryWaterMon,1
sIsAmbientCryWaterMon:
	.byte	0x0
	.globl	gLinkPlayerObjectEvents
	.align	2, 0
	.type	 gLinkPlayerObjectEvents,object
	.size	 gLinkPlayerObjectEvents,16
gLinkPlayerObjectEvents:
	.byte	0x0
	.space	3
	.space	12
	.section .rodata
	.align	2, 0
	.type	 sDummyWarpData,object
	.size	 sDummyWarpData,8
sDummyWarpData:
	.byte	-0x1
	.byte	-0x1
	.byte	-0x1
	.space	1
	.short	-0x1
	.short	-0x1
	.type	 sUnusedData,object
sUnusedData:
	.byte	0xb0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x10
	.byte	0xe
	.byte	0x0
	.byte	0x0
	.byte	0xb0
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x60
	.byte	0x9
	.byte	0x0
	.byte	0x0
	.byte	0x32
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x50
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd4
	.byte	0xff
	.byte	0xff
	.byte	0xff
	.byte	0x2c
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnusedData,32
	.globl	gDirectionToVectors
	.align	2, 0
	.type	 gDirectionToVectors,object
gDirectionToVectors:
	.word	0x0
	.word	0x0
	.word	0x0
	.word	0x1
	.word	0x0
	.word	-0x1
	.word	-0x1
	.word	0x0
	.word	0x1
	.word	0x0
	.word	-0x1
	.word	0x1
	.word	0x1
	.word	0x1
	.word	-0x1
	.word	-0x1
	.word	0x1
	.word	-0x1
	.size	 gDirectionToVectors,72
	.align	2, 0
	.type	 sOverworldBgTemplates,object
	.size	 sOverworldBgTemplates,16
sOverworldBgTemplates:
	.byte	0xf8
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xd1
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xc2
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xe3
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sFlashEffectParams,object
	.size	 sFlashEffectParams,12
sFlashEffectParams:
	.word	0x4000040
	.word	-0x5d9fffff
	.byte	0x1
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 gLinkPlayerMovementModes,object
gLinkPlayerMovementModes:
	.word	MovementEventModeCB_Normal
	.word	MovementEventModeCB_Ignored
	.word	MovementEventModeCB_Normal_2
	.size	 gLinkPlayerMovementModes,12
	.align	2, 0
	.type	 gLinkPlayerFacingHandlers,object
gLinkPlayerFacingHandlers:
	.word	FacingHandler_DoNothing
	.word	FacingHandler_DpadMovement
	.word	FacingHandler_DpadMovement
	.word	FacingHandler_DpadMovement
	.word	FacingHandler_DpadMovement
	.word	FacingHandler_DoNothing
	.word	FacingHandler_DoNothing
	.word	FacingHandler_ForcedFacingChange
	.word	FacingHandler_ForcedFacingChange
	.word	FacingHandler_ForcedFacingChange
	.word	FacingHandler_ForcedFacingChange
	.size	 gLinkPlayerFacingHandlers,44
	.align	2, 0
	.type	 gMovementStatusHandler,object
gMovementStatusHandler:
	.word	MovementStatusHandler_EnterFreeMode
	.word	MovementStatusHandler_TryAdvanceScript
	.size	 gMovementStatusHandler,8
.text
	.align	2, 0
	.globl	DoWhiteOut
	.type	 DoWhiteOut,function
	.thumb_func
DoWhiteOut:
	push	{r4, lr}
	ldr	r0, .L3
	bl	ScriptContext2_RunNewScript
	ldr	r0, .L3+0x4
	ldr	r4, [r0]
	mov	r0, #0x92
	lsl	r0, r0, #0x3
	add	r4, r4, r0
	add	r0, r4, #0
	bl	GetMoney
	add	r1, r0, #0
	lsr	r1, r1, #0x1
	add	r0, r4, #0
	bl	SetMoney
	bl	HealPlayerParty
	bl	Overworld_ResetStateAfterWhiteOut
	bl	SetWarpDestinationToLastHealLocation
	bl	WarpIntoMap
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	EventScript_WhiteOut
	.word	gSaveBlock1Ptr
.Lfe1:
	.size	 DoWhiteOut,.Lfe1-DoWhiteOut
	.align	2, 0
	.globl	Overworld_ResetStateAfterFly
	.type	 Overworld_ResetStateAfterFly,function
	.thumb_func
Overworld_ResetStateAfterFly:
	push	{lr}
	bl	ResetInitialPlayerAvatarState
	ldr	r0, .L6
	bl	FlagClear
	ldr	r0, .L6+0x4
	bl	FlagClear
	ldr	r0, .L6+0x8
	bl	FlagClear
	ldr	r0, .L6+0xc
	bl	FlagClear
	ldr	r0, .L6+0x10
	bl	FlagClear
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	0x88b
	.word	0x88d
	.word	0x88c
	.word	0x889
	.word	0x888
.Lfe2:
	.size	 Overworld_ResetStateAfterFly,.Lfe2-Overworld_ResetStateAfterFly
	.align	2, 0
	.globl	Overworld_ResetStateAfterTeleport
	.type	 Overworld_ResetStateAfterTeleport,function
	.thumb_func
Overworld_ResetStateAfterTeleport:
	push	{lr}
	bl	ResetInitialPlayerAvatarState
	ldr	r0, .L9
	bl	FlagClear
	ldr	r0, .L9+0x4
	bl	FlagClear
	ldr	r0, .L9+0x8
	bl	FlagClear
	ldr	r0, .L9+0xc
	bl	FlagClear
	ldr	r0, .L9+0x10
	bl	FlagClear
	ldr	r0, .L9+0x14
	bl	ScriptContext2_RunNewScript
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	0x88b
	.word	0x88d
	.word	0x88c
	.word	0x889
	.word	0x888
	.word	EventScript_ResetMrBriney
.Lfe3:
	.size	 Overworld_ResetStateAfterTeleport,.Lfe3-Overworld_ResetStateAfterTeleport
	.align	2, 0
	.globl	Overworld_ResetStateAfterDigEscRope
	.type	 Overworld_ResetStateAfterDigEscRope,function
	.thumb_func
Overworld_ResetStateAfterDigEscRope:
	push	{lr}
	bl	ResetInitialPlayerAvatarState
	ldr	r0, .L12
	bl	FlagClear
	ldr	r0, .L12+0x4
	bl	FlagClear
	ldr	r0, .L12+0x8
	bl	FlagClear
	ldr	r0, .L12+0xc
	bl	FlagClear
	ldr	r0, .L12+0x10
	bl	FlagClear
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	0x88b
	.word	0x88d
	.word	0x88c
	.word	0x889
	.word	0x888
.Lfe4:
	.size	 Overworld_ResetStateAfterDigEscRope,.Lfe4-Overworld_ResetStateAfterDigEscRope
	.align	2, 0
	.type	 Overworld_ResetStateAfterWhiteOut,function
	.thumb_func
Overworld_ResetStateAfterWhiteOut:
	push	{r4, lr}
	bl	ResetInitialPlayerAvatarState
	ldr	r0, .L16
	bl	FlagClear
	ldr	r0, .L16+0x4
	bl	FlagClear
	ldr	r0, .L16+0x8
	bl	FlagClear
	ldr	r0, .L16+0xc
	bl	FlagClear
	ldr	r0, .L16+0x10
	bl	FlagClear
	ldr	r4, .L16+0x14
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L15	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, .L16+0x18
	mov	r1, #0x0
	bl	VarSet
.L15:
	pop	{r4}
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	0x88b
	.word	0x88d
	.word	0x88c
	.word	0x889
	.word	0x888
	.word	0x4039
	.word	0x4037
.Lfe5:
	.size	 Overworld_ResetStateAfterWhiteOut,.Lfe5-Overworld_ResetStateAfterWhiteOut
	.align	2, 0
	.type	 sub_8084788,function
	.thumb_func
sub_8084788:
	push	{lr}
	ldr	r0, .L19
	bl	FlagClear
	bl	ChooseAmbientCrySpecies
	bl	ResetCyclingRoadChallengeData
	bl	UpdateLocationHistoryForRoamer
	bl	RoamerMoveToOtherLocationSet
	pop	{r0}
	bx	r0
.L20:
	.align	2, 0
.L19:
	.word	0x88c
.Lfe6:
	.size	 sub_8084788,.Lfe6-sub_8084788
	.align	2, 0
	.globl	ResetGameStats
	.type	 ResetGameStats,function
	.thumb_func
ResetGameStats:
	push	{r4, lr}
	mov	r4, #0x0
.L25:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	SetGameStat
	add	r4, r4, #0x1
	cmp	r4, #0x3f
	ble	.L25	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 ResetGameStats,.Lfe7-ResetGameStats
	.align	2, 0
	.globl	IncrementGameStat
	.type	 IncrementGameStat,function
	.thumb_func
IncrementGameStat:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x33
	bhi	.L28	@cond_branch
	add	r0, r4, #0
	bl	GetGameStat
	add	r1, r0, #0
	ldr	r0, .L31
	cmp	r1, r0
	bhi	.L29	@cond_branch
	add	r1, r1, #0x1
	b	.L30
.L32:
	.align	2, 0
.L31:
	.word	0xfffffe
.L29:
	ldr	r1, .L33
.L30:
	add	r0, r4, #0
	bl	SetGameStat
.L28:
	pop	{r4}
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	0xffffff
.Lfe8:
	.size	 IncrementGameStat,.Lfe8-IncrementGameStat
	.align	2, 0
	.globl	GetGameStat
	.type	 GetGameStat,function
	.thumb_func
GetGameStat:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x33
	bhi	.L36	@cond_branch
	ldr	r0, .L38
	ldr	r2, [r0]
	lsl	r0, r1, #0x2
	ldr	r1, .L38+0x4
	add	r2, r2, r1
	add	r2, r2, r0
	ldr	r0, .L38+0x8
	ldr	r1, [r0]
	add	r1, r1, #0xac
	ldr	r0, [r2]
	ldr	r1, [r1]
	eor	r0, r0, r1
	b	.L37
.L39:
	.align	2, 0
.L38:
	.word	gSaveBlock1Ptr
	.word	0x159c
	.word	gSaveBlock2Ptr
.L36:
	mov	r0, #0x0
.L37:
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 GetGameStat,.Lfe9-GetGameStat
	.align	2, 0
	.globl	SetGameStat
	.type	 SetGameStat,function
	.thumb_func
SetGameStat:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x33
	bhi	.L41	@cond_branch
	ldr	r0, .L42
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	ldr	r2, .L42+0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldr	r0, .L42+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xac
	ldr	r0, [r0]
	eor	r0, r0, r3
	str	r0, [r1]
.L41:
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gSaveBlock1Ptr
	.word	0x159c
	.word	gSaveBlock2Ptr
.Lfe10:
	.size	 SetGameStat,.Lfe10-SetGameStat
	.align	2, 0
	.globl	ApplyNewEncryptionKeyToGameStats
	.type	 ApplyNewEncryptionKeyToGameStats,function
	.thumb_func
ApplyNewEncryptionKeyToGameStats:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r4, #0x0
	ldr	r6, .L50
.L48:
	lsl	r1, r4, #0x2
	ldr	r0, .L50+0x4
	add	r1, r1, r0
	ldr	r0, [r6]
	add	r0, r0, r1
	add	r1, r5, #0
	bl	ApplyNewEncryptionKeyToWord
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3f
	bls	.L48	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L51:
	.align	2, 0
.L50:
	.word	gSaveBlock1Ptr
	.word	0x159c
.Lfe11:
	.size	 ApplyNewEncryptionKeyToGameStats,.Lfe11-ApplyNewEncryptionKeyToGameStats
	.align	2, 0
	.globl	LoadObjEventTemplatesFromHeader
	.type	 LoadObjEventTemplatesFromHeader,function
	.thumb_func
LoadObjEventTemplatesFromHeader:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r5, .L53
	ldr	r1, [r5]
	mov	r4, #0xc7
	lsl	r4, r4, #0x4
	add	r1, r1, r4
	ldr	r2, .L53+0x4
	mov	r0, sp
	bl	CpuSet
	ldr	r0, .L53+0x8
	ldr	r2, [r0, #0x4]
	ldr	r0, [r2, #0x4]
	ldr	r1, [r5]
	add	r1, r1, r4
	ldrb	r3, [r2]
	lsl	r2, r3, #0x1
	add	r2, r2, r3
	lsl	r2, r2, #0x1
	mov	r3, #0x80
	lsl	r3, r3, #0x13
	orr	r2, r2, r3
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gSaveBlock1Ptr
	.word	0x5000180
	.word	gMapHeader
.Lfe12:
	.size	 LoadObjEventTemplatesFromHeader,.Lfe12-LoadObjEventTemplatesFromHeader
	.align	2, 0
	.globl	LoadSaveblockObjEventScripts
	.type	 LoadSaveblockObjEventScripts,function
	.thumb_func
LoadSaveblockObjEventScripts:
	push	{lr}
	ldr	r0, .L61
	ldr	r1, [r0, #0x4]
	ldr	r0, .L61+0x4
	ldr	r0, [r0]
	ldr	r2, [r1, #0x4]
	mov	r3, #0xc7
	lsl	r3, r3, #0x4
	add	r1, r0, r3
	mov	r3, #0x3f
.L59:
	ldr	r0, [r2, #0x10]
	str	r0, [r1, #0x10]
	add	r2, r2, #0x18
	add	r1, r1, #0x18
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L59	@cond_branch
	pop	{r0}
	bx	r0
.L62:
	.align	2, 0
.L61:
	.word	gMapHeader
	.word	gSaveBlock1Ptr
.Lfe13:
	.size	 LoadSaveblockObjEventScripts,.Lfe13-LoadSaveblockObjEventScripts
	.align	2, 0
	.globl	Overworld_SetObjEventTemplateCoords
	.type	 Overworld_SetObjEventTemplateCoords,function
	.thumb_func
Overworld_SetObjEventTemplateCoords:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L70
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r6, #0xc7
	lsl	r6, r6, #0x4
	add	r3, r0, r6
.L67:
	ldrb	r0, [r3]
	cmp	r0, r5
	bne	.L66	@cond_branch
	strh	r4, [r3, #0x4]
	strh	r2, [r3, #0x6]
	b	.L63
.L71:
	.align	2, 0
.L70:
	.word	gSaveBlock1Ptr
.L66:
	add	r3, r3, #0x18
	add	r1, r1, #0x1
	cmp	r1, #0x3f
	ble	.L67	@cond_branch
.L63:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 Overworld_SetObjEventTemplateCoords,.Lfe14-Overworld_SetObjEventTemplateCoords
	.align	2, 0
	.globl	Overworld_SetObjEventTemplateMovementType
	.type	 Overworld_SetObjEventTemplateMovementType,function
	.thumb_func
Overworld_SetObjEventTemplateMovementType:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L79
	ldr	r0, [r0]
	mov	r3, #0x0
	mov	r5, #0xc7
	lsl	r5, r5, #0x4
	add	r2, r0, r5
.L76:
	ldrb	r0, [r2]
	cmp	r0, r4
	bne	.L75	@cond_branch
	strb	r1, [r2, #0x9]
	b	.L72
.L80:
	.align	2, 0
.L79:
	.word	gSaveBlock1Ptr
.L75:
	add	r2, r2, #0x18
	add	r3, r3, #0x1
	cmp	r3, #0x3f
	ble	.L76	@cond_branch
.L72:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 Overworld_SetObjEventTemplateMovementType,.Lfe15-Overworld_SetObjEventTemplateMovementType
	.align	2, 0
	.type	 mapdata_load_assets_to_gpu_and_full_redraw,function
	.thumb_func
mapdata_load_assets_to_gpu_and_full_redraw:
	push	{r4, lr}
	bl	move_tilemap_camera_to_upper_left_corner
	ldr	r4, .L82
	ldr	r0, [r4]
	bl	copy_map_tileset1_tileset2_to_vram
	ldr	r0, [r4]
	bl	apply_map_tileset1_tileset2_palette
	bl	DrawWholeMapView
	bl	InitTilesetAnimations
	pop	{r4}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gMapHeader
.Lfe16:
	.size	 mapdata_load_assets_to_gpu_and_full_redraw,.Lfe16-mapdata_load_assets_to_gpu_and_full_redraw
	.align	2, 0
	.globl	GetMapLayout
	.type	 GetMapLayout,function
	.thumb_func
GetMapLayout:
	push	{lr}
	ldr	r0, .L87
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x32]
	cmp	r1, #0
	bne	.L85	@cond_branch
	mov	r0, #0x0
	b	.L86
.L88:
	.align	2, 0
.L87:
	.word	gSaveBlock1Ptr
.L85:
	ldr	r0, .L89
	sub	r1, r1, #0x1
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
.L86:
	pop	{r1}
	bx	r1
.L90:
	.align	2, 0
.L89:
	.word	gMapLayouts
.Lfe17:
	.size	 GetMapLayout,.Lfe17-GetMapLayout
	.align	2, 0
	.globl	ApplyCurrentWarp
	.type	 ApplyCurrentWarp,function
	.thumb_func
ApplyCurrentWarp:
	ldr	r3, .L92
	ldr	r0, .L92+0x4
	ldr	r2, [r0]
	ldr	r0, [r2, #0x4]		@ created by thumb_load_double_from_address
	ldr	r1, [r2, #0x8]		@ created by thumb_load_double_from_address
	str	r0, [r3]
	str	r1, [r3, #0x4]
	ldr	r0, .L92+0x8
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r2, #0x4]
	str	r1, [r2, #0x8]
	ldr	r2, .L92+0xc
	ldr	r0, .L92+0x10
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldr	r2, .L92+0x14
	str	r0, [r2]
	str	r1, [r2, #0x4]
	bx	lr
.L93:
	.align	2, 0
.L92:
	.word	gLastUsedWarp
	.word	gSaveBlock1Ptr
	.word	sWarpDestination
	.word	gFixedDiveWarp
	.word	sDummyWarpData
	.word	gFixedHoleWarp
.Lfe18:
	.size	 ApplyCurrentWarp,.Lfe18-ApplyCurrentWarp
	.align	2, 0
	.type	 ClearDiveAndHoleWarps,function
	.thumb_func
ClearDiveAndHoleWarps:
	ldr	r2, .L95
	ldr	r0, .L95+0x4
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	ldr	r2, .L95+0x8
	str	r0, [r2]
	str	r1, [r2, #0x4]
	bx	lr
.L96:
	.align	2, 0
.L95:
	.word	gFixedDiveWarp
	.word	sDummyWarpData
	.word	gFixedHoleWarp
.Lfe19:
	.size	 ClearDiveAndHoleWarps,.Lfe19-ClearDiveAndHoleWarps
	.align	2, 0
	.type	 SetWarpData,function
	.thumb_func
SetWarpData:
	push	{r4, r5, lr}
	ldr	r4, [sp, #0xc]
	ldr	r5, [sp, #0x10]
	strb	r1, [r0]
	strb	r2, [r0, #0x1]
	strb	r3, [r0, #0x2]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	strh	r4, [r0, #0x4]
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	strh	r5, [r0, #0x6]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 SetWarpData,.Lfe20-SetWarpData
	.align	2, 0
	.type	 IsDummyWarp,function
	.thumb_func
IsDummyWarp:
	push	{lr}
	add	r1, r0, #0
	mov	r2, #0x0
	ldrsb	r2, [r1, r2]
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	bne	.L107	@cond_branch
	mov	r0, #0x1
	ldrsb	r0, [r1, r0]
	cmp	r0, r2
	bne	.L107	@cond_branch
	mov	r2, #0x2
	ldrsb	r2, [r1, r2]
	cmp	r2, r0
	bne	.L107	@cond_branch
	mov	r0, #0x4
	ldrsh	r3, [r1, r0]
	cmp	r3, r2
	bne	.L107	@cond_branch
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	cmp	r0, r3
	bne	.L107	@cond_branch
	mov	r0, #0x1
	b	.L109
.L107:
	mov	r0, #0x0
.L109:
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 IsDummyWarp,.Lfe21-IsDummyWarp
	.align	2, 0
	.globl	Overworld_GetMapHeaderByGroupAndId
	.type	 Overworld_GetMapHeaderByGroupAndId,function
	.thumb_func
Overworld_GetMapHeaderByGroupAndId:
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x10
	ldr	r2, .L111
	lsr	r0, r0, #0xe
	add	r0, r0, r2
	ldr	r0, [r0]
	lsr	r1, r1, #0xe
	add	r1, r1, r0
	ldr	r0, [r1]
	bx	lr
.L112:
	.align	2, 0
.L111:
	.word	gMapGroups
.Lfe22:
	.size	 Overworld_GetMapHeaderByGroupAndId,.Lfe22-Overworld_GetMapHeaderByGroupAndId
	.align	2, 0
	.globl	GetDestinationWarpMapHeader
	.type	 GetDestinationWarpMapHeader,function
	.thumb_func
GetDestinationWarpMapHeader:
	push	{lr}
	ldr	r1, .L114
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	pop	{r1}
	bx	r1
.L115:
	.align	2, 0
.L114:
	.word	sWarpDestination
.Lfe23:
	.size	 GetDestinationWarpMapHeader,.Lfe23-GetDestinationWarpMapHeader
	.align	2, 0
	.type	 LoadCurrentMapData,function
	.thumb_func
LoadCurrentMapData:
	push	{r4, r5, r6, lr}
	ldr	r1, .L117
	ldr	r4, .L117+0x4
	ldrb	r0, [r4, #0x14]
	strh	r0, [r1]
	ldr	r5, .L117+0x8
	ldr	r1, [r5]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	add	r1, r4, #0
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldmia	r0!, {r2, r3, r6}
	stmia	r1!, {r2, r3, r6}
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r1, [r5]
	ldrh	r0, [r4, #0x12]
	strh	r0, [r1, #0x32]
	bl	GetMapLayout
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L118:
	.align	2, 0
.L117:
	.word	sLastMapSectionId
	.word	gMapHeader
	.word	gSaveBlock1Ptr
.Lfe24:
	.size	 LoadCurrentMapData,.Lfe24-LoadCurrentMapData
	.align	2, 0
	.type	 LoadSaveblockMapHeader,function
	.thumb_func
LoadSaveblockMapHeader:
	push	{r4, r5, lr}
	ldr	r4, .L120
	ldr	r0, .L120+0x4
	ldr	r1, [r0]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	add	r1, r4, #0
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldmia	r0!, {r2, r3, r5}
	stmia	r1!, {r2, r3, r5}
	ldr	r0, [r0]
	str	r0, [r1]
	bl	GetMapLayout
	str	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L121:
	.align	2, 0
.L120:
	.word	gMapHeader
	.word	gSaveBlock1Ptr
.Lfe25:
	.size	 LoadSaveblockMapHeader,.Lfe25-LoadSaveblockMapHeader
	.align	2, 0
	.type	 SetPlayerCoordsFromWarp,function
	.thumb_func
SetPlayerCoordsFromWarp:
	push	{r4, r5, lr}
	ldr	r0, .L127
	ldr	r2, [r0]
	mov	r1, #0x6
	ldrsb	r1, [r2, r1]
	add	r4, r0, #0
	cmp	r1, #0
	blt	.L123	@cond_branch
	ldr	r3, .L127+0x4
	ldr	r0, [r3, #0x4]
	ldrb	r5, [r0, #0x1]
	cmp	r1, r5
	bge	.L123	@cond_branch
	ldr	r0, [r0, #0x8]
	lsl	r1, r1, #0x3
	add	r0, r1, r0
	ldrh	r0, [r0]
	strh	r0, [r2]
	ldr	r0, [r3, #0x4]
	ldr	r0, [r0, #0x8]
	add	r1, r1, r0
	ldrh	r0, [r1, #0x2]
	strh	r0, [r2, #0x2]
	b	.L124
.L128:
	.align	2, 0
.L127:
	.word	gSaveBlock1Ptr
	.word	gMapHeader
.L123:
	ldr	r1, [r4]
	ldrh	r3, [r1, #0x8]
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	blt	.L125	@cond_branch
	ldrh	r2, [r1, #0xa]
	mov	r5, #0xa
	ldrsh	r0, [r1, r5]
	cmp	r0, #0
	blt	.L125	@cond_branch
	strh	r3, [r1]
	strh	r2, [r1, #0x2]
	b	.L124
.L125:
	ldr	r3, [r4]
	ldr	r2, .L129
	ldr	r0, [r2]
	ldr	r0, [r0]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r3]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r3, #0x2]
.L124:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L130:
	.align	2, 0
.L129:
	.word	gMapHeader
.Lfe26:
	.size	 SetPlayerCoordsFromWarp,.Lfe26-SetPlayerCoordsFromWarp
	.align	2, 0
	.globl	WarpIntoMap
	.type	 WarpIntoMap,function
	.thumb_func
WarpIntoMap:
	push	{lr}
	bl	ApplyCurrentWarp
	bl	LoadCurrentMapData
	bl	SetPlayerCoordsFromWarp
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 WarpIntoMap,.Lfe27-WarpIntoMap
	.align	2, 0
	.globl	SetWarpDestination
	.type	 SetWarpDestination,function
	.thumb_func
SetWarpDestination:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, .L133
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	SetWarpData
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L134:
	.align	2, 0
.L133:
	.word	sWarpDestination
.Lfe28:
	.size	 SetWarpDestination,.Lfe28-SetWarpDestination
	.align	2, 0
	.globl	SetWarpDestinationToMapWarp
	.type	 SetWarpDestinationToMapWarp,function
	.thumb_func
SetWarpDestinationToMapWarp:
	push	{lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	asr	r2, r2, #0x18
	mov	r3, #0x1
	neg	r3, r3
	str	r3, [sp]
	bl	SetWarpDestination
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 SetWarpDestinationToMapWarp,.Lfe29-SetWarpDestinationToMapWarp
	.align	2, 0
	.globl	SetDynamicWarp
	.type	 SetDynamicWarp,function
	.thumb_func
SetDynamicWarp:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	ldr	r0, .L137
	ldr	r5, [r0]
	add	r0, r5, #0
	add	r0, r0, #0x14
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	asr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	mov	r4, #0x0
	ldrsb	r4, [r5, r4]
	str	r4, [sp]
	mov	r4, #0x2
	ldrsb	r4, [r5, r4]
	str	r4, [sp, #0x4]
	bl	SetWarpData
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L138:
	.align	2, 0
.L137:
	.word	gSaveBlock1Ptr
.Lfe30:
	.size	 SetDynamicWarp,.Lfe30-SetDynamicWarp
	.align	2, 0
	.globl	SetDynamicWarpWithCoords
	.type	 SetDynamicWarpWithCoords,function
	.thumb_func
SetDynamicWarpWithCoords:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x14]
	ldr	r5, [sp, #0x18]
	ldr	r0, .L140
	ldr	r0, [r0]
	add	r0, r0, #0x14
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	lsl	r2, r2, #0x18
	asr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp]
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	str	r5, [sp, #0x4]
	bl	SetWarpData
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L141:
	.align	2, 0
.L140:
	.word	gSaveBlock1Ptr
.Lfe31:
	.size	 SetDynamicWarpWithCoords,.Lfe31-SetDynamicWarpWithCoords
	.align	2, 0
	.globl	SetWarpDestinationToDynamicWarp
	.type	 SetWarpDestinationToDynamicWarp,function
	.thumb_func
SetWarpDestinationToDynamicWarp:
	ldr	r2, .L143
	ldr	r0, .L143+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x18]		@ created by thumb_load_double_from_address
	ldr	r0, [r0, #0x14]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	bx	lr
.L144:
	.align	2, 0
.L143:
	.word	sWarpDestination
	.word	gSaveBlock1Ptr
.Lfe32:
	.size	 SetWarpDestinationToDynamicWarp,.Lfe32-SetWarpDestinationToDynamicWarp
	.align	2, 0
	.globl	SetWarpDestinationToHealLocation
	.type	 SetWarpDestinationToHealLocation,function
	.thumb_func
SetWarpDestinationToHealLocation:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealLocation
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L146	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	mov	r1, #0x1
	ldrsb	r1, [r4, r1]
	mov	r2, #0x1
	neg	r2, r2
	mov	r3, #0x2
	ldrsb	r3, [r4, r3]
	ldrb	r4, [r4, #0x4]
	lsl	r4, r4, #24
	asr	r4, r4, #24
	str	r4, [sp]
	bl	SetWarpDestination
.L146:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 SetWarpDestinationToHealLocation,.Lfe33-SetWarpDestinationToHealLocation
	.align	2, 0
	.globl	SetWarpDestinationToLastHealLocation
	.type	 SetWarpDestinationToLastHealLocation,function
	.thumb_func
SetWarpDestinationToLastHealLocation:
	ldr	r2, .L148
	ldr	r0, .L148+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x20]		@ created by thumb_load_double_from_address
	ldr	r0, [r0, #0x1c]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	bx	lr
.L149:
	.align	2, 0
.L148:
	.word	sWarpDestination
	.word	gSaveBlock1Ptr
.Lfe34:
	.size	 SetWarpDestinationToLastHealLocation,.Lfe34-SetWarpDestinationToLastHealLocation
	.align	2, 0
	.globl	SetLastHealLocationWarp
	.type	 SetLastHealLocationWarp,function
	.thumb_func
SetLastHealLocationWarp:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealLocation
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L151	@cond_branch
	ldr	r0, .L152
	ldr	r0, [r0]
	add	r0, r0, #0x1c
	mov	r1, #0x0
	ldrsb	r1, [r5, r1]
	mov	r2, #0x1
	ldrsb	r2, [r5, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r4, #0x2
	ldrsb	r4, [r5, r4]
	str	r4, [sp]
	mov	r4, #0x4
	ldrsb	r4, [r5, r4]
	str	r4, [sp, #0x4]
	bl	SetWarpData
.L151:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gSaveBlock1Ptr
.Lfe35:
	.size	 SetLastHealLocationWarp,.Lfe35-SetLastHealLocationWarp
	.align	2, 0
	.globl	UpdateEscapeWarp
	.type	 UpdateEscapeWarp,function
	.thumb_func
UpdateEscapeWarp:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r7, r1, #0x10
	bl	GetCurrentMapType
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L156
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	bl	GetMapTypeByGroupAndId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	bl	IsMapTypeOutdoors
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L155	@cond_branch
	add	r0, r5, #0
	bl	IsMapTypeOutdoors
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L155	@cond_branch
	ldr	r0, .L156+0x4
	ldr	r1, [r0]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	mov	r2, #0x1
	neg	r2, r2
	sub	r3, r6, #0x7
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	sub	r4, r7, #0x6
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp]
	bl	SetEscapeWarp
.L155:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L157:
	.align	2, 0
.L156:
	.word	sWarpDestination
	.word	gSaveBlock1Ptr
.Lfe36:
	.size	 UpdateEscapeWarp,.Lfe36-UpdateEscapeWarp
	.align	2, 0
	.globl	SetEscapeWarp
	.type	 SetEscapeWarp,function
	.thumb_func
SetEscapeWarp:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, .L159
	ldr	r0, [r0]
	add	r0, r0, #0x24
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	SetWarpData
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L160:
	.align	2, 0
.L159:
	.word	gSaveBlock1Ptr
.Lfe37:
	.size	 SetEscapeWarp,.Lfe37-SetEscapeWarp
	.align	2, 0
	.globl	SetWarpDestinationToEscapeWarp
	.type	 SetWarpDestinationToEscapeWarp,function
	.thumb_func
SetWarpDestinationToEscapeWarp:
	ldr	r2, .L162
	ldr	r0, .L162+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x28]		@ created by thumb_load_double_from_address
	ldr	r0, [r0, #0x24]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	bx	lr
.L163:
	.align	2, 0
.L162:
	.word	sWarpDestination
	.word	gSaveBlock1Ptr
.Lfe38:
	.size	 SetWarpDestinationToEscapeWarp,.Lfe38-SetWarpDestinationToEscapeWarp
	.align	2, 0
	.globl	SetFixedDiveWarp
	.type	 SetFixedDiveWarp,function
	.thumb_func
SetFixedDiveWarp:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, .L165
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	SetWarpData
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L166:
	.align	2, 0
.L165:
	.word	gFixedDiveWarp
.Lfe39:
	.size	 SetFixedDiveWarp,.Lfe39-SetFixedDiveWarp
	.align	2, 0
	.type	 SetWarpDestinationToDiveWarp,function
	.thumb_func
SetWarpDestinationToDiveWarp:
	ldr	r2, .L168
	ldr	r0, .L168+0x4
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	bx	lr
.L169:
	.align	2, 0
.L168:
	.word	sWarpDestination
	.word	gFixedDiveWarp
.Lfe40:
	.size	 SetWarpDestinationToDiveWarp,.Lfe40-SetWarpDestinationToDiveWarp
	.align	2, 0
	.globl	SetFixedHoleWarp
	.type	 SetFixedHoleWarp,function
	.thumb_func
SetFixedHoleWarp:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, .L171
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	SetWarpData
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L172:
	.align	2, 0
.L171:
	.word	gFixedHoleWarp
.Lfe41:
	.size	 SetFixedHoleWarp,.Lfe41-SetFixedHoleWarp
	.align	2, 0
	.globl	SetWarpDestinationToFixedHoleWarp
	.type	 SetWarpDestinationToFixedHoleWarp,function
	.thumb_func
SetWarpDestinationToFixedHoleWarp:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	ldr	r4, .L176
	add	r0, r4, #0
	bl	IsDummyWarp
	cmp	r0, #0x1
	bne	.L174	@cond_branch
	ldr	r2, .L176+0x4
	ldr	r0, .L176+0x8
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	b	.L175
.L177:
	.align	2, 0
.L176:
	.word	gFixedHoleWarp
	.word	sWarpDestination
	.word	gLastUsedWarp
.L174:
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	mov	r1, #0x1
	ldrsb	r1, [r4, r1]
	mov	r2, #0x1
	neg	r2, r2
	lsl	r3, r5, #0x18
	asr	r3, r3, #0x18
	lsl	r4, r6, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp]
	bl	SetWarpDestination
.L175:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 SetWarpDestinationToFixedHoleWarp,.Lfe42-SetWarpDestinationToFixedHoleWarp
	.align	2, 0
	.type	 SetWarpDestinationToContinueGameWarp,function
	.thumb_func
SetWarpDestinationToContinueGameWarp:
	ldr	r2, .L179
	ldr	r0, .L179+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x10]		@ created by thumb_load_double_from_address
	ldr	r0, [r0, #0xc]		@ created by thumb_load_double_from_address
	str	r0, [r2]
	str	r1, [r2, #0x4]
	bx	lr
.L180:
	.align	2, 0
.L179:
	.word	sWarpDestination
	.word	gSaveBlock1Ptr
.Lfe43:
	.size	 SetWarpDestinationToContinueGameWarp,.Lfe43-SetWarpDestinationToContinueGameWarp
	.align	2, 0
	.globl	SetContinueGameWarp
	.type	 SetContinueGameWarp,function
	.thumb_func
SetContinueGameWarp:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, .L182
	ldr	r0, [r0]
	add	r0, r0, #0xc
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	asr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	asr	r6, r6, #0x18
	lsl	r3, r3, #0x18
	asr	r3, r3, #0x18
	str	r3, [sp]
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r6, #0
	bl	SetWarpData
	add	sp, sp, #0x8
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L183:
	.align	2, 0
.L182:
	.word	gSaveBlock1Ptr
.Lfe44:
	.size	 SetContinueGameWarp,.Lfe44-SetContinueGameWarp
	.align	2, 0
	.globl	SetContinueGameWarpToHealLocation
	.type	 SetContinueGameWarpToHealLocation,function
	.thumb_func
SetContinueGameWarpToHealLocation:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealLocation
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L185	@cond_branch
	ldr	r0, .L186
	ldr	r0, [r0]
	add	r0, r0, #0xc
	mov	r1, #0x0
	ldrsb	r1, [r5, r1]
	mov	r2, #0x1
	ldrsb	r2, [r5, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r4, #0x2
	ldrsb	r4, [r5, r4]
	str	r4, [sp]
	mov	r4, #0x4
	ldrsb	r4, [r5, r4]
	str	r4, [sp, #0x4]
	bl	SetWarpData
.L185:
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L187:
	.align	2, 0
.L186:
	.word	gSaveBlock1Ptr
.Lfe45:
	.size	 SetContinueGameWarpToHealLocation,.Lfe45-SetContinueGameWarpToHealLocation
	.align	2, 0
	.globl	SetContinueGameWarpToDynamicWarp
	.type	 SetContinueGameWarpToDynamicWarp,function
	.thumb_func
SetContinueGameWarpToDynamicWarp:
	ldr	r0, .L189
	ldr	r2, [r0]
	ldr	r0, [r2, #0x14]		@ created by thumb_load_double_from_address
	ldr	r1, [r2, #0x18]		@ created by thumb_load_double_from_address
	str	r0, [r2, #0xc]
	str	r1, [r2, #0x10]
	bx	lr
.L190:
	.align	2, 0
.L189:
	.word	gSaveBlock1Ptr
.Lfe46:
	.size	 SetContinueGameWarpToDynamicWarp,.Lfe46-SetContinueGameWarpToDynamicWarp
	.align	2, 0
	.globl	GetMapConnection
	.type	 GetMapConnection,function
	.thumb_func
GetMapConnection:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L201
	ldr	r0, [r0, #0xc]
	ldr	r3, [r0]
	ldr	r1, [r0, #0x4]
	cmp	r1, #0
	bne	.L192	@cond_branch
	b	.L194
.L202:
	.align	2, 0
.L201:
	.word	gMapHeader
.L200:
	add	r0, r1, #0
	b	.L199
.L192:
	mov	r2, #0x0
	cmp	r2, r3
	bge	.L194	@cond_branch
.L196:
	ldrb	r0, [r1]
	cmp	r0, r4
	beq	.L200	@cond_branch
	add	r2, r2, #0x1
	add	r1, r1, #0xc
	cmp	r2, r3
	blt	.L196	@cond_branch
.L194:
	mov	r0, #0x0
.L199:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetMapConnection,.Lfe47-GetMapConnection
	.align	2, 0
	.type	 SetDiveWarp,function
	.thumb_func
SetDiveWarp:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	bl	GetMapConnection
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L204	@cond_branch
	mov	r0, #0x8
	ldrsb	r0, [r1, r0]
	ldrb	r1, [r1, #0x9]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	mov	r2, #0x1
	neg	r2, r2
	lsl	r3, r4, #0x18
	asr	r3, r3, #0x18
	lsl	r4, r5, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp]
	bl	SetWarpDestination
	b	.L205
.L204:
	bl	RunOnDiveWarpMapScript
	ldr	r0, .L208
	bl	IsDummyWarp
	cmp	r0, #0
	beq	.L206	@cond_branch
	mov	r0, #0x0
	b	.L207
.L209:
	.align	2, 0
.L208:
	.word	gFixedDiveWarp
.L206:
	bl	SetWarpDestinationToDiveWarp
.L205:
	mov	r0, #0x1
.L207:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 SetDiveWarp,.Lfe48-SetDiveWarp
	.align	2, 0
	.globl	SetDiveWarpEmerge
	.type	 SetDiveWarpEmerge,function
	.thumb_func
SetDiveWarpEmerge:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x6
	add	r1, r3, #0
	bl	SetDiveWarp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 SetDiveWarpEmerge,.Lfe49-SetDiveWarpEmerge
	.align	2, 0
	.globl	SetDiveWarpDive
	.type	 SetDiveWarpDive,function
	.thumb_func
SetDiveWarpDive:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x5
	add	r1, r3, #0
	bl	SetDiveWarp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 SetDiveWarpDive,.Lfe50-SetDiveWarpDive
	.align	2, 0
	.globl	LoadMapFromCameraTransition
	.type	 LoadMapFromCameraTransition,function
	.thumb_func
LoadMapFromCameraTransition:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r5, r1, #0
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	mov	r3, #0x1
	neg	r3, r3
	str	r3, [sp]
	add	r2, r3, #0
	bl	SetWarpDestination
	ldr	r4, .L221
	ldrb	r0, [r4, #0x14]
	cmp	r0, #0x3a
	beq	.L213	@cond_branch
	bl	sub_8085810
.L213:
	bl	ApplyCurrentWarp
	bl	LoadCurrentMapData
	bl	LoadObjEventTemplatesFromHeader
	bl	TrySetMapSaveWarpStatus
	bl	ClearTempFieldEventData
	bl	ResetCyclingRoadChallengeData
	bl	RestartWildEncounterImmunitySteps
	add	r0, r6, #0
	add	r1, r5, #0
	bl	TryUpdateRandomTrainerRematches
	bl	DoTimeBasedEvents
	bl	SetSav1WeatherFromCurrMapHeader
	bl	ChooseAmbientCrySpecies
	bl	SetDefaultFlashLevel
	bl	Overworld_ClearSavedMusic
	bl	RunOnTransitionMapScript
	bl	InitMap
	ldr	r0, [r4]
	bl	copy_map_tileset2_to_vram_2
	ldr	r0, [r4]
	bl	apply_map_tileset2_palette
	mov	r4, #0x6
.L217:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	ApplyWeatherGammaShiftToPal
	add	r4, r4, #0x1
	cmp	r4, #0xc
	ble	.L217	@cond_branch
	bl	InitSecondaryTilesetAnimation
	bl	UpdateLocationHistoryForRoamer
	bl	RoamerMove
	bl	DoCurrentWeather
	bl	ResetFieldTasksArgs
	bl	RunOnResumeMapScript
	ldr	r2, .L221
	ldrb	r0, [r2, #0x14]
	cmp	r0, #0x3a
	bne	.L220	@cond_branch
	ldr	r1, .L221+0x4
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L219	@cond_branch
.L220:
	bl	ShowMapNamePopup
.L219:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L222:
	.align	2, 0
.L221:
	.word	gMapHeader
	.word	sLastMapSectionId
.Lfe51:
	.size	 LoadMapFromCameraTransition,.Lfe51-LoadMapFromCameraTransition
	.align	2, 0
	.type	 mli0_load_map,function
	.thumb_func
mli0_load_map:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	bl	LoadCurrentMapData
	ldr	r0, .L236
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L224	@cond_branch
	ldr	r0, .L236+0x4
	ldrh	r1, [r0, #0x12]
	ldr	r0, .L236+0x8
	cmp	r1, r0
	bne	.L225	@cond_branch
	bl	LoadBattlePyramidObjectEventTemplates
	b	.L224
.L237:
	.align	2, 0
.L236:
	.word	sUnknown_020322D8
	.word	gMapHeader
	.word	0x169
.L225:
	bl	InTrainerHill
	cmp	r0, #0
	beq	.L227	@cond_branch
	bl	LoadTrainerHillObjectEventTemplates
	b	.L224
.L227:
	bl	LoadObjEventTemplatesFromHeader
.L224:
	ldr	r4, .L238
	ldrb	r0, [r4, #0x17]
	bl	IsMapTypeOutdoors
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldrb	r0, [r4, #0x17]
	bl	IsMapTypeIndoors
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	CheckLeftFriendsSecretBase
	bl	TrySetMapSaveWarpStatus
	bl	ClearTempFieldEventData
	bl	ResetCyclingRoadChallengeData
	bl	RestartWildEncounterImmunitySteps
	ldr	r0, .L238+0x4
	ldr	r1, [r0]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	TryUpdateRandomTrainerRematches
	cmp	r7, #0x1
	beq	.L229	@cond_branch
	bl	DoTimeBasedEvents
.L229:
	bl	SetSav1WeatherFromCurrMapHeader
	bl	ChooseAmbientCrySpecies
	cmp	r5, #0
	beq	.L230	@cond_branch
	ldr	r0, .L238+0x8
	bl	FlagClear
.L230:
	bl	SetDefaultFlashLevel
	bl	Overworld_ClearSavedMusic
	bl	RunOnTransitionMapScript
	bl	UpdateLocationHistoryForRoamer
	bl	RoamerMoveToOtherLocationSet
	ldrh	r1, [r4, #0x12]
	ldr	r0, .L238+0xc
	cmp	r1, r0
	bne	.L231	@cond_branch
	mov	r0, #0x0
	bl	InitBattlePyramidMap
	b	.L232
.L239:
	.align	2, 0
.L238:
	.word	gMapHeader
	.word	gSaveBlock1Ptr
	.word	0x888
	.word	0x169
.L231:
	bl	InTrainerHill
	cmp	r0, #0
	beq	.L233	@cond_branch
	bl	InitTrainerHillMap
	b	.L232
.L233:
	bl	InitMap
.L232:
	cmp	r7, #0x1
	beq	.L235	@cond_branch
	cmp	r6, #0
	beq	.L235	@cond_branch
	ldr	r1, .L240
	ldr	r0, [r1]
	ldr	r1, [r1, #0x4]
	bl	UpdateTVScreensOnMap
	mov	r0, #0x1
	bl	InitSecretBaseAppearance
.L235:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L241:
	.align	2, 0
.L240:
	.word	gBackupMapLayout
.Lfe52:
	.size	 mli0_load_map,.Lfe52-mli0_load_map
	.align	2, 0
	.globl	ResetInitialPlayerAvatarState
	.type	 ResetInitialPlayerAvatarState,function
	.thumb_func
ResetInitialPlayerAvatarState:
	ldr	r1, .L243
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	strb	r0, [r1]
	bx	lr
.L244:
	.align	2, 0
.L243:
	.word	gInitialPlayerAvatarState
.Lfe53:
	.size	 ResetInitialPlayerAvatarState,.Lfe53-ResetInitialPlayerAvatarState
	.align	2, 0
	.globl	StoreInitialPlayerAvatarState
	.type	 StoreInitialPlayerAvatarState,function
	.thumb_func
StoreInitialPlayerAvatarState:
	push	{r4, lr}
	bl	GetPlayerFacingDirection
	ldr	r4, .L255
	strb	r0, [r4, #0x1]
	mov	r0, #0x2
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L246	@cond_branch
	mov	r0, #0x2
	b	.L254
.L256:
	.align	2, 0
.L255:
	.word	gInitialPlayerAvatarState
.L246:
	mov	r0, #0x4
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L248	@cond_branch
	mov	r0, #0x4
	b	.L254
.L248:
	mov	r0, #0x8
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L250	@cond_branch
	mov	r0, #0x8
	b	.L254
.L250:
	mov	r0, #0x10
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L252	@cond_branch
	mov	r0, #0x10
	b	.L254
.L252:
	mov	r0, #0x1
.L254:
	strb	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 StoreInitialPlayerAvatarState,.Lfe54-StoreInitialPlayerAvatarState
	.align	2, 0
	.type	 GetInitialPlayerAvatarState,function
	.thumb_func
GetInitialPlayerAvatarState:
	push	{r4, r5, r6, r7, lr}
	bl	GetCurrentMapType
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	bl	GetCenterScreenMetatileBehavior
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r6, .L258
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	bl	GetAdjustedInitialTransitionFlags
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r0, .L258+0x4
	and	r7, r7, r0
	orr	r7, r7, r1
	add	r0, r6, #0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	GetAdjustedInitialDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x10
	ldr	r1, .L258+0x8
	and	r7, r7, r1
	orr	r7, r7, r0
	str	r7, [r6]
	add	r0, r6, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L259:
	.align	2, 0
.L258:
	.word	gInitialPlayerAvatarState
	.word	-0x100
	.word	-0xff01
.Lfe55:
	.size	 GetInitialPlayerAvatarState,.Lfe55-GetInitialPlayerAvatarState
	.align	2, 0
	.type	 GetAdjustedInitialTransitionFlags,function
	.thumb_func
GetAdjustedInitialTransitionFlags:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	cmp	r4, #0x8
	beq	.L261	@cond_branch
	ldr	r0, .L274
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L271	@cond_branch
.L261:
	cmp	r4, #0x5
	bne	.L263	@cond_branch
	mov	r0, #0x10
	b	.L273
.L275:
	.align	2, 0
.L274:
	.word	0x88d
.L263:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L265	@cond_branch
	mov	r0, #0x8
	b	.L273
.L265:
	bl	Overworld_IsBikingAllowed
	cmp	r0, #0x1
	bne	.L271	@cond_branch
	ldrb	r0, [r6]
	cmp	r0, #0x2
	bne	.L269	@cond_branch
	mov	r0, #0x2
	b	.L273
.L269:
	cmp	r0, #0x4
	bne	.L271	@cond_branch
	mov	r0, #0x4
	b	.L273
.L271:
	mov	r0, #0x1
.L273:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe56:
	.size	 GetAdjustedInitialTransitionFlags,.Lfe56-GetAdjustedInitialTransitionFlags
	.align	2, 0
	.type	 GetAdjustedInitialDirection,function
	.thumb_func
GetAdjustedInitialDirection:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r4, r2, #0x10
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	ldr	r0, .L303
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L277	@cond_branch
	cmp	r5, #0x6
	beq	.L299	@cond_branch
.L277:
	lsl	r4, r4, #0x18
	lsr	r5, r4, #0x18
	add	r0, r5, #0
	bl	MetatileBehavior_IsDeepSouthWarp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L300	@cond_branch
	add	r0, r5, #0
	bl	MetatileBehavior_IsNonAnimDoor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L301	@cond_branch
	add	r0, r5, #0
	bl	MetatileBehavior_IsDoor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L301	@cond_branch
	add	r0, r5, #0
	bl	MetatileBehavior_IsSouthArrowWarp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L284	@cond_branch
.L300:
	mov	r0, #0x2
	b	.L298
.L304:
	.align	2, 0
.L303:
	.word	0x88d
.L284:
	add	r0, r5, #0
	bl	MetatileBehavior_IsNorthArrowWarp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L301	@cond_branch
	add	r0, r5, #0
	bl	MetatileBehavior_IsWestArrowWarp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L288	@cond_branch
.L299:
	mov	r0, #0x4
	b	.L298
.L288:
	add	r0, r5, #0
	bl	MetatileBehavior_IsEastArrowWarp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L290	@cond_branch
	mov	r0, #0x3
	b	.L298
.L290:
	ldrb	r0, [r6]
	cmp	r0, #0x10
	bne	.L294	@cond_branch
	cmp	r7, #0x8
	beq	.L296	@cond_branch
.L294:
	cmp	r0, #0x8
	bne	.L292	@cond_branch
	cmp	r7, #0x10
	beq	.L296	@cond_branch
.L292:
	lsr	r0, r4, #0x18
	bl	MetatileBehavior_IsLadder
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L296	@cond_branch
.L301:
	mov	r0, #0x1
	b	.L298
.L296:
	ldrb	r0, [r6, #0x1]
.L298:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe57:
	.size	 GetAdjustedInitialDirection,.Lfe57-GetAdjustedInitialDirection
	.align	2, 0
	.type	 GetCenterScreenMetatileBehavior,function
	.thumb_func
GetCenterScreenMetatileBehavior:
	push	{lr}
	ldr	r0, .L306
	ldr	r1, [r0]
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	add	r0, r0, #0x7
	mov	r2, #0x2
	ldrsh	r1, [r1, r2]
	add	r1, r1, #0x7
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L307:
	.align	2, 0
.L306:
	.word	gSaveBlock1Ptr
.Lfe58:
	.size	 GetCenterScreenMetatileBehavior,.Lfe58-GetCenterScreenMetatileBehavior
	.align	2, 0
	.globl	Overworld_IsBikingAllowed
	.type	 Overworld_IsBikingAllowed,function
	.thumb_func
Overworld_IsBikingAllowed:
	push	{lr}
	ldr	r0, .L312
	ldrb	r1, [r0, #0x1a]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L309	@cond_branch
	mov	r0, #0x1
	b	.L311
.L313:
	.align	2, 0
.L312:
	.word	gMapHeader
.L309:
	mov	r0, #0x0
.L311:
	pop	{r1}
	bx	r1
.Lfe59:
	.size	 Overworld_IsBikingAllowed,.Lfe59-Overworld_IsBikingAllowed
	.align	2, 0
	.globl	SetDefaultFlashLevel
	.type	 SetDefaultFlashLevel,function
	.thumb_func
SetDefaultFlashLevel:
	push	{lr}
	ldr	r0, .L319
	ldrb	r1, [r0, #0x15]
	cmp	r1, #0
	bne	.L315	@cond_branch
	ldr	r0, .L319+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x30
	strb	r1, [r0]
	b	.L316
.L320:
	.align	2, 0
.L319:
	.word	gMapHeader
	.word	gSaveBlock1Ptr
.L315:
	ldr	r0, .L321
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L317	@cond_branch
	ldr	r0, .L321+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x30
	mov	r1, #0x1
	strb	r1, [r0]
	b	.L316
.L322:
	.align	2, 0
.L321:
	.word	0x888
	.word	gSaveBlock1Ptr
.L317:
	ldr	r0, .L323
	ldr	r1, [r0]
	ldr	r0, .L323+0x4
	ldr	r0, [r0]
	sub	r0, r0, #0x1
	add	r1, r1, #0x30
	strb	r0, [r1]
.L316:
	pop	{r0}
	bx	r0
.L324:
	.align	2, 0
.L323:
	.word	gSaveBlock1Ptr
	.word	gMaxFlashLevel
.Lfe60:
	.size	 SetDefaultFlashLevel,.Lfe60-SetDefaultFlashLevel
	.align	2, 0
	.globl	Overworld_SetFlashLevel
	.type	 Overworld_SetFlashLevel,function
	.thumb_func
Overworld_SetFlashLevel:
	push	{lr}
	add	r1, r0, #0
	cmp	r1, #0
	blt	.L327	@cond_branch
	ldr	r0, .L328
	ldr	r0, [r0]
	cmp	r1, r0
	ble	.L326	@cond_branch
.L327:
	mov	r1, #0x0
.L326:
	ldr	r0, .L328+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x30
	strb	r1, [r0]
	pop	{r0}
	bx	r0
.L329:
	.align	2, 0
.L328:
	.word	gMaxFlashLevel
	.word	gSaveBlock1Ptr
.Lfe61:
	.size	 Overworld_SetFlashLevel,.Lfe61-Overworld_SetFlashLevel
	.align	2, 0
	.globl	Overworld_GetFlashLevel
	.type	 Overworld_GetFlashLevel,function
	.thumb_func
Overworld_GetFlashLevel:
	ldr	r0, .L331
	ldr	r0, [r0]
	add	r0, r0, #0x30
	ldrb	r0, [r0]
	bx	lr
.L332:
	.align	2, 0
.L331:
	.word	gSaveBlock1Ptr
.Lfe62:
	.size	 Overworld_GetFlashLevel,.Lfe62-Overworld_GetFlashLevel
	.align	2, 0
	.globl	SetCurrentMapLayout
	.type	 SetCurrentMapLayout,function
	.thumb_func
SetCurrentMapLayout:
	push	{lr}
	ldr	r1, .L334
	ldr	r1, [r1]
	strh	r0, [r1, #0x32]
	bl	GetMapLayout
	ldr	r1, .L334+0x4
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L335:
	.align	2, 0
.L334:
	.word	gSaveBlock1Ptr
	.word	gMapHeader
.Lfe63:
	.size	 SetCurrentMapLayout,.Lfe63-SetCurrentMapLayout
	.align	2, 0
	.globl	sub_8085540
	.type	 sub_8085540,function
	.thumb_func
sub_8085540:
	ldr	r1, .L337
	strb	r0, [r1]
	bx	lr
.L338:
	.align	2, 0
.L337:
	.word	sUnknown_020322D8
.Lfe64:
	.size	 sub_8085540,.Lfe64-sub_8085540
	.align	2, 0
	.globl	sub_808554C
	.type	 sub_808554C,function
	.thumb_func
sub_808554C:
	ldr	r0, .L340
	ldrb	r0, [r0]
	bx	lr
.L341:
	.align	2, 0
.L340:
	.word	sUnknown_020322D8
.Lfe65:
	.size	 sub_808554C,.Lfe65-sub_808554C
	.align	2, 0
	.type	 ShouldLegendaryMusicPlayAtLocation,function
	.thumb_func
ShouldLegendaryMusicPlayAtLocation:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L366
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L344	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	bne	.L344	@cond_branch
	mov	r0, #0x1
	ldrsb	r0, [r4, r0]
	cmp	r0, #0x5
	blt	.L355	@cond_branch
	cmp	r0, #0x8
	ble	.L365	@cond_branch
	cmp	r0, #0x2b
	bgt	.L355	@cond_branch
	cmp	r0, #0x27
	bge	.L365	@cond_branch
.L355:
	ldr	r0, .L366+0x4
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	bls	.L344	@cond_branch
	mov	r0, #0x1
	ldrsb	r0, [r4, r0]
	cmp	r0, #0x2e
	bgt	.L344	@cond_branch
	cmp	r0, #0x2c
	blt	.L344	@cond_branch
.L365:
	mov	r0, #0x1
	b	.L364
.L367:
	.align	2, 0
.L366:
	.word	0x88a
	.word	0x405e
.L344:
	mov	r0, #0x0
.L364:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 ShouldLegendaryMusicPlayAtLocation,.Lfe66-ShouldLegendaryMusicPlayAtLocation
	.align	2, 0
	.type	 NoMusicInSotopolisWithLegendaries,function
	.thumb_func
NoMusicInSotopolisWithLegendaries:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L377
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L376	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0
	bne	.L376	@cond_branch
	mov	r0, #0x1
	ldrsb	r0, [r4, r0]
	cmp	r0, #0x7
	beq	.L373	@cond_branch
.L376:
	mov	r0, #0x0
	b	.L375
.L378:
	.align	2, 0
.L377:
	.word	0x40ca
.L373:
	mov	r0, #0x1
.L375:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 NoMusicInSotopolisWithLegendaries,.Lfe67-NoMusicInSotopolisWithLegendaries
	.align	2, 0
	.type	 IsInfiltratedWeatherInstitute,function
	.thumb_func
IsInfiltratedWeatherInstitute:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L388
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L387	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	cmp	r0, #0x20
	bne	.L387	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	bls	.L384	@cond_branch
.L387:
	mov	r0, #0x0
	b	.L386
.L389:
	.align	2, 0
.L388:
	.word	0x40b3
.L384:
	mov	r0, #0x1
.L386:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 IsInfiltratedWeatherInstitute,.Lfe68-IsInfiltratedWeatherInstitute
	.align	2, 0
	.type	 IsInflitratedSpaceCenter,function
	.thumb_func
IsInflitratedSpaceCenter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L400
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L399	@cond_branch
	add	r0, r4, #0
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bhi	.L399	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r0, #0xe
	bne	.L399	@cond_branch
	ldrb	r0, [r5, #0x1]
	sub	r0, r0, #0x9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L392	@cond_branch
.L399:
	mov	r0, #0x0
	b	.L398
.L401:
	.align	2, 0
.L400:
	.word	0x405d
.L392:
	mov	r0, #0x1
.L398:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 IsInflitratedSpaceCenter,.Lfe69-IsInflitratedSpaceCenter
	.align	2, 0
	.globl	GetLocationMusic
	.type	 GetLocationMusic,function
	.thumb_func
GetLocationMusic:
	push	{r4, lr}
	add	r4, r0, #0
	bl	NoMusicInSotopolisWithLegendaries
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L403	@cond_branch
	ldr	r0, .L412
	b	.L411
.L413:
	.align	2, 0
.L412:
	.word	0xffff
.L403:
	add	r0, r4, #0
	bl	ShouldLegendaryMusicPlayAtLocation
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L405	@cond_branch
	ldr	r0, .L414
	b	.L411
.L415:
	.align	2, 0
.L414:
	.word	0x1bb
.L405:
	add	r0, r4, #0
	bl	IsInflitratedSpaceCenter
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L407	@cond_branch
	ldr	r0, .L416
	b	.L411
.L417:
	.align	2, 0
.L416:
	.word	0x1b9
.L407:
	add	r0, r4, #0
	bl	IsInfiltratedWeatherInstitute
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	beq	.L409	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r4, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	ldrsb	r1, [r4, r1]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	ldrh	r0, [r0, #0x10]
	b	.L411
.L409:
	mov	r0, #0xcb
	lsl	r0, r0, #0x1
.L411:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 GetLocationMusic,.Lfe70-GetLocationMusic
	.align	2, 0
	.globl	GetCurrLocationDefaultMusic
	.type	 GetCurrLocationDefaultMusic,function
	.thumb_func
GetCurrLocationDefaultMusic:
	push	{r4, lr}
	ldr	r0, .L425
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xd0
	lsl	r0, r0, #0x5
	cmp	r1, r0
	bne	.L419	@cond_branch
	bl	GetSav1Weather
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x8
	bne	.L419	@cond_branch
	ldr	r0, .L425+0x4
	b	.L424
.L426:
	.align	2, 0
.L425:
	.word	gSaveBlock1Ptr
	.word	0x199
.L419:
	ldr	r4, .L427
	ldr	r0, [r4]
	add	r0, r0, #0x4
	bl	GetLocationMusic
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L427+0x4
	cmp	r1, r0
	beq	.L420	@cond_branch
	add	r0, r1, #0
	b	.L424
.L428:
	.align	2, 0
.L427:
	.word	gSaveBlock1Ptr
	.word	0x7fff
.L420:
	ldr	r0, [r4]
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x17
	ble	.L422	@cond_branch
	mov	r0, #0xc9
	lsl	r0, r0, #0x1
	b	.L424
.L422:
	mov	r0, #0xb4
	lsl	r0, r0, #0x1
.L424:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 GetCurrLocationDefaultMusic,.Lfe71-GetCurrLocationDefaultMusic
	.align	2, 0
	.globl	GetWarpDestinationMusic
	.type	 GetWarpDestinationMusic,function
	.thumb_func
GetWarpDestinationMusic:
	push	{lr}
	ldr	r0, .L435
	bl	GetLocationMusic
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L435+0x4
	cmp	r1, r0
	beq	.L430	@cond_branch
	add	r0, r1, #0
	b	.L434
.L436:
	.align	2, 0
.L435:
	.word	sWarpDestination
	.word	0x7fff
.L430:
	ldr	r0, .L437
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	cmp	r1, r0
	beq	.L432	@cond_branch
	sub	r0, r0, #0x6e
	b	.L434
.L438:
	.align	2, 0
.L437:
	.word	gSaveBlock1Ptr
.L432:
	mov	r0, #0xb4
	lsl	r0, r0, #0x1
.L434:
	pop	{r1}
	bx	r1
.Lfe72:
	.size	 GetWarpDestinationMusic,.Lfe72-GetWarpDestinationMusic
	.align	2, 0
	.globl	Overworld_ResetMapMusic
	.type	 Overworld_ResetMapMusic,function
	.thumb_func
Overworld_ResetMapMusic:
	push	{lr}
	bl	ResetMapMusic
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 Overworld_ResetMapMusic,.Lfe73-Overworld_ResetMapMusic
	.align	2, 0
	.globl	Overworld_PlaySpecialMapMusic
	.type	 Overworld_PlaySpecialMapMusic,function
	.thumb_func
Overworld_PlaySpecialMapMusic:
	push	{r4, lr}
	bl	GetCurrLocationDefaultMusic
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L448
	cmp	r4, r0
	beq	.L441	@cond_branch
	ldr	r0, .L448+0x4
	cmp	r4, r0
	beq	.L441	@cond_branch
	ldr	r0, .L448+0x8
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x2c]
	cmp	r0, #0
	beq	.L442	@cond_branch
	add	r4, r0, #0
	b	.L441
.L449:
	.align	2, 0
.L448:
	.word	0x1bb
	.word	0xffff
	.word	gSaveBlock1Ptr
.L442:
	bl	GetCurrentMapType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x5
	bne	.L444	@cond_branch
	ldr	r4, .L450
	b	.L441
.L451:
	.align	2, 0
.L450:
	.word	0x19b
.L444:
	mov	r0, #0x8
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L441	@cond_branch
	ldr	r4, .L452
.L441:
	bl	GetCurrentMapMusic
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r4, r0
	beq	.L447	@cond_branch
	add	r0, r4, #0
	bl	PlayNewMapMusic
.L447:
	pop	{r4}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	0x16d
.Lfe74:
	.size	 Overworld_PlaySpecialMapMusic,.Lfe74-Overworld_PlaySpecialMapMusic
	.align	2, 0
	.globl	Overworld_SetSavedMusic
	.type	 Overworld_SetSavedMusic,function
	.thumb_func
Overworld_SetSavedMusic:
	ldr	r1, .L455
	ldr	r1, [r1]
	strh	r0, [r1, #0x2c]
	bx	lr
.L456:
	.align	2, 0
.L455:
	.word	gSaveBlock1Ptr
.Lfe75:
	.size	 Overworld_SetSavedMusic,.Lfe75-Overworld_SetSavedMusic
	.align	2, 0
	.globl	Overworld_ClearSavedMusic
	.type	 Overworld_ClearSavedMusic,function
	.thumb_func
Overworld_ClearSavedMusic:
	ldr	r0, .L458
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1, #0x2c]
	bx	lr
.L459:
	.align	2, 0
.L458:
	.word	gSaveBlock1Ptr
.Lfe76:
	.size	 Overworld_ClearSavedMusic,.Lfe76-Overworld_ClearSavedMusic
	.align	2, 0
	.type	 sub_8085810,function
	.thumb_func
sub_8085810:
	push	{r4, r5, r6, lr}
	ldr	r0, .L469
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L460	@cond_branch
	bl	GetWarpDestinationMusic
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	GetCurrentMapMusic
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, .L469+0x4
	cmp	r4, r0
	beq	.L462	@cond_branch
	ldr	r0, .L469+0x8
	cmp	r4, r0
	beq	.L462	@cond_branch
	ldr	r0, .L469+0xc
	cmp	r5, r0
	beq	.L460	@cond_branch
	ldr	r6, .L469+0x10
	cmp	r5, r6
	beq	.L460	@cond_branch
	mov	r0, #0x8
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L462	@cond_branch
	add	r4, r6, #0
.L462:
	cmp	r4, r5
	beq	.L460	@cond_branch
	mov	r0, #0x6
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L467	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x4
	mov	r2, #0x4
	bl	FadeOutAndFadeInNewMapMusic
	b	.L460
.L470:
	.align	2, 0
.L469:
	.word	0x4001
	.word	0x1bb
	.word	0xffff
	.word	0x19b
	.word	0x16d
.L467:
	add	r0, r4, #0
	mov	r1, #0x8
	bl	FadeOutAndPlayNewMapMusic
.L460:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 sub_8085810,.Lfe77-sub_8085810
	.align	2, 0
	.globl	Overworld_ChangeMusicToDefault
	.type	 Overworld_ChangeMusicToDefault,function
	.thumb_func
Overworld_ChangeMusicToDefault:
	push	{r4, lr}
	bl	GetCurrentMapMusic
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	GetCurrLocationDefaultMusic
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r4, r0
	beq	.L472	@cond_branch
	bl	GetCurrLocationDefaultMusic
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x8
	bl	FadeOutAndPlayNewMapMusic
.L472:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 Overworld_ChangeMusicToDefault,.Lfe78-Overworld_ChangeMusicToDefault
	.align	2, 0
	.globl	Overworld_ChangeMusicTo
	.type	 Overworld_ChangeMusicTo,function
	.thumb_func
Overworld_ChangeMusicTo:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	GetCurrentMapMusic
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	cmp	r1, r4
	beq	.L474	@cond_branch
	ldr	r0, .L475
	cmp	r1, r0
	beq	.L474	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x8
	bl	FadeOutAndPlayNewMapMusic
.L474:
	pop	{r4}
	pop	{r0}
	bx	r0
.L476:
	.align	2, 0
.L475:
	.word	0x1bb
.Lfe79:
	.size	 Overworld_ChangeMusicTo,.Lfe79-Overworld_ChangeMusicTo
	.align	2, 0
	.globl	GetMapMusicFadeoutSpeed
	.type	 GetMapMusicFadeoutSpeed,function
	.thumb_func
GetMapMusicFadeoutSpeed:
	push	{lr}
	bl	GetDestinationWarpMapHeader
	ldrb	r0, [r0, #0x17]
	bl	IsMapTypeIndoors
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L478	@cond_branch
	mov	r0, #0x4
	b	.L480
.L478:
	mov	r0, #0x2
.L480:
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 GetMapMusicFadeoutSpeed,.Lfe80-GetMapMusicFadeoutSpeed
	.align	2, 0
	.globl	TryFadeOutOldMapMusic
	.type	 TryFadeOutOldMapMusic,function
	.thumb_func
TryFadeOutOldMapMusic:
	push	{r4, r5, lr}
	bl	GetCurrentMapMusic
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	bl	GetWarpDestinationMusic
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L484
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L481	@cond_branch
	bl	GetCurrentMapMusic
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r4, r0
	beq	.L481	@cond_branch
	ldr	r0, .L484+0x4
	cmp	r5, r0
	bne	.L483	@cond_branch
	ldr	r0, .L484+0x8
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L483	@cond_branch
	ldr	r0, .L484+0xc
	ldr	r0, [r0]
	ldr	r1, .L484+0x10
	ldrh	r2, [r0, #0x4]
	mov	r0, #0xe0
	lsl	r0, r0, #0x3
	cmp	r2, r0
	bne	.L483	@cond_branch
	ldr	r3, .L484+0x14
	ldrh	r0, [r3]
	and	r1, r1, r0
	cmp	r1, r2
	bne	.L483	@cond_branch
	ldr	r1, [r3, #0x4]
	ldr	r0, .L484+0x18
	cmp	r1, r0
	beq	.L481	@cond_branch
.L483:
	bl	GetMapMusicFadeoutSpeed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	FadeOutMapMusic
.L481:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L485:
	.align	2, 0
.L484:
	.word	0x4001
	.word	0x16d
	.word	0x40ca
	.word	gSaveBlock1Ptr
	.word	0xffff
	.word	sWarpDestination
	.word	0x35001d
.Lfe81:
	.size	 TryFadeOutOldMapMusic,.Lfe81-TryFadeOutOldMapMusic
	.align	2, 0
	.globl	BGMusicStopped
	.type	 BGMusicStopped,function
	.thumb_func
BGMusicStopped:
	push	{lr}
	bl	IsNotWaitingForBGMStop
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 BGMusicStopped,.Lfe82-BGMusicStopped
	.align	2, 0
	.globl	Overworld_FadeOutMapMusic
	.type	 Overworld_FadeOutMapMusic,function
	.thumb_func
Overworld_FadeOutMapMusic:
	push	{lr}
	mov	r0, #0x4
	bl	FadeOutMapMusic
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 Overworld_FadeOutMapMusic,.Lfe83-Overworld_FadeOutMapMusic
	.align	2, 0
	.type	 PlayAmbientCry,function
	.thumb_func
PlayAmbientCry:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	ldr	r0, .L490
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L489	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L488	@cond_branch
.L489:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x58
	bl	__umodsi3
	add	r4, r0, #0
	add	r4, r4, #0xd4
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1e
	bl	__umodsi3
	add	r2, r0, #0
	add	r2, r2, #0x32
	ldr	r0, .L490+0x4
	ldrh	r0, [r0]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r2, r2, #0x18
	asr	r2, r2, #0x18
	add	r1, r4, #0
	mov	r3, #0x1
	bl	PlayCry2
.L488:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	sIsAmbientCryWaterMon
	.word	sAmbientCrySpecies
.Lfe84:
	.size	 PlayAmbientCry,.Lfe84-PlayAmbientCry
	.align	2, 0
	.globl	UpdateAmbientCry
	.type	 UpdateAmbientCry,function
	.thumb_func
UpdateAmbientCry:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r6, r0, #0
	add	r7, r1, #0
	mov	r1, #0x0
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x4
	bhi	.L493	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L511
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L512:
	.align	2, 0
.L511:
	.word	.L508
	.align	2, 0
	.align	2, 0
.L508:
	.word	.L494
	.word	.L497
	.word	.L498
	.word	.L505
	.word	.L493
.L494:
	ldr	r0, .L513
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L495	@cond_branch
	mov	r0, #0x4
	b	.L510
.L514:
	.align	2, 0
.L513:
	.word	sAmbientCrySpecies
.L495:
	mov	r0, #0x1
	b	.L510
.L497:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x96
	lsl	r1, r1, #0x4
	bl	__umodsi3
	mov	r1, #0x96
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	strh	r0, [r7]
	mov	r0, #0x3
	b	.L510
.L498:
	mov	r0, #0x1
	mov	r9, r0
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	b	.L499
.L501:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L499:
	cmp	r5, r8
	bcs	.L500	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r4, .L515
	add	r0, r0, r4
	mov	r1, #0x6
	bl	GetMonData
	cmp	r0, #0
	bne	.L501	@cond_branch
	add	r0, r4, #0
	bl	GetMonAbility
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x44
	bne	.L501	@cond_branch
	mov	r1, #0x2
	mov	r9, r1
.L500:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r4, #0x96
	lsl	r4, r4, #0x3
	add	r1, r4, #0
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, r4
	mov	r1, r9
	bl	__divsi3
	strh	r0, [r7]
	mov	r0, #0x3
	b	.L510
.L516:
	.align	2, 0
.L515:
	.word	gPlayerParty
.L505:
	ldrh	r0, [r7]
	sub	r0, r0, #0x1
	strh	r0, [r7]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L493	@cond_branch
	bl	PlayAmbientCry
	mov	r0, #0x2
.L510:
	strh	r0, [r6]
.L493:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe85:
	.size	 UpdateAmbientCry,.Lfe85-UpdateAmbientCry
	.align	2, 0
	.type	 ChooseAmbientCrySpecies,function
	.thumb_func
ChooseAmbientCrySpecies:
	push	{lr}
	ldr	r0, .L521
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xb4
	lsl	r0, r0, #0x6
	cmp	r1, r0
	bne	.L518	@cond_branch
	bl	IsMirageIslandPresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L518	@cond_branch
	ldr	r1, .L521+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	bl	GetLocalWaterMon
	b	.L520
.L522:
	.align	2, 0
.L521:
	.word	gSaveBlock1Ptr
	.word	sIsAmbientCryWaterMon
.L518:
	ldr	r0, .L523
	bl	GetLocalWildMon
.L520:
	ldr	r1, .L523+0x4
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	sIsAmbientCryWaterMon
	.word	sAmbientCrySpecies
.Lfe86:
	.size	 ChooseAmbientCrySpecies,.Lfe86-ChooseAmbientCrySpecies
	.align	2, 0
	.globl	GetMapTypeByGroupAndId
	.type	 GetMapTypeByGroupAndId,function
	.thumb_func
GetMapTypeByGroupAndId:
	push	{lr}
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x8
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x8
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	ldrb	r0, [r0, #0x17]
	pop	{r1}
	bx	r1
.Lfe87:
	.size	 GetMapTypeByGroupAndId,.Lfe87-GetMapTypeByGroupAndId
	.align	2, 0
	.globl	GetMapTypeByWarpData
	.type	 GetMapTypeByWarpData,function
	.thumb_func
GetMapTypeByWarpData:
	push	{lr}
	mov	r2, #0x0
	ldrsb	r2, [r0, r2]
	mov	r1, #0x1
	ldrsb	r1, [r0, r1]
	add	r0, r2, #0
	bl	GetMapTypeByGroupAndId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe88:
	.size	 GetMapTypeByWarpData,.Lfe88-GetMapTypeByWarpData
	.align	2, 0
	.globl	GetCurrentMapType
	.type	 GetCurrentMapType,function
	.thumb_func
GetCurrentMapType:
	push	{lr}
	ldr	r0, .L528
	ldr	r0, [r0]
	add	r0, r0, #0x4
	bl	GetMapTypeByWarpData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L529:
	.align	2, 0
.L528:
	.word	gSaveBlock1Ptr
.Lfe89:
	.size	 GetCurrentMapType,.Lfe89-GetCurrentMapType
	.align	2, 0
	.globl	GetLastUsedWarpMapType
	.type	 GetLastUsedWarpMapType,function
	.thumb_func
GetLastUsedWarpMapType:
	push	{lr}
	ldr	r0, .L531
	bl	GetMapTypeByWarpData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L532:
	.align	2, 0
.L531:
	.word	gLastUsedWarp
.Lfe90:
	.size	 GetLastUsedWarpMapType,.Lfe90-GetLastUsedWarpMapType
	.align	2, 0
	.globl	IsMapTypeOutdoors
	.type	 IsMapTypeOutdoors,function
	.thumb_func
IsMapTypeOutdoors:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L535	@cond_branch
	cmp	r0, #0x1
	beq	.L535	@cond_branch
	cmp	r0, #0x5
	beq	.L535	@cond_branch
	cmp	r0, #0x2
	beq	.L535	@cond_branch
	cmp	r0, #0x6
	bne	.L534	@cond_branch
.L535:
	mov	r0, #0x1
	b	.L537
.L534:
	mov	r0, #0x0
.L537:
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 IsMapTypeOutdoors,.Lfe91-IsMapTypeOutdoors
	.align	2, 0
	.globl	Overworld_MapTypeAllowsTeleportAndFly
	.type	 Overworld_MapTypeAllowsTeleportAndFly,function
	.thumb_func
Overworld_MapTypeAllowsTeleportAndFly:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L540	@cond_branch
	cmp	r0, #0x1
	beq	.L540	@cond_branch
	cmp	r0, #0x6
	beq	.L540	@cond_branch
	cmp	r0, #0x2
	bne	.L539	@cond_branch
.L540:
	mov	r0, #0x1
	b	.L542
.L539:
	mov	r0, #0x0
.L542:
	pop	{r1}
	bx	r1
.Lfe92:
	.size	 Overworld_MapTypeAllowsTeleportAndFly,.Lfe92-Overworld_MapTypeAllowsTeleportAndFly
	.align	2, 0
	.globl	IsMapTypeIndoors
	.type	 IsMapTypeIndoors,function
	.thumb_func
IsMapTypeIndoors:
	push	{lr}
	lsl	r0, r0, #0x18
	mov	r1, #0xf8
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L544	@cond_branch
	mov	r0, #0x0
	b	.L546
.L544:
	mov	r0, #0x1
.L546:
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 IsMapTypeIndoors,.Lfe93-IsMapTypeIndoors
	.align	2, 0
	.globl	GetSavedWarpRegionMapSectionId
	.type	 GetSavedWarpRegionMapSectionId,function
	.thumb_func
GetSavedWarpRegionMapSectionId:
	push	{lr}
	ldr	r0, .L548
	ldr	r1, [r0]
	mov	r0, #0x14
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x15]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	ldrb	r0, [r0, #0x14]
	pop	{r1}
	bx	r1
.L549:
	.align	2, 0
.L548:
	.word	gSaveBlock1Ptr
.Lfe94:
	.size	 GetSavedWarpRegionMapSectionId,.Lfe94-GetSavedWarpRegionMapSectionId
	.align	2, 0
	.globl	GetCurrentRegionMapSectionId
	.type	 GetCurrentRegionMapSectionId,function
	.thumb_func
GetCurrentRegionMapSectionId:
	push	{lr}
	ldr	r0, .L551
	ldr	r1, [r0]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	ldrb	r0, [r0, #0x14]
	pop	{r1}
	bx	r1
.L552:
	.align	2, 0
.L551:
	.word	gSaveBlock1Ptr
.Lfe95:
	.size	 GetCurrentRegionMapSectionId,.Lfe95-GetCurrentRegionMapSectionId
	.align	2, 0
	.globl	GetCurrentMapBattleScene
	.type	 GetCurrentMapBattleScene,function
	.thumb_func
GetCurrentMapBattleScene:
	push	{lr}
	ldr	r0, .L554
	ldr	r1, [r0]
	mov	r0, #0x4
	ldrsb	r0, [r1, r0]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	Overworld_GetMapHeaderByGroupAndId
	ldrb	r0, [r0, #0x1b]
	pop	{r1}
	bx	r1
.L555:
	.align	2, 0
.L554:
	.word	gSaveBlock1Ptr
.Lfe96:
	.size	 GetCurrentMapBattleScene,.Lfe96-GetCurrentMapBattleScene
	.align	2, 0
	.type	 InitOverworldBgs,function
	.thumb_func
InitOverworldBgs:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r1, .L557
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	mov	r0, #0x1
	mov	r1, #0x5
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r0, #0x2
	mov	r1, #0x5
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r0, #0x3
	mov	r1, #0x5
	mov	r2, #0x1
	bl	SetBgAttribute
	ldr	r0, .L557+0x4
	mov	r8, r0
	mov	r4, #0x80
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	bl	AllocZeroed
	mov	r1, r8
	str	r0, [r1]
	ldr	r6, .L557+0x8
	add	r0, r4, #0
	bl	AllocZeroed
	str	r0, [r6]
	ldr	r5, .L557+0xc
	add	r0, r4, #0
	bl	AllocZeroed
	str	r0, [r5]
	mov	r0, r8
	ldr	r1, [r0]
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r6]
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	ldr	r1, [r5]
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	bl	InitStandardTextBoxWindows
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L558:
	.align	2, 0
.L557:
	.word	sOverworldBgTemplates
	.word	gBGTilemapBuffers2
	.word	gBGTilemapBuffers1
	.word	gBGTilemapBuffers3
.Lfe97:
	.size	 InitOverworldBgs,.Lfe97-InitOverworldBgs
	.align	2, 0
	.globl	CleanupOverworldWindowsAndTilemaps
	.type	 CleanupOverworldWindowsAndTilemaps,function
	.thumb_func
CleanupOverworldWindowsAndTilemaps:
	push	{r4, lr}
	bl	ClearMirageTowerPulseBlendEffect
	bl	FreeAllOverworldWindowBuffers
	ldr	r4, .L563
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L560	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L560:
	ldr	r4, .L563+0x4
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L561	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L561:
	ldr	r4, .L563+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L562	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L562:
	pop	{r4}
	pop	{r0}
	bx	r0
.L564:
	.align	2, 0
.L563:
	.word	gBGTilemapBuffers3
	.word	gBGTilemapBuffers1
	.word	gBGTilemapBuffers2
.Lfe98:
	.size	 CleanupOverworldWindowsAndTilemaps,.Lfe98-CleanupOverworldWindowsAndTilemaps
	.align	2, 0
	.type	 ResetSafariZoneFlag_,function
	.thumb_func
ResetSafariZoneFlag_:
	push	{lr}
	bl	ResetSafariZoneFlag
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 ResetSafariZoneFlag_,.Lfe99-ResetSafariZoneFlag_
	.align	2, 0
	.globl	IsUpdateLinkStateCBActive
	.type	 IsUpdateLinkStateCBActive,function
	.thumb_func
IsUpdateLinkStateCBActive:
	push	{lr}
	ldr	r0, .L570
	ldr	r1, [r0]
	ldr	r0, .L570+0x4
	cmp	r1, r0
	beq	.L567	@cond_branch
	mov	r0, #0x0
	b	.L569
.L571:
	.align	2, 0
.L570:
	.word	gMain
	.word	CB1_UpdateLinkState
.L567:
	mov	r0, #0x1
.L569:
	pop	{r1}
	bx	r1
.Lfe100:
	.size	 IsUpdateLinkStateCBActive,.Lfe100-IsUpdateLinkStateCBActive
	.align	2, 0
	.type	 DoCB1_Overworld,function
	.thumb_func
DoCB1_Overworld:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r5, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r4, r1, #0
	bl	sub_808B578
	mov	r6, sp
	mov	r0, sp
	bl	FieldClearPlayerInput
	mov	r0, sp
	add	r1, r5, #0
	add	r2, r4, #0
	bl	FieldGetPlayerInput
	bl	ScriptContext2_IsEnabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L573	@cond_branch
	mov	r0, sp
	bl	ProcessPlayerFieldInput
	cmp	r0, #0x1
	bne	.L574	@cond_branch
	bl	ScriptContext2_Enable
	bl	HideMapNamePopUpWindow
	b	.L573
.L574:
	ldrb	r0, [r6, #0x2]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	player_step
.L573:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe101:
	.size	 DoCB1_Overworld,.Lfe101-DoCB1_Overworld
	.align	2, 0
	.globl	CB1_Overworld
	.type	 CB1_Overworld,function
	.thumb_func
CB1_Overworld:
	push	{lr}
	ldr	r2, .L578
	ldr	r1, [r2, #0x4]
	ldr	r0, .L578+0x4
	cmp	r1, r0
	bne	.L577	@cond_branch
	ldrh	r0, [r2, #0x2e]
	ldrh	r1, [r2, #0x2c]
	bl	DoCB1_Overworld
.L577:
	pop	{r0}
	bx	r0
.L579:
	.align	2, 0
.L578:
	.word	gMain
	.word	CB2_Overworld
.Lfe102:
	.size	 CB1_Overworld,.Lfe102-CB1_Overworld
	.align	2, 0
	.type	 OverworldBasic,function
	.thumb_func
OverworldBasic:
	push	{lr}
	bl	ScriptContext2_RunScript
	bl	RunTasks
	bl	AnimateSprites
	bl	CameraUpdate
	bl	UpdateCameraPanning
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	bl	UpdateTilesetAnimations
	bl	do_scheduled_bg_tilemap_copies_to_vram
	pop	{r0}
	bx	r0
.Lfe103:
	.size	 OverworldBasic,.Lfe103-OverworldBasic
	.align	2, 0
	.globl	CB2_OverworldBasic
	.type	 CB2_OverworldBasic,function
	.thumb_func
CB2_OverworldBasic:
	push	{lr}
	bl	OverworldBasic
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 CB2_OverworldBasic,.Lfe104-CB2_OverworldBasic
	.align	2, 0
	.globl	CB2_Overworld
	.type	 CB2_Overworld,function
	.thumb_func
CB2_Overworld:
	push	{r4, lr}
	ldr	r0, .L585
	ldrb	r0, [r0, #0x7]
	lsr	r0, r0, #0x7
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L583	@cond_branch
	mov	r0, #0x0
	bl	SetVBlankCallback
.L583:
	bl	OverworldBasic
	cmp	r4, #0
	beq	.L584	@cond_branch
	bl	SetFieldVBlankCallback
.L584:
	pop	{r4}
	pop	{r0}
	bx	r0
.L586:
	.align	2, 0
.L585:
	.word	gPaletteFade
.Lfe105:
	.size	 CB2_Overworld,.Lfe105-CB2_Overworld
	.align	2, 0
	.globl	SetMainCallback1
	.type	 SetMainCallback1,function
	.thumb_func
SetMainCallback1:
	ldr	r1, .L588
	str	r0, [r1]
	bx	lr
.L589:
	.align	2, 0
.L588:
	.word	gMain
.Lfe106:
	.size	 SetMainCallback1,.Lfe106-SetMainCallback1
	.align	2, 0
	.globl	SetUnusedCallback
	.type	 SetUnusedCallback,function
	.thumb_func
SetUnusedCallback:
	ldr	r1, .L591
	str	r0, [r1]
	bx	lr
.L592:
	.align	2, 0
.L591:
	.word	sUnusedOverworldCallback
.Lfe107:
	.size	 SetUnusedCallback,.Lfe107-SetUnusedCallback
	.align	2, 0
	.type	 map_post_load_hook_exec,function
	.thumb_func
map_post_load_hook_exec:
	push	{r4, lr}
	ldr	r4, .L601
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L594	@cond_branch
	bl	_call_via_r0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L595	@cond_branch
	mov	r0, #0x0
	b	.L600
.L602:
	.align	2, 0
.L601:
	.word	gFieldCallback2
.L595:
	mov	r1, #0x0
	str	r1, [r4]
	ldr	r0, .L603
	str	r1, [r0]
	b	.L597
.L604:
	.align	2, 0
.L603:
	.word	gFieldCallback
.L594:
	ldr	r0, .L605
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L598	@cond_branch
	bl	_call_via_r0
	b	.L599
.L606:
	.align	2, 0
.L605:
	.word	gFieldCallback
.L598:
	bl	FieldCB_DefaultWarpExit
.L599:
	ldr	r1, .L607
	mov	r0, #0x0
	str	r0, [r1]
.L597:
	mov	r0, #0x1
.L600:
	pop	{r4}
	pop	{r1}
	bx	r1
.L608:
	.align	2, 0
.L607:
	.word	gFieldCallback
.Lfe108:
	.size	 map_post_load_hook_exec,.Lfe108-map_post_load_hook_exec
	.align	2, 0
	.globl	CB2_NewGame
	.type	 CB2_NewGame,function
	.thumb_func
CB2_NewGame:
	push	{lr}
	bl	FieldClearVBlankHBlankCallbacks
	bl	StopMapMusic
	bl	ResetSafariZoneFlag_
	bl	NewGameInitData
	bl	ResetInitialPlayerAvatarState
	bl	PlayTimeCounter_Start
	bl	ScriptContext1_Init
	bl	ScriptContext2_Disable
	ldr	r1, .L610
	ldr	r0, .L610+0x4
	str	r0, [r1]
	ldr	r1, .L610+0x8
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, .L610+0xc
	bl	do_load_map_stuff_loop
	bl	SetFieldVBlankCallback
	ldr	r0, .L610+0x10
	bl	SetMainCallback1
	ldr	r0, .L610+0x14
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L611:
	.align	2, 0
.L610:
	.word	gFieldCallback
	.word	ExecuteTruckSequence
	.word	gFieldCallback2
	.word	gMain+0x438
	.word	CB1_Overworld
	.word	CB2_Overworld
.Lfe109:
	.size	 CB2_NewGame,.Lfe109-CB2_NewGame
	.align	2, 0
	.globl	CB2_WhiteOut
	.type	 CB2_WhiteOut,function
	.thumb_func
CB2_WhiteOut:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r1, .L614
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x77
	bls	.L613	@cond_branch
	bl	FieldClearVBlankHBlankCallbacks
	bl	StopMapMusic
	bl	ResetSafariZoneFlag_
	bl	DoWhiteOut
	bl	ResetInitialPlayerAvatarState
	bl	ScriptContext1_Init
	bl	ScriptContext2_Disable
	ldr	r1, .L614+0x4
	ldr	r0, .L614+0x8
	str	r0, [r1]
	mov	r1, sp
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, sp
	bl	do_load_map_stuff_loop
	bl	SetFieldVBlankCallback
	ldr	r0, .L614+0xc
	bl	SetMainCallback1
	ldr	r0, .L614+0x10
	bl	SetMainCallback2
.L613:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L615:
	.align	2, 0
.L614:
	.word	gMain
	.word	gFieldCallback
	.word	FieldCB_WarpExitFadeFromBlack
	.word	CB1_Overworld
	.word	CB2_Overworld
.Lfe110:
	.size	 CB2_WhiteOut,.Lfe110-CB2_WhiteOut
	.align	2, 0
	.globl	CB2_LoadMap
	.type	 CB2_LoadMap,function
	.thumb_func
CB2_LoadMap:
	push	{lr}
	bl	FieldClearVBlankHBlankCallbacks
	bl	ScriptContext1_Init
	bl	ScriptContext2_Disable
	mov	r0, #0x0
	bl	SetMainCallback1
	ldr	r0, .L617
	bl	SetMainCallback2
	ldr	r1, .L617+0x4
	ldr	r0, .L617+0x8
	str	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L618:
	.align	2, 0
.L617:
	.word	CB2_DoChangeMap
	.word	gMain
	.word	CB2_LoadMap2
.Lfe111:
	.size	 CB2_LoadMap,.Lfe111-CB2_LoadMap
	.align	2, 0
	.type	 CB2_LoadMap2,function
	.thumb_func
CB2_LoadMap2:
	push	{lr}
	ldr	r0, .L620
	bl	do_load_map_stuff_loop
	bl	SetFieldVBlankCallback
	ldr	r0, .L620+0x4
	bl	SetMainCallback1
	ldr	r0, .L620+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L621:
	.align	2, 0
.L620:
	.word	gMain+0x438
	.word	CB1_Overworld
	.word	CB2_Overworld
.Lfe112:
	.size	 CB2_LoadMap2,.Lfe112-CB2_LoadMap2
	.align	2, 0
	.globl	sub_8086024
	.type	 sub_8086024,function
	.thumb_func
sub_8086024:
	push	{r4, lr}
	ldr	r0, .L625
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L623	@cond_branch
	bl	FieldClearVBlankHBlankCallbacks
	bl	ScriptContext1_Init
	bl	ScriptContext2_Disable
	mov	r0, #0x0
	bl	SetMainCallback1
.L623:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	load_map_stuff
	cmp	r0, #0
	beq	.L624	@cond_branch
	bl	SetFieldVBlankCallback
	ldr	r0, .L625+0x4
	bl	SetMainCallback1
	ldr	r0, .L625+0x8
	bl	SetMainCallback2
.L624:
	pop	{r4}
	pop	{r0}
	bx	r0
.L626:
	.align	2, 0
.L625:
	.word	gMain
	.word	CB1_Overworld
	.word	CB2_Overworld
.Lfe113:
	.size	 sub_8086024,.Lfe113-sub_8086024
	.align	2, 0
	.globl	CB2_ReturnToFieldCableClub
	.type	 CB2_ReturnToFieldCableClub,function
	.thumb_func
CB2_ReturnToFieldCableClub:
	push	{lr}
	bl	FieldClearVBlankHBlankCallbacks
	ldr	r0, .L628
	ldr	r1, .L628+0x4
	str	r1, [r0]
	ldr	r0, .L628+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L629:
	.align	2, 0
.L628:
	.word	gFieldCallback
	.word	FieldCB_ReturnToFieldWirelessLink
	.word	c2_80567AC
.Lfe114:
	.size	 CB2_ReturnToFieldCableClub,.Lfe114-CB2_ReturnToFieldCableClub
	.align	2, 0
	.type	 c2_80567AC,function
	.thumb_func
c2_80567AC:
	push	{lr}
	ldr	r0, .L632
	bl	map_loading_iteration_3
	cmp	r0, #0
	beq	.L631	@cond_branch
	bl	SetFieldVBlankCallback
	ldr	r0, .L632+0x4
	bl	SetMainCallback1
	bl	ResetAllMultiplayerState
	ldr	r0, .L632+0x8
	bl	SetMainCallback2
.L631:
	pop	{r0}
	bx	r0
.L633:
	.align	2, 0
.L632:
	.word	gMain+0x438
	.word	CB1_UpdateLinkState
	.word	CB2_Overworld
.Lfe115:
	.size	 c2_80567AC,.Lfe115-c2_80567AC
	.align	2, 0
	.globl	CB2_ReturnToField
	.type	 CB2_ReturnToField,function
	.thumb_func
CB2_ReturnToField:
	push	{lr}
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	bne	.L635	@cond_branch
	ldr	r0, .L637
	bl	SetMainCallback2
	b	.L636
.L638:
	.align	2, 0
.L637:
	.word	CB2_ReturnToFieldLink
.L635:
	bl	FieldClearVBlankHBlankCallbacks
	ldr	r0, .L639
	bl	SetMainCallback2
.L636:
	pop	{r0}
	bx	r0
.L640:
	.align	2, 0
.L639:
	.word	CB2_ReturnToFieldLocal
.Lfe116:
	.size	 CB2_ReturnToField,.Lfe116-CB2_ReturnToField
	.align	2, 0
	.globl	CB2_ReturnToFieldLocal
	.type	 CB2_ReturnToFieldLocal,function
	.thumb_func
CB2_ReturnToFieldLocal:
	push	{lr}
	ldr	r0, .L643
	bl	sub_8086638
	cmp	r0, #0
	beq	.L642	@cond_branch
	bl	SetFieldVBlankCallback
	ldr	r0, .L643+0x4
	bl	SetMainCallback2
.L642:
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	gMain+0x438
	.word	CB2_Overworld
.Lfe117:
	.size	 CB2_ReturnToFieldLocal,.Lfe117-CB2_ReturnToFieldLocal
	.align	2, 0
	.globl	CB2_ReturnToFieldLink
	.type	 CB2_ReturnToFieldLink,function
	.thumb_func
CB2_ReturnToFieldLink:
	push	{lr}
	bl	sub_8087598
	cmp	r0, #0
	bne	.L646	@cond_branch
	ldr	r0, .L647
	bl	map_loading_iteration_2_link
	cmp	r0, #0
	beq	.L646	@cond_branch
	ldr	r0, .L647+0x4
	bl	SetMainCallback2
.L646:
	pop	{r0}
	bx	r0
.L648:
	.align	2, 0
.L647:
	.word	gMain+0x438
	.word	CB2_Overworld
.Lfe118:
	.size	 CB2_ReturnToFieldLink,.Lfe118-CB2_ReturnToFieldLink
	.align	2, 0
	.globl	CB2_ReturnToFieldFromMultiplayer
	.type	 CB2_ReturnToFieldFromMultiplayer,function
	.thumb_func
CB2_ReturnToFieldFromMultiplayer:
	push	{lr}
	bl	FieldClearVBlankHBlankCallbacks
	bl	StopMapMusic
	ldr	r0, .L653
	bl	SetMainCallback1
	bl	ResetAllMultiplayerState
	ldr	r0, .L653+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L650	@cond_branch
	ldr	r1, .L653+0x8
	ldr	r0, .L653+0xc
	b	.L652
.L654:
	.align	2, 0
.L653:
	.word	CB1_UpdateLinkState
	.word	gWirelessCommType
	.word	gFieldCallback
	.word	FieldCB_ReturnToFieldWirelessLink
.L650:
	ldr	r1, .L655
	ldr	r0, .L655+0x4
.L652:
	str	r0, [r1]
	bl	ScriptContext1_Init
	bl	ScriptContext2_Disable
	bl	CB2_ReturnToField
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	gFieldCallback
	.word	FieldCB_ReturnToFieldCableLink
.Lfe119:
	.size	 CB2_ReturnToFieldFromMultiplayer,.Lfe119-CB2_ReturnToFieldFromMultiplayer
	.align	2, 0
	.globl	CB2_ReturnToFieldWithOpenMenu
	.type	 CB2_ReturnToFieldWithOpenMenu,function
	.thumb_func
CB2_ReturnToFieldWithOpenMenu:
	push	{lr}
	bl	FieldClearVBlankHBlankCallbacks
	ldr	r1, .L658
	ldr	r0, .L658+0x4
	str	r0, [r1]
	bl	CB2_ReturnToField
	pop	{r0}
	bx	r0
.L659:
	.align	2, 0
.L658:
	.word	gFieldCallback2
	.word	FieldCB_ReturnToFieldOpenStartMenu
.Lfe120:
	.size	 CB2_ReturnToFieldWithOpenMenu,.Lfe120-CB2_ReturnToFieldWithOpenMenu
	.align	2, 0
	.globl	CB2_ReturnToFieldContinueScript
	.type	 CB2_ReturnToFieldContinueScript,function
	.thumb_func
CB2_ReturnToFieldContinueScript:
	push	{lr}
	bl	FieldClearVBlankHBlankCallbacks
	ldr	r1, .L661
	ldr	r0, .L661+0x4
	str	r0, [r1]
	bl	CB2_ReturnToField
	pop	{r0}
	bx	r0
.L662:
	.align	2, 0
.L661:
	.word	gFieldCallback
	.word	FieldCB_ContinueScript
.Lfe121:
	.size	 CB2_ReturnToFieldContinueScript,.Lfe121-CB2_ReturnToFieldContinueScript
	.align	2, 0
	.globl	CB2_ReturnToFieldContinueScriptPlayMapMusic
	.type	 CB2_ReturnToFieldContinueScriptPlayMapMusic,function
	.thumb_func
CB2_ReturnToFieldContinueScriptPlayMapMusic:
	push	{lr}
	bl	FieldClearVBlankHBlankCallbacks
	ldr	r1, .L664
	ldr	r0, .L664+0x4
	str	r0, [r1]
	bl	CB2_ReturnToField
	pop	{r0}
	bx	r0
.L665:
	.align	2, 0
.L664:
	.word	gFieldCallback
	.word	FieldCB_ContinueScriptHandleMusic
.Lfe122:
	.size	 CB2_ReturnToFieldContinueScriptPlayMapMusic,.Lfe122-CB2_ReturnToFieldContinueScriptPlayMapMusic
	.align	2, 0
	.globl	sub_80861E8
	.type	 sub_80861E8,function
	.thumb_func
sub_80861E8:
	push	{lr}
	bl	FieldClearVBlankHBlankCallbacks
	ldr	r1, .L667
	ldr	r0, .L667+0x4
	str	r0, [r1]
	bl	CB2_ReturnToField
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	gFieldCallback
	.word	FieldCB_WarpExitFadeFromBlack
.Lfe123:
	.size	 sub_80861E8,.Lfe123-sub_80861E8
	.align	2, 0
	.type	 sub_8086204,function
	.thumb_func
sub_8086204:
	push	{lr}
	ldr	r0, .L671
	ldrb	r1, [r0, #0x1a]
	mov	r0, #0xf8
	and	r0, r0, r1
	cmp	r0, #0x8
	bne	.L670	@cond_branch
	bl	SecretBaseMapPopupEnabled
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L670	@cond_branch
	bl	ShowMapNamePopup
.L670:
	bl	FieldCB_WarpExitFadeFromBlack
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	gMapHeader
.Lfe124:
	.size	 sub_8086204,.Lfe124-sub_8086204
	.align	2, 0
	.globl	CB2_ContinueSavedGame
	.type	 CB2_ContinueSavedGame,function
	.thumb_func
CB2_ContinueSavedGame:
	push	{r4, lr}
	bl	FieldClearVBlankHBlankCallbacks
	bl	StopMapMusic
	bl	ResetSafariZoneFlag_
	ldr	r0, .L685
	ldrh	r0, [r0]
	cmp	r0, #0xff
	bne	.L674	@cond_branch
	bl	ResetWinStreaks
.L674:
	bl	LoadSaveblockMapHeader
	bl	ClearDiveAndHoleWarps
	bl	GetCurrentTrainerHillMapId
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L685+0x4
	ldrh	r1, [r0, #0x12]
	ldr	r0, .L685+0x8
	cmp	r1, r0
	bne	.L675	@cond_branch
	bl	LoadBattlePyramidFloorObjectEventScripts
	b	.L676
.L686:
	.align	2, 0
.L685:
	.word	gSaveFileStatus
	.word	gMapHeader
	.word	0x169
.L675:
	cmp	r4, #0
	beq	.L677	@cond_branch
	cmp	r4, #0x6
	beq	.L677	@cond_branch
	bl	LoadTrainerHillFloorObjectEventScripts
	b	.L676
.L677:
	bl	LoadSaveblockObjEventScripts
.L676:
	bl	UnfreezeObjectEvents
	bl	DoTimeBasedEvents
	bl	sub_8084788
	ldr	r0, .L687
	ldrh	r1, [r0, #0x12]
	ldr	r0, .L687+0x4
	cmp	r1, r0
	bne	.L679	@cond_branch
	mov	r0, #0x1
	bl	InitBattlePyramidMap
	b	.L680
.L688:
	.align	2, 0
.L687:
	.word	gMapHeader
	.word	0x169
.L679:
	cmp	r4, #0
	beq	.L681	@cond_branch
	bl	InitTrainerHillMap
	b	.L680
.L681:
	bl	InitMapFromSavedGame
.L680:
	bl	PlayTimeCounter_Start
	bl	ScriptContext1_Init
	bl	ScriptContext2_Disable
	bl	InitMatchCallCounters
	bl	UseContinueGameWarp
	cmp	r0, #0x1
	bne	.L683	@cond_branch
	bl	ClearContinueGameWarpStatus
	bl	SetWarpDestinationToContinueGameWarp
	bl	WarpIntoMap
	bl	sub_80EDB44
	ldr	r0, .L689
	bl	SetMainCallback2
	b	.L684
.L690:
	.align	2, 0
.L689:
	.word	CB2_LoadMap
.L683:
	bl	sub_80EDB44
	ldr	r0, .L691
	ldr	r1, .L691+0x4
	str	r1, [r0]
	ldr	r0, .L691+0x8
	bl	SetMainCallback1
	bl	CB2_ReturnToField
.L684:
	pop	{r4}
	pop	{r0}
	bx	r0
.L692:
	.align	2, 0
.L691:
	.word	gFieldCallback
	.word	sub_8086204
	.word	CB1_Overworld
.Lfe125:
	.size	 CB2_ContinueSavedGame,.Lfe125-CB2_ContinueSavedGame
	.align	2, 0
	.type	 FieldClearVBlankHBlankCallbacks,function
	.thumb_func
FieldClearVBlankHBlankCallbacks:
	push	{r4, lr}
	bl	UsedPokemonCenterWarp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L694	@cond_branch
	bl	CloseLink
.L694:
	ldr	r0, .L697
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L695	@cond_branch
	mov	r0, #0xc5
	bl	EnableInterrupts
	mov	r0, #0x2
	bl	DisableInterrupts
	b	.L696
.L698:
	.align	2, 0
.L697:
	.word	gWirelessCommType
.L695:
	ldr	r4, .L699
	ldrh	r3, [r4]
	strh	r0, [r4]
	ldr	r2, .L699+0x4
	ldrh	r1, [r2]
	ldr	r0, .L699+0x8
	and	r0, r0, r1
	strh	r0, [r2]
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	strh	r3, [r4]
.L696:
	mov	r0, #0x0
	bl	SetVBlankCallback
	mov	r0, #0x0
	bl	SetHBlankCallback
	pop	{r4}
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	0x4000208
	.word	0x4000200
	.word	0xfffd
.Lfe126:
	.size	 FieldClearVBlankHBlankCallbacks,.Lfe126-FieldClearVBlankHBlankCallbacks
	.align	2, 0
	.type	 SetFieldVBlankCallback,function
	.thumb_func
SetFieldVBlankCallback:
	push	{lr}
	ldr	r0, .L702
	bl	SetVBlankCallback
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	VBlankCB_Field
.Lfe127:
	.size	 SetFieldVBlankCallback,.Lfe127-SetFieldVBlankCallback
	.align	2, 0
	.type	 VBlankCB_Field,function
	.thumb_func
VBlankCB_Field:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	ScanlineEffect_InitHBlankDmaTransfer
	bl	FieldUpdateBgTilemapScroll
	bl	TransferPlttBuffer
	bl	TransferTilesetAnimsBuffer
	pop	{r0}
	bx	r0
.Lfe128:
	.size	 VBlankCB_Field,.Lfe128-VBlankCB_Field
	.align	2, 0
	.type	 InitCurrentFlashLevelScanlineEffect,function
	.thumb_func
InitCurrentFlashLevelScanlineEffect:
	push	{lr}
	bl	InBattlePyramid_
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L706	@cond_branch
	bl	WriteBattlePyramidViewScanlineEffectBuffer
	ldr	r2, .L709
	ldr	r0, [r2]
	ldr	r1, [r2, #0x4]
	ldr	r2, [r2, #0x8]
	bl	ScanlineEffect_SetParams
	b	.L707
.L710:
	.align	2, 0
.L709:
	.word	sFlashEffectParams
.L706:
	bl	Overworld_GetFlashLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L707	@cond_branch
	bl	WriteFlashScanlineEffectBuffer
	ldr	r2, .L711
	ldr	r0, [r2]
	ldr	r1, [r2, #0x4]
	ldr	r2, [r2, #0x8]
	bl	ScanlineEffect_SetParams
.L707:
	pop	{r0}
	bx	r0
.L712:
	.align	2, 0
.L711:
	.word	sFlashEffectParams
.Lfe129:
	.size	 InitCurrentFlashLevelScanlineEffect,.Lfe129-InitCurrentFlashLevelScanlineEffect
	.align	2, 0
	.type	 map_loading_iteration_3,function
	.thumb_func
map_loading_iteration_3:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0xd
	bls	.LCB5644
	b	.L714	@long jump
.LCB5644:
	lsl	r0, r0, #0x2
	ldr	r1, .L736
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L737:
	.align	2, 0
.L736:
	.word	.L732
	.align	2, 0
	.align	2, 0
.L732:
	.word	.L715
	.word	.L716
	.word	.L717
	.word	.L718
	.word	.L719
	.word	.L720
	.word	.L721
	.word	.L722
	.word	.L723
	.word	.L725
	.word	.L726
	.word	.L727
	.word	.L729
	.word	.L731
.L715:
	bl	InitOverworldBgs
	bl	ScriptContext1_Init
	bl	ScriptContext2_Disable
	bl	sub_80867C8
	bl	sub_80867D8
	b	.L735
.L716:
	mov	r0, #0x1
	bl	mli0_load_map
	b	.L735
.L717:
	mov	r0, #0x1
	bl	sub_8086988
	b	.L735
.L718:
	bl	sub_8086AE4
	bl	sub_80869DC
	bl	sub_8086B14
	bl	SetCameraToTrackGuestPlayer
	b	.L735
.L719:
	bl	InitCurrentFlashLevelScanlineEffect
	bl	InitOverworldGraphicsRegisters
	bl	sub_8197200
	b	.L735
.L720:
	bl	move_tilemap_camera_to_upper_left_corner
	b	.L735
.L721:
	ldr	r0, .L738
	ldr	r0, [r0]
	bl	copy_map_tileset1_to_vram
	b	.L735
.L739:
	.align	2, 0
.L738:
	.word	gMapHeader
.L722:
	ldr	r0, .L740
	ldr	r0, [r0]
	bl	copy_map_tileset2_to_vram
	b	.L735
.L741:
	.align	2, 0
.L740:
	.word	gMapHeader
.L723:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L714	@cond_branch
	ldr	r0, .L742
	ldr	r0, [r0]
	bl	apply_map_tileset1_tileset2_palette
	b	.L735
.L743:
	.align	2, 0
.L742:
	.word	gMapHeader
.L725:
	bl	DrawWholeMapView
	b	.L735
.L726:
	bl	InitTilesetAnimations
	b	.L735
.L727:
	ldr	r0, .L744
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L735	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x0
	mov	r1, #0x0
	bl	CreateWirelessStatusIndicatorSprite
	b	.L735
.L745:
	.align	2, 0
.L744:
	.word	gWirelessCommType
.L729:
	bl	map_post_load_hook_exec
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L714	@cond_branch
.L735:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L714
.L731:
	mov	r0, #0x1
	b	.L734
.L714:
	mov	r0, #0x0
.L734:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe130:
	.size	 map_loading_iteration_3,.Lfe130-map_loading_iteration_3
	.align	2, 0
	.type	 load_map_stuff,function
	.thumb_func
load_map_stuff:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r4]
	cmp	r0, #0xd
	bls	.LCB5807
	b	.L747	@long jump
.LCB5807:
	lsl	r0, r0, #0x2
	ldr	r1, .L769
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L770:
	.align	2, 0
.L769:
	.word	.L765
	.align	2, 0
	.align	2, 0
.L765:
	.word	.L748
	.word	.L749
	.word	.L750
	.word	.L751
	.word	.L752
	.word	.L753
	.word	.L754
	.word	.L755
	.word	.L756
	.word	.L758
	.word	.L759
	.word	.L760
	.word	.L762
	.word	.L764
.L748:
	bl	FieldClearVBlankHBlankCallbacks
	add	r0, r5, #0
	bl	mli0_load_map
	b	.L768
.L749:
	bl	sub_80867C8
	bl	sub_80867D8
	b	.L768
.L750:
	add	r0, r5, #0
	bl	sub_8086988
	b	.L768
.L751:
	bl	mli4_mapscripts_and_other
	bl	sub_8086A80
	b	.L768
.L752:
	bl	InitCurrentFlashLevelScanlineEffect
	bl	InitOverworldGraphicsRegisters
	bl	sub_8197200
	b	.L768
.L753:
	bl	move_tilemap_camera_to_upper_left_corner
	b	.L768
.L754:
	ldr	r0, .L771
	ldr	r0, [r0]
	bl	copy_map_tileset1_to_vram
	b	.L768
.L772:
	.align	2, 0
.L771:
	.word	gMapHeader
.L755:
	ldr	r0, .L773
	ldr	r0, [r0]
	bl	copy_map_tileset2_to_vram
	b	.L768
.L774:
	.align	2, 0
.L773:
	.word	gMapHeader
.L756:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L747	@cond_branch
	ldr	r0, .L775
	ldr	r0, [r0]
	bl	apply_map_tileset1_tileset2_palette
	b	.L768
.L776:
	.align	2, 0
.L775:
	.word	gMapHeader
.L758:
	bl	DrawWholeMapView
	b	.L768
.L759:
	bl	InitTilesetAnimations
	b	.L768
.L760:
	ldr	r0, .L777
	ldrb	r1, [r0, #0x1a]
	mov	r0, #0xf8
	and	r0, r0, r1
	cmp	r0, #0x8
	bne	.L768	@cond_branch
	bl	SecretBaseMapPopupEnabled
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L768	@cond_branch
	bl	ShowMapNamePopup
	b	.L768
.L778:
	.align	2, 0
.L777:
	.word	gMapHeader
.L762:
	bl	map_post_load_hook_exec
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L747	@cond_branch
.L768:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L747
.L764:
	mov	r0, #0x1
	b	.L767
.L747:
	mov	r0, #0x0
.L767:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe131:
	.size	 load_map_stuff,.Lfe131-load_map_stuff
	.align	2, 0
	.type	 sub_8086638,function
	.thumb_func
sub_8086638:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x1
	beq	.L782	@cond_branch
	cmp	r0, #0x1
	bgt	.L788	@cond_branch
	cmp	r0, #0
	beq	.L781	@cond_branch
	b	.L780
.L788:
	cmp	r0, #0x2
	beq	.L783	@cond_branch
	cmp	r0, #0x3
	beq	.L785	@cond_branch
	b	.L780
.L781:
	bl	sub_80867C8
	bl	sub_80867D8
	mov	r0, #0x0
	bl	sub_8086988
	bl	sub_8086A68
	bl	sub_8086A80
	b	.L790
.L782:
	bl	sub_8086860
	bl	sub_81D64C0
	b	.L790
.L783:
	bl	map_post_load_hook_exec
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L780	@cond_branch
.L790:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L780
.L785:
	mov	r0, #0x1
	b	.L789
.L780:
	mov	r0, #0x0
.L789:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe132:
	.size	 sub_8086638,.Lfe132-sub_8086638
	.align	2, 0
	.type	 map_loading_iteration_2_link,function
	.thumb_func
map_loading_iteration_2_link:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0xd
	bls	.LCB6033
	b	.L792	@long jump
.LCB6033:
	lsl	r0, r0, #0x2
	ldr	r1, .L813
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L814:
	.align	2, 0
.L813:
	.word	.L810
	.align	2, 0
	.align	2, 0
.L810:
	.word	.L793
	.word	.L794
	.word	.L795
	.word	.L796
	.word	.L797
	.word	.L798
	.word	.L799
	.word	.L800
	.word	.L802
	.word	.L803
	.word	.L808
	.word	.L804
	.word	.L806
	.word	.L809
.L793:
	bl	FieldClearVBlankHBlankCallbacks
	bl	sub_80867C8
	bl	sub_80867D8
	b	.L808
.L794:
	mov	r0, #0x1
	bl	sub_8086988
	b	.L808
.L795:
	bl	CreateLinkPlayerSprites
	bl	sub_8086A68
	bl	SetCameraToTrackGuestPlayer_2
	b	.L808
.L796:
	bl	InitCurrentFlashLevelScanlineEffect
	bl	InitOverworldGraphicsRegisters
	bl	sub_8197200
	b	.L808
.L797:
	bl	move_tilemap_camera_to_upper_left_corner
	b	.L808
.L798:
	ldr	r0, .L815
	ldr	r0, [r0]
	bl	copy_map_tileset1_to_vram
	b	.L808
.L816:
	.align	2, 0
.L815:
	.word	gMapHeader
.L799:
	ldr	r0, .L817
	ldr	r0, [r0]
	bl	copy_map_tileset2_to_vram
	b	.L808
.L818:
	.align	2, 0
.L817:
	.word	gMapHeader
.L800:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L792	@cond_branch
	ldr	r0, .L819
	ldr	r0, [r0]
	bl	apply_map_tileset1_tileset2_palette
	b	.L808
.L820:
	.align	2, 0
.L819:
	.word	gMapHeader
.L802:
	bl	DrawWholeMapView
	b	.L808
.L803:
	bl	InitTilesetAnimations
	b	.L808
.L804:
	ldr	r0, .L821
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L808	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x0
	mov	r1, #0x0
	bl	CreateWirelessStatusIndicatorSprite
	b	.L808
.L822:
	.align	2, 0
.L821:
	.word	gWirelessCommType
.L806:
	bl	map_post_load_hook_exec
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L792	@cond_branch
.L808:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L792
.L809:
	bl	SetFieldVBlankCallback
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
	b	.L812
.L792:
	mov	r0, #0x0
.L812:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe133:
	.size	 map_loading_iteration_2_link,.Lfe133-map_loading_iteration_2_link
	.align	2, 0
	.type	 do_load_map_stuff_loop,function
	.thumb_func
do_load_map_stuff_loop:
	push	{r4, lr}
	add	r4, r0, #0
.L824:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	load_map_stuff
	cmp	r0, #0
	beq	.L824	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe134:
	.size	 do_load_map_stuff_loop,.Lfe134-do_load_map_stuff_loop
	.align	2, 0
	.type	 sub_80867C8,function
	.thumb_func
sub_80867C8:
	push	{lr}
	bl	ClearMirageTowerPulseBlend
	bl	MoveSaveBlocks_ResetHeap
	pop	{r0}
	bx	r0
.Lfe135:
	.size	 sub_80867C8,.Lfe135-sub_80867C8
	.align	2, 0
	.type	 sub_80867D8,function
	.thumb_func
sub_80867D8:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	r1, #0x0
	bl	SetGpuReg
	bl	ScanlineEffect_Stop
	ldr	r2, .L835
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L835+0x4
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	ldr	r0, .L835+0x8
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r2, #0xc0
	lsl	r2, r2, #0x13
	mov	r3, #0xc0
	lsl	r3, r3, #0x9
	mov	r4, sp
	mov	r6, #0x0
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	ldr	r7, .L835+0xc
	mov	r0, #0x81
	lsl	r0, r0, #0x18
	mov	ip, r0
.L832:
	strh	r6, [r4]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	str	r7, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r2, r2, r5
	sub	r3, r3, r5
	cmp	r3, r5
	bhi	.L832	@cond_branch
	strh	r6, [r4]
	mov	r0, sp
	str	r0, [r1]
	str	r2, [r1, #0x4]
	lsr	r0, r3, #0x1
	mov	r2, ip
	orr	r0, r0, r2
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	mov	r0, #0x0
	mov	r1, #0x80
	bl	ResetOamRange
	bl	LoadOam
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L836:
	.align	2, 0
.L835:
	.word	0x5000002
	.word	0x40000d4
	.word	-0x7efffe01
	.word	-0x7efff800
.Lfe136:
	.size	 sub_80867D8,.Lfe136-sub_80867D8
	.align	2, 0
	.type	 sub_8086860,function
	.thumb_func
sub_8086860:
	push	{lr}
	bl	InitCurrentFlashLevelScanlineEffect
	bl	InitOverworldGraphicsRegisters
	bl	sub_8197200
	bl	mapdata_load_assets_to_gpu_and_full_redraw
	pop	{r0}
	bx	r0
.Lfe137:
	.size	 sub_8086860,.Lfe137-sub_8086860
	.align	2, 0
	.type	 InitOverworldGraphicsRegisters,function
	.thumb_func
InitOverworldGraphicsRegisters:
	push	{r4, lr}
	bl	clear_scheduled_bg_copies_to_vram
	bl	ResetTempTileDataBuffers
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L839
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L839+0x4
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0xff
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0xff
	bl	SetGpuReg
	ldr	r4, .L839+0x8
	mov	r0, #0x42
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x46
	add	r1, r4, #0
	bl	SetGpuReg
	ldr	r0, .L839+0xc
	ldrh	r1, [r0, #0x2]
	ldrh	r2, [r0, #0x4]
	orr	r1, r1, r2
	ldrh	r0, [r0, #0x6]
	orr	r1, r1, r0
	mov	r2, #0x82
	lsl	r2, r2, #0x5
	add	r0, r2, #0
	orr	r1, r1, r0
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L839+0x10
	mov	r0, #0x52
	bl	SetGpuReg
	bl	InitOverworldBgs
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x3
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	ldr	r1, .L839+0x14
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	bl	InitFieldMessageBox
	pop	{r4}
	pop	{r0}
	bx	r0
.L840:
	.align	2, 0
.L839:
	.word	0x1f1f
	.word	0x101
	.word	0xffff
	.word	gOverworldBackgroundLayerFlags
	.word	0x70d
	.word	0x7060
.Lfe138:
	.size	 InitOverworldGraphicsRegisters,.Lfe138-InitOverworldGraphicsRegisters
	.align	2, 0
	.type	 sub_8086988,function
	.thumb_func
sub_8086988:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ResetTasks
	bl	ResetSpriteData
	bl	ResetPaletteFade
	bl	ScanlineEffect_Clear
	bl	ResetAllPicSprites
	bl	ResetCameraUpdateInfo
	bl	InstallCameraPanAheadCallback
	cmp	r4, #0
	bne	.L842	@cond_branch
	mov	r0, #0x0
	bl	InitObjectEventPalettes
	b	.L843
.L842:
	mov	r0, #0x1
	bl	InitObjectEventPalettes
.L843:
	bl	FieldEffectActiveListClear
	bl	StartWeather
	bl	ResumePausedWeather
	cmp	r4, #0
	bne	.L844	@cond_branch
	bl	SetUpFieldTasks
.L844:
	bl	RunOnResumeMapScript
	bl	TryStartMirageTowerPulseBlendEffect
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe139:
	.size	 sub_8086988,.Lfe139-sub_8086988
	.align	2, 0
	.type	 sub_80869DC,function
	.thumb_func
sub_80869DC:
	push	{lr}
	ldr	r0, .L846
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L846+0x4
	strh	r1, [r0]
	bl	ResetObjectEvents
	mov	r0, #0x0
	mov	r1, #0x0
	bl	TrySpawnObjectEvents
	bl	TryRunOnWarpIntoMapScript
	pop	{r0}
	bx	r0
.L847:
	.align	2, 0
.L846:
	.word	gTotalCameraPixelOffsetX
	.word	gTotalCameraPixelOffsetY
.Lfe140:
	.size	 sub_80869DC,.Lfe140-sub_80869DC
	.align	2, 0
	.type	 mli4_mapscripts_and_other,function
	.thumb_func
mli4_mapscripts_and_other:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L849
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L849+0x4
	strh	r1, [r0]
	bl	ResetObjectEvents
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetCameraFocusCoords
	bl	GetInitialPlayerAvatarState
	add	r5, r0, #0
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	ldrb	r2, [r5, #0x1]
	ldr	r3, .L849+0x8
	ldr	r3, [r3]
	ldrb	r3, [r3, #0x8]
	bl	InitPlayerAvatar
	ldrb	r0, [r5]
	bl	SetPlayerAvatarTransitionFlags
	bl	ResetInitialPlayerAvatarState
	mov	r0, #0x0
	mov	r1, #0x0
	bl	TrySpawnObjectEvents
	bl	TryRunOnWarpIntoMapScript
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L850:
	.align	2, 0
.L849:
	.word	gTotalCameraPixelOffsetX
	.word	gTotalCameraPixelOffsetY
	.word	gSaveBlock2Ptr
.Lfe141:
	.size	 mli4_mapscripts_and_other,.Lfe141-mli4_mapscripts_and_other
	.align	2, 0
	.type	 sub_8086A68,function
	.thumb_func
sub_8086A68:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_808E16C
	bl	RotatingGate_InitPuzzleAndGraphics
	bl	RunOnReturnToFieldMapScript
	pop	{r0}
	bx	r0
.Lfe142:
	.size	 sub_8086A68,.Lfe142-sub_8086A68
	.align	2, 0
	.type	 sub_8086A80,function
	.thumb_func
sub_8086A80:
	push	{lr}
	ldr	r2, .L853
	ldr	r3, .L853+0x4
	ldrb	r1, [r3, #0x5]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	ldrb	r0, [r3, #0x4]
	bl	InitCameraUpdateCallback
	pop	{r0}
	bx	r0
.L854:
	.align	2, 0
.L853:
	.word	gObjectEvents
	.word	gPlayerAvatar
.Lfe143:
	.size	 sub_8086A80,.Lfe143-sub_8086A80
	.align	2, 0
	.type	 SetCameraToTrackGuestPlayer,function
	.thumb_func
SetCameraToTrackGuestPlayer:
	push	{lr}
	ldr	r0, .L856
	ldrb	r0, [r0]
	bl	GetSpriteForLinkedPlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	InitCameraUpdateCallback
	pop	{r0}
	bx	r0
.L857:
	.align	2, 0
.L856:
	.word	gLocalLinkPlayerId
.Lfe144:
	.size	 SetCameraToTrackGuestPlayer,.Lfe144-SetCameraToTrackGuestPlayer
	.align	2, 0
	.type	 SetCameraToTrackGuestPlayer_2,function
	.thumb_func
SetCameraToTrackGuestPlayer_2:
	push	{lr}
	ldr	r0, .L859
	ldrb	r0, [r0]
	bl	GetSpriteForLinkedPlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	InitCameraUpdateCallback
	pop	{r0}
	bx	r0
.L860:
	.align	2, 0
.L859:
	.word	gLocalLinkPlayerId
.Lfe145:
	.size	 SetCameraToTrackGuestPlayer_2,.Lfe145-SetCameraToTrackGuestPlayer_2
	.align	2, 0
	.type	 sub_8086AE4,function
	.thumb_func
sub_8086AE4:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetCameraFocusCoords
	mov	r2, sp
	ldr	r0, .L862
	ldrb	r1, [r0]
	ldrh	r0, [r2]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r4]
	bl	sub_8088B3C
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L863:
	.align	2, 0
.L862:
	.word	gLocalLinkPlayerId
.Lfe146:
	.size	 sub_8086AE4,.Lfe146-sub_8086AE4
	.align	2, 0
	.type	 sub_8086B14,function
	.thumb_func
sub_8086B14:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	GetCameraFocusCoords
	mov	r3, sp
	mov	r2, sp
	ldr	r0, .L870
	ldrb	r1, [r0]
	ldrh	r0, [r2]
	sub	r0, r0, r1
	strh	r0, [r3]
	mov	r6, #0x0
	ldr	r0, .L870+0x4
	mov	r8, r4
	ldrb	r0, [r0]
	cmp	r6, r0
	bcs	.L866	@cond_branch
	ldr	r7, .L870+0x8
.L868:
	lsl	r5, r6, #0x18
	lsr	r5, r5, #0x18
	mov	r0, sp
	ldrh	r1, [r0]
	add	r1, r6, r1
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r0, r8
	mov	r3, #0x0
	ldrsh	r2, [r0, r3]
	lsl	r4, r6, #0x3
	sub	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r7
	ldrb	r3, [r4, #0x13]
	add	r0, r5, #0
	bl	SpawnLinkPlayerObjectEvent
	ldrb	r1, [r4]
	add	r0, r5, #0
	bl	CreateLinkPlayerSprite
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L870+0x4
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L868	@cond_branch
.L866:
	bl	ClearAllPlayerKeys
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L871:
	.align	2, 0
.L870:
	.word	gLocalLinkPlayerId
	.word	gFieldLinkPlayerCount
	.word	gLinkPlayers
.Lfe147:
	.size	 sub_8086B14,.Lfe147-sub_8086B14
	.align	2, 0
	.type	 CreateLinkPlayerSprites,function
	.thumb_func
CreateLinkPlayerSprites:
	push	{r4, r5, lr}
	mov	r4, #0x0
	ldr	r0, .L878
	ldrb	r0, [r0]
	cmp	r4, r0
	bcs	.L874	@cond_branch
	ldr	r5, .L878+0x4
.L876:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r4, #0x3
	sub	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r1, [r1]
	bl	CreateLinkPlayerSprite
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L878
	ldrb	r0, [r0]
	cmp	r4, r0
	bcc	.L876	@cond_branch
.L874:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L879:
	.align	2, 0
.L878:
	.word	gFieldLinkPlayerCount
	.word	gLinkPlayers
.Lfe148:
	.size	 CreateLinkPlayerSprites,.Lfe148-CreateLinkPlayerSprites
	.align	2, 0
	.type	 CB1_UpdateLinkState,function
	.thumb_func
CB1_UpdateLinkState:
	push	{r4, lr}
	ldr	r0, .L883
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L882	@cond_branch
	bl	IsRfuRecvQueueEmpty
	cmp	r0, #0
	beq	.L882	@cond_branch
	bl	IsSendingKeysToLink
	cmp	r0, #0
	bne	.L881	@cond_branch
.L882:
	ldr	r0, .L883+0x4
	ldrb	r4, [r0]
	ldr	r0, .L883+0x8
	add	r1, r4, #0
	bl	UpdateAllLinkPlayers
	ldr	r0, .L883+0xc
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	_call_via_r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	UpdateHeldKeyCode
	bl	ClearAllPlayerKeys
.L881:
	pop	{r4}
	pop	{r0}
	bx	r0
.L884:
	.align	2, 0
.L883:
	.word	gWirelessCommType
	.word	gLocalLinkPlayerId
	.word	gLinkPartnersHeldKeys
	.word	sPlayerKeyInterceptCallback
.Lfe149:
	.size	 CB1_UpdateLinkState,.Lfe149-CB1_UpdateLinkState
	.align	2, 0
	.globl	ResetAllMultiplayerState
	.type	 ResetAllMultiplayerState,function
	.thumb_func
ResetAllMultiplayerState:
	push	{lr}
	bl	ResetAllTradingStates
	ldr	r0, .L886
	bl	SetKeyInterceptCallback
	pop	{r0}
	bx	r0
.L887:
	.align	2, 0
.L886:
	.word	KeyInterCB_SelfIdle
.Lfe150:
	.size	 ResetAllMultiplayerState,.Lfe150-ResetAllMultiplayerState
	.align	2, 0
	.type	 ClearAllPlayerKeys,function
	.thumb_func
ClearAllPlayerKeys:
	push	{lr}
	ldr	r0, .L889
	bl	ResetPlayerHeldKeys
	pop	{r0}
	bx	r0
.L890:
	.align	2, 0
.L889:
	.word	gLinkPartnersHeldKeys
.Lfe151:
	.size	 ClearAllPlayerKeys,.Lfe151-ClearAllPlayerKeys
	.align	2, 0
	.type	 SetKeyInterceptCallback,function
	.thumb_func
SetKeyInterceptCallback:
	ldr	r2, .L892
	mov	r1, #0x0
	strb	r1, [r2]
	ldr	r1, .L892+0x4
	str	r0, [r1]
	bx	lr
.L893:
	.align	2, 0
.L892:
	.word	sRfuKeepAliveTimer
	.word	sPlayerKeyInterceptCallback
.Lfe152:
	.size	 SetKeyInterceptCallback,.Lfe152-SetKeyInterceptCallback
	.align	2, 0
	.type	 CheckRfuKeepAliveTimer,function
	.thumb_func
CheckRfuKeepAliveTimer:
	push	{lr}
	ldr	r0, .L896
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L895	@cond_branch
	ldr	r1, .L896+0x4
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3c
	bls	.L895	@cond_branch
	bl	LinkRfu_FatalError
.L895:
	pop	{r0}
	bx	r0
.L897:
	.align	2, 0
.L896:
	.word	gWirelessCommType
	.word	sRfuKeepAliveTimer
.Lfe153:
	.size	 CheckRfuKeepAliveTimer,.Lfe153-CheckRfuKeepAliveTimer
	.align	2, 0
	.type	 ResetAllTradingStates,function
	.thumb_func
ResetAllTradingStates:
	push	{lr}
	ldr	r1, .L904
	mov	r2, #0x80
	add	r0, r1, #0x3
.L902:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L902	@cond_branch
	pop	{r0}
	bx	r0
.L905:
	.align	2, 0
.L904:
	.word	sPlayerTradingStates
.Lfe154:
	.size	 ResetAllTradingStates,.Lfe154-ResetAllTradingStates
	.align	2, 0
	.type	 AreAllPlayersInTradingState,function
	.thumb_func
AreAllPlayersInTradingState:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r0, .L914
	ldrb	r2, [r0]
	mov	r1, #0x0
	cmp	r1, r2
	bge	.L908	@cond_branch
	ldr	r4, .L914+0x4
.L910:
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r3
	beq	.L909	@cond_branch
	mov	r0, #0x0
	b	.L913
.L915:
	.align	2, 0
.L914:
	.word	gFieldLinkPlayerCount
	.word	sPlayerTradingStates
.L909:
	add	r1, r1, #0x1
	cmp	r1, r2
	blt	.L910	@cond_branch
.L908:
	mov	r0, #0x1
.L913:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe155:
	.size	 AreAllPlayersInTradingState,.Lfe155-AreAllPlayersInTradingState
	.align	2, 0
	.type	 IsAnyPlayerInTradingState,function
	.thumb_func
IsAnyPlayerInTradingState:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	ldr	r0, .L924
	ldrb	r2, [r0]
	mov	r1, #0x0
	cmp	r1, r2
	bge	.L918	@cond_branch
	ldr	r4, .L924+0x4
.L920:
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L919	@cond_branch
	mov	r0, #0x1
	b	.L923
.L925:
	.align	2, 0
.L924:
	.word	gFieldLinkPlayerCount
	.word	sPlayerTradingStates
.L919:
	add	r1, r1, #0x1
	cmp	r1, r2
	blt	.L920	@cond_branch
.L918:
	mov	r0, #0x0
.L923:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe156:
	.size	 IsAnyPlayerInTradingState,.Lfe156-IsAnyPlayerInTradingState
	.align	2, 0
	.type	 HandleLinkPlayerKeyInput,function
	.thumb_func
HandleLinkPlayerKeyInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	add	r6, r2, #0
	mov	r9, r3
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r8, r1
	ldr	r0, .L960
	add	r5, r7, r0
	ldrb	r0, [r5]
	cmp	r0, #0x80
	beq	.LCB7133
	b	.L927	@long jump
.LCB7133:
	add	r0, r6, #0
	bl	TryGetTileEventScript
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L928	@cond_branch
	bl	GetDirectionForEventScript
	mov	r1, r9
	strh	r0, [r1]
	mov	r0, #0x81
	strb	r0, [r5]
	ldrb	r0, [r6, #0x1]
	cmp	r0, #0
	bne	.LCB7151
	b	.L926	@long jump
.LCB7151:
	ldr	r0, .L960+0x4
	bl	SetKeyInterceptCallback
	add	r0, r4, #0
	bl	sub_8087530
	b	.L926
.L961:
	.align	2, 0
.L960:
	.word	sPlayerTradingStates
	.word	KeyInterCB_DeferToEventScript
.L928:
	mov	r0, #0x83
	bl	IsAnyPlayerInTradingState
	cmp	r0, #0x1
	bne	.L930	@cond_branch
	mov	r0, #0x81
	strb	r0, [r5]
	ldrb	r0, [r6, #0x1]
	cmp	r0, #0
	bne	.LCB7180
	b	.L926	@long jump
.LCB7180:
	ldr	r0, .L962
	bl	SetKeyInterceptCallback
	bl	sub_8087584
	b	.L926
.L963:
	.align	2, 0
.L962:
	.word	KeyInterCB_DeferToEventScript
.L930:
	mov	r0, r8
	sub	r0, r0, #0x12
	cmp	r0, #0xa
	bls	.LCB7199
	b	.L927	@long jump
.LCB7199:
	lsl	r0, r0, #0x2
	ldr	r1, .L964
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L965:
	.align	2, 0
.L964:
	.word	.L948
	.align	2, 0
	.align	2, 0
.L948:
	.word	.L936
	.word	.L927
	.word	.L927
	.word	.L927
	.word	.L927
	.word	.L927
	.word	.L933
	.word	.L939
	.word	.L927
	.word	.L942
	.word	.L945
.L933:
	add	r0, r6, #0
	bl	sub_8087340_2
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldr	r0, .L966
	add	r0, r7, r0
	mov	r1, #0x81
	strb	r1, [r0]
	ldrb	r0, [r6, #0x1]
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldr	r0, .L966+0x4
	bl	SetKeyInterceptCallback
	bl	InitLinkRoomStartMenuScript
	b	.L927
.L967:
	.align	2, 0
.L966:
	.word	sPlayerTradingStates
	.word	KeyInterCB_DeferToEventScript
.L936:
	add	r0, r6, #0
	bl	PlayerIsAtSouthExit
	cmp	r0, #0x1
	bne	.L927	@cond_branch
	ldr	r0, .L968
	add	r0, r7, r0
	mov	r1, #0x81
	strb	r1, [r0]
	ldrb	r0, [r6, #0x1]
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldr	r0, .L968+0x4
	bl	SetKeyInterceptCallback
	bl	CreateConfirmLeaveTradeRoomPrompt
	b	.L927
.L969:
	.align	2, 0
.L968:
	.word	sPlayerTradingStates
	.word	KeyInterCB_DeferToEventScript
.L939:
	add	r0, r6, #0
	bl	TryInteractWithPlayer
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L927	@cond_branch
	ldr	r0, .L970
	add	r0, r7, r0
	mov	r1, #0x81
	strb	r1, [r0]
	ldrb	r0, [r6, #0x1]
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldr	r0, .L970+0x4
	bl	SetKeyInterceptCallback
	add	r0, r4, #0
	bl	InitMenuBasedScript
	b	.L927
.L971:
	.align	2, 0
.L970:
	.word	sPlayerTradingStates
	.word	KeyInterCB_DeferToEventScript
.L942:
	add	r0, r6, #0
	bl	sub_8087340
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldr	r0, .L972
	add	r0, r7, r0
	mov	r1, #0x81
	strb	r1, [r0]
	ldrb	r0, [r6, #0x1]
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldr	r0, .L972+0x4
	bl	SetKeyInterceptCallback
	bl	sub_8087510
	b	.L927
.L973:
	.align	2, 0
.L972:
	.word	sPlayerTradingStates
	.word	KeyInterCB_DeferToRecvQueue
.L945:
	add	r0, r6, #0
	bl	sub_8087340
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldr	r0, .L974
	add	r0, r7, r0
	mov	r1, #0x81
	strb	r1, [r0]
	ldrb	r0, [r6, #0x1]
	cmp	r0, #0
	beq	.L927	@cond_branch
	ldr	r0, .L974+0x4
	bl	SetKeyInterceptCallback
	bl	sub_8087510
.L927:
	mov	r0, r8
	cmp	r0, #0x17
	beq	.L951	@cond_branch
	cmp	r0, #0x17
	bgt	.L959	@cond_branch
	cmp	r0, #0x16
	beq	.L952	@cond_branch
	b	.L926
.L975:
	.align	2, 0
.L974:
	.word	sPlayerTradingStates
	.word	KeyInterCB_DeferToSendQueue
.L959:
	mov	r1, r8
	cmp	r1, #0x1a
	beq	.L953	@cond_branch
	cmp	r1, #0x1d
	beq	.L955	@cond_branch
	b	.L926
.L951:
	ldr	r0, .L976
	add	r0, r7, r0
	mov	r1, #0x83
	strb	r1, [r0]
	b	.L926
.L977:
	.align	2, 0
.L976:
	.word	sPlayerTradingStates
.L952:
	ldr	r0, .L978
	add	r0, r7, r0
	mov	r1, #0x82
	strb	r1, [r0]
	b	.L926
.L979:
	.align	2, 0
.L978:
	.word	sPlayerTradingStates
.L953:
	ldr	r0, .L980
	add	r0, r7, r0
	mov	r1, #0x80
	strb	r1, [r0]
	ldrb	r0, [r6, #0x1]
	cmp	r0, #0
	beq	.L926	@cond_branch
	ldr	r0, .L980+0x4
	bl	SetKeyInterceptCallback
	b	.L926
.L981:
	.align	2, 0
.L980:
	.word	sPlayerTradingStates
	.word	KeyInterCB_SelfIdle
.L955:
	ldr	r0, .L982
	add	r1, r7, r0
	ldrb	r0, [r1]
	cmp	r0, #0x82
	bne	.L926	@cond_branch
	mov	r0, #0x81
	strb	r0, [r1]
.L926:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L983:
	.align	2, 0
.L982:
	.word	sPlayerTradingStates
.Lfe157:
	.size	 HandleLinkPlayerKeyInput,.Lfe157-HandleLinkPlayerKeyInput
	.align	2, 0
	.type	 UpdateAllLinkPlayers,function
	.thumb_func
UpdateAllLinkPlayers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r8, r1
	mov	r6, #0x0
	add	r5, sp, #0x10
	mov	r9, r5
	add	r7, r0, #0
.L988:
	ldrb	r4, [r7]
	mov	r0, #0x0
	strh	r0, [r5]
	add	r0, r6, #0
	mov	r1, r8
	mov	r2, sp
	bl	LoadTradeRoomPlayer
	add	r0, r6, #0
	add	r1, r4, #0
	mov	r2, sp
	add	r3, r5, #0
	bl	HandleLinkPlayerKeyInput
	ldr	r0, .L991
	add	r0, r6, r0
	ldrb	r0, [r0]
	cmp	r0, #0x80
	bne	.L989	@cond_branch
	add	r0, r4, #0
	bl	GetDirectionForDpadKey
	mov	r1, r9
	strh	r0, [r1]
.L989:
	lsl	r0, r6, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r5]
	bl	SetPlayerFacingDirection
	add	r7, r7, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L988	@cond_branch
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L992:
	.align	2, 0
.L991:
	.word	sPlayerTradingStates
.Lfe158:
	.size	 UpdateAllLinkPlayers,.Lfe158-UpdateAllLinkPlayers
	.align	2, 0
	.type	 UpdateHeldKeyCode,function
	.thumb_func
UpdateHeldKeyCode:
	push	{r4, lr}
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r1, .L1007
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	cmp	r0, #0xc
	bhi	.L994	@cond_branch
	ldr	r0, .L1007+0x4
	strh	r4, [r0]
	b	.L995
.L1008:
	.align	2, 0
.L1007:
	.word	-0x110000
	.word	gHeldKeyCodeToSend
.L994:
	ldr	r1, .L1009
	mov	r0, #0x11
	strh	r0, [r1]
.L995:
	ldr	r0, .L1009+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L996	@cond_branch
	bl	GetLinkSendQueueLength
	cmp	r0, #0x1
	bls	.L996	@cond_branch
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	bne	.L996	@cond_branch
	bl	IsSendingKeysToLink
	cmp	r0, #0x1
	bne	.L996	@cond_branch
	cmp	r4, #0x11
	blt	.L996	@cond_branch
	cmp	r4, #0x15
	ble	.L1004	@cond_branch
	cmp	r4, #0x19
	bgt	.L996	@cond_branch
	cmp	r4, #0x18
	blt	.L996	@cond_branch
.L1004:
	ldr	r1, .L1009
	mov	r0, #0x0
	strh	r0, [r1]
.L996:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1010:
	.align	2, 0
.L1009:
	.word	gHeldKeyCodeToSend
	.word	gWirelessCommType
.Lfe159:
	.size	 UpdateHeldKeyCode,.Lfe159-UpdateHeldKeyCode
	.align	2, 0
	.type	 KeyInterCB_ReadButtons,function
	.thumb_func
KeyInterCB_ReadButtons:
	push	{lr}
	ldr	r2, .L1025
	ldrh	r1, [r2, #0x2c]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1012	@cond_branch
	mov	r0, #0x13
	b	.L1024
.L1026:
	.align	2, 0
.L1025:
	.word	gMain
.L1012:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1014	@cond_branch
	mov	r0, #0x12
	b	.L1024
.L1014:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1016	@cond_branch
	mov	r0, #0x14
	b	.L1024
.L1016:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1018	@cond_branch
	mov	r0, #0x15
	b	.L1024
.L1018:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1020	@cond_branch
	mov	r0, #0x18
	b	.L1024
.L1020:
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1022	@cond_branch
	mov	r0, #0x11
	b	.L1024
.L1022:
	mov	r0, #0x19
.L1024:
	pop	{r1}
	bx	r1
.Lfe160:
	.size	 KeyInterCB_ReadButtons,.Lfe160-KeyInterCB_ReadButtons
	.align	2, 0
	.type	 GetDirectionForDpadKey,function
	.thumb_func
GetDirectionForDpadKey:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r0, #0
	cmp	r0, #0x13
	beq	.L1031	@cond_branch
	cmp	r0, #0x13
	bgt	.L1035	@cond_branch
	cmp	r0, #0x12
	beq	.L1032	@cond_branch
	b	.L1033
.L1035:
	cmp	r1, #0x14
	beq	.L1030	@cond_branch
	cmp	r1, #0x15
	bne	.L1033	@cond_branch
	mov	r0, #0x4
	b	.L1036
.L1030:
	mov	r0, #0x3
	b	.L1036
.L1031:
	mov	r0, #0x1
	b	.L1036
.L1032:
	mov	r0, #0x2
	b	.L1036
.L1033:
	mov	r0, #0x0
.L1036:
	pop	{r1}
	bx	r1
.Lfe161:
	.size	 GetDirectionForDpadKey,.Lfe161-GetDirectionForDpadKey
	.align	2, 0
	.type	 ResetPlayerHeldKeys,function
	.thumb_func
ResetPlayerHeldKeys:
	push	{lr}
	mov	r2, #0x11
	add	r1, r0, #0x6
.L1041:
	strh	r2, [r1]
	sub	r1, r1, #0x2
	cmp	r1, r0
	bge	.L1041	@cond_branch
	pop	{r0}
	bx	r0
.Lfe162:
	.size	 ResetPlayerHeldKeys,.Lfe162-ResetPlayerHeldKeys
	.align	2, 0
	.type	 KeyInterCB_SelfIdle,function
	.thumb_func
KeyInterCB_SelfIdle:
	push	{r4, lr}
	add	r4, r0, #0
	bl	ScriptContext2_IsEnabled
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L1044	@cond_branch
	mov	r0, #0x11
	b	.L1047
.L1044:
	bl	GetLinkRecvQueueLength
	cmp	r0, #0x4
	bls	.L1045	@cond_branch
	mov	r0, #0x1b
	b	.L1047
.L1045:
	bl	GetLinkSendQueueLength
	cmp	r0, #0x4
	bls	.L1046	@cond_branch
	mov	r0, #0x1c
	b	.L1047
.L1046:
	add	r0, r4, #0
	bl	KeyInterCB_ReadButtons
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L1047:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe163:
	.size	 KeyInterCB_SelfIdle,.Lfe163-KeyInterCB_SelfIdle
	.align	2, 0
	.type	 sub_80870EC,function
	.thumb_func
sub_80870EC:
	push	{lr}
	bl	CheckRfuKeepAliveTimer
	mov	r0, #0x11
	pop	{r1}
	bx	r1
.Lfe164:
	.size	 sub_80870EC,.Lfe164-sub_80870EC
	.align	2, 0
	.type	 KeyInterCB_DeferToEventScript,function
	.thumb_func
KeyInterCB_DeferToEventScript:
	push	{r4, lr}
	bl	ScriptContext2_IsEnabled
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x11
	cmp	r0, #0x1
	beq	.L1051	@cond_branch
	mov	r4, #0x1a
	ldr	r0, .L1052
	bl	SetKeyInterceptCallback
.L1051:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1053:
	.align	2, 0
.L1052:
	.word	sub_80870EC
.Lfe165:
	.size	 KeyInterCB_DeferToEventScript,.Lfe165-KeyInterCB_DeferToEventScript
	.align	2, 0
	.type	 KeyInterCB_DeferToRecvQueue,function
	.thumb_func
KeyInterCB_DeferToRecvQueue:
	push	{r4, lr}
	bl	GetLinkRecvQueueLength
	mov	r4, #0x11
	cmp	r0, #0x2
	bhi	.L1056	@cond_branch
	mov	r4, #0x1a
	bl	ScriptContext2_Disable
	ldr	r0, .L1057
	bl	SetKeyInterceptCallback
.L1056:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1058:
	.align	2, 0
.L1057:
	.word	sub_80870EC
.Lfe166:
	.size	 KeyInterCB_DeferToRecvQueue,.Lfe166-KeyInterCB_DeferToRecvQueue
	.align	2, 0
	.type	 KeyInterCB_DeferToSendQueue,function
	.thumb_func
KeyInterCB_DeferToSendQueue:
	push	{r4, lr}
	bl	GetLinkSendQueueLength
	mov	r4, #0x11
	cmp	r0, #0x2
	bhi	.L1061	@cond_branch
	mov	r4, #0x1a
	bl	ScriptContext2_Disable
	ldr	r0, .L1062
	bl	SetKeyInterceptCallback
.L1061:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L1063:
	.align	2, 0
.L1062:
	.word	sub_80870EC
.Lfe167:
	.size	 KeyInterCB_DeferToSendQueue,.Lfe167-KeyInterCB_DeferToSendQueue
	.align	2, 0
	.type	 KeyInterCB_DoNothingAndKeepAlive,function
	.thumb_func
KeyInterCB_DoNothingAndKeepAlive:
	push	{lr}
	bl	CheckRfuKeepAliveTimer
	mov	r0, #0x11
	pop	{r1}
	bx	r1
.Lfe168:
	.size	 KeyInterCB_DoNothingAndKeepAlive,.Lfe168-KeyInterCB_DoNothingAndKeepAlive
	.align	2, 0
	.type	 sub_8087170,function
	.thumb_func
sub_8087170:
	push	{lr}
	ldr	r1, .L1072
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x82
	bne	.L1066	@cond_branch
	ldr	r0, .L1072+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1071	@cond_branch
	ldr	r0, .L1072+0x8
	bl	SetKeyInterceptCallback
	mov	r0, #0x1d
	b	.L1070
.L1073:
	.align	2, 0
.L1072:
	.word	sPlayerTradingStates
	.word	gMain
	.word	KeyInterCB_DoNothingAndKeepAlive
.L1066:
	bl	CheckRfuKeepAliveTimer
.L1071:
	mov	r0, #0x11
.L1070:
	pop	{r1}
	bx	r1
.Lfe169:
	.size	 sub_8087170,.Lfe169-sub_8087170
	.align	2, 0
	.type	 sub_80871AC,function
	.thumb_func
sub_80871AC:
	push	{lr}
	ldr	r0, .L1075
	bl	SetKeyInterceptCallback
	mov	r0, #0x16
	pop	{r1}
	bx	r1
.L1076:
	.align	2, 0
.L1075:
	.word	sub_8087170
.Lfe170:
	.size	 sub_80871AC,.Lfe170-sub_80871AC
	.align	2, 0
	.type	 KeyInterCB_SendNothing,function
	.thumb_func
KeyInterCB_SendNothing:
	mov	r0, #0x11
	bx	lr
.Lfe171:
	.size	 KeyInterCB_SendNothing,.Lfe171-KeyInterCB_SendNothing
	.align	2, 0
	.type	 KeyInterCB_WaitForPlayersToExit,function
	.thumb_func
KeyInterCB_WaitForPlayersToExit:
	push	{lr}
	ldr	r1, .L1081
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x83
	beq	.L1079	@cond_branch
	bl	CheckRfuKeepAliveTimer
.L1079:
	mov	r0, #0x83
	bl	AreAllPlayersInTradingState
	cmp	r0, #0x1
	bne	.L1080	@cond_branch
	ldr	r0, .L1081+0x4
	bl	ScriptContext1_SetupScript
	ldr	r0, .L1081+0x8
	bl	SetKeyInterceptCallback
.L1080:
	mov	r0, #0x11
	pop	{r1}
	bx	r1
.L1082:
	.align	2, 0
.L1081:
	.word	sPlayerTradingStates
	.word	EventScript_DoLinkRoomExit
	.word	KeyInterCB_SendNothing
.Lfe172:
	.size	 KeyInterCB_WaitForPlayersToExit,.Lfe172-KeyInterCB_WaitForPlayersToExit
	.align	2, 0
	.type	 KeyInterCB_SendExitRoomKey,function
	.thumb_func
KeyInterCB_SendExitRoomKey:
	push	{lr}
	ldr	r0, .L1084
	bl	SetKeyInterceptCallback
	mov	r0, #0x17
	pop	{r1}
	bx	r1
.L1085:
	.align	2, 0
.L1084:
	.word	KeyInterCB_WaitForPlayersToExit
.Lfe173:
	.size	 KeyInterCB_SendExitRoomKey,.Lfe173-KeyInterCB_SendExitRoomKey
	.align	2, 0
	.type	 KeyInterCB_SendNothing_2,function
	.thumb_func
KeyInterCB_SendNothing_2:
	mov	r0, #0x11
	bx	lr
.Lfe174:
	.size	 KeyInterCB_SendNothing_2,.Lfe174-KeyInterCB_SendNothing_2
	.align	2, 0
	.globl	sub_8087214
	.type	 sub_8087214,function
	.thumb_func
sub_8087214:
	push	{lr}
	mov	r0, #0x83
	bl	IsAnyPlayerInTradingState
	cmp	r0, #0x1
	beq	.L1093	@cond_branch
	ldr	r0, .L1095
	ldr	r2, [r0]
	ldr	r1, .L1095+0x4
	add	r3, r0, #0
	cmp	r2, r1
	bne	.L1089	@cond_branch
	ldr	r1, .L1095+0x8
	ldr	r0, .L1095+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x82
	bne	.L1094	@cond_branch
.L1089:
	ldr	r1, [r3]
	ldr	r0, .L1095+0x10
	cmp	r1, r0
	bne	.L1090	@cond_branch
	ldr	r1, .L1095+0x8
	ldr	r0, .L1095+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x81
	bne	.L1090	@cond_branch
.L1093:
	mov	r0, #0x2
	b	.L1092
.L1096:
	.align	2, 0
.L1095:
	.word	sPlayerKeyInterceptCallback
	.word	sub_8087170
	.word	sPlayerTradingStates
	.word	gLocalLinkPlayerId
	.word	KeyInterCB_DoNothingAndKeepAlive
.L1090:
	mov	r0, #0x82
	bl	AreAllPlayersInTradingState
	cmp	r0, #0
	bne	.L1091	@cond_branch
.L1094:
	mov	r0, #0x0
	b	.L1092
.L1091:
	mov	r0, #0x1
.L1092:
	pop	{r1}
	bx	r1
.Lfe175:
	.size	 sub_8087214,.Lfe175-sub_8087214
	.align	2, 0
	.globl	sub_808727C
	.type	 sub_808727C,function
	.thumb_func
sub_808727C:
	push	{lr}
	mov	r0, #0x83
	bl	IsAnyPlayerInTradingState
	pop	{r1}
	bx	r1
.Lfe176:
	.size	 sub_808727C,.Lfe176-sub_808727C
	.align	2, 0
	.globl	sub_8087288
	.type	 sub_8087288,function
	.thumb_func
sub_8087288:
	push	{lr}
	ldr	r0, .L1099
	bl	SetKeyInterceptCallback
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L1100:
	.align	2, 0
.L1099:
	.word	sub_80871AC
.Lfe177:
	.size	 sub_8087288,.Lfe177-sub_8087288
	.align	2, 0
	.globl	sub_808729C
	.type	 sub_808729C,function
	.thumb_func
sub_808729C:
	push	{lr}
	ldr	r0, .L1102
	bl	SetKeyInterceptCallback
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L1103:
	.align	2, 0
.L1102:
	.word	KeyInterCB_DeferToEventScript
.Lfe178:
	.size	 sub_808729C,.Lfe178-sub_808729C
	.align	2, 0
	.globl	QueueExitLinkRoomKey
	.type	 QueueExitLinkRoomKey,function
	.thumb_func
QueueExitLinkRoomKey:
	push	{lr}
	ldr	r0, .L1105
	bl	SetKeyInterceptCallback
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L1106:
	.align	2, 0
.L1105:
	.word	KeyInterCB_SendExitRoomKey
.Lfe179:
	.size	 QueueExitLinkRoomKey,.Lfe179-QueueExitLinkRoomKey
	.align	2, 0
	.globl	sub_80872C4
	.type	 sub_80872C4,function
	.thumb_func
sub_80872C4:
	push	{lr}
	ldr	r0, .L1108
	bl	SetKeyInterceptCallback
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.L1109:
	.align	2, 0
.L1108:
	.word	KeyInterCB_SendNothing_2
.Lfe180:
	.size	 sub_80872C4,.Lfe180-sub_80872C4
	.align	2, 0
	.type	 LoadTradeRoomPlayer,function
	.thumb_func
LoadTradeRoomPlayer:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r6, r2, #0
	strb	r4, [r6]
	mov	r0, #0x0
	cmp	r4, r1
	bne	.L1111	@cond_branch
	mov	r0, #0x1
.L1111:
	strb	r0, [r6, #0x1]
	ldr	r1, .L1112
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x3]
	strb	r0, [r6, #0x2]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetLinkPlayerFacingDirection
	strb	r0, [r6, #0x3]
	mov	r5, sp
	add	r5, r5, #0x2
	add	r0, r4, #0
	mov	r1, sp
	add	r2, r5, #0
	bl	GetLinkPlayerCoords
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r6, #0x4]
	ldrh	r0, [r5]
	strh	r0, [r6, #0x6]
	add	r0, r4, #0
	bl	GetLinkPlayerElevation
	strb	r0, [r6, #0x8]
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r5, r2]
	bl	MapGridGetMetatileBehaviorAt
	strh	r0, [r6, #0xc]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1113:
	.align	2, 0
.L1112:
	.word	gLinkPlayerObjectEvents
.Lfe181:
	.size	 LoadTradeRoomPlayer,.Lfe181-LoadTradeRoomPlayer
	.align	2, 0
	.type	 sub_8087340,function
	.thumb_func
sub_8087340:
	push	{lr}
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x2
	beq	.L1116	@cond_branch
	cmp	r0, #0
	bne	.L1115	@cond_branch
.L1116:
	mov	r0, #0x1
	b	.L1118
.L1115:
	mov	r0, #0x0
.L1118:
	pop	{r1}
	bx	r1
.Lfe182:
	.size	 sub_8087340,.Lfe182-sub_8087340
	.align	2, 0
	.type	 sub_8087340_2,function
	.thumb_func
sub_8087340_2:
	push	{lr}
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0x2
	beq	.L1121	@cond_branch
	cmp	r0, #0
	bne	.L1120	@cond_branch
.L1121:
	mov	r0, #0x1
	b	.L1123
.L1120:
	mov	r0, #0x0
.L1123:
	pop	{r1}
	bx	r1
.Lfe183:
	.size	 sub_8087340_2,.Lfe183-sub_8087340_2
	.align	2, 0
	.type	 TryGetTileEventScript,function
	.thumb_func
TryGetTileEventScript:
	push	{lr}
	add	r1, r0, #0
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0x2
	bne	.L1125	@cond_branch
	add	r0, r1, #0x4
	bl	GetCoordEventScriptAtMapPosition
	b	.L1126
.L1125:
	mov	r0, #0x0
.L1126:
	pop	{r1}
	bx	r1
.Lfe184:
	.size	 TryGetTileEventScript,.Lfe184-TryGetTileEventScript
	.align	2, 0
	.type	 PlayerIsAtSouthExit,function
	.thumb_func
PlayerIsAtSouthExit:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0x2
	beq	.L1128	@cond_branch
	cmp	r0, #0
	bne	.L1132	@cond_branch
.L1128:
	ldrb	r0, [r4, #0xc]
	bl	MetatileBehavior_IsSouthArrowWarp
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1132	@cond_branch
	ldrb	r0, [r4, #0x3]
	cmp	r0, #0x1
	bne	.L1132	@cond_branch
	mov	r0, #0x1
	b	.L1134
.L1132:
	mov	r0, #0x0
.L1134:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe185:
	.size	 PlayerIsAtSouthExit,.Lfe185-PlayerIsAtSouthExit
	.align	2, 0
	.type	 TryInteractWithPlayer,function
	.thumb_func
TryInteractWithPlayer:
	push	{r4, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	ldrb	r0, [r4, #0x2]
	cmp	r0, #0
	beq	.L1136	@cond_branch
	cmp	r0, #0x2
	beq	.L1136	@cond_branch
	mov	r0, #0x0
	b	.L1144
.L1136:
	ldr	r0, [r4, #0x4]		@ created by thumb_load_double_from_address
	ldr	r1, [r4, #0x8]		@ created by thumb_load_double_from_address
	str	r0, [sp]
	str	r1, [sp, #0x4]
	ldr	r3, .L1146
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r0, [r0]
	mov	r1, sp
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L1146+0x4
	ldr	r2, [sp]
	and	r2, r2, r1
	orr	r2, r2, r0
	str	r2, [sp]
	asr	r1, r2, #0x10
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x3
	add	r3, r3, #0x4
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	ldr	r1, .L1146+0x8
	and	r1, r1, r2
	orr	r1, r1, r0
	str	r1, [sp]
	ldr	r2, .L1146+0xc
	ldr	r0, [sp, #0x4]
	and	r0, r0, r2
	str	r0, [sp, #0x4]
	mov	r0, sp
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	asr	r1, r1, #0x10
	bl	GetLinkPlayerIdAt
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r2, r1, #0
	cmp	r1, #0x4
	beq	.L1137	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	beq	.L1145	@cond_branch
	ldr	r0, .L1146+0x10
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, #0x80
	beq	.L1140	@cond_branch
.L1145:
	ldr	r0, .L1146+0x14
	b	.L1144
.L1147:
	.align	2, 0
.L1146:
	.word	gDirectionToVectors
	.word	-0x10000
	.word	0xffff
	.word	-0x100
	.word	sPlayerTradingStates
	.word	CableClub_EventScript_TooBusyToNotice
.L1140:
	add	r0, r2, #0
	bl	GetLinkTrainerCardColor
	cmp	r0, #0
	bne	.L1142	@cond_branch
	ldr	r0, .L1148
	b	.L1144
.L1149:
	.align	2, 0
.L1148:
	.word	CableClub_EventScript_ReadTrainerCard
.L1142:
	ldr	r0, .L1150
	b	.L1144
.L1151:
	.align	2, 0
.L1150:
	.word	CableClub_EventScript_ReadTrainerCardColored
.L1137:
	ldrb	r1, [r4, #0xc]
	ldrb	r2, [r4, #0x3]
	mov	r0, sp
	bl	GetInteractedLinkPlayerScript
.L1144:
	add	sp, sp, #0x8
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe186:
	.size	 TryInteractWithPlayer,.Lfe186-TryInteractWithPlayer
	.align	2, 0
	.type	 GetDirectionForEventScript,function
	.thumb_func
GetDirectionForEventScript:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L1179
	cmp	r1, r0
	beq	.L1178	@cond_branch
	ldr	r0, .L1179+0x4
	cmp	r1, r0
	beq	.L1175	@cond_branch
	ldr	r0, .L1179+0x8
	cmp	r1, r0
	beq	.L1178	@cond_branch
	ldr	r0, .L1179+0xc
	cmp	r1, r0
	beq	.L1175	@cond_branch
	ldr	r0, .L1179+0x10
	cmp	r1, r0
	beq	.L1178	@cond_branch
	ldr	r0, .L1179+0x14
	cmp	r1, r0
	beq	.L1175	@cond_branch
	ldr	r0, .L1179+0x18
	cmp	r1, r0
	beq	.L1178	@cond_branch
	ldr	r0, .L1179+0x1c
	cmp	r1, r0
	beq	.L1175	@cond_branch
	ldr	r0, .L1179+0x20
	cmp	r1, r0
	beq	.L1178	@cond_branch
	ldr	r0, .L1179+0x24
	cmp	r1, r0
	beq	.L1175	@cond_branch
	ldr	r0, .L1179+0x28
	cmp	r1, r0
	bne	.L1173	@cond_branch
.L1178:
	mov	r0, #0xa
	b	.L1177
.L1180:
	.align	2, 0
.L1179:
	.word	EventScript_BattleColosseum_4P_PlayerSpot0
	.word	EventScript_BattleColosseum_4P_PlayerSpot1
	.word	EventScript_BattleColosseum_4P_PlayerSpot2
	.word	EventScript_BattleColosseum_4P_PlayerSpot3
	.word	EventScript_RecordCenter_Spot0
	.word	EventScript_RecordCenter_Spot1
	.word	EventScript_RecordCenter_Spot2
	.word	EventScript_RecordCenter_Spot3
	.word	EventScript_BattleColosseum_2P_PlayerSpot0
	.word	EventScript_BattleColosseum_2P_PlayerSpot1
	.word	EventScript_TradeCenter_Chair0
.L1173:
	ldr	r0, .L1181
	cmp	r1, r0
	beq	.L1175	@cond_branch
	mov	r0, #0x0
	b	.L1177
.L1182:
	.align	2, 0
.L1181:
	.word	EventScript_TradeCenter_Chair1
.L1175:
	mov	r0, #0x9
.L1177:
	pop	{r1}
	bx	r1
.Lfe187:
	.size	 GetDirectionForEventScript,.Lfe187-GetDirectionForEventScript
	.align	2, 0
	.type	 sub_8087510,function
	.thumb_func
sub_8087510:
	push	{lr}
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.Lfe188:
	.size	 sub_8087510,.Lfe188-sub_8087510
	.align	2, 0
	.type	 InitLinkRoomStartMenuScript,function
	.thumb_func
InitLinkRoomStartMenuScript:
	push	{lr}
	mov	r0, #0x6
	bl	PlaySE
	bl	ShowStartMenu
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.Lfe189:
	.size	 InitLinkRoomStartMenuScript,.Lfe189-InitLinkRoomStartMenuScript
	.align	2, 0
	.type	 sub_8087530,function
	.thumb_func
sub_8087530:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	ScriptContext1_SetupScript
	bl	ScriptContext2_Enable
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe190:
	.size	 sub_8087530,.Lfe190-sub_8087530
	.align	2, 0
	.type	 CreateConfirmLeaveTradeRoomPrompt,function
	.thumb_func
CreateConfirmLeaveTradeRoomPrompt:
	push	{lr}
	mov	r0, #0x6
	bl	PlaySE
	ldr	r0, .L1187
	bl	ScriptContext1_SetupScript
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.L1188:
	.align	2, 0
.L1187:
	.word	EventScript_ConfirmLeaveTradeRoom
.Lfe191:
	.size	 CreateConfirmLeaveTradeRoomPrompt,.Lfe191-CreateConfirmLeaveTradeRoomPrompt
	.align	2, 0
	.type	 InitMenuBasedScript,function
	.thumb_func
InitMenuBasedScript:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	ScriptContext1_SetupScript
	bl	ScriptContext2_Enable
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe192:
	.size	 InitMenuBasedScript,.Lfe192-InitMenuBasedScript
	.align	2, 0
	.type	 sub_8087584,function
	.thumb_func
sub_8087584:
	push	{lr}
	ldr	r0, .L1191
	bl	ScriptContext1_SetupScript
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.L1192:
	.align	2, 0
.L1191:
	.word	EventScript_TerminateLink
.Lfe193:
	.size	 sub_8087584,.Lfe193-sub_8087584
	.align	2, 0
	.globl	sub_8087598
	.type	 sub_8087598,function
	.thumb_func
sub_8087598:
	push	{lr}
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0
	bne	.L1194	@cond_branch
	mov	r0, #0x0
	b	.L1197
.L1194:
	bl	GetLinkRecvQueueLength
	cmp	r0, #0x2
	bls	.L1195	@cond_branch
	ldr	r1, .L1199
	mov	r0, #0x1
	b	.L1198
.L1200:
	.align	2, 0
.L1199:
	.word	sUnknown_03000E18
.L1195:
	ldr	r1, .L1201
	mov	r0, #0x0
.L1198:
	strb	r0, [r1]
	ldrb	r0, [r1]
.L1197:
	pop	{r1}
	bx	r1
.L1202:
	.align	2, 0
.L1201:
	.word	sUnknown_03000E18
.Lfe194:
	.size	 sub_8087598,.Lfe194-sub_8087598
	.align	2, 0
	.globl	sub_80875C8
	.type	 sub_80875C8,function
	.thumb_func
sub_80875C8:
	push	{lr}
	bl	GetLinkRecvQueueLength
	cmp	r0, #0x1
	bls	.L1215	@cond_branch
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	bne	.L1215	@cond_branch
	bl	IsSendingKeysToLink
	cmp	r0, #0x1
	bne	.L1215	@cond_branch
	ldr	r0, .L1219
	ldr	r1, [r0]
	ldr	r0, .L1219+0x4
	cmp	r1, r0
	beq	.L1218	@cond_branch
	ldr	r0, .L1219+0x8
	cmp	r1, r0
	bne	.L1215	@cond_branch
	ldr	r0, .L1219+0xc
	ldrb	r2, [r0]
	mov	r1, #0x0
	strb	r1, [r0]
	cmp	r2, #0x1
	beq	.L1218	@cond_branch
	ldr	r2, .L1219+0x10
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1215	@cond_branch
	ldrb	r1, [r2, #0xa]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1215	@cond_branch
.L1218:
	mov	r0, #0x1
	b	.L1217
.L1220:
	.align	2, 0
.L1219:
	.word	sPlayerKeyInterceptCallback
	.word	KeyInterCB_DeferToRecvQueue
	.word	KeyInterCB_DeferToEventScript
	.word	sUnknown_03000E18
	.word	gPaletteFade
.L1215:
	mov	r0, #0x0
.L1217:
	pop	{r1}
	bx	r1
.Lfe195:
	.size	 sub_80875C8,.Lfe195-sub_80875C8
	.align	2, 0
	.globl	sub_8087634
	.type	 sub_8087634,function
	.thumb_func
sub_8087634:
	push	{lr}
	bl	GetLinkSendQueueLength
	cmp	r0, #0x1
	bls	.L1231	@cond_branch
	bl	IsUpdateLinkStateCBActive
	cmp	r0, #0x1
	bne	.L1231	@cond_branch
	bl	IsSendingKeysToLink
	cmp	r0, #0x1
	bne	.L1231	@cond_branch
	ldr	r0, .L1232
	ldr	r1, [r0]
	ldr	r0, .L1232+0x4
	cmp	r1, r0
	beq	.L1228	@cond_branch
.L1231:
	mov	r0, #0x0
	b	.L1230
.L1233:
	.align	2, 0
.L1232:
	.word	sPlayerKeyInterceptCallback
	.word	KeyInterCB_DeferToSendQueue
.L1228:
	mov	r0, #0x1
.L1230:
	pop	{r1}
	bx	r1
.Lfe196:
	.size	 sub_8087634,.Lfe196-sub_8087634
	.align	2, 0
	.globl	sub_808766C
	.type	 sub_808766C,function
	.thumb_func
sub_808766C:
	push	{lr}
	ldr	r0, .L1240
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1237	@cond_branch
	bl	IsSendingKeysToLink
	cmp	r0, #0
	beq	.L1237	@cond_branch
	mov	r0, #0x1
	b	.L1239
.L1241:
	.align	2, 0
.L1240:
	.word	gWirelessCommType
.L1237:
	mov	r0, #0x0
.L1239:
	pop	{r1}
	bx	r1
.Lfe197:
	.size	 sub_808766C,.Lfe197-sub_808766C
	.align	2, 0
	.type	 GetLinkSendQueueLength,function
	.thumb_func
GetLinkSendQueueLength:
	push	{lr}
	ldr	r0, .L1247
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1243	@cond_branch
	ldr	r0, .L1247+0x4
	ldr	r1, .L1247+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	b	.L1246
.L1248:
	.align	2, 0
.L1247:
	.word	gWirelessCommType
	.word	gLink
	.word	0x339
.L1243:
	ldr	r0, .L1249
	ldr	r1, .L1249+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
.L1246:
	pop	{r1}
	bx	r1
.L1250:
	.align	2, 0
.L1249:
	.word	Rfu
	.word	0xc1a
.Lfe198:
	.size	 GetLinkSendQueueLength,.Lfe198-GetLinkSendQueueLength
	.align	2, 0
	.type	 ZeroLinkPlayerObjectEvent,function
	.thumb_func
ZeroLinkPlayerObjectEvent:
	mov	r1, #0x0
	str	r1, [r0]
	bx	lr
.Lfe199:
	.size	 ZeroLinkPlayerObjectEvent,.Lfe199-ZeroLinkPlayerObjectEvent
	.align	2, 0
	.globl	ClearLinkPlayerObjectEvents
	.type	 ClearLinkPlayerObjectEvents,function
	.thumb_func
ClearLinkPlayerObjectEvents:
	push	{lr}
	ldr	r0, .L1253
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	pop	{r0}
	bx	r0
.L1254:
	.align	2, 0
.L1253:
	.word	gLinkPlayerObjectEvents
.Lfe200:
	.size	 ClearLinkPlayerObjectEvents,.Lfe200-ClearLinkPlayerObjectEvents
	.align	2, 0
	.type	 ZeroObjectEvent,function
	.thumb_func
ZeroObjectEvent:
	push	{lr}
	mov	r1, #0x0
	mov	r2, #0x24
	bl	memset
	pop	{r0}
	bx	r0
.Lfe201:
	.size	 ZeroObjectEvent,.Lfe201-ZeroObjectEvent
	.align	2, 0
	.type	 SpawnLinkPlayerObjectEvent,function
	.thumb_func
SpawnLinkPlayerObjectEvent:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r1
	mov	sl, r2
	mov	r8, r3
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r9, r0
	mov	r1, sl
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	sl, r1
	mov	r2, r8
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	bl	GetFirstInactiveObjectEventId
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r7, #0x2
	ldr	r0, .L1257
	add	r4, r4, r0
	lsl	r5, r6, #0x3
	add	r5, r5, r6
	lsl	r5, r5, #0x2
	ldr	r0, .L1257+0x4
	add	r5, r5, r0
	add	r0, r4, #0
	bl	ZeroLinkPlayerObjectEvent
	add	r0, r5, #0
	bl	ZeroObjectEvent
	mov	r2, #0x0
	mov	r1, #0x1
	mov	r0, #0x1
	strb	r0, [r4]
	strb	r7, [r4, #0x1]
	strb	r6, [r4, #0x2]
	strb	r2, [r4, #0x3]
	ldrb	r0, [r5]
	orr	r0, r0, r1
	mov	r2, r8
	and	r2, r2, r1
	lsl	r2, r2, #0x1
	mov	r1, #0x3
	neg	r1, r1
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5]
	mov	r0, #0x2
	strb	r0, [r5, #0x19]
	mov	r0, #0x40
	strb	r0, [r5, #0x4]
	mov	r0, r9
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r9, r0
	mov	r1, sl
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	sl, r1
	add	r0, r5, #0
	mov	r1, r9
	mov	r2, sl
	bl	InitLinkPlayerObjectEventPos
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1258:
	.align	2, 0
.L1257:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.Lfe202:
	.size	 SpawnLinkPlayerObjectEvent,.Lfe202-SpawnLinkPlayerObjectEvent
	.align	2, 0
	.type	 InitLinkPlayerObjectEventPos,function
	.thumb_func
InitLinkPlayerObjectEventPos:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r1, r2, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	strh	r0, [r4, #0x10]
	strh	r1, [r4, #0x12]
	strh	r0, [r4, #0x14]
	strh	r1, [r4, #0x16]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r2, r4, #0
	add	r2, r2, #0xc
	add	r3, r4, #0
	add	r3, r3, #0xe
	bl	SetSpritePosToMapCoords
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x8
	strh	r0, [r4, #0xc]
	add	r0, r4, #0
	bl	ObjectEventUpdateZCoord
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe203:
	.size	 InitLinkPlayerObjectEventPos,.Lfe203-InitLinkPlayerObjectEventPos
	.align	2, 0
	.type	 sub_80877DC,function
	.thumb_func
sub_80877DC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	ldr	r1, .L1262
	lsr	r0, r0, #0x16
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1261	@cond_branch
	ldrb	r0, [r1, #0x2]
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L1262+0x4
	add	r1, r1, r0
	strb	r2, [r1, #0x19]
.L1261:
	pop	{r0}
	bx	r0
.L1263:
	.align	2, 0
.L1262:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.Lfe204:
	.size	 sub_80877DC,.Lfe204-sub_80877DC
	.align	2, 0
	.type	 sub_808780C,function
	.thumb_func
sub_808780C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L1266
	add	r5, r0, r1
	ldrb	r1, [r5, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1266+0x4
	add	r4, r0, r1
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0x40
	beq	.L1265	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1266+0x8
	add	r0, r0, r1
	bl	DestroySprite
.L1265:
	mov	r0, #0x0
	strb	r0, [r5]
	ldrb	r1, [r4]
	sub	r0, r0, #0x2
	and	r0, r0, r1
	strb	r0, [r4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1267:
	.align	2, 0
.L1266:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
	.word	gSprites
.Lfe205:
	.size	 sub_808780C,.Lfe205-sub_808780C
	.align	2, 0
	.type	 GetSpriteForLinkedPlayer,function
	.thumb_func
GetSpriteForLinkedPlayer:
	lsl	r0, r0, #0x18
	ldr	r1, .L1269
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1269+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x4]
	bx	lr
.L1270:
	.align	2, 0
.L1269:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.Lfe206:
	.size	 GetSpriteForLinkedPlayer,.Lfe206-GetSpriteForLinkedPlayer
	.align	2, 0
	.type	 GetLinkPlayerCoords,function
	.thumb_func
GetLinkPlayerCoords:
	lsl	r0, r0, #0x18
	ldr	r3, .L1272
	lsr	r0, r0, #0x16
	add	r0, r0, r3
	ldrb	r3, [r0, #0x2]
	lsl	r0, r3, #0x3
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r3, .L1272+0x4
	add	r0, r0, r3
	ldrh	r3, [r0, #0x10]
	strh	r3, [r1]
	ldrh	r0, [r0, #0x12]
	strh	r0, [r2]
	bx	lr
.L1273:
	.align	2, 0
.L1272:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.Lfe207:
	.size	 GetLinkPlayerCoords,.Lfe207-GetLinkPlayerCoords
	.align	2, 0
	.type	 GetLinkPlayerFacingDirection,function
	.thumb_func
GetLinkPlayerFacingDirection:
	lsl	r0, r0, #0x18
	ldr	r1, .L1275
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1275+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	bx	lr
.L1276:
	.align	2, 0
.L1275:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.Lfe208:
	.size	 GetLinkPlayerFacingDirection,.Lfe208-GetLinkPlayerFacingDirection
	.align	2, 0
	.type	 GetLinkPlayerElevation,function
	.thumb_func
GetLinkPlayerElevation:
	lsl	r0, r0, #0x18
	ldr	r1, .L1278
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1278+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0xb]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	bx	lr
.L1279:
	.align	2, 0
.L1278:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.Lfe209:
	.size	 GetLinkPlayerElevation,.Lfe209-GetLinkPlayerElevation
	.align	2, 0
	.type	 sub_80878E4,function
	.thumb_func
sub_80878E4:
	lsl	r0, r0, #0x18
	ldr	r1, .L1281
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1281+0x4
	add	r0, r0, r1
	add	r0, r0, #0x21
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	mov	r0, #0x10
	sub	r0, r0, r1
	bx	lr
.L1282:
	.align	2, 0
.L1281:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.Lfe210:
	.size	 sub_80878E4,.Lfe210-sub_80878E4
	.align	2, 0
	.type	 GetLinkPlayerIdAt,function
	.thumb_func
GetLinkPlayerIdAt:
	push	{r4, r5, r6, lr}
	mov	r2, #0x0
	ldr	r5, .L1293
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r3, r1, #0x10
.L1287:
	lsl	r0, r2, #0x2
	add	r1, r0, r5
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L1286	@cond_branch
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0
	beq	.L1289	@cond_branch
	cmp	r0, #0x2
	bne	.L1286	@cond_branch
.L1289:
	ldrb	r1, [r1, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1293+0x4
	add	r1, r0, r1
	mov	r6, #0x10
	ldrsh	r0, [r1, r6]
	cmp	r0, r4
	bne	.L1286	@cond_branch
	mov	r6, #0x12
	ldrsh	r0, [r1, r6]
	cmp	r0, r3
	bne	.L1286	@cond_branch
	add	r0, r2, #0
	b	.L1292
.L1294:
	.align	2, 0
.L1293:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.L1286:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L1287	@cond_branch
	mov	r0, #0x4
.L1292:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe211:
	.size	 GetLinkPlayerIdAt,.Lfe211-GetLinkPlayerIdAt
	.align	2, 0
	.type	 SetPlayerFacingDirection,function
	.thumb_func
SetPlayerFacingDirection:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	add	r2, r3, #0
	lsr	r0, r0, #0x16
	ldr	r1, .L1299
	add	r5, r0, r1
	ldrb	r1, [r5, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1299+0x4
	add	r6, r0, r1
	ldrb	r0, [r5]
	cmp	r0, #0
	beq	.L1296	@cond_branch
	cmp	r3, #0xa
	bls	.L1297	@cond_branch
	ldrb	r0, [r6]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r6]
	b	.L1296
.L1300:
	.align	2, 0
.L1299:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.L1297:
	ldr	r4, .L1301
	ldr	r1, .L1301+0x4
	ldrb	r0, [r5, #0x3]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r3, [r0]
	add	r0, r5, #0
	add	r1, r6, #0
	bl	_call_via_r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r4
	ldr	r2, [r0]
	add	r0, r5, #0
	add	r1, r6, #0
	bl	_call_via_r2
.L1296:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1302:
	.align	2, 0
.L1301:
	.word	gMovementStatusHandler
	.word	gLinkPlayerMovementModes
.Lfe212:
	.size	 SetPlayerFacingDirection,.Lfe212-SetPlayerFacingDirection
	.align	2, 0
	.type	 MovementEventModeCB_Normal,function
	.thumb_func
MovementEventModeCB_Normal:
	push	{r4, lr}
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, .L1304
	lsl	r3, r2, #0x2
	add	r3, r3, r4
	ldr	r3, [r3]
	bl	_call_via_r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L1305:
	.align	2, 0
.L1304:
	.word	gLinkPlayerFacingHandlers
.Lfe213:
	.size	 MovementEventModeCB_Normal,.Lfe213-MovementEventModeCB_Normal
	.align	2, 0
	.type	 MovementEventModeCB_Ignored,function
	.thumb_func
MovementEventModeCB_Ignored:
	mov	r0, #0x1
	bx	lr
.Lfe214:
	.size	 MovementEventModeCB_Ignored,.Lfe214-MovementEventModeCB_Ignored
	.align	2, 0
	.type	 MovementEventModeCB_Normal_2,function
	.thumb_func
MovementEventModeCB_Normal_2:
	push	{r4, lr}
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, .L1308
	lsl	r3, r2, #0x2
	add	r3, r3, r4
	ldr	r3, [r3]
	bl	_call_via_r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.L1309:
	.align	2, 0
.L1308:
	.word	gLinkPlayerFacingHandlers
.Lfe215:
	.size	 MovementEventModeCB_Normal_2,.Lfe215-MovementEventModeCB_Normal_2
	.align	2, 0
	.type	 FacingHandler_DoNothing,function
	.thumb_func
FacingHandler_DoNothing:
	mov	r0, #0x0
	bx	lr
.Lfe216:
	.size	 FacingHandler_DoNothing,.Lfe216-FacingHandler_DoNothing
	.align	2, 0
	.type	 FacingHandler_DpadMovement,function
	.thumb_func
FacingHandler_DpadMovement:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r5, #0x19]
	bl	FlipVerticalAndClearForced
	strb	r0, [r5, #0x19]
	ldrb	r1, [r5, #0x19]
	mov	r6, sp
	add	r6, r6, #0x2
	add	r0, r5, #0
	mov	r2, sp
	add	r3, r6, #0
	bl	ObjectEventMoveDestCoords
	ldrb	r0, [r4, #0x2]
	ldrb	r1, [r5, #0x19]
	mov	r2, sp
	mov	r3, #0x0
	ldrsh	r2, [r2, r3]
	mov	r4, #0x0
	ldrsh	r3, [r6, r4]
	bl	LinkPlayerDetectCollision
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1312	@cond_branch
	add	r1, r5, #0
	add	r1, r1, #0x21
	mov	r0, #0x10
	strb	r0, [r1]
	mov	r0, sp
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	mov	r3, #0x0
	ldrsh	r2, [r6, r3]
	add	r0, r5, #0
	bl	ShiftObjectEventCoords
	add	r0, r5, #0
	bl	ObjectEventUpdateZCoord
	mov	r0, #0x1
	b	.L1314
.L1312:
	mov	r0, #0x0
.L1314:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe217:
	.size	 FacingHandler_DpadMovement,.Lfe217-FacingHandler_DpadMovement
	.align	2, 0
	.type	 FacingHandler_ForcedFacingChange,function
	.thumb_func
FacingHandler_ForcedFacingChange:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4, #0x19]
	bl	FlipVerticalAndClearForced
	strb	r0, [r4, #0x19]
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe218:
	.size	 FacingHandler_ForcedFacingChange,.Lfe218-FacingHandler_ForcedFacingChange
	.align	2, 0
	.type	 MovementStatusHandler_EnterFreeMode,function
	.thumb_func
MovementStatusHandler_EnterFreeMode:
	mov	r1, #0x0
	strb	r1, [r0, #0x3]
	bx	lr
.Lfe219:
	.size	 MovementStatusHandler_EnterFreeMode,.Lfe219-MovementStatusHandler_EnterFreeMode
	.align	2, 0
	.type	 MovementStatusHandler_TryAdvanceScript,function
	.thumb_func
MovementStatusHandler_TryAdvanceScript:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r4, r1, #0
	add	r5, r4, #0
	add	r5, r5, #0x21
	ldrb	r0, [r5]
	sub	r0, r0, #0x1
	strb	r0, [r5]
	mov	r0, #0x1
	strb	r0, [r6, #0x3]
	ldrb	r0, [r4, #0x19]
	add	r1, r1, #0xc
	add	r2, r4, #0
	add	r2, r2, #0xe
	bl	MoveCoords
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L1318	@cond_branch
	add	r0, r4, #0
	bl	ShiftStillObjectEventCoords
	mov	r0, #0x2
	strb	r0, [r6, #0x3]
.L1318:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe220:
	.size	 MovementStatusHandler_TryAdvanceScript,.Lfe220-MovementStatusHandler_TryAdvanceScript
	.align	2, 0
	.type	 FlipVerticalAndClearForced,function
	.thumb_func
FlipVerticalAndClearForced:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	sub	r0, r0, #0x1
	cmp	r0, #0x9
	bhi	.L1320	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1332
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1333:
	.align	2, 0
.L1332:
	.word	.L1329
	.align	2, 0
	.align	2, 0
.L1329:
	.word	.L1322
	.word	.L1324
	.word	.L1326
	.word	.L1328
	.word	.L1320
	.word	.L1320
	.word	.L1322
	.word	.L1324
	.word	.L1326
	.word	.L1328
.L1322:
	mov	r0, #0x2
	b	.L1331
.L1324:
	mov	r0, #0x1
	b	.L1331
.L1326:
	mov	r0, #0x3
	b	.L1331
.L1328:
	mov	r0, #0x4
	b	.L1331
.L1320:
	add	r0, r2, #0
.L1331:
	pop	{r1}
	bx	r1
.Lfe221:
	.size	 FlipVerticalAndClearForced,.Lfe221-FlipVerticalAndClearForced
	.align	2, 0
	.type	 LinkPlayerDetectCollision,function
	.thumb_func
LinkPlayerDetectCollision:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	ip, r2
	lsl	r3, r3, #0x10
	mov	r4, #0x0
	ldr	r0, .L1345
	mov	r9, r0
	lsr	r2, r3, #0x10
	mov	sl, r2
	asr	r6, r3, #0x10
.L1338:
	mov	r7, ip
	lsl	r3, r7, #0x10
	mov	r0, sl
	lsl	r5, r0, #0x10
	cmp	r4, r8
	beq	.L1337	@cond_branch
	lsl	r0, r4, #0x3
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	mov	r2, r9
	add	r1, r0, r2
	mov	r7, #0x10
	ldrsh	r0, [r1, r7]
	asr	r2, r3, #0x10
	cmp	r0, r2
	bne	.L1342	@cond_branch
	mov	r7, #0x12
	ldrsh	r0, [r1, r7]
	cmp	r0, r6
	beq	.L1341	@cond_branch
.L1342:
	mov	r7, #0x14
	ldrsh	r0, [r1, r7]
	cmp	r0, r2
	bne	.L1337	@cond_branch
	mov	r0, #0x16
	ldrsh	r1, [r1, r0]
	asr	r0, r5, #0x10
	cmp	r1, r0
	bne	.L1337	@cond_branch
.L1341:
	mov	r0, #0x1
	b	.L1344
.L1346:
	.align	2, 0
.L1345:
	.word	gObjectEvents
.L1337:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0xf
	bls	.L1338	@cond_branch
	asr	r0, r3, #0x10
	asr	r1, r5, #0x10
	bl	MapGridIsImpassableAt
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1344:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe222:
	.size	 LinkPlayerDetectCollision,.Lfe222-LinkPlayerDetectCollision
	.align	2, 0
	.type	 CreateLinkPlayerSprite,function
	.thumb_func
CreateLinkPlayerSprite:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsl	r2, r5, #0x2
	ldr	r0, .L1358
	add	r2, r2, r0
	ldrb	r1, [r2, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1358+0x4
	add	r4, r0, r1
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.L1348	@cond_branch
	sub	r0, r3, #0x1
	cmp	r0, #0x4
	bhi	.L1349	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1358+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1359:
	.align	2, 0
.L1358:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
	.word	.L1355
	.align	2, 0
	.align	2, 0
.L1355:
	.word	.L1353
	.word	.L1353
	.word	.L1354
	.word	.L1351
	.word	.L1351
.L1351:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	bl	GetFRLGAvatarGraphicsIdByGender
	b	.L1357
.L1353:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1f
	bl	GetRSAvatarGraphicsIdByGender
	b	.L1357
.L1354:
	ldrb	r1, [r4]
	lsl	r1, r1, #0x1e
	lsr	r1, r1, #0x1f
	mov	r0, #0x0
	bl	GetRivalAvatarGraphicsIdByStateIdAndGender
.L1357:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1360
	mov	r2, #0x0
	str	r2, [sp]
	mov	r3, #0x0
	bl	AddPseudoObjectEvent
	strb	r0, [r4, #0x4]
.L1349:
	ldrb	r1, [r4, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1360+0x4
	add	r0, r0, r1
	add	r3, r0, #0
	add	r3, r3, #0x3e
	ldrb	r1, [r3]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r3]
	strh	r5, [r0, #0x2e]
	ldrb	r1, [r4]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
.L1348:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1361:
	.align	2, 0
.L1360:
	.word	SpriteCB_LinkPlayer
	.word	gSprites
.Lfe223:
	.size	 CreateLinkPlayerSprite,.Lfe223-CreateLinkPlayerSprite
	.align	2, 0
	.type	 SpriteCB_LinkPlayer,function
	.thumb_func
SpriteCB_LinkPlayer:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	lsl	r4, r4, #0x2
	ldr	r0, .L1366
	add	r4, r4, r0
	ldrb	r1, [r4, #0x2]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1366+0x4
	add	r6, r0, r1
	ldrh	r0, [r6, #0xc]
	strh	r0, [r5, #0x20]
	ldrh	r0, [r6, #0xe]
	strh	r0, [r5, #0x22]
	ldrb	r0, [r6, #0xb]
	lsr	r0, r0, #0x4
	add	r1, r5, #0
	mov	r2, #0x1
	bl	SetObjectSubpriorityByZCoord
	ldrb	r0, [r6, #0xb]
	lsr	r0, r0, #0x4
	bl	ZCoordToPriority
	mov	r1, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	ldrb	r0, [r4, #0x3]
	cmp	r0, #0
	bne	.L1363	@cond_branch
	ldrb	r0, [r6, #0x19]
	bl	GetFaceDirectionAnimNum
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnim
	b	.L1364
.L1367:
	.align	2, 0
.L1366:
	.word	gLinkPlayerObjectEvents
	.word	gObjectEvents
.L1363:
	ldrb	r0, [r6, #0x19]
	bl	GetMoveDirectionAnimNum
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	StartSpriteAnimIfDifferent
.L1364:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	UpdateObjectEventSpriteVisibility
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1365	@cond_branch
	ldrh	r0, [r5, #0x3c]
	mov	r1, #0x4
	and	r1, r1, r0
	lsl	r1, r1, #0x10
	add	r3, r5, #0
	add	r3, r3, #0x3e
	lsr	r1, r1, #0x12
	lsl	r1, r1, #0x2
	ldrb	r2, [r3]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r0, [r5, #0x3c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x3c]
.L1365:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe224:
	.size	 SpriteCB_LinkPlayer,.Lfe224-SpriteCB_LinkPlayer
	.comm	gBGTilemapBuffers1, 4	@ 4
	.comm	gBGTilemapBuffers2, 4	@ 4
	.comm	gBGTilemapBuffers3, 4	@ 4
	.comm	gHeldKeyCodeToSend, 4	@ 2
	.comm	gFieldCallback, 4	@ 4
	.comm	gFieldCallback2, 4	@ 4
	.comm	gLocalLinkPlayerId, 4	@ 1
	.comm	gFieldLinkPlayerCount, 4	@ 1

	.lcomm	sUnusedOverworldCallback,4

	.lcomm	sPlayerTradingStates,4

	.lcomm	sPlayerKeyInterceptCallback,4

	.lcomm	sUnknown_03000E18,1

	.lcomm	sRfuKeepAliveTimer,1

	.lcomm	sUnusedVar,4
.text
	.align	2, 0

