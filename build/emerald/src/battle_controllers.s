@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.type	 sLinkSendTaskId,object
	.size	 sLinkSendTaskId,1
sLinkSendTaskId:
	.byte	0x0
	.type	 sLinkReceiveTaskId,object
	.size	 sLinkReceiveTaskId,1
sLinkReceiveTaskId:
	.byte	0x0
	.type	 sUnknown_02022D0A,object
	.size	 sUnknown_02022D0A,1
sUnknown_02022D0A:
	.byte	0x0
	.globl	gUnknown_02022D0C
	.align	2, 0
	.type	 gUnknown_02022D0C,object
	.size	 gUnknown_02022D0C,4
gUnknown_02022D0C:
	.space	4
	.type	 sBattleBuffersTransferData,object
	.size	 sBattleBuffersTransferData,256
sBattleBuffersTransferData:
	.space	256
.text
	.align	2, 0
	.globl	HandleLinkBattleSetup
	.type	 HandleLinkBattleSetup,function
	.thumb_func
HandleLinkBattleSetup:
	push	{lr}
	ldr	r0, .L6
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L6+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L4	@cond_branch
	bl	sub_800B488
.L4:
	ldr	r0, .L6+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L5	@cond_branch
	bl	OpenLink
.L5:
	ldr	r0, .L6+0xc
	mov	r1, #0x0
	bl	CreateTask
	bl	CreateTasksForSendRecvLinkBuffers
.L3:
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	gBattleTypeFlags
	.word	gWirelessCommType
	.word	gReceivedRemoteLinkPlayers
	.word	task00_08081A90
.Lfe1:
	.size	 HandleLinkBattleSetup,.Lfe1-HandleLinkBattleSetup
	.align	2, 0
	.globl	SetUpBattleVarsAndBirchZigzagoon
	.type	 SetUpBattleVarsAndBirchZigzagoon,function
	.thumb_func
SetUpBattleVarsAndBirchZigzagoon:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	ldr	r0, .L15
	ldr	r1, .L15+0x4
	str	r1, [r0]
	mov	r0, #0x0
	str	r0, [sp, #0x10]
	mov	r1, #0x0
	ldr	r7, .L15+0x8
	ldr	r6, .L15+0xc
	mov	r2, #0x0
	ldr	r5, .L15+0x10
	ldr	r4, .L15+0x14
	ldr	r3, .L15+0x18
.L12:
	lsl	r0, r1, #0x2
	add	r0, r0, r7
	str	r4, [r0]
	add	r1, r1, r3
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r0, [sp, #0x10]
	add	r0, r0, r6
	strb	r2, [r0]
	ldr	r0, [sp, #0x10]
	add	r0, r0, r5
	strb	r2, [r0]
	ldr	r0, [sp, #0x10]
	add	r0, r0, #0x1
	str	r0, [sp, #0x10]
	add	r1, r0, #0
	cmp	r1, #0x3
	ble	.L12	@cond_branch
	bl	HandleLinkBattleSetup
	ldr	r0, .L15+0x1c
	mov	r5, #0x0
	str	r5, [r0]
	bl	ClearBattleAnimationVars
	bl	ClearBattleMonForms
	mov	r0, #0xf
	bl	BattleAI_HandleItemUseBeforeAISetup
	ldr	r0, .L15+0x20
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L14	@cond_branch
	bl	ZeroEnemyPartyMons
	ldr	r4, .L15+0x24
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	add	r0, r4, #0
	mov	r2, #0x2
	mov	r3, #0x20
	bl	CreateMon
	str	r5, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
.L14:
	ldr	r0, .L15+0x28
	str	r5, [r0]
	ldr	r0, .L15+0x2c
	strb	r5, [r0]
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gBattleMainFunc
	.word	nullsub_20
	.word	gBattlerControllerFuncs
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	nullsub_21
	.word	gBattlerPositions
	.word	gBattleControllerExecFlags
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	gUnknown_02022FF4
	.word	gUnknown_0202428C
.Lfe2:
	.size	 SetUpBattleVarsAndBirchZigzagoon,.Lfe2-SetUpBattleVarsAndBirchZigzagoon
	.align	2, 0
	.globl	sub_8032768
	.type	 sub_8032768,function
	.thumb_func
sub_8032768:
	push	{r4, r5, lr}
	ldr	r0, .L39
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L18	@cond_branch
	mov	r0, #0x1
	bl	sub_8184DA4
	b	.L19
.L40:
	.align	2, 0
.L39:
	.word	gBattleTypeFlags
.L18:
	mov	r0, #0x2
	bl	sub_8184DA4
.L19:
	ldr	r4, .L41
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L20	@cond_branch
	bl	RecordedBattle_SaveParties
.L20:
	ldr	r0, [r4]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
	bl	InitLinkBtlControllers
	b	.L22
.L42:
	.align	2, 0
.L41:
	.word	gBattleTypeFlags
.L21:
	bl	InitSinglePlayerBtlControllers
.L22:
	bl	SetBattlePartyIds
	ldr	r0, .L43
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L23	@cond_branch
	mov	r4, #0x0
	ldr	r0, .L43+0x4
	ldrb	r1, [r0]
	cmp	r4, r1
	bge	.L23	@cond_branch
	add	r5, r0, #0
.L27:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	cmp	r4, r0
	blt	.L27	@cond_branch
.L23:
	mov	r4, #0x0
	ldr	r3, .L43+0x8
	mov	r2, #0xd2
	lsl	r2, r2, #0x1
	mov	r1, #0x0
.L32:
	ldr	r0, [r3]
	add	r0, r4, r0
	add	r0, r0, r2
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x5f
	bls	.L32	@cond_branch
	mov	r4, #0x0
	ldr	r3, .L43+0x8
	mov	r2, #0x81
	lsl	r2, r2, #0x2
	mov	r1, #0x0
.L37:
	ldr	r0, [r3]
	add	r0, r4, r0
	add	r0, r0, r2
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x67
	bls	.L37	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gBattleTypeFlags
	.word	gBattlersCount
	.word	gBattleStruct
.Lfe3:
	.size	 sub_8032768,.Lfe3-sub_8032768
	.align	2, 0
	.type	 InitSinglePlayerBtlControllers,function
	.thumb_func
InitSinglePlayerBtlControllers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L122
	ldr	r3, [r0]
	mov	r5, #0x80
	lsl	r5, r5, #0xf
	and	r5, r5, r3
	cmp	r5, #0
	beq	.L46	@cond_branch
	ldr	r1, .L122+0x4
	ldr	r0, .L122+0x8
	str	r0, [r1]
	mov	r4, #0x80
	lsl	r4, r4, #0x11
	and	r4, r4, r3
	cmp	r4, #0
	beq	.L47	@cond_branch
	ldr	r2, .L122+0xc
	ldr	r0, .L122+0x10
	str	r0, [r2]
	ldr	r1, .L122+0x14
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L116
.L123:
	.align	2, 0
.L122:
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToRecordedPlayer
	.word	gBattlerPositions
.L47:
	ldr	r2, .L124
	ldr	r0, .L124+0x4
	str	r0, [r2]
	ldr	r1, .L124+0x8
	strb	r4, [r1]
.L116:
	ldr	r3, .L124+0xc
	str	r3, [r2, #0x4]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r0, .L124+0x10
	str	r0, [r2, #0x8]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	str	r3, [r2, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
	ldr	r1, .L124+0x14
	mov	r0, #0x4
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x2
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x3
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
	ldr	r0, .L124+0x18
	mov	r1, #0x0
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	mov	r1, #0x3
	b	.L117
.L125:
	.align	2, 0
.L124:
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToOpponent
	.word	SetControllerToPlayerPartner
	.word	gBattlersCount
	.word	gBattlerPartyIndexes
.L46:
	mov	r7, #0x1
	add	r0, r3, #0
	and	r0, r0, r7
	cmp	r0, #0
	beq	.LCB401
	b	.L50	@long jump
.LCB401:
	ldr	r0, .L126
	ldr	r2, .L126+0x4
	str	r2, [r0]
	mov	r1, #0x80
	and	r1, r1, r3
	mov	ip, r2
	cmp	r1, #0
	beq	.L51	@cond_branch
	ldr	r1, .L126+0x8
	ldr	r0, .L126+0xc
	b	.L118
.L127:
	.align	2, 0
.L126:
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToSafari
.L51:
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L53	@cond_branch
	ldr	r1, .L128
	ldr	r0, .L128+0x4
	b	.L118
.L129:
	.align	2, 0
.L128:
	.word	gBattlerControllerFuncs
	.word	SetControllerToWally
.L53:
	ldr	r1, .L130
	ldr	r0, .L130+0x4
.L118:
	str	r0, [r1]
	mov	sl, r1
	ldr	r4, .L130+0x8
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, r9
	strb	r1, [r4]
	mov	r5, sl
	ldr	r2, .L130+0xc
	mov	r8, r2
	str	r2, [r5, #0x4]
	mov	r6, #0x1
	strb	r6, [r4, #0x1]
	ldr	r2, .L130+0x10
	mov	r7, #0x2
	strb	r7, [r2]
	ldr	r0, .L130+0x14
	ldr	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r3
	cmp	r0, #0
	bne	.LCB469
	b	.L49	@long jump
.LCB469:
	mov	r1, #0x80
	lsl	r1, r1, #0x12
	and	r1, r1, r3
	cmp	r1, #0
	beq	.L56	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x18
	and	r1, r1, r3
	cmp	r1, #0
	beq	.L57	@cond_branch
	mov	r1, ip
	ldr	r0, .L130+0x18
	str	r1, [r0]
	ldr	r0, .L130+0x1c
	str	r0, [r5]
	mov	r1, r9
	strb	r1, [r4]
	ldr	r0, .L130+0x20
	str	r0, [r5, #0x4]
	strb	r6, [r4, #0x1]
	strb	r7, [r2]
	b	.L49
.L131:
	.align	2, 0
.L130:
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToOpponent
	.word	gBattlersCount
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	SetControllerToRecordedPlayer
	.word	SetControllerToRecordedOpponent
.L57:
	ldr	r0, .L132
	str	r0, [r5, #0x4]
	strb	r1, [r4, #0x1]
	ldr	r0, .L132+0x4
	str	r0, [r5]
	strb	r6, [r4]
	strb	r7, [r2]
	b	.L49
.L133:
	.align	2, 0
.L132:
	.word	SetControllerToRecordedPlayer
	.word	SetControllerToRecordedOpponent
.L56:
	ldr	r0, .L134
	mov	r2, sl
	str	r0, [r2]
	strb	r1, [r4]
	mov	r0, r8
	str	r0, [r2, #0x4]
	strb	r6, [r4, #0x1]
	b	.L49
.L135:
	.align	2, 0
.L134:
	.word	SetControllerToRecordedPlayer
.L50:
	ldr	r1, .L136
	ldr	r2, .L136+0x4
	str	r1, [r2]
	ldr	r2, .L136+0x8
	ldr	r0, .L136+0xc
	str	r0, [r2]
	ldr	r4, .L136+0x10
	strb	r5, [r4]
	ldr	r6, .L136+0x14
	str	r6, [r2, #0x4]
	strb	r7, [r4, #0x1]
	str	r0, [r2, #0x8]
	mov	r0, #0x2
	mov	ip, r0
	mov	r1, ip
	strb	r1, [r4, #0x2]
	str	r6, [r2, #0xc]
	mov	r0, #0x3
	mov	r8, r0
	mov	r1, r8
	strb	r1, [r4, #0x3]
	ldr	r0, .L136+0x18
	mov	sl, r0
	mov	r1, #0x4
	mov	r9, r1
	strb	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r3
	cmp	r0, #0
	bne	.LCB581
	b	.L49	@long jump
.LCB581:
	mov	r1, #0xa0
	lsl	r1, r1, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, r1
	bne	.L62	@cond_branch
	ldr	r0, .L136
	ldr	r1, .L136+0x4
	str	r0, [r1]
	ldr	r0, .L136+0x1c
	str	r0, [r2]
	strb	r5, [r4]
	str	r6, [r2, #0x4]
	strb	r7, [r4, #0x1]
	str	r0, [r2, #0x8]
	mov	r0, ip
	strb	r0, [r4, #0x2]
	str	r6, [r2, #0xc]
	mov	r1, r8
	strb	r1, [r4, #0x3]
	mov	r0, r9
	mov	r2, sl
	strb	r0, [r2]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x2
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x3
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
	ldr	r0, .L136+0x20
	strh	r5, [r0]
	strh	r5, [r0, #0x2]
	mov	r1, r8
.L117:
	strh	r1, [r0, #0x4]
	strh	r1, [r0, #0x6]
	b	.L49
.L137:
	.align	2, 0
.L136:
	.word	BeginBattleIntro
	.word	gBattleMainFunc
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToOpponent
	.word	gBattlersCount
	.word	SetControllerToRecordedPlayer
	.word	gBattlerPartyIndexes
.L62:
	mov	r5, #0x40
	and	r5, r5, r3
	cmp	r5, #0
	bne	.LCB646
	b	.L64	@long jump
.LCB646:
	ldr	r0, .L138
	ldrb	r5, [r0]
	mov	r0, #0x0
	mov	sl, r0
	ldr	r1, .L138+0x4
	mov	ip, r1
	add	r7, r4, #0
	mov	r8, r0
	ldr	r6, .L138+0x8
	mov	r4, #0x0
	mov	r2, #0x3
	mov	r9, r2
.L68:
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x2
	bgt	.L76	@cond_branch
	cmp	r0, #0x1
	bge	.L73	@cond_branch
	cmp	r0, #0
	beq	.L71	@cond_branch
	b	.L69
.L139:
	.align	2, 0
.L138:
	.word	gUnknown_0203C7B4
	.word	gLinkPlayers
	.word	gBattlerPartyIndexes
.L76:
	cmp	r0, #0x3
	bne	.L69	@cond_branch
.L71:
	ldr	r0, .L140
	add	r0, r4, r0
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	b	.L69
.L141:
	.align	2, 0
.L140:
	.word	gLinkPlayers
.L73:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
.L69:
	cmp	sl, r5
	bne	.L77	@cond_branch
	ldr	r0, .L142
	add	r3, r4, r0
	ldrh	r1, [r3, #0x18]
	lsl	r1, r1, #0x2
	ldr	r2, .L142+0x4
	add	r1, r1, r2
	ldr	r2, .L142+0x8
	str	r2, [r1]
	ldrh	r1, [r3, #0x18]
	mov	ip, r0
	cmp	r1, #0x2
	bgt	.L85	@cond_branch
	cmp	r1, #0x1
	bge	.L82	@cond_branch
	cmp	r1, #0
	beq	.L80	@cond_branch
	b	.L67
.L143:
	.align	2, 0
.L142:
	.word	gLinkPlayers
	.word	gBattlerControllerFuncs
	.word	SetControllerToRecordedPlayer
.L85:
	cmp	r1, #0x3
	bne	.L67	@cond_branch
.L80:
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r1, [r0, #0x18]
	add	r1, r1, r7
	mov	r2, r8
	strb	r2, [r1]
	ldrh	r0, [r0, #0x18]
	b	.L119
.L82:
	add	r1, r1, r7
	mov	r0, #0x2
	strb	r0, [r1]
	ldrh	r0, [r3, #0x18]
	b	.L120
.L77:
	ldr	r2, .L144
	add	r0, r4, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	mov	ip, r2
	cmp	r0, #0
	bne	.L115	@cond_branch
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	b	.L87
.L145:
	.align	2, 0
.L144:
	.word	gLinkPlayers
.L115:
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L87	@cond_branch
.L88:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	lsl	r0, r0, #0x2
	ldr	r1, .L146
	add	r0, r0, r1
	ldr	r1, .L146+0x4
	str	r1, [r0]
	ldrh	r1, [r2, #0x18]
	cmp	r1, #0x2
	bgt	.L97	@cond_branch
	cmp	r1, #0x1
	bge	.L94	@cond_branch
	cmp	r1, #0
	beq	.L92	@cond_branch
	b	.L67
.L147:
	.align	2, 0
.L146:
	.word	gBattlerControllerFuncs
	.word	SetControllerToRecordedPlayer
.L97:
	cmp	r1, #0x3
	bne	.L67	@cond_branch
.L92:
	mov	r2, ip
	add	r0, r4, r2
	ldrh	r1, [r0, #0x18]
	add	r1, r1, r7
	mov	r2, r8
	strb	r2, [r1]
	ldrh	r0, [r0, #0x18]
	b	.L119
.L94:
	add	r1, r1, r7
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L121
.L87:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	lsl	r0, r0, #0x2
	ldr	r1, .L148
	add	r0, r0, r1
	ldr	r1, .L148+0x4
	str	r1, [r0]
	ldrh	r0, [r2, #0x18]
	cmp	r0, #0x2
	bgt	.L106	@cond_branch
	cmp	r0, #0x1
	bge	.L103	@cond_branch
	cmp	r0, #0
	beq	.L101	@cond_branch
	b	.L67
.L149:
	.align	2, 0
.L148:
	.word	gBattlerControllerFuncs
	.word	SetControllerToRecordedOpponent
.L106:
	cmp	r0, #0x3
	bne	.L67	@cond_branch
.L101:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	add	r0, r0, r7
	mov	r1, #0x1
	strb	r1, [r0]
	ldrh	r0, [r2, #0x18]
.L119:
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r1, r8
	strh	r1, [r0]
	b	.L67
.L103:
	add	r0, r0, r7
	mov	r1, r9
	strb	r1, [r0]
.L121:
	ldrh	r0, [r2, #0x18]
.L120:
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r2, r9
	strh	r2, [r0]
.L67:
	add	r4, r4, #0x1c
	mov	r0, #0x1
	add	sl, sl, r0
	mov	r1, sl
	cmp	r1, #0x3
	bgt	.LCB936
	b	.L68	@long jump
.LCB936:
	b	.L49
.L64:
	mov	r1, #0x4
	and	r1, r1, r3
	cmp	r1, #0
	beq	.L109	@cond_branch
	ldr	r0, .L150
	str	r0, [r2]
	strb	r5, [r4]
	str	r0, [r2, #0x8]
	mov	r0, ip
	strb	r0, [r4, #0x2]
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L110	@cond_branch
	ldr	r0, .L150+0x4
	str	r0, [r2, #0x4]
	strb	r7, [r4, #0x1]
	str	r0, [r2, #0xc]
	mov	r1, r8
	strb	r1, [r4, #0x3]
	b	.L49
.L151:
	.align	2, 0
.L150:
	.word	SetControllerToRecordedPlayer
	.word	SetControllerToRecordedOpponent
.L110:
	str	r6, [r2, #0x4]
	strb	r7, [r4, #0x1]
	str	r6, [r2, #0xc]
	mov	r2, r8
	strb	r2, [r4, #0x3]
	b	.L49
.L109:
	ldr	r0, .L152
	str	r0, [r2, #0x4]
	strb	r1, [r4, #0x1]
	str	r0, [r2, #0xc]
	mov	r0, ip
	strb	r0, [r4, #0x3]
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	and	r3, r3, r0
	cmp	r3, #0
	beq	.L113	@cond_branch
	ldr	r0, .L152+0x4
	str	r0, [r2]
	strb	r7, [r4]
	str	r0, [r2, #0x8]
	mov	r1, r8
	strb	r1, [r4, #0x2]
	b	.L49
.L153:
	.align	2, 0
.L152:
	.word	SetControllerToRecordedPlayer
	.word	SetControllerToRecordedOpponent
.L113:
	str	r6, [r2]
	strb	r7, [r4]
	str	r6, [r2, #0x8]
	mov	r2, r8
	strb	r2, [r4, #0x2]
.L49:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 InitSinglePlayerBtlControllers,.Lfe4-InitSinglePlayerBtlControllers
	.align	2, 0
	.type	 InitLinkBtlControllers,function
	.thumb_func
InitLinkBtlControllers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L218
	ldr	r1, [r4]
	mov	r5, #0x1
	add	r3, r1, #0
	and	r3, r3, r5
	cmp	r3, #0
	bne	.L155	@cond_branch
	mov	r4, #0x4
	and	r4, r4, r1
	cmp	r4, #0
	beq	.L156	@cond_branch
	ldr	r1, .L218+0x4
	ldr	r0, .L218+0x8
	str	r0, [r1]
	ldr	r2, .L218+0xc
	ldr	r0, .L218+0x10
	str	r0, [r2]
	ldr	r1, .L218+0x14
	strb	r3, [r1]
	ldr	r0, .L218+0x18
	str	r0, [r2, #0x4]
	strb	r5, [r1, #0x1]
	ldr	r1, .L218+0x1c
	mov	r0, #0x2
	b	.L212
.L219:
	.align	2, 0
.L218:
	.word	gBattleTypeFlags
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
	.word	gBattlersCount
.L156:
	ldr	r2, .L220
	ldr	r0, .L220+0x4
	str	r0, [r2, #0x4]
	ldr	r1, .L220+0x8
	strb	r4, [r1, #0x1]
	ldr	r0, .L220+0xc
	str	r0, [r2]
	strb	r5, [r1]
	ldr	r1, .L220+0x10
	mov	r0, #0x2
	b	.L212
.L221:
	.align	2, 0
.L220:
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
	.word	gBattlersCount
.L155:
	mov	r0, #0x41
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L159	@cond_branch
	mov	r6, #0x4
	add	r3, r6, #0
	and	r3, r3, r1
	cmp	r3, #0
	beq	.L160	@cond_branch
	ldr	r1, .L222
	ldr	r0, .L222+0x4
	str	r0, [r1]
	ldr	r2, .L222+0x8
	ldr	r4, .L222+0xc
	str	r4, [r2]
	ldr	r1, .L222+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r3, .L222+0x14
	str	r3, [r2, #0x4]
	strb	r5, [r1, #0x1]
	str	r4, [r2, #0x8]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	str	r3, [r2, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
	b	.L213
.L223:
	.align	2, 0
.L222:
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
.L160:
	ldr	r2, .L224
	ldr	r0, .L224+0x4
	str	r0, [r2, #0x4]
	ldr	r1, .L224+0x8
	strb	r3, [r1, #0x1]
	ldr	r3, .L224+0xc
	str	r3, [r2]
	strb	r5, [r1]
	str	r0, [r2, #0xc]
	mov	r0, #0x2
	strb	r0, [r1, #0x3]
	str	r3, [r2, #0x8]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
.L213:
	ldr	r0, .L224+0x10
	strb	r6, [r0]
	b	.L158
.L225:
	.align	2, 0
.L224:
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
	.word	gBattlersCount
.L159:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L163	@cond_branch
	mov	r4, #0x4
	add	r3, r4, #0
	and	r3, r3, r1
	cmp	r3, #0
	beq	.L164	@cond_branch
	ldr	r1, .L226
	ldr	r0, .L226+0x4
	str	r0, [r1]
	ldr	r2, .L226+0x8
	ldr	r0, .L226+0xc
	str	r0, [r2]
	ldr	r1, .L226+0x10
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r3, .L226+0x14
	str	r3, [r2, #0x4]
	strb	r5, [r1, #0x1]
	ldr	r0, .L226+0x18
	b	.L214
.L227:
	.align	2, 0
.L226:
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
	.word	gBattlerPositions
	.word	SetControllerToOpponent
	.word	SetControllerToLinkPartner
.L164:
	ldr	r2, .L228
	ldr	r0, .L228+0x4
	str	r0, [r2]
	ldr	r1, .L228+0x8
	strb	r3, [r1]
	ldr	r3, .L228+0xc
	str	r3, [r2, #0x4]
	strb	r5, [r1, #0x1]
	ldr	r0, .L228+0x10
.L214:
	str	r0, [r2, #0x8]
	mov	r0, #0x2
	strb	r0, [r1, #0x2]
	str	r3, [r2, #0xc]
	mov	r0, #0x3
	strb	r0, [r1, #0x3]
	ldr	r0, .L228+0x14
	strb	r4, [r0]
	mov	r0, #0x0
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x2
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
	mov	r0, #0x3
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
	ldr	r0, .L228+0x18
	mov	r1, #0x0
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	mov	r1, #0x3
	strh	r1, [r0, #0x4]
	strh	r1, [r0, #0x6]
	b	.L158
.L229:
	.align	2, 0
.L228:
	.word	gBattlerControllerFuncs
	.word	SetControllerToLinkPartner
	.word	gBattlerPositions
	.word	SetControllerToLinkOpponent
	.word	SetControllerToPlayer
	.word	gBattlersCount
	.word	gBattlerPartyIndexes
.L163:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r4]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L167	@cond_branch
	ldr	r1, .L230
	ldr	r0, .L230+0x4
	str	r0, [r1]
.L167:
	mov	r0, #0x0
	mov	sl, r0
	ldr	r1, .L230+0x8
	mov	ip, r1
	ldr	r7, .L230+0xc
	mov	r8, r0
	ldr	r6, .L230+0x10
	mov	r4, #0x0
	mov	r2, #0x3
	mov	r9, r2
.L171:
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0x2
	bgt	.L179	@cond_branch
	cmp	r0, #0x1
	bge	.L176	@cond_branch
	cmp	r0, #0
	beq	.L174	@cond_branch
	b	.L172
.L231:
	.align	2, 0
.L230:
	.word	gBattleMainFunc
	.word	BeginBattleIntro
	.word	gLinkPlayers
	.word	gBattlerPositions
	.word	gBattlerPartyIndexes
.L179:
	cmp	r0, #0x3
	bne	.L172	@cond_branch
.L174:
	ldr	r0, .L232
	add	r0, r4, r0
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x0
	bl	BufferBattlePartyCurrentOrderBySide
	b	.L172
.L233:
	.align	2, 0
.L232:
	.word	gLinkPlayers
.L176:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	BufferBattlePartyCurrentOrderBySide
.L172:
	cmp	sl, r5
	bne	.L180	@cond_branch
	ldr	r0, .L234
	add	r3, r4, r0
	ldrh	r1, [r3, #0x18]
	lsl	r1, r1, #0x2
	ldr	r2, .L234+0x4
	add	r1, r1, r2
	ldr	r2, .L234+0x8
	str	r2, [r1]
	ldrh	r1, [r3, #0x18]
	mov	ip, r0
	cmp	r1, #0x2
	bgt	.L188	@cond_branch
	cmp	r1, #0x1
	bge	.L185	@cond_branch
	cmp	r1, #0
	beq	.L183	@cond_branch
	b	.L170
.L235:
	.align	2, 0
.L234:
	.word	gLinkPlayers
	.word	gBattlerControllerFuncs
	.word	SetControllerToPlayer
.L188:
	cmp	r1, #0x3
	bne	.L170	@cond_branch
.L183:
	mov	r1, ip
	add	r0, r4, r1
	ldrh	r1, [r0, #0x18]
	add	r1, r1, r7
	mov	r2, r8
	strb	r2, [r1]
	ldrh	r0, [r0, #0x18]
	b	.L215
.L185:
	add	r1, r1, r7
	mov	r0, #0x2
	strb	r0, [r1]
	ldrh	r0, [r3, #0x18]
	b	.L216
.L180:
	ldr	r2, .L236
	add	r0, r4, r2
	ldrh	r1, [r0, #0x18]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	mov	ip, r2
	cmp	r0, #0
	bne	.L211	@cond_branch
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L191	@cond_branch
	b	.L190
.L237:
	.align	2, 0
.L236:
	.word	gLinkPlayers
.L211:
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldrh	r1, [r0, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L190	@cond_branch
.L191:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	lsl	r0, r0, #0x2
	ldr	r1, .L238
	add	r0, r0, r1
	ldr	r1, .L238+0x4
	str	r1, [r0]
	ldrh	r1, [r2, #0x18]
	cmp	r1, #0x2
	bgt	.L200	@cond_branch
	cmp	r1, #0x1
	bge	.L197	@cond_branch
	cmp	r1, #0
	beq	.L195	@cond_branch
	b	.L170
.L239:
	.align	2, 0
.L238:
	.word	gBattlerControllerFuncs
	.word	SetControllerToLinkPartner
.L200:
	cmp	r1, #0x3
	bne	.L170	@cond_branch
.L195:
	mov	r2, ip
	add	r0, r4, r2
	ldrh	r1, [r0, #0x18]
	add	r1, r1, r7
	mov	r2, r8
	strb	r2, [r1]
	ldrh	r0, [r0, #0x18]
	b	.L215
.L197:
	add	r1, r1, r7
	mov	r0, #0x2
	strb	r0, [r1]
	b	.L217
.L190:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	lsl	r0, r0, #0x2
	ldr	r1, .L240
	add	r0, r0, r1
	ldr	r1, .L240+0x4
	str	r1, [r0]
	ldrh	r0, [r2, #0x18]
	cmp	r0, #0x2
	bgt	.L209	@cond_branch
	cmp	r0, #0x1
	bge	.L206	@cond_branch
	cmp	r0, #0
	beq	.L204	@cond_branch
	b	.L170
.L241:
	.align	2, 0
.L240:
	.word	gBattlerControllerFuncs
	.word	SetControllerToLinkOpponent
.L209:
	cmp	r0, #0x3
	bne	.L170	@cond_branch
.L204:
	mov	r0, ip
	add	r2, r4, r0
	ldrh	r0, [r2, #0x18]
	add	r0, r0, r7
	mov	r1, #0x1
	strb	r1, [r0]
	ldrh	r0, [r2, #0x18]
.L215:
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r1, r8
	strh	r1, [r0]
	b	.L170
.L206:
	add	r0, r0, r7
	mov	r1, r9
	strb	r1, [r0]
.L217:
	ldrh	r0, [r2, #0x18]
.L216:
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	mov	r2, r9
	strh	r2, [r0]
.L170:
	add	r4, r4, #0x1c
	mov	r0, #0x1
	add	sl, sl, r0
	mov	r1, sl
	cmp	r1, #0x3
	bgt	.LCB1568
	b	.L171	@long jump
.LCB1568:
	ldr	r1, .L242
	mov	r0, #0x4
.L212:
	strb	r0, [r1]
.L158:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L243:
	.align	2, 0
.L242:
	.word	gBattlersCount
.Lfe5:
	.size	 InitLinkBtlControllers,.Lfe5-InitLinkBtlControllers
	.align	2, 0
	.type	 SetBattlePartyIds,function
	.thumb_func
SetBattlePartyIds:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L270
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1598
	b	.L245	@long jump
.LCB1598:
	mov	r0, #0x0
	mov	r8, r0
	b	.L267
.L271:
	.align	2, 0
.L270:
	.word	gBattleTypeFlags
.L249:
	mov	r5, #0x0
	mov	r0, #0x1
	add	r0, r0, r8
	mov	sl, r0
	ldr	r0, .L272
	add	r0, r0, r8
	mov	r9, r0
	mov	r0, r8
	lsl	r6, r0, #0x1
	mov	r7, #0x0
.L253:
	mov	r0, r8
	cmp	r0, #0x1
	bgt	.L254	@cond_branch
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L255	@cond_branch
	ldr	r0, .L272+0x4
	b	.L268
.L273:
	.align	2, 0
.L272:
	.word	gBattlerPositions
	.word	gPlayerParty
.L255:
	ldr	r0, .L274
.L268:
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L252	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L252	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L252	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r0, .L274+0x4
	add	r0, r6, r0
	strh	r5, [r0]
	b	.L248
.L275:
	.align	2, 0
.L274:
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L254:
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L260	@cond_branch
	ldr	r0, .L276
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L252	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	b	.L269
.L277:
	.align	2, 0
.L276:
	.word	gPlayerParty
.L260:
	ldr	r0, .L278
	add	r4, r7, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L252	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
.L269:
	bl	GetMonData
	cmp	r0, #0
	beq	.L252	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L252	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r1, .L278+0x4
	mov	r0, r8
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r5
	beq	.L252	@cond_branch
	add	r0, r6, r1
	strh	r5, [r0]
	b	.L248
.L279:
	.align	2, 0
.L278:
	.word	gEnemyParty
	.word	gBattlerPartyIndexes
.L252:
	add	r7, r7, #0x64
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L253	@cond_branch
.L248:
	mov	r8, sl
.L267:
	ldr	r0, .L280
	ldrb	r0, [r0]
	cmp	r8, r0
	bge	.LCB1804
	b	.L249	@long jump
.LCB1804:
	ldr	r0, .L280+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L245	@cond_branch
	ldr	r0, .L280+0x8
	mov	r1, #0x0
	strh	r1, [r0, #0x2]
	mov	r1, #0x3
	strh	r1, [r0, #0x6]
.L245:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	gBattlersCount
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.Lfe6:
	.size	 SetBattlePartyIds,.Lfe6-SetBattlePartyIds
	.align	2, 0
	.type	 PrepareBufferDataTransfer,function
	.thumb_func
PrepareBufferDataTransfer:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r5, r3, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L300
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L283	@cond_branch
	add	r0, r3, #0
	add	r1, r2, #0
	add	r2, r4, #0
	bl	PrepareBufferDataTransferLink
	b	.L284
.L301:
	.align	2, 0
.L300:
	.word	gBattleTypeFlags
.L283:
	cmp	r5, #0
	beq	.L286	@cond_branch
	cmp	r5, #0x1
	beq	.L292	@cond_branch
	b	.L284
.L286:
	mov	r3, #0x0
	cmp	r3, r2
	bge	.L284	@cond_branch
	ldr	r6, .L302
	ldr	r5, .L302+0x4
.L290:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	blt	.L290	@cond_branch
	b	.L284
.L303:
	.align	2, 0
.L302:
	.word	gBattleBufferA
	.word	gActiveBattler
.L292:
	mov	r3, #0x0
	cmp	r3, r2
	bge	.L284	@cond_branch
	ldr	r6, .L304
	ldr	r5, .L304+0x4
.L296:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r1, [r4]
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	blt	.L296	@cond_branch
.L284:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gBattleBufferB
	.word	gActiveBattler
.Lfe7:
	.size	 PrepareBufferDataTransfer,.Lfe7-PrepareBufferDataTransfer
	.align	2, 0
	.type	 CreateTasksForSendRecvLinkBuffers,function
	.thumb_func
CreateTasksForSendRecvLinkBuffers:
	push	{r4, r5, r6, lr}
	ldr	r0, .L307
	mov	r1, #0x0
	bl	CreateTask
	ldr	r2, .L307+0x4
	strb	r0, [r2]
	ldr	r5, .L307+0x8
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r6, #0x0
	mov	r4, #0x0
	strh	r4, [r0, #0x1e]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x20]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x22]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x24]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x26]
	ldr	r0, .L307+0xc
	mov	r1, #0x0
	bl	CreateTask
	ldr	r2, .L307+0x10
	strb	r0, [r2]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x20]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x22]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x24]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r4, [r0, #0x26]
	ldr	r0, .L307+0x14
	strb	r6, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L308:
	.align	2, 0
.L307:
	.word	Task_HandleSendLinkBuffersData
	.word	sLinkSendTaskId
	.word	gTasks
	.word	Task_HandleCopyReceivedLinkBuffersData
	.word	sLinkReceiveTaskId
	.word	sUnknown_02022D0A
.Lfe8:
	.size	 CreateTasksForSendRecvLinkBuffers,.Lfe8-CreateTasksForSendRecvLinkBuffers
	.align	2, 0
	.globl	PrepareBufferDataTransferLink
	.type	 PrepareBufferDataTransferLink,function
	.thumb_func
PrepareBufferDataTransferLink:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	ip, r1
	mov	r1, #0x3
	mov	r0, ip
	bic	r0, r0, r1
	add	r0, r0, #0x4
	mov	r8, r0
	ldr	r2, .L316
	ldr	r3, .L316+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	add	r0, r0, r8
	add	r0, r0, #0x9
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	add	r5, r2, #0
	cmp	r0, r1
	ble	.L310	@cond_branch
	ldrh	r0, [r4, #0x24]
	mov	r2, #0x0
	strh	r0, [r4, #0x20]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	strh	r2, [r0, #0x24]
.L310:
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	ldr	r4, .L316+0x8
	ldr	r0, [r4]
	add	r0, r0, r1
	strb	r6, [r0]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L316+0xc
	ldrb	r0, [r0]
	strb	r0, [r1, #0x1]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L316+0x10
	ldrb	r0, [r0]
	strb	r0, [r1, #0x2]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L316+0x14
	ldrb	r0, [r0]
	strb	r0, [r1, #0x3]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	ldr	r1, [r4]
	add	r0, r0, r1
	mov	r2, r8
	strb	r2, [r0, #0x4]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r1, r0
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	mov	r2, r8
	and	r0, r0, r2
	asr	r0, r0, #0x8
	strb	r0, [r1, #0x5]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L316+0x18
	ldrb	r0, [r0]
	strb	r0, [r1, #0x6]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	mov	r2, #0x24
	ldrsh	r1, [r0, r2]
	ldr	r0, [r4]
	add	r1, r1, r0
	ldr	r0, .L316+0x1c
	ldrb	r0, [r0]
	strb	r0, [r1, #0x7]
	mov	r2, #0x0
	cmp	r2, ip
	bge	.L312	@cond_branch
	mov	sl, r5
	add	r6, r3, #0
.L314:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, sl
	mov	r7, #0x24
	ldrsh	r1, [r0, r7]
	ldr	r0, [r4]
	add	r1, r2, r1
	add	r1, r1, r0
	mov	r7, r9
	add	r0, r7, r2
	ldrb	r0, [r0]
	strb	r0, [r1, #0x8]
	add	r2, r2, #0x1
	cmp	r2, ip
	blt	.L314	@cond_branch
.L312:
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldrh	r0, [r1, #0x24]
	add	r0, r0, r8
	add	r0, r0, #0x8
	strh	r0, [r1, #0x24]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L317:
	.align	2, 0
.L316:
	.word	gTasks
	.word	sLinkSendTaskId
	.word	gLinkBattleSendBuffer
	.word	gActiveBattler
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gEffectBattler
.Lfe9:
	.size	 PrepareBufferDataTransferLink,.Lfe9-PrepareBufferDataTransferLink
	.align	2, 0
	.type	 Task_HandleSendLinkBuffersData,function
	.thumb_func
Task_HandleSendLinkBuffersData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L347
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x1e
	ldrsh	r0, [r0, r2]
	add	r7, r1, #0
	cmp	r0, #0x5
	bls	.LCB2244
	b	.L319	@long jump
.LCB2244:
	lsl	r0, r0, #0x2
	ldr	r1, .L347+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L348:
	.align	2, 0
.L347:
	.word	gTasks
	.word	.L342
	.align	2, 0
	.align	2, 0
.L342:
	.word	.L320
	.word	.L321
	.word	.L323
	.word	.L333
	.word	.L338
	.word	.L340
.L320:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x64
	strh	r1, [r0, #0x1c]
	b	.L344
.L321:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r7
	ldrh	r0, [r1, #0x1c]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB2286
	b	.L319	@long jump
.LCB2286:
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	b	.L345
.L323:
	ldr	r0, .L349
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L324	@cond_branch
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r7
.L344:
	ldrh	r1, [r0, #0x1e]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x1e]
	b	.L319
.L350:
	.align	2, 0
.L349:
	.word	gWirelessCommType
.L324:
	ldr	r0, .L351
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L326	@cond_branch
	mov	r5, #0x2
	b	.L327
.L352:
	.align	2, 0
.L351:
	.word	gBattleTypeFlags
.L326:
	mov	r0, #0x40
	and	r1, r1, r0
	mov	r0, #0x2
	cmp	r1, #0
	beq	.L328	@cond_branch
	mov	r0, #0x4
.L328:
	add	r5, r0, #0
.L327:
	bl	GetLinkPlayerCount_2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r5
	bcs	.LCB2352
	b	.L319	@long jump
.LCB2352:
	bl	IsLinkMaster
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L331	@cond_branch
	bl	CheckShouldAdvanceLinkState
	ldr	r0, .L353
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	b	.L345
.L354:
	.align	2, 0
.L353:
	.word	gTasks
.L331:
	ldr	r0, .L355
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	b	.L345
.L356:
	.align	2, 0
.L355:
	.word	gTasks
.L333:
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	mov	r3, #0x26
	ldrsh	r5, [r2, r3]
	mov	r0, #0x24
	ldrsh	r6, [r2, r0]
	mov	ip, r6
	cmp	r5, ip
	beq	.L319	@cond_branch
	ldrh	r0, [r2, #0x22]
	mov	r6, #0x22
	ldrsh	r3, [r2, r6]
	cmp	r3, #0
	bne	.L335	@cond_branch
	cmp	r5, ip
	ble	.L336	@cond_branch
	mov	r6, #0x20
	ldrsh	r0, [r2, r6]
	cmp	r5, r0
	bne	.L336	@cond_branch
	strh	r3, [r2, #0x20]
	strh	r3, [r2, #0x26]
.L336:
	add	r4, r1, r4
	lsl	r4, r4, #0x3
	add	r4, r4, r7
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	ldr	r5, .L357
	ldr	r0, [r5]
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	ldrb	r1, [r1, #0x5]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	add	r0, r0, #0x8
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	bl	bitmask_all_link_players_but_self
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x26
	ldrsh	r2, [r4, r1]
	ldr	r1, [r5]
	add	r1, r1, r2
	add	r2, r6, #0
	bl	SendBlock
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	b	.L319
.L358:
	.align	2, 0
.L357:
	.word	gLinkBattleSendBuffer
.L335:
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x22]
	b	.L319
.L338:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L319	@cond_branch
	ldr	r0, .L359
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r3, #0x26
	ldrsh	r2, [r1, r3]
	ldr	r0, .L359+0x4
	ldr	r0, [r0]
	add	r2, r2, r0
	ldrb	r0, [r2, #0x4]
	ldrb	r2, [r2, #0x5]
	lsl	r2, r2, #0x8
	mov	r3, #0x1
	strh	r3, [r1, #0x22]
	orr	r0, r0, r2
	ldrh	r6, [r1, #0x26]
	add	r0, r0, r6
	add	r0, r0, #0x8
	strh	r0, [r1, #0x26]
	b	.L346
.L360:
	.align	2, 0
.L359:
	.word	gTasks
	.word	gLinkBattleSendBuffer
.L340:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r1, r0, r7
	ldrh	r0, [r1, #0x22]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0x22]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L319	@cond_branch
	mov	r0, #0x1
	strh	r0, [r1, #0x22]
.L346:
	mov	r0, #0x3
.L345:
	strh	r0, [r1, #0x1e]
.L319:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 Task_HandleSendLinkBuffersData,.Lfe10-Task_HandleSendLinkBuffersData
	.align	2, 0
	.globl	sub_8033648
	.type	 sub_8033648,function
	.thumb_func
sub_8033648:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L375
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L362	@cond_branch
	ldr	r0, .L375+0x4
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L362	@cond_branch
	bl	sub_8011BD0
	mov	r4, #0x0
	ldr	r0, .L375+0x8
	mov	sl, r0
	b	.L363
.L376:
	.align	2, 0
.L375:
	.word	gReceivedRemoteLinkPlayers
	.word	gBattleTypeFlags
	.word	gBlockRecvBuffer
.L366:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L377
	lsl	r1, r4, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	and	r0, r0, r1
	add	r1, r4, #0x1
	mov	r9, r1
	cmp	r0, #0
	beq	.L365	@cond_branch
	add	r0, r4, #0
	bl	ResetBlockReceivedFlag
	lsl	r0, r4, #0x8
	mov	r4, sl
	add	r3, r0, r4
	ldr	r1, .L377+0x4
	add	r0, r0, r1
	ldrh	r6, [r0]
	ldr	r7, .L377+0x8
	ldr	r4, .L377+0xc
	mov	ip, r4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r0, r7
	mov	r0, #0x24
	ldrsh	r1, [r2, r0]
	add	r0, r6, #0
	add	r0, r0, #0x9
	add	r1, r1, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	ble	.L368	@cond_branch
	ldrh	r0, [r2, #0x24]
	strh	r0, [r2, #0x20]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
.L368:
	ldr	r2, .L377+0x10
	mov	r4, ip
	ldrb	r1, [r4]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	mov	r4, #0x24
	ldrsh	r1, [r0, r4]
	ldr	r0, [r2]
	add	r5, r0, r1
	add	r4, r3, #0
	mov	r2, #0x0
	add	r3, r6, #0
	add	r3, r3, #0x8
	mov	r8, r7
	mov	r7, ip
	cmp	r2, r3
	bge	.L370	@cond_branch
.L372:
	add	r0, r5, r2
	add	r1, r4, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, r3
	blt	.L372	@cond_branch
.L370:
	ldrb	r0, [r7]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r8
	ldrh	r0, [r1, #0x24]
	add	r0, r6, r0
	add	r0, r0, #0x8
	strh	r0, [r1, #0x24]
.L365:
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r4, r0, #0x18
.L363:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L366	@cond_branch
.L362:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L378:
	.align	2, 0
.L377:
	.word	gBitTable
	.word	gBlockRecvBuffer+0x4
	.word	gTasks
	.word	sLinkReceiveTaskId
	.word	gLinkBattleRecvBuffer
.Lfe11:
	.size	 sub_8033648,.Lfe11-sub_8033648
	.align	2, 0
	.type	 Task_HandleCopyReceivedLinkBuffersData,function
	.thumb_func
Task_HandleCopyReceivedLinkBuffersData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L391
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r0, #0x26
	ldrsh	r2, [r3, r0]
	mov	r4, #0x24
	ldrsh	r0, [r3, r4]
	cmp	r2, r0
	bne	.LCB2721
	b	.L379	@long jump
.LCB2721:
	cmp	r2, r0
	ble	.L381	@cond_branch
	mov	r4, #0x20
	ldrsh	r0, [r3, r4]
	cmp	r2, r0
	bne	.L381	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x20]
	strh	r0, [r3, #0x26]
.L381:
	lsl	r2, r7, #0x2
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r0, #0x26
	ldrsh	r1, [r5, r0]
	ldr	r3, .L391+0x4
	mov	r8, r3
	ldr	r0, [r3]
	add	r3, r1, r0
	ldrb	r4, [r3, #0x1]
	ldrb	r6, [r3, #0x4]
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldrb	r0, [r3]
	mov	r9, r2
	cmp	r0, #0x1
	beq	.L386	@cond_branch
	cmp	r0, #0x1
	bgt	.L390	@cond_branch
	cmp	r0, #0
	beq	.L383	@cond_branch
	b	.L382
.L392:
	.align	2, 0
.L391:
	.word	gTasks
	.word	gLinkBattleRecvBuffer
.L390:
	cmp	r0, #0x2
	beq	.L387	@cond_branch
	b	.L382
.L383:
	ldr	r2, .L393
	ldr	r1, .L393+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L379	@cond_branch
	lsl	r0, r4, #0x9
	ldr	r1, .L393+0x8
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r2, r6, #0
	bl	memcpy
	add	r0, r4, #0
	bl	sub_803F850
	ldr	r0, .L393+0xc
	ldr	r0, [r0]
	mov	r1, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L382	@cond_branch
	ldr	r2, .L393+0x10
	mov	r4, #0x26
	ldrsh	r0, [r5, r4]
	mov	r3, r8
	ldr	r1, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	strb	r0, [r2]
	ldr	r2, .L393+0x14
	mov	r4, #0x26
	ldrsh	r0, [r5, r4]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x3]
	strb	r0, [r2]
	ldr	r2, .L393+0x18
	mov	r3, #0x26
	ldrsh	r0, [r5, r3]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x6]
	strb	r0, [r2]
	ldr	r2, .L393+0x1c
	mov	r4, #0x26
	ldrsh	r0, [r5, r4]
	add	r0, r0, r1
	ldrb	r0, [r0, #0x7]
	strb	r0, [r2]
	b	.L382
.L394:
	.align	2, 0
.L393:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gBattleBufferA
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
	.word	gEffectBattler
.L386:
	lsl	r0, r4, #0x9
	ldr	r1, .L395
	add	r0, r0, r1
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r2, r6, #0
	bl	memcpy
	b	.L382
.L396:
	.align	2, 0
.L395:
	.word	gBattleBufferB
.L387:
	ldrb	r2, [r3, #0x8]
	ldr	r3, .L397
	ldr	r1, .L397+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	lsl	r2, r2, #0x2
	ldr	r1, [r0]
	lsl	r1, r1, r2
	ldr	r0, [r3]
	bic	r0, r0, r1
	str	r0, [r3]
.L382:
	ldr	r0, .L397+0x8
	mov	r2, r9
	add	r1, r2, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	add	r0, r6, r0
	add	r0, r0, #0x8
	strh	r0, [r1, #0x26]
.L379:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L398:
	.align	2, 0
.L397:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gTasks
.Lfe12:
	.size	 Task_HandleCopyReceivedLinkBuffersData,.Lfe12-Task_HandleCopyReceivedLinkBuffersData
	.align	2, 0
	.globl	BtlController_EmitGetMonData
	.type	 BtlController_EmitGetMonData,function
	.thumb_func
BtlController_EmitGetMonData:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L400
	mov	r3, #0x0
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L401:
	.align	2, 0
.L400:
	.word	sBattleBuffersTransferData
.Lfe13:
	.size	 BtlController_EmitGetMonData,.Lfe13-BtlController_EmitGetMonData
	.align	2, 0
	.globl	BtlController_EmitGetRawMonData
	.type	 BtlController_EmitGetRawMonData,function
	.thumb_func
BtlController_EmitGetRawMonData:
	push	{r4, r5, lr}
	add	r5, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L403
	mov	r4, #0x0
	mov	r3, #0x1
	strb	r3, [r1]
	strb	r5, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r4, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	sBattleBuffersTransferData
.Lfe14:
	.size	 BtlController_EmitGetRawMonData,.Lfe14-BtlController_EmitGetRawMonData
	.align	2, 0
	.globl	BtlController_EmitSetMonData
	.type	 BtlController_EmitSetMonData,function
	.thumb_func
BtlController_EmitSetMonData:
	push	{r4, r5, r6, lr}
	ldr	r4, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r3, r3, #0x18
	lsr	r5, r3, #0x18
	ldr	r0, .L411
	mov	r3, #0x2
	strb	r3, [r0]
	strb	r1, [r0, #0x1]
	strb	r2, [r0, #0x2]
	add	r1, r0, #0
	cmp	r5, #0
	beq	.L407	@cond_branch
	add	r3, r1, #0x3
	add	r2, r5, #0
.L409:
	ldrb	r0, [r4]
	strb	r0, [r3]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L409	@cond_branch
.L407:
	add	r2, r5, #0x3
	add	r0, r6, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L412:
	.align	2, 0
.L411:
	.word	sBattleBuffersTransferData
.Lfe15:
	.size	 BtlController_EmitSetMonData,.Lfe15-BtlController_EmitSetMonData
	.align	2, 0
	.globl	BtlController_EmitSetRawMonData
	.type	 BtlController_EmitSetRawMonData,function
	.thumb_func
BtlController_EmitSetRawMonData:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	ldr	r0, .L419
	mov	r2, #0x3
	strb	r2, [r0]
	strb	r1, [r0, #0x1]
	strb	r4, [r0, #0x2]
	add	r5, r0, #0
	cmp	r4, #0
	beq	.L415	@cond_branch
	add	r1, r5, #0x3
	add	r2, r4, #0
.L417:
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r3, r3, #0x1
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L417	@cond_branch
.L415:
	add	r2, r4, #0x3
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L420:
	.align	2, 0
.L419:
	.word	sBattleBuffersTransferData
.Lfe16:
	.size	 BtlController_EmitSetRawMonData,.Lfe16-BtlController_EmitSetRawMonData
	.align	2, 0
	.globl	BtlController_EmitLoadMonSprite
	.type	 BtlController_EmitLoadMonSprite,function
	.thumb_func
BtlController_EmitLoadMonSprite:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L422
	mov	r2, #0x4
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L423:
	.align	2, 0
.L422:
	.word	sBattleBuffersTransferData
.Lfe17:
	.size	 BtlController_EmitLoadMonSprite,.Lfe17-BtlController_EmitLoadMonSprite
	.align	2, 0
	.globl	BtlController_EmitSwitchInAnim
	.type	 BtlController_EmitSwitchInAnim,function
	.thumb_func
BtlController_EmitSwitchInAnim:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L425
	mov	r3, #0x5
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L426:
	.align	2, 0
.L425:
	.word	sBattleBuffersTransferData
.Lfe18:
	.size	 BtlController_EmitSwitchInAnim,.Lfe18-BtlController_EmitSwitchInAnim
	.align	2, 0
	.globl	BtlController_EmitReturnMonToBall
	.type	 BtlController_EmitReturnMonToBall,function
	.thumb_func
BtlController_EmitReturnMonToBall:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L428
	mov	r2, #0x6
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L429:
	.align	2, 0
.L428:
	.word	sBattleBuffersTransferData
.Lfe19:
	.size	 BtlController_EmitReturnMonToBall,.Lfe19-BtlController_EmitReturnMonToBall
	.align	2, 0
	.globl	BtlController_EmitDrawTrainerPic
	.type	 BtlController_EmitDrawTrainerPic,function
	.thumb_func
BtlController_EmitDrawTrainerPic:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L431
	mov	r2, #0x7
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L432:
	.align	2, 0
.L431:
	.word	sBattleBuffersTransferData
.Lfe20:
	.size	 BtlController_EmitDrawTrainerPic,.Lfe20-BtlController_EmitDrawTrainerPic
	.align	2, 0
	.globl	BtlController_EmitTrainerSlide
	.type	 BtlController_EmitTrainerSlide,function
	.thumb_func
BtlController_EmitTrainerSlide:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L434
	mov	r2, #0x8
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	sBattleBuffersTransferData
.Lfe21:
	.size	 BtlController_EmitTrainerSlide,.Lfe21-BtlController_EmitTrainerSlide
	.align	2, 0
	.globl	BtlController_EmitTrainerSlideBack
	.type	 BtlController_EmitTrainerSlideBack,function
	.thumb_func
BtlController_EmitTrainerSlideBack:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L437
	mov	r2, #0x9
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L438:
	.align	2, 0
.L437:
	.word	sBattleBuffersTransferData
.Lfe22:
	.size	 BtlController_EmitTrainerSlideBack,.Lfe22-BtlController_EmitTrainerSlideBack
	.align	2, 0
	.globl	BtlController_EmitFaintAnimation
	.type	 BtlController_EmitFaintAnimation,function
	.thumb_func
BtlController_EmitFaintAnimation:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L440
	mov	r2, #0xa
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	sBattleBuffersTransferData
.Lfe23:
	.size	 BtlController_EmitFaintAnimation,.Lfe23-BtlController_EmitFaintAnimation
	.align	2, 0
	.globl	BtlController_EmitPaletteFade
	.type	 BtlController_EmitPaletteFade,function
	.thumb_func
BtlController_EmitPaletteFade:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L443
	mov	r2, #0xb
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	sBattleBuffersTransferData
.Lfe24:
	.size	 BtlController_EmitPaletteFade,.Lfe24-BtlController_EmitPaletteFade
	.align	2, 0
	.globl	BtlController_EmitSuccessBallThrowAnim
	.type	 BtlController_EmitSuccessBallThrowAnim,function
	.thumb_func
BtlController_EmitSuccessBallThrowAnim:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L446
	mov	r2, #0xc
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L447:
	.align	2, 0
.L446:
	.word	sBattleBuffersTransferData
.Lfe25:
	.size	 BtlController_EmitSuccessBallThrowAnim,.Lfe25-BtlController_EmitSuccessBallThrowAnim
	.align	2, 0
	.globl	BtlController_EmitBallThrowAnim
	.type	 BtlController_EmitBallThrowAnim,function
	.thumb_func
BtlController_EmitBallThrowAnim:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L449
	mov	r2, #0xd
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L450:
	.align	2, 0
.L449:
	.word	sBattleBuffersTransferData
.Lfe26:
	.size	 BtlController_EmitBallThrowAnim,.Lfe26-BtlController_EmitBallThrowAnim
	.align	2, 0
	.globl	BtlController_EmitPause
	.type	 BtlController_EmitPause,function
	.thumb_func
BtlController_EmitPause:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r1, .L457
	mov	r0, #0xe
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	add	r5, r1, #0
	cmp	r0, #0
	beq	.L453	@cond_branch
	add	r1, r5, #0x2
	add	r3, r0, #0
.L455:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L455	@cond_branch
.L453:
	lsl	r2, r4, #0x1
	add	r2, r2, r4
	add	r2, r2, #0x2
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L458:
	.align	2, 0
.L457:
	.word	sBattleBuffersTransferData
.Lfe27:
	.size	 BtlController_EmitPause,.Lfe27-BtlController_EmitPause
	.align	2, 0
	.globl	BtlController_EmitMoveAnimation
	.type	 BtlController_EmitMoveAnimation,function
	.thumb_func
BtlController_EmitMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	ldr	r6, [sp, #0x2c]
	mov	r8, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r7, .L462
	mov	r0, #0x0
	mov	ip, r0
	mov	r0, #0xf
	strb	r0, [r7]
	strb	r1, [r7, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r7, #0x2]
	strb	r2, [r7, #0x3]
	strb	r3, [r7, #0x4]
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	lsr	r3, r3, #0x8
	strb	r3, [r7, #0x5]
	strb	r4, [r7, #0x6]
	add	r0, r4, #0
	and	r0, r0, r6
	asr	r0, r0, #0x8
	strb	r0, [r7, #0x7]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r4
	asr	r0, r0, #0x10
	strb	r0, [r7, #0x8]
	lsr	r4, r4, #0x18
	strb	r4, [r7, #0x9]
	strb	r5, [r7, #0xa]
	mov	r0, r8
	strb	r0, [r7, #0xb]
	mov	r0, ip
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0xd
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L460	@cond_branch
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x4d
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L460	@cond_branch
	ldr	r0, .L462+0x4
	ldrh	r0, [r0]
	strb	r0, [r7, #0xc]
	and	r6, r6, r0
	lsr	r0, r6, #0x8
	strb	r0, [r7, #0xd]
	add	r4, r7, #0
	b	.L461
.L463:
	.align	2, 0
.L462:
	.word	sBattleBuffersTransferData
	.word	gBattleWeather
.L460:
	ldr	r0, .L464
	mov	r1, #0x0
	strb	r1, [r0, #0xc]
	strb	r1, [r0, #0xd]
	add	r4, r0, #0
.L461:
	mov	r0, #0x0
	strb	r0, [r4, #0xe]
	strb	r0, [r4, #0xf]
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldr	r1, [sp, #0x28]
	mov	r2, #0x1c
	bl	memcpy
	mov	r0, r9
	add	r1, r4, #0
	mov	r2, #0x2c
	bl	PrepareBufferDataTransfer
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L465:
	.align	2, 0
.L464:
	.word	sBattleBuffersTransferData
.Lfe28:
	.size	 BtlController_EmitMoveAnimation,.Lfe28-BtlController_EmitMoveAnimation
	.align	2, 0
	.globl	BtlController_EmitPrintString
	.type	 BtlController_EmitPrintString,function
	.thumb_func
BtlController_EmitPrintString:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L477
	mov	r0, #0x10
	strb	r0, [r2]
	ldr	r0, .L477+0x4
	ldrb	r0, [r0]
	strb	r0, [r2, #0x1]
	strb	r1, [r2, #0x2]
	lsr	r1, r1, #0x8
	strb	r1, [r2, #0x3]
	add	r0, r2, #0x4
	mov	ip, r0
	ldr	r4, .L477+0x8
	ldrh	r0, [r4]
	strh	r0, [r2, #0x4]
	ldr	r0, .L477+0xc
	ldrh	r0, [r0]
	mov	r1, ip
	strh	r0, [r1, #0x2]
	ldr	r0, .L477+0x10
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L477+0x14
	ldrb	r0, [r0]
	strb	r0, [r1, #0x6]
	ldr	r0, .L477+0x18
	ldrb	r0, [r0, #0x17]
	strb	r0, [r1, #0x7]
	ldr	r0, .L477+0x1c
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x52
	ldrb	r1, [r1]
	mov	r3, ip
	strb	r1, [r3, #0x8]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	strb	r0, [r3, #0x9]
	ldr	r0, .L477+0x20
	ldrb	r0, [r0]
	strb	r0, [r3, #0xa]
	ldr	r3, .L477+0x24
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x2]
	mov	r7, ip
	strb	r0, [r7, #0xb]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r0, .L477+0x28
	mov	r8, r0
	add	r2, r2, #0x10
	ldr	r0, .L477+0x2c
	add	r4, r0, #0
	add	r4, r4, #0x20
.L470:
	add	r1, r2, r3
	ldrb	r0, [r4]
	strb	r0, [r1]
	add	r4, r4, #0x58
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L470	@cond_branch
	mov	r3, #0x0
	mov	r5, ip
	add	r5, r5, #0x10
	mov	r4, ip
	add	r4, r4, #0x20
	ldr	r6, .L477+0x30
	mov	r2, ip
	add	r2, r2, #0x30
.L475:
	add	r1, r5, r3
	ldr	r7, .L477+0x34
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r4, r3
	add	r0, r3, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r2, r3
	mov	r7, r8
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0xf
	ble	.L475	@cond_branch
	mov	r0, sl
	mov	r1, r9
	mov	r2, #0x44
	bl	PrepareBufferDataTransfer
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L478:
	.align	2, 0
.L477:
	.word	sBattleBuffersTransferData
	.word	gBattleOutcome
	.word	gCurrentMove
	.word	gChosenMove
	.word	gLastUsedItem
	.word	gLastUsedAbility
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gPotentialItemEffectBattler
	.word	gBattleMoves
	.word	gBattleTextBuff3
	.word	gBattleMons
	.word	gBattleTextBuff2
	.word	gBattleTextBuff1
.Lfe29:
	.size	 BtlController_EmitPrintString,.Lfe29-BtlController_EmitPrintString
	.align	2, 0
	.globl	BtlController_EmitPrintSelectionString
	.type	 BtlController_EmitPrintSelectionString,function
	.thumb_func
BtlController_EmitPrintSelectionString:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r2, .L490
	mov	r0, #0x11
	strb	r0, [r2]
	strb	r0, [r2, #0x1]
	strb	r1, [r2, #0x2]
	lsr	r1, r1, #0x8
	strb	r1, [r2, #0x3]
	add	r0, r2, #0x4
	mov	ip, r0
	ldr	r0, .L490+0x4
	ldrh	r0, [r0]
	strh	r0, [r2, #0x4]
	ldr	r0, .L490+0x8
	ldrh	r0, [r0]
	mov	r1, ip
	strh	r0, [r1, #0x2]
	ldr	r0, .L490+0xc
	ldrh	r0, [r0]
	strh	r0, [r1, #0x4]
	ldr	r0, .L490+0x10
	ldrb	r0, [r0]
	strb	r0, [r1, #0x6]
	ldr	r0, .L490+0x14
	ldrb	r0, [r0, #0x17]
	strb	r0, [r1, #0x7]
	ldr	r0, .L490+0x18
	ldr	r0, [r0]
	add	r0, r0, #0x52
	ldrb	r0, [r0]
	strb	r0, [r1, #0x8]
	mov	r3, #0x0
	mov	r9, r2
	ldr	r7, .L490+0x1c
	mov	r8, r7
	mov	r4, r9
	add	r4, r4, #0x10
	ldr	r0, .L490+0x20
	add	r2, r0, #0
	add	r2, r2, #0x20
.L483:
	add	r1, r4, r3
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x58
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L483	@cond_branch
	mov	r3, #0x0
	mov	r5, ip
	add	r5, r5, #0x10
	mov	r4, ip
	add	r4, r4, #0x20
	ldr	r6, .L490+0x24
	mov	r2, ip
	add	r2, r2, #0x30
.L488:
	add	r1, r5, r3
	ldr	r7, .L490+0x28
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r4, r3
	add	r0, r3, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r2, r3
	mov	r7, r8
	add	r0, r3, r7
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1
	cmp	r3, #0xf
	ble	.L488	@cond_branch
	mov	r0, sl
	mov	r1, r9
	mov	r2, #0x44
	bl	PrepareBufferDataTransfer
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L491:
	.align	2, 0
.L490:
	.word	sBattleBuffersTransferData
	.word	gCurrentMove
	.word	gChosenMove
	.word	gLastUsedItem
	.word	gLastUsedAbility
	.word	gBattleScripting
	.word	gBattleStruct
	.word	gBattleTextBuff3
	.word	gBattleMons
	.word	gBattleTextBuff2
	.word	gBattleTextBuff1
.Lfe30:
	.size	 BtlController_EmitPrintSelectionString,.Lfe30-BtlController_EmitPrintSelectionString
	.align	2, 0
	.globl	BtlController_EmitChooseAction
	.type	 BtlController_EmitChooseAction,function
	.thumb_func
BtlController_EmitChooseAction:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L493
	mov	r3, #0x12
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L494:
	.align	2, 0
.L493:
	.word	sBattleBuffersTransferData
.Lfe31:
	.size	 BtlController_EmitChooseAction,.Lfe31-BtlController_EmitChooseAction
	.align	2, 0
	.globl	BtlController_EmitUnknownYesNoBox
	.type	 BtlController_EmitUnknownYesNoBox,function
	.thumb_func
BtlController_EmitUnknownYesNoBox:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L496
	mov	r2, #0x13
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L497:
	.align	2, 0
.L496:
	.word	sBattleBuffersTransferData
.Lfe32:
	.size	 BtlController_EmitUnknownYesNoBox,.Lfe32-BtlController_EmitUnknownYesNoBox
	.align	2, 0
	.globl	BtlController_EmitChooseMove
	.type	 BtlController_EmitChooseMove,function
	.thumb_func
BtlController_EmitChooseMove:
	push	{r4, r5, r6, lr}
	add	r5, r3, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L504
	mov	r4, #0x0
	mov	r0, #0x14
	strb	r0, [r3]
	strb	r1, [r3, #0x1]
	strb	r2, [r3, #0x2]
	strb	r4, [r3, #0x3]
	mov	r2, #0x0
	add	r1, r3, #0
	add	r4, r1, #0x4
.L502:
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r4]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x13
	bls	.L502	@cond_branch
	add	r0, r6, #0
	mov	r2, #0x18
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L505:
	.align	2, 0
.L504:
	.word	sBattleBuffersTransferData
.Lfe33:
	.size	 BtlController_EmitChooseMove,.Lfe33-BtlController_EmitChooseMove
	.align	2, 0
	.globl	BtlController_EmitChooseItem
	.type	 BtlController_EmitChooseItem,function
	.thumb_func
BtlController_EmitChooseItem:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L512
	mov	r0, #0x15
	strb	r0, [r1]
	mov	r2, #0x0
	add	r3, r1, #0x1
.L510:
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L510	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L513:
	.align	2, 0
.L512:
	.word	sBattleBuffersTransferData
.Lfe34:
	.size	 BtlController_EmitChooseItem,.Lfe34-BtlController_EmitChooseItem
	.align	2, 0
	.globl	BtlController_EmitChoosePokemon
	.type	 BtlController_EmitChoosePokemon,function
	.thumb_func
BtlController_EmitChoosePokemon:
	push	{r4, r5, r6, lr}
	ldr	r6, [sp, #0x10]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L520
	mov	r0, #0x16
	strb	r0, [r4]
	strb	r1, [r4, #0x1]
	strb	r2, [r4, #0x2]
	strb	r3, [r4, #0x3]
	mov	r2, #0x0
	add	r1, r4, #0
	add	r3, r1, #0x4
.L518:
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L518	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x8
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L521:
	.align	2, 0
.L520:
	.word	sBattleBuffersTransferData
.Lfe35:
	.size	 BtlController_EmitChoosePokemon,.Lfe35-BtlController_EmitChoosePokemon
	.align	2, 0
	.globl	BtlController_EmitCmd23
	.type	 BtlController_EmitCmd23,function
	.thumb_func
BtlController_EmitCmd23:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L523
	mov	r2, #0x17
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	sBattleBuffersTransferData
.Lfe36:
	.size	 BtlController_EmitCmd23,.Lfe36-BtlController_EmitCmd23
	.align	2, 0
	.globl	BtlController_EmitHealthBarUpdate
	.type	 BtlController_EmitHealthBarUpdate,function
	.thumb_func
BtlController_EmitHealthBarUpdate:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L526
	mov	r4, #0x0
	mov	r2, #0x18
	strb	r2, [r3]
	strb	r4, [r3, #0x1]
	strb	r1, [r3, #0x2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0xff
	lsl	r2, r2, #0x8
	and	r1, r1, r2
	asr	r1, r1, #0x8
	strb	r1, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L527:
	.align	2, 0
.L526:
	.word	sBattleBuffersTransferData
.Lfe37:
	.size	 BtlController_EmitHealthBarUpdate,.Lfe37-BtlController_EmitHealthBarUpdate
	.align	2, 0
	.globl	BtlController_EmitExpUpdate
	.type	 BtlController_EmitExpUpdate,function
	.thumb_func
BtlController_EmitExpUpdate:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L529
	mov	r3, #0x19
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	and	r2, r2, r3
	asr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L530:
	.align	2, 0
.L529:
	.word	sBattleBuffersTransferData
.Lfe38:
	.size	 BtlController_EmitExpUpdate,.Lfe38-BtlController_EmitExpUpdate
	.align	2, 0
	.globl	BtlController_EmitStatusIconUpdate
	.type	 BtlController_EmitStatusIconUpdate,function
	.thumb_func
BtlController_EmitStatusIconUpdate:
	push	{r4, r5, r6, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L532
	mov	r3, #0x1a
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	mov	r6, #0xff
	lsl	r6, r6, #0x8
	add	r3, r4, #0
	and	r3, r3, r6
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x2]
	mov	r5, #0xff
	lsl	r5, r5, #0x10
	add	r3, r4, #0
	and	r3, r3, r5
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x3]
	lsr	r4, r4, #0x18
	strb	r4, [r1, #0x4]
	strb	r2, [r1, #0x5]
	add	r3, r2, #0
	and	r3, r3, r6
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x6]
	add	r3, r2, #0
	and	r3, r3, r5
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x7]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x8]
	mov	r2, #0x9
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L533:
	.align	2, 0
.L532:
	.word	sBattleBuffersTransferData
.Lfe39:
	.size	 BtlController_EmitStatusIconUpdate,.Lfe39-BtlController_EmitStatusIconUpdate
	.align	2, 0
	.globl	BtlController_EmitStatusAnimation
	.type	 BtlController_EmitStatusAnimation,function
	.thumb_func
BtlController_EmitStatusAnimation:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L535
	mov	r3, #0x1b
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	and	r3, r3, r2
	lsr	r3, r3, #0x8
	strb	r3, [r1, #0x3]
	mov	r3, #0xff
	lsl	r3, r3, #0x10
	and	r3, r3, r2
	lsr	r3, r3, #0x10
	strb	r3, [r1, #0x4]
	lsr	r2, r2, #0x18
	strb	r2, [r1, #0x5]
	mov	r2, #0x6
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L536:
	.align	2, 0
.L535:
	.word	sBattleBuffersTransferData
.Lfe40:
	.size	 BtlController_EmitStatusAnimation,.Lfe40-BtlController_EmitStatusAnimation
	.align	2, 0
	.globl	BtlController_EmitStatusXor
	.type	 BtlController_EmitStatusXor,function
	.thumb_func
BtlController_EmitStatusXor:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L538
	mov	r2, #0x1c
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L539:
	.align	2, 0
.L538:
	.word	sBattleBuffersTransferData
.Lfe41:
	.size	 BtlController_EmitStatusXor,.Lfe41-BtlController_EmitStatusXor
	.align	2, 0
	.globl	BtlController_EmitDataTransfer
	.type	 BtlController_EmitDataTransfer,function
	.thumb_func
BtlController_EmitDataTransfer:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L546
	mov	r0, #0x1d
	strb	r0, [r1]
	strb	r0, [r1, #0x1]
	strb	r4, [r1, #0x2]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x3]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L542	@cond_branch
	add	r1, r5, #0x4
	add	r3, r4, #0
.L544:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L544	@cond_branch
.L542:
	add	r2, r4, #0x4
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L547:
	.align	2, 0
.L546:
	.word	sBattleBuffersTransferData
.Lfe42:
	.size	 BtlController_EmitDataTransfer,.Lfe42-BtlController_EmitDataTransfer
	.align	2, 0
	.globl	BtlController_EmitDMA3Transfer
	.type	 BtlController_EmitDMA3Transfer,function
	.thumb_func
BtlController_EmitDMA3Transfer:
	push	{r4, r5, r6, lr}
	add	r4, r3, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	ldr	r2, .L554
	mov	r0, #0x1e
	strb	r0, [r2]
	strb	r1, [r2, #0x1]
	mov	r3, #0xff
	lsl	r3, r3, #0x8
	add	r0, r1, #0
	and	r0, r0, r3
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x2]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r2, #0x3]
	lsr	r1, r1, #0x18
	strb	r1, [r2, #0x4]
	strb	r5, [r2, #0x5]
	add	r0, r5, #0
	and	r0, r0, r3
	lsr	r0, r0, #0x8
	strb	r0, [r2, #0x6]
	add	r1, r2, #0
	cmp	r5, #0
	beq	.L550	@cond_branch
	add	r3, r1, #0x7
	add	r2, r5, #0
.L552:
	ldrb	r0, [r4]
	strb	r0, [r3]
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L552	@cond_branch
.L550:
	add	r2, r5, #0x7
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	sBattleBuffersTransferData
.Lfe43:
	.size	 BtlController_EmitDMA3Transfer,.Lfe43-BtlController_EmitDMA3Transfer
	.align	2, 0
	.globl	BtlController_EmitPlayBGM
	.type	 BtlController_EmitPlayBGM,function
	.thumb_func
BtlController_EmitPlayBGM:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L562
	mov	r0, #0x1f
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x2]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L558	@cond_branch
	add	r1, r5, #0x3
	add	r3, r4, #0
.L560:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L560	@cond_branch
.L558:
	add	r2, r4, #0x3
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L563:
	.align	2, 0
.L562:
	.word	sBattleBuffersTransferData
.Lfe44:
	.size	 BtlController_EmitPlayBGM,.Lfe44-BtlController_EmitPlayBGM
	.align	2, 0
	.globl	BtlController_EmitCmd32
	.type	 BtlController_EmitCmd32,function
	.thumb_func
BtlController_EmitCmd32:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	ldr	r1, .L570
	mov	r0, #0x20
	strb	r0, [r1]
	strb	r4, [r1, #0x1]
	lsr	r0, r4, #0x8
	strb	r0, [r1, #0x2]
	add	r5, r1, #0
	cmp	r4, #0
	beq	.L566	@cond_branch
	add	r1, r5, #0x3
	add	r3, r4, #0
.L568:
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bne	.L568	@cond_branch
.L566:
	add	r2, r4, #0x3
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	add	r0, r6, #0
	add	r1, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L571:
	.align	2, 0
.L570:
	.word	sBattleBuffersTransferData
.Lfe45:
	.size	 BtlController_EmitCmd32,.Lfe45-BtlController_EmitCmd32
	.align	2, 0
	.globl	BtlController_EmitTwoReturnValues
	.type	 BtlController_EmitTwoReturnValues,function
	.thumb_func
BtlController_EmitTwoReturnValues:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L573
	mov	r3, #0x21
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L574:
	.align	2, 0
.L573:
	.word	sBattleBuffersTransferData
.Lfe46:
	.size	 BtlController_EmitTwoReturnValues,.Lfe46-BtlController_EmitTwoReturnValues
	.align	2, 0
	.globl	BtlController_EmitChosenMonReturnValue
	.type	 BtlController_EmitChosenMonReturnValue,function
	.thumb_func
BtlController_EmitChosenMonReturnValue:
	push	{r4, r5, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L581
	mov	r0, #0x22
	strb	r0, [r2]
	strb	r1, [r2, #0x1]
	mov	r3, #0x0
	add	r1, r2, #0x2
.L579:
	add	r0, r4, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r1, r1, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L579	@cond_branch
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r2, #0x5
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L582:
	.align	2, 0
.L581:
	.word	sBattleBuffersTransferData
.Lfe47:
	.size	 BtlController_EmitChosenMonReturnValue,.Lfe47-BtlController_EmitChosenMonReturnValue
	.align	2, 0
	.globl	BtlController_EmitOneReturnValue
	.type	 BtlController_EmitOneReturnValue,function
	.thumb_func
BtlController_EmitOneReturnValue:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L584
	mov	r4, #0x0
	mov	r2, #0x23
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L585:
	.align	2, 0
.L584:
	.word	sBattleBuffersTransferData
.Lfe48:
	.size	 BtlController_EmitOneReturnValue,.Lfe48-BtlController_EmitOneReturnValue
	.align	2, 0
	.globl	BtlController_EmitOneReturnValue_Duplicate
	.type	 BtlController_EmitOneReturnValue_Duplicate,function
	.thumb_func
BtlController_EmitOneReturnValue_Duplicate:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L587
	mov	r4, #0x0
	mov	r2, #0x24
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	sBattleBuffersTransferData
.Lfe49:
	.size	 BtlController_EmitOneReturnValue_Duplicate,.Lfe49-BtlController_EmitOneReturnValue_Duplicate
	.align	2, 0
	.globl	BtlController_EmitCmd37
	.type	 BtlController_EmitCmd37,function
	.thumb_func
BtlController_EmitCmd37:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L590
	mov	r2, #0x25
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	sBattleBuffersTransferData
.Lfe50:
	.size	 BtlController_EmitCmd37,.Lfe50-BtlController_EmitCmd37
	.align	2, 0
	.globl	BtlController_EmitCmd38
	.type	 BtlController_EmitCmd38,function
	.thumb_func
BtlController_EmitCmd38:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L593
	mov	r2, #0x26
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	sBattleBuffersTransferData
.Lfe51:
	.size	 BtlController_EmitCmd38,.Lfe51-BtlController_EmitCmd38
	.align	2, 0
	.globl	BtlController_EmitCmd39
	.type	 BtlController_EmitCmd39,function
	.thumb_func
BtlController_EmitCmd39:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L596
	mov	r2, #0x27
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L597:
	.align	2, 0
.L596:
	.word	sBattleBuffersTransferData
.Lfe52:
	.size	 BtlController_EmitCmd39,.Lfe52-BtlController_EmitCmd39
	.align	2, 0
	.globl	BtlController_EmitCmd40
	.type	 BtlController_EmitCmd40,function
	.thumb_func
BtlController_EmitCmd40:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L599
	mov	r2, #0x28
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	sBattleBuffersTransferData
.Lfe53:
	.size	 BtlController_EmitCmd40,.Lfe53-BtlController_EmitCmd40
	.align	2, 0
	.globl	BtlController_EmitHitAnimation
	.type	 BtlController_EmitHitAnimation,function
	.thumb_func
BtlController_EmitHitAnimation:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L602
	mov	r2, #0x29
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L603:
	.align	2, 0
.L602:
	.word	sBattleBuffersTransferData
.Lfe54:
	.size	 BtlController_EmitHitAnimation,.Lfe54-BtlController_EmitHitAnimation
	.align	2, 0
	.globl	BtlController_EmitCmd42
	.type	 BtlController_EmitCmd42,function
	.thumb_func
BtlController_EmitCmd42:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L605
	mov	r2, #0x2a
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	sBattleBuffersTransferData
.Lfe55:
	.size	 BtlController_EmitCmd42,.Lfe55-BtlController_EmitCmd42
	.align	2, 0
	.globl	BtlController_EmitPlaySE
	.type	 BtlController_EmitPlaySE,function
	.thumb_func
BtlController_EmitPlaySE:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r3, .L608
	mov	r4, #0x0
	mov	r2, #0x2b
	strb	r2, [r3]
	strb	r1, [r3, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r3, #0x2]
	strb	r4, [r3, #0x3]
	add	r1, r3, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L609:
	.align	2, 0
.L608:
	.word	sBattleBuffersTransferData
.Lfe56:
	.size	 BtlController_EmitPlaySE,.Lfe56-BtlController_EmitPlaySE
	.align	2, 0
	.globl	BtlController_EmitPlayFanfareOrBGM
	.type	 BtlController_EmitPlayFanfareOrBGM,function
	.thumb_func
BtlController_EmitPlayFanfareOrBGM:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r4, .L611
	mov	r3, #0x2c
	strb	r3, [r4]
	strb	r1, [r4, #0x1]
	lsr	r1, r1, #0x8
	strb	r1, [r4, #0x2]
	strb	r2, [r4, #0x3]
	add	r1, r4, #0
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L612:
	.align	2, 0
.L611:
	.word	sBattleBuffersTransferData
.Lfe57:
	.size	 BtlController_EmitPlayFanfareOrBGM,.Lfe57-BtlController_EmitPlayFanfareOrBGM
	.align	2, 0
	.globl	BtlController_EmitFaintingCry
	.type	 BtlController_EmitFaintingCry,function
	.thumb_func
BtlController_EmitFaintingCry:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L614
	mov	r2, #0x2d
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L615:
	.align	2, 0
.L614:
	.word	sBattleBuffersTransferData
.Lfe58:
	.size	 BtlController_EmitFaintingCry,.Lfe58-BtlController_EmitFaintingCry
	.align	2, 0
	.globl	BtlController_EmitIntroSlide
	.type	 BtlController_EmitIntroSlide,function
	.thumb_func
BtlController_EmitIntroSlide:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L617
	mov	r2, #0x2e
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L618:
	.align	2, 0
.L617:
	.word	sBattleBuffersTransferData
.Lfe59:
	.size	 BtlController_EmitIntroSlide,.Lfe59-BtlController_EmitIntroSlide
	.align	2, 0
	.globl	BtlController_EmitIntroTrainerBallThrow
	.type	 BtlController_EmitIntroTrainerBallThrow,function
	.thumb_func
BtlController_EmitIntroTrainerBallThrow:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L620
	mov	r2, #0x2f
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L621:
	.align	2, 0
.L620:
	.word	sBattleBuffersTransferData
.Lfe60:
	.size	 BtlController_EmitIntroTrainerBallThrow,.Lfe60-BtlController_EmitIntroTrainerBallThrow
	.align	2, 0
	.globl	BtlController_EmitDrawPartyStatusSummary
	.type	 BtlController_EmitDrawPartyStatusSummary,function
	.thumb_func
BtlController_EmitDrawPartyStatusSummary:
	push	{r4, r5, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r1, .L628
	mov	r3, #0x30
	strb	r3, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, #0x80
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x1f
	strb	r0, [r1, #0x2]
	strb	r3, [r1, #0x3]
	mov	r2, #0x0
	add	r3, r1, #0x4
.L626:
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r3]
	add	r3, r3, #0x1
	add	r2, r2, #0x1
	cmp	r2, #0x2f
	ble	.L626	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x34
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L629:
	.align	2, 0
.L628:
	.word	sBattleBuffersTransferData
.Lfe61:
	.size	 BtlController_EmitDrawPartyStatusSummary,.Lfe61-BtlController_EmitDrawPartyStatusSummary
	.align	2, 0
	.globl	BtlController_EmitHidePartyStatusSummary
	.type	 BtlController_EmitHidePartyStatusSummary,function
	.thumb_func
BtlController_EmitHidePartyStatusSummary:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L631
	mov	r2, #0x31
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L632:
	.align	2, 0
.L631:
	.word	sBattleBuffersTransferData
.Lfe62:
	.size	 BtlController_EmitHidePartyStatusSummary,.Lfe62-BtlController_EmitHidePartyStatusSummary
	.align	2, 0
	.globl	BtlController_EmitEndBounceEffect
	.type	 BtlController_EmitEndBounceEffect,function
	.thumb_func
BtlController_EmitEndBounceEffect:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L634
	mov	r2, #0x32
	strb	r2, [r1]
	strb	r2, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L635:
	.align	2, 0
.L634:
	.word	sBattleBuffersTransferData
.Lfe63:
	.size	 BtlController_EmitEndBounceEffect,.Lfe63-BtlController_EmitEndBounceEffect
	.align	2, 0
	.globl	BtlController_EmitSpriteInvisibility
	.type	 BtlController_EmitSpriteInvisibility,function
	.thumb_func
BtlController_EmitSpriteInvisibility:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L637
	mov	r2, #0x33
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	strb	r2, [r1, #0x2]
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L638:
	.align	2, 0
.L637:
	.word	sBattleBuffersTransferData
.Lfe64:
	.size	 BtlController_EmitSpriteInvisibility,.Lfe64-BtlController_EmitSpriteInvisibility
	.align	2, 0
	.globl	BtlController_EmitBattleAnimation
	.type	 BtlController_EmitBattleAnimation,function
	.thumb_func
BtlController_EmitBattleAnimation:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r1, .L640
	mov	r3, #0x34
	strb	r3, [r1]
	strb	r4, [r1, #0x1]
	strb	r2, [r1, #0x2]
	lsr	r2, r2, #0x8
	strb	r2, [r1, #0x3]
	mov	r2, #0x4
	bl	PrepareBufferDataTransfer
	pop	{r4}
	pop	{r0}
	bx	r0
.L641:
	.align	2, 0
.L640:
	.word	sBattleBuffersTransferData
.Lfe65:
	.size	 BtlController_EmitBattleAnimation,.Lfe65-BtlController_EmitBattleAnimation
	.align	2, 0
	.globl	BtlController_EmitLinkStandbyMsg
	.type	 BtlController_EmitLinkStandbyMsg,function
	.thumb_func
BtlController_EmitLinkStandbyMsg:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, .L645
	mov	r0, #0x35
	strb	r0, [r4]
	strb	r1, [r4, #0x1]
	cmp	r2, #0
	beq	.L643	@cond_branch
	add	r0, r4, #0x4
	bl	sub_81850DC
	strb	r0, [r4, #0x2]
	strb	r0, [r4, #0x3]
	b	.L644
.L646:
	.align	2, 0
.L645:
	.word	sBattleBuffersTransferData
.L643:
	strb	r2, [r4, #0x2]
	strb	r2, [r4, #0x3]
.L644:
	ldr	r1, .L647
	ldrb	r2, [r1, #0x2]
	add	r2, r2, #0x4
	add	r0, r5, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L648:
	.align	2, 0
.L647:
	.word	sBattleBuffersTransferData
.Lfe66:
	.size	 BtlController_EmitLinkStandbyMsg,.Lfe66-BtlController_EmitLinkStandbyMsg
	.align	2, 0
	.globl	BtlController_EmitResetActionMoveSelection
	.type	 BtlController_EmitResetActionMoveSelection,function
	.thumb_func
BtlController_EmitResetActionMoveSelection:
	push	{lr}
	add	r3, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L650
	mov	r2, #0x36
	strb	r2, [r1]
	strb	r3, [r1, #0x1]
	mov	r2, #0x2
	bl	PrepareBufferDataTransfer
	pop	{r0}
	bx	r0
.L651:
	.align	2, 0
.L650:
	.word	sBattleBuffersTransferData
.Lfe67:
	.size	 BtlController_EmitResetActionMoveSelection,.Lfe67-BtlController_EmitResetActionMoveSelection
	.align	2, 0
	.globl	BtlController_EmitCmd55
	.type	 BtlController_EmitCmd55,function
	.thumb_func
BtlController_EmitCmd55:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L653
	mov	r0, #0x37
	strb	r0, [r4]
	strb	r1, [r4, #0x1]
	ldr	r0, .L653+0x4
	ldr	r1, [r0]
	ldr	r0, .L653+0x8
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	strb	r0, [r4, #0x2]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1f
	strb	r0, [r4, #0x3]
	add	r0, r4, #0x6
	bl	sub_81850DC
	strb	r0, [r4, #0x4]
	strb	r0, [r4, #0x5]
	ldrb	r2, [r4, #0x4]
	add	r2, r2, #0x6
	add	r0, r5, #0
	add	r1, r4, #0
	bl	PrepareBufferDataTransfer
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L654:
	.align	2, 0
.L653:
	.word	sBattleBuffersTransferData
	.word	gSaveBlock2Ptr
	.word	0xca9
.Lfe68:
	.size	 BtlController_EmitCmd55,.Lfe68-BtlController_EmitCmd55
.text
	.align	2, 0

