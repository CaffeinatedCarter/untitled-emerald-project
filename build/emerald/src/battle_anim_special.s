@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sBallCaptureSuccessStarData,object
sBallCaptureSuccessStarData:
	.byte	0xa
	.byte	0x2
	.byte	-0x3
	.space	1
	.byte	0xf
	.byte	0x0
	.byte	-0x4
	.space	1
	.byte	-0xa
	.byte	0x2
	.byte	-0x4
	.space	1
	.size	 sBallCaptureSuccessStarData,12
	.globl	gBallParticleSpritesheets
	.align	2, 0
	.type	 gBallParticleSpritesheets,object
gBallParticleSpritesheets:
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6ec
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6ed
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6ee
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6ef
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f0
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f1
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f2
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f3
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f4
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f5
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f6
	.word	gBattleAnimSpriteGfx_Particles
	.short	0x100
	.short	0xd6f7
	.size	 gBallParticleSpritesheets,96
	.globl	gBallParticlePalettes
	.align	2, 0
	.type	 gBallParticlePalettes,object
gBallParticlePalettes:
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6ec
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6ed
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6ee
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6ef
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f0
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f1
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f2
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f3
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f4
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f5
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f6
	.space	2
	.word	gBattleAnimSpritePal_CircleImpact
	.short	0xd6f7
	.space	2
	.size	 gBallParticlePalettes,96
	.globl	gAnim_RegularBall
	.align	2, 0
	.type	 gAnim_RegularBall,object
gAnim_RegularBall:
	.short	0x0
	.byte	0x1
	.space	1
	.short	0x1
	.byte	0x1
	.space	1
	.short	0x2
	.byte	0x1
	.space	1
	.short	0x0
	.byte	0x41
	.space	1
	.short	0x2
	.byte	0x1
	.space	1
	.short	0x1
	.byte	0x1
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gAnim_RegularBall,28
	.globl	gAnim_MasterBall
	.align	2, 0
	.type	 gAnim_MasterBall,object
gAnim_MasterBall:
	.short	0x3
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gAnim_MasterBall,8
	.globl	gAnim_NetDiveBall
	.align	2, 0
	.type	 gAnim_NetDiveBall,object
gAnim_NetDiveBall:
	.short	0x4
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gAnim_NetDiveBall,8
	.globl	gAnim_NestBall
	.align	2, 0
	.type	 gAnim_NestBall,object
gAnim_NestBall:
	.short	0x5
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gAnim_NestBall,8
	.globl	gAnim_LuxuryPremierBall
	.align	2, 0
	.type	 gAnim_LuxuryPremierBall,object
gAnim_LuxuryPremierBall:
	.short	0x6
	.byte	0x4
	.space	1
	.short	0x7
	.byte	0x4
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 gAnim_LuxuryPremierBall,12
	.globl	gAnim_UltraRepeatTimerBall
	.align	2, 0
	.type	 gAnim_UltraRepeatTimerBall,object
gAnim_UltraRepeatTimerBall:
	.short	0x7
	.byte	0x4
	.space	1
	.short	-0x1
	.space	2
	.size	 gAnim_UltraRepeatTimerBall,8
	.globl	gAnims_BallParticles
	.align	2, 0
	.type	 gAnims_BallParticles,object
gAnims_BallParticles:
	.word	gAnim_RegularBall
	.word	gAnim_MasterBall
	.word	gAnim_NetDiveBall
	.word	gAnim_NestBall
	.word	gAnim_LuxuryPremierBall
	.word	gAnim_UltraRepeatTimerBall
	.size	 gAnims_BallParticles,24
	.globl	gBallParticleAnimNums
	.type	 gBallParticleAnimNums,object
gBallParticleAnimNums:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x5
	.byte	0x5
	.byte	0x4
	.byte	0x4
	.size	 gBallParticleAnimNums,12
	.globl	gBallParticleAnimationFuncs
	.align	2, 0
	.type	 gBallParticleAnimationFuncs,object
gBallParticleAnimationFuncs:
	.word	PokeBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	SafariBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	MasterBallOpenParticleAnimation
	.word	SafariBallOpenParticleAnimation
	.word	DiveBallOpenParticleAnimation
	.word	UltraBallOpenParticleAnimation
	.word	RepeatBallOpenParticleAnimation
	.word	TimerBallOpenParticleAnimation
	.word	GreatBallOpenParticleAnimation
	.word	PremierBallOpenParticleAnimation
	.size	 gBallParticleAnimationFuncs,48
	.globl	gBallParticlesSpriteTemplates
	.align	2, 0
	.type	 gBallParticlesSpriteTemplates,object
gBallParticlesSpriteTemplates:
	.short	0xd6ec
	.short	0xd6ec
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6ed
	.short	0xd6ed
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6ee
	.short	0xd6ee
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6ef
	.short	0xd6ef
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f0
	.short	0xd6f0
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f1
	.short	0xd6f1
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f2
	.short	0xd6f2
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f3
	.short	0xd6f3
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f4
	.short	0xd6f4
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f5
	.short	0xd6f5
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f6
	.short	0xd6f6
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd6f7
	.short	0xd6f7
	.word	gOamData_AffineOff_ObjNormal_8x8
	.word	gAnims_BallParticles
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 gBallParticlesSpriteTemplates,288
	.globl	gBallOpenFadeColors
	.align	1, 0
	.type	 gBallOpenFadeColors,object
gBallOpenFadeColors:
	.short	0x7adf
	.short	0x7af0
	.short	0x53d7
	.short	0x3fff
	.short	0x7297
	.short	0x67f5
	.short	0x7b2c
	.short	0x2b7e
	.short	0x431f
	.short	0x7bdd
	.short	0x2a3f
	.short	0x293f
	.short	0x0
	.short	0x201
	.short	0x403
	.short	0x101
	.short	0x100
	.short	0x503
	.short	0x506
	.short	0x4
	.size	 gBallOpenFadeColors,40
	.globl	gPokeblockSpriteTemplate
	.align	2, 0
	.type	 gPokeblockSpriteTemplate,object
	.size	 gPokeblockSpriteTemplate,24
gPokeblockSpriteTemplate:
	.short	0x281d
	.short	0x281d
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_817330C
	.globl	gUnknown_085E5350
	.align	2, 0
	.type	 gUnknown_085E5350,object
gUnknown_085E5350:
	.short	0x40
	.byte	0x1
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_085E5350,8
	.globl	gUnknown_085E5358
	.align	2, 0
	.type	 gUnknown_085E5358,object
gUnknown_085E5358:
	.word	gUnknown_085E5350
	.size	 gUnknown_085E5358,4
	.globl	gBattleAnimSpriteTemplate_085E535C
	.align	2, 0
	.type	 gBattleAnimSpriteTemplate_085E535C,object
	.size	 gBattleAnimSpriteTemplate_085E535C,24
gBattleAnimSpriteTemplate_085E535C:
	.short	0x274a
	.short	0x274a
	.word	gOamData_AffineOff_ObjNormal_32x32
	.word	gUnknown_085E5358
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_817330C
.text
	.align	2, 0
	.globl	unref_sub_8170478
	.type	 unref_sub_8170478,function
	.thumb_func
unref_sub_8170478:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x10]
	ldr	r0, .L3
	ldrb	r4, [r0]
	ldr	r0, .L3+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L3+0x8
	strh	r1, [r0]
	ldr	r1, .L3+0xc
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L3+0x10
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L3+0x14
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, .L3+0x18
	add	r4, r4, r0
	ldrb	r0, [r4]
	ldr	r1, .L3+0x1c
	mov	r9, r1
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	ldrb	r7, [r4, #0x6]
	ldrh	r6, [r4, #0x38]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L3+0x20
	bl	CreateInvisibleSpriteWithCallback
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	ldr	r0, .L3+0x20
	bl	CreateInvisibleSpriteWithCallback
	mov	sl, r0
	mov	r2, sl
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	ldrb	r1, [r4, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	mov	r1, #0x4
	mov	r8, r1
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r4, #0x5]
	lsl	r5, r7, #0x4
	add	r5, r5, r7
	lsl	r5, r5, #0x2
	add	r5, r5, r9
	ldrb	r1, [r5, #0x5]
	add	r0, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrb	r2, [r1, #0x5]
	add	r0, r3, #0
	and	r0, r0, r2
	mov	r2, r8
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [sp, #0x14]
	lsl	r6, r0, #0x4
	add	r6, r6, r0
	lsl	r6, r6, #0x2
	mov	r1, r9
	add	r7, r6, r1
	add	r0, r7, #0
	add	r1, r4, #0
	mov	r2, #0x44
	str	r3, [sp, #0x18]
	bl	memcpy
	mov	r2, sl
	lsl	r4, r2, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	add	r0, r4, #0
	add	r0, r0, r9
	mov	r8, r0
	add	r1, r5, #0
	mov	r2, #0x44
	bl	memcpy
	ldrb	r1, [r7, #0x1]
	ldr	r3, [sp, #0x18]
	add	r0, r3, #0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r7, #0x1]
	mov	r2, r8
	ldrb	r0, [r2, #0x1]
	and	r3, r3, r0
	orr	r3, r3, r1
	strb	r3, [r2, #0x1]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r6, r6, r9
	ldr	r1, .L3+0x20
	str	r1, [r6]
	add	r4, r4, r9
	str	r1, [r4]
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L3+0x24
	bl	AnimLoadCompressedBgTilemap
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L3+0x28
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L3+0x2c
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r1, .L3+0x30
	ldrh	r0, [r7, #0x20]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r1]
	ldr	r1, .L3+0x34
	ldrh	r0, [r7, #0x22]
	neg	r0, r0
	sub	r0, r0, #0x20
	strh	r0, [r1]
	ldr	r1, .L3+0x38
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xa0
	lsl	r1, r1, #0x2
	strh	r1, [r0, #0xa]
	mov	r1, sp
	ldrh	r1, [r1, #0x14]
	strh	r1, [r0, #0x8]
	mov	r2, sl
	strh	r2, [r0, #0xc]
	ldr	r1, .L3+0x3c
	str	r1, [r0]
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimAttacker
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	gUnknown_08C2EA9C
	.word	gUnknown_08C2EA50
	.word	gCureBubblesPal
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	sub_8170660
.Lfe1:
	.size	 unref_sub_8170478,.Lfe1-unref_sub_8170478
	.align	2, 0
	.type	 sub_8170660,function
	.thumb_func
sub_8170660:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L20
	ldrb	r0, [r0]
	mov	r8, r0
	ldr	r1, .L20+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r1, [r5, #0xa]
	ldrh	r0, [r5, #0x22]
	add	r1, r1, r0
	mov	r3, #0x0
	strh	r1, [r5, #0x22]
	ldr	r2, .L20+0x8
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x18
	ldrh	r4, [r2]
	add	r0, r0, r4
	strh	r0, [r2]
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r5, #0x22]
	mov	r1, #0x26
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L10	@cond_branch
	cmp	r0, #0x1
	bgt	.L18	@cond_branch
	cmp	r0, #0
	beq	.L7	@cond_branch
	b	.L6
.L21:
	.align	2, 0
.L20:
	.word	gBattleAnimAttacker
	.word	gTasks
	.word	gBattle_BG1_Y
.L18:
	cmp	r0, #0x2
	beq	.L12	@cond_branch
	b	.L6
.L7:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bgt	.LCB305
	b	.L6	@long jump
.LCB305:
	strh	r3, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x20
	ldrsh	r0, [r5, r2]
	cmp	r0, #0x8
	beq	.LCB324
	b	.L6	@long jump
.LCB324:
	b	.L19
.L10:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	beq	.LCB334
	b	.L6	@long jump
.LCB334:
.L19:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L6
.L12:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L6	@cond_branch
	strh	r3, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r4, [r5, r0]
	cmp	r4, #0
	bne	.L6	@cond_branch
	mov	r0, #0x0
	bl	sub_80A477C
	ldr	r0, .L22
	strh	r4, [r0]
	ldr	r0, .L22+0x4
	strh	r4, [r0]
	ldr	r4, .L22+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L15	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L15:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r4, #0x8
	ldrsh	r1, [r5, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r6, .L22+0xc
	add	r0, r0, r6
	bl	DestroySprite
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	ldr	r0, .L22+0x10
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r2, [r1, #0x6]
	mov	r8, r2
	ldrh	r4, [r1, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r3, [r1, #0x5]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	mov	r5, #0x4
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	mov	r0, r8
	lsl	r1, r0, #0x4
	add	r1, r1, r8
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrb	r3, [r1, #0x5]
	add	r0, r2, #0
	and	r0, r0, r3
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r1, [r0, #0x5]
	and	r2, r2, r1
	orr	r2, r2, r5
	strb	r2, [r0, #0x5]
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L6:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe2:
	.size	 sub_8170660,.Lfe2-sub_8170660
	.align	2, 0
	.type	 LoadHealthboxPalsForLevelUp,function
	.thumb_func
LoadHealthboxPalsForLevelUp:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r9, r0
	add	r7, r1, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L25
	add	r2, r2, r0
	ldrb	r0, [r2]
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	ldr	r0, .L25+0x4
	add	r5, r5, r0
	ldrb	r1, [r5, #0x6]
	mov	sl, r1
	ldrh	r4, [r5, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L25+0x8
	bl	AllocSpritePalette
	mov	r2, r9
	strb	r0, [r2]
	ldr	r0, .L25+0xc
	bl	AllocSpritePalette
	strb	r0, [r7]
	ldrb	r0, [r5, #0x5]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x4
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r3, r1, #0
	orr	r0, r0, r3
	lsl	r6, r4, #0x4
	add	r6, r6, r4
	lsl	r6, r6, #0x2
	ldr	r2, .L25+0x4
	add	r6, r6, r2
	ldrb	r4, [r6, #0x5]
	lsr	r4, r4, #0x4
	lsl	r4, r4, #0x4
	orr	r4, r4, r3
	lsl	r0, r0, #0x1
	ldr	r1, .L25+0x10
	mov	r8, r1
	add	r0, r0, r8
	mov	r2, r9
	ldrb	r1, [r2]
	lsl	r1, r1, #0x4
	add	r1, r3, r1
	mov	r2, #0x20
	str	r3, [sp]
	bl	LoadPalette
	lsl	r4, r4, #0x1
	add	r4, r4, r8
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	ldr	r3, [sp]
	add	r3, r3, r0
	add	r0, r4, #0
	add	r1, r3, #0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r1, r1, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r3, #0xf
	add	r0, r3, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	mov	r2, sl
	lsl	r1, r2, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	ldr	r0, .L25+0x4
	add	r1, r1, r0
	mov	r0, r9
	ldrb	r2, [r0]
	lsl	r2, r2, #0x4
	ldrb	r4, [r1, #0x5]
	add	r0, r3, #0
	and	r0, r0, r4
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldrb	r0, [r7]
	lsl	r0, r0, #0x4
	ldrb	r1, [r6, #0x5]
	and	r3, r3, r1
	orr	r3, r3, r0
	strb	r3, [r6, #0x5]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	0xd709
	.word	0xd70a
	.word	gPlttBufferUnfaded
.Lfe3:
	.size	 LoadHealthboxPalsForLevelUp,.Lfe3-LoadHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_LoadHealthboxPalsForLevelUp
	.type	 AnimTask_LoadHealthboxPalsForLevelUp,function
	.thumb_func
AnimTask_LoadHealthboxPalsForLevelUp:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, sp
	add	r1, r1, #0x1
	ldr	r0, .L28
	ldrb	r2, [r0]
	mov	r0, sp
	bl	LoadHealthboxPalsForLevelUp
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	gBattleAnimAttacker
.Lfe4:
	.size	 AnimTask_LoadHealthboxPalsForLevelUp,.Lfe4-AnimTask_LoadHealthboxPalsForLevelUp
	.align	2, 0
	.type	 FreeHealthboxPalsForLevelUp,function
	.thumb_func
FreeHealthboxPalsForLevelUp:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L31
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldr	r1, .L31+0x4
	mov	r8, r1
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	add	r5, r5, r8
	ldrb	r0, [r5, #0x6]
	mov	r9, r0
	ldrh	r6, [r5, #0x38]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L31+0x8
	bl	FreeSpritePaletteByTag
	ldr	r0, .L31+0xc
	bl	FreeSpritePaletteByTag
	ldr	r0, .L31+0x10
	bl	IndexOfSpritePaletteTag
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L31+0x14
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsl	r4, r4, #0x4
	ldrb	r2, [r5, #0x5]
	mov	r3, #0xf
	add	r1, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r4
	strb	r1, [r5, #0x5]
	mov	r1, r9
	lsl	r2, r1, #0x4
	add	r2, r2, r9
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrb	r5, [r2, #0x5]
	add	r1, r3, #0
	and	r1, r1, r5
	orr	r1, r1, r4
	strb	r1, [r2, #0x5]
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	lsr	r0, r0, #0x14
	ldrb	r2, [r1, #0x5]
	and	r3, r3, r2
	orr	r3, r3, r0
	strb	r3, [r1, #0x5]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gHealthboxSpriteIds
	.word	gSprites
	.word	0xd709
	.word	0xd70a
	.word	0xd6ff
	.word	0xd704
.Lfe5:
	.size	 FreeHealthboxPalsForLevelUp,.Lfe5-FreeHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_FreeHealthboxPalsForLevelUp
	.type	 AnimTask_FreeHealthboxPalsForLevelUp,function
	.thumb_func
AnimTask_FreeHealthboxPalsForLevelUp:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L34
	ldrb	r0, [r0]
	bl	FreeHealthboxPalsForLevelUp
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L35:
	.align	2, 0
.L34:
	.word	gBattleAnimAttacker
.Lfe6:
	.size	 AnimTask_FreeHealthboxPalsForLevelUp,.Lfe6-AnimTask_FreeHealthboxPalsForLevelUp
	.align	2, 0
	.globl	AnimTask_FlashHealthboxOnLevelUp
	.type	 AnimTask_FlashHealthboxOnLevelUp,function
	.thumb_func
AnimTask_FlashHealthboxOnLevelUp:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L37
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldr	r2, .L37+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0x1c]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0x1e]
	ldr	r0, .L37+0x8
	str	r0, [r1]
	bx	lr
.L38:
	.align	2, 0
.L37:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	sub_8170A38
.Lfe7:
	.size	 AnimTask_FlashHealthboxOnLevelUp,.Lfe7-AnimTask_FlashHealthboxOnLevelUp
	.align	2, 0
	.type	 sub_8170A38,function
	.thumb_func
sub_8170A38:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L52
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	mov	r6, #0x0
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x1e
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L40	@cond_branch
	strh	r6, [r4, #0x8]
	ldr	r0, .L52+0x4
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r3, #0x1c
	ldrsh	r0, [r4, r3]
	mov	r1, #0x2
	cmp	r0, #0
	bne	.L41	@cond_branch
	mov	r1, #0x6
.L41:
	mov	r3, #0xa
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L44	@cond_branch
	cmp	r0, #0x1
	beq	.L47	@cond_branch
	b	.L40
.L53:
	.align	2, 0
.L52:
	.word	gTasks
	.word	0xd709
.L44:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	ble	.L45	@cond_branch
	mov	r0, #0x10
	strh	r0, [r4, #0xc]
.L45:
	lsl	r0, r2, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	orr	r0, r0, r1
	ldrb	r2, [r4, #0xc]
	ldr	r3, .L54
	mov	r1, #0x1
	bl	BlendPalette
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bne	.L40	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L40
.L55:
	.align	2, 0
.L54:
	.word	0x7f74
.L47:
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L48	@cond_branch
	strh	r6, [r4, #0xc]
.L48:
	lsl	r0, r2, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	orr	r0, r0, r1
	ldrb	r2, [r4, #0xc]
	ldr	r3, .L56
	mov	r1, #0x1
	bl	BlendPalette
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bne	.L40	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L40:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L57:
	.align	2, 0
.L56:
	.word	0x7f74
.Lfe8:
	.size	 sub_8170A38,.Lfe8-sub_8170A38
	.align	2, 0
	.globl	AnimTask_SwitchOutShrinkMon
	.type	 AnimTask_SwitchOutShrinkMon,function
	.thumb_func
AnimTask_SwitchOutShrinkMon:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L68
	ldr	r0, .L68+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r5, [r0]
	ldr	r1, .L68+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L61	@cond_branch
	cmp	r0, #0x1
	bgt	.L66	@cond_branch
	cmp	r0, #0
	beq	.L60	@cond_branch
	b	.L59
.L69:
	.align	2, 0
.L68:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
.L66:
	cmp	r0, #0x2
	beq	.L63	@cond_branch
	b	.L59
.L60:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	b	.L67
.L61:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x30
	strh	r0, [r4, #0x1c]
	mov	r0, #0x1c
	ldrsh	r2, [r4, r0]
	add	r0, r5, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	add	r0, r5, #0
	bl	SetBattlerSpriteYOffsetFromYScale
	mov	r0, #0x1c
	ldrsh	r1, [r4, r0]
	ldr	r0, .L70
	cmp	r1, r0
	ble	.L59	@cond_branch
.L67:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L59
.L71:
	.align	2, 0
.L70:
	.word	0x2cf
.L63:
	add	r0, r5, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L72
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L59:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L73:
	.align	2, 0
.L72:
	.word	gSprites
.Lfe9:
	.size	 AnimTask_SwitchOutShrinkMon,.Lfe9-AnimTask_SwitchOutShrinkMon
	.align	2, 0
	.globl	AnimTask_SwitchOutBallEffect
	.type	 AnimTask_SwitchOutBallEffect,function
	.thumb_func
AnimTask_SwitchOutBallEffect:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L84
	ldr	r4, .L84+0x4
	ldrb	r0, [r4]
	add	r1, r0, r1
	ldrb	r1, [r1]
	mov	r9, r1
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L75	@cond_branch
	ldr	r1, .L84+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L84+0xc
	b	.L83
.L85:
	.align	2, 0
.L84:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L75:
	ldr	r1, .L86
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L86+0x4
.L83:
	add	r0, r0, r1
	mov	r1, #0x26
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L86+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r6, r0, r2
	mov	r0, #0x8
	ldrsh	r7, [r6, r0]
	cmp	r7, #0
	beq	.L78	@cond_branch
	cmp	r7, #0x1
	beq	.L79	@cond_branch
	b	.L77
.L87:
	.align	2, 0
.L86:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	gTasks
.L78:
	ldr	r5, .L88
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	ldr	r2, .L88+0x4
	mov	r3, r9
	lsl	r0, r3, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x5]
	lsl	r2, r2, #0x1c
	lsr	r2, r2, #0x1e
	add	r0, r0, #0x43
	ldrb	r3, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	mov	r0, r8
	str	r0, [sp]
	add	r0, r4, #0
	bl	AnimateBallOpenParticles
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x1c]
	str	r7, [sp]
	str	r7, [sp, #0x4]
	str	r7, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	add	r2, r0, #0
	ldrb	r1, [r5]
	mov	r0, #0x0
	mov	r3, r8
	bl	LaunchBallFadeMonTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x1e]
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L77
.L89:
	.align	2, 0
.L88:
	.word	gBattleAnimAttacker
	.word	gSprites
.L79:
	mov	r1, #0x1c
	ldrsh	r0, [r6, r1]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L77	@cond_branch
	mov	r3, #0x1e
	ldrsh	r0, [r6, r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.L77	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L77:
	add	sp, sp, #0xc
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 AnimTask_SwitchOutBallEffect,.Lfe10-AnimTask_SwitchOutBallEffect
	.align	2, 0
	.globl	AnimTask_LoadBallGfx
	.type	 AnimTask_LoadBallGfx,function
	.thumb_func
AnimTask_LoadBallGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L91
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	LoadBallGfx
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gLastUsedItem
.Lfe11:
	.size	 AnimTask_LoadBallGfx,.Lfe11-AnimTask_LoadBallGfx
	.align	2, 0
	.globl	AnimTask_FreeBallGfx
	.type	 AnimTask_FreeBallGfx,function
	.thumb_func
AnimTask_FreeBallGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L94
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	FreeBallGfx
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L95:
	.align	2, 0
.L94:
	.word	gLastUsedItem
.Lfe12:
	.size	 AnimTask_FreeBallGfx,.Lfe12-AnimTask_FreeBallGfx
	.align	2, 0
	.globl	AnimTask_IsBallBlockedByTrainer
	.type	 AnimTask_IsBallBlockedByTrainer,function
	.thumb_func
AnimTask_IsBallBlockedByTrainer:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L100
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x5
	bne	.L97	@cond_branch
	ldr	r1, .L100+0x4
	ldr	r0, .L100+0x8
	b	.L99
.L101:
	.align	2, 0
.L100:
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimArgs
	.word	0xffff
.L97:
	ldr	r1, .L102
	mov	r0, #0x0
.L99:
	strh	r0, [r1, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L103:
	.align	2, 0
.L102:
	.word	gBattleAnimArgs
.Lfe13:
	.size	 AnimTask_IsBallBlockedByTrainer,.Lfe13-AnimTask_IsBallBlockedByTrainer
	.align	2, 0
	.globl	ItemIdToBallId
	.type	 ItemIdToBallId,function
	.thumb_func
ItemIdToBallId:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	sub	r0, r0, #0x1
	cmp	r0, #0xb
	bhi	.L118	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L121
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L122:
	.align	2, 0
.L121:
	.word	.L119
	.align	2, 0
	.align	2, 0
.L119:
	.word	.L106
	.word	.L107
	.word	.L108
	.word	.L118
	.word	.L109
	.word	.L110
	.word	.L111
	.word	.L112
	.word	.L113
	.word	.L114
	.word	.L115
	.word	.L116
.L106:
	mov	r0, #0x4
	b	.L120
.L107:
	mov	r0, #0x3
	b	.L120
.L108:
	mov	r0, #0x1
	b	.L120
.L109:
	mov	r0, #0x2
	b	.L120
.L110:
	mov	r0, #0x5
	b	.L120
.L111:
	mov	r0, #0x6
	b	.L120
.L112:
	mov	r0, #0x7
	b	.L120
.L113:
	mov	r0, #0x8
	b	.L120
.L114:
	mov	r0, #0x9
	b	.L120
.L115:
	mov	r0, #0xa
	b	.L120
.L116:
	mov	r0, #0xb
	b	.L120
.L118:
	mov	r0, #0x0
.L120:
	pop	{r1}
	bx	r1
.Lfe14:
	.size	 ItemIdToBallId,.Lfe14-ItemIdToBallId
	.align	2, 0
	.globl	AnimTask_ThrowBall
	.type	 AnimTask_ThrowBall,function
	.thumb_func
AnimTask_ThrowBall:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	mov	sl, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r0, .L124
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L124+0x4
	add	r0, r0, r1
	mov	r1, #0x20
	mov	r2, #0x50
	mov	r3, #0x1d
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, .L124+0x8
	mov	r9, r1
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r6, r4, r1
	mov	r0, #0x22
	strh	r0, [r6, #0x2e]
	ldr	r2, .L124+0xc
	mov	r8, r2
	ldrb	r0, [r2]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x30]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	strh	r0, [r6, #0x32]
	mov	r0, r9
	add	r0, r0, #0x1c
	add	r4, r4, r0
	ldr	r0, .L124+0x10
	str	r0, [r4]
	ldr	r0, .L124+0x14
	ldr	r0, [r0]
	ldr	r3, [r0, #0x8]
	ldr	r1, .L124+0x18
	mov	r2, r8
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x1
	ldrb	r2, [r3, #0x9]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x9]
	ldr	r1, .L124+0x1c
	mov	r2, sl
	lsl	r0, r2, #0x2
	add	r0, r0, sl
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	ldr	r1, .L124+0x20
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	gLastUsedItem
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	gBattleAnimTarget
	.word	sub_8171104
	.word	gBattleSpritesDataPtr
	.word	gBattlerSpriteIds
	.word	gTasks
	.word	sub_8170EF0
.Lfe15:
	.size	 AnimTask_ThrowBall,.Lfe15-AnimTask_ThrowBall
	.align	2, 0
	.type	 sub_8170EF0,function
	.thumb_func
sub_8170EF0:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L128
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	ldr	r2, .L128+0x4
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2e]
	ldr	r0, .L128+0x8
	cmp	r1, r0
	bne	.L127	@cond_branch
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
.L127:
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gTasks
	.word	gSprites
	.word	0xffff
.Lfe16:
	.size	 sub_8170EF0,.Lfe16-sub_8170EF0
	.align	2, 0
	.globl	AnimTask_ThrowBallSpecial
	.type	 AnimTask_ThrowBallSpecial,function
	.thumb_func
AnimTask_ThrowBallSpecial:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L133
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L131	@cond_branch
	mov	r6, #0x20
	mov	r5, #0xb
	b	.L132
.L134:
	.align	2, 0
.L133:
	.word	gBattleTypeFlags
.L131:
	mov	r6, #0x17
	mov	r5, #0x5
.L132:
	ldr	r0, .L135
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L135+0x4
	add	r0, r0, r1
	add	r1, r6, #0
	add	r1, r1, #0x20
	mov	r2, #0x50
	orr	r5, r5, r2
	add	r2, r5, #0
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L135+0x8
	mov	r9, r0
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r6, r4, r0
	mov	r0, #0x22
	strh	r0, [r6, #0x2e]
	ldr	r1, .L135+0xc
	mov	r8, r1
	ldrb	r0, [r1]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6, #0x30]
	mov	r1, r8
	ldrb	r0, [r1]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x10
	strh	r0, [r6, #0x32]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r4, r4, r9
	ldr	r0, .L135+0x10
	str	r0, [r4]
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L135+0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldr	r1, .L135+0x18
	str	r1, [r0]
	ldr	r1, .L135+0x1c
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	ldr	r1, .L135+0x20
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gLastUsedItem
	.word	gBallSpriteTemplates
	.word	gSprites
	.word	gBattleAnimTarget
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	sub_8039E84
	.word	gTasks
	.word	sub_8171030
.Lfe17:
	.size	 AnimTask_ThrowBallSpecial,.Lfe17-AnimTask_ThrowBallSpecial
	.align	2, 0
	.type	 sub_8171030,function
	.thumb_func
sub_8171030:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L139
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L139+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L138	@cond_branch
	mov	r0, #0x3d
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r0, .L139+0x8
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L139+0xc
	str	r1, [r0]
	ldr	r0, .L139+0x10
	mov	r1, #0xa
	bl	CreateTask
	ldr	r0, .L139+0x14
	str	r0, [r4]
.L138:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L140:
	.align	2, 0
.L139:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gTasks
	.word	sub_8171104
	.word	sub_81710A8
	.word	sub_8170EF0
.Lfe18:
	.size	 sub_8171030,.Lfe18-sub_8171030
	.align	2, 0
	.type	 sub_81710A8,function
	.thumb_func
sub_81710A8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r6, .L143
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r4, .L143+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L142	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x0
	bl	StartSpriteAnim
	add	r0, r5, #0
	bl	DestroyTask
.L142:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe19:
	.size	 sub_81710A8,.Lfe19-sub_81710A8
	.align	2, 0
	.type	 sub_8171104,function
	.thumb_func
sub_8171104:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	ldrh	r2, [r4, #0x32]
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	strh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	strh	r2, [r4, #0x36]
	ldr	r0, .L146
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L146+0x4
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L147:
	.align	2, 0
.L146:
	.word	0xffd8
	.word	sub_8171134
.Lfe20:
	.size	 sub_8171104,.Lfe20-sub_8171104
	.align	2, 0
	.type	 sub_8171134,function
	.thumb_func
sub_8171134:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L149	@cond_branch
	ldr	r0, .L161
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0x5
	bne	.L150	@cond_branch
	ldr	r0, .L161+0x4
	str	r0, [r4, #0x1c]
	b	.L149
.L162:
	.align	2, 0
.L161:
	.word	gBattleSpritesDataPtr
	.word	sub_8171CAC
.L150:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	strh	r1, [r4, #0x24]
	strh	r1, [r4, #0x26]
	add	r1, r4, #0
	add	r1, r1, #0x2e
	mov	r2, #0x0
	add	r0, r4, #0
	add	r0, r0, #0x3c
.L155:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L155	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldr	r0, .L163
	str	r0, [r4, #0x1c]
	ldr	r0, .L163+0x4
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xb
	bgt	.L149	@cond_branch
	cmp	r5, #0
	blt	.L149	@cond_branch
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r5, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	AnimateBallOpenParticles
	ldr	r0, .L163+0x8
	ldrb	r1, [r0]
	mov	r0, #0x0
	mov	r2, #0xe
	add	r3, r5, #0
	bl	LaunchBallFadeMonTask
.L149:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L164:
	.align	2, 0
.L163:
	.word	sub_81711E8
	.word	gLastUsedItem
	.word	gBattleAnimTarget
.Lfe21:
	.size	 sub_8171134,.Lfe21-sub_8171134
	.align	2, 0
	.type	 sub_81711E8,function
	.thumb_func
sub_81711E8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L166	@cond_branch
	ldr	r0, .L167
	mov	r1, #0x32
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x38]
	ldr	r0, .L167+0x4
	str	r0, [r4, #0x1c]
	ldr	r2, .L167+0x8
	ldr	r1, .L167+0xc
	ldr	r0, .L167+0x10
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
.L166:
	pop	{r4}
	pop	{r0}
	bx	r0
.L168:
	.align	2, 0
.L167:
	.word	TaskDummy
	.word	sub_8171240
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
.Lfe22:
	.size	 sub_81711E8,.Lfe22-sub_81711E8
	.align	2, 0
	.type	 sub_8171240,function
	.thumb_func
sub_8171240:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r1, .L181
	ldr	r0, .L181+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r4, [r0]
	ldrh	r0, [r7, #0x38]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L181+0x8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r5, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xb
	bne	.L170	@cond_branch
	mov	r0, #0x3c
	bl	PlaySE
.L170:
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L173	@cond_branch
	cmp	r0, #0x1
	bgt	.L179	@cond_branch
	cmp	r0, #0
	beq	.L172	@cond_branch
	b	.L176
.L182:
	.align	2, 0
.L181:
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gTasks
.L179:
	cmp	r0, #0x2
	beq	.L175	@cond_branch
	b	.L176
.L172:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	ldr	r1, .L183
	mov	r0, #0x1c
	str	r0, [r1]
	ldr	r2, .L183+0x4
	ldr	r1, .L183+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	ldrh	r0, [r0, #0x22]
	add	r1, r1, r0
	ldrh	r0, [r7, #0x26]
	ldrh	r7, [r7, #0x22]
	add	r0, r0, r7
	sub	r1, r1, r0
	strh	r1, [r2]
	ldr	r4, .L183+0xc
	ldrh	r0, [r2]
	lsl	r0, r0, #0x8
	mov	r1, #0x1c
	bl	__udivsi3
	strh	r0, [r4]
	strh	r0, [r5, #0xc]
	b	.L180
.L184:
	.align	2, 0
.L183:
	.word	gUnknown_030062DC
	.word	gUnknown_030062E4
	.word	gSprites
	.word	gUnknown_030062E0
.L173:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x20
	strh	r0, [r5, #0x1c]
	mov	r0, #0x1c
	ldrsh	r2, [r5, r0]
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldrh	r0, [r5, #0xc]
	ldrh	r1, [r5, #0xe]
	add	r0, r0, r1
	strh	r0, [r5, #0xe]
	ldr	r0, .L185
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r2, #0xe
	ldrsh	r0, [r5, r2]
	neg	r0, r0
	asr	r0, r0, #0x8
	strh	r0, [r1, #0x26]
	mov	r0, #0x1c
	ldrsh	r1, [r5, r0]
	ldr	r0, .L185+0x4
	cmp	r1, r0
	ble	.L171	@cond_branch
	b	.L180
.L186:
	.align	2, 0
.L185:
	.word	gSprites
	.word	0x47f
.L175:
	add	r0, r4, #0
	bl	ResetSpriteRotScale
	ldr	r1, .L187
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L180:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L171
.L188:
	.align	2, 0
.L187:
	.word	gSprites
.L176:
	ldr	r0, .L189
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xa
	ble	.L171	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	add	r0, r7, #0
	mov	r1, #0x2
	bl	StartSpriteAnim
	mov	r0, #0x0
	strh	r0, [r7, #0x38]
	ldr	r0, .L189+0x4
	str	r0, [r7, #0x1c]
.L171:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L190:
	.align	2, 0
.L189:
	.word	gTasks
	.word	sub_817138C
.Lfe23:
	.size	 sub_8171240,.Lfe23-sub_8171240
	.align	2, 0
	.type	 sub_817138C,function
	.thumb_func
sub_817138C:
	push	{r4, lr}
	add	r4, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L192	@cond_branch
	mov	r1, #0x0
	strh	r1, [r4, #0x34]
	mov	r0, #0x28
	strh	r0, [r4, #0x36]
	strh	r1, [r4, #0x38]
	mov	r0, #0x0
	mov	r1, #0x28
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	mov	r0, #0x36
	ldrsh	r1, [r4, r0]
	mov	r0, #0x0
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldr	r0, .L193
	str	r0, [r4, #0x1c]
.L192:
	pop	{r4}
	pop	{r0}
	bx	r0
.L194:
	.align	2, 0
.L193:
	.word	sub_81713D0
.Lfe24:
	.size	 sub_817138C,.Lfe24-sub_817138C
	.align	2, 0
	.type	 sub_81713D0,function
	.thumb_func
sub_81713D0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L197	@cond_branch
	cmp	r1, #0x1
	beq	.L207	@cond_branch
	b	.L196
.L197:
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	add	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	add	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x3f
	ble	.L196	@cond_branch
	ldrh	r0, [r4, #0x36]
	sub	r0, r0, #0xa
	strh	r0, [r4, #0x36]
	ldr	r1, .L214
	add	r0, r2, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L199	@cond_branch
	mov	r5, #0x1
.L199:
	cmp	r0, #0x2
	beq	.L202	@cond_branch
	cmp	r0, #0x2
	bgt	.L206	@cond_branch
	cmp	r0, #0x1
	beq	.L201	@cond_branch
	b	.L204
.L215:
	.align	2, 0
.L214:
	.word	0x101
.L206:
	cmp	r0, #0x3
	beq	.L203	@cond_branch
	b	.L204
.L201:
	mov	r0, #0x38
	bl	PlaySE
	b	.L196
.L202:
	mov	r0, #0x39
	bl	PlaySE
	b	.L196
.L203:
	mov	r0, #0x3a
	bl	PlaySE
	b	.L196
.L204:
	mov	r0, #0x3b
	bl	PlaySE
	b	.L196
.L207:
	mov	r2, #0x38
	ldrsh	r0, [r4, r2]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	neg	r0, r0
	strh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x38]
	sub	r1, r1, #0x4
	ldrh	r2, [r4, #0x34]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	sub	r1, r1, r0
	strh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L196	@cond_branch
	strh	r5, [r4, #0x38]
	ldr	r0, .L216
	and	r0, r0, r2
	strh	r0, [r4, #0x34]
.L196:
	cmp	r5, #0
	beq	.L211	@cond_branch
	mov	r5, #0x0
	strh	r5, [r4, #0x34]
	mov	r0, #0x40
	mov	r1, #0x28
	bl	Cos
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	strh	r5, [r4, #0x26]
	ldr	r0, .L216+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L212	@cond_branch
	strh	r5, [r4, #0x38]
	ldr	r0, .L216+0x8
	str	r0, [r4, #0x1c]
	b	.L211
.L217:
	.align	2, 0
.L216:
	.word	-0x100
	.word	gBattleSpritesDataPtr
	.word	sub_81717B4
.L212:
	ldr	r0, .L218
	str	r0, [r4, #0x1c]
	mov	r0, #0x1
	strh	r0, [r4, #0x36]
	strh	r5, [r4, #0x38]
.L211:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L219:
	.align	2, 0
.L218:
	.word	sub_81714D4
.Lfe25:
	.size	 sub_81713D0,.Lfe25-sub_81713D0
	.align	2, 0
	.type	 sub_81714D4,function
	.thumb_func
sub_81714D4:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	mov	r5, #0x0
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L221	@cond_branch
	strh	r5, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldr	r0, .L222
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	strh	r5, [r0, #0xc]
	ldr	r0, .L222+0x4
	str	r0, [r4, #0x1c]
	mov	r0, #0x17
	bl	PlaySE
.L221:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L223:
	.align	2, 0
.L222:
	.word	gBattleSpritesDataPtr
	.word	sub_8171520
.Lfe26:
	.size	 sub_81714D4,.Lfe26-sub_81714D4
	.align	2, 0
	.type	 sub_8171520,function
	.thumb_func
sub_8171520:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x34]
	mov	r1, #0xff
	and	r1, r1, r0
	cmp	r1, #0x6
	bls	.LCB2610
	b	.L253	@long jump
.LCB2610:
	lsl	r0, r1, #0x2
	ldr	r1, .L261
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L262:
	.align	2, 0
.L261:
	.word	.L257
	.align	2, 0
	.align	2, 0
.L257:
	.word	.L226
	.word	.L230
	.word	.L235
	.word	.L239
	.word	.L243
	.word	.L247
	.word	.L253
.L226:
	ldr	r1, .L263
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L227	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L228
.L264:
	.align	2, 0
.L263:
	.word	gBattleSpritesDataPtr
.L227:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L228:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x7
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xe
	bhi	.LCB2678
	b	.L225	@long jump
.LCB2678:
	b	.L258
.L230:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L259	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L232	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	ChangeSpriteAffineAnim
	b	.L225
.L232:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
	b	.L225
.L235:
	ldr	r1, .L265
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L236	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L237
.L266:
	.align	2, 0
.L265:
	.word	gBattleSpritesDataPtr
.L236:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L237:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x18
	bhi	.LCB2774
	b	.L225	@long jump
.LCB2774:
.L258:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	strh	r3, [r0, #0xc]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	strh	r3, [r4, #0x38]
	b	.L225
.L239:
	ldrh	r0, [r4, #0x38]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x38]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L240	@cond_branch
.L259:
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L225
.L240:
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L241	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	ChangeSpriteAffineAnim
	b	.L243
.L241:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ChangeSpriteAffineAnim
.L243:
	ldr	r1, .L267
	ldr	r5, [r1]
	ldr	r2, [r5, #0x8]
	ldrh	r3, [r2, #0xc]
	mov	r6, #0xc
	ldrsh	r0, [r2, r6]
	add	r6, r1, #0
	cmp	r0, #0xff
	ble	.L244	@cond_branch
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	ldr	r1, [r5, #0x8]
	ldrb	r0, [r1, #0xc]
	strh	r0, [r1, #0xc]
	b	.L245
.L268:
	.align	2, 0
.L267:
	.word	gBattleSpritesDataPtr
.L244:
	add	r0, r3, #0
	add	r0, r0, #0xb0
	strh	r0, [r2, #0xc]
.L245:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r4, #0x38]
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x8
	bls	.L225	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	strh	r3, [r0, #0xc]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	strh	r3, [r4, #0x38]
	ldrh	r0, [r4, #0x36]
	neg	r0, r0
	strh	r0, [r4, #0x36]
	b	.L225
.L247:
	mov	r6, #0x80
	lsl	r6, r6, #0x1
	add	r0, r6, #0
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x18
	ldr	r0, .L269
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r1, r0
	bne	.L248	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L269+0x4
	str	r0, [r4, #0x1c]
	b	.L225
.L270:
	.align	2, 0
.L269:
	.word	gBattleSpritesDataPtr
	.word	sub_81717B4
.L248:
	cmp	r0, #0x4
	bne	.L250	@cond_branch
	cmp	r1, #0x3
	bne	.L250	@cond_branch
	ldr	r0, .L271
	str	r0, [r4, #0x1c]
	b	.L260
.L272:
	.align	2, 0
.L271:
	.word	sub_81717D8
.L250:
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
.L260:
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L225
.L253:
	ldrh	r0, [r4, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L225	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x38]
	ldrh	r1, [r4, #0x34]
	ldr	r0, .L273
	and	r0, r0, r1
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	mov	r1, #0x3
	bl	StartSpriteAffineAnim
	mov	r6, #0x36
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	bge	.L255	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x2
	bl	StartSpriteAffineAnim
	b	.L256
.L274:
	.align	2, 0
.L273:
	.word	-0x100
.L255:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
.L256:
	mov	r0, #0x17
	bl	PlaySE
.L225:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_8171520,.Lfe27-sub_8171520
	.align	2, 0
	.type	 sub_81717B4,function
	.thumb_func
sub_81717B4:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x38]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L276	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x38]
	ldr	r0, .L277
	str	r0, [r1, #0x1c]
.L276:
	pop	{r0}
	bx	r0
.L278:
	.align	2, 0
.L277:
	.word	sub_8171AE4
.Lfe28:
	.size	 sub_81717B4,.Lfe28-sub_81717B4
	.align	2, 0
	.type	 sub_81717D8,function
	.thumb_func
sub_81717D8:
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	ldr	r1, .L280
	str	r1, [r0, #0x1c]
	mov	r1, #0x0
	strh	r1, [r0, #0x34]
	strh	r1, [r0, #0x36]
	strh	r1, [r0, #0x38]
	bx	lr
.L281:
	.align	2, 0
.L280:
	.word	sub_81717F8
.Lfe29:
	.size	 sub_81717D8,.Lfe29-sub_81717D8
	.align	2, 0
	.type	 sub_81717F8,function
	.thumb_func
sub_81717F8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldr	r7, .L290
	ldrh	r0, [r6, #0x36]
	add	r0, r0, #0x1
	mov	r1, #0x0
	mov	r8, r1
	strh	r0, [r6, #0x36]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0x28
	bne	.L283	@cond_branch
	mov	r0, #0xfe
	bl	PlaySE
	ldrb	r1, [r6, #0x5]
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	mov	r1, #0x6
	mov	r2, #0x0
	bl	BlendPalettes
	add	r0, r6, #0
	bl	sub_81719EC
	b	.L284
.L291:
	.align	2, 0
.L290:
	.word	gBattleAnimTarget
.L283:
	cmp	r1, #0x3c
	bne	.L285	@cond_branch
	ldrb	r1, [r6, #0x5]
	lsr	r1, r1, #0x4
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	lsl	r0, r0, r1
	mov	r1, r8
	str	r1, [sp]
	mov	r1, #0x2
	mov	r2, #0x6
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	b	.L284
.L285:
	cmp	r1, #0x5f
	bne	.L287	@cond_branch
	ldr	r0, .L292
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
	bl	m4aMPlayAllStop
	ldr	r0, .L292+0x4
	bl	PlaySE
	b	.L284
.L293:
	.align	2, 0
.L292:
	.word	gDoingBattleAnim
	.word	0x213
.L287:
	ldr	r0, .L294
	cmp	r1, r0
	bne	.L284	@cond_branch
	ldr	r5, .L294+0x4
	ldr	r4, .L294+0x8
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, r8
	strh	r0, [r6, #0x2e]
	ldr	r0, .L294+0xc
	str	r0, [r6, #0x1c]
.L284:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L295:
	.align	2, 0
.L294:
	.word	0x13b
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_81718D8
.Lfe30:
	.size	 sub_81717F8,.Lfe30-sub_81717F8
	.align	2, 0
	.type	 sub_81718D8,function
	.thumb_func
sub_81718D8:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L299	@cond_branch
	cmp	r0, #0x1
	bgt	.L306	@cond_branch
	cmp	r0, #0
	beq	.L298	@cond_branch
	b	.L303
.L306:
	cmp	r0, #0x2
	beq	.L302	@cond_branch
	b	.L303
.L298:
	strh	r0, [r4, #0x30]
	strh	r0, [r4, #0x32]
	ldrb	r1, [r4, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4, #0x1]
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, [r4, #0x14]
	ldrh	r0, [r0, #0x2]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldr	r0, .L308
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	b	.L307
.L309:
	.align	2, 0
.L308:
	.word	0x7fff
.L299:
	ldrh	r0, [r4, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x30]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L297	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r2, [r4, #0x32]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x32]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L297	@cond_branch
	b	.L307
.L302:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L307:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L297
.L303:
	ldr	r0, .L310
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L297	@cond_branch
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	strh	r5, [r4, #0x2e]
	ldr	r0, .L310+0x4
	str	r0, [r4, #0x1c]
.L297:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L311:
	.align	2, 0
.L310:
	.word	gPaletteFade
	.word	sub_81719C0
.Lfe31:
	.size	 sub_81718D8,.Lfe31-sub_81718D8
	.align	2, 0
	.type	 sub_81719C0,function
	.thumb_func
sub_81719C0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L313	@cond_branch
	ldr	r0, .L315
	strh	r0, [r4, #0x2e]
	b	.L314
.L316:
	.align	2, 0
.L315:
	.word	0xffff
.L313:
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L314:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 sub_81719C0,.Lfe32-sub_81719C0
	.align	2, 0
	.type	 sub_81719EC,function
	.thumb_func
sub_81719EC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	r6, r0, #0
	add	r1, r6, #0
	add	r1, r1, #0x43
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L318	@cond_branch
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	b	.L319
.L318:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x1
	strb	r0, [r1]
.L319:
	mov	r0, #0x4
	bl	sub_8171D60
	mov	r7, #0x0
	ldr	r2, .L326
	mov	r9, r2
	mov	r0, #0x1c
	add	r0, r0, r9
	mov	sl, r0
.L323:
	mov	r2, #0x20
	ldrsh	r1, [r6, r2]
	mov	r0, #0x22
	ldrsh	r2, [r6, r0]
	ldr	r0, .L326+0x4
	mov	r3, r8
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x40
	beq	.L322	@cond_branch
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	mov	r2, r9
	add	r5, r4, r2
	mov	r0, #0x18
	strh	r0, [r5, #0x2e]
	ldr	r0, .L326+0x8
	lsl	r1, r7, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	ldrh	r2, [r6, #0x20]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	mov	r0, #0x1
	ldrsb	r0, [r1, r0]
	ldrh	r2, [r6, #0x22]
	add	r0, r0, r2
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	ldrsb	r0, [r1, r0]
	strh	r0, [r5, #0x38]
	add	r0, r5, #0
	bl	InitAnimArcTranslation
	add	r4, r4, sl
	ldr	r0, .L326+0xc
	str	r0, [r4]
	ldr	r0, .L326+0x10
	ldrb	r1, [r0, #0x4]
	add	r0, r5, #0
	bl	StartSpriteAnim
.L322:
	add	r7, r7, #0x1
	cmp	r7, #0x2
	bls	.L323	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L327:
	.align	2, 0
.L326:
	.word	gSprites
	.word	gBallParticlesSpriteTemplates+0x60
	.word	sBallCaptureSuccessStarData
	.word	sub_8171AAC
	.word	gBallParticleAnimNums
.Lfe33:
	.size	 sub_81719EC,.Lfe33-sub_81719EC
	.align	2, 0
	.type	 sub_8171AAC,function
	.thumb_func
sub_8171AAC:
	push	{r4, lr}
	add	r4, r0, #0
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsr	r1, r2, #0x2
	mov	r0, #0x1
	eor	r1, r1, r0
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r0, r4, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	add	r0, r4, #0
	bl	DestroySprite
.L329:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 sub_8171AAC,.Lfe34-sub_8171AAC
	.align	2, 0
	.type	 sub_8171AE4,function
	.thumb_func
sub_8171AE4:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r1, #0x1
	bl	StartSpriteAnim
	add	r0, r4, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	ldr	r0, .L335
	str	r0, [r4, #0x1c]
	ldr	r0, .L335+0x4
	ldrh	r0, [r0]
	bl	ItemIdToBallId
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0xb
	bgt	.L331	@cond_branch
	cmp	r5, #0
	blt	.L331	@cond_branch
	ldrh	r0, [r4, #0x20]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x22]
	sub	r1, r1, #0x5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r5, [sp]
	mov	r2, #0x1
	mov	r3, #0x1c
	bl	AnimateBallOpenParticles
	ldr	r0, .L335+0x8
	ldrb	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0xe
	add	r3, r5, #0
	bl	LaunchBallFadeMonTask
.L331:
	ldr	r6, .L335+0xc
	ldr	r5, .L335+0x10
	ldr	r4, .L335+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	AnimateSprite
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	strh	r1, [r0, #0x30]
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L336:
	.align	2, 0
.L335:
	.word	sub_8171BAC
	.word	gLastUsedItem
	.word	gBattleAnimTarget
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe35:
	.size	 sub_8171AE4,.Lfe35-sub_8171AE4
	.align	2, 0
	.type	 sub_8171BAC,function
	.thumb_func
sub_8171BAC:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	mov	r5, #0x0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L338	@cond_branch
	add	r2, r7, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L338:
	ldr	r4, .L342
	ldr	r3, .L342+0x4
	ldr	r2, .L342+0x8
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r4
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L339	@cond_branch
	add	r0, r1, #0
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	mov	r5, #0x1
	b	.L340
.L343:
	.align	2, 0
.L342:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
.L339:
	ldr	r6, .L344
	add	r0, r6, #0
	ldrh	r6, [r1, #0x30]
	add	r0, r0, r6
	strh	r0, [r1, #0x30]
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
.L340:
	add	r0, r7, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L341	@cond_branch
	cmp	r5, #0
	beq	.L341	@cond_branch
	ldr	r4, .L344+0x4
	ldr	r3, .L344+0x8
	ldr	r2, .L344+0xc
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r6, #0x0
	mov	r5, #0x0
	strh	r5, [r0, #0x26]
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldr	r0, .L344+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	lsl	r1, r1, #0x1e
	add	r2, r2, #0x3e
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	strh	r5, [r7, #0x2e]
	ldr	r0, .L344+0x14
	str	r0, [r7, #0x1c]
	ldr	r0, .L344+0x18
	strb	r6, [r0]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
.L341:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L345:
	.align	2, 0
.L344:
	.word	-0x120
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimTarget
	.word	gBattleSpritesDataPtr
	.word	sub_81719C0
	.word	gDoingBattleAnim
.Lfe36:
	.size	 sub_8171BAC,.Lfe36-sub_8171BAC
	.align	2, 0
	.type	 sub_8171CAC,function
	.thumb_func
sub_8171CAC:
	push	{r4, lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x20]
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r0, [r2, #0x20]
	ldrh	r0, [r2, #0x26]
	ldrh	r3, [r2, #0x22]
	add	r0, r0, r3
	strh	r0, [r2, #0x22]
	strh	r1, [r2, #0x26]
	strh	r1, [r2, #0x24]
	ldr	r4, .L352
	mov	r3, #0x0
	mov	r1, #0x5
	add	r0, r2, #0
	add	r0, r0, #0x38
.L350:
	strh	r3, [r0]
	sub	r0, r0, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L350	@cond_branch
	str	r4, [r2, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L353:
	.align	2, 0
.L352:
	.word	sub_8171CE8
.Lfe37:
	.size	 sub_8171CAC,.Lfe37-sub_8171CAC
	.align	2, 0
	.type	 sub_8171CE8,function
	.thumb_func
sub_8171CE8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	add	r2, r0, #0
	ldrh	r1, [r4, #0x2e]
	add	r2, r2, r1
	mov	r0, #0xd0
	lsl	r0, r0, #0x3
	add	r3, r0, #0
	ldrh	r1, [r4, #0x30]
	add	r3, r3, r1
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r4, #0x2e]
	and	r3, r3, r0
	strh	r3, [r4, #0x30]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	cmp	r0, #0xa0
	bgt	.L356	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x8
	neg	r1, r1
	cmp	r0, r1
	bge	.L355	@cond_branch
.L356:
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	ldr	r0, .L357
	str	r0, [r4, #0x1c]
	ldr	r1, .L357+0x4
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0x1
	bl	UpdateOamPriorityInAllHealthboxes
.L355:
	pop	{r4}
	pop	{r0}
	bx	r0
.L358:
	.align	2, 0
.L357:
	.word	sub_81719C0
	.word	gDoingBattleAnim
.Lfe38:
	.size	 sub_8171CE8,.Lfe38-sub_8171CE8
	.align	2, 0
	.type	 sub_8171D60,function
	.thumb_func
sub_8171D60:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	ldr	r1, .L361
	lsr	r5, r0, #0x15
	add	r4, r5, r1
	ldrh	r0, [r4, #0x6]
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L361+0x4
	cmp	r0, r1
	bne	.L360	@cond_branch
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L361+0x8
	add	r0, r5, r0
	bl	LoadCompressedSpritePaletteUsingHeap
.L360:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L362:
	.align	2, 0
.L361:
	.word	gBallParticleSpritesheets
	.word	-0x10000
	.word	gBallParticlePalettes
.Lfe39:
	.size	 sub_8171D60,.Lfe39-sub_8171D60
	.align	2, 0
	.globl	AnimateBallOpenParticles
	.type	 AnimateBallOpenParticles,function
	.thumb_func
AnimateBallOpenParticles:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	mov	r8, r1
	mov	r9, r2
	mov	sl, r3
	ldr	r5, [sp, #0x1c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r1, r9
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r0, sl
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	bl	sub_8171D60
	ldr	r1, .L364
	lsl	r0, r5, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x5
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L364+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0xa]
	mov	r1, r8
	strh	r1, [r0, #0xc]
	mov	r1, r9
	strh	r1, [r0, #0xe]
	mov	r1, sl
	strh	r1, [r0, #0x10]
	strh	r5, [r0, #0x26]
	mov	r0, #0xf
	bl	PlaySE
	add	r0, r4, #0
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L365:
	.align	2, 0
.L364:
	.word	gBallParticleAnimationFuncs
	.word	gTasks
.Lfe40:
	.size	 AnimateBallOpenParticles,.Lfe40-AnimateBallOpenParticles
	.align	2, 0
	.globl	sub_8171E20
	.type	 sub_8171E20,function
	.thumb_func
sub_8171E20:
	push	{lr}
	ldr	r0, .L368
	ldr	r1, .L368+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L367	@cond_branch
	ldr	r0, .L368+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	ldrb	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strb	r0, [r1, #0xa]
.L367:
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gMain
	.word	0x439
	.word	gBattleSpritesDataPtr
.Lfe41:
	.size	 sub_8171E20,.Lfe41-sub_8171E20
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation,function
	.thumb_func
PokeBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L376
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r0, [r6, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r2, #0x8
	ldrsh	r0, [r6, r2]
	add	r2, r1, #0
	cmp	r0, #0xf
	bgt	.L371	@cond_branch
	ldrb	r1, [r6, #0xa]
	ldrb	r2, [r6, #0xc]
	ldrb	r4, [r6, #0xe]
	mov	r9, r4
	ldrb	r3, [r6, #0x10]
	ldr	r4, [sp]
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r4, .L376+0x4
	add	r0, r0, r4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0x40
	beq	.L372	@cond_branch
	bl	sub_8171E20
	mov	r0, sl
	lsl	r4, r0, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	ldr	r5, .L376+0x8
	add	r7, r4, r5
	ldr	r0, .L376+0xc
	ldr	r1, [sp]
	add	r0, r1, r0
	ldrb	r1, [r0]
	add	r0, r7, #0
	bl	StartSpriteAnim
	add	r5, r5, #0x1c
	add	r4, r4, r5
	ldr	r0, .L376+0x10
	str	r0, [r4]
	mov	r0, #0x3
	mov	r2, r9
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r1, [r7, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r7, #0x5]
	ldrb	r0, [r6, #0x8]
	cmp	r0, #0x7
	bls	.L373	@cond_branch
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L373:
	lsl	r0, r0, #0x5
	strh	r0, [r7, #0x2e]
.L372:
	ldr	r0, .L376
	mov	r4, r8
	lsl	r1, r4, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r2, #0x8
	ldrsh	r1, [r1, r2]
	add	r2, r0, #0
	cmp	r1, #0xf
	bne	.L371	@cond_branch
	ldr	r0, .L376+0x14
	ldr	r4, .L376+0x18
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L375	@cond_branch
	ldr	r0, .L376+0x8
	mov	r2, sl
	lsl	r1, r2, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L375:
	mov	r0, r8
	bl	DestroyTask
	b	.L370
.L377:
	.align	2, 0
.L376:
	.word	gTasks
	.word	gBallParticlesSpriteTemplates
	.word	gSprites
	.word	gBallParticleAnimNums
	.word	PokeBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.L371:
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
.L370:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 PokeBallOpenParticleAnimation,.Lfe42-PokeBallOpenParticleAnimation
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation_Step1,function
	.thumb_func
PokeBallOpenParticleAnimation_Step1:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x30]
	mov	r3, #0x30
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	bne	.L379	@cond_branch
	ldr	r0, .L381
	str	r0, [r1, #0x1c]
	b	.L380
.L382:
	.align	2, 0
.L381:
	.word	PokeBallOpenParticleAnimation_Step2
.L379:
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x30]
.L380:
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 PokeBallOpenParticleAnimation_Step1,.Lfe43-PokeBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 PokeBallOpenParticleAnimation_Step2,function
	.thumb_func
PokeBallOpenParticleAnimation_Step2:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x2
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	bne	.L384	@cond_branch
	add	r0, r4, #0
	bl	DestroyBallOpenAnimationParticle
.L384:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 PokeBallOpenParticleAnimation_Step2,.Lfe44-PokeBallOpenParticleAnimation_Step2
	.align	2, 0
	.type	 TimerBallOpenParticleAnimation,function
	.thumb_func
TimerBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L393
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L393+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L389:
	ldr	r0, .L393+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L388	@cond_branch
	bl	sub_8171E20
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L393+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L393+0x10
	add	r4, r4, r0
	ldr	r0, .L393+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0xa
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	mov	r0, #0x1
	strh	r0, [r5, #0x3a]
.L388:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L389	@cond_branch
	ldr	r0, .L393+0x18
	ldr	r1, .L393+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L392	@cond_branch
	ldr	r0, .L393+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L392:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L394:
	.align	2, 0
.L393:
	.word	gTasks
	.word	gSprites
	.word	gBallParticlesSpriteTemplates
	.word	gBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe45:
	.size	 TimerBallOpenParticleAnimation,.Lfe45-TimerBallOpenParticleAnimation
	.align	2, 0
	.type	 DiveBallOpenParticleAnimation,function
	.thumb_func
DiveBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L403
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L403+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L399:
	ldr	r0, .L403+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L398	@cond_branch
	bl	sub_8171E20
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L403+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L403+0x10
	add	r4, r4, r0
	ldr	r0, .L403+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0xa
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	mov	r0, #0x2
	strh	r0, [r5, #0x3a]
.L398:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L399	@cond_branch
	ldr	r0, .L403+0x18
	ldr	r1, .L403+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L402	@cond_branch
	ldr	r0, .L403+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L402:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L404:
	.align	2, 0
.L403:
	.word	gTasks
	.word	gSprites
	.word	gBallParticlesSpriteTemplates
	.word	gBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe46:
	.size	 DiveBallOpenParticleAnimation,.Lfe46-DiveBallOpenParticleAnimation
	.align	2, 0
	.type	 SafariBallOpenParticleAnimation,function
	.thumb_func
SafariBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L413
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L413+0x4
	mov	r8, r3
	ldr	r0, .L413+0x8
	add	r1, r1, r0
	mov	sl, r1
.L409:
	ldr	r0, .L413+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L408	@cond_branch
	bl	sub_8171E20
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L413+0x10
	add	r4, r4, r0
	ldr	r0, .L413+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x4
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L408:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L409	@cond_branch
	ldr	r0, .L413+0x18
	ldr	r1, .L413+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L412	@cond_branch
	ldr	r0, .L413+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L412:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L414:
	.align	2, 0
.L413:
	.word	gTasks
	.word	gSprites
	.word	gBallParticleAnimNums
	.word	gBallParticlesSpriteTemplates
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe47:
	.size	 SafariBallOpenParticleAnimation,.Lfe47-SafariBallOpenParticleAnimation
	.align	2, 0
	.type	 UltraBallOpenParticleAnimation,function
	.thumb_func
UltraBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L423
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x4]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0xc]
	mov	r7, #0x0
	ldr	r3, .L423+0x4
	mov	sl, r3
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
.L419:
	ldr	r0, .L423+0x8
	ldr	r2, [sp, #0x10]
	add	r0, r2, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L418	@cond_branch
	bl	sub_8171E20
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r3, sl
	add	r5, r4, r3
	ldr	r0, .L423+0xc
	add	r0, r0, r8
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L423+0x10
	add	r4, r4, r0
	ldr	r0, .L423+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r7
	strh	r0, [r5, #0x2e]
	mov	r0, #0x5
	strh	r0, [r5, #0x36]
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L418:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x9
	bls	.L419	@cond_branch
	ldr	r0, .L423+0x18
	ldr	r1, .L423+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L422	@cond_branch
	ldr	r0, .L423+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L422:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L424:
	.align	2, 0
.L423:
	.word	gTasks
	.word	gSprites
	.word	gBallParticlesSpriteTemplates
	.word	gBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gMain
	.word	0x439
.Lfe48:
	.size	 UltraBallOpenParticleAnimation,.Lfe48-UltraBallOpenParticleAnimation
	.align	2, 0
	.type	 GreatBallOpenParticleAnimation,function
	.thumb_func
GreatBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L436
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrh	r1, [r3, #0x16]
	mov	r4, #0x16
	ldrsh	r0, [r3, r4]
	cmp	r0, #0
	beq	.L426	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x16]
	b	.L427
.L437:
	.align	2, 0
.L436:
	.word	gTasks
.L426:
	ldrh	r0, [r3, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r3, #0xa]
	str	r1, [sp]
	ldrb	r4, [r3, #0xc]
	str	r4, [sp, #0x4]
	ldrb	r1, [r3, #0xe]
	str	r1, [sp, #0x8]
	ldrb	r3, [r3, #0x10]
	str	r3, [sp, #0xc]
	mov	r7, #0x0
	str	r2, [sp, #0x14]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	str	r1, [sp, #0x10]
	ldr	r3, .L438
	mov	r9, r3
	ldr	r1, .L438+0x4
	add	r0, r0, r1
	mov	sl, r0
.L431:
	ldr	r0, .L438+0x8
	ldr	r4, [sp, #0x10]
	add	r0, r4, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L430	@cond_branch
	bl	sub_8171E20
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r0, r9
	add	r5, r4, r0
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L438+0xc
	add	r4, r4, r0
	ldr	r0, .L438+0x10
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	strh	r0, [r5, #0x3a]
.L430:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L431	@cond_branch
	ldr	r0, .L438+0x14
	ldr	r1, [sp, #0x14]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x8
	strh	r0, [r1, #0x16]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0x2
	bne	.L427	@cond_branch
	ldr	r0, .L438+0x18
	ldr	r4, .L438+0x1c
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L435	@cond_branch
	ldr	r0, .L438
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L435:
	mov	r0, r8
	bl	DestroyTask
.L427:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	gSprites
	.word	gBallParticleAnimNums
	.word	gBallParticlesSpriteTemplates
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
	.word	gTasks
	.word	gMain
	.word	0x439
.Lfe49:
	.size	 GreatBallOpenParticleAnimation,.Lfe49-GreatBallOpenParticleAnimation
	.align	2, 0
	.type	 FanOutBallOpenParticles_Step1,function
	.thumb_func
FanOutBallOpenParticles_Step1:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x32
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x36]
	ldrh	r1, [r4, #0x2e]
	add	r0, r0, r1
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	ldrh	r2, [r4, #0x30]
	add	r0, r0, r2
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r4, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L441	@cond_branch
	add	r0, r4, #0
	bl	DestroyBallOpenAnimationParticle
.L441:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe50:
	.size	 FanOutBallOpenParticles_Step1,.Lfe50-FanOutBallOpenParticles_Step1
	.align	2, 0
	.type	 RepeatBallOpenParticleAnimation,function
	.thumb_func
RepeatBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L450
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L450+0x4
	mov	r8, r3
	ldr	r0, .L450+0x8
	add	r1, r1, r0
	mov	sl, r1
.L446:
	ldr	r0, .L450+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L445	@cond_branch
	bl	sub_8171E20
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L450+0x10
	add	r4, r4, r0
	ldr	r0, .L450+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r7
	strh	r0, [r5, #0x2e]
.L445:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0xb
	bls	.L446	@cond_branch
	ldr	r0, .L450+0x18
	ldr	r1, .L450+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L449	@cond_branch
	ldr	r0, .L450+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L449:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L451:
	.align	2, 0
.L450:
	.word	gTasks
	.word	gSprites
	.word	gBallParticleAnimNums
	.word	gBallParticlesSpriteTemplates
	.word	gSprites+0x1c
	.word	RepeatBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.Lfe51:
	.size	 RepeatBallOpenParticleAnimation,.Lfe51-RepeatBallOpenParticleAnimation
	.align	2, 0
	.type	 RepeatBallOpenParticleAnimation_Step1,function
	.thumb_func
RepeatBallOpenParticleAnimation_Step1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	mov	r2, #0x32
	ldrsh	r1, [r5, r2]
	add	r0, r4, #0
	bl	Sin
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Cos
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0x6
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L453	@cond_branch
	add	r0, r5, #0
	bl	DestroyBallOpenAnimationParticle
.L453:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 RepeatBallOpenParticleAnimation_Step1,.Lfe52-RepeatBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 MasterBallOpenParticleAnimation,function
	.thumb_func
MasterBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	ldr	r0, .L470
	ldr	r2, [sp]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldrb	r3, [r1, #0xa]
	str	r3, [sp, #0x4]
	ldrb	r0, [r1, #0xc]
	str	r0, [sp, #0x8]
	ldrb	r2, [r1, #0xe]
	str	r2, [sp, #0xc]
	ldrb	r1, [r1, #0x10]
	str	r1, [sp, #0x10]
	mov	r3, #0x0
	mov	r8, r3
	mov	r1, r9
	lsl	r0, r1, #0x1
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x14]
.L458:
	mov	r7, #0x0
	mov	r2, #0x1
	add	r2, r2, r8
	mov	sl, r2
.L462:
	ldr	r0, .L470+0x4
	ldr	r3, [sp, #0x14]
	add	r0, r3, r0
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	ldr	r3, [sp, #0x10]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L461	@cond_branch
	bl	sub_8171E20
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	ldr	r0, .L470+0x8
	add	r5, r4, r0
	ldr	r0, .L470+0xc
	add	r0, r0, r9
	ldrb	r1, [r0]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r1, .L470+0x10
	add	r4, r4, r1
	ldr	r0, .L470+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r1, [sp, #0xc]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r2, r3, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
	mov	r0, #0x8
	strh	r0, [r5, #0x36]
	mov	r0, r8
	cmp	r0, #0
	bne	.L464	@cond_branch
	mov	r0, #0x2
	strh	r0, [r5, #0x38]
	mov	r0, #0x1
	b	.L469
.L471:
	.align	2, 0
.L470:
	.word	gTasks
	.word	gBallParticlesSpriteTemplates
	.word	gSprites
	.word	gBallParticleAnimNums
	.word	gSprites+0x1c
	.word	FanOutBallOpenParticles_Step1
.L464:
	mov	r0, #0x1
	strh	r0, [r5, #0x38]
	mov	r0, #0x2
.L469:
	strh	r0, [r5, #0x3a]
.L461:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L462	@cond_branch
	mov	r1, sl
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	cmp	r0, #0x1
	bls	.L458	@cond_branch
	ldr	r0, .L472
	ldr	r2, .L472+0x4
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L468	@cond_branch
	ldr	r0, .L472+0x8
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L468:
	ldr	r0, [sp]
	bl	DestroyTask
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	gMain
	.word	0x439
	.word	gSprites
.Lfe53:
	.size	 MasterBallOpenParticleAnimation,.Lfe53-MasterBallOpenParticleAnimation
	.align	2, 0
	.type	 PremierBallOpenParticleAnimation,function
	.thumb_func
PremierBallOpenParticleAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L482
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x26]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldrb	r2, [r0, #0xa]
	str	r2, [sp]
	ldrb	r3, [r0, #0xc]
	str	r3, [sp, #0x4]
	ldrb	r2, [r0, #0xe]
	str	r2, [sp, #0x8]
	ldrb	r0, [r0, #0x10]
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x10]
	ldr	r3, .L482+0x4
	mov	r8, r3
	ldr	r0, .L482+0x8
	add	r1, r1, r0
	mov	sl, r1
.L478:
	ldr	r0, .L482+0xc
	ldr	r1, [sp, #0x10]
	add	r0, r1, r0
	ldr	r1, [sp]
	ldr	r2, [sp, #0x4]
	ldr	r3, [sp, #0xc]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x40
	beq	.L477	@cond_branch
	bl	sub_8171E20
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	mov	r2, r8
	add	r5, r4, r2
	mov	r3, sl
	ldrb	r1, [r3]
	add	r0, r5, #0
	bl	StartSpriteAnim
	ldr	r0, .L482+0x10
	add	r4, r4, r0
	ldr	r0, .L482+0x14
	str	r0, [r4]
	mov	r0, #0x3
	ldr	r2, [sp, #0x8]
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r5, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r5, #0x5]
	lsl	r0, r7, #0x5
	strh	r0, [r5, #0x2e]
.L477:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x7
	bls	.L478	@cond_branch
	ldr	r0, .L482+0x18
	ldr	r1, .L482+0x1c
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L481	@cond_branch
	ldr	r0, .L482+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x3c]
.L481:
	mov	r0, r9
	bl	DestroyTask
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L483:
	.align	2, 0
.L482:
	.word	gTasks
	.word	gSprites
	.word	gBallParticleAnimNums
	.word	gBallParticlesSpriteTemplates
	.word	gSprites+0x1c
	.word	PremierBallOpenParticleAnimation_Step1
	.word	gMain
	.word	0x439
.Lfe54:
	.size	 PremierBallOpenParticleAnimation,.Lfe54-PremierBallOpenParticleAnimation
	.align	2, 0
	.type	 PremierBallOpenParticleAnimation_Step1,function
	.thumb_func
PremierBallOpenParticleAnimation_Step1:
	push	{r4, r5, lr}
	add	r5, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r5, r1]
	mov	r2, #0x30
	ldrsh	r1, [r5, r2]
	bl	Sin
	strh	r0, [r5, #0x24]
	mov	r0, #0x2e
	ldrsh	r4, [r5, r0]
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r2, #0x32
	ldrsh	r1, [r5, r2]
	bl	Sin
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	bl	Cos
	strh	r0, [r5, #0x26]
	ldrh	r0, [r5, #0x2e]
	add	r0, r0, #0xa
	mov	r1, #0xff
	and	r0, r0, r1
	strh	r0, [r5, #0x2e]
	ldrh	r0, [r5, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x30]
	ldrh	r0, [r5, #0x32]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x32]
	ldrh	r0, [r5, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x33
	bne	.L485	@cond_branch
	add	r0, r5, #0
	bl	DestroyBallOpenAnimationParticle
.L485:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 PremierBallOpenParticleAnimation_Step1,.Lfe55-PremierBallOpenParticleAnimation_Step1
	.align	2, 0
	.type	 DestroyBallOpenAnimationParticle,function
	.thumb_func
DestroyBallOpenAnimationParticle:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	ldr	r0, .L505
	ldr	r1, .L505+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L487	@cond_branch
	mov	r1, #0x3c
	ldrsh	r0, [r7, r1]
	cmp	r0, #0x1
	bne	.L498	@cond_branch
	add	r0, r7, #0
	bl	DestroySpriteAndFreeResources
	b	.L490
.L506:
	.align	2, 0
.L505:
	.word	gMain
	.word	0x439
.L487:
	ldr	r2, .L507
	ldr	r0, [r2]
	ldr	r1, [r0, #0x8]
	ldrb	r0, [r1, #0xa]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0xa]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L491	@cond_branch
	mov	r4, #0x0
	ldr	r5, .L507+0x4
	b	.L492
.L508:
	.align	2, 0
.L507:
	.word	gBattleSpritesDataPtr
	.word	gBallParticleAnimationFuncs
.L494:
	add	r5, r5, #0x4
	add	r4, r4, #0x1
.L492:
	cmp	r4, #0xb
	bgt	.L493	@cond_branch
	ldr	r0, [r5]
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L494	@cond_branch
.L493:
	cmp	r4, #0xc
	bne	.L498	@cond_branch
	mov	r6, #0x0
	ldr	r5, .L509
	ldr	r4, .L509+0x4
.L502:
	ldrh	r0, [r5, #0x6]
	bl	FreeSpriteTilesByTag
	ldrh	r0, [r4, #0x4]
	bl	FreeSpritePaletteByTag
	add	r5, r5, #0x8
	add	r4, r4, #0x8
	add	r6, r6, #0x1
	cmp	r6, #0xb
	ble	.L502	@cond_branch
.L498:
	add	r0, r7, #0
	bl	DestroySprite
	b	.L490
.L510:
	.align	2, 0
.L509:
	.word	gBallParticleSpritesheets
	.word	gBallParticlePalettes
.L491:
	add	r0, r7, #0
	bl	DestroySprite
.L490:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 DestroyBallOpenAnimationParticle,.Lfe56-DestroyBallOpenAnimationParticle
	.align	2, 0
	.globl	LaunchBallFadeMonTask
	.type	 LaunchBallFadeMonTask,function
	.thumb_func
LaunchBallFadeMonTask:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r9, r2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	ldr	r0, .L514
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L514+0x4
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	strh	r7, [r5, #0x26]
	strh	r6, [r5, #0xe]
	mov	r0, r9
	strh	r0, [r5, #0x1c]
	mov	r1, r9
	lsr	r0, r1, #0x10
	strh	r0, [r5, #0x1e]
	cmp	r4, #0
	bne	.L512	@cond_branch
	lsl	r0, r6, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	ldr	r2, .L514+0x8
	lsl	r1, r7, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalette
	mov	r0, #0x1
	strh	r0, [r5, #0xa]
	b	.L513
.L515:
	.align	2, 0
.L514:
	.word	sub_8172AB0
	.word	gTasks
	.word	gBallOpenFadeColors
.L512:
	lsl	r0, r6, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldr	r2, .L516
	lsl	r1, r7, #0x1
	add	r1, r1, r2
	ldrh	r3, [r1]
	mov	r1, #0x10
	mov	r2, #0x10
	bl	BlendPalette
	mov	r0, #0x10
	strh	r0, [r5, #0x8]
	ldr	r0, .L516+0x4
	strh	r0, [r5, #0xa]
	ldr	r0, .L516+0x8
	str	r0, [r5]
.L513:
	ldr	r0, .L516+0xc
	str	r0, [sp]
	mov	r0, r9
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L517:
	.align	2, 0
.L516:
	.word	gBallOpenFadeColors
	.word	0xffff
	.word	sub_8172B40
	.word	0x7fff
.Lfe57:
	.size	 LaunchBallFadeMonTask,.Lfe57-LaunchBallFadeMonTask
	.align	2, 0
	.type	 sub_8172AB0,function
	.thumb_func
sub_8172AB0:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	ldr	r1, .L522
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x10
	bgt	.L519	@cond_branch
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x8]
	ldr	r3, .L522+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L520
.L523:
	.align	2, 0
.L522:
	.word	gTasks
	.word	gBallOpenFadeColors
.L519:
	ldr	r0, .L524
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L520	@cond_branch
	ldrh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldr	r1, .L524+0x4
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	add	r0, r5, #0
	bl	DestroyTask
.L520:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gPaletteFade
	.word	0x7fff
.Lfe58:
	.size	 sub_8172AB0,.Lfe58-sub_8172AB0
	.align	2, 0
	.type	 sub_8172B40,function
	.thumb_func
sub_8172B40:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L528
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L527	@cond_branch
	ldr	r0, .L528+0x4
	lsl	r4, r2, #0x2
	add	r4, r4, r2
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r4, #0x1c]
	ldrh	r1, [r4, #0x1e]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldr	r1, .L528+0x8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L528+0xc
	str	r0, [r4]
.L527:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L529:
	.align	2, 0
.L528:
	.word	gPaletteFade
	.word	gTasks
	.word	0x7fff
	.word	sub_8172B90
.Lfe59:
	.size	 sub_8172B40,.Lfe59-sub_8172B40
	.align	2, 0
	.type	 sub_8172B90,function
	.thumb_func
sub_8172B90:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L533
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0x10
	bgt	.L531	@cond_branch
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	lsl	r0, r0, #0x14
	mov	r3, #0x80
	lsl	r3, r3, #0x11
	add	r0, r0, r3
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x8]
	ldr	r3, .L533+0x4
	lsl	r1, r1, #0x1
	add	r1, r1, r3
	ldrh	r3, [r1]
	mov	r1, #0x10
	bl	BlendPalette
	ldrh	r0, [r4, #0xa]
	ldrh	r1, [r4, #0x8]
	add	r0, r0, r1
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L532
.L534:
	.align	2, 0
.L533:
	.word	gTasks
	.word	gBallOpenFadeColors
.L531:
	add	r0, r2, #0
	bl	DestroyTask
.L532:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe60:
	.size	 sub_8172B90,.Lfe60-sub_8172B90
	.align	2, 0
	.globl	AnimTask_SwapMonSpriteToFromSubstitute
	.type	 AnimTask_SwapMonSpriteToFromSubstitute,function
	.thumb_func
AnimTask_SwapMonSpriteToFromSubstitute:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L554
	ldr	r3, .L554+0x4
	ldrb	r2, [r3]
	add	r0, r2, r0
	ldrb	r6, [r0]
	ldr	r1, .L554+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r1, #0x1c
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L541	@cond_branch
	cmp	r0, #0x1
	bgt	.L552	@cond_branch
	cmp	r0, #0
	beq	.L537	@cond_branch
	b	.L536
.L555:
	.align	2, 0
.L554:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gTasks
.L552:
	cmp	r0, #0x2
	beq	.L542	@cond_branch
	b	.L536
.L537:
	ldr	r0, .L556
	ldrh	r0, [r0]
	strh	r0, [r5, #0x1e]
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r4, [r5, #0x8]
	add	r0, r0, r4
	strh	r0, [r5, #0x8]
	ldrb	r0, [r3]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L538	@cond_branch
	ldr	r2, .L556+0x4
	lsl	r3, r6, #0x4
	add	r1, r3, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r1, #0x24]
	add	r0, r0, r4
	strh	r0, [r1, #0x24]
	add	r4, r3, #0
	b	.L539
.L557:
	.align	2, 0
.L556:
	.word	gBattleAnimArgs
	.word	gSprites
.L538:
	ldr	r3, .L558
	lsl	r4, r6, #0x4
	add	r2, r4, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r5, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r2, r3, #0
.L539:
	ldr	r1, .L558+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	ldrb	r0, [r3, #0x8]
	strh	r0, [r3, #0x8]
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x20
	ldrsh	r1, [r0, r2]
	mov	r4, #0x24
	ldrsh	r0, [r0, r4]
	add	r1, r1, r0
	add	r1, r1, #0x20
	mov	r0, #0x98
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bls	.L536	@cond_branch
	ldrh	r0, [r3, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	b	.L536
.L559:
	.align	2, 0
.L558:
	.word	gSprites
	.word	gTasks
.L541:
	ldrb	r1, [r5, #0x1e]
	add	r0, r2, #0
	add	r2, r6, #0
	bl	LoadBattleMonGfxAndAnimate
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	b	.L536
.L542:
	mov	r1, #0xa0
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	ldrh	r2, [r5, #0x8]
	add	r0, r0, r2
	strh	r0, [r5, #0x8]
	ldrb	r0, [r3]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L543	@cond_branch
	ldr	r0, .L560
	lsl	r3, r6, #0x4
	add	r2, r3, r6
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r1, [r5, #0x8]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
	strh	r0, [r2, #0x24]
	add	r4, r3, #0
	b	.L544
.L561:
	.align	2, 0
.L560:
	.word	gSprites
.L543:
	ldr	r0, .L562
	lsl	r2, r6, #0x4
	add	r1, r2, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r3, [r1, #0x24]
	add	r0, r0, r3
	strh	r0, [r1, #0x24]
	add	r4, r2, #0
.L544:
	ldr	r1, .L562+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x8]
	strh	r1, [r0, #0x8]
	ldr	r0, .L562+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L545	@cond_branch
	ldr	r0, .L562
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r4, #0x24
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bgt	.L547	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x24]
	b	.L553
.L563:
	.align	2, 0
.L562:
	.word	gSprites
	.word	gTasks
	.word	gBattleAnimAttacker
.L545:
	ldr	r0, .L564
	add	r1, r4, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r3, #0x24
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	blt	.L547	@cond_branch
	strh	r2, [r1, #0x24]
	mov	r4, #0x1
	mov	r8, r4
.L547:
	mov	r0, r8
	cmp	r0, #0
	beq	.L536	@cond_branch
.L553:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
.L536:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L565:
	.align	2, 0
.L564:
	.word	gSprites
.Lfe61:
	.size	 AnimTask_SwapMonSpriteToFromSubstitute,.Lfe61-AnimTask_SwapMonSpriteToFromSubstitute
	.align	2, 0
	.globl	AnimTask_SubstituteFadeToInvisible
	.type	 AnimTask_SubstituteFadeToInvisible,function
	.thumb_func
AnimTask_SubstituteFadeToInvisible:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L578
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L571	@cond_branch
	cmp	r0, #0x1
	bgt	.L577	@cond_branch
	cmp	r0, #0
	beq	.L568	@cond_branch
	b	.L567
.L579:
	.align	2, 0
.L578:
	.word	gTasks
.L577:
	cmp	r0, #0x2
	beq	.L574	@cond_branch
	b	.L567
.L568:
	ldr	r0, .L580
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L569	@cond_branch
	ldr	r1, .L580+0x4
	mov	r0, #0x50
	bl	SetGpuReg
	b	.L570
.L581:
	.align	2, 0
.L580:
	.word	gBattleAnimAttacker
	.word	0x3f42
.L569:
	ldr	r1, .L582
	mov	r0, #0x50
	bl	SetGpuReg
.L570:
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r0, .L582+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x26]
	b	.L567
.L583:
	.align	2, 0
.L582:
	.word	0x3f44
	.word	gTasks
.L571:
	ldrh	r0, [r4, #0xa]
	add	r1, r0, #0x1
	strh	r1, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L567	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r2, [r4, #0x8]
	add	r2, r2, #0x1
	strh	r2, [r4, #0x8]
	lsl	r1, r2, #0x8
	mov	r0, #0x10
	sub	r0, r0, r2
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x10
	bne	.L567	@cond_branch
	ldrh	r0, [r4, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	b	.L567
.L574:
	ldr	r1, .L584
	ldr	r4, .L584+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L584+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r0, .L584+0xc
	add	r1, r1, r0
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r0, #0x0
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldrb	r0, [r4]
	bl	ClearBehindSubstituteBit
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L567:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L585:
	.align	2, 0
.L584:
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	0x6010000
.Lfe62:
	.size	 AnimTask_SubstituteFadeToInvisible,.Lfe62-AnimTask_SubstituteFadeToInvisible
	.align	2, 0
	.globl	AnimTask_IsAttackerBehindSubstitute
	.type	 AnimTask_IsAttackerBehindSubstitute,function
	.thumb_func
AnimTask_IsAttackerBehindSubstitute:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L587
	ldr	r1, .L587+0x4
	ldr	r2, [r1]
	ldr	r1, .L587+0x8
	ldrb	r1, [r1]
	ldr	r2, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1f
	strh	r1, [r3, #0xe]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L588:
	.align	2, 0
.L587:
	.word	gBattleAnimArgs
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
.Lfe63:
	.size	 AnimTask_IsAttackerBehindSubstitute,.Lfe63-AnimTask_IsAttackerBehindSubstitute
	.align	2, 0
	.globl	AnimTask_SetTargetToEffectBattler
	.type	 AnimTask_SetTargetToEffectBattler,function
	.thumb_func
AnimTask_SetTargetToEffectBattler:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L590
	ldr	r1, .L590+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe64:
	.size	 AnimTask_SetTargetToEffectBattler,.Lfe64-AnimTask_SetTargetToEffectBattler
	.align	2, 0
	.globl	sub_8172EF0
	.type	 sub_8172EF0,function
	.thumb_func
sub_8172EF0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L597
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	add	r5, r0, #0
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	add	r4, r0, #0
	add	r0, r6, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L593	@cond_branch
	lsr	r0, r5, #0x10
	ldr	r7, .L597+0x4
	and	r5, r5, r7
	eor	r0, r0, r5
	lsr	r1, r4, #0x10
	eor	r0, r0, r1
	and	r4, r4, r7
	eor	r0, r0, r4
	cmp	r0, #0x7
	bhi	.L594	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L594:
	mov	r0, r8
	cmp	r0, #0
	beq	.L593	@cond_branch
	ldr	r0, .L597+0x8
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, r7
	bne	.L596	@cond_branch
	ldr	r0, .L597+0xc
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L597+0x10
	bl	LoadCompressedSpritePaletteUsingHeap
.L596:
	ldr	r5, .L597+0x14
	add	r0, r5, #0
	mov	r1, #0xa
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L597+0x18
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	mov	r4, #0x0
	strh	r6, [r2, #0x8]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	strh	r6, [r1, #0x8]
	strh	r4, [r2, #0xa]
	mov	r0, #0x1
	strh	r0, [r1, #0xa]
	b	.L592
.L598:
	.align	2, 0
.L597:
	.word	gBattleSpritesDataPtr
	.word	0xffff
	.word	0x27f9
	.word	gBattleAnimPicTable+0x748
	.word	gBattleAnimPaletteTable+0x748
	.word	sub_8172FEC
	.word	gTasks
.L593:
	ldr	r0, .L599
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x1
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L592:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	gBattleSpritesDataPtr
.Lfe65:
	.size	 sub_8172EF0,.Lfe65-sub_8172EF0
	.align	2, 0
	.type	 sub_8172FEC,function
	.thumb_func
sub_8172FEC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L617
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r1, [r4, #0x22]
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3b
	bgt	.L602	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x22]
	b	.L601
.L618:
	.align	2, 0
.L617:
	.word	gTasks
.L602:
	ldr	r0, .L619
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	beq	.LCB6967
	b	.L601	@long jump
.LCB6967:
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB6979
	b	.L601	@long jump
.LCB6979:
	ldrb	r0, [r4, #0x8]
	mov	r8, r0
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L605	@cond_branch
	ldr	r0, .L619+0x4
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	b	.L606
.L620:
	.align	2, 0
.L619:
	.word	gBattleSpritesDataPtr
	.word	gWishStarSpriteTemplate
.L605:
	cmp	r0, #0
	blt	.L607	@cond_branch
	cmp	r0, #0x3
	bgt	.L607	@cond_branch
	ldr	r0, .L621
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L621+0x4
	lsl	r2, r5, #0x4
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x4
	b	.L616
.L622:
	.align	2, 0
.L621:
	.word	gMiniTwinklingStarSpriteTemplate
	.word	gSprites
.L607:
	ldr	r0, .L623
	add	r1, r5, #0
	mov	r3, #0x5
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L623+0x4
	lsl	r2, r5, #0x4
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x5
.L616:
	ldr	r4, .L623+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L623+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L606:
	ldr	r2, .L623+0x10
	lsl	r1, r7, #0x2
	add	r0, r1, r7
	lsl	r0, r0, #0x3
	add	r6, r0, r2
	mov	r2, #0xa
	ldrsh	r0, [r6, r2]
	mov	r9, r1
	cmp	r0, #0
	bne	.L609	@cond_branch
	ldr	r1, .L623+0x4
	lsl	r2, r5, #0x4
	add	r0, r2, r5
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L623+0x14
	str	r1, [r0]
	add	r4, r2, #0
	b	.L610
.L624:
	.align	2, 0
.L623:
	.word	gMiniTwinklingStarSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	gTasks
	.word	sub_81731FC
.L609:
	ldr	r3, .L625
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L625+0x4
	str	r2, [r0]
	add	r1, r1, r3
	ldr	r0, .L625+0x8
	strh	r0, [r1, #0x24]
	mov	r0, #0x20
	strh	r0, [r1, #0x26]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	mov	r1, #0x1e
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L610	@cond_branch
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x3f
	cmp	r0, #0
	bne	.L612	@cond_branch
	mov	r1, #0xc0
.L612:
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x66
	bl	PlaySE12WithPanning
.L610:
	ldr	r1, .L625
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r7, [r0, #0x2e]
	ldr	r1, .L625+0xc
	mov	r2, r9
	add	r0, r2, r7
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1e]
	cmp	r5, #0x40
	beq	.L614	@cond_branch
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x20]
.L614:
	mov	r4, #0x1e
	ldrsh	r0, [r1, r4]
	cmp	r0, #0x5
	bne	.L601	@cond_branch
	ldr	r0, .L625+0x10
	str	r0, [r1]
.L601:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L626:
	.align	2, 0
.L625:
	.word	gSprites
	.word	sub_8173250
	.word	0xffe0
	.word	gTasks
	.word	sub_81731B0
.Lfe66:
	.size	 sub_8172FEC,.Lfe66-sub_8172FEC
	.align	2, 0
	.type	 sub_81731B0,function
	.thumb_func
sub_81731B0:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	ldr	r1, .L630
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0x20
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L628	@cond_branch
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x1
	bne	.L629	@cond_branch
	ldrb	r1, [r1, #0x8]
	ldr	r0, .L630+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L629:
	add	r0, r3, #0
	bl	DestroyTask
.L628:
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe67:
	.size	 sub_81731B0,.Lfe67-sub_81731B0
	.align	2, 0
	.type	 sub_81731FC,function
	.thumb_func
sub_81731FC:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x18
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	mov	r1, #0x18
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0xc
	strh	r0, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L633	@cond_branch
	ldr	r2, .L634
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L633:
	pop	{r4}
	pop	{r0}
	bx	r0
.L635:
	.align	2, 0
.L634:
	.word	gTasks
.Lfe68:
	.size	 sub_81731FC,.Lfe68-sub_81731FC
	.align	2, 0
	.type	 sub_8173250,function
	.thumb_func
sub_8173250:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x3
	bgt	.L637	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L638
.L637:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r1, [r4, #0x24]
	add	r1, r1, #0x5
	strh	r1, [r4, #0x24]
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0x5
	strh	r0, [r4, #0x26]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r1, #0x20
	ble	.L638	@cond_branch
	ldr	r2, .L640
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
.L638:
	pop	{r4}
	pop	{r0}
	bx	r0
.L641:
	.align	2, 0
.L640:
	.word	gTasks
.Lfe69:
	.size	 sub_8173250,.Lfe69-sub_8173250
	.align	2, 0
	.globl	AnimTask_LoadPokeblockGfx
	.type	 AnimTask_LoadPokeblockGfx,function
	.thumb_func
AnimTask_LoadPokeblockGfx:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L643
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L643+0x4
	bl	LoadCompressedSpritePaletteUsingHeap
	ldr	r0, .L643+0x8
	bl	IndexOfSpritePaletteTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L644:
	.align	2, 0
.L643:
	.word	gBattleAnimPicTable+0x868
	.word	gBattleAnimPaletteTable+0x868
	.word	0x281d
.Lfe70:
	.size	 AnimTask_LoadPokeblockGfx,.Lfe70-AnimTask_LoadPokeblockGfx
	.align	2, 0
	.globl	AnimTask_FreePokeblockGfx
	.type	 AnimTask_FreePokeblockGfx,function
	.thumb_func
AnimTask_FreePokeblockGfx:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L646
	add	r0, r5, #0
	bl	FreeSpriteTilesByTag
	add	r0, r5, #0
	bl	FreeSpritePaletteByTag
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L647:
	.align	2, 0
.L646:
	.word	0x281d
.Lfe71:
	.size	 AnimTask_FreePokeblockGfx,.Lfe71-AnimTask_FreePokeblockGfx
	.align	2, 0
	.type	 sub_817330C,function
	.thumb_func
sub_817330C:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r1, #0x0
	bl	InitSpritePosToAnimAttacker
	mov	r0, #0x1e
	strh	r0, [r4, #0x2e]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	ldr	r5, .L649
	lsr	r0, r0, #0x18
	ldrh	r1, [r5, #0x4]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r5, [r5, #0x6]
	add	r0, r0, r5
	strh	r0, [r4, #0x36]
	ldr	r0, .L649+0x4
	strh	r0, [r4, #0x38]
	add	r0, r4, #0
	bl	InitAnimArcTranslation
	ldr	r2, .L649+0x8
	ldr	r1, .L649+0xc
	ldr	r0, .L649+0x10
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L649+0x14
	str	r1, [r0]
	ldr	r0, .L649+0x18
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L650:
	.align	2, 0
.L649:
	.word	gBattleAnimArgs
	.word	0xffe0
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	sub_8039E84
	.word	sub_817339C
.Lfe72:
	.size	 sub_817330C,.Lfe72-sub_817330C
	.align	2, 0
	.type	 sub_817339C,function
	.thumb_func
sub_817339C:
	push	{lr}
	add	r3, r0, #0
	ldr	r2, .L653
	ldr	r1, .L653+0x4
	ldr	r0, .L653+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x2b
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L652	@cond_branch
	ldr	r0, .L653+0xc
	str	r0, [r3, #0x1c]
.L652:
	pop	{r0}
	bx	r0
.L654:
	.align	2, 0
.L653:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
	.word	sub_81733D4
.Lfe73:
	.size	 sub_817339C,.Lfe73-sub_817339C
	.align	2, 0
	.type	 sub_81733D4,function
	.thumb_func
sub_81733D4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L656	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x2e]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L657
	str	r0, [r4, #0x1c]
.L656:
	pop	{r4}
	pop	{r0}
	bx	r0
.L658:
	.align	2, 0
.L657:
	.word	sub_8173400
.Lfe74:
	.size	 sub_81733D4,.Lfe74-sub_81733D4
	.align	2, 0
	.type	 sub_8173400,function
	.thumb_func
sub_8173400:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L662
	ldr	r3, .L662+0x4
	ldr	r2, .L662+0x8
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	bge	.L660	@cond_branch
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L660	@cond_branch
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x0
	bl	StartSpriteAnim
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L660:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe75:
	.size	 sub_8173400,.Lfe75-sub_8173400
	.align	2, 0
	.globl	AnimTask_SetAttackerTargetLeftPos
	.type	 AnimTask_SetAttackerTargetLeftPos,function
	.thumb_func
AnimTask_SetAttackerTargetLeftPos:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L671
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	beq	.L666	@cond_branch
	cmp	r0, #0x1
	beq	.L667	@cond_branch
	b	.L665
.L672:
	.align	2, 0
.L671:
	.word	gBattleAnimArgs
.L666:
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L673
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L670
.L674:
	.align	2, 0
.L673:
	.word	gBattleAnimAttacker
.L667:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r1, .L675
	strb	r0, [r1]
	mov	r0, #0x0
.L670:
	bl	GetBattlerAtPosition
	ldr	r1, .L675+0x4
	strb	r0, [r1]
.L665:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L676:
	.align	2, 0
.L675:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe76:
	.size	 AnimTask_SetAttackerTargetLeftPos,.Lfe76-AnimTask_SetAttackerTargetLeftPos
	.align	2, 0
	.globl	AnimTask_GetTrappedMoveAnimId
	.type	 AnimTask_GetTrappedMoveAnimId,function
	.thumb_func
AnimTask_GetTrappedMoveAnimId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L687
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrh	r1, [r0]
	cmp	r1, #0x53
	bne	.L678	@cond_branch
	ldr	r1, .L687+0x4
	mov	r0, #0x1
	b	.L686
.L688:
	.align	2, 0
.L687:
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimArgs
.L678:
	cmp	r1, #0xfa
	bne	.L680	@cond_branch
	ldr	r1, .L689
	mov	r0, #0x2
	b	.L686
.L690:
	.align	2, 0
.L689:
	.word	gBattleAnimArgs
.L680:
	cmp	r1, #0x80
	bne	.L682	@cond_branch
	ldr	r1, .L691
	mov	r0, #0x3
	b	.L686
.L692:
	.align	2, 0
.L691:
	.word	gBattleAnimArgs
.L682:
	mov	r0, #0xa4
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L684	@cond_branch
	ldr	r1, .L693
	mov	r0, #0x4
	b	.L686
.L694:
	.align	2, 0
.L693:
	.word	gBattleAnimArgs
.L684:
	ldr	r1, .L695
	mov	r0, #0x0
.L686:
	strh	r0, [r1]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L696:
	.align	2, 0
.L695:
	.word	gBattleAnimArgs
.Lfe77:
	.size	 AnimTask_GetTrappedMoveAnimId,.Lfe77-AnimTask_GetTrappedMoveAnimId
	.align	2, 0
	.globl	AnimTask_GetBattlersFromArg
	.type	 AnimTask_GetBattlersFromArg,function
	.thumb_func
AnimTask_GetBattlersFromArg:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L698
	ldr	r1, .L698+0x4
	ldr	r2, [r1]
	ldr	r1, [r2, #0x8]
	ldrh	r1, [r1]
	strb	r1, [r3]
	ldr	r3, .L698+0x8
	ldr	r1, [r2, #0x8]
	ldrh	r1, [r1]
	lsr	r1, r1, #0x8
	strb	r1, [r3]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L699:
	.align	2, 0
.L698:
	.word	gBattleAnimAttacker
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimTarget
.Lfe78:
	.size	 AnimTask_GetBattlersFromArg,.Lfe78-AnimTask_GetBattlersFromArg
	.comm	gUnknown_030062DC, 4	@ 4
	.comm	gUnknown_030062E0, 4	@ 2
	.comm	gUnknown_030062E4, 4	@ 2
.text
	.align	2, 0

