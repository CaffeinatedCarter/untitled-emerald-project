@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gAIScriptPtr
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gAIScriptPtr,object
	.size	 gAIScriptPtr,4
gAIScriptPtr:
	.word	0x0
	.type	 sBattler_AI,object
	.size	 sBattler_AI,1
sBattler_AI:
	.byte	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattleAICmdTable,object
sBattleAICmdTable:
	.word	Cmd_if_random_less_than
	.word	Cmd_if_random_greater_than
	.word	Cmd_if_random_equal
	.word	Cmd_if_random_not_equal
	.word	Cmd_score
	.word	Cmd_if_hp_less_than
	.word	Cmd_if_hp_more_than
	.word	Cmd_if_hp_equal
	.word	Cmd_if_hp_not_equal
	.word	Cmd_if_status
	.word	Cmd_if_not_status
	.word	Cmd_if_status2
	.word	Cmd_if_not_status2
	.word	Cmd_if_status3
	.word	Cmd_if_not_status3
	.word	Cmd_if_side_affecting
	.word	Cmd_if_not_side_affecting
	.word	Cmd_if_less_than
	.word	Cmd_if_more_than
	.word	Cmd_if_equal
	.word	Cmd_if_not_equal
	.word	Cmd_if_less_than_ptr
	.word	Cmd_if_more_than_ptr
	.word	Cmd_if_equal_ptr
	.word	Cmd_if_not_equal_ptr
	.word	Cmd_if_move
	.word	Cmd_if_not_move
	.word	Cmd_if_in_bytes
	.word	Cmd_if_not_in_bytes
	.word	Cmd_if_in_hwords
	.word	Cmd_if_not_in_hwords
	.word	Cmd_if_user_has_attacking_move
	.word	Cmd_if_user_has_no_attacking_moves
	.word	Cmd_get_turn_count
	.word	Cmd_get_type
	.word	Cmd_get_considered_move_power
	.word	Cmd_get_how_powerful_move_is
	.word	Cmd_get_last_used_battler_move
	.word	Cmd_if_equal_
	.word	Cmd_if_not_equal_
	.word	Cmd_if_user_goes
	.word	Cmd_if_user_doesnt_go
	.word	Cmd_nullsub_2A
	.word	Cmd_nullsub_2B
	.word	Cmd_count_usable_party_mons
	.word	Cmd_get_considered_move
	.word	Cmd_get_considered_move_effect
	.word	Cmd_get_ability
	.word	Cmd_get_highest_type_effectiveness
	.word	Cmd_if_type_effectiveness
	.word	Cmd_nullsub_32
	.word	Cmd_nullsub_33
	.word	Cmd_if_status_in_party
	.word	Cmd_if_status_not_in_party
	.word	Cmd_get_weather
	.word	Cmd_if_effect
	.word	Cmd_if_not_effect
	.word	Cmd_if_stat_level_less_than
	.word	Cmd_if_stat_level_more_than
	.word	Cmd_if_stat_level_equal
	.word	Cmd_if_stat_level_not_equal
	.word	Cmd_if_can_faint
	.word	Cmd_if_cant_faint
	.word	Cmd_if_has_move
	.word	Cmd_if_doesnt_have_move
	.word	Cmd_if_has_move_with_effect
	.word	Cmd_if_doesnt_have_move_with_effect
	.word	Cmd_if_any_move_disabled_or_encored
	.word	Cmd_if_curr_move_disabled_or_encored
	.word	Cmd_flee
	.word	Cmd_if_random_safari_flee
	.word	Cmd_watch
	.word	Cmd_get_hold_effect
	.word	Cmd_get_gender
	.word	Cmd_is_first_turn_for
	.word	Cmd_get_stockpile_count
	.word	Cmd_is_double_battle
	.word	Cmd_get_used_held_item
	.word	Cmd_get_move_type_from_result
	.word	Cmd_get_move_power_from_result
	.word	Cmd_get_move_effect_from_result
	.word	Cmd_get_protect_count
	.word	Cmd_nullsub_52
	.word	Cmd_nullsub_53
	.word	Cmd_nullsub_54
	.word	Cmd_nullsub_55
	.word	Cmd_nullsub_56
	.word	Cmd_nullsub_57
	.word	Cmd_call
	.word	Cmd_goto
	.word	Cmd_end
	.word	Cmd_if_level_cond
	.word	Cmd_if_target_taunted
	.word	Cmd_if_target_not_taunted
	.word	Cmd_if_target_is_ally
	.word	Cmd_is_of_type
	.word	Cmd_check_ability
	.word	Cmd_if_flash_fired
	.word	Cmd_if_holds_item
	.size	 sBattleAICmdTable,396
	.align	1, 0
	.type	 sDiscouragedPowerfulMoveEffects,object
sDiscouragedPowerfulMoveEffects:
	.short	0x7
	.short	0x8
	.short	0x27
	.short	0x4b
	.short	0x50
	.short	0x91
	.short	0x97
	.short	0xa1
	.short	0xaa
	.short	0xb6
	.short	0xbe
	.short	0xcc
	.short	0xffff
	.size	 sDiscouragedPowerfulMoveEffects,26
.text
	.align	2, 0
	.globl	BattleAI_HandleItemUseBeforeAISetup
	.type	 BattleAI_HandleItemUseBeforeAISetup,function
	.thumb_func
BattleAI_HandleItemUseBeforeAISetup:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L15
	ldr	r0, [r1]
	ldr	r3, [r0, #0x18]
	mov	r4, #0x0
	mov	ip, r1
	ldr	r2, .L15+0x4
	mov	r1, #0x0
.L6:
	add	r0, r3, r4
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x53
	bls	.L6	@cond_branch
	ldr	r0, [r2]
	ldr	r1, .L15+0x8
	and	r0, r0, r1
	cmp	r0, #0x8
	bne	.L8	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L15+0xc
	ldr	r5, .L15+0x10
.L12:
	lsl	r2, r4, #0x1
	ldrh	r1, [r6]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, r5
	ldrh	r3, [r2]
	cmp	r3, #0
	beq	.L11	@cond_branch
	mov	r0, ip
	ldr	r2, [r0]
	ldr	r1, [r2, #0x18]
	add	r0, r1, #0
	add	r0, r0, #0x50
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r1, r1, #0x48
	add	r1, r1, r0
	strh	r3, [r1]
	ldr	r1, [r2, #0x18]
	add	r1, r1, #0x50
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L11:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L12	@cond_branch
.L8:
	add	r0, r7, #0
	bl	BattleAI_SetupAIData
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gBattleResources
	.word	gBattleTypeFlags
	.word	0xa7f098a
	.word	gTrainerBattleOpponent_A
	.word	gTrainers+0x10
.Lfe1:
	.size	 BattleAI_HandleItemUseBeforeAISetup,.Lfe1-BattleAI_HandleItemUseBeforeAISetup
	.align	2, 0
	.globl	BattleAI_SetupAIData
	.type	 BattleAI_SetupAIData,function
	.thumb_func
BattleAI_SetupAIData:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L56
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r4, #0x0
	ldr	r6, .L56+0x4
	mov	r3, #0x0
.L21:
	add	r0, r1, r4
	strb	r3, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x1b
	bls	.L21	@cond_branch
	mov	r4, #0x0
	ldr	r3, .L56
	mov	r5, #0x1
.L26:
	add	r1, r2, #0
	and	r1, r1, r5
	cmp	r1, #0
	beq	.L27	@cond_branch
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
	mov	r1, #0x64
	b	.L54
.L57:
	.align	2, 0
.L56:
	.word	gBattleResources
	.word	gActiveBattler
.L27:
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
.L54:
	strb	r1, [r0]
	lsr	r2, r2, #0x1
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L26	@cond_branch
	ldrb	r0, [r6]
	mov	r1, #0x0
	mov	r2, #0xff
	bl	CheckMoveLimitations
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	ldr	r5, .L58
.L33:
	ldr	r7, .L58+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r0, r0, r4
	mov	r1, #0x0
	strb	r1, [r0]
.L34:
	bl	Random
	ldr	r1, [r5]
	ldr	r2, [r1, #0x14]
	add	r2, r2, #0x18
	add	r2, r2, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	mov	r1, #0x64
	sub	r1, r1, r0
	strb	r1, [r2]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L33	@cond_branch
	ldr	r0, .L58
	ldr	r0, [r0]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, #0x20
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L58+0x8
	ldr	r6, .L58+0xc
	ldrb	r2, [r6]
	strb	r2, [r0]
	ldr	r0, .L58+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L36	@cond_branch
	ldr	r5, .L58+0x14
	bl	Random
	add	r4, r0, #0
	ldrb	r0, [r6]
	bl	GetBattlerSide
	mov	r3, #0x2
	add	r1, r3, #0
	and	r1, r1, r4
	mov	r2, #0x1
	eor	r0, r0, r2
	add	r1, r1, r0
	strb	r1, [r5]
	ldr	r0, .L58+0x18
	ldrb	r1, [r0]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x2
	add	r0, r0, r7
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L38	@cond_branch
	eor	r2, r2, r3
	strb	r2, [r5]
	b	.L38
.L59:
	.align	2, 0
.L58:
	.word	gBattleResources
	.word	gBitTable
	.word	sBattler_AI
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattlerTarget
	.word	gAbsentBattlerFlags
.L36:
	ldr	r0, .L60
	mov	r1, #0x1
	eor	r1, r1, r2
	strb	r1, [r0]
.L38:
	ldr	r0, .L60+0x4
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L39	@cond_branch
	bl	GetAiScriptsInRecordedBattle
	b	.L55
.L61:
	.align	2, 0
.L60:
	.word	gBattlerTarget
	.word	gBattleTypeFlags
.L39:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldr	r0, .L62
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x17
	str	r0, [r1, #0xc]
	b	.L40
.L63:
	.align	2, 0
.L62:
	.word	gBattleResources
.L41:
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r0, .L64
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	str	r0, [r1, #0xc]
	b	.L40
.L65:
	.align	2, 0
.L64:
	.word	gBattleResources
.L43:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L45	@cond_branch
	ldr	r0, .L66
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x80
	lsl	r0, r0, #0x18
	str	r0, [r1, #0xc]
	b	.L40
.L67:
	.align	2, 0
.L66:
	.word	gBattleResources
.L45:
	mov	r0, #0x80
	lsl	r0, r0, #0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L47	@cond_branch
	bl	GetAiScriptsInBattleFactory
.L55:
	ldr	r1, .L68
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	str	r0, [r1, #0xc]
	b	.L40
.L69:
	.align	2, 0
.L68:
	.word	gBattleResources
.L47:
	ldr	r0, .L70
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L49	@cond_branch
	ldr	r0, .L70+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x7
	str	r0, [r1, #0xc]
	b	.L40
.L71:
	.align	2, 0
.L70:
	.word	0xc3f0900
	.word	gBattleResources
.L49:
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L51	@cond_branch
	ldr	r0, .L72
	ldr	r0, [r0]
	ldr	r4, [r0, #0x14]
	ldr	r3, .L72+0x4
	ldr	r0, .L72+0x8
	ldrh	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r3, #0x1c
	add	r1, r1, r3
	ldr	r0, .L72+0xc
	ldrh	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldr	r1, [r1]
	ldr	r0, [r0]
	orr	r1, r1, r0
	str	r1, [r4, #0xc]
	b	.L40
.L73:
	.align	2, 0
.L72:
	.word	gBattleResources
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	gTrainerBattleOpponent_B
.L51:
	ldr	r0, .L74
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L74+0x4
	ldr	r0, .L74+0x8
	ldrh	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r0, [r0]
	str	r0, [r3, #0xc]
.L40:
	ldr	r0, .L74+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L53	@cond_branch
	ldr	r0, .L74
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0xc]
	mov	r1, #0x80
	orr	r0, r0, r1
	str	r0, [r2, #0xc]
.L53:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L75:
	.align	2, 0
.L74:
	.word	gBattleResources
	.word	gTrainers
	.word	gTrainerBattleOpponent_A
	.word	gBattleTypeFlags
.Lfe2:
	.size	 BattleAI_SetupAIData,.Lfe2-BattleAI_SetupAIData
	.align	2, 0
	.globl	BattleAI_ChooseMoveOrAction
	.type	 BattleAI_ChooseMoveOrAction,function
	.thumb_func
BattleAI_ChooseMoveOrAction:
	push	{r4, lr}
	ldr	r0, .L80
	ldrh	r4, [r0]
	ldr	r0, .L80+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L77	@cond_branch
	bl	ChooseMoveOrAction_Singles
	b	.L79
.L81:
	.align	2, 0
.L80:
	.word	gCurrentMove
	.word	gBattleTypeFlags
.L77:
	bl	ChooseMoveOrAction_Doubles
.L79:
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L82
	strh	r4, [r0]
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L83:
	.align	2, 0
.L82:
	.word	gCurrentMove
.Lfe3:
	.size	 BattleAI_ChooseMoveOrAction,.Lfe3-BattleAI_ChooseMoveOrAction
	.align	2, 0
	.type	 ChooseMoveOrAction_Singles,function
	.thumb_func
ChooseMoveOrAction_Singles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	bl	RecordLastUsedMoveByTarget
	ldr	r1, .L101
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0xc]
	cmp	r0, #0
	beq	.L86	@cond_branch
	add	r4, r1, #0
	mov	r5, #0x0
.L87:
	ldr	r0, [r4]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	strb	r5, [r2]
	bl	BattleAI_DoAIProcessing
.L88:
	ldr	r0, [r4]
	ldr	r1, [r0, #0x14]
	ldr	r0, [r1, #0xc]
	lsr	r0, r0, #0x1
	str	r0, [r1, #0xc]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	strb	r5, [r0, #0x1]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0xc]
	cmp	r0, #0
	bne	.L87	@cond_branch
.L86:
	ldr	r1, .L101
	ldr	r0, [r1]
	ldr	r3, [r0, #0x14]
	ldrb	r2, [r3, #0x10]
	mov	r0, #0x2
	and	r0, r0, r2
	mov	ip, r1
	cmp	r0, #0
	beq	.L90	@cond_branch
	mov	r0, #0x4
	b	.L100
.L102:
	.align	2, 0
.L101:
	.word	gBattleResources
.L90:
	mov	r0, #0x4
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L91	@cond_branch
	mov	r0, #0x5
	b	.L100
.L91:
	mov	r6, #0x1
	mov	r1, sp
	ldrb	r0, [r3, #0x4]
	strb	r0, [r1]
	add	r0, sp, #0x4
	strb	r2, [r0]
	mov	r3, #0x1
	mov	r8, r0
	ldr	r1, .L103
	ldr	r0, .L103+0x4
	ldrb	r2, [r0]
	mov	r5, sp
	mov	r7, r8
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r4, r1, #0
	add	r4, r4, #0xe
.L95:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldrb	r1, [r5]
	mov	r2, ip
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L97	@cond_branch
	mov	r0, sp
	add	r1, r0, r6
	ldrb	r0, [r2]
	strb	r0, [r1]
	add	r1, r6, #0
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r1, r7, r1
	strb	r3, [r1]
.L97:
	ldrb	r1, [r5]
	mov	r2, ip
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L94	@cond_branch
	mov	r6, #0x1
	ldrb	r0, [r2]
	strb	r0, [r5]
	strb	r3, [r7]
.L94:
	add	r4, r4, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L95	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__modsi3
	add	r0, r0, r8
	ldrb	r0, [r0]
.L100:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L104:
	.align	2, 0
.L103:
	.word	gBattleMons
	.word	sBattler_AI
.Lfe4:
	.size	 ChooseMoveOrAction_Singles,.Lfe4-ChooseMoveOrAction_Singles
	.align	2, 0
	.type	 ChooseMoveOrAction_Doubles,function
	.thumb_func
ChooseMoveOrAction_Doubles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, sp
	add	r1, r1, #0xc
	str	r1, [sp, #0x1c]
	mov	r2, sp
	add	r2, r2, #0x8
	str	r2, [sp, #0x18]
	str	r1, [sp, #0x20]
	mov	sl, sp
.L109:
	ldr	r0, .L142
	ldrb	r0, [r0]
	cmp	r8, r0
	beq	.L111	@cond_branch
	mov	r0, #0x58
	mov	r7, r8
	mul	r7, r7, r0
	add	r0, r7, #0
	ldr	r1, .L142+0x4
	add	r0, r0, r1
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L110	@cond_branch
.L111:
	mov	r0, #0xff
	ldr	r2, [sp, #0x20]
	strb	r0, [r2]
	ldr	r0, .L142+0x8
	mov	r7, sl
	strh	r0, [r7]
	b	.L108
.L143:
	.align	2, 0
.L142:
	.word	sBattler_AI
	.word	gBattleMons
	.word	0xffff
.L110:
	ldr	r0, .L144
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L113	@cond_branch
	ldr	r0, .L144+0x4
	ldr	r0, [r0]
	add	r0, r0, #0x92
	ldrb	r0, [r0]
	lsr	r0, r0, #0x4
	bl	BattleAI_SetupAIData
	b	.L114
.L145:
	.align	2, 0
.L144:
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L113:
	mov	r0, #0xf
	bl	BattleAI_SetupAIData
.L114:
	ldr	r0, .L146
	mov	r1, r8
	strb	r1, [r0]
	mov	r1, #0x1
	mov	r2, r8
	and	r2, r2, r1
	ldr	r0, .L146+0x4
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r2, r1
	beq	.L115	@cond_branch
	bl	RecordLastUsedMoveByTarget
.L115:
	ldr	r2, .L146+0x8
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	mov	r1, #0x0
	strb	r1, [r0, #0x11]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	strb	r1, [r0, #0x1]
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldr	r4, [r0, #0xc]
	mov	r9, r2
	cmp	r4, #0
	beq	.L117	@cond_branch
	mov	r5, r9
	mov	r6, #0x0
.L118:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L119	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0]
	bl	BattleAI_DoAIProcessing
.L119:
	asr	r4, r4, #0x1
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1, #0x11]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	strb	r6, [r0, #0x1]
	cmp	r4, #0
	bne	.L118	@cond_branch
.L117:
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r3, [r0, #0x14]
	ldrb	r1, [r3, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L121	@cond_branch
	mov	r0, #0x4
	ldr	r7, [sp, #0x20]
	strb	r0, [r7]
	b	.L108
.L147:
	.align	2, 0
.L146:
	.word	gBattlerTarget
	.word	sBattler_AI
	.word	gBattleResources
.L121:
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L123	@cond_branch
	mov	r0, #0x5
	ldr	r1, [sp, #0x20]
	strb	r0, [r1]
	b	.L108
.L123:
	add	r1, sp, #0x10
	ldrb	r0, [r3, #0x4]
	strb	r0, [r1]
	add	r0, sp, #0x14
	strb	r2, [r0]
	mov	r5, #0x1
	mov	r3, #0x1
	add	r6, r1, #0
	ldr	r0, .L148
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	ldr	r2, .L148+0x4
	add	r0, r0, r2
	add	r4, r0, #0x2
	add	r7, sp, #0x14
.L128:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L127	@cond_branch
	ldrb	r1, [r6]
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bne	.L130	@cond_branch
	add	r0, r6, r5
	ldrb	r1, [r2]
	strb	r1, [r0]
	add	r0, r7, r5
	strb	r3, [r0]
	add	r5, r5, #0x1
.L130:
	ldrb	r1, [r6]
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x4
	add	r2, r0, r3
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r1, r0
	bge	.L127	@cond_branch
	ldrb	r0, [r2]
	strb	r0, [r6]
	strb	r3, [r7]
	mov	r5, #0x1
.L127:
	add	r4, r4, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L128	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	add	r0, r0, sp
	add	r0, r0, #0x14
	ldrb	r0, [r0]
	ldr	r7, [sp, #0x20]
	strb	r0, [r7]
	ldrb	r2, [r6]
	mov	r0, sl
	strh	r2, [r0]
	ldr	r0, .L148
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	cmp	r8, r0
	bne	.L108	@cond_branch
	cmp	r2, #0x63
	bgt	.L108	@cond_branch
	ldr	r0, .L148+0x8
	mov	r1, sl
	strh	r0, [r1]
.L108:
	ldr	r2, [sp, #0x20]
	add	r2, r2, #0x1
	str	r2, [sp, #0x20]
	mov	r7, #0x2
	add	sl, sl, r7
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x3
	bgt	.LCB1036
	b	.L109	@long jump
.LCB1036:
	mov	r0, sp
	ldrh	r5, [r0]
	mov	r0, #0x0
	ldr	r2, [sp, #0x18]
	strb	r0, [r2]
	mov	r4, #0x1
	mov	r8, r4
	ldr	r6, .L148+0xc
	ldr	r3, [sp, #0x18]
	mov	r1, sp
	add	r1, r1, #0x2
.L138:
	lsl	r0, r5, #0x10
	asr	r2, r0, #0x10
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bne	.L139	@cond_branch
	add	r0, r3, r4
	mov	r7, r8
	strb	r7, [r0]
	add	r4, r4, #0x1
.L139:
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bge	.L137	@cond_branch
	ldrh	r5, [r1]
	mov	r0, r8
	strb	r0, [r3]
	mov	r4, #0x1
.L137:
	add	r1, r1, #0x2
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r7, r8
	cmp	r7, #0x3
	ble	.L138	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	ldr	r1, [sp, #0x18]
	add	r0, r1, r0
	ldrb	r0, [r0]
	strb	r0, [r6]
	ldrb	r0, [r6]
	ldr	r2, [sp, #0x1c]
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L149:
	.align	2, 0
.L148:
	.word	sBattler_AI
	.word	gBattleMons+0xc
	.word	0xffff
	.word	gBattlerTarget
.Lfe5:
	.size	 ChooseMoveOrAction_Doubles,.Lfe5-ChooseMoveOrAction_Doubles
	.align	2, 0
	.type	 BattleAI_DoAIProcessing,function
	.thumb_func
BattleAI_DoAIProcessing:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r7, .L170
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0]
	add	r6, r7, #0
	cmp	r0, #0x2
	bne	.LCB1151
	b	.L152	@long jump
.LCB1151:
	mov	r9, r7
	ldr	r0, .L170+0x4
	mov	r8, r0
.L153:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	ldrb	r0, [r2]
	cmp	r0, #0x1
	beq	.L159	@cond_branch
	cmp	r0, #0x1
	bgt	.L151	@cond_branch
	cmp	r0, #0
	bne	.L151	@cond_branch
	ldr	r1, .L170+0x8
	ldrb	r0, [r2, #0x11]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, r8
	str	r0, [r1]
	ldr	r5, .L170+0xc
	ldrb	r4, [r2, #0x1]
	ldr	r0, .L170+0x10
	ldrb	r1, [r0]
	mov	r0, #0x58
	mov	r3, r1
	mul	r3, r3, r0
	add	r0, r4, r3
	add	r1, r5, #0
	add	r1, r1, #0x24
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L169	@cond_branch
	lsl	r0, r4, #0x1
	add	r0, r0, r3
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r0, [r0]
.L169:
	strh	r0, [r2, #0x2]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L151
.L171:
	.align	2, 0
.L170:
	.word	gBattleResources
	.word	gAIScriptPtr
	.word	gBattleAI_ScriptsTable
	.word	gBattleMons
	.word	sBattler_AI
.L159:
	ldrh	r1, [r2, #0x2]
	cmp	r1, #0
	beq	.L160	@cond_branch
	ldr	r1, .L172
	mov	r2, r8
	ldr	r0, [r2]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	b	.L161
.L173:
	.align	2, 0
.L172:
	.word	sBattleAICmdTable
.L160:
	add	r0, r2, #0x4
	ldrb	r2, [r2, #0x1]
	add	r0, r0, r2
	strb	r1, [r0]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L161:
	ldr	r2, .L174
	ldr	r0, [r2]
	ldr	r3, [r0, #0x14]
	ldrb	r1, [r3, #0x10]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	beq	.L151	@cond_branch
	ldrb	r0, [r3, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r3, #0x1]
	ldr	r0, [r6]
	ldr	r2, [r0, #0x14]
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0x3
	bhi	.L163	@cond_branch
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x8
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L163	@cond_branch
	strb	r0, [r2]
	b	.L164
.L175:
	.align	2, 0
.L174:
	.word	gBattleResources
.L163:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L164:
	ldr	r0, [r6]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xfe
	and	r0, r0, r1
	strb	r0, [r2, #0x10]
.L151:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0]
	cmp	r0, #0x2
	beq	.LCB1323
	b	.L153	@long jump
.LCB1323:
.L152:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 BattleAI_DoAIProcessing,.Lfe6-BattleAI_DoAIProcessing
	.align	2, 0
	.type	 RecordLastUsedMoveByTarget,function
	.thumb_func
RecordLastUsedMoveByTarget:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r7, #0x0
	ldr	r4, .L185
	ldr	r0, [r4]
	ldr	r2, [r0, #0x18]
	ldr	r3, .L185+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r2, r2, r0
	ldr	r5, .L185+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r5
	ldrh	r0, [r2]
	mov	r8, r4
	mov	ip, r3
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L178	@cond_branch
	add	r6, r5, #0
	mov	r5, #0x0
.L184:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r4, [r0, #0x18]
	mov	r0, ip
	ldrb	r1, [r0]
	lsl	r3, r1, #0x4
	add	r0, r5, r3
	add	r2, r4, r0
	ldrh	r0, [r2]
	cmp	r0, #0
	bne	.L179	@cond_branch
	lsl	r0, r1, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	strh	r0, [r2]
	b	.L178
.L186:
	.align	2, 0
.L185:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gLastMoves
.L179:
	add	r5, r5, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L178	@cond_branch
	add	r0, r5, r3
	add	r0, r4, r0
	lsl	r1, r1, #0x1
	add	r1, r1, r6
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L184	@cond_branch
.L178:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe7:
	.size	 RecordLastUsedMoveByTarget,.Lfe7-RecordLastUsedMoveByTarget
	.align	2, 0
	.globl	ClearBattlerMoveHistory
	.type	 ClearBattlerMoveHistory,function
	.thumb_func
ClearBattlerMoveHistory:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	ldr	r4, .L193
	mov	r3, #0x0
	lsr	r1, r0, #0x14
	mov	r2, #0x3
.L191:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x18]
	add	r0, r0, r1
	strh	r3, [r0]
	add	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L191	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L194:
	.align	2, 0
.L193:
	.word	gBattleResources
.Lfe8:
	.size	 ClearBattlerMoveHistory,.Lfe8-ClearBattlerMoveHistory
	.align	2, 0
	.globl	RecordAbilityBattle
	.type	 RecordAbilityBattle,function
	.thumb_func
RecordAbilityBattle:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L196
	ldr	r2, [r2]
	ldr	r2, [r2, #0x18]
	add	r2, r2, #0x40
	add	r2, r2, r0
	strb	r1, [r2]
	bx	lr
.L197:
	.align	2, 0
.L196:
	.word	gBattleResources
.Lfe9:
	.size	 RecordAbilityBattle,.Lfe9-RecordAbilityBattle
	.align	2, 0
	.globl	ClearBattlerAbilityHistory
	.type	 ClearBattlerAbilityHistory,function
	.thumb_func
ClearBattlerAbilityHistory:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L199
	ldr	r1, [r1]
	ldr	r1, [r1, #0x18]
	add	r1, r1, #0x40
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L200:
	.align	2, 0
.L199:
	.word	gBattleResources
.Lfe10:
	.size	 ClearBattlerAbilityHistory,.Lfe10-ClearBattlerAbilityHistory
	.align	2, 0
	.globl	RecordItemEffectBattle
	.type	 RecordItemEffectBattle,function
	.thumb_func
RecordItemEffectBattle:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L202
	ldr	r2, [r2]
	ldr	r2, [r2, #0x18]
	add	r2, r2, #0x44
	add	r2, r2, r0
	strb	r1, [r2]
	bx	lr
.L203:
	.align	2, 0
.L202:
	.word	gBattleResources
.Lfe11:
	.size	 RecordItemEffectBattle,.Lfe11-RecordItemEffectBattle
	.align	2, 0
	.globl	ClearBattlerItemEffectHistory
	.type	 ClearBattlerItemEffectHistory,function
	.thumb_func
ClearBattlerItemEffectHistory:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L205
	ldr	r1, [r1]
	ldr	r1, [r1, #0x18]
	add	r1, r1, #0x44
	add	r1, r1, r0
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L206:
	.align	2, 0
.L205:
	.word	gBattleResources
.Lfe12:
	.size	 ClearBattlerItemEffectHistory,.Lfe12-ClearBattlerItemEffectHistory
	.align	2, 0
	.type	 Cmd_if_random_less_than,function
	.thumb_func
Cmd_if_random_less_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L210
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bcs	.L208	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L209
.L211:
	.align	2, 0
.L210:
	.word	gAIScriptPtr
.L208:
	add	r0, r2, #0x6
	str	r0, [r3]
.L209:
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 Cmd_if_random_less_than,.Lfe13-Cmd_if_random_less_than
	.align	2, 0
	.type	 Cmd_if_random_greater_than,function
	.thumb_func
Cmd_if_random_greater_than:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L215
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bls	.L213	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L214
.L216:
	.align	2, 0
.L215:
	.word	gAIScriptPtr
.L213:
	add	r0, r2, #0x6
	str	r0, [r3]
.L214:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 Cmd_if_random_greater_than,.Lfe14-Cmd_if_random_greater_than
	.align	2, 0
	.type	 Cmd_if_random_equal,function
	.thumb_func
Cmd_if_random_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L220
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	bne	.L218	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L219
.L221:
	.align	2, 0
.L220:
	.word	gAIScriptPtr
.L218:
	add	r0, r2, #0x6
	str	r0, [r3]
.L219:
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 Cmd_if_random_equal,.Lfe15-Cmd_if_random_equal
	.align	2, 0
	.type	 Cmd_if_random_not_equal,function
	.thumb_func
Cmd_if_random_not_equal:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	mov	r1, #0xff
	lsl	r1, r1, #0x10
	ldr	r3, .L225
	ldr	r2, [r3]
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	ldrb	r0, [r2, #0x1]
	cmp	r1, r0
	beq	.L223	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L224
.L226:
	.align	2, 0
.L225:
	.word	gAIScriptPtr
.L223:
	add	r0, r2, #0x6
	str	r0, [r3]
.L224:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 Cmd_if_random_not_equal,.Lfe16-Cmd_if_random_not_equal
	.align	2, 0
	.type	 Cmd_score,function
	.thumb_func
Cmd_score:
	push	{r4, lr}
	ldr	r2, .L229
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	add	r1, r0, #0x4
	ldrb	r0, [r0, #0x1]
	add	r1, r1, r0
	ldr	r3, .L229+0x4
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x1]
	ldrb	r4, [r1]
	add	r0, r0, r4
	strb	r0, [r1]
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	add	r0, r1, #0x4
	ldrb	r1, [r1, #0x1]
	add	r1, r0, r1
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	cmp	r0, #0
	bge	.L228	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
.L228:
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L230:
	.align	2, 0
.L229:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe17:
	.size	 Cmd_score,.Lfe17-Cmd_score
	.align	2, 0
	.type	 Cmd_if_hp_less_than,function
	.thumb_func
Cmd_if_hp_less_than:
	push	{r4, lr}
	ldr	r0, .L237
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L232	@cond_branch
	ldr	r0, .L237+0x4
	b	.L236
.L238:
	.align	2, 0
.L237:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L232:
	ldr	r0, .L239
.L236:
	ldrb	r1, [r0]
	ldr	r2, .L239+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bcs	.L234	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L235
.L240:
	.align	2, 0
.L239:
	.word	gBattlerTarget
	.word	gBattleMons
.L234:
	add	r0, r2, #0x7
	str	r0, [r4]
.L235:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 Cmd_if_hp_less_than,.Lfe18-Cmd_if_hp_less_than
	.align	2, 0
	.type	 Cmd_if_hp_more_than,function
	.thumb_func
Cmd_if_hp_more_than:
	push	{r4, lr}
	ldr	r0, .L247
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L242	@cond_branch
	ldr	r0, .L247+0x4
	b	.L246
.L248:
	.align	2, 0
.L247:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L242:
	ldr	r0, .L249
.L246:
	ldrb	r1, [r0]
	ldr	r2, .L249+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bls	.L244	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L245
.L250:
	.align	2, 0
.L249:
	.word	gBattlerTarget
	.word	gBattleMons
.L244:
	add	r0, r2, #0x7
	str	r0, [r4]
.L245:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 Cmd_if_hp_more_than,.Lfe19-Cmd_if_hp_more_than
	.align	2, 0
	.type	 Cmd_if_hp_equal,function
	.thumb_func
Cmd_if_hp_equal:
	push	{r4, lr}
	ldr	r0, .L257
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L252	@cond_branch
	ldr	r0, .L257+0x4
	b	.L256
.L258:
	.align	2, 0
.L257:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L252:
	ldr	r0, .L259
.L256:
	ldrb	r1, [r0]
	ldr	r2, .L259+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	bne	.L254	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L255
.L260:
	.align	2, 0
.L259:
	.word	gBattlerTarget
	.word	gBattleMons
.L254:
	add	r0, r2, #0x7
	str	r0, [r4]
.L255:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 Cmd_if_hp_equal,.Lfe20-Cmd_if_hp_equal
	.align	2, 0
	.type	 Cmd_if_hp_not_equal,function
	.thumb_func
Cmd_if_hp_not_equal:
	push	{r4, lr}
	ldr	r0, .L267
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L262	@cond_branch
	ldr	r0, .L267+0x4
	b	.L266
.L268:
	.align	2, 0
.L267:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L262:
	ldr	r0, .L269
.L266:
	ldrb	r1, [r0]
	ldr	r2, .L269+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r1, r1, r2
	ldrh	r2, [r1, #0x28]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldrh	r1, [r1, #0x2c]
	bl	__divsi3
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	cmp	r0, r1
	beq	.L264	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L265
.L270:
	.align	2, 0
.L269:
	.word	gBattlerTarget
	.word	gBattleMons
.L264:
	add	r0, r2, #0x7
	str	r0, [r4]
.L265:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 Cmd_if_hp_not_equal,.Lfe21-Cmd_if_hp_not_equal
	.align	2, 0
	.type	 Cmd_if_status,function
	.thumb_func
Cmd_if_status:
	push	{r4, r5, lr}
	ldr	r0, .L277
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L272	@cond_branch
	ldr	r0, .L277+0x4
	b	.L276
.L278:
	.align	2, 0
.L277:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L272:
	ldr	r0, .L279
.L276:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L279+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L274	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L275
.L280:
	.align	2, 0
.L279:
	.word	gBattlerTarget
	.word	gBattleMons
.L274:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L275:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 Cmd_if_status,.Lfe22-Cmd_if_status
	.align	2, 0
	.type	 Cmd_if_not_status,function
	.thumb_func
Cmd_if_not_status:
	push	{r4, r5, lr}
	ldr	r0, .L287
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L282	@cond_branch
	ldr	r0, .L287+0x4
	b	.L286
.L288:
	.align	2, 0
.L287:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L282:
	ldr	r0, .L289
.L286:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L289+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L284	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L285
.L290:
	.align	2, 0
.L289:
	.word	gBattlerTarget
	.word	gBattleMons
.L284:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L285:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 Cmd_if_not_status,.Lfe23-Cmd_if_not_status
	.align	2, 0
	.type	 Cmd_if_status2,function
	.thumb_func
Cmd_if_status2:
	push	{r4, r5, lr}
	ldr	r0, .L297
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L292	@cond_branch
	ldr	r0, .L297+0x4
	b	.L296
.L298:
	.align	2, 0
.L297:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L292:
	ldr	r0, .L299
.L296:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L299+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L294	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L295
.L300:
	.align	2, 0
.L299:
	.word	gBattlerTarget
	.word	gBattleMons
.L294:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L295:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 Cmd_if_status2,.Lfe24-Cmd_if_status2
	.align	2, 0
	.type	 Cmd_if_not_status2,function
	.thumb_func
Cmd_if_not_status2:
	push	{r4, r5, lr}
	ldr	r0, .L307
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L302	@cond_branch
	ldr	r0, .L307+0x4
	b	.L306
.L308:
	.align	2, 0
.L307:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L302:
	ldr	r0, .L309
.L306:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r2, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	ldr	r1, .L309+0x4
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L304	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L305
.L310:
	.align	2, 0
.L309:
	.word	gBattlerTarget
	.word	gBattleMons
.L304:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L305:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 Cmd_if_not_status2,.Lfe25-Cmd_if_not_status2
	.align	2, 0
	.type	 Cmd_if_status3,function
	.thumb_func
Cmd_if_status3:
	push	{r4, r5, lr}
	ldr	r0, .L317
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L312	@cond_branch
	ldr	r0, .L317+0x4
	b	.L316
.L318:
	.align	2, 0
.L317:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L312:
	ldr	r0, .L319
.L316:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r2, .L319+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L314	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L315
.L320:
	.align	2, 0
.L319:
	.word	gBattlerTarget
	.word	gStatuses3
.L314:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L315:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 Cmd_if_status3,.Lfe26-Cmd_if_status3
	.align	2, 0
	.type	 Cmd_if_not_status3,function
	.thumb_func
Cmd_if_not_status3:
	push	{r4, r5, lr}
	ldr	r0, .L327
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L322	@cond_branch
	ldr	r0, .L327+0x4
	b	.L326
.L328:
	.align	2, 0
.L327:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L322:
	ldr	r0, .L329
.L326:
	ldrb	r4, [r0]
	ldr	r3, [r5]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r2, .L329+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L324	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L325
.L330:
	.align	2, 0
.L329:
	.word	gBattlerTarget
	.word	gStatuses3
.L324:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r5]
.L325:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 Cmd_if_not_status3,.Lfe27-Cmd_if_not_status3
	.align	2, 0
	.type	 Cmd_if_side_affecting,function
	.thumb_func
Cmd_if_side_affecting:
	push	{r4, lr}
	ldr	r0, .L337
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L332	@cond_branch
	ldr	r0, .L337+0x4
	b	.L336
.L338:
	.align	2, 0
.L337:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L332:
	ldr	r0, .L339
.L336:
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r2, #0x1
	and	r2, r2, r0
	ldr	r4, .L339+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L339+0x8
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L334	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L335
.L340:
	.align	2, 0
.L339:
	.word	gBattlerTarget
	.word	gAIScriptPtr
	.word	gSideStatuses
.L334:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L335:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 Cmd_if_side_affecting,.Lfe28-Cmd_if_side_affecting
	.align	2, 0
	.type	 Cmd_if_not_side_affecting,function
	.thumb_func
Cmd_if_not_side_affecting:
	push	{r4, lr}
	ldr	r0, .L347
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L342	@cond_branch
	ldr	r0, .L347+0x4
	b	.L346
.L348:
	.align	2, 0
.L347:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L342:
	ldr	r0, .L349
.L346:
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r2, #0x1
	and	r2, r2, r0
	ldr	r4, .L349+0x4
	ldr	r3, [r4]
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L349+0x8
	lsl	r2, r2, #0x1
	add	r2, r2, r0
	ldrh	r0, [r2]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L344	@cond_branch
	ldrb	r1, [r3, #0x6]
	ldrb	r0, [r3, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L345
.L350:
	.align	2, 0
.L349:
	.word	gBattlerTarget
	.word	gAIScriptPtr
	.word	gSideStatuses
.L344:
	add	r0, r3, #0
	add	r0, r0, #0xa
	str	r0, [r4]
.L345:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 Cmd_if_not_side_affecting,.Lfe29-Cmd_if_not_side_affecting
	.align	2, 0
	.type	 Cmd_if_less_than,function
	.thumb_func
Cmd_if_less_than:
	push	{lr}
	ldr	r0, .L354
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L354+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bcs	.L352	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L353
.L355:
	.align	2, 0
.L354:
	.word	gBattleResources
	.word	gAIScriptPtr
.L352:
	add	r0, r2, #0x6
	str	r0, [r3]
.L353:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 Cmd_if_less_than,.Lfe30-Cmd_if_less_than
	.align	2, 0
	.type	 Cmd_if_more_than,function
	.thumb_func
Cmd_if_more_than:
	push	{lr}
	ldr	r0, .L359
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L359+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bls	.L357	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L358
.L360:
	.align	2, 0
.L359:
	.word	gBattleResources
	.word	gAIScriptPtr
.L357:
	add	r0, r2, #0x6
	str	r0, [r3]
.L358:
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 Cmd_if_more_than,.Lfe31-Cmd_if_more_than
	.align	2, 0
	.type	 Cmd_if_equal,function
	.thumb_func
Cmd_if_equal:
	push	{lr}
	ldr	r0, .L364
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L364+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L362	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L363
.L365:
	.align	2, 0
.L364:
	.word	gBattleResources
	.word	gAIScriptPtr
.L362:
	add	r0, r2, #0x6
	str	r0, [r3]
.L363:
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 Cmd_if_equal,.Lfe32-Cmd_if_equal
	.align	2, 0
	.type	 Cmd_if_not_equal,function
	.thumb_func
Cmd_if_not_equal:
	push	{lr}
	ldr	r0, .L369
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r3, .L369+0x4
	ldr	r2, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L367	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L368
.L370:
	.align	2, 0
.L369:
	.word	gBattleResources
	.word	gAIScriptPtr
.L367:
	add	r0, r2, #0x6
	str	r0, [r3]
.L368:
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Cmd_if_not_equal,.Lfe33-Cmd_if_not_equal
	.align	2, 0
	.type	 Cmd_if_less_than_ptr,function
	.thumb_func
Cmd_if_less_than_ptr:
	push	{lr}
	ldr	r3, .L374
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L374+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L372	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L373
.L375:
	.align	2, 0
.L374:
	.word	gAIScriptPtr
	.word	gBattleResources
.L372:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L373:
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 Cmd_if_less_than_ptr,.Lfe34-Cmd_if_less_than_ptr
	.align	2, 0
	.type	 Cmd_if_more_than_ptr,function
	.thumb_func
Cmd_if_more_than_ptr:
	push	{lr}
	ldr	r3, .L379
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L379+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L377	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L378
.L380:
	.align	2, 0
.L379:
	.word	gAIScriptPtr
	.word	gBattleResources
.L377:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L378:
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 Cmd_if_more_than_ptr,.Lfe35-Cmd_if_more_than_ptr
	.align	2, 0
	.type	 Cmd_if_equal_ptr,function
	.thumb_func
Cmd_if_equal_ptr:
	push	{lr}
	ldr	r3, .L384
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L384+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L382	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L383
.L385:
	.align	2, 0
.L384:
	.word	gAIScriptPtr
	.word	gBattleResources
.L382:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L383:
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 Cmd_if_equal_ptr,.Lfe36-Cmd_if_equal_ptr
	.align	2, 0
	.type	 Cmd_if_not_equal_ptr,function
	.thumb_func
Cmd_if_not_equal_ptr:
	push	{lr}
	ldr	r3, .L389
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	ldr	r0, .L389+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L387	@cond_branch
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L388
.L390:
	.align	2, 0
.L389:
	.word	gAIScriptPtr
	.word	gBattleResources
.L387:
	add	r0, r2, #0
	add	r0, r0, #0x9
	str	r0, [r3]
.L388:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 Cmd_if_not_equal_ptr,.Lfe37-Cmd_if_not_equal_ptr
	.align	2, 0
	.type	 Cmd_if_move,function
	.thumb_func
Cmd_if_move:
	push	{lr}
	ldr	r3, .L394
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L394+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	bne	.L392	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L393
.L395:
	.align	2, 0
.L394:
	.word	gAIScriptPtr
	.word	gBattleResources
.L392:
	add	r0, r2, #0x7
	str	r0, [r3]
.L393:
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 Cmd_if_move,.Lfe38-Cmd_if_move
	.align	2, 0
	.type	 Cmd_if_not_move,function
	.thumb_func
Cmd_if_not_move:
	push	{lr}
	ldr	r3, .L399
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldr	r0, .L399+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	cmp	r0, r1
	beq	.L397	@cond_branch
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L398
.L400:
	.align	2, 0
.L399:
	.word	gAIScriptPtr
	.word	gBattleResources
.L397:
	add	r0, r2, #0x7
	str	r0, [r3]
.L398:
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 Cmd_if_not_move,.Lfe39-Cmd_if_not_move
	.align	2, 0
	.type	 Cmd_if_in_bytes,function
	.thumb_func
Cmd_if_in_bytes:
	push	{r4, lr}
	ldr	r2, .L407
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	cmp	r0, #0xff
	beq	.L403	@cond_branch
	ldr	r0, .L407+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L404:
	ldrb	r0, [r3]
	cmp	r1, r0
	bne	.L405	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L401
.L408:
	.align	2, 0
.L407:
	.word	gAIScriptPtr
	.word	gBattleResources
.L405:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L404	@cond_branch
.L403:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L401:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 Cmd_if_in_bytes,.Lfe40-Cmd_if_in_bytes
	.align	2, 0
	.type	 Cmd_if_not_in_bytes,function
	.thumb_func
Cmd_if_not_in_bytes:
	push	{r4, lr}
	ldr	r2, .L415
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrb	r0, [r3]
	add	r4, r2, #0
	cmp	r0, #0xff
	beq	.L411	@cond_branch
	ldr	r0, .L415+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r2, [r0, #0x8]
	add	r1, r4, #0
.L412:
	ldrb	r0, [r3]
	cmp	r2, r0
	bne	.L413	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L409
.L416:
	.align	2, 0
.L415:
	.word	gAIScriptPtr
	.word	gBattleResources
.L413:
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L412	@cond_branch
.L411:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L409:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 Cmd_if_not_in_bytes,.Lfe41-Cmd_if_not_in_bytes
	.align	2, 0
	.type	 Cmd_if_in_hwords,function
	.thumb_func
Cmd_if_in_hwords:
	push	{r4, r5, lr}
	ldr	r2, .L423
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r5, .L423+0x4
	cmp	r0, r5
	beq	.L419	@cond_branch
	ldr	r0, .L423+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r1, [r0, #0x8]
	add	r4, r2, #0
.L420:
	ldrh	r0, [r3]
	cmp	r1, r0
	bne	.L421	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L417
.L424:
	.align	2, 0
.L423:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBattleResources
.L421:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r5
	bne	.L420	@cond_branch
.L419:
	ldr	r0, [r2]
	add	r0, r0, #0x9
	str	r0, [r2]
.L417:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 Cmd_if_in_hwords,.Lfe42-Cmd_if_in_hwords
	.align	2, 0
	.type	 Cmd_if_not_in_hwords,function
	.thumb_func
Cmd_if_not_in_hwords:
	push	{r4, r5, lr}
	ldr	r2, .L431
	ldr	r1, [r2]
	ldrb	r3, [r1, #0x1]
	ldrb	r0, [r1, #0x2]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x10
	orr	r3, r3, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x18
	orr	r3, r3, r0
	ldrh	r0, [r3]
	ldr	r4, .L431+0x4
	add	r5, r2, #0
	cmp	r0, r4
	beq	.L427	@cond_branch
	ldr	r0, .L431+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r2, [r0, #0x8]
	add	r1, r5, #0
.L428:
	ldrh	r0, [r3]
	cmp	r2, r0
	bne	.L429	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0x9
	str	r0, [r1]
	b	.L425
.L432:
	.align	2, 0
.L431:
	.word	gAIScriptPtr
	.word	0xffff
	.word	gBattleResources
.L429:
	add	r3, r3, #0x2
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L428	@cond_branch
.L427:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x5]
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L425:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe43:
	.size	 Cmd_if_not_in_hwords,.Lfe43-Cmd_if_not_in_hwords
	.align	2, 0
	.type	 Cmd_if_user_has_attacking_move,function
	.thumb_func
Cmd_if_user_has_attacking_move:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L442
	ldr	r1, .L442+0x4
	ldr	r0, .L442+0x8
	ldrb	r2, [r0]
	ldr	r5, .L442+0xc
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L437:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L436	@cond_branch
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L435	@cond_branch
.L436:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L437	@cond_branch
.L435:
	cmp	r3, #0x4
	bne	.L440	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L441
.L443:
	.align	2, 0
.L442:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
.L440:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L441:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 Cmd_if_user_has_attacking_move,.Lfe44-Cmd_if_user_has_attacking_move
	.align	2, 0
	.type	 Cmd_if_user_has_no_attacking_moves,function
	.thumb_func
Cmd_if_user_has_no_attacking_moves:
	push	{r4, r5, lr}
	mov	r3, #0x0
	ldr	r4, .L453
	ldr	r1, .L453+0x4
	ldr	r0, .L453+0x8
	ldrb	r2, [r0]
	ldr	r5, .L453+0xc
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
.L448:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L447	@cond_branch
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L446	@cond_branch
.L447:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L448	@cond_branch
.L446:
	cmp	r3, #0x4
	beq	.L451	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, #0x5
	str	r0, [r4]
	b	.L452
.L454:
	.align	2, 0
.L453:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
.L451:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L452:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe45:
	.size	 Cmd_if_user_has_no_attacking_moves,.Lfe45-Cmd_if_user_has_no_attacking_moves
	.align	2, 0
	.type	 Cmd_get_turn_count,function
	.thumb_func
Cmd_get_turn_count:
	ldr	r0, .L456
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldr	r0, .L456+0x4
	ldrb	r0, [r0, #0x13]
	str	r0, [r1, #0x8]
	ldr	r1, .L456+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L457:
	.align	2, 0
.L456:
	.word	gBattleResources
	.word	gBattleResults
	.word	gAIScriptPtr
.Lfe46:
	.size	 Cmd_get_turn_count,.Lfe46-Cmd_get_turn_count
	.align	2, 0
	.type	 Cmd_get_type,function
	.thumb_func
Cmd_get_type:
	push	{r4, lr}
	ldr	r1, .L468
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x4
	bhi	.L459	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L468+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L469:
	.align	2, 0
.L468:
	.word	gAIScriptPtr
	.word	.L465
	.align	2, 0
	.align	2, 0
.L465:
	.word	.L461
	.word	.L460
	.word	.L463
	.word	.L462
	.word	.L464
.L460:
	ldr	r0, .L470
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L470+0x4
	ldr	r0, .L470+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	b	.L467
.L471:
	.align	2, 0
.L470:
	.word	gBattleResources
	.word	gBattleMons
	.word	sBattler_AI
.L461:
	ldr	r0, .L472
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L472+0x4
	ldr	r0, .L472+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	b	.L467
.L473:
	.align	2, 0
.L472:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattlerTarget
.L462:
	ldr	r0, .L474
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L474+0x4
	ldr	r0, .L474+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L467
.L475:
	.align	2, 0
.L474:
	.word	gBattleResources
	.word	gBattleMons
	.word	sBattler_AI
.L463:
	ldr	r0, .L476
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L476+0x4
	ldr	r0, .L476+0x8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	b	.L467
.L477:
	.align	2, 0
.L476:
	.word	gBattleResources
	.word	gBattleMons
	.word	gBattlerTarget
.L464:
	ldr	r0, .L478
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L478+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
.L467:
	str	r0, [r3, #0x8]
.L459:
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	gBattleResources
	.word	gBattleMoves
.Lfe47:
	.size	 Cmd_get_type,.Lfe47-Cmd_get_type
	.align	2, 0
	.type	 BattleAI_GetWantedBattler,function
	.thumb_func
BattleAI_GetWantedBattler:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L482	@cond_branch
	ldr	r0, .L492
	ldrb	r0, [r0]
	b	.L490
.L493:
	.align	2, 0
.L492:
	.word	sBattler_AI
.L482:
	cmp	r0, #0x1
	ble	.L484	@cond_branch
	cmp	r0, #0x2
	beq	.L486	@cond_branch
	cmp	r0, #0x3
	beq	.L485	@cond_branch
.L484:
	ldr	r0, .L494
	ldrb	r0, [r0]
	b	.L490
.L495:
	.align	2, 0
.L494:
	.word	gBattlerTarget
.L485:
	ldr	r0, .L496
	b	.L491
.L497:
	.align	2, 0
.L496:
	.word	sBattler_AI
.L486:
	ldr	r0, .L498
.L491:
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
.L490:
	pop	{r1}
	bx	r1
.L499:
	.align	2, 0
.L498:
	.word	gBattlerTarget
.Lfe48:
	.size	 BattleAI_GetWantedBattler,.Lfe48-BattleAI_GetWantedBattler
	.align	2, 0
	.type	 Cmd_is_of_type,function
	.thumb_func
Cmd_is_of_type:
	push	{r4, lr}
	ldr	r4, .L505
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L505+0x4
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r3, r0, r2
	add	r1, r3, #0
	add	r1, r1, #0x21
	ldr	r0, [r4]
	ldrb	r1, [r1]
	ldrb	r2, [r0, #0x2]
	cmp	r1, r2
	beq	.L502	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L501	@cond_branch
.L502:
	ldr	r0, .L505+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	b	.L504
.L506:
	.align	2, 0
.L505:
	.word	gAIScriptPtr
	.word	gBattleMons
	.word	gBattleResources
.L501:
	ldr	r0, .L507
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L504:
	str	r0, [r1, #0x8]
	ldr	r1, .L507+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x3
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe49:
	.size	 Cmd_is_of_type,.Lfe49-Cmd_is_of_type
	.align	2, 0
	.type	 Cmd_get_considered_move_power,function
	.thumb_func
Cmd_get_considered_move_power:
	ldr	r0, .L510
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L510+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	str	r0, [r3, #0x8]
	ldr	r1, .L510+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L511:
	.align	2, 0
.L510:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe50:
	.size	 Cmd_get_considered_move_power,.Lfe50-Cmd_get_considered_move_power
	.align	2, 0
	.type	 Cmd_get_how_powerful_move_is,function
	.thumb_func
Cmd_get_how_powerful_move_is:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	mov	r3, #0x0
	ldr	r0, .L543
	ldrh	r1, [r0]
	ldr	r5, .L543+0x4
	ldr	r6, .L543+0x8
	ldr	r2, .L543+0xc
	cmp	r1, r5
	beq	.L514	@cond_branch
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r4, [r0]
	ldr	r1, .L543
.L516:
	ldrh	r0, [r1]
	cmp	r4, r0
	beq	.L514	@cond_branch
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	ldrh	r0, [r1]
	cmp	r0, r5
	bne	.L516	@cond_branch
.L514:
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bhi	.LCB4151
	b	.L519	@long jump
.LCB4151:
	lsl	r0, r3, #0x1
	ldr	r1, .L543
	add	r0, r0, r1
	ldrh	r3, [r0]
	ldr	r0, .L543+0x4
	cmp	r3, r0
	beq	.LCB4163
	b	.L519	@long jump
.LCB4163:
	ldr	r0, .L543+0x10
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L543+0x14
	ldr	r0, [r0]
	strb	r1, [r0, #0x13]
	ldr	r0, .L543+0x18
	mov	r2, #0x1
	strb	r2, [r0, #0xe]
	ldr	r0, .L543+0x1c
	strb	r1, [r0]
	ldr	r0, .L543+0x20
	strb	r2, [r0]
	mov	r6, #0x0
	mov	r9, r3
	ldr	r2, .L543
	ldrh	r2, [r2]
	str	r2, [sp, #0x10]
.L523:
	mov	r3, #0x0
	ldr	r5, .L543+0x24
	lsl	r4, r6, #0x1
	ldr	r7, .L543+0x28
	lsl	r0, r6, #0x2
	mov	r8, r0
	add	r1, r6, #0x1
	mov	sl, r1
	ldr	r2, [sp, #0x10]
	cmp	r2, r9
	beq	.L525	@cond_branch
	ldr	r2, .L543+0x8
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r4, r0
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0]
	ldr	r1, .L543
.L527:
	ldrh	r0, [r1]
	cmp	r2, r0
	beq	.L525	@cond_branch
	add	r1, r1, #0x2
	add	r3, r3, #0x1
	ldrh	r0, [r1]
	cmp	r0, r9
	bne	.L527	@cond_branch
.L525:
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r4, r0
	add	r1, r5, #0
	add	r1, r1, #0xc
	add	r1, r0, r1
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L530	@cond_branch
	lsl	r0, r3, #0x1
	ldr	r2, .L543
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r0, r9
	bne	.L530	@cond_branch
	ldr	r0, .L543+0x8
	ldrh	r2, [r1]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x1
	bls	.L530	@cond_branch
	ldr	r5, .L543+0x2c
	strh	r2, [r5]
	ldrb	r0, [r7]
	ldr	r4, .L543+0x30
	ldrb	r1, [r4]
	bl	AI_CalcDmg
	ldrh	r0, [r5]
	ldrb	r1, [r7]
	ldrb	r2, [r4]
	bl	TypeCalc
	mov	r4, sp
	add	r4, r4, r8
	ldr	r2, .L543+0x34
	ldr	r0, .L543+0xc
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	add	r0, r0, #0x18
	add	r0, r0, r6
	ldrb	r1, [r0]
	ldr	r0, [r2]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L522	@cond_branch
	mov	r0, #0x1
	str	r0, [r4]
	b	.L522
.L544:
	.align	2, 0
.L543:
	.word	sDiscouragedPowerfulMoveEffects
	.word	0xffff
	.word	gBattleMoves
	.word	gBattleResources
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gCritMultiplier
	.word	gBattleMons
	.word	sBattler_AI
	.word	gCurrentMove
	.word	gBattlerTarget
	.word	gBattleMoveDamage
.L530:
	mov	r1, sp
	add	r1, r1, r8
	mov	r0, #0x0
	str	r0, [r1]
.L522:
	mov	r6, sl
	cmp	r6, #0x3
	bgt	.LCB4351
	b	.L523	@long jump
.LCB4351:
	mov	r6, #0x0
	ldr	r2, .L545
	ldr	r0, [r2]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x2
	add	r0, r0, sp
	ldr	r1, [sp]
	ldr	r0, [r0]
	ldr	r5, .L545+0x4
	cmp	r1, r0
	bgt	.L535	@cond_branch
	add	r4, r2, #0
	mov	r3, sp
.L536:
	add	r3, r3, #0x4
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bgt	.L535	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x2
	add	r0, r0, sp
	ldr	r1, [r3]
	ldr	r0, [r0]
	cmp	r1, r0
	ble	.L536	@cond_branch
.L535:
	cmp	r6, #0x4
	bne	.L540	@cond_branch
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	str	r0, [r1, #0x8]
	b	.L542
.L546:
	.align	2, 0
.L545:
	.word	gBattleResources
	.word	gAIScriptPtr
.L540:
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	str	r0, [r1, #0x8]
	b	.L542
.L519:
	ldr	r0, [r2]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	ldr	r5, .L547
.L542:
	ldr	r0, [r5]
	add	r0, r0, #0x1
	str	r0, [r5]
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L548:
	.align	2, 0
.L547:
	.word	gAIScriptPtr
.Lfe51:
	.size	 Cmd_get_how_powerful_move_is,.Lfe51-Cmd_get_how_powerful_move_is
	.align	2, 0
	.type	 Cmd_get_last_used_battler_move,function
	.thumb_func
Cmd_get_last_used_battler_move:
	push	{lr}
	ldr	r0, .L553
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L550	@cond_branch
	ldr	r0, .L553+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L553+0x8
	ldr	r0, .L553+0xc
	b	.L552
.L554:
	.align	2, 0
.L553:
	.word	gAIScriptPtr
	.word	gBattleResources
	.word	gLastMoves
	.word	sBattler_AI
.L550:
	ldr	r0, .L555
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L555+0x4
	ldr	r0, .L555+0x8
.L552:
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r3]
	add	r0, r0, #0x2
	str	r0, [r3]
	pop	{r0}
	bx	r0
.L556:
	.align	2, 0
.L555:
	.word	gBattleResources
	.word	gLastMoves
	.word	gBattlerTarget
.Lfe52:
	.size	 Cmd_get_last_used_battler_move,.Lfe52-Cmd_get_last_used_battler_move
	.align	2, 0
	.type	 Cmd_if_equal_,function
	.thumb_func
Cmd_if_equal_:
	push	{lr}
	ldr	r3, .L560
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldr	r0, .L560+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	cmp	r1, r0
	bne	.L558	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L559
.L561:
	.align	2, 0
.L560:
	.word	gAIScriptPtr
	.word	gBattleResources
.L558:
	add	r0, r2, #0x6
	str	r0, [r3]
.L559:
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 Cmd_if_equal_,.Lfe53-Cmd_if_equal_
	.align	2, 0
	.type	 Cmd_if_not_equal_,function
	.thumb_func
Cmd_if_not_equal_:
	push	{lr}
	ldr	r3, .L565
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldr	r0, .L565+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldr	r0, [r0, #0x8]
	cmp	r1, r0
	beq	.L563	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L564
.L566:
	.align	2, 0
.L565:
	.word	gAIScriptPtr
	.word	gBattleResources
.L563:
	add	r0, r2, #0x6
	str	r0, [r3]
.L564:
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 Cmd_if_not_equal_,.Lfe54-Cmd_if_not_equal_
	.align	2, 0
	.type	 Cmd_if_user_goes,function
	.thumb_func
Cmd_if_user_goes:
	push	{lr}
	ldr	r0, .L570
	ldrb	r0, [r0]
	ldr	r1, .L570+0x4
	ldrb	r1, [r1]
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r3, .L570+0x8
	ldr	r2, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L568	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L569
.L571:
	.align	2, 0
.L570:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L568:
	add	r0, r2, #0x6
	str	r0, [r3]
.L569:
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 Cmd_if_user_goes,.Lfe55-Cmd_if_user_goes
	.align	2, 0
	.type	 Cmd_if_user_doesnt_go,function
	.thumb_func
Cmd_if_user_doesnt_go:
	push	{lr}
	ldr	r0, .L575
	ldrb	r0, [r0]
	ldr	r1, .L575+0x4
	ldrb	r1, [r1]
	mov	r2, #0x1
	bl	GetWhoStrikesFirst
	ldr	r3, .L575+0x8
	ldr	r2, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L573	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L574
.L576:
	.align	2, 0
.L575:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L573:
	add	r0, r2, #0x6
	str	r0, [r3]
.L574:
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 Cmd_if_user_doesnt_go,.Lfe56-Cmd_if_user_doesnt_go
	.align	2, 0
	.type	 Cmd_nullsub_2A,function
	.thumb_func
Cmd_nullsub_2A:
	bx	lr
.Lfe57:
	.size	 Cmd_nullsub_2A,.Lfe57-Cmd_nullsub_2A
	.align	2, 0
	.type	 Cmd_nullsub_2B,function
	.thumb_func
Cmd_nullsub_2B:
	bx	lr
.Lfe58:
	.size	 Cmd_nullsub_2B,.Lfe58-Cmd_nullsub_2B
	.align	2, 0
	.type	 Cmd_count_usable_party_mons,function
	.thumb_func
Cmd_count_usable_party_mons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L593
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
	ldr	r0, .L593+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L580	@cond_branch
	ldr	r0, .L593+0x8
	b	.L592
.L594:
	.align	2, 0
.L593:
	.word	gBattleResources
	.word	gAIScriptPtr
	.word	sBattler_AI
.L580:
	ldr	r0, .L595
.L592:
	ldrb	r5, [r0]
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L595+0x4
	mov	r8, r1
	cmp	r0, #0
	bne	.L582	@cond_branch
	ldr	r0, .L595+0x8
	mov	r8, r0
.L582:
	ldr	r0, .L595+0xc
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L584	@cond_branch
	ldr	r4, .L595+0x10
	lsl	r0, r5, #0x1
	add	r0, r0, r4
	ldrb	r7, [r0]
	add	r0, r5, #0
	bl	GetBattlerPosition
	mov	r1, #0x2
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r4
	ldrb	r6, [r0]
	b	.L585
.L596:
	.align	2, 0
.L595:
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.L584:
	ldr	r1, .L597
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrb	r6, [r0]
	add	r7, r6, #0
.L585:
	mov	r5, #0x0
.L589:
	cmp	r5, r7
	beq	.L588	@cond_branch
	cmp	r5, r6
	beq	.L588	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L588	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L588	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L588	@cond_branch
	ldr	r0, .L597+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldr	r0, [r1, #0x8]
	add	r0, r0, #0x1
	str	r0, [r1, #0x8]
.L588:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L589	@cond_branch
	ldr	r1, .L597+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L598:
	.align	2, 0
.L597:
	.word	gBattlerPartyIndexes
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe59:
	.size	 Cmd_count_usable_party_mons,.Lfe59-Cmd_count_usable_party_mons
	.align	2, 0
	.type	 Cmd_get_considered_move,function
	.thumb_func
Cmd_get_considered_move:
	ldr	r0, .L600
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	ldrh	r0, [r1, #0x2]
	str	r0, [r1, #0x8]
	ldr	r1, .L600+0x4
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L601:
	.align	2, 0
.L600:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe60:
	.size	 Cmd_get_considered_move,.Lfe60-Cmd_get_considered_move
	.align	2, 0
	.type	 Cmd_get_considered_move_effect,function
	.thumb_func
Cmd_get_considered_move_effect:
	ldr	r0, .L603
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L603+0x4
	ldrh	r1, [r3, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L603+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L604:
	.align	2, 0
.L603:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe61:
	.size	 Cmd_get_considered_move_effect,.Lfe61-Cmd_get_considered_move_effect
	.align	2, 0
	.type	 Cmd_get_ability,function
	.thumb_func
Cmd_get_ability:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L620
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	mov	ip, r0
	cmp	r1, #0x1
	bne	.L606	@cond_branch
	ldr	r0, .L620+0x4
	b	.L619
.L621:
	.align	2, 0
.L620:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L606:
	ldr	r0, .L622
.L619:
	ldrb	r3, [r0]
	ldr	r0, .L622+0x4
	ldrb	r0, [r0]
	cmp	r0, r3
	beq	.L608	@cond_branch
	ldr	r7, .L622+0x8
	ldr	r5, [r7]
	ldr	r0, [r5, #0x18]
	add	r0, r0, #0x40
	add	r2, r0, r3
	ldrb	r0, [r2]
	add	r6, r7, #0
	cmp	r0, #0
	beq	.L609	@cond_branch
	ldr	r1, [r5, #0x14]
	str	r0, [r1, #0x8]
	b	.L618
.L623:
	.align	2, 0
.L622:
	.word	gBattlerTarget
	.word	gActiveBattler
	.word	gBattleResources
.L609:
	ldr	r1, .L624
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r4, r0, r1
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0x17
	beq	.L611	@cond_branch
	cmp	r0, #0x2a
	beq	.L611	@cond_branch
	cmp	r0, #0x47
	bne	.L610	@cond_branch
.L611:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r2
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	str	r0, [r1, #0x8]
	b	.L618
.L625:
	.align	2, 0
.L624:
	.word	gBattleMons
.L610:
	ldr	r6, .L626
	ldrh	r0, [r4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r6
	ldrb	r0, [r2, #0x16]
	cmp	r0, #0
	beq	.L612	@cond_branch
	ldrb	r0, [r2, #0x17]
	cmp	r0, #0
	beq	.L613	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L614	@cond_branch
	ldr	r0, [r7]
	ldr	r2, [r0, #0x14]
	ldrh	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x16]
	str	r0, [r2, #0x8]
	ldr	r0, .L626+0x4
	mov	ip, r0
	b	.L618
.L627:
	.align	2, 0
.L626:
	.word	gBaseStats
	.word	gAIScriptPtr
.L614:
	ldr	r0, [r7]
	ldr	r2, [r0, #0x14]
	ldrh	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x17]
	str	r0, [r2, #0x8]
	ldr	r1, .L628
	mov	ip, r1
	b	.L618
.L629:
	.align	2, 0
.L628:
	.word	gAIScriptPtr
.L613:
	ldr	r1, [r5, #0x14]
	ldrb	r0, [r2, #0x16]
	str	r0, [r1, #0x8]
	b	.L618
.L612:
	ldr	r1, [r5, #0x14]
	ldrb	r0, [r2, #0x17]
	str	r0, [r1, #0x8]
	b	.L618
.L608:
	ldr	r0, .L630
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L630+0x4
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	str	r0, [r2, #0x8]
.L618:
	mov	r1, ip
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	gBattleResources
	.word	gBattleMons
.Lfe62:
	.size	 Cmd_get_ability,.Lfe62-Cmd_get_ability
	.align	2, 0
	.type	 Cmd_check_ability,function
	.thumb_func
Cmd_check_ability:
	push	{r4, r5, r6, lr}
	ldr	r4, .L653
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, [r4]
	ldrb	r3, [r0, #0x2]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	beq	.L634	@cond_branch
	cmp	r0, #0x2
	bne	.L633	@cond_branch
.L634:
	ldr	r0, .L653+0x4
	ldr	r4, [r0]
	ldr	r1, [r4, #0x18]
	add	r1, r1, #0x40
	add	r2, r1, r5
	ldrb	r1, [r2]
	add	r6, r0, #0
	cmp	r1, #0
	beq	.L635	@cond_branch
	add	r3, r1, #0
	ldr	r0, [r4, #0x14]
	str	r3, [r0, #0x8]
	b	.L646
.L654:
	.align	2, 0
.L653:
	.word	gAIScriptPtr
	.word	gBattleResources
.L635:
	ldr	r1, .L655
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r4, r0, r1
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x17
	beq	.L638	@cond_branch
	cmp	r0, #0x2a
	beq	.L638	@cond_branch
	cmp	r0, #0x47
	bne	.L637	@cond_branch
.L638:
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r3, [r0]
	b	.L646
.L656:
	.align	2, 0
.L655:
	.word	gBattleMons
.L637:
	ldr	r2, .L657
	ldrh	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	ldrb	r4, [r1, #0x16]
	cmp	r4, #0
	beq	.L640	@cond_branch
	ldrb	r2, [r1, #0x17]
	cmp	r2, #0
	beq	.L641	@cond_branch
	add	r0, r3, #0
	cmp	r4, r0
	beq	.L651	@cond_branch
	cmp	r2, r0
	beq	.L651	@cond_branch
	add	r3, r4, #0
	b	.L646
.L658:
	.align	2, 0
.L657:
	.word	gBaseStats
.L641:
	ldrb	r3, [r1, #0x16]
	b	.L646
.L640:
	ldrb	r3, [r1, #0x17]
	b	.L646
.L633:
	ldr	r1, .L659
	mov	r0, #0x58
	mul	r0, r0, r5
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r3, [r0]
	ldr	r6, .L659+0x4
.L646:
	cmp	r3, #0
	bne	.L647	@cond_branch
.L651:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	str	r0, [r1, #0x8]
	ldr	r2, .L659+0x8
	b	.L648
.L660:
	.align	2, 0
.L659:
	.word	gBattleMons
	.word	gBattleResources
	.word	gAIScriptPtr
.L647:
	ldr	r0, .L661
	ldr	r1, [r0]
	add	r2, r0, #0
	ldrb	r1, [r1, #0x2]
	cmp	r3, r1
	bne	.L649	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	b	.L652
.L662:
	.align	2, 0
.L661:
	.word	gAIScriptPtr
.L649:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
.L652:
	str	r0, [r1, #0x8]
.L648:
	ldr	r0, [r2]
	add	r0, r0, #0x3
	str	r0, [r2]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 Cmd_check_ability,.Lfe63-Cmd_check_ability
	.align	2, 0
	.type	 Cmd_get_highest_type_effectiveness,function
	.thumb_func
Cmd_get_highest_type_effectiveness:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L676
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L676+0x4
	ldr	r0, [r0]
	strb	r1, [r0, #0x13]
	ldr	r0, .L676+0x8
	mov	r3, #0x0
	mov	r2, #0x1
	strb	r2, [r0, #0xe]
	ldr	r0, .L676+0xc
	strb	r1, [r0]
	ldr	r0, .L676+0x10
	strb	r2, [r0]
	ldr	r0, .L676+0x14
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	str	r3, [r0, #0x8]
	mov	r5, #0x0
	ldr	r4, .L676+0x18
	ldr	r7, .L676+0x1c
	ldr	r0, .L676+0x20
	mov	r8, r0
	ldr	r6, .L676+0x24
.L667:
	mov	r0, #0x28
	str	r0, [r4]
	lsl	r1, r5, #0x1
	ldrb	r2, [r6]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r8
	ldrh	r0, [r1]
	strh	r0, [r7]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L666	@cond_branch
	ldrh	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, .L676+0x28
	ldrb	r2, [r2]
	bl	TypeCalc
	ldr	r0, [r4]
	cmp	r0, #0x78
	bne	.L669	@cond_branch
	mov	r0, #0x50
	str	r0, [r4]
.L669:
	ldr	r0, [r4]
	cmp	r0, #0xf0
	bne	.L670	@cond_branch
	mov	r0, #0xa0
	str	r0, [r4]
.L670:
	ldr	r0, [r4]
	cmp	r0, #0x1e
	bne	.L671	@cond_branch
	mov	r0, #0x14
	str	r0, [r4]
.L671:
	ldr	r0, [r4]
	cmp	r0, #0xf
	bne	.L672	@cond_branch
	mov	r0, #0xa
	str	r0, [r4]
.L672:
	ldr	r0, .L676+0xc
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L673	@cond_branch
	mov	r0, #0x0
	str	r0, [r4]
.L673:
	ldr	r0, .L676+0x14
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, [r2, #0x8]
	ldr	r1, [r4]
	cmp	r0, r1
	bcs	.L666	@cond_branch
	str	r1, [r2, #0x8]
.L666:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L667	@cond_branch
	ldr	r1, .L676+0x2c
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gCritMultiplier
	.word	gBattleResources
	.word	gBattleMoveDamage
	.word	gCurrentMove
	.word	gBattleMons+0xc
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gAIScriptPtr
.Lfe64:
	.size	 Cmd_get_highest_type_effectiveness,.Lfe64-Cmd_get_highest_type_effectiveness
	.align	2, 0
	.type	 Cmd_if_type_effectiveness,function
	.thumb_func
Cmd_if_type_effectiveness:
	push	{r4, r5, lr}
	ldr	r0, .L686
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L686+0x4
	ldr	r0, [r0]
	strb	r1, [r0, #0x13]
	ldr	r0, .L686+0x8
	mov	r2, #0x1
	strb	r2, [r0, #0xe]
	ldr	r5, .L686+0xc
	strb	r1, [r5]
	ldr	r0, .L686+0x10
	strb	r2, [r0]
	ldr	r4, .L686+0x14
	mov	r0, #0x28
	str	r0, [r4]
	ldr	r1, .L686+0x18
	ldr	r0, .L686+0x1c
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	strh	r0, [r1]
	ldrh	r0, [r1]
	ldr	r1, .L686+0x20
	ldrb	r1, [r1]
	ldr	r2, .L686+0x24
	ldrb	r2, [r2]
	bl	TypeCalc
	ldr	r0, [r4]
	cmp	r0, #0x78
	bne	.L679	@cond_branch
	mov	r0, #0x50
	str	r0, [r4]
.L679:
	ldr	r0, [r4]
	cmp	r0, #0xf0
	bne	.L680	@cond_branch
	mov	r0, #0xa0
	str	r0, [r4]
.L680:
	ldr	r0, [r4]
	cmp	r0, #0x1e
	bne	.L681	@cond_branch
	mov	r0, #0x14
	str	r0, [r4]
.L681:
	ldr	r0, [r4]
	cmp	r0, #0xf
	bne	.L682	@cond_branch
	mov	r0, #0xa
	str	r0, [r4]
.L682:
	ldrb	r1, [r5]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L683	@cond_branch
	mov	r0, #0x0
	str	r0, [r4]
.L683:
	ldrb	r0, [r4]
	ldr	r3, .L686+0x28
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L684	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L685
.L687:
	.align	2, 0
.L686:
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gCritMultiplier
	.word	gBattleMoveDamage
	.word	gCurrentMove
	.word	gBattleResources
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L684:
	add	r0, r2, #0x6
	str	r0, [r3]
.L685:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 Cmd_if_type_effectiveness,.Lfe65-Cmd_if_type_effectiveness
	.align	2, 0
	.type	 Cmd_nullsub_32,function
	.thumb_func
Cmd_nullsub_32:
	bx	lr
.Lfe66:
	.size	 Cmd_nullsub_32,.Lfe66-Cmd_nullsub_32
	.align	2, 0
	.type	 Cmd_nullsub_33,function
	.thumb_func
Cmd_nullsub_33:
	bx	lr
.Lfe67:
	.size	 Cmd_nullsub_33,.Lfe67-Cmd_nullsub_33
	.align	2, 0
	.type	 Cmd_if_status_in_party,function
	.thumb_func
Cmd_if_status_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L705
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L693	@cond_branch
	ldr	r0, .L705+0x4
	b	.L704
.L706:
	.align	2, 0
.L705:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L703:
	ldr	r3, .L707
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L690
.L708:
	.align	2, 0
.L707:
	.word	gAIScriptPtr
.L693:
	ldr	r0, .L709
.L704:
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L709+0x4
	mov	r9, r1
	cmp	r0, #0
	bne	.L695	@cond_branch
	ldr	r0, .L709+0x8
	mov	r9, r0
.L695:
	ldr	r0, .L709+0xc
	ldr	r1, [r0]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r1, #0x0
	mov	r8, r1
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	mov	sl, r0
.L700:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, r9
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L699	@cond_branch
	cmp	r5, sl
	beq	.L699	@cond_branch
	cmp	r6, #0
	beq	.L699	@cond_branch
	cmp	r0, r7
	beq	.L703	@cond_branch
.L699:
	mov	r1, #0x1
	add	r8, r8, r1
	mov	r0, r8
	cmp	r0, #0x5
	ble	.L700	@cond_branch
	ldr	r1, .L709+0xc
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L690:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L710:
	.align	2, 0
.L709:
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gAIScriptPtr
.Lfe68:
	.size	 Cmd_if_status_in_party,.Lfe68-Cmd_if_status_in_party
	.align	2, 0
	.type	 Cmd_if_status_not_in_party,function
	.thumb_func
Cmd_if_status_not_in_party:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L725
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L714	@cond_branch
	ldr	r0, .L725+0x4
	b	.L724
.L726:
	.align	2, 0
.L725:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L714:
	ldr	r0, .L727
.L724:
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L727+0x4
	mov	sl, r1
	cmp	r0, #0
	bne	.L716	@cond_branch
	ldr	r0, .L727+0x8
	mov	sl, r0
.L716:
	ldr	r2, .L727+0xc
	ldr	r1, [r2]
	ldrb	r7, [r1, #0x2]
	ldrb	r0, [r1, #0x3]
	lsl	r0, r0, #0x8
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x4]
	lsl	r0, r0, #0x10
	orr	r7, r7, r0
	ldrb	r0, [r1, #0x5]
	lsl	r0, r0, #0x18
	orr	r7, r7, r0
	mov	r1, #0x0
	mov	r8, r1
	mov	r9, r2
.L721:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	cmp	r5, #0
	beq	.L720	@cond_branch
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r5, r1
	beq	.L720	@cond_branch
	cmp	r6, #0
	beq	.L720	@cond_branch
	cmp	r0, r7
	bne	.L720	@cond_branch
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, #0xa
	str	r0, [r1]
.L720:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L721	@cond_branch
	ldr	r3, .L727+0xc
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x6]
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x9]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	gBattlerTarget
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gAIScriptPtr
.Lfe69:
	.size	 Cmd_if_status_not_in_party,.Lfe69-Cmd_if_status_not_in_party
	.align	2, 0
	.type	 Cmd_get_weather,function
	.thumb_func
Cmd_get_weather:
	push	{lr}
	ldr	r2, .L734
	ldrh	r1, [r2]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L730	@cond_branch
	ldr	r0, .L734+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x1
	str	r0, [r1, #0x8]
.L730:
	ldrh	r1, [r2]
	mov	r0, #0x18
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L731	@cond_branch
	ldr	r0, .L734+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x2
	str	r0, [r1, #0x8]
.L731:
	ldrh	r1, [r2]
	mov	r0, #0x60
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L732	@cond_branch
	ldr	r0, .L734+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x0
	str	r0, [r1, #0x8]
.L732:
	ldrh	r1, [r2]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L733	@cond_branch
	ldr	r0, .L734+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x3
	str	r0, [r1, #0x8]
.L733:
	ldr	r1, .L734+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L735:
	.align	2, 0
.L734:
	.word	gBattleWeather
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe70:
	.size	 Cmd_get_weather,.Lfe70-Cmd_get_weather
	.align	2, 0
	.type	 Cmd_if_effect,function
	.thumb_func
Cmd_if_effect:
	push	{lr}
	ldr	r2, .L739
	ldr	r0, .L739+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r3, .L739+0x8
	ldr	r2, [r3]
	ldrb	r0, [r0]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	bne	.L737	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L738
.L740:
	.align	2, 0
.L739:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gAIScriptPtr
.L737:
	add	r0, r2, #0x6
	str	r0, [r3]
.L738:
	pop	{r0}
	bx	r0
.Lfe71:
	.size	 Cmd_if_effect,.Lfe71-Cmd_if_effect
	.align	2, 0
	.type	 Cmd_if_not_effect,function
	.thumb_func
Cmd_if_not_effect:
	push	{lr}
	ldr	r2, .L744
	ldr	r0, .L744+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r3, .L744+0x8
	ldr	r2, [r3]
	ldrb	r0, [r0]
	ldrb	r1, [r2, #0x1]
	cmp	r0, r1
	beq	.L742	@cond_branch
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L743
.L745:
	.align	2, 0
.L744:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gAIScriptPtr
.L742:
	add	r0, r2, #0x6
	str	r0, [r3]
.L743:
	pop	{r0}
	bx	r0
.Lfe72:
	.size	 Cmd_if_not_effect,.Lfe72-Cmd_if_not_effect
	.align	2, 0
	.type	 Cmd_if_stat_level_less_than,function
	.thumb_func
Cmd_if_stat_level_less_than:
	push	{r4, lr}
	ldr	r0, .L752
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L747	@cond_branch
	ldr	r0, .L752+0x4
	b	.L751
.L753:
	.align	2, 0
.L752:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L747:
	ldr	r0, .L754
.L751:
	ldrb	r3, [r0]
	ldr	r1, .L754+0x4
	ldr	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bge	.L749	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L750
.L755:
	.align	2, 0
.L754:
	.word	gBattlerTarget
	.word	gBattleMons
.L749:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L750:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe73:
	.size	 Cmd_if_stat_level_less_than,.Lfe73-Cmd_if_stat_level_less_than
	.align	2, 0
	.type	 Cmd_if_stat_level_more_than,function
	.thumb_func
Cmd_if_stat_level_more_than:
	push	{r4, lr}
	ldr	r0, .L762
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L757	@cond_branch
	ldr	r0, .L762+0x4
	b	.L761
.L763:
	.align	2, 0
.L762:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L757:
	ldr	r0, .L764
.L761:
	ldrb	r3, [r0]
	ldr	r1, .L764+0x4
	ldr	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	ble	.L759	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L760
.L765:
	.align	2, 0
.L764:
	.word	gBattlerTarget
	.word	gBattleMons
.L759:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L760:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe74:
	.size	 Cmd_if_stat_level_more_than,.Lfe74-Cmd_if_stat_level_more_than
	.align	2, 0
	.type	 Cmd_if_stat_level_equal,function
	.thumb_func
Cmd_if_stat_level_equal:
	push	{r4, lr}
	ldr	r0, .L772
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L767	@cond_branch
	ldr	r0, .L772+0x4
	b	.L771
.L773:
	.align	2, 0
.L772:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L767:
	ldr	r0, .L774
.L771:
	ldrb	r3, [r0]
	ldr	r1, .L774+0x4
	ldr	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	bne	.L769	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L770
.L775:
	.align	2, 0
.L774:
	.word	gBattlerTarget
	.word	gBattleMons
.L769:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L770:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 Cmd_if_stat_level_equal,.Lfe75-Cmd_if_stat_level_equal
	.align	2, 0
	.type	 Cmd_if_stat_level_not_equal,function
	.thumb_func
Cmd_if_stat_level_not_equal:
	push	{r4, lr}
	ldr	r0, .L782
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L777	@cond_branch
	ldr	r0, .L782+0x4
	b	.L781
.L783:
	.align	2, 0
.L782:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L777:
	ldr	r0, .L784
.L781:
	ldrb	r3, [r0]
	ldr	r1, .L784+0x4
	ldr	r2, [r4]
	mov	r0, #0x58
	mul	r0, r0, r3
	ldrb	r3, [r2, #0x2]
	add	r0, r0, r3
	add	r1, r1, #0x18
	add	r0, r0, r1
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrb	r1, [r2, #0x3]
	cmp	r0, r1
	beq	.L779	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L780
.L785:
	.align	2, 0
.L784:
	.word	gBattlerTarget
	.word	gBattleMons
.L779:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L780:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe76:
	.size	 Cmd_if_stat_level_not_equal,.Lfe76-Cmd_if_stat_level_not_equal
	.align	2, 0
	.type	 Cmd_if_can_faint,function
	.thumb_func
Cmd_if_can_faint:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r2, .L791
	ldr	r0, .L791+0x4
	mov	r8, r0
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bls	.L789	@cond_branch
	ldr	r0, .L791+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L791+0xc
	ldr	r0, [r0]
	strb	r1, [r0, #0x13]
	ldr	r0, .L791+0x10
	mov	r7, #0x1
	strb	r7, [r0, #0xe]
	ldr	r0, .L791+0x14
	strb	r1, [r0]
	ldr	r0, .L791+0x18
	strb	r7, [r0]
	ldr	r5, .L791+0x1c
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	strh	r0, [r5]
	ldr	r4, .L791+0x20
	ldrb	r0, [r4]
	ldr	r6, .L791+0x24
	ldrb	r1, [r6]
	bl	AI_CalcDmg
	ldrh	r0, [r5]
	ldrb	r1, [r4]
	ldrb	r2, [r6]
	bl	TypeCalc
	ldr	r4, .L791+0x28
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	add	r0, r1, #0
	add	r0, r0, #0x18
	ldrb	r1, [r1, #0x1]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, [r4]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	cmp	r0, #0
	bne	.L788	@cond_branch
	str	r7, [r4]
.L788:
	ldr	r2, .L791+0x2c
	ldrb	r1, [r6]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x28]
	ldr	r0, [r4]
	cmp	r1, r0
	bgt	.L789	@cond_branch
	ldr	r3, .L791+0x30
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L786
.L792:
	.align	2, 0
.L791:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gCritMultiplier
	.word	gCurrentMove
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gAIScriptPtr
.L789:
	ldr	r1, .L793
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L786:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L794:
	.align	2, 0
.L793:
	.word	gAIScriptPtr
.Lfe77:
	.size	 Cmd_if_can_faint,.Lfe77-Cmd_if_can_faint
	.align	2, 0
	.type	 Cmd_if_cant_faint,function
	.thumb_func
Cmd_if_cant_faint:
	push	{r4, r5, r6, r7, lr}
	ldr	r2, .L799
	ldr	r7, .L799+0x4
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrh	r1, [r0, #0x2]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bls	.L797	@cond_branch
	ldr	r0, .L799+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L799+0xc
	ldr	r0, [r0]
	strb	r1, [r0, #0x13]
	ldr	r0, .L799+0x10
	mov	r2, #0x1
	strb	r2, [r0, #0xe]
	ldr	r0, .L799+0x14
	strb	r1, [r0]
	ldr	r0, .L799+0x18
	strb	r2, [r0]
	ldr	r6, .L799+0x1c
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	ldrh	r0, [r0, #0x2]
	strh	r0, [r6]
	ldr	r4, .L799+0x20
	ldrb	r0, [r4]
	ldr	r5, .L799+0x24
	ldrb	r1, [r5]
	bl	AI_CalcDmg
	ldrh	r0, [r6]
	ldrb	r1, [r4]
	ldrb	r2, [r5]
	bl	TypeCalc
	ldr	r4, .L799+0x28
	ldr	r0, [r7]
	ldr	r1, [r0, #0x14]
	add	r0, r1, #0
	add	r0, r0, #0x18
	ldrb	r1, [r1, #0x1]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, [r4]
	mul	r0, r0, r1
	mov	r1, #0x64
	bl	__divsi3
	str	r0, [r4]
	ldr	r3, .L799+0x2c
	ldrb	r2, [r5]
	mov	r1, #0x58
	mul	r1, r1, r2
	add	r1, r1, r3
	ldrh	r1, [r1, #0x28]
	cmp	r1, r0
	ble	.L797	@cond_branch
	ldr	r3, .L799+0x30
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L795
.L800:
	.align	2, 0
.L799:
	.word	gBattleMoves
	.word	gBattleResources
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gCritMultiplier
	.word	gCurrentMove
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gBattleMoveDamage
	.word	gBattleMons
	.word	gAIScriptPtr
.L797:
	ldr	r1, .L801
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L795:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L802:
	.align	2, 0
.L801:
	.word	gAIScriptPtr
.Lfe78:
	.size	 Cmd_if_cant_faint,.Lfe78-Cmd_if_cant_faint
	.align	2, 0
	.type	 Cmd_if_has_move,function
	.thumb_func
Cmd_if_has_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L840
	ldr	r5, [r0]
	add	r7, r5, #0x2
	ldrb	r1, [r5, #0x1]
	add	r6, r0, #0
	cmp	r1, #0x1
	beq	.L805	@cond_branch
	cmp	r1, #0x1
	bgt	.L837	@cond_branch
	cmp	r1, #0
	beq	.L826	@cond_branch
	b	.L804
.L841:
	.align	2, 0
.L840:
	.word	gAIScriptPtr
.L837:
	cmp	r1, #0x2
	beq	.L826	@cond_branch
	cmp	r1, #0x3
	beq	.L814	@cond_branch
	b	.L804
.L805:
	mov	r4, #0x0
	ldr	r3, .L842
	ldr	r2, .L842+0x4
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r3, r3, #0xc
	add	r0, r0, r3
	ldrh	r0, [r0]
	ldrh	r5, [r5, #0x2]
	cmp	r0, r5
	beq	.L807	@cond_branch
	mov	r5, #0x58
.L808:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L807	@cond_branch
	lsl	r1, r4, #0x1
	ldrb	r0, [r2]
	mul	r0, r0, r5
	add	r1, r1, r0
	add	r1, r1, r3
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	bne	.L808	@cond_branch
.L807:
	cmp	r4, #0x4
	beq	.L838	@cond_branch
	b	.L833
.L843:
	.align	2, 0
.L842:
	.word	gBattleMons
	.word	sBattler_AI
.L814:
	ldr	r3, .L844
	ldr	r2, .L844+0x4
	ldrb	r1, [r2]
	mov	r0, #0x2
	eor	r0, r0, r1
	mov	r1, #0x58
	mul	r1, r1, r0
	add	r0, r1, r3
	ldrh	r0, [r0, #0x28]
	cmp	r0, #0
	bne	.L815	@cond_branch
	add	r0, r5, #0
	b	.L839
.L845:
	.align	2, 0
.L844:
	.word	gBattleMons
	.word	sBattler_AI
.L815:
	mov	r4, #0x0
	add	r3, r3, #0xc
	add	r0, r1, r3
	ldrh	r0, [r0]
	ldrh	r5, [r5, #0x2]
	cmp	r0, r5
	beq	.L807	@cond_branch
	mov	ip, r3
	add	r5, r2, #0
	mov	r3, #0x2
.L819:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L807	@cond_branch
	lsl	r1, r4, #0x1
	ldrb	r0, [r5]
	add	r2, r3, #0
	eor	r2, r2, r0
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, ip
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	bne	.L819	@cond_branch
	b	.L807
.L826:
	mov	r4, #0x0
	ldr	r3, .L846
	ldr	r0, [r3]
	ldr	r1, [r0, #0x18]
	ldr	r2, .L846+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r7]
	cmp	r0, r1
	beq	.L828	@cond_branch
	add	r7, r3, #0
	add	r5, r2, #0
	add	r3, r1, #0
.L829:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L828	@cond_branch
	ldr	r0, [r7]
	ldr	r2, [r0, #0x18]
	lsl	r1, r4, #0x1
	ldrb	r0, [r5]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L829	@cond_branch
.L828:
	cmp	r4, #0x4
	bne	.L833	@cond_branch
.L838:
	ldr	r0, [r6]
.L839:
	add	r0, r0, #0x8
	str	r0, [r6]
	b	.L804
.L847:
	.align	2, 0
.L846:
	.word	gBattleResources
	.word	gBattlerTarget
.L833:
	ldr	r2, [r6]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r6]
.L804:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe79:
	.size	 Cmd_if_has_move,.Lfe79-Cmd_if_has_move
	.align	2, 0
	.type	 Cmd_if_doesnt_have_move,function
	.thumb_func
Cmd_if_doesnt_have_move:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L874
	ldr	r0, [r1]
	add	r6, r0, #0x2
	ldrb	r0, [r0, #0x1]
	add	r5, r1, #0
	cmp	r0, #0x1
	beq	.L851	@cond_branch
	cmp	r0, #0x1
	bgt	.L872	@cond_branch
	cmp	r0, #0
	beq	.L861	@cond_branch
	b	.L849
.L875:
	.align	2, 0
.L874:
	.word	gAIScriptPtr
.L872:
	cmp	r0, #0x2
	beq	.L861	@cond_branch
	cmp	r0, #0x3
	bne	.L849	@cond_branch
.L851:
	mov	r3, #0x0
	ldr	r2, .L876
	ldr	r4, .L876+0x4
	ldrb	r1, [r4]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, #0xc
	add	r0, r0, r2
	ldrh	r0, [r0]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L853	@cond_branch
	add	r7, r4, #0
	mov	r6, #0x58
	add	r4, r2, #0
	add	r2, r1, #0
.L854:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L853	@cond_branch
	lsl	r1, r3, #0x1
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r1, r1, r0
	add	r1, r1, r4
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L854	@cond_branch
.L853:
	cmp	r3, #0x4
	bne	.L873	@cond_branch
	b	.L868
.L877:
	.align	2, 0
.L876:
	.word	gBattleMons
	.word	sBattler_AI
.L861:
	mov	r3, #0x0
	ldr	r4, .L878
	ldr	r0, [r4]
	ldr	r1, [r0, #0x18]
	ldr	r2, .L878+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r1, [r6]
	cmp	r0, r1
	beq	.L863	@cond_branch
	add	r7, r4, #0
	add	r6, r2, #0
	add	r4, r1, #0
.L864:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L863	@cond_branch
	ldr	r0, [r7]
	ldr	r2, [r0, #0x18]
	lsl	r1, r3, #0x1
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	cmp	r0, r4
	bne	.L864	@cond_branch
.L863:
	cmp	r3, #0x4
	beq	.L868	@cond_branch
.L873:
	ldr	r0, [r5]
	add	r0, r0, #0x8
	str	r0, [r5]
	b	.L849
.L879:
	.align	2, 0
.L878:
	.word	gBattleResources
	.word	gBattlerTarget
.L868:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L849:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 Cmd_if_doesnt_have_move,.Lfe80-Cmd_if_doesnt_have_move
	.align	2, 0
	.type	 Cmd_if_has_move_with_effect,function
	.thumb_func
Cmd_if_has_move_with_effect:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L906
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r5, r1, #0
	cmp	r0, #0x1
	beq	.L883	@cond_branch
	cmp	r0, #0x1
	bgt	.L904	@cond_branch
	cmp	r0, #0
	beq	.L893	@cond_branch
	b	.L881
.L907:
	.align	2, 0
.L906:
	.word	gAIScriptPtr
.L904:
	cmp	r0, #0x2
	beq	.L893	@cond_branch
	cmp	r0, #0x3
	bne	.L881	@cond_branch
.L883:
	mov	r3, #0x0
	ldr	r1, .L908
	ldr	r0, .L908+0x4
	ldrb	r2, [r0]
	ldr	r6, .L908+0x8
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r4, .L908+0xc
.L887:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L886	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r4]
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L885	@cond_branch
.L886:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L887	@cond_branch
.L885:
	cmp	r3, #0x4
	beq	.L905	@cond_branch
	b	.L900
.L909:
	.align	2, 0
.L908:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gAIScriptPtr
.L893:
	mov	r3, #0x0
	ldr	r1, .L910
	ldr	r0, .L910+0x4
	ldrb	r2, [r0]
	ldr	r0, .L910+0x8
	mov	ip, r0
	ldr	r7, .L910+0xc
	ldr	r6, .L910+0x10
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r4, r0, r1
.L897:
	lsl	r2, r3, #0x1
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L896	@cond_branch
	ldr	r0, [r7]
	ldr	r1, [r0, #0x18]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x4
	add	r0, r2, r0
	add	r1, r1, r0
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldr	r1, [r5]
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L895	@cond_branch
.L896:
	add	r4, r4, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L897	@cond_branch
.L895:
	cmp	r3, #0x4
	bne	.L900	@cond_branch
.L905:
	ldr	r0, [r5]
	add	r0, r0, #0x7
	str	r0, [r5]
	b	.L881
.L911:
	.align	2, 0
.L910:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gBattleResources
	.word	gBattlerTarget
.L900:
	ldr	r2, [r5]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
.L881:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 Cmd_if_has_move_with_effect,.Lfe81-Cmd_if_has_move_with_effect
	.align	2, 0
	.type	 Cmd_if_doesnt_have_move_with_effect,function
	.thumb_func
Cmd_if_doesnt_have_move_with_effect:
	push	{r4, r5, r6, lr}
	ldr	r1, .L938
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	add	r4, r1, #0
	cmp	r0, #0x1
	beq	.L915	@cond_branch
	cmp	r0, #0x1
	bgt	.L936	@cond_branch
	cmp	r0, #0
	beq	.L925	@cond_branch
	b	.L913
.L939:
	.align	2, 0
.L938:
	.word	gAIScriptPtr
.L936:
	cmp	r0, #0x2
	beq	.L925	@cond_branch
	cmp	r0, #0x3
	bne	.L913	@cond_branch
.L915:
	mov	r3, #0x0
	ldr	r1, .L940
	ldr	r0, .L940+0x4
	ldrb	r2, [r0]
	ldr	r6, .L940+0x8
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0xc
	add	r2, r0, r1
	ldr	r5, .L940+0xc
.L919:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L918	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L917	@cond_branch
.L918:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L919	@cond_branch
.L917:
	cmp	r3, #0x4
	bne	.L937	@cond_branch
	b	.L932
.L941:
	.align	2, 0
.L940:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattleMoves
	.word	gAIScriptPtr
.L925:
	mov	r3, #0x0
	ldr	r0, .L942
	ldr	r0, [r0]
	ldr	r1, [r0, #0x18]
	ldr	r0, .L942+0x4
	ldrb	r0, [r0]
	ldr	r6, .L942+0x8
	lsl	r0, r0, #0x4
	add	r2, r0, r1
	ldr	r5, .L942+0xc
.L929:
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L928	@cond_branch
	add	r1, r0, #0
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldr	r1, [r5]
	ldrb	r0, [r0]
	ldrb	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L927	@cond_branch
.L928:
	add	r2, r2, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L929	@cond_branch
.L927:
	cmp	r3, #0x4
	beq	.L932	@cond_branch
.L937:
	ldr	r0, [r4]
	add	r0, r0, #0x7
	str	r0, [r4]
	b	.L913
.L943:
	.align	2, 0
.L942:
	.word	gBattleResources
	.word	gBattlerTarget
	.word	gBattleMoves
	.word	gAIScriptPtr
.L932:
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
.L913:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 Cmd_if_doesnt_have_move_with_effect,.Lfe82-Cmd_if_doesnt_have_move_with_effect
	.align	2, 0
	.type	 Cmd_if_any_move_disabled_or_encored,function
	.thumb_func
Cmd_if_any_move_disabled_or_encored:
	push	{r4, r5, lr}
	ldr	r0, .L958
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L945	@cond_branch
	ldr	r0, .L958+0x4
	b	.L955
.L959:
	.align	2, 0
.L958:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L945:
	ldr	r0, .L960
.L955:
	ldrb	r3, [r0]
	add	r4, r5, #0
	ldr	r2, [r4]
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	bne	.L947	@cond_branch
	ldr	r0, .L960+0x4
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	cmp	r0, #0
	beq	.L956	@cond_branch
	b	.L957
.L961:
	.align	2, 0
.L960:
	.word	gBattlerTarget
	.word	gDisableStructs
.L947:
	cmp	r0, #0x1
	beq	.L951	@cond_branch
.L956:
	add	r0, r2, #0x7
	str	r0, [r4]
	b	.L950
.L951:
	ldr	r0, .L962
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	beq	.L953	@cond_branch
.L957:
	ldrb	r1, [r2, #0x3]
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L950
.L963:
	.align	2, 0
.L962:
	.word	gDisableStructs
.L953:
	add	r0, r2, #0x7
	str	r0, [r5]
.L950:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 Cmd_if_any_move_disabled_or_encored,.Lfe83-Cmd_if_any_move_disabled_or_encored
	.align	2, 0
	.type	 Cmd_if_curr_move_disabled_or_encored,function
	.thumb_func
Cmd_if_curr_move_disabled_or_encored:
	push	{r4, lr}
	ldr	r4, .L975
	ldr	r3, [r4]
	ldrb	r0, [r3, #0x1]
	cmp	r0, #0
	beq	.L966	@cond_branch
	cmp	r0, #0x1
	beq	.L969	@cond_branch
	b	.L970
.L976:
	.align	2, 0
.L975:
	.word	gAIScriptPtr
.L966:
	ldr	r2, .L977
	ldr	r0, .L977+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L977+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r0, [r0, #0x4]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	beq	.L974	@cond_branch
	b	.L970
.L978:
	.align	2, 0
.L977:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleResources
.L969:
	ldr	r2, .L979
	ldr	r0, .L979+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, .L979+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	ldrh	r0, [r0, #0x6]
	ldrh	r1, [r1, #0x2]
	cmp	r0, r1
	bne	.L970	@cond_branch
.L974:
	ldrb	r1, [r3, #0x2]
	ldrb	r0, [r3, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L965
.L980:
	.align	2, 0
.L979:
	.word	gDisableStructs
	.word	gActiveBattler
	.word	gBattleResources
.L970:
	add	r0, r3, #0x6
	str	r0, [r4]
.L965:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe84:
	.size	 Cmd_if_curr_move_disabled_or_encored,.Lfe84-Cmd_if_curr_move_disabled_or_encored
	.align	2, 0
	.type	 Cmd_flee,function
	.thumb_func
Cmd_flee:
	ldr	r0, .L982
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xb
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L983:
	.align	2, 0
.L982:
	.word	gBattleResources
.Lfe85:
	.size	 Cmd_flee,.Lfe85-Cmd_flee
	.align	2, 0
	.type	 Cmd_if_random_safari_flee,function
	.thumb_func
Cmd_if_random_safari_flee:
	push	{r4, lr}
	ldr	r0, .L987
	ldr	r0, [r0]
	add	r0, r0, #0x7b
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, r4
	bcs	.L985	@cond_branch
	ldr	r3, .L987+0x4
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L986
.L988:
	.align	2, 0
.L987:
	.word	gBattleStruct
	.word	gAIScriptPtr
.L985:
	ldr	r1, .L989
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L986:
	pop	{r4}
	pop	{r0}
	bx	r0
.L990:
	.align	2, 0
.L989:
	.word	gAIScriptPtr
.Lfe86:
	.size	 Cmd_if_random_safari_flee,.Lfe86-Cmd_if_random_safari_flee
	.align	2, 0
	.type	 Cmd_watch,function
	.thumb_func
Cmd_watch:
	ldr	r0, .L992
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xd
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	bx	lr
.L993:
	.align	2, 0
.L992:
	.word	gBattleResources
.Lfe87:
	.size	 Cmd_watch,.Lfe87-Cmd_watch
	.align	2, 0
	.type	 Cmd_get_hold_effect,function
	.thumb_func
Cmd_get_hold_effect:
	push	{r4, lr}
	ldr	r0, .L1001
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L995	@cond_branch
	ldr	r0, .L1001+0x4
	b	.L999
.L1002:
	.align	2, 0
.L1001:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L995:
	ldr	r0, .L1003
.L999:
	ldrb	r2, [r0]
	ldr	r0, .L1003+0x4
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.L997	@cond_branch
	ldr	r4, .L1003+0x8
	ldr	r0, [r4]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x44
	add	r0, r0, r2
	ldrb	r0, [r0]
	bl	ItemId_GetHoldEffect
	ldr	r1, [r4]
	b	.L1000
.L1004:
	.align	2, 0
.L1003:
	.word	gBattlerTarget
	.word	gActiveBattler
	.word	gBattleResources
.L997:
	ldr	r1, .L1005
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	bl	ItemId_GetHoldEffect
	ldr	r1, .L1005+0x4
	ldr	r1, [r1]
.L1000:
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1005+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1006:
	.align	2, 0
.L1005:
	.word	gBattleMons
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe88:
	.size	 Cmd_get_hold_effect,.Lfe88-Cmd_get_hold_effect
	.align	2, 0
	.type	 Cmd_if_holds_item,function
	.thumb_func
Cmd_if_holds_item:
	push	{r4, lr}
	ldr	r0, .L1012
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, #0x1
	ldr	r1, .L1012+0x4
	ldrb	r2, [r1]
	add	r1, r3, #0
	and	r1, r1, r0
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L1008	@cond_branch
	ldr	r1, .L1012+0x8
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	ldrh	r3, [r0, #0x2e]
	b	.L1009
.L1013:
	.align	2, 0
.L1012:
	.word	gAIScriptPtr
	.word	sBattler_AI
	.word	gBattleMons
.L1008:
	ldr	r0, .L1014
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x44
	add	r0, r0, r3
	ldrb	r3, [r0]
.L1009:
	ldr	r4, .L1014+0x4
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	orr	r0, r0, r1
	cmp	r0, r3
	bne	.L1010	@cond_branch
	ldrb	r1, [r2, #0x4]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x6]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x7]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1011
.L1015:
	.align	2, 0
.L1014:
	.word	gBattleResources
	.word	gAIScriptPtr
.L1010:
	add	r0, r2, #0
	add	r0, r0, #0x8
	str	r0, [r4]
.L1011:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 Cmd_if_holds_item,.Lfe89-Cmd_if_holds_item
	.align	2, 0
	.type	 Cmd_get_gender,function
	.thumb_func
Cmd_get_gender:
	push	{lr}
	ldr	r0, .L1020
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x1
	bne	.L1017	@cond_branch
	ldr	r0, .L1020+0x4
	b	.L1019
.L1021:
	.align	2, 0
.L1020:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1017:
	ldr	r0, .L1022
.L1019:
	ldrb	r1, [r0]
	ldr	r2, .L1022+0x4
	mov	r0, #0x58
	mul	r1, r1, r0
	add	r0, r1, r2
	ldrh	r0, [r0]
	add	r2, r2, #0x48
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	GetGenderFromSpeciesAndPersonality
	ldr	r1, .L1022+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [r1, #0x8]
	ldr	r1, .L1022+0xc
	ldr	r0, [r1]
	add	r0, r0, #0x2
	str	r0, [r1]
	pop	{r0}
	bx	r0
.L1023:
	.align	2, 0
.L1022:
	.word	gBattlerTarget
	.word	gBattleMons
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe90:
	.size	 Cmd_get_gender,.Lfe90-Cmd_get_gender
	.align	2, 0
	.type	 Cmd_is_first_turn_for,function
	.thumb_func
Cmd_is_first_turn_for:
	push	{r4, lr}
	ldr	r0, .L1028
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1025	@cond_branch
	ldr	r0, .L1028+0x4
	b	.L1027
.L1029:
	.align	2, 0
.L1028:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1025:
	ldr	r0, .L1030
.L1027:
	ldrb	r3, [r0]
	ldr	r0, .L1030+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1030+0x8
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1031:
	.align	2, 0
.L1030:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe91:
	.size	 Cmd_is_first_turn_for,.Lfe91-Cmd_is_first_turn_for
	.align	2, 0
	.type	 Cmd_get_stockpile_count,function
	.thumb_func
Cmd_get_stockpile_count:
	push	{r4, lr}
	ldr	r0, .L1036
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1033	@cond_branch
	ldr	r0, .L1036+0x4
	b	.L1035
.L1037:
	.align	2, 0
.L1036:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1033:
	ldr	r0, .L1038
.L1035:
	ldrb	r3, [r0]
	ldr	r0, .L1038+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1038+0x8
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x9]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1039:
	.align	2, 0
.L1038:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe92:
	.size	 Cmd_get_stockpile_count,.Lfe92-Cmd_get_stockpile_count
	.align	2, 0
	.type	 Cmd_is_double_battle,function
	.thumb_func
Cmd_is_double_battle:
	ldr	r0, .L1041
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, .L1041+0x4
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	str	r0, [r2, #0x8]
	ldr	r1, .L1041+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1042:
	.align	2, 0
.L1041:
	.word	gBattleResources
	.word	gBattleTypeFlags
	.word	gAIScriptPtr
.Lfe93:
	.size	 Cmd_is_double_battle,.Lfe93-Cmd_is_double_battle
	.align	2, 0
	.type	 Cmd_get_used_held_item,function
	.thumb_func
Cmd_get_used_held_item:
	push	{r4, lr}
	ldr	r0, .L1047
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1044	@cond_branch
	ldr	r0, .L1047+0x4
	b	.L1046
.L1048:
	.align	2, 0
.L1047:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1044:
	ldr	r0, .L1049
.L1046:
	ldrb	r3, [r0]
	ldr	r0, .L1049+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r0, .L1049+0x8
	ldr	r1, [r0]
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1050:
	.align	2, 0
.L1049:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gBattleStruct
.Lfe94:
	.size	 Cmd_get_used_held_item,.Lfe94-Cmd_get_used_held_item
	.align	2, 0
	.type	 Cmd_get_move_type_from_result,function
	.thumb_func
Cmd_get_move_type_from_result:
	ldr	r0, .L1052
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1052+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	str	r0, [r3, #0x8]
	ldr	r1, .L1052+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1053:
	.align	2, 0
.L1052:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe95:
	.size	 Cmd_get_move_type_from_result,.Lfe95-Cmd_get_move_type_from_result
	.align	2, 0
	.type	 Cmd_get_move_power_from_result,function
	.thumb_func
Cmd_get_move_power_from_result:
	ldr	r0, .L1055
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1055+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	str	r0, [r3, #0x8]
	ldr	r1, .L1055+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1056:
	.align	2, 0
.L1055:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe96:
	.size	 Cmd_get_move_power_from_result,.Lfe96-Cmd_get_move_power_from_result
	.align	2, 0
	.type	 Cmd_get_move_effect_from_result,function
	.thumb_func
Cmd_get_move_effect_from_result:
	ldr	r0, .L1058
	ldr	r0, [r0]
	ldr	r3, [r0, #0x14]
	ldr	r2, .L1058+0x4
	ldr	r1, [r3, #0x8]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	str	r0, [r3, #0x8]
	ldr	r1, .L1058+0x8
	ldr	r0, [r1]
	add	r0, r0, #0x1
	str	r0, [r1]
	bx	lr
.L1059:
	.align	2, 0
.L1058:
	.word	gBattleResources
	.word	gBattleMoves
	.word	gAIScriptPtr
.Lfe97:
	.size	 Cmd_get_move_effect_from_result,.Lfe97-Cmd_get_move_effect_from_result
	.align	2, 0
	.type	 Cmd_get_protect_count,function
	.thumb_func
Cmd_get_protect_count:
	push	{r4, lr}
	ldr	r0, .L1064
	ldr	r1, [r0]
	ldrb	r1, [r1, #0x1]
	add	r4, r0, #0
	cmp	r1, #0x1
	bne	.L1061	@cond_branch
	ldr	r0, .L1064+0x4
	b	.L1063
.L1065:
	.align	2, 0
.L1064:
	.word	gAIScriptPtr
	.word	sBattler_AI
.L1061:
	ldr	r0, .L1066
.L1063:
	ldrb	r3, [r0]
	ldr	r0, .L1066+0x4
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldr	r1, .L1066+0x8
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	str	r0, [r2, #0x8]
	ldr	r0, [r4]
	add	r0, r0, #0x2
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1067:
	.align	2, 0
.L1066:
	.word	gBattlerTarget
	.word	gBattleResources
	.word	gDisableStructs
.Lfe98:
	.size	 Cmd_get_protect_count,.Lfe98-Cmd_get_protect_count
	.align	2, 0
	.type	 Cmd_nullsub_52,function
	.thumb_func
Cmd_nullsub_52:
	bx	lr
.Lfe99:
	.size	 Cmd_nullsub_52,.Lfe99-Cmd_nullsub_52
	.align	2, 0
	.type	 Cmd_nullsub_53,function
	.thumb_func
Cmd_nullsub_53:
	bx	lr
.Lfe100:
	.size	 Cmd_nullsub_53,.Lfe100-Cmd_nullsub_53
	.align	2, 0
	.type	 Cmd_nullsub_54,function
	.thumb_func
Cmd_nullsub_54:
	bx	lr
.Lfe101:
	.size	 Cmd_nullsub_54,.Lfe101-Cmd_nullsub_54
	.align	2, 0
	.type	 Cmd_nullsub_55,function
	.thumb_func
Cmd_nullsub_55:
	bx	lr
.Lfe102:
	.size	 Cmd_nullsub_55,.Lfe102-Cmd_nullsub_55
	.align	2, 0
	.type	 Cmd_nullsub_56,function
	.thumb_func
Cmd_nullsub_56:
	bx	lr
.Lfe103:
	.size	 Cmd_nullsub_56,.Lfe103-Cmd_nullsub_56
	.align	2, 0
	.type	 Cmd_nullsub_57,function
	.thumb_func
Cmd_nullsub_57:
	bx	lr
.Lfe104:
	.size	 Cmd_nullsub_57,.Lfe104-Cmd_nullsub_57
	.align	2, 0
	.type	 Cmd_call,function
	.thumb_func
Cmd_call:
	push	{r4, lr}
	ldr	r4, .L1075
	ldr	r0, [r4]
	add	r0, r0, #0x5
	bl	AIStackPushVar
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1076:
	.align	2, 0
.L1075:
	.word	gAIScriptPtr
.Lfe105:
	.size	 Cmd_call,.Lfe105-Cmd_call
	.align	2, 0
	.type	 Cmd_goto,function
	.thumb_func
Cmd_goto:
	ldr	r3, .L1078
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	bx	lr
.L1079:
	.align	2, 0
.L1078:
	.word	gAIScriptPtr
.Lfe106:
	.size	 Cmd_goto,.Lfe106-Cmd_goto
	.align	2, 0
	.type	 Cmd_end,function
	.thumb_func
Cmd_end:
	push	{lr}
	bl	AIStackPop
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1081	@cond_branch
	ldr	r0, .L1082
	ldr	r0, [r0]
	ldr	r2, [r0, #0x14]
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
.L1081:
	pop	{r0}
	bx	r0
.L1083:
	.align	2, 0
.L1082:
	.word	gBattleResources
.Lfe107:
	.size	 Cmd_end,.Lfe107-Cmd_end
	.align	2, 0
	.type	 Cmd_if_level_cond,function
	.thumb_func
Cmd_if_level_cond:
	push	{r4, r5, lr}
	ldr	r5, .L1099
	ldr	r4, [r5]
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x1
	beq	.L1089	@cond_branch
	cmp	r0, #0x1
	bgt	.L1097	@cond_branch
	cmp	r0, #0
	beq	.L1086	@cond_branch
	b	.L1085
.L1100:
	.align	2, 0
.L1099:
	.word	gAIScriptPtr
.L1097:
	cmp	r0, #0x2
	beq	.L1092	@cond_branch
	b	.L1085
.L1086:
	ldr	r3, .L1101
	ldr	r0, .L1101+0x4
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2a
	ldr	r0, .L1101+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bhi	.L1098	@cond_branch
	b	.L1093
.L1102:
	.align	2, 0
.L1101:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1089:
	ldr	r3, .L1103
	ldr	r0, .L1103+0x4
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2a
	ldr	r0, .L1103+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcc	.L1098	@cond_branch
	b	.L1093
.L1104:
	.align	2, 0
.L1103:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1092:
	ldr	r3, .L1105
	ldr	r0, .L1105+0x4
	ldrb	r0, [r0]
	mov	r2, #0x58
	mov	r1, r0
	mul	r1, r1, r2
	add	r1, r1, r3
	add	r1, r1, #0x2a
	ldr	r0, .L1105+0x8
	ldrb	r0, [r0]
	mul	r0, r0, r2
	add	r0, r0, r3
	add	r0, r0, #0x2a
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L1093	@cond_branch
.L1098:
	ldrb	r1, [r4, #0x2]
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r5]
	b	.L1085
.L1106:
	.align	2, 0
.L1105:
	.word	gBattleMons
	.word	sBattler_AI
	.word	gBattlerTarget
.L1093:
	add	r0, r4, #0x6
	str	r0, [r5]
.L1085:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 Cmd_if_level_cond,.Lfe108-Cmd_if_level_cond
	.align	2, 0
	.type	 Cmd_if_target_taunted,function
	.thumb_func
Cmd_if_target_taunted:
	push	{lr}
	ldr	r2, .L1110
	ldr	r0, .L1110+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	beq	.L1108	@cond_branch
	ldr	r3, .L1110+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1109
.L1111:
	.align	2, 0
.L1110:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1108:
	ldr	r1, .L1112
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1109:
	pop	{r0}
	bx	r0
.L1113:
	.align	2, 0
.L1112:
	.word	gAIScriptPtr
.Lfe109:
	.size	 Cmd_if_target_taunted,.Lfe109-Cmd_if_target_taunted
	.align	2, 0
	.type	 Cmd_if_target_not_taunted,function
	.thumb_func
Cmd_if_target_not_taunted:
	push	{lr}
	ldr	r2, .L1117
	ldr	r0, .L1117+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L1115	@cond_branch
	ldr	r3, .L1117+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1116
.L1118:
	.align	2, 0
.L1117:
	.word	gDisableStructs
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1115:
	ldr	r1, .L1119
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1116:
	pop	{r0}
	bx	r0
.L1120:
	.align	2, 0
.L1119:
	.word	gAIScriptPtr
.Lfe110:
	.size	 Cmd_if_target_not_taunted,.Lfe110-Cmd_if_target_not_taunted
	.align	2, 0
	.type	 Cmd_if_target_is_ally,function
	.thumb_func
Cmd_if_target_is_ally:
	push	{lr}
	ldr	r0, .L1124
	ldrb	r3, [r0]
	mov	r0, #0x1
	ldr	r1, .L1124+0x4
	ldrb	r2, [r1]
	add	r1, r0, #0
	and	r1, r1, r3
	and	r0, r0, r2
	cmp	r1, r0
	bne	.L1122	@cond_branch
	ldr	r3, .L1124+0x8
	ldr	r2, [r3]
	ldrb	r1, [r2, #0x1]
	ldrb	r0, [r2, #0x2]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r3]
	b	.L1123
.L1125:
	.align	2, 0
.L1124:
	.word	sBattler_AI
	.word	gBattlerTarget
	.word	gAIScriptPtr
.L1122:
	ldr	r1, .L1126
	ldr	r0, [r1]
	add	r0, r0, #0x5
	str	r0, [r1]
.L1123:
	pop	{r0}
	bx	r0
.L1127:
	.align	2, 0
.L1126:
	.word	gAIScriptPtr
.Lfe111:
	.size	 Cmd_if_target_is_ally,.Lfe111-Cmd_if_target_is_ally
	.align	2, 0
	.type	 Cmd_if_flash_fired,function
	.thumb_func
Cmd_if_flash_fired:
	push	{r4, lr}
	ldr	r4, .L1131
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	BattleAI_GetWantedBattler
	lsl	r0, r0, #0x18
	ldr	r1, .L1131+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	lsr	r0, r0, #0x16
	add	r1, r1, r0
	ldr	r0, [r1]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1129	@cond_branch
	ldr	r2, [r4]
	ldrb	r1, [r2, #0x2]
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x4]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x18
	orr	r1, r1, r0
	str	r1, [r4]
	b	.L1130
.L1132:
	.align	2, 0
.L1131:
	.word	gAIScriptPtr
	.word	gBattleResources
.L1129:
	ldr	r0, [r4]
	add	r0, r0, #0x6
	str	r0, [r4]
.L1130:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 Cmd_if_flash_fired,.Lfe112-Cmd_if_flash_fired
	.align	2, 0
	.type	 AIStackPushVar,function
	.thumb_func
AIStackPushVar:
	push	{r4, lr}
	ldr	r1, .L1134
	ldr	r1, [r1]
	ldr	r3, [r1, #0x1c]
	add	r4, r3, #0
	add	r4, r4, #0x20
	ldrb	r1, [r4]
	add	r2, r1, #0x1
	strb	r2, [r4]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x16
	add	r3, r3, r1
	str	r0, [r3]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1135:
	.align	2, 0
.L1134:
	.word	gBattleResources
.Lfe113:
	.size	 AIStackPushVar,.Lfe113-AIStackPushVar
	.align	2, 0
	.type	 AIStackPushVar_cursor,function
	.thumb_func
AIStackPushVar_cursor:
	ldr	r0, .L1137
	ldr	r0, [r0]
	ldr	r2, [r0, #0x1c]
	add	r3, r2, #0
	add	r3, r3, #0x20
	ldrb	r0, [r3]
	add	r1, r0, #0x1
	strb	r1, [r3]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r2, r2, r0
	ldr	r0, .L1137+0x4
	ldr	r0, [r0]
	str	r0, [r2]
	bx	lr
.L1138:
	.align	2, 0
.L1137:
	.word	gBattleResources
	.word	gAIScriptPtr
.Lfe114:
	.size	 AIStackPushVar_cursor,.Lfe114-AIStackPushVar_cursor
	.align	2, 0
	.type	 AIStackPop,function
	.thumb_func
AIStackPop:
	push	{lr}
	ldr	r3, .L1143
	ldr	r0, [r3]
	ldr	r0, [r0, #0x1c]
	add	r1, r0, #0
	add	r1, r1, #0x20
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L1140	@cond_branch
	mov	r0, #0x0
	b	.L1142
.L1144:
	.align	2, 0
.L1143:
	.word	gBattleResources
.L1140:
	sub	r0, r0, #0x1
	strb	r0, [r1]
	ldr	r2, .L1145
	ldr	r0, [r3]
	ldr	r1, [r0, #0x1c]
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [r2]
	mov	r0, #0x1
.L1142:
	pop	{r1}
	bx	r1
.L1146:
	.align	2, 0
.L1145:
	.word	gAIScriptPtr
.Lfe115:
	.size	 AIStackPop,.Lfe115-AIStackPop
.text
	.align	2, 0

