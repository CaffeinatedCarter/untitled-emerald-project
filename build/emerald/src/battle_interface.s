@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sUnknown_0832C138,object
	.size	 sUnknown_0832C138,8
sUnknown_0832C138:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sHealthboxPlayerSpriteTemplates,object
	.size	 sHealthboxPlayerSpriteTemplates,48
sHealthboxPlayerSpriteTemplates:
	.short	0xd6ff
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd700
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sHealthboxOpponentSpriteTemplates,object
	.size	 sHealthboxOpponentSpriteTemplates,48
sHealthboxOpponentSpriteTemplates:
	.short	0xd701
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd702
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sHealthboxSafariSpriteTemplate,object
	.size	 sHealthboxSafariSpriteTemplate,24
sHealthboxSafariSpriteTemplate:
	.short	0xd70b
	.short	0xd6ff
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sOamData_Healthbar,object
	.size	 sOamData_Healthbar,8
sOamData_Healthbar:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sHealthbarSpriteTemplates,object
	.size	 sHealthbarSpriteTemplates,96
sHealthbarSpriteTemplates:
	.short	0xd704
	.short	0xd704
	.word	sOamData_Healthbar
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd705
	.short	0xd704
	.word	sOamData_Healthbar
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd706
	.short	0xd704
	.word	sOamData_Healthbar
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.short	0xd707
	.short	0xd704
	.word	sOamData_Healthbar
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_HealthBar
	.align	2, 0
	.type	 sUnknown_0832C220,object
	.size	 sUnknown_0832C220,20
sUnknown_0832C220:
	.byte	-0x10
	.byte	0x0
	.byte	0xd
	.byte	0x40
	.byte	0x30
	.byte	0x0
	.byte	0x8
	.byte	0x42
	.byte	-0x10
	.byte	0x20
	.byte	0x5
	.byte	0x43
	.byte	0x10
	.byte	0x20
	.byte	0x45
	.byte	0x43
	.byte	0x30
	.byte	0x20
	.byte	0x85
	.byte	0x43
	.align	2, 0
	.type	 sUnknown_0832C234,object
	.size	 sUnknown_0832C234,20
sUnknown_0832C234:
	.byte	-0x10
	.byte	0x0
	.byte	0xd
	.byte	0x44
	.byte	0x30
	.byte	0x0
	.byte	0x8
	.byte	0x46
	.byte	-0x10
	.byte	0x20
	.byte	0x5
	.byte	0x47
	.byte	0x10
	.byte	0x20
	.byte	0x45
	.byte	0x47
	.byte	0x30
	.byte	0x20
	.byte	0x85
	.byte	0x47
	.align	2, 0
	.type	 sUnknown_0832C248,object
	.size	 sUnknown_0832C248,8
sUnknown_0832C248:
	.byte	-0x10
	.byte	0x0
	.byte	0xd
	.byte	0x40
	.byte	0x30
	.byte	0x0
	.byte	0x8
	.byte	0x42
	.align	2, 0
	.type	 sUnknown_0832C250,object
	.size	 sUnknown_0832C250,8
sUnknown_0832C250:
	.byte	-0x10
	.byte	0x0
	.byte	0xd
	.byte	0x40
	.byte	0x30
	.byte	0x0
	.byte	0x8
	.byte	0x42
	.align	2, 0
	.type	 sUnknown_0832C258,object
	.size	 sUnknown_0832C258,8
sUnknown_0832C258:
	.byte	-0x10
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	0x10
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.align	2, 0
	.type	 sUnknown_0832C260,object
	.size	 sUnknown_0832C260,12
sUnknown_0832C260:
	.byte	-0x10
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	0x10
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x80
	.byte	0x40
	.align	2, 0
	.type	 sUnknown_0832C26C,object
sUnknown_0832C26C:
	.byte	0x5
	.space	3
	.word	sUnknown_0832C220
	.byte	0x2
	.space	3
	.word	sUnknown_0832C248
	.byte	0x5
	.space	3
	.word	sUnknown_0832C234
	.byte	0x2
	.space	3
	.word	sUnknown_0832C250
	.size	 sUnknown_0832C26C,32
	.align	2, 0
	.type	 sUnknown_0832C28C,object
sUnknown_0832C28C:
	.byte	0x2
	.space	3
	.word	sUnknown_0832C258
	.byte	0x3
	.space	3
	.word	sUnknown_0832C260
	.size	 sUnknown_0832C28C,16
	.align	2, 0
	.type	 sStatusSummaryBar_Subsprites_0,object
	.size	 sStatusSummaryBar_Subsprites_0,16
sStatusSummaryBar_Subsprites_0:
	.byte	-0x60
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	-0x40
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0xc5
	.byte	0x40
	.align	2, 0
	.type	 sUnknown_0832C2AC,object
	.size	 sUnknown_0832C2AC,24
sUnknown_0832C2AC:
	.byte	-0x60
	.byte	0x0
	.byte	0x5
	.byte	0x40
	.byte	-0x40
	.byte	0x0
	.byte	0x45
	.byte	0x40
	.byte	-0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x20
	.byte	0x0
	.byte	0x85
	.byte	0x40
	.byte	0x40
	.byte	0x0
	.byte	0xc5
	.byte	0x40
	.align	2, 0
	.type	 sStatusSummaryBar_SubspriteTable,object
sStatusSummaryBar_SubspriteTable:
	.byte	0x4
	.space	3
	.word	sStatusSummaryBar_Subsprites_0
	.size	 sStatusSummaryBar_SubspriteTable,8
	.align	2, 0
	.type	 sUnknown_0832C2CC,object
sUnknown_0832C2CC:
	.byte	0x6
	.space	3
	.word	sUnknown_0832C2AC
	.size	 sUnknown_0832C2CC,8
	.type	 sUnknown_0832C2D4,object
sUnknown_0832C2D4:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x17
	.byte	0x77
	.byte	0x77
	.byte	0x17
	.byte	0x77
	.byte	0x71
	.byte	0x77
	.byte	0x77
	.byte	0x71
	.byte	0x77
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x33
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x44
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x77
	.byte	0x11
	.byte	0x71
	.byte	0x77
	.byte	0x77
	.byte	0x71
	.byte	0x71
	.byte	0x77
	.byte	0x77
	.byte	0x11
	.byte	0x71
	.size	 sUnknown_0832C2D4,96
	.align	2, 0
	.type	 sStatusSummaryBarSpriteSheet,object
	.size	 sStatusSummaryBarSpriteSheet,8
sStatusSummaryBarSpriteSheet:
	.word	gBattleInterface_BallStatusBarGfx
	.short	0x200
	.short	0xd70c
	.align	2, 0
	.type	 sStatusSummaryBarSpritePal,object
	.size	 sStatusSummaryBarSpritePal,8
sStatusSummaryBarSpritePal:
	.word	gBattleInterface_BallStatusBarPal
	.short	0xd710
	.space	2
	.align	2, 0
	.type	 sStatusSummaryBallsSpritePal,object
	.size	 sStatusSummaryBallsSpritePal,8
sStatusSummaryBallsSpritePal:
	.word	gBattleInterface_BallDisplayPal
	.short	0xd712
	.space	2
	.align	2, 0
	.type	 sStatusSummaryBallsSpriteSheet,object
	.size	 sStatusSummaryBallsSpriteSheet,8
sStatusSummaryBallsSpriteSheet:
	.word	gBattleInterface_BallDisplayGfx
	.short	0x80
	.short	0xd714
	.align	2, 0
	.type	 sUnknown_0832C354,object
	.size	 sUnknown_0832C354,8
sUnknown_0832C354:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sOamData_StatusSummaryBalls,object
	.size	 sOamData_StatusSummaryBalls,8
sOamData_StatusSummaryBalls:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x4
	.short	0x0
	.align	2, 0
	.type	 sStatusSummaryBarSpriteTemplates,object
	.size	 sStatusSummaryBarSpriteTemplates,48
sStatusSummaryBarSpriteTemplates:
	.short	0xd70c
	.short	0xd710
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBar
	.short	0xd70c
	.short	0xd710
	.word	sUnknown_0832C138
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBar
	.align	2, 0
	.type	 sStatusSummaryBallsSpriteTemplates,object
	.size	 sStatusSummaryBallsSpriteTemplates,48
sStatusSummaryBallsSpriteTemplates:
	.short	0xd714
	.short	0xd712
	.word	sOamData_StatusSummaryBalls
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBallsOnBattleStart
	.short	0xd714
	.short	0xd712
	.word	sOamData_StatusSummaryBalls
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCB_StatusSummaryBallsOnBattleStart
	.type	 sUnknown_0832C3C4,object
sUnknown_0832C3C4:
	.byte	0xfc
	.byte	0x1
	.byte	0x1
	.byte	0xfc
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnknown_0832C3C4,20
	.type	 sUnknown_0832C3D8,object
sUnknown_0832C3D8:
	.byte	0xfc
	.byte	0x1
	.byte	0x1
	.byte	0xfc
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnknown_0832C3D8,20
	.align	1, 0
	.type	 sStatusIconColors,object
sStatusIconColors:
	.short	0x6198
	.short	0xef7
	.short	0x4694
	.short	0x72d1
	.short	0x29dc
	.size	 sStatusIconColors,10
	.align	2, 0
	.type	 sHealthboxWindowTemplate,object
	.size	 sHealthboxWindowTemplate,8
sHealthboxWindowTemplate:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x2
	.byte	0x0
	.short	0x0
.text
	.align	2, 0
	.type	 DummiedOutFunction,function
	.thumb_func
DummiedOutFunction:
	mov	r0, #0x9
	bx	lr
.Lfe1:
	.size	 DummiedOutFunction,.Lfe1-DummiedOutFunction
	.align	2, 0
	.globl	sub_8072308
	.type	 sub_8072308,function
	.thumb_func
sub_8072308:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r7, r1, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	sl, r2
	mov	r3, #0x0
	mov	r2, #0x0
.L7:
	lsl	r0, r3, #0x18
	asr	r0, r0, #0x18
	mov	r3, sp
	add	r1, r3, r0
	strb	r2, [r1]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L7	@cond_branch
	mov	r3, #0x3
	mov	r0, #0x1
	neg	r0, r0
	mov	r9, r0
	mov	r8, sp
.L9:
	lsl	r0, r5, #0x10
	asr	r6, r0, #0x10
	cmp	r6, #0
	ble	.L12	@cond_branch
	lsl	r4, r3, #0x18
	asr	r4, r4, #0x18
	mov	r1, sp
	add	r5, r1, r4
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__modsi3
	strb	r0, [r5]
	add	r0, r6, #0
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	sub	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	b	.L9
.L12:
	lsl	r1, r3, #0x18
	asr	r0, r1, #0x18
	cmp	r0, r9
	ble	.L15	@cond_branch
	mov	r4, #0xff
	mov	r3, #0x1
	neg	r3, r3
.L17:
	asr	r2, r1, #0x18
	mov	r5, sp
	add	r1, r5, r2
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	sub	r2, r2, #0x1
	lsl	r1, r2, #0x18
	asr	r0, r1, #0x18
	cmp	r0, r3
	bgt	.L17	@cond_branch
.L15:
	mov	r1, r8
	ldrb	r0, [r1, #0x3]
	cmp	r0, #0xff
	bne	.L10	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x3]
.L10:
	mov	r2, sl
	cmp	r2, #0
	bne	.L21	@cond_branch
	mov	r3, #0x0
	mov	r1, #0x0
	mov	r6, #0xfc
	lsl	r6, r6, #0x8
	mov	r5, #0x1e
	mov	ip, r5
.L25:
	lsl	r1, r1, #0x18
	asr	r2, r1, #0x18
	mov	r0, sp
	add	r5, r0, r2
	ldrb	r0, [r5]
	mov	r8, r1
	cmp	r0, #0xff
	bne	.L26	@cond_branch
	lsl	r1, r2, #0x1
	add	r1, r1, r7
	ldrh	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r2, ip
	orr	r0, r0, r2
	strh	r0, [r1]
	lsl	r3, r3, #0x18
	asr	r1, r3, #0x17
	add	r1, r1, r7
	add	r1, r1, #0x40
	ldrh	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	mov	r5, ip
	orr	r0, r0, r5
	strh	r0, [r1]
	b	.L27
.L26:
	lsl	r2, r2, #0x1
	add	r2, r2, r7
	ldrh	r0, [r2]
	add	r1, r6, #0
	and	r1, r1, r0
	ldrb	r0, [r5]
	add	r0, r0, #0x14
	orr	r1, r1, r0
	strh	r1, [r2]
	lsl	r4, r3, #0x18
	asr	r3, r4, #0x18
	lsl	r2, r3, #0x1
	add	r2, r2, r7
	add	r2, r2, #0x40
	ldrh	r0, [r2]
	add	r1, r6, #0
	and	r1, r1, r0
	mov	r5, sp
	add	r0, r5, r3
	ldrb	r0, [r0]
	add	r0, r0, #0x34
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r3, r4, #0
.L27:
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r0, r0, r8
	lsr	r1, r0, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r3, r2
	lsr	r3, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L25	@cond_branch
	b	.L29
.L21:
	mov	r3, #0x0
	mov	r4, #0xfc
	lsl	r4, r4, #0x8
	mov	r6, #0x1e
.L33:
	lsl	r1, r3, #0x18
	asr	r2, r1, #0x18
	mov	r3, sp
	add	r5, r3, r2
	ldrb	r0, [r5]
	add	r3, r1, #0
	cmp	r0, #0xff
	bne	.L34	@cond_branch
	lsl	r1, r2, #0x1
	add	r1, r1, r7
	ldrh	r2, [r1]
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r6
	strh	r0, [r1]
	add	r1, r1, #0x40
	ldrh	r2, [r1]
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r0, r0, r6
	strh	r0, [r1]
	b	.L32
.L34:
	lsl	r2, r2, #0x1
	add	r2, r2, r7
	ldrh	r0, [r2]
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r0, [r5]
	add	r0, r0, #0x14
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r2, r2, #0x40
	ldrh	r0, [r2]
	add	r1, r4, #0
	and	r1, r1, r0
	ldrb	r0, [r5]
	add	r0, r0, #0x34
	orr	r1, r1, r0
	strh	r1, [r2]
.L32:
	mov	r5, #0x80
	lsl	r5, r5, #0x11
	add	r0, r3, r5
	lsr	r3, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L33	@cond_branch
.L29:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 sub_8072308,.Lfe2-sub_8072308
	.align	2, 0
	.globl	sub_80724A8
	.type	 sub_80724A8,function
	.thumb_func
sub_80724A8:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	add	r5, r2, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, #0x1e
	strh	r1, [r5, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r1, r5, #0
	mov	r2, #0x0
	bl	sub_8072308
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	add	r5, r5, #0xa
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x1
	bl	sub_8072308
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 sub_80724A8,.Lfe3-sub_80724A8
	.align	2, 0
	.globl	CreateBattlerHealthboxSprites
	.type	 CreateBattlerHealthboxSprites,function
	.thumb_func
CreateBattlerHealthboxSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, #0x0
	str	r0, [sp]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L39	@cond_branch
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L40	@cond_branch
	ldr	r4, .L46
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L46+0x4
	lsl	r1, r6, #0x4
	add	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r3, #0x3f
	add	r0, r3, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r0, [r2, #0x1]
	and	r3, r3, r0
	strb	r3, [r2, #0x1]
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x40
	ldr	r4, .L46+0x8
	add	r0, r4, #0
	and	r1, r1, r0
	ldr	r0, .L46+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	b	.L41
.L47:
	.align	2, 0
.L46:
	.word	sHealthboxPlayerSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L40:
	ldr	r4, .L48
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L48+0x4
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r2, r2, r0
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L48+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L48+0xc
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	mov	r0, #0x2
	str	r0, [sp]
.L41:
	ldr	r2, .L48+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r7, [r0, #0x6]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	strh	r6, [r1, #0x38]
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L48+0x10
	str	r1, [r0]
	b	.L42
.L49:
	.align	2, 0
.L48:
	.word	sHealthboxOpponentSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.L39:
	mov	r0, sl
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L43	@cond_branch
	mov	r0, sl
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, .L50
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, sl
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L50+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r7, [r0, #0x6]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r3, r2, r4
	strh	r6, [r3, #0x38]
	ldrh	r1, [r3, #0x4]
	mov	r8, r1
	mov	r5, r8
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L50+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L50+0xc
	mov	r5, r8
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L50+0x10
	str	r0, [r2]
	mov	r0, #0x1
	b	.L45
.L51:
	.align	2, 0
.L50:
	.word	sHealthboxPlayerSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.L43:
	mov	r0, sl
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, .L52
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, sl
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x19
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L52+0x4
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r7, [r0, #0x6]
	lsl	r2, r7, #0x4
	add	r2, r2, r7
	lsl	r2, r2, #0x2
	add	r3, r2, r4
	strh	r6, [r3, #0x38]
	ldrh	r1, [r3, #0x4]
	mov	r8, r1
	mov	r5, r8
	lsl	r1, r5, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x20
	ldr	r5, .L52+0x8
	add	r0, r5, #0
	and	r1, r1, r0
	ldr	r0, .L52+0xc
	mov	r5, r8
	and	r0, r0, r5
	orr	r0, r0, r1
	strh	r0, [r3, #0x4]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L52+0x10
	str	r0, [r2]
	mov	r0, #0x2
.L45:
	str	r0, [sp]
.L42:
	ldr	r0, .L52+0x14
	add	r0, r0, sl
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r1, .L52+0x18
	add	r0, r0, r1
	mov	r1, #0x8c
	mov	r2, #0x3c
	mov	r3, #0x0
	bl	CreateSpriteAtEnd
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r1, .L52+0x4
	mov	r8, r1
	add	r4, r4, r8
	mov	r0, sl
	bl	GetBattlerSide
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x15
	ldr	r0, .L52+0x1c
	add	r1, r1, r0
	add	r0, r4, #0
	bl	SetSubspriteTables
	add	r2, r4, #0
	add	r2, r2, #0x42
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r2, #0x4
	mov	r9, r2
	mov	r1, r9
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x1
	bl	GetHealthboxElementGfxPtr
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L52+0x20
	add	r1, r1, r2
	ldr	r2, .L52+0x24
	bl	CpuSet
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	strh	r5, [r0, #0x38]
	mov	r2, sl
	strh	r2, [r0, #0x3a]
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r5, r9
	orr	r1, r1, r5
	strb	r1, [r0]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r5
	strb	r1, [r0]
	strh	r6, [r4, #0x38]
	mov	r0, sp
	ldrh	r0, [r0]
	strh	r0, [r4, #0x3a]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	orr	r0, r0, r5
	strb	r0, [r4]
	add	r0, r6, #0
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L53:
	.align	2, 0
.L52:
	.word	sHealthboxOpponentSpriteTemplates
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
	.word	gBattlerPositions
	.word	sHealthbarSpriteTemplates
	.word	sUnknown_0832C28C
	.word	0x6010000
	.word	0x4000010
.Lfe4:
	.size	 CreateBattlerHealthboxSprites,.Lfe4-CreateBattlerHealthboxSprites
	.align	2, 0
	.globl	CreateSafariPlayerHealthboxSprites
	.type	 CreateSafariPlayerHealthboxSprites,function
	.thumb_func
CreateSafariPlayerHealthboxSprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r4, .L55
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSprite
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	add	r0, r4, #0
	mov	r1, #0xf0
	mov	r2, #0xa0
	mov	r3, #0x1
	bl	CreateSpriteAtEnd
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L55+0x4
	mov	r9, r1
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	ldrb	r3, [r4, #0x1]
	mov	r2, #0x3f
	add	r1, r2, #0
	and	r1, r1, r3
	strb	r1, [r4, #0x1]
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	mov	r7, r9
	add	r5, r3, r7
	ldrb	r1, [r5, #0x1]
	and	r2, r2, r1
	strb	r2, [r5, #0x1]
	ldrh	r1, [r5, #0x4]
	mov	r8, r1
	mov	r7, r8
	lsl	r2, r7, #0x16
	lsr	r2, r2, #0x16
	add	r2, r2, #0x40
	ldr	r7, .L55+0x8
	add	r1, r7, #0
	and	r2, r2, r1
	ldr	r1, .L55+0xc
	mov	r7, r8
	and	r1, r1, r7
	orr	r1, r1, r2
	strh	r1, [r5, #0x4]
	strh	r0, [r4, #0x6]
	strh	r6, [r5, #0x38]
	mov	r0, #0x1c
	add	r9, r9, r0
	add	r3, r3, r9
	ldr	r0, .L55+0x10
	str	r0, [r3]
	add	r0, r6, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L56:
	.align	2, 0
.L55:
	.word	sHealthboxSafariSpriteTemplate
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	SpriteCB_HealthBoxOther
.Lfe5:
	.size	 CreateSafariPlayerHealthboxSprites,.Lfe5-CreateSafariPlayerHealthboxSprites
	.align	2, 0
	.type	 GetHealthboxElementGfxPtr,function
	.thumb_func
GetHealthboxElementGfxPtr:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x13
	ldr	r1, .L58
	add	r0, r0, r1
	bx	lr
.L59:
	.align	2, 0
.L58:
	.word	gHealthboxElementsGfxTable
.Lfe6:
	.size	 GetHealthboxElementGfxPtr,.Lfe6-GetHealthboxElementGfxPtr
	.align	2, 0
	.type	 SpriteCB_HealthBar,function
	.thumb_func
SpriteCB_HealthBar:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r1, #0x3a
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L63	@cond_branch
	cmp	r0, #0x1
	bgt	.L65	@cond_branch
	cmp	r0, #0
	bne	.L65	@cond_branch
	ldr	r2, .L69
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x10
	b	.L68
.L70:
	.align	2, 0
.L69:
	.word	gSprites
.L63:
	ldr	r2, .L71
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x10
	b	.L68
.L72:
	.align	2, 0
.L71:
	.word	gSprites
.L65:
	ldr	r2, .L73
	lsl	r3, r5, #0x4
	add	r1, r3, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x8
.L68:
	strh	r0, [r4, #0x20]
	ldrh	r0, [r1, #0x22]
	strh	r0, [r4, #0x22]
	add	r0, r3, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r0, #0x24]
	strh	r1, [r4, #0x24]
	ldrh	r0, [r0, #0x26]
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	gSprites
.Lfe7:
	.size	 SpriteCB_HealthBar,.Lfe7-SpriteCB_HealthBar
	.align	2, 0
	.type	 SpriteCB_HealthBoxOther,function
	.thumb_func
SpriteCB_HealthBoxOther:
	ldrh	r1, [r0, #0x38]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r3, .L76
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrh	r1, [r2, #0x20]
	add	r1, r1, #0x40
	strh	r1, [r0, #0x20]
	ldrh	r1, [r2, #0x22]
	strh	r1, [r0, #0x22]
	ldrh	r1, [r2, #0x24]
	strh	r1, [r0, #0x24]
	ldrh	r1, [r2, #0x26]
	strh	r1, [r0, #0x26]
	bx	lr
.L77:
	.align	2, 0
.L76:
	.word	gSprites
.Lfe8:
	.size	 SpriteCB_HealthBoxOther,.Lfe8-SpriteCB_HealthBoxOther
	.align	2, 0
	.globl	SetBattleBarStruct
	.type	 SetBattleBarStruct,function
	.thumb_func
SetBattleBarStruct:
	push	{r4, r5, r6, r7, lr}
	ldr	r7, [sp, #0x14]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r6, .L79
	ldr	r4, [r6]
	ldr	r5, [r4, #0xc]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r5, r4, r5
	strb	r1, [r5]
	ldr	r0, [r6]
	ldr	r0, [r0, #0xc]
	add	r4, r4, r0
	str	r2, [r4, #0x4]
	str	r3, [r4, #0x8]
	str	r7, [r4, #0xc]
	ldr	r0, .L79+0x4
	str	r0, [r4, #0x10]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L80:
	.align	2, 0
.L79:
	.word	gBattleSpritesDataPtr
	.word	-0x8000
.Lfe9:
	.size	 SetBattleBarStruct,.Lfe9-SetBattleBarStruct
	.align	2, 0
	.globl	SetHealthboxSpriteInvisible
	.type	 SetHealthboxSpriteInvisible,function
	.thumb_func
SetHealthboxSpriteInvisible:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L82
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	add	r1, r2, #0
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r3, #0x4
	orr	r0, r0, r3
	strb	r0, [r1]
	mov	r0, #0x38
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	ldrh	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r3
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gSprites
.Lfe10:
	.size	 SetHealthboxSpriteInvisible,.Lfe10-SetHealthboxSpriteInvisible
	.align	2, 0
	.globl	SetHealthboxSpriteVisible
	.type	 SetHealthboxSpriteVisible,function
	.thumb_func
SetHealthboxSpriteVisible:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L85
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	add	r4, r2, #0
	add	r4, r4, #0x3e
	ldrb	r1, [r4]
	mov	r3, #0x5
	neg	r3, r3
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x38
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r4, [r0]
	add	r1, r3, #0
	and	r1, r1, r4
	strb	r1, [r0]
	ldrh	r1, [r2, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	gSprites
.Lfe11:
	.size	 SetHealthboxSpriteVisible,.Lfe11-SetHealthboxSpriteVisible
	.align	2, 0
	.type	 UpdateSpritePos,function
	.thumb_func
UpdateSpritePos:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L88
	lsl	r3, r0, #0x4
	add	r3, r3, r0
	lsl	r3, r3, #0x2
	add	r3, r3, r4
	strh	r1, [r3, #0x20]
	strh	r2, [r3, #0x22]
	pop	{r4}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	gSprites
.Lfe12:
	.size	 UpdateSpritePos,.Lfe12-UpdateSpritePos
	.align	2, 0
	.globl	DestoryHealthboxSprite
	.type	 DestoryHealthboxSprite,function
	.thumb_func
DestoryHealthboxSprite:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L91
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r5
	ldrh	r1, [r4, #0x6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	mov	r0, #0x38
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r0, r4, #0
	bl	DestroySprite
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L92:
	.align	2, 0
.L91:
	.word	gSprites
.Lfe13:
	.size	 DestoryHealthboxSprite,.Lfe13-DestoryHealthboxSprite
	.align	2, 0
	.globl	DummyBattleInterfaceFunc
	.type	 DummyBattleInterfaceFunc,function
	.thumb_func
DummyBattleInterfaceFunc:
	bx	lr
.Lfe14:
	.size	 DummyBattleInterfaceFunc,.Lfe14-DummyBattleInterfaceFunc
	.align	2, 0
	.globl	UpdateOamPriorityInAllHealthboxes
	.type	 UpdateOamPriorityInAllHealthboxes,function
	.thumb_func
UpdateOamPriorityInAllHealthboxes:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	ldr	r1, .L100
	mov	r8, r1
	ldrb	r2, [r1]
	cmp	r6, r2
	bge	.L96	@cond_branch
	ldr	r1, .L100+0x4
	mov	ip, r1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r5, r0, #0x2
	mov	r7, #0xd
	neg	r7, r7
	ldr	r2, .L100+0x8
	mov	r9, r2
.L98:
	mov	r1, r9
	add	r0, r6, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r4, [r1, #0x6]
	ldrh	r3, [r1, #0x38]
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, ip
	ldrb	r2, [r1, #0x5]
	add	r0, r7, #0
	and	r0, r0, r2
	orr	r0, r0, r5
	strb	r0, [r1, #0x5]
	add	r6, r6, #0x1
	mov	r2, r8
	ldrb	r2, [r2]
	cmp	r6, r2
	blt	.L98	@cond_branch
.L96:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gBattlersCount
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe15:
	.size	 UpdateOamPriorityInAllHealthboxes,.Lfe15-UpdateOamPriorityInAllHealthboxes
	.align	2, 0
	.globl	InitBattlerHealthboxCoords
	.type	 InitBattlerHealthboxCoords,function
	.thumb_func
InitBattlerHealthboxCoords:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r5, #0x0
	mov	r4, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L103	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L104	@cond_branch
	mov	r5, #0x2c
	mov	r4, #0x1e
	b	.L106
.L104:
	mov	r5, #0x9e
	mov	r4, #0x58
	b	.L106
.L103:
	add	r0, r6, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L110	@cond_branch
	cmp	r0, #0x1
	bgt	.L114	@cond_branch
	cmp	r0, #0
	beq	.L108	@cond_branch
	b	.L106
.L114:
	cmp	r0, #0x2
	beq	.L109	@cond_branch
	cmp	r0, #0x3
	beq	.L111	@cond_branch
	b	.L106
.L108:
	mov	r5, #0x9f
	mov	r4, #0x4c
	b	.L106
.L109:
	mov	r5, #0xab
	mov	r4, #0x65
	b	.L106
.L110:
	mov	r5, #0x2c
	mov	r4, #0x13
	b	.L106
.L111:
	mov	r5, #0x20
	mov	r4, #0x2c
.L106:
	ldr	r0, .L115
	add	r0, r6, r0
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r2, r4, #0
	bl	UpdateSpritePos
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	gHealthboxSpriteIds
.Lfe16:
	.size	 InitBattlerHealthboxCoords,.Lfe16-InitBattlerHealthboxCoords
	.align	2, 0
	.type	 UpdateLvlInHealthbox,function
	.thumb_func
UpdateLvlInHealthbox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, sp, #0x4
	mov	r0, #0xf9
	strb	r0, [r2]
	mov	r0, #0x5
	strb	r0, [r2, #0x1]
	mov	r0, sp
	add	r0, r0, #0x6
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r1, r0, #0
	sub	r1, r1, #0x2
	add	r0, sp, #0x4
	sub	r1, r1, r0
	mov	r0, #0x3
	sub	r0, r0, r1
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	add	r0, sp, #0x14
	str	r0, [sp]
	add	r0, sp, #0x4
	mov	r2, #0x3
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldr	r0, .L122
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r4, r0, #0x11
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L118	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	ldr	r2, .L122+0x4
	add	r1, r4, r2
	cmp	r0, #0
	bne	.L121	@cond_branch
	ldr	r0, .L122+0x8
	add	r1, r4, r0
	b	.L121
.L123:
	.align	2, 0
.L122:
	.word	gSprites
	.word	0x6010420
	.word	0x6010820
.L118:
	ldr	r2, .L124
	add	r1, r4, r2
.L121:
	add	r0, r1, #0
	add	r1, r5, #0
	mov	r2, #0x3
	bl	TextIntoHealthboxObject
	ldr	r0, [sp, #0x14]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L125:
	.align	2, 0
.L124:
	.word	0x6010400
.Lfe17:
	.size	 UpdateLvlInHealthbox,.Lfe17-UpdateLvlInHealthbox
	.align	2, 0
	.globl	UpdateHpTextInHealthbox
	.type	 UpdateHpTextInHealthbox,function
	.thumb_func
UpdateHpTextInHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x28
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r1, .L146
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L127	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L127	@cond_branch
	ldrh	r0, [r4, #0x4]
	lsl	r0, r0, #0x16
	lsr	r5, r0, #0x11
	mov	r0, r8
	cmp	r0, #0
	beq	.L128	@cond_branch
	mov	r2, r9
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x4
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r0, sp, #0x24
	str	r0, [sp]
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x5
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r4, r0, #0
	ldr	r1, .L146+0x4
	add	r0, r5, r1
	add	r1, r4, #0
	b	.L145
.L147:
	.align	2, 0
.L146:
	.word	gSprites
	.word	0x6010b40
.L128:
	mov	r2, r9
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x4
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r1, sp, #0x4
	mov	r0, #0xba
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	add	r0, sp, #0x24
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x4
	mov	r2, #0x5
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r4, r0, #0
	ldr	r1, .L148
	add	r0, r5, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	HpTextIntoHealthboxObject
	ldr	r2, .L148+0x4
	add	r0, r5, r2
	add	r1, r4, #0
	add	r1, r1, #0x20
.L145:
	mov	r2, #0x2
	bl	HpTextIntoHealthboxObject
	ldr	r0, [sp, #0x24]
	bl	RemoveWindowOnHealthbox
	b	.L130
.L149:
	.align	2, 0
.L148:
	.word	0x60103e0
	.word	0x6010b00
.L127:
	ldr	r1, .L150
	add	r0, sp, #0x4
	mov	r2, #0x14
	bl	memcpy
	ldr	r1, .L150+0x4
	lsl	r4, r7, #0x4
	add	r0, r4, r7
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	ldrh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r4
	cmp	r0, #0x1
	beq	.L132	@cond_branch
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L131	@cond_branch
.L132:
	mov	r0, r9
	lsl	r1, r0, #0x10
	asr	r1, r1, #0x10
	add	r0, r7, #0
	mov	r2, r8
	bl	UpdateHpTextInHealthboxInDoubles
	b	.L130
.L151:
	.align	2, 0
.L150:
	.word	sUnknown_0832C3C4
	.word	gSprites
.L131:
	ldrh	r0, [r6, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L134	@cond_branch
	mov	r6, #0x59
	mov	r1, r8
	cmp	r1, #0
	bne	.L137	@cond_branch
	mov	r6, #0x1d
	b	.L137
.L134:
	mov	r6, #0x30
	mov	r2, r8
	cmp	r2, #0
	bne	.L137	@cond_branch
	mov	r6, #0x14
.L137:
	mov	r0, sp
	add	r0, r0, #0xa
	mov	r2, r9
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L152
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x9
	add	r2, sp, #0x4
	bl	RenderTextFont9
	mov	r4, #0x0
	ldr	r1, .L152+0x4
	mov	r2, sl
	add	r0, r2, r7
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L143:
	ldr	r0, .L152
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r1, r4, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r6
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r2, .L152+0x8
	add	r1, r1, r2
	ldr	r2, .L152+0xc
	bl	CpuSet
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L143	@cond_branch
.L130:
	add	sp, sp, #0x28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L153:
	.align	2, 0
.L152:
	.word	gMonSpritesGfxPtr
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.Lfe18:
	.size	 UpdateHpTextInHealthbox,.Lfe18-UpdateHpTextInHealthbox
	.align	2, 0
	.type	 UpdateHpTextInHealthboxInDoubles,function
	.thumb_func
UpdateHpTextInHealthboxInDoubles:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x30
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	mov	sl, r4
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r5, .L173
	lsl	r0, r0, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r7, r0, r5
	ldrh	r0, [r7, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L155	@cond_branch
	ldr	r0, .L173+0x4
	ldr	r1, [r0]
	mov	r2, #0x3a
	ldrsh	r0, [r7, r2]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1886
	b	.L159	@long jump
.LCB1886:
	mov	r3, #0x38
	ldrsh	r1, [r7, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x16
	lsr	r5, r0, #0x11
	ldr	r0, .L173+0x8
	add	r6, r5, r0
	mov	r0, r8
	cmp	r0, #0
	beq	.L157	@cond_branch
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x4
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r0, sp, #0x28
	str	r0, [sp]
	add	r0, sp, #0x4
	mov	r1, #0x0
	mov	r2, #0x5
	mov	r3, #0x0
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r4, r0, #0
	ldr	r1, .L173+0xc
	add	r0, r5, r1
	add	r1, r4, #0
	mov	r2, #0x2
	bl	HpTextIntoHealthboxObject
	ldr	r0, [sp, #0x28]
	bl	RemoveWindowOnHealthbox
	mov	r0, #0x74
	bl	GetHealthboxElementGfxPtr
	ldrh	r1, [r7, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L173+0x10
	add	r1, r1, r2
	ldr	r2, .L173+0x14
	bl	CpuSet
	b	.L159
.L174:
	.align	2, 0
.L173:
	.word	gSprites
	.word	gBattleSpritesDataPtr
	.word	0x6010000
	.word	0x60100c0
	.word	0x6010680
	.word	0x4000008
.L157:
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, sp, #0x4
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r1, sp, #0x4
	mov	r0, #0xba
	strb	r0, [r1, #0x3]
	mov	r0, #0xff
	strb	r0, [r1, #0x4]
	add	r0, sp, #0x28
	str	r0, [sp]
	add	r0, r1, #0
	mov	r1, #0x4
	mov	r2, #0x5
	mov	r3, #0x0
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r4, r0, #0
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, #0x3
	bl	FillHealthboxObject
	ldr	r3, .L175
	add	r0, r5, r3
	add	r1, r4, #0
	mov	r2, #0x3
	bl	HpTextIntoHealthboxObject
	ldr	r0, [sp, #0x28]
	bl	RemoveWindowOnHealthbox
	b	.L159
.L176:
	.align	2, 0
.L175:
	.word	0x6010060
.L155:
	ldr	r1, .L177
	add	r0, sp, #0x4
	mov	r2, #0x14
	bl	memcpy
	ldrh	r0, [r7, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x2c]
	ldr	r0, .L177+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r2, [sp, #0x2c]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2032
	b	.L159	@long jump
.LCB2032:
	mov	r6, #0x4
	mov	r3, r8
	neg	r0, r3
	orr	r0, r0, r3
	asr	r0, r0, #0x1f
	and	r6, r6, r0
	ldrh	r0, [r7, #0x38]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, sp
	add	r0, r0, #0xa
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r3, r8
	cmp	r3, #0
	bne	.L162	@cond_branch
	ldr	r1, .L177+0x8
	bl	StringCopy
.L162:
	ldr	r0, .L177+0xc
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x9
	add	r2, sp, #0x4
	bl	RenderTextFont9
	add	r4, r6, #0
	add	r0, r4, #0x3
	cmp	r4, r0
	bge	.L164	@cond_branch
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r5, r0, r5
.L166:
	cmp	r4, #0x2
	bhi	.L167	@cond_branch
	ldr	r0, .L177+0xc
	ldr	r0, [r0]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	sub	r1, r4, r6
	lsl	r1, r1, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r4, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r3, .L177+0x10
	add	r1, r1, r3
	ldr	r2, .L177+0x14
	bl	CpuSet
	b	.L165
.L178:
	.align	2, 0
.L177:
	.word	sUnknown_0832C3D8
	.word	gBattleSpritesDataPtr
	.word	gText_Slash
	.word	gMonSpritesGfxPtr
	.word	0x6010000
	.word	0x4000008
.L167:
	ldr	r0, .L179
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	sub	r1, r4, r6
	lsl	r1, r1, #0x6
	add	r1, r1, #0x20
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r4, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L179+0x4
	add	r1, r1, r2
	ldr	r2, .L179+0x8
	bl	CpuSet
	add	r4, r4, #0x1
.L165:
	lsl	r0, r4, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0x3
	cmp	r4, r0
	blt	.L166	@cond_branch
.L164:
	mov	r3, r8
	cmp	r3, #0
	bne	.L170	@cond_branch
	ldr	r0, .L179
	ldr	r0, [r0]
	mov	r1, #0xba
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r0, r0, #0xe0
	ldr	r1, .L179+0xc
	lsl	r4, r7, #0x4
	add	r4, r4, r7
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, #0x80
	ldr	r5, .L179+0x10
	add	r1, r1, r5
	ldr	r2, .L179+0x8
	bl	CpuSet
	mov	r2, r8
	str	r2, [sp, #0x24]
	add	r0, sp, #0x24
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r5
	ldr	r2, .L179+0x14
	bl	CpuSet
	b	.L159
.L180:
	.align	2, 0
.L179:
	.word	gMonSpritesGfxPtr
	.word	0x6010020
	.word	0x4000008
	.word	gSprites
	.word	0x6010000
	.word	0x5000008
.L170:
	ldr	r0, [sp, #0x2c]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L159	@cond_branch
	mov	r0, #0x74
	bl	GetHealthboxElementGfxPtr
	ldr	r2, .L181
	mov	r3, r9
	lsl	r1, r3, #0x4
	add	r1, r1, r9
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0xd0
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	ldr	r2, .L181+0x4
	add	r1, r1, r2
	ldr	r2, .L181+0x8
	bl	CpuSet
.L159:
	add	sp, sp, #0x30
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L182:
	.align	2, 0
.L181:
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.Lfe19:
	.size	 UpdateHpTextInHealthboxInDoubles,.Lfe19-UpdateHpTextInHealthboxInDoubles
	.align	2, 0
	.type	 PrintSafariMonInfo,function
	.thumb_func
PrintSafariMonInfo:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	ldr	r1, .L211
	mov	r0, sp
	mov	r2, #0x14
	bl	memcpy
	ldr	r1, .L211+0x4
	ldr	r2, [sp, #0x14]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	ldr	r1, .L211+0x8
	ldr	r2, [r1]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r2, r2, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x7
	mov	r0, #0xa4
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldr	r0, [r2]
	add	r6, r0, r1
	mov	r1, #0x5
	mov	r8, r1
	add	r0, r4, #0
	bl	GetNature
	lsl	r0, r0, #0x18
	mov	r4, sp
	add	r4, r4, #0x6
	ldr	r1, .L211+0xc
	lsr	r0, r0, #0x16
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r6, #0
	mov	r1, #0x9
	mov	r2, sp
	bl	RenderTextFont9
	mov	r7, #0x6
	mov	r5, #0x0
	mov	r2, sp
	add	r2, r2, #0x9
	str	r2, [sp, #0x1c]
.L187:
	mov	r3, sp
	add	r0, r3, r7
	ldrb	r1, [r0]
	add	r0, r1, #0
	sub	r0, r0, #0x37
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bls	.L189	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x79
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bhi	.L188	@cond_branch
.L189:
	mov	r0, #0x2c
	b	.L190
.L212:
	.align	2, 0
.L211:
	.word	sUnknown_0832C3C4
	.word	gSprites
	.word	gMonSpritesGfxPtr
	.word	gNatureNamePointers
.L188:
	add	r0, r1, #0
	sub	r0, r0, #0x4b
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L192	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x65
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.L191	@cond_branch
.L192:
	mov	r0, #0x2d
	b	.L190
.L191:
	mov	r0, #0x2b
.L190:
	bl	GetHealthboxElementGfxPtr
	lsl	r1, r5, #0x6
	add	r1, r6, r1
	ldr	r2, .L213
	bl	CpuSet
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r7, #0x1
	cmp	r5, r8
	bcc	.L187	@cond_branch
	mov	r7, #0x1
	ldr	r0, [sp, #0x14]
	lsl	r0, r0, #0x4
	str	r0, [sp, #0x18]
	mov	r1, #0x1
	add	r1, r1, r8
	mov	r9, r1
	cmp	r7, r9
	bge	.L196	@cond_branch
	ldr	r1, .L213+0x4
	ldr	r2, .L213
	mov	sl, r2
	ldr	r3, [sp, #0x14]
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r8, r0
.L198:
	mov	r1, r8
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r5, r7, #0
	cmp	r7, #0
	bge	.L199	@cond_branch
	add	r5, r7, #0x7
.L199:
	asr	r5, r5, #0x3
	lsl	r4, r5, #0x3
	sub	r4, r7, r4
	add	r0, r0, r4
	lsl	r5, r5, #0x6
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L213+0x8
	add	r1, r0, r2
	add	r0, r6, #0
	mov	r2, sl
	bl	CpuSet
	add	r6, r6, #0x20
	mov	r3, r8
	ldrh	r0, [r3, #0x4]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x16
	add	r4, r4, #0x8
	add	r0, r0, r4
	add	r0, r0, r5
	lsl	r0, r0, #0x5
	ldr	r2, .L213+0x8
	add	r1, r0, r2
	add	r0, r6, #0
	mov	r2, sl
	bl	CpuSet
	add	r6, r6, #0x20
	add	r7, r7, #0x1
	cmp	r7, r9
	blt	.L198	@cond_branch
.L196:
	ldr	r6, .L213+0x4
	ldr	r3, [sp, #0x18]
	ldr	r1, [sp, #0x14]
	add	r0, r3, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r4, [r0, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L213+0xc
	ldr	r0, [r5]
	add	r0, r0, #0x7c
	ldrb	r1, [r0]
	mov	r0, sp
	add	r0, r0, #0x6
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r0, [r5]
	add	r0, r0, #0x7b
	ldrb	r1, [r0]
	ldr	r0, [sp, #0x1c]
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r1, sp
	mov	r0, #0x0
	strb	r0, [r1, #0x5]
	mov	r0, #0xba
	strb	r0, [r1, #0x8]
	ldr	r5, .L213+0x10
	ldr	r0, [r5]
	mov	r2, #0xba
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	ldr	r0, [r0]
	mov	r1, #0x9
	mov	r2, sp
	bl	RenderTextFont9
	mov	r7, #0x0
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r6, r0, r6
	mov	r4, #0x20
.L207:
	cmp	r7, #0x1
	bgt	.L208	@cond_branch
	ldr	r0, [r5]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrh	r1, [r6, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r7, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L213+0x8
	add	r1, r1, r2
	ldr	r2, .L213
	bl	CpuSet
	b	.L206
.L214:
	.align	2, 0
.L213:
	.word	0x4000008
	.word	gSprites
	.word	0x6010000
	.word	gBattleStruct
	.word	gMonSpritesGfxPtr
.L208:
	ldr	r0, [r5]
	mov	r3, #0xba
	lsl	r3, r3, #0x1
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrh	r1, [r6, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r7, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L215
	add	r1, r1, r2
	ldr	r2, .L215+0x4
	bl	CpuSet
.L206:
	add	r4, r4, #0x40
	add	r7, r7, #0x1
	cmp	r7, #0x4
	ble	.L207	@cond_branch
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L216:
	.align	2, 0
.L215:
	.word	0x60100c0
	.word	0x4000008
.Lfe20:
	.size	 PrintSafariMonInfo,.Lfe20-PrintSafariMonInfo
	.align	2, 0
	.globl	SwapHpBarsWithHpText
	.type	 SwapHpBarsWithHpText,function
	.thumb_func
SwapHpBarsWithHpText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	r9, r0
	ldr	r0, .L237
	ldrb	r0, [r0]
	cmp	r9, r0
	blt	.LCB2663
	b	.L219	@long jump
.LCB2663:
	ldr	r1, .L237+0x4
	mov	sl, r1
	ldr	r2, .L237+0x8
	mov	r8, r2
.L221:
	ldr	r0, .L237+0xc
	mov	r1, r9
	add	r6, r1, r0
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	mov	r1, sl
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L237+0x10
	cmp	r1, r0
	beq	.LCB2688
	b	.L220	@long jump
.LCB2688:
	mov	r2, r9
	lsl	r0, r2, #0x18
	lsr	r7, r0, #0x18
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB2698
	b	.L220	@long jump
.LCB2698:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L223	@cond_branch
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2711
	b	.L220	@long jump
.LCB2711:
.L223:
	ldr	r5, .L237+0x14
	ldr	r0, [r5]
	ldr	r3, [r0]
	mov	r0, r9
	lsl	r4, r0, #0x2
	add	r3, r4, r3
	ldr	r0, [r3]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1f
	mov	r2, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x4
	mov	ip, r2
	ldrb	r0, [r3]
	mov	r2, #0x11
	neg	r2, r2
	add	r1, r2, #0
	and	r0, r0, r1
	mov	r1, ip
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, [r5]
	ldr	r0, [r0]
	add	r4, r4, r0
	ldr	r0, [r4]
	lsl	r0, r0, #0x1b
	lsr	r4, r0, #0x1f
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L224	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2760
	b	.L220	@long jump
.LCB2760:
	ldr	r0, .L237+0x18
	ldr	r2, [r0]
	mov	r0, #0x80
	and	r2, r2, r0
	cmp	r2, #0
	beq	.LCB2766
	b	.L220	@long jump
.LCB2766:
	cmp	r4, #0x1
	bne	.L227	@cond_branch
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r2, [sp]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L237+0x1c
	add	r1, r1, r2
	mov	r0, sp
	ldr	r2, .L237+0x20
	bl	CpuSet
	ldrb	r4, [r6]
	mov	r1, r8
	ldrh	r0, [r1]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r1, .L237+0x24
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthboxInDoubles
	ldrb	r4, [r6]
	mov	r2, r8
	ldrh	r0, [r2]
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r2, .L237+0x24
	b	.L236
.L238:
	.align	2, 0
.L237:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gHealthboxSpriteIds
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattleTypeFlags
	.word	0x6010000
	.word	0x5000040
	.word	gPlayerParty
.L227:
	ldrb	r0, [r6]
	bl	UpdateStatusIconInHealthbox
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r2, #0x64
	mul	r1, r1, r2
	ldr	r2, .L239
	add	r1, r1, r2
	mov	r2, #0x5
	bl	UpdateHealthboxAttribute
	mov	r0, #0x75
	bl	GetHealthboxElementGfxPtr
	ldrb	r2, [r6]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, sl
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L239+0x4
	add	r1, r1, r2
	ldr	r2, .L239+0x8
	bl	CpuSet
	b	.L229
.L240:
	.align	2, 0
.L239:
	.word	gPlayerParty
	.word	0x6010680
	.word	0x4000008
.L224:
	cmp	r4, #0x1
	bne	.L230	@cond_branch
	ldr	r0, .L241
	ldr	r2, [r0]
	mov	r0, #0x80
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L231	@cond_branch
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r2, #0x64
	mul	r1, r1, r2
	ldr	r2, .L241+0x4
	add	r1, r1, r2
	bl	PrintSafariMonInfo
	b	.L229
.L242:
	.align	2, 0
.L241:
	.word	gBattleTypeFlags
	.word	gEnemyParty
.L231:
	ldrb	r1, [r6]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	str	r2, [sp]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r0, .L243
	add	r1, r1, r0
	mov	r0, sp
	ldr	r2, .L243+0x4
	bl	CpuSet
	ldrb	r4, [r6]
	mov	r1, r8
	ldrh	r0, [r1]
	mov	r2, #0x64
	mul	r0, r0, r2
	ldr	r1, .L243+0x8
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthboxInDoubles
	ldrb	r4, [r6]
	mov	r2, r8
	ldrh	r0, [r2]
	mov	r1, #0x64
	mul	r0, r0, r1
	ldr	r2, .L243+0x8
.L236:
	add	r0, r0, r2
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x1
	bl	UpdateHpTextInHealthboxInDoubles
	b	.L229
.L244:
	.align	2, 0
.L243:
	.word	0x6010000
	.word	0x5000040
	.word	gEnemyParty
.L230:
	ldrb	r0, [r6]
	bl	UpdateStatusIconInHealthbox
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mov	r5, #0x64
	mul	r1, r1, r5
	ldr	r4, .L245
	add	r1, r1, r4
	mov	r2, #0x5
	bl	UpdateHealthboxAttribute
	ldr	r0, .L245+0x4
	ldr	r0, [r0]
	mov	r1, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L229	@cond_branch
	ldrb	r0, [r6]
	mov	r2, r8
	ldrh	r1, [r2]
	mul	r1, r1, r5
	add	r1, r1, r4
	mov	r2, #0x4
	bl	UpdateHealthboxAttribute
.L229:
	ldr	r0, .L245+0x8
	add	r0, r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	ldrh	r1, [r0, #0x3c]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x3c]
.L220:
	mov	r0, #0x2
	add	r8, r8, r0
	mov	r1, #0x1
	add	r9, r9, r1
	ldr	r0, .L245+0xc
	ldrb	r0, [r0]
	cmp	r9, r0
	bge	.LCB3055
	b	.L221	@long jump
.LCB3055:
.L219:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L246:
	.align	2, 0
.L245:
	.word	gEnemyParty
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gBattlersCount
.Lfe21:
	.size	 SwapHpBarsWithHpText,.Lfe21-SwapHpBarsWithHpText
	.align	2, 0
	.globl	CreatePartyStatusSummarySprites
	.type	 CreatePartyStatusSummarySprites,function
	.thumb_func
CreatePartyStatusSummarySprites:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	str	r1, [sp, #0xc]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r4, r2, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r3, [sp, #0x10]
	cmp	r4, #0
	beq	.L249	@cond_branch
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L248	@cond_branch
.L249:
	ldr	r0, [sp, #0x8]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L250	@cond_branch
	mov	r0, #0x0
	mov	r9, r0
	mov	r5, #0x88
	mov	r4, #0x60
	mov	r1, #0x64
	mov	sl, r1
	ldr	r2, .L328
	mov	r8, r2
	b	.L255
.L329:
	.align	2, 0
.L328:
	.word	0xfffb
.L250:
	mov	r3, #0x1
	mov	r9, r3
	cmp	r4, #0
	beq	.L253	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L252	@cond_branch
.L253:
	mov	r5, #0x68
	mov	r4, #0x28
	b	.L254
.L252:
	mov	r5, #0x68
	mov	r4, #0x10
.L254:
	ldr	r6, .L330
	mov	sl, r6
	mov	r0, #0x5
	mov	r8, r0
	b	.L255
.L331:
	.align	2, 0
.L330:
	.word	0xff9c
.L248:
	mov	r1, #0x1
	mov	r9, r1
	mov	r5, #0x68
	mov	r4, #0x28
	ldr	r2, .L332
	mov	sl, r2
	mov	r3, #0x5
	mov	r8, r3
.L255:
	ldr	r0, .L332+0x4
	bl	LoadCompressedSpriteSheetUsingHeap
	ldr	r0, .L332+0x8
	bl	LoadSpriteSheet
	ldr	r0, .L332+0xc
	bl	LoadSpritePalette
	ldr	r0, .L332+0x10
	bl	LoadSpritePalette
	mov	r0, r9
	lsl	r6, r0, #0x1
	add	r0, r6, r0
	lsl	r0, r0, #0x3
	ldr	r1, .L332+0x14
	add	r0, r0, r1
	lsl	r5, r5, #0x10
	asr	r1, r5, #0x10
	lsl	r4, r4, #0x10
	asr	r2, r4, #0x10
	mov	r3, #0xa
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
	lsl	r0, r0, #0x4
	ldr	r1, [sp, #0x14]
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L332+0x18
	add	r7, r0, r1
	ldr	r1, .L332+0x1c
	add	r0, r7, #0
	bl	SetSubspriteTables
	mov	r2, sl
	strh	r2, [r7, #0x24]
	mov	r3, r8
	strh	r3, [r7, #0x2e]
	str	r5, [sp, #0x1c]
	str	r4, [sp, #0x20]
	mov	r5, r9
	cmp	r5, #0
	beq	.L256	@cond_branch
	ldrh	r0, [r7, #0x20]
	sub	r0, r0, #0x60
	strh	r0, [r7, #0x20]
	ldrb	r1, [r7, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r7, #0x3]
	b	.L257
.L333:
	.align	2, 0
.L332:
	.word	0xff9c
	.word	sStatusSummaryBarSpriteSheet
	.word	sStatusSummaryBallsSpriteSheet
	.word	sStatusSummaryBarSpritePal
	.word	sStatusSummaryBallsSpritePal
	.word	sStatusSummaryBarSpriteTemplates
	.word	gSprites
	.word	sStatusSummaryBar_SubspriteTable
.L256:
	ldrh	r0, [r7, #0x20]
	add	r0, r0, #0x60
	strh	r0, [r7, #0x20]
.L257:
	mov	r0, #0x0
	mov	r8, r0
	ldr	r1, .L334
	mov	sl, r1
	mov	r7, sp
	mov	r2, r9
	add	r0, r6, r2
	lsl	r0, r0, #0x3
	str	r0, [sp, #0x18]
	mov	r6, #0xa
	mov	r5, #0x0
.L261:
	ldr	r0, .L334+0x4
	ldr	r3, [sp, #0x20]
	ldr	r1, .L334+0x8
	add	r2, r3, r1
	ldr	r3, [sp, #0x18]
	add	r0, r3, r0
	ldr	r3, [sp, #0x1c]
	asr	r1, r3, #0x10
	asr	r2, r2, #0x10
	mov	r3, #0x9
	bl	CreateSpriteAtEnd
	strb	r0, [r7]
	ldr	r0, [sp, #0x10]
	cmp	r0, #0
	bne	.L262	@cond_branch
	ldrb	r0, [r7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r2, .L334+0xc
	add	r1, r1, r2
	ldr	r0, .L334+0x10
	str	r0, [r1]
.L262:
	ldr	r4, .L334
	mov	r3, r9
	cmp	r3, #0
	bne	.L263	@cond_branch
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	strh	r3, [r0, #0x24]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, sl
	mov	r1, r9
	strh	r1, [r0, #0x26]
.L263:
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x0
	mov	r2, sp
	ldrh	r2, [r2, #0x14]
	strh	r2, [r0, #0x2e]
	mov	r3, r9
	cmp	r3, #0
	bne	.L264	@cond_branch
	ldrb	r0, [r7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrh	r0, [r1, #0x20]
	add	r0, r0, #0x18
	add	r0, r0, r5
	strh	r0, [r1, #0x20]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	strh	r6, [r0, #0x30]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x78
	b	.L323
.L335:
	.align	2, 0
.L334:
	.word	gSprites
	.word	sStatusSummaryBallsSpriteTemplates
	.word	-0x40000
	.word	gSprites+0x1c
	.word	SpriteCB_StatusSummaryBallsOnSwitchout
.L264:
	ldrb	r0, [r7]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrh	r3, [r2, #0x20]
	sub	r3, r3, #0x18
	mov	r1, #0x5
	mov	r0, r8
	sub	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	sub	r3, r3, r0
	strh	r3, [r2, #0x20]
	ldrb	r0, [r7]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	mov	r1, #0x6
	mov	r3, r8
	sub	r1, r1, r3
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	add	r0, r0, #0xa
	strh	r0, [r2, #0x30]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L336
.L323:
	strh	r1, [r0, #0x24]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, r9
	strh	r1, [r0, #0x32]
	add	r7, r7, #0x1
	add	r6, r6, #0x7
	add	r5, r5, #0xa
	mov	r2, #0x1
	add	r8, r8, r2
	mov	r3, r8
	cmp	r3, #0x5
	bgt	.LCB3435
	b	.L261	@long jump
.LCB3435:
	ldr	r0, [sp, #0x8]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB3443
	b	.L267	@long jump
.LCB3443:
	ldr	r0, .L336+0x4
	ldr	r1, [r0]
	mov	r2, #0x40
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L268	@cond_branch
	ldr	r5, .L336+0x8
	mov	sl, r5
	ldr	r6, .L336+0xc
	ldr	r0, .L336+0x10
	add	r7, r0, #0
	ldr	r1, .L336+0x14
	mov	r9, r1
	mov	r4, sp
	ldr	r5, [sp, #0xc]
	mov	r2, #0x5
	mov	r8, r2
.L272:
	ldrh	r0, [r5]
	cmp	r0, sl
	bne	.L273	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	and	r1, r1, r7
	mov	r0, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	b	.L271
.L337:
	.align	2, 0
.L336:
	.word	0xff88
	.word	gBattleTypeFlags
	.word	0xffff
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L273:
	cmp	r0, #0
	bne	.L275	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L324
.L275:
	ldr	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L271	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L324:
	and	r1, r1, r7
	mov	r0, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L271:
	add	r4, r4, #0x1
	add	r5, r5, #0x8
	mov	r3, #0x1
	neg	r3, r3
	add	r8, r8, r3
	mov	r0, r8
	cmp	r0, #0
	bge	.L272	@cond_branch
	b	.L292
.L268:
	mov	r1, #0x5
	mov	sl, r1
	mov	r7, #0x0
	ldr	r2, .L338
	mov	r8, r2
	ldr	r3, .L338+0x4
	mov	r9, r3
	ldr	r5, .L338+0x8
	mov	ip, r5
	ldr	r6, [sp, #0xc]
	mov	r5, sp
.L283:
	ldrh	r0, [r6]
	ldr	r1, .L338+0xc
	cmp	r0, r1
	bne	.L284	@cond_branch
	mov	r4, sp
	add	r4, r4, sl
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	mov	r0, r9
	and	r1, r1, r0
	mov	r0, ip
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	sub	r1, r1, #0x2
	add	sl, sl, r1
	b	.L282
.L339:
	.align	2, 0
.L338:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	0xffff
.L284:
	cmp	r0, #0
	bne	.L286	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L325
.L286:
	ldr	r1, .L340
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L288	@cond_branch
	ldr	r0, .L340+0x4
	ldr	r0, [r0]
	mov	r2, #0xa8
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	ldr	r2, .L340+0x8
	lsl	r0, r7, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L288	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L325
.L341:
	.align	2, 0
.L340:
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	gBitTable
.L288:
	ldr	r0, [r6, #0x4]
	cmp	r0, #0
	beq	.L285	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r8
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L325:
	mov	r0, r9
	and	r1, r1, r0
	mov	r0, ip
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L285:
	add	r5, r5, #0x1
.L282:
	add	r6, r6, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L283	@cond_branch
	b	.L292
.L267:
	ldr	r0, .L342
	ldr	r1, [r0]
	ldr	r2, .L342+0x4
	and	r1, r1, r2
	cmp	r1, #0
	beq	.L293	@cond_branch
	ldr	r1, .L342+0x8
	mov	sl, r1
	ldr	r6, .L342+0xc
	ldr	r2, .L342+0x10
	add	r7, r2, #0
	ldr	r3, .L342+0x14
	mov	r9, r3
	ldr	r5, [sp, #0xc]
	mov	r4, sp
	add	r4, r4, #0x5
	mov	r0, #0x5
	mov	r8, r0
.L297:
	ldrh	r0, [r5]
	cmp	r0, sl
	bne	.L298	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	and	r1, r1, r7
	mov	r0, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	b	.L299
.L343:
	.align	2, 0
.L342:
	.word	gBattleTypeFlags
	.word	0x8040
	.word	0xffff
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L298:
	cmp	r0, #0
	bne	.L300	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L326
.L300:
	ldr	r0, [r5, #0x4]
	cmp	r0, #0
	beq	.L299	@cond_branch
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L326:
	and	r1, r1, r7
	mov	r0, r9
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L299:
	sub	r4, r4, #0x1
	add	r5, r5, #0x8
	mov	r1, #0x1
	neg	r1, r1
	add	r8, r8, r1
	mov	r2, r8
	cmp	r2, #0
	bge	.L297	@cond_branch
	b	.L292
.L293:
	mov	r3, #0x0
	mov	r8, r3
	mov	r7, #0x0
	ldr	r5, .L344
	mov	r9, r5
	ldr	r6, .L344+0x4
	mov	ip, r6
	ldr	r0, .L344+0x8
	mov	sl, r0
	ldr	r6, [sp, #0xc]
	mov	r5, sp
	add	r5, r5, #0x5
.L308:
	ldrh	r0, [r6]
	ldr	r1, .L344+0xc
	cmp	r0, r1
	bne	.L309	@cond_branch
	mov	r4, sp
	add	r4, r4, r8
	ldrb	r0, [r4]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x1
	mov	r0, ip
	and	r1, r1, r0
	mov	r0, sl
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	mov	r1, #0x1
	strh	r1, [r0, #0x3c]
	add	r8, r8, r1
	b	.L307
.L345:
	.align	2, 0
.L344:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	0xffff
.L309:
	cmp	r0, #0
	bne	.L311	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L327
.L311:
	ldr	r1, .L346
	ldr	r0, [r1]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L313	@cond_branch
	ldr	r2, .L346+0x4
	ldr	r0, [r2]
	ldr	r3, .L346+0x8
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r7, #0x2
	ldr	r2, .L346+0xc
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L313	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x3
	b	.L327
.L347:
	.align	2, 0
.L346:
	.word	gBattleTypeFlags
	.word	gBattleStruct
	.word	0x2a1
	.word	gBitTable
.L313:
	ldr	r0, [r6, #0x4]
	cmp	r0, #0
	beq	.L310	@cond_branch
	ldrb	r0, [r5]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r9
	ldrh	r3, [r2, #0x4]
	lsl	r1, r3, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x2
.L327:
	mov	r0, ip
	and	r1, r1, r0
	mov	r0, sl
	and	r0, r0, r3
	orr	r0, r0, r1
	strh	r0, [r2, #0x4]
.L310:
	sub	r5, r5, #0x1
.L307:
	add	r6, r6, #0x8
	add	r7, r7, #0x1
	cmp	r7, #0x5
	ble	.L308	@cond_branch
.L292:
	ldr	r0, .L348
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L348+0x4
	lsl	r3, r4, #0x2
	add	r1, r3, r4
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	mov	r5, sp
	ldrh	r5, [r5, #0x8]
	strh	r5, [r0, #0x8]
	mov	r6, sp
	ldrh	r6, [r6, #0x14]
	strh	r6, [r0, #0xa]
	mov	r0, #0x0
	mov	r8, r0
	add	r0, r2, #0
	add	r0, r0, #0xe
	add	r1, r1, r0
.L320:
	mov	r0, sp
	add	r0, r0, r8
	ldrb	r0, [r0]
	strh	r0, [r1]
	add	r1, r1, #0x2
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r6, r8
	cmp	r6, #0x5
	ble	.L320	@cond_branch
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, sp
	ldrh	r1, [r1, #0x10]
	strh	r1, [r0, #0x1c]
	ldr	r2, [sp, #0x10]
	cmp	r2, #0
	beq	.L322	@cond_branch
	ldr	r0, .L348+0x8
	ldr	r0, [r0]
	ldr	r3, [r0, #0x8]
	ldrb	r2, [r3, #0x9]
	lsl	r1, r2, #0x1b
	lsr	r1, r1, #0x1d
	add	r1, r1, #0x1
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x1d
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x9]
.L322:
	mov	r0, #0x72
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	add	r0, r4, #0
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L349:
	.align	2, 0
.L348:
	.word	TaskDummy
	.word	gTasks
	.word	gBattleSpritesDataPtr
.Lfe22:
	.size	 CreatePartyStatusSummarySprites,.Lfe22-CreatePartyStatusSummarySprites
	.align	2, 0
	.globl	Task_HidePartyStatusSummary
	.type	 Task_HidePartyStatusSummary,function
	.thumb_func
Task_HidePartyStatusSummary:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L370
	lsl	r3, r0, #0x2
	add	r1, r3, r0
	lsl	r1, r1, #0x3
	add	r0, r1, r2
	ldrb	r7, [r0, #0x1c]
	ldrb	r4, [r0, #0xa]
	mov	sl, r4
	ldrb	r0, [r0, #0x8]
	str	r0, [sp, #0x8]
	mov	r5, #0x0
	str	r3, [sp, #0xc]
	add	r2, r2, #0xe
	add	r2, r1, r2
.L354:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L354	@cond_branch
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x10
	bl	SetGpuReg
	ldr	r1, .L370
	ldr	r0, [sp, #0xc]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x10
	strh	r1, [r0, #0x26]
	mov	r5, #0x0
	mov	r1, sl
	lsl	r1, r1, #0x4
	str	r1, [sp, #0x10]
	ldr	r3, .L370+0x4
	mov	r6, #0xd
	neg	r6, r6
	mov	ip, r3
	mov	r4, #0x4
.L359:
	mov	r2, sp
	add	r0, r2, r5
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0x1]
	add	r0, r6, #0
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x1]
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L359	@cond_branch
	ldr	r2, [sp, #0x10]
	add	r2, r2, sl
	lsl	r2, r2, #0x2
	add	r2, r2, ip
	ldrb	r1, [r2, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	cmp	r7, #0
	bne	.LCB4237
	b	.L361	@long jump
.LCB4237:
	mov	r5, #0x0
	mov	r6, ip
	mov	r9, r5
	add	r3, r6, #0
	add	r3, r3, #0x1c
	mov	r4, sp
	mov	r7, #0x0
.L365:
	ldr	r0, [sp, #0x8]
	str	r3, [sp, #0x14]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r3, [sp, #0x14]
	cmp	r2, #0
	beq	.L366	@cond_branch
	mov	r0, #0x5
	sub	r0, r0, r5
	mov	r1, sp
	add	r2, r1, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r7, [r0, #0x30]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, r9
	strh	r1, [r0, #0x34]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, r9
	strh	r1, [r0, #0x36]
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L370+0x8
	str	r1, [r0]
	ldr	r2, .L370+0x4
	mov	ip, r2
	b	.L364
.L371:
	.align	2, 0
.L370:
	.word	gTasks
	.word	gSprites
	.word	sub_8074158
.L366:
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r7, [r0, #0x30]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x34]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r2, [r0, #0x36]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L372
	str	r1, [r0]
	ldr	r0, .L372+0x4
	mov	ip, r0
.L364:
	add	r4, r4, #0x1
	add	r7, r7, #0x7
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L365	@cond_branch
	ldr	r3, [sp, #0x10]
	add	r3, r3, sl
	lsl	r3, r3, #0x2
	mov	r1, ip
	add	r0, r3, r1
	mov	r2, #0x2e
	ldrsh	r1, [r0, r2]
	lsr	r2, r1, #0x1f
	add	r1, r1, r2
	asr	r1, r1, #0x1
	mov	r2, #0x0
	strh	r1, [r0, #0x2e]
	strh	r2, [r0, #0x30]
	mov	r1, ip
	add	r1, r1, #0x1c
	add	r3, r3, r1
	ldr	r1, .L372+0x8
	str	r1, [r3]
	ldr	r1, .L372+0xc
	bl	SetSubspriteTables
	ldr	r1, .L372+0x10
	ldr	r0, [sp, #0xc]
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L372+0x14
	str	r1, [r0]
	b	.L369
.L373:
	.align	2, 0
.L372:
	.word	sub_8074158
	.word	gSprites
	.word	sub_8074090
	.word	sUnknown_0832C2CC
	.word	gTasks
	.word	sub_8073E08
.L361:
	ldr	r0, .L374
	ldr	r1, [sp, #0xc]
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L374+0x4
	str	r0, [r1]
.L369:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	gTasks
	.word	sub_8073F98
.Lfe23:
	.size	 Task_HidePartyStatusSummary,.Lfe23-Task_HidePartyStatusSummary
	.align	2, 0
	.type	 sub_8073E08,function
	.thumb_func
sub_8073E08:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L380
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1e]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L377	@cond_branch
	ldrh	r0, [r4, #0x26]
	sub	r1, r0, #0x1
	strh	r1, [r4, #0x26]
	lsl	r0, r1, #0x10
	cmp	r0, #0
	blt	.L376	@cond_branch
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
.L377:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L376	@cond_branch
	ldr	r0, .L380+0x4
	str	r0, [r4]
.L376:
	pop	{r4}
	pop	{r0}
	bx	r0
.L381:
	.align	2, 0
.L380:
	.word	gTasks
	.word	sub_8073E64
.Lfe24:
	.size	 sub_8073E08,.Lfe24-sub_8073E08
	.align	2, 0
	.type	 sub_8073E64,function
	.thumb_func
sub_8073E64:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r7, .L398
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r3, r0, #0x3
	add	r4, r3, r7
	ldrb	r2, [r4, #0x8]
	ldrh	r0, [r4, #0x26]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L383	@cond_branch
	ldrb	r5, [r4, #0xa]
	mov	r4, #0x0
	ldr	r6, .L398+0x4
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r2, r3, r0
.L387:
	mov	r0, sp
	add	r1, r0, r4
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L387	@cond_branch
	ldr	r0, [r6]
	ldr	r3, [r0, #0x8]
	ldrb	r2, [r3, #0x9]
	lsl	r1, r2, #0x1b
	lsr	r1, r1, #0x1d
	sub	r1, r1, #0x1
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x1d
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x9]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x9]
	mov	r0, #0x1c
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L389	@cond_branch
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	ldr	r4, .L398+0x8
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	b	.L390
.L399:
	.align	2, 0
.L398:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gSprites
.L389:
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r5, .L400
	add	r4, r4, r5
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	FreeSpriteOamMatrix
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
.L390:
	mov	r4, #0x1
	ldr	r5, .L400
.L394:
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	bl	DestroySprite
	add	r4, r4, #0x1
	cmp	r4, #0x5
	ble	.L394	@cond_branch
	b	.L396
.L401:
	.align	2, 0
.L400:
	.word	gSprites
.L383:
	mov	r0, #0x3
	neg	r0, r0
	cmp	r1, r0
	bne	.L396	@cond_branch
	ldr	r0, .L402
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyTask
.L396:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L403:
	.align	2, 0
.L402:
	.word	gBattleSpritesDataPtr
.Lfe25:
	.size	 sub_8073E64,.Lfe25-sub_8073E64
	.align	2, 0
	.type	 sub_8073F98,function
	.thumb_func
sub_8073F98:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r7, .L420
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r6, r0, #0x3
	add	r3, r6, r7
	ldrb	r5, [r3, #0x8]
	ldrh	r0, [r3, #0x26]
	sub	r1, r0, #0x1
	strh	r1, [r3, #0x26]
	lsl	r0, r1, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	blt	.L405	@cond_branch
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	b	.L406
.L421:
	.align	2, 0
.L420:
	.word	gTasks
.L405:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r2, r0
	bne	.L407	@cond_branch
	ldrb	r3, [r3, #0xa]
	mov	r5, #0x0
	add	r0, r7, #0
	add	r0, r0, #0xe
	add	r2, r6, r0
.L411:
	mov	r0, sp
	add	r1, r0, r5
	ldrh	r0, [r2]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L411	@cond_branch
	lsl	r0, r3, #0x4
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	ldr	r4, .L422
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r0, sp
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySpriteAndFreeResources
	mov	r5, #0x1
.L416:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L416	@cond_branch
	b	.L406
.L423:
	.align	2, 0
.L422:
	.word	gSprites
.L407:
	mov	r0, #0x3
	neg	r0, r0
	cmp	r2, r0
	bne	.L406	@cond_branch
	ldr	r0, .L424
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r5, #0x1
	add	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyTask
.L406:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L425:
	.align	2, 0
.L424:
	.word	gBattleSpritesDataPtr
.Lfe26:
	.size	 sub_8073F98,.Lfe26-sub_8073F98
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBar,function
	.thumb_func
SpriteCB_StatusSummaryBar:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x24]
	mov	r3, #0x24
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	beq	.L427	@cond_branch
	ldrh	r0, [r1, #0x2e]
	add	r0, r2, r0
	strh	r0, [r1, #0x24]
.L427:
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 SpriteCB_StatusSummaryBar,.Lfe27-SpriteCB_StatusSummaryBar
	.align	2, 0
	.type	 sub_8074090,function
	.thumb_func
sub_8074090:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0
	add	r1, r1, #0x20
	strh	r1, [r2, #0x30]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L429	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x14
	ldrh	r1, [r2, #0x24]
	add	r0, r0, r1
	b	.L431
.L429:
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x14
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, r1
.L431:
	strh	r0, [r2, #0x24]
	ldrh	r1, [r2, #0x30]
	mov	r0, #0xf
	and	r0, r0, r1
	strh	r0, [r2, #0x30]
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_8074090,.Lfe28-sub_8074090
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBallsOnBattleStart,function
	.thumb_func
SpriteCB_StatusSummaryBallsOnBattleStart:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L433	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x30]
	b	.L432
.L433:
	ldrh	r0, [r4, #0x32]
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrh	r2, [r4, #0x34]
	add	r0, r2, #0
	add	r0, r0, #0x38
	lsl	r1, r0, #0x10
	lsr	r2, r1, #0x10
	ldr	r0, .L442
	and	r2, r2, r0
	strh	r2, [r4, #0x34]
	cmp	r3, #0
	beq	.L434	@cond_branch
	lsr	r0, r1, #0x14
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L436	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	b	.L436
.L443:
	.align	2, 0
.L442:
	.word	0xfff0
.L434:
	lsr	r1, r1, #0x14
	ldrh	r0, [r4, #0x24]
	sub	r0, r0, r1
	strh	r0, [r4, #0x24]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L436	@cond_branch
	strh	r3, [r4, #0x24]
.L436:
	mov	r2, #0x24
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L432	@cond_branch
	mov	r1, #0x3f
	cmp	r3, #0
	beq	.L439	@cond_branch
	mov	r1, #0xc0
.L439:
	mov	r2, #0x3c
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L440	@cond_branch
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x74
	bl	PlaySE2WithPanning
	b	.L441
.L440:
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0x73
	bl	PlaySE1WithPanning
.L441:
	ldr	r0, .L444
	str	r0, [r4, #0x1c]
.L432:
	pop	{r4}
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	SpriteCallbackDummy
.Lfe29:
	.size	 SpriteCB_StatusSummaryBallsOnBattleStart,.Lfe29-SpriteCB_StatusSummaryBallsOnBattleStart
	.align	2, 0
	.type	 sub_8074158,function
	.thumb_func
sub_8074158:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x30]
	mov	r2, #0x30
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L447	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x30]
	b	.L446
.L447:
	ldrh	r0, [r3, #0x32]
	lsl	r0, r0, #0x18
	ldrh	r2, [r3, #0x34]
	add	r1, r2, #0
	add	r1, r1, #0x38
	lsl	r4, r1, #0x10
	lsr	r2, r4, #0x10
	ldr	r1, .L452
	and	r2, r2, r1
	strh	r2, [r3, #0x34]
	cmp	r0, #0
	beq	.L448	@cond_branch
	lsr	r0, r4, #0x14
	ldrh	r1, [r3, #0x24]
	add	r0, r0, r1
	b	.L451
.L453:
	.align	2, 0
.L452:
	.word	0xfff0
.L448:
	lsr	r1, r4, #0x14
	ldrh	r0, [r3, #0x24]
	sub	r0, r0, r1
.L451:
	strh	r0, [r3, #0x24]
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	mov	r2, #0x20
	ldrsh	r1, [r3, r2]
	add	r0, r0, r1
	add	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	cmp	r0, r1
	bls	.L446	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L454
	str	r0, [r3, #0x1c]
.L446:
	pop	{r4}
	pop	{r0}
	bx	r0
.L455:
	.align	2, 0
.L454:
	.word	SpriteCallbackDummy
.Lfe30:
	.size	 sub_8074158,.Lfe30-sub_8074158
	.align	2, 0
	.type	 SpriteCB_StatusSummaryBallsOnSwitchout,function
	.thumb_func
SpriteCB_StatusSummaryBallsOnSwitchout:
	ldrh	r2, [r0, #0x2e]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L457
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r2, [r1, #0x24]
	strh	r2, [r0, #0x24]
	ldrh	r1, [r1, #0x26]
	strh	r1, [r0, #0x26]
	bx	lr
.L458:
	.align	2, 0
.L457:
	.word	gSprites
.Lfe31:
	.size	 SpriteCB_StatusSummaryBallsOnSwitchout,.Lfe31-SpriteCB_StatusSummaryBallsOnSwitchout
	.align	2, 0
	.type	 UpdateNickInHealthbox,function
	.thumb_func
UpdateNickInHealthbox:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r5, .L472
	ldr	r1, .L472+0x4
	add	r0, r5, #0
	bl	StringCopy
	add	r0, r4, #0
	mov	r1, #0x2
	add	r2, sp, #0x4
	bl	GetMonData
	add	r0, sp, #0x4
	bl	StringGetEnd10
	add	r0, r5, #0
	add	r1, sp, #0x4
	bl	StringAppend
	add	r5, r0, #0
	add	r0, r4, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r0, #0
	cmp	r0, #0x1d
	beq	.L461	@cond_branch
	cmp	r0, #0x20
	bne	.L460	@cond_branch
.L461:
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L472+0x8
	add	r1, r1, r0
	add	r0, sp, #0x4
	bl	StringCompare
	cmp	r0, #0
	bne	.L460	@cond_branch
	mov	r6, #0x64
.L460:
	cmp	r6, #0
	beq	.L464	@cond_branch
	cmp	r6, #0xfe
	beq	.L465	@cond_branch
	ldr	r1, .L472+0xc
	b	.L471
.L473:
	.align	2, 0
.L472:
	.word	gDisplayedStringBattle
	.word	gText_HighlightDarkGrey
	.word	gSpeciesNames
	.word	gText_DynColor2
.L464:
	ldr	r1, .L474
	b	.L471
.L475:
	.align	2, 0
.L474:
	.word	gText_DynColor2Male
.L465:
	ldr	r1, .L476
.L471:
	add	r0, r5, #0
	bl	StringCopy
	ldr	r0, .L476+0x4
	add	r1, sp, #0x10
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x3
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r6, r0, #0
	ldr	r0, .L476+0x8
	lsl	r1, r7, #0x4
	add	r1, r1, r7
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x4]
	lsl	r0, r0, #0x16
	lsr	r4, r0, #0x11
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L467	@cond_branch
	ldr	r1, .L476+0xc
	add	r0, r4, r1
	add	r1, r6, #0
	mov	r2, #0x6
	bl	TextIntoHealthboxObject
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	ldr	r1, .L476+0x10
	add	r5, r4, r1
	cmp	r0, #0
	bne	.L468	@cond_branch
	ldr	r0, .L476+0x14
	add	r5, r4, r0
.L468:
	add	r1, r6, #0
	add	r1, r1, #0xc0
	add	r0, r5, #0
	mov	r2, #0x1
	bl	TextIntoHealthboxObject
	b	.L470
.L477:
	.align	2, 0
.L476:
	.word	gText_DynColor1Female
	.word	gDisplayedStringBattle
	.word	gSprites
	.word	0x6010040
	.word	0x6010400
	.word	0x6010800
.L467:
	ldr	r1, .L478
	add	r0, r4, r1
	add	r1, r6, #0
	mov	r2, #0x7
	bl	TextIntoHealthboxObject
.L470:
	ldr	r0, [sp, #0x10]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	0x6010020
.Lfe32:
	.size	 UpdateNickInHealthbox,.Lfe32-UpdateNickInHealthbox
	.align	2, 0
	.type	 TryAddPokeballIconToHealthbox,function
	.thumb_func
TryAddPokeballIconToHealthbox:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r0, .L487
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L480	@cond_branch
	mov	r0, #0x8
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L480	@cond_branch
	ldr	r6, .L487+0x4
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r5, r0, r6
	ldrh	r0, [r5, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L480	@cond_branch
	ldr	r1, .L487+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L487+0xc
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	bl	GetSetPokedexFlag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L480	@cond_branch
	ldrh	r0, [r5, #0x38]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r7, #0
	beq	.L485	@cond_branch
	mov	r0, #0x46
	bl	GetHealthboxElementGfxPtr
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r2, .L487+0x10
	add	r1, r1, r2
	ldr	r2, .L487+0x14
	bl	CpuSet
	b	.L480
.L488:
	.align	2, 0
.L487:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
	.word	0x6010000
	.word	0x4000008
.L485:
	str	r7, [sp]
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldr	r0, .L489
	add	r1, r1, r0
	ldr	r2, .L489+0x4
	mov	r0, sp
	bl	CpuSet
.L480:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L490:
	.align	2, 0
.L489:
	.word	0x6010000
	.word	0x5000008
.Lfe33:
	.size	 TryAddPokeballIconToHealthbox,.Lfe33-TryAddPokeballIconToHealthbox
	.align	2, 0
	.type	 UpdateStatusIconInHealthbox,function
	.thumb_func
UpdateStatusIconInHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L515
	mov	r2, r9
	lsl	r1, r2, #0x4
	add	r1, r1, r9
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldrh	r0, [r1, #0x38]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L492	@cond_branch
	ldr	r1, .L515+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L515+0x8
	add	r0, r0, r1
	mov	r1, #0x37
	bl	GetMonData
	add	r4, r0, #0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	mov	r3, #0x12
	mov	r8, r3
	cmp	r0, #0
	bne	.L495	@cond_branch
	mov	r0, #0x1a
	mov	r8, r0
	b	.L495
.L516:
	.align	2, 0
.L515:
	.word	gSprites
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L492:
	ldr	r1, .L517
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L517+0x4
	add	r0, r0, r1
	mov	r1, #0x37
	bl	GetMonData
	add	r4, r0, #0
	mov	r1, #0x11
	mov	r8, r1
.L495:
	mov	r0, #0x7
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L496	@cond_branch
	mov	r0, #0x1b
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x2
	b	.L497
.L518:
	.align	2, 0
.L517:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L496:
	mov	r0, #0x88
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L498	@cond_branch
	mov	r0, #0x15
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x0
	b	.L497
.L498:
	mov	r0, #0x10
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L500	@cond_branch
	mov	r0, #0x21
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x4
	b	.L497
.L500:
	mov	r0, #0x20
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L502	@cond_branch
	mov	r0, #0x1e
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x3
	b	.L497
.L502:
	mov	r0, #0x40
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L504	@cond_branch
	mov	r0, #0x18
	add	r1, r7, #0
	bl	GetStatusIconForBattlerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r0, #0x1
	b	.L497
.L504:
	mov	r0, #0x27
	bl	GetHealthboxElementGfxPtr
	add	r6, r0, #0
	mov	r4, #0x0
	mov	r2, r9
	lsl	r0, r2, #0x4
	mov	r3, r8
	lsl	r3, r3, #0x10
	mov	r8, r3
	lsl	r7, r7, #0x2
	ldr	r1, .L519
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r5, r0, r1
.L509:
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	mov	r2, r8
	asr	r0, r2, #0x10
	add	r1, r1, r0
	add	r1, r1, r4
	lsl	r1, r1, #0x5
	ldr	r3, .L519+0x4
	add	r1, r1, r3
	add	r0, r6, #0
	ldr	r2, .L519+0x8
	bl	CpuSet
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L509	@cond_branch
	ldr	r0, .L519+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r7, r0
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L511	@cond_branch
	mov	r0, #0x1
	bl	GetHealthboxElementGfxPtr
	ldr	r2, .L519
	mov	r3, sl
	lsl	r1, r3, #0x4
	add	r1, r1, sl
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L519+0x4
	add	r1, r1, r2
	ldr	r2, .L519+0x10
	bl	CpuSet
.L511:
	mov	r0, r9
	mov	r1, #0x1
	bl	TryAddPokeballIconToHealthbox
	b	.L491
.L520:
	.align	2, 0
.L519:
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
	.word	gBattleSpritesDataPtr
	.word	0x4000010
.L497:
	mov	r1, r9
	lsl	r5, r1, #0x4
	add	r5, r5, r9
	lsl	r5, r5, #0x2
	ldr	r2, .L521
	add	r5, r5, r2
	ldrb	r4, [r5, #0x5]
	lsr	r4, r4, #0x4
	lsl	r4, r4, #0x4
	add	r4, r4, #0xc
	add	r4, r4, r7
	ldr	r1, .L521+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	add	r1, r4, r3
	mov	r2, #0x2
	bl	FillPalette
	lsl	r4, r4, #0x1
	ldr	r0, .L521+0x8
	add	r0, r4, r0
	ldr	r1, .L521+0xc
	add	r4, r4, r1
	add	r1, r4, #0
	mov	r2, #0x1
	bl	CpuSet
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, r8
	lsl	r1, r1, #0x5
	ldr	r2, .L521+0x10
	mov	r8, r2
	add	r1, r1, r8
	ldr	r2, .L521+0x14
	add	r0, r6, #0
	bl	CpuSet
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L513	@cond_branch
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L512	@cond_branch
.L513:
	ldr	r0, .L521+0x18
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L512	@cond_branch
	mov	r0, #0x0
	bl	GetHealthboxElementGfxPtr
	mov	r3, sl
	lsl	r4, r3, #0x4
	add	r4, r4, sl
	lsl	r4, r4, #0x2
	ldr	r1, .L521
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r8
	ldr	r5, .L521+0x1c
	add	r2, r5, #0
	bl	CpuSet
	mov	r0, #0x41
	bl	GetHealthboxElementGfxPtr
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, #0x20
	add	r1, r1, r8
	add	r2, r5, #0
	bl	CpuSet
.L512:
	mov	r0, r9
	mov	r1, #0x0
	bl	TryAddPokeballIconToHealthbox
.L491:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	gSprites
	.word	sStatusIconColors
	.word	gPlttBufferUnfaded+0x200
	.word	0x5000200
	.word	0x6010000
	.word	0x4000018
	.word	gBattleSpritesDataPtr
	.word	0x4000008
.Lfe34:
	.size	 UpdateStatusIconInHealthbox,.Lfe34-UpdateStatusIconInHealthbox
	.align	2, 0
	.type	 GetStatusIconForBattlerId,function
	.thumb_func
GetStatusIconForBattlerId:
	push	{lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	lsr	r2, r0, #0x18
	add	r0, r2, #0
	sub	r0, r0, #0x15
	cmp	r0, #0xc
	bhi	.L524	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L562
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L563:
	.align	2, 0
.L562:
	.word	.L560
	.align	2, 0
	.align	2, 0
.L560:
	.word	.L525
	.word	.L524
	.word	.L524
	.word	.L532
	.word	.L524
	.word	.L524
	.word	.L539
	.word	.L524
	.word	.L524
	.word	.L546
	.word	.L524
	.word	.L524
	.word	.L553
.L525:
	mov	r2, #0x15
	cmp	r3, #0
	beq	.L524	@cond_branch
	mov	r2, #0x47
	cmp	r3, #0x1
	beq	.L524	@cond_branch
	mov	r2, #0x65
	cmp	r3, #0x2
	bne	.L524	@cond_branch
	mov	r2, #0x56
	b	.L524
.L532:
	mov	r2, #0x18
	cmp	r3, #0
	beq	.L524	@cond_branch
	mov	r2, #0x4a
	cmp	r3, #0x1
	beq	.L524	@cond_branch
	mov	r2, #0x68
	cmp	r3, #0x2
	bne	.L524	@cond_branch
	mov	r2, #0x59
	b	.L524
.L539:
	mov	r2, #0x1b
	cmp	r3, #0
	beq	.L524	@cond_branch
	mov	r2, #0x4d
	cmp	r3, #0x1
	beq	.L524	@cond_branch
	mov	r2, #0x6b
	cmp	r3, #0x2
	bne	.L524	@cond_branch
	mov	r2, #0x5c
	b	.L524
.L546:
	mov	r2, #0x1e
	cmp	r3, #0
	beq	.L524	@cond_branch
	mov	r2, #0x50
	cmp	r3, #0x1
	beq	.L524	@cond_branch
	mov	r2, #0x6e
	cmp	r3, #0x2
	bne	.L524	@cond_branch
	mov	r2, #0x5f
	b	.L524
.L553:
	mov	r2, #0x21
	cmp	r3, #0
	beq	.L524	@cond_branch
	mov	r2, #0x53
	cmp	r3, #0x1
	beq	.L524	@cond_branch
	mov	r2, #0x71
	cmp	r3, #0x2
	bne	.L524	@cond_branch
	mov	r2, #0x62
.L524:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe35:
	.size	 GetStatusIconForBattlerId,.Lfe35-GetStatusIconForBattlerId
	.align	2, 0
	.type	 UpdateSafariBallsTextOnHealthbox,function
	.thumb_func
UpdateSafariBallsTextOnHealthbox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L565
	add	r1, sp, #0x4
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x3
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldr	r1, .L565+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x4]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x11
	ldr	r1, .L565+0x8
	add	r0, r4, r1
	add	r1, r5, #0
	mov	r2, #0x6
	bl	TextIntoHealthboxObject
	ldr	r0, .L565+0xc
	add	r4, r4, r0
	add	r5, r5, #0xc0
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x2
	bl	TextIntoHealthboxObject
	ldr	r0, [sp, #0x4]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x8
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L566:
	.align	2, 0
.L565:
	.word	gText_SafariBalls
	.word	gSprites
	.word	0x6010040
	.word	0x6010800
.Lfe36:
	.size	 UpdateSafariBallsTextOnHealthbox,.Lfe36-UpdateSafariBallsTextOnHealthbox
	.align	2, 0
	.type	 UpdateLeftNoOfBallsTextOnHealthbox,function
	.thumb_func
UpdateLeftNoOfBallsTextOnHealthbox:
	push	{r4, r5, lr}
	add	sp, sp, #-0x18
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L568
	add	r0, sp, #0x4
	bl	StringCopy
	ldr	r1, .L568+0x4
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x0
	add	r1, sp, #0x4
	mov	r2, #0x2f
	bl	GetStringRightAlignXOffset
	add	r1, r0, #0
	add	r0, sp, #0x14
	str	r0, [sp]
	add	r0, sp, #0x4
	mov	r2, #0x3
	mov	r3, #0x2
	bl	AddTextPrinterAndCreateWindowOnHealthbox
	add	r5, r0, #0
	ldr	r1, .L568+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r4, [r0, #0x4]
	lsl	r4, r4, #0x16
	lsr	r4, r4, #0x11
	ldr	r1, .L568+0xc
	add	r0, r4, r1
	add	r1, r5, #0
	mov	r2, #0x2
	bl	SafariTextIntoHealthboxObject
	ldr	r0, .L568+0x10
	add	r4, r4, r0
	add	r5, r5, #0x40
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x4
	bl	SafariTextIntoHealthboxObject
	ldr	r0, [sp, #0x14]
	bl	RemoveWindowOnHealthbox
	add	sp, sp, #0x18
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L569:
	.align	2, 0
.L568:
	.word	gText_SafariBallLeft
	.word	gNumSafariBalls
	.word	gSprites
	.word	0x60102c0
	.word	0x6010a00
.Lfe37:
	.size	 UpdateLeftNoOfBallsTextOnHealthbox,.Lfe37-UpdateLeftNoOfBallsTextOnHealthbox
	.align	2, 0
	.globl	UpdateHealthboxAttribute
	.type	 UpdateHealthboxAttribute,function
	.thumb_func
UpdateHealthboxAttribute:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r8, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r1, .L597
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	cmp	r7, #0
	bne	.L571	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L571	@cond_branch
	mov	r0, r9
	bl	GetBattlerSide
.L571:
	ldr	r1, .L597
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x3a]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB6195
	b	.L572	@long jump
.LCB6195:
	cmp	r7, #0x3
	beq	.L574	@cond_branch
	cmp	r7, #0
	bne	.L573	@cond_branch
.L574:
	mov	r0, r8
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	UpdateLvlInHealthbox
.L573:
	cmp	r7, #0x1
	bhi	.L575	@cond_branch
	mov	r0, r8
	mov	r1, #0x39
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r6, #0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L575:
	cmp	r7, #0x2
	beq	.L577	@cond_branch
	cmp	r7, #0
	bne	.L576	@cond_branch
.L577:
	mov	r0, r8
	mov	r1, #0x3a
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r6, #0
	mov	r2, #0x1
	bl	UpdateHpTextInHealthbox
.L576:
	cmp	r7, #0x5
	beq	.L579	@cond_branch
	cmp	r7, #0
	bne	.L578	@cond_branch
.L579:
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	mov	r0, r8
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	mov	r0, r8
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, r9
	add	r1, r6, #0
	add	r2, r4, #0
	bl	SetBattleBarStruct
	mov	r0, r9
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
.L578:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	cmp	r0, #0
	bne	.L580	@cond_branch
	cmp	r7, #0x6
	beq	.L581	@cond_branch
	cmp	r7, #0
	bne	.L580	@cond_branch
.L581:
	mov	r0, #0x3
	bl	LoadBattleBarGfx
	mov	r0, r8
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	mov	r0, r8
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r0, .L597+0x4
	mov	ip, r0
	lsl	r1, r4, #0x2
	ldr	r2, .L597+0x8
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, ip
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, ip
	ldr	r2, [r4]
	sub	r2, r2, r1
	mov	r0, sl
	str	r0, [sp]
	mov	r0, r9
	add	r1, r6, #0
	bl	SetBattleBarStruct
	mov	r0, r9
	add	r1, r6, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	MoveBattleBar
.L580:
	cmp	r7, #0x4
	beq	.L583	@cond_branch
	cmp	r7, #0
	bne	.L582	@cond_branch
.L583:
	add	r0, r6, #0
	mov	r1, r8
	bl	UpdateNickInHealthbox
.L582:
	cmp	r7, #0x9
	beq	.L585	@cond_branch
	cmp	r7, #0
	bne	.L584	@cond_branch
.L585:
	add	r0, r6, #0
	bl	UpdateStatusIconInHealthbox
.L584:
	cmp	r7, #0xa
	bne	.L586	@cond_branch
	add	r0, r6, #0
	bl	UpdateSafariBallsTextOnHealthbox
.L586:
	add	r0, r7, #0
	sub	r0, r0, #0xa
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L588	@cond_branch
	add	r0, r6, #0
	bl	UpdateLeftNoOfBallsTextOnHealthbox
	b	.L588
.L598:
	.align	2, 0
.L597:
	.word	gSprites
	.word	gExperienceTables
	.word	gBaseStats
.L572:
	cmp	r7, #0x3
	beq	.L590	@cond_branch
	cmp	r7, #0
	bne	.L589	@cond_branch
.L590:
	mov	r0, r8
	mov	r1, #0x38
	bl	GetMonData
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	UpdateLvlInHealthbox
.L589:
	cmp	r7, #0x5
	beq	.L592	@cond_branch
	cmp	r7, #0
	bne	.L591	@cond_branch
.L592:
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	mov	r0, r8
	mov	r1, #0x3a
	bl	GetMonData
	add	r4, r0, #0
	mov	r0, r8
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, r9
	add	r1, r6, #0
	add	r2, r4, #0
	bl	SetBattleBarStruct
	mov	r0, r9
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
.L591:
	cmp	r7, #0x4
	beq	.L594	@cond_branch
	cmp	r7, #0
	bne	.L593	@cond_branch
.L594:
	add	r0, r6, #0
	mov	r1, r8
	bl	UpdateNickInHealthbox
.L593:
	cmp	r7, #0x9
	beq	.L596	@cond_branch
	cmp	r7, #0
	bne	.L588	@cond_branch
.L596:
	add	r0, r6, #0
	bl	UpdateStatusIconInHealthbox
.L588:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 UpdateHealthboxAttribute,.Lfe38-UpdateHealthboxAttribute
	.align	2, 0
	.globl	MoveBattleBar
	.type	 MoveBattleBar,function
	.thumb_func
MoveBattleBar:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r9, r2
	cmp	r2, #0
	bne	.L600	@cond_branch
	ldr	r0, .L607
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	mov	r1, r8
	lsl	r5, r1, #0x2
	add	r3, r5, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	mov	r4, #0x6
	str	r4, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	bl	CalcNewBarValue
	add	r4, r0, #0
	add	r7, r5, #0
	b	.L601
.L608:
	.align	2, 0
.L607:
	.word	gBattleSpritesDataPtr
.L600:
	ldr	r2, .L609
	mov	sl, r2
	ldr	r0, [r2]
	ldr	r2, [r0, #0xc]
	mov	r0, r8
	lsl	r4, r0, #0x2
	add	r0, r4, r0
	lsl	r6, r0, #0x2
	add	r2, r6, r2
	ldr	r0, [r2, #0x8]
	ldr	r1, [r2, #0xc]
	ldr	r2, [r2, #0x4]
	mov	r3, #0x8
	bl	GetScaledExpFraction
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r4, #0
	cmp	r5, #0
	bne	.L602	@cond_branch
	mov	r5, #0x1
.L602:
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0xc]
	add	r4, r6, r0
	ldr	r6, [r4, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	bl	__divsi3
	cmp	r0, #0
	bge	.L603	@cond_branch
	neg	r0, r0
.L603:
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r0, [r4, #0x4]
	ldr	r1, [r4, #0x8]
	add	r3, r4, #0
	add	r3, r3, #0x10
	mov	r2, #0x8
	str	r2, [sp]
	str	r5, [sp, #0x4]
	add	r2, r6, #0
	bl	CalcNewBarValue
	add	r4, r0, #0
.L601:
	mov	r2, r9
	cmp	r2, #0x1
	beq	.L605	@cond_branch
	cmp	r2, #0
	bne	.L604	@cond_branch
	ldr	r0, .L609
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r7, r0
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L604	@cond_branch
.L605:
	mov	r0, r8
	mov	r1, r9
	bl	MoveBattleBarGraphically
.L604:
	mov	r0, #0x1
	neg	r0, r0
	cmp	r4, r0
	bne	.L606	@cond_branch
	ldr	r0, .L609
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	mov	r2, r8
	add	r0, r7, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0, #0x10]
.L606:
	add	r0, r4, #0
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L610:
	.align	2, 0
.L609:
	.word	gBattleSpritesDataPtr
.Lfe39:
	.size	 MoveBattleBar,.Lfe39-MoveBattleBar
	.align	2, 0
	.type	 MoveBattleBarGraphically,function
	.thumb_func
MoveBattleBarGraphically:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0
	beq	.L613	@cond_branch
	cmp	r1, #0x1
	beq	.L625	@cond_branch
	b	.L612
.L613:
	ldr	r0, .L641
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	lsl	r5, r6, #0x2
	add	r3, r5, r6
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x6
	str	r4, [sp, #0x4]
	bl	CalcBarFilledPixels
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x3
	mov	r9, r1
	add	r7, r5, #0
	cmp	r0, #0x18
	bhi	.L615	@cond_branch
	mov	r2, #0x38
	mov	r9, r2
	cmp	r0, #0x9
	bls	.L615	@cond_branch
	mov	r4, #0x2f
	mov	r9, r4
.L615:
	mov	r5, #0x0
	ldr	r0, .L641+0x4
	mov	r8, r0
.L621:
	ldr	r0, .L641
	ldr	r0, [r0]
	ldr	r1, [r0, #0xc]
	add	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldrh	r0, [r0, #0x38]
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r5, #0x1
	bhi	.L622	@cond_branch
	mov	r0, r9
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L641+0x8
	add	r1, r1, r2
	ldr	r2, .L641+0xc
	bl	CpuSet
	b	.L620
.L642:
	.align	2, 0
.L641:
	.word	gBattleSpritesDataPtr
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.L622:
	mov	r0, r9
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r5, r1
	lsl	r1, r1, #0x5
	ldr	r4, .L643
	add	r1, r1, r4
	ldr	r2, .L643+0x4
	bl	CpuSet
.L620:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L621	@cond_branch
	b	.L612
.L644:
	.align	2, 0
.L643:
	.word	0x6010040
	.word	0x4000008
.L625:
	ldr	r0, .L645
	ldr	r0, [r0]
	ldr	r0, [r0, #0xc]
	lsl	r5, r6, #0x2
	add	r3, r5, r6
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r0, [r3, #0x4]
	ldr	r1, [r3, #0x8]
	ldr	r2, [r3, #0xc]
	add	r3, r3, #0x10
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x8
	str	r4, [sp, #0x4]
	bl	CalcBarFilledPixels
	ldr	r1, .L645+0x4
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L645+0x8
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r7, r5, #0
	cmp	r0, #0x64
	bne	.L626	@cond_branch
	mov	r5, #0x0
	mov	r1, #0x0
.L630:
	mov	r0, sp
	add	r0, r0, r5
	add	r0, r0, #0x8
	strb	r1, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L630	@cond_branch
.L626:
	mov	r5, #0x0
	ldr	r0, .L645+0xc
	mov	r8, r0
	add	r0, r7, r6
	lsl	r4, r0, #0x2
.L635:
	cmp	r5, #0x3
	bhi	.L636	@cond_branch
	mov	r0, #0xc
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, .L645
	ldr	r1, [r1]
	ldr	r1, [r1, #0xc]
	add	r1, r4, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0
	add	r2, r2, #0x24
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	ldr	r2, .L645+0x10
	add	r1, r1, r2
	ldr	r2, .L645+0x14
	bl	CpuSet
	b	.L634
.L646:
	.align	2, 0
.L645:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
.L636:
	mov	r0, #0xc
	bl	GetHealthboxElementGfxPtr
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, .L647
	ldr	r1, [r1]
	ldr	r1, [r1, #0xc]
	add	r1, r4, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r8
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r1, r5, r1
	lsl	r1, r1, #0x5
	ldr	r2, .L647+0x4
	add	r1, r1, r2
	ldr	r2, .L647+0x8
	bl	CpuSet
.L634:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x7
	bls	.L635	@cond_branch
.L612:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L648:
	.align	2, 0
.L647:
	.word	gBattleSpritesDataPtr
	.word	0x6010b80
	.word	0x4000008
.Lfe40:
	.size	 MoveBattleBarGraphically,.Lfe40-MoveBattleBarGraphically
	.align	2, 0
	.type	 CalcNewBarValue,function
	.thumb_func
CalcNewBarValue:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r4, r1, #0
	mov	r8, r2
	add	r5, r3, #0
	ldr	r1, [sp, #0x18]
	ldr	r0, [sp, #0x1c]
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	lsl	r1, r1, #0x1b
	lsr	r2, r1, #0x18
	ldr	r1, [r5]
	ldr	r0, .L674
	cmp	r1, r0
	bne	.L650	@cond_branch
	cmp	r7, r2
	bge	.L651	@cond_branch
	lsl	r0, r4, #0x8
	str	r0, [r5]
	b	.L650
.L675:
	.align	2, 0
.L674:
	.word	-0x8000
.L651:
	str	r4, [r5]
.L650:
	mov	r0, r8
	sub	r4, r4, r0
	cmp	r4, #0
	bge	.L653	@cond_branch
	mov	r4, #0x0
	b	.L654
.L653:
	cmp	r4, r7
	ble	.L654	@cond_branch
	add	r4, r7, #0
.L654:
	cmp	r7, r2
	bge	.L656	@cond_branch
	ldr	r0, [r5]
	asr	r1, r0, #0x8
	add	r6, r0, #0
	cmp	r4, r1
	bne	.L658	@cond_branch
	mov	r0, #0xff
	and	r0, r0, r6
	cmp	r0, #0
	bne	.L658	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L671
.L656:
	ldr	r6, [r5]
	cmp	r4, r6
	bne	.L658	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	b	.L671
.L658:
	cmp	r7, r2
	bge	.L660	@cond_branch
	lsl	r0, r7, #0x8
	add	r1, r2, #0
	bl	__divsi3
	mov	r1, r8
	cmp	r1, #0
	bge	.L661	@cond_branch
	add	r0, r6, r0
	str	r0, [r5]
	asr	r2, r0, #0x8
	cmp	r2, r4
	blt	.L666	@cond_branch
	b	.L672
.L661:
	sub	r0, r6, r0
	str	r0, [r5]
	asr	r2, r0, #0x8
	mov	r1, #0xff
	and	r0, r0, r1
	cmp	r0, #0
	ble	.L664	@cond_branch
	add	r2, r2, #0x1
.L664:
	cmp	r2, r4
	bgt	.L666	@cond_branch
.L672:
	lsl	r0, r4, #0x8
	str	r0, [r5]
	add	r2, r4, #0
	b	.L666
.L660:
	mov	r0, r8
	cmp	r0, #0
	bge	.L667	@cond_branch
	ldr	r0, [r5]
	add	r0, r0, r3
	str	r0, [r5]
	cmp	r0, r4
	ble	.L670	@cond_branch
	b	.L673
.L667:
	ldr	r0, [r5]
	sub	r0, r0, r3
	str	r0, [r5]
	cmp	r0, r4
	bge	.L670	@cond_branch
.L673:
	str	r4, [r5]
.L670:
	ldr	r2, [r5]
.L666:
	add	r0, r2, #0
.L671:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 CalcNewBarValue,.Lfe41-CalcNewBarValue
	.align	2, 0
	.type	 CalcBarFilledPixels,function
	.thumb_func
CalcBarFilledPixels:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	ip, r3
	ldr	r7, [sp, #0x14]
	ldr	r0, [sp, #0x18]
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	sub	r5, r1, r2
	cmp	r5, #0
	bge	.L677	@cond_branch
	mov	r5, #0x0
	b	.L678
.L677:
	cmp	r5, r4
	ble	.L678	@cond_branch
	add	r5, r4, #0
.L678:
	lsl	r0, r6, #0x1b
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	cmp	r1, r6
	bcs	.L681	@cond_branch
	mov	r2, #0x0
.L683:
	add	r0, r7, r1
	strb	r2, [r0]
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r6
	bcc	.L683	@cond_branch
.L681:
	cmp	r4, r3
	bge	.L685	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	mul	r0, r0, r3
	add	r1, r4, #0
	bl	__divsi3
	asr	r0, r0, #0x8
	b	.L696
.L685:
	mov	r1, ip
	ldr	r0, [r1]
	mul	r0, r0, r3
	add	r1, r4, #0
	bl	__divsi3
.L696:
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r2, #0
	cmp	r3, #0
	bne	.L687	@cond_branch
	cmp	r5, #0
	ble	.L687	@cond_branch
	mov	r0, #0x1
	strb	r0, [r7]
	mov	r3, #0x1
	b	.L688
.L687:
	mov	r1, #0x0
	mov	r4, #0x8
.L689:
	cmp	r1, r6
	bcs	.L688	@cond_branch
	cmp	r2, #0x7
	bls	.L693	@cond_branch
	add	r0, r7, r1
	strb	r4, [r0]
	add	r0, r2, #0
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	b	.L689
.L693:
	add	r0, r7, r1
	strb	r2, [r0]
.L688:
	add	r0, r3, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe42:
	.size	 CalcBarFilledPixels,.Lfe42-CalcBarFilledPixels
	.align	2, 0
	.type	 sub_8074F28,function
	.thumb_func
sub_8074F28:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r2, #0
	mov	r8, r3
	ldr	r0, [r5]
	ldr	r1, [r5, #0x4]
	ldr	r2, [r5, #0x8]
	mov	r3, #0x6
	str	r3, [sp]
	mov	r3, #0x1
	str	r3, [sp, #0x4]
	add	r3, r6, #0
	bl	CalcNewBarValue
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	sub_8074F88
	ldr	r0, [r5]
	cmp	r0, #0x2f
	bgt	.L698	@cond_branch
	ldr	r0, [r6]
	lsl	r0, r0, #0x8
	lsr	r1, r0, #0x10
	b	.L699
.L698:
	ldrh	r1, [r6]
.L699:
	mov	r2, #0x0
	ldrsh	r0, [r5, r2]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, r8
	bl	DummiedOutFunction
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe43:
	.size	 sub_8074F28,.Lfe43-sub_8074F28
	.align	2, 0
	.type	 sub_8074F88,function
	.thumb_func
sub_8074F88:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x1c
	add	r5, r0, #0
	add	r3, r1, #0
	mov	r8, r2
	ldr	r0, [r5]
	ldr	r1, [r5, #0x4]
	ldr	r2, [r5, #0x8]
	add	r4, sp, #0x8
	str	r4, [sp]
	mov	r4, #0x6
	str	r4, [sp, #0x4]
	bl	CalcBarFilledPixels
	mov	r3, #0x0
	add	r7, sp, #0x10
	mov	ip, r7
	ldrb	r0, [r5, #0xc]
	lsl	r6, r0, #0x1b
	ldr	r4, [r5, #0x10]
.L704:
	lsl	r2, r3, #0x1
	add	r2, r2, ip
	lsr	r1, r6, #0xf
	mov	r0, sp
	add	r0, r0, r3
	add	r0, r0, #0x8
	ldrb	r0, [r0]
	add	r0, r4, r0
	orr	r1, r1, r0
	strh	r1, [r2]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x5
	bls	.L704	@cond_branch
	add	r0, r7, #0
	mov	r1, r8
	mov	r2, #0x6
	bl	CpuSet
	add	sp, sp, #0x1c
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 sub_8074F88,.Lfe44-sub_8074F88
	.align	2, 0
	.type	 GetScaledExpFraction,function
	.thumb_func
GetScaledExpFraction:
	push	{r4, r5, r6, r7, lr}
	add	r6, r2, #0
	lsl	r3, r3, #0x1b
	lsr	r7, r3, #0x18
	sub	r5, r0, r1
	cmp	r5, #0
	bge	.L707	@cond_branch
	mov	r5, #0x0
	b	.L708
.L707:
	cmp	r5, r6
	ble	.L708	@cond_branch
	add	r5, r6, #0
.L708:
	mul	r0, r0, r7
	add	r1, r6, #0
	bl	__divsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r5
	mul	r0, r0, r7
	add	r1, r6, #0
	bl	__divsi3
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	sub	r0, r4, r0
	cmp	r0, #0
	bge	.L710	@cond_branch
	neg	r0, r0
.L710:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe45:
	.size	 GetScaledExpFraction,.Lfe45-GetScaledExpFraction
	.align	2, 0
	.globl	GetScaledHPFraction
	.type	 GetScaledHPFraction,function
	.thumb_func
GetScaledHPFraction:
	push	{r4, lr}
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	mov	r0, r4
	mul	r0, r0, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L713	@cond_branch
	cmp	r4, #0
	ble	.L713	@cond_branch
	mov	r0, #0x1
.L713:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 GetScaledHPFraction,.Lfe46-GetScaledHPFraction
	.align	2, 0
	.globl	GetHPBarLevel
	.type	 GetHPBarLevel,function
	.thumb_func
GetHPBarLevel:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bne	.L715	@cond_branch
	mov	r0, #0x4
	b	.L716
.L715:
	mov	r2, #0x30
	bl	GetScaledHPFraction
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x3
	cmp	r1, #0x18
	bhi	.L716	@cond_branch
	mov	r0, #0x2
	cmp	r1, #0x9
	bhi	.L716	@cond_branch
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
.L716:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetHPBarLevel,.Lfe47-GetHPBarLevel
	.align	2, 0
	.type	 AddTextPrinterAndCreateWindowOnHealthbox,function
	.thumb_func
AddTextPrinterAndCreateWindowOnHealthbox:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	mov	sl, r0
	mov	r8, r1
	mov	r9, r2
	add	r5, r3, #0
	ldr	r7, [sp, #0x40]
	ldr	r0, .L724
	ldr	r1, [r0, #0x4]		@ created by thumb_load_double_from_address
	ldr	r0, [r0]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r0, sp, #0x18
	bl	AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r4, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r5, #0x4
	orr	r1, r1, r5
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	FillWindowPixelBuffer
	add	r0, sp, #0x14
	mov	r2, #0x0
	strb	r5, [r0]
	add	r1, r0, #0
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r0, #0x3
	strb	r0, [r1, #0x2]
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	str	r2, [sp]
	str	r2, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0xc]
	mov	r0, sl
	str	r0, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x0
	mov	r2, r8
	mov	r3, r9
	bl	AddTextPrinterParameterized4
	str	r4, [r7]
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetWindowAttribute
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L725:
	.align	2, 0
.L724:
	.word	sHealthboxWindowTemplate
.Lfe48:
	.size	 AddTextPrinterAndCreateWindowOnHealthbox,.Lfe48-AddTextPrinterAndCreateWindowOnHealthbox
	.align	2, 0
	.type	 RemoveWindowOnHealthbox,function
	.thumb_func
RemoveWindowOnHealthbox:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	pop	{r0}
	bx	r0
.Lfe49:
	.size	 RemoveWindowOnHealthbox,.Lfe49-RemoveWindowOnHealthbox
	.align	2, 0
	.type	 FillHealthboxObject,function
	.thumb_func
FillHealthboxObject:
	push	{lr}
	add	sp, sp, #-0x4
	add	r3, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r1, r0, #0x8
	add	r0, r0, r1
	lsl	r1, r0, #0x10
	add	r0, r0, r1
	str	r0, [sp]
	lsl	r2, r2, #0x3
	ldr	r0, .L728
	and	r2, r2, r0
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	orr	r2, r2, r0
	mov	r0, sp
	add	r1, r3, #0
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L729:
	.align	2, 0
.L728:
	.word	0x1fffff
.Lfe50:
	.size	 FillHealthboxObject,.Lfe50-FillHealthboxObject
	.align	2, 0
	.type	 HpTextIntoHealthboxObject,function
	.thumb_func
HpTextIntoHealthboxObject:
	push	{lr}
	add	r3, r0, #0
	add	r0, r1, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r2, r2, #0x3
	ldr	r1, .L731
	and	r2, r2, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	orr	r2, r2, r1
	add	r1, r3, #0
	bl	CpuSet
	pop	{r0}
	bx	r0
.L732:
	.align	2, 0
.L731:
	.word	0x1fffff
.Lfe51:
	.size	 HpTextIntoHealthboxObject,.Lfe51-HpTextIntoHealthboxObject
	.align	2, 0
	.type	 TextIntoHealthboxObject,function
	.thumb_func
TextIntoHealthboxObject:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	add	r4, r2, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	add	r1, r6, r1
	lsl	r2, r4, #0x3
	ldr	r3, .L740
	and	r2, r2, r3
	mov	r3, #0x80
	lsl	r3, r3, #0x13
	orr	r2, r2, r3
	bl	CpuSet
	cmp	r4, #0
	ble	.L734	@cond_branch
.L735:
	add	r0, r5, #0
	add	r0, r0, #0x14
	add	r1, r6, #0
	add	r1, r1, #0x14
	ldr	r2, .L740+0x4
	bl	CpuSet
	add	r6, r6, #0x20
	add	r5, r5, #0x20
	sub	r4, r4, #0x1
	cmp	r4, #0
	bne	.L735	@cond_branch
.L734:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L741:
	.align	2, 0
.L740:
	.word	0x1fffff
	.word	0x4000003
.Lfe52:
	.size	 TextIntoHealthboxObject,.Lfe52-TextIntoHealthboxObject
	.align	2, 0
	.type	 SafariTextIntoHealthboxObject,function
	.thumb_func
SafariTextIntoHealthboxObject:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	lsl	r4, r2, #0x3
	ldr	r0, .L743
	and	r4, r4, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x13
	orr	r4, r4, r0
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CpuSet
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r6, r6, r0
	add	r0, r5, #0
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CpuSet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L744:
	.align	2, 0
.L743:
	.word	0x1fffff
.Lfe53:
	.size	 SafariTextIntoHealthboxObject,.Lfe53-SafariTextIntoHealthboxObject
.text
	.align	2, 0

