@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sPlayerBufferCommands,object
	.size	 sPlayerBufferCommands,228
sPlayerBufferCommands:
	.word	PlayerHandleGetMonData
	.word	PlayerHandleGetRawMonData
	.word	PlayerHandleSetMonData
	.word	PlayerHandleSetRawMonData
	.word	PlayerHandleLoadMonSprite
	.word	PlayerHandleSwitchInAnim
	.word	PlayerHandleReturnMonToBall
	.word	PlayerHandleDrawTrainerPic
	.word	PlayerHandleTrainerSlide
	.word	PlayerHandleTrainerSlideBack
	.word	PlayerHandleFaintAnimation
	.word	PlayerHandlePaletteFade
	.word	PlayerHandleSuccessBallThrowAnim
	.word	PlayerHandleBallThrowAnim
	.word	PlayerHandlePause
	.word	PlayerHandleMoveAnimation
	.word	PlayerHandlePrintString
	.word	PlayerHandlePrintSelectionString
	.word	PlayerHandleChooseAction
	.word	PlayerHandleUnknownYesNoBox
	.word	PlayerHandleChooseMove
	.word	PlayerHandleChooseItem
	.word	PlayerHandleChoosePokemon
	.word	PlayerHandleCmd23
	.word	PlayerHandleHealthBarUpdate
	.word	PlayerHandleExpUpdate
	.word	PlayerHandleStatusIconUpdate
	.word	PlayerHandleStatusAnimation
	.word	PlayerHandleStatusXor
	.word	PlayerHandleDataTransfer
	.word	PlayerHandleDMA3Transfer
	.word	PlayerHandlePlayBGM
	.word	PlayerHandleCmd32
	.word	PlayerHandleTwoReturnValues
	.word	PlayerHandleChosenMonReturnValue
	.word	PlayerHandleOneReturnValue
	.word	PlayerHandleOneReturnValue_Duplicate
	.word	PlayerHandleCmd37
	.word	PlayerHandleCmd38
	.word	PlayerHandleCmd39
	.word	PlayerHandleCmd40
	.word	PlayerHandleHitAnimation
	.word	PlayerHandleCmd42
	.word	PlayerHandlePlaySE
	.word	PlayerHandlePlayFanfareOrBGM
	.word	PlayerHandleFaintingCry
	.word	PlayerHandleIntroSlide
	.word	PlayerHandleIntroTrainerBallThrow
	.word	PlayerHandleDrawPartyStatusSummary
	.word	PlayerHandleHidePartyStatusSummary
	.word	PlayerHandleEndBounceEffect
	.word	PlayerHandleSpriteInvisibility
	.word	PlayerHandleBattleAnimation
	.word	PlayerHandleLinkStandbyMsg
	.word	PlayerHandleResetActionMoveSelection
	.word	PlayerHandleCmd55
	.word	PlayerCmdEnd
	.type	 sTargetIdentities,object
sTargetIdentities:
	.byte	0x0
	.byte	0x2
	.byte	0x3
	.byte	0x1
	.size	 sTargetIdentities,4
	.type	 sUnknown_0831C5FC,object
sUnknown_0831C5FC:
	.byte	0x48
	.byte	0x48
	.byte	0x20
	.byte	0x5a
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x58
	.size	 sUnknown_0831C5FC,8
.text
	.align	2, 0
	.globl	nullsub_21
	.type	 nullsub_21,function
	.thumb_func
nullsub_21:
	bx	lr
.Lfe1:
	.size	 nullsub_21,.Lfe1-nullsub_21
	.align	2, 0
	.globl	SetControllerToPlayer
	.type	 SetControllerToPlayer,function
	.thumb_func
SetControllerToPlayer:
	ldr	r1, .L4
	ldr	r0, .L4+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L4+0x8
	str	r1, [r0]
	ldr	r0, .L4+0xc
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r0, .L4+0x10
	strb	r1, [r0]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PlayerBufferRunCommand
	.word	gDoingBattleAnim
	.word	gPlayerDpadHoldFrames
.Lfe2:
	.size	 SetControllerToPlayer,.Lfe2-SetControllerToPlayer
	.align	2, 0
	.type	 PlayerBufferExecCompleted,function
	.thumb_func
PlayerBufferExecCompleted:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L9
	ldr	r4, .L9+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L9+0x8
	str	r1, [r0]
	ldr	r0, .L9+0xc
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L7	@cond_branch
	bl	GetMultiplayerId
	mov	r1, sp
	strb	r0, [r1]
	mov	r0, #0x2
	mov	r1, #0x4
	mov	r2, sp
	bl	PrepareBufferDataTransferLink
	ldr	r1, .L9+0x10
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r1
	mov	r1, #0x38
	strb	r1, [r0]
	b	.L8
.L10:
	.align	2, 0
.L9:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	PlayerBufferRunCommand
	.word	gBattleTypeFlags
	.word	gBattleBufferA
.L7:
	ldr	r2, .L11
	ldr	r1, .L11+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, [r2]
	bic	r0, r0, r1
	str	r0, [r2]
.L8:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gBattleControllerExecFlags
	.word	gBitTable
.Lfe3:
	.size	 PlayerBufferExecCompleted,.Lfe3-PlayerBufferExecCompleted
	.align	2, 0
	.type	 PlayerBufferRunCommand,function
	.thumb_func
PlayerBufferRunCommand:
	push	{lr}
	ldr	r2, .L17
	ldr	r1, .L17+0x4
	ldr	r0, .L17+0x8
	ldrb	r3, [r0]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, [r2]
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L14	@cond_branch
	ldr	r0, .L17+0xc
	lsl	r1, r3, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x38
	bhi	.L15	@cond_branch
	ldr	r0, .L17+0x10
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, [r1]
	bl	_call_via_r0
	b	.L14
.L18:
	.align	2, 0
.L17:
	.word	gBattleControllerExecFlags
	.word	gBitTable
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	sPlayerBufferCommands
.L15:
	bl	PlayerBufferExecCompleted
.L14:
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 PlayerBufferRunCommand,.Lfe4-PlayerBufferRunCommand
	.align	2, 0
	.type	 CompleteOnBankSpritePosX_0,function
	.thumb_func
CompleteOnBankSpritePosX_0:
	push	{lr}
	ldr	r2, .L21
	ldr	r1, .L21+0x4
	ldr	r0, .L21+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x24
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L20	@cond_branch
	bl	PlayerBufferExecCompleted
.L20:
	pop	{r0}
	bx	r0
.L22:
	.align	2, 0
.L21:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.Lfe5:
	.size	 CompleteOnBankSpritePosX_0,.Lfe5-CompleteOnBankSpritePosX_0
	.align	2, 0
	.type	 HandleInputChooseAction,function
	.thumb_func
HandleInputChooseAction:
	push	{r4, r5, r6, r7, lr}
	ldr	r3, .L62
	ldr	r4, .L62+0x4
	ldrb	r0, [r4]
	lsl	r2, r0, #0x9
	add	r1, r3, #0x2
	add	r1, r2, r1
	ldrb	r5, [r1]
	add	r3, r3, #0x3
	add	r2, r2, r3
	ldrb	r1, [r2]
	lsl	r1, r1, #0x8
	orr	r5, r5, r1
	mov	r1, #0x1
	mov	r2, #0x7
	mov	r3, #0x1
	bl	DoBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x7
	mov	r3, #0x1
	bl	DoBounceEffect
	ldr	r0, .L62+0x8
	ldrh	r1, [r0, #0x30]
	mov	r0, #0xf0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L24	@cond_branch
	ldr	r0, .L62+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x2
	bne	.L24	@cond_branch
	ldr	r1, .L62+0x10
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L56
.L63:
	.align	2, 0
.L62:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gMain
	.word	gSaveBlock2Ptr
	.word	gPlayerDpadHoldFrames
.L24:
	ldr	r1, .L64
	mov	r0, #0x0
.L56:
	strb	r0, [r1]
	ldr	r0, .L64+0x4
	ldrh	r2, [r0, #0x2e]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L26	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L64+0x8
	ldr	r0, .L64+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L29	@cond_branch
	cmp	r0, #0x1
	bgt	.L34	@cond_branch
	cmp	r0, #0
	beq	.L28	@cond_branch
	b	.L58
.L65:
	.align	2, 0
.L64:
	.word	gPlayerDpadHoldFrames
	.word	gMain
	.word	gActionSelectionCursor
	.word	gActiveBattler
.L34:
	cmp	r0, #0x2
	beq	.L30	@cond_branch
	cmp	r0, #0x3
	beq	.L31	@cond_branch
	b	.L58
.L28:
	mov	r0, #0x1
	mov	r1, #0x0
	b	.L61
.L29:
	mov	r0, #0x1
	mov	r1, #0x1
	b	.L61
.L30:
	mov	r0, #0x1
	mov	r1, #0x2
	b	.L61
.L31:
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	b	.L58
.L26:
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L36	@cond_branch
	ldr	r5, .L66
	ldr	r4, .L66+0x4
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB355
	b	.L23	@long jump
.LCB355:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	ActionSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x1
	b	.L59
.L67:
	.align	2, 0
.L66:
	.word	gActionSelectionCursor
	.word	gActiveBattler
.L36:
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L39	@cond_branch
	ldr	r5, .L68
	ldr	r4, .L68+0x4
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB397
	b	.L23	@long jump
.LCB397:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	ActionSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x1
	b	.L59
.L69:
	.align	2, 0
.L68:
	.word	gActionSelectionCursor
	.word	gActiveBattler
.L39:
	mov	r7, #0x40
	add	r0, r7, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L42	@cond_branch
	ldr	r5, .L70
	ldr	r4, .L70+0x4
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L23	@cond_branch
	b	.L60
.L71:
	.align	2, 0
.L70:
	.word	gActionSelectionCursor
	.word	gActiveBattler
.L42:
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L45	@cond_branch
	ldr	r5, .L72
	ldr	r4, .L72+0x4
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L23	@cond_branch
.L60:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	ActionSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x2
.L59:
	eor	r0, r0, r2
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
	b	.L23
.L73:
	.align	2, 0
.L72:
	.word	gActionSelectionCursor
	.word	gActiveBattler
.L45:
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L49	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, #0x3b
	bls	.L48	@cond_branch
.L49:
	ldr	r4, .L74
	ldr	r0, [r4]
	and	r0, r0, r3
	cmp	r0, #0
	beq	.L23	@cond_branch
	ldr	r6, .L74+0x4
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L23	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	ldr	r1, .L74+0x8
	ldrb	r1, [r1]
	ldr	r2, .L74+0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L23	@cond_branch
	ldr	r0, [r4]
	and	r0, r0, r7
	cmp	r0, #0
	bne	.L23	@cond_branch
	ldr	r0, .L74+0x10
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bne	.L51	@cond_branch
	cmp	r5, #0xc
	bhi	.L23	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x1
	bl	AddBagItem
.L51:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	mov	r1, #0xc
.L61:
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
.L58:
	bl	PlayerBufferExecCompleted
	b	.L23
.L75:
	.align	2, 0
.L74:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleBufferA
.L48:
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L23	@cond_branch
	bl	SwapHpBarsWithHpText
.L23:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 HandleInputChooseAction,.Lfe6-HandleInputChooseAction
	.align	2, 0
	.type	 sub_80577F0,function
	.thumb_func
sub_80577F0:
	push	{r4, lr}
	ldr	r4, .L77
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	EndBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	EndBounceEffect
	ldr	r1, .L77+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L77+0x8
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L78:
	.align	2, 0
.L77:
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	HandleInputChooseTarget
.Lfe7:
	.size	 sub_80577F0,.Lfe7-sub_80577F0
	.align	2, 0
	.type	 HandleInputChooseTarget,function
	.thumb_func
HandleInputChooseTarget:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L159
	mov	r0, sp
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L159+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	mov	r2, #0xf
	mov	r3, #0x1
	bl	DoBounceEffect
	mov	r4, #0x0
	ldr	r0, .L159+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L80	@cond_branch
.L81:
	ldr	r0, .L159+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L84	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	EndBounceEffect
.L84:
	add	r4, r4, #0x1
	ldr	r0, .L159+0x8
	ldrb	r0, [r0]
	cmp	r4, r0
	blt	.L81	@cond_branch
.L80:
	ldr	r2, .L159+0xc
	ldrh	r1, [r2, #0x2c]
	mov	r0, #0xf0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L87	@cond_branch
	ldr	r0, .L159+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x2
	bne	.L87	@cond_branch
	ldr	r1, .L159+0x14
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L155
.L160:
	.align	2, 0
.L159:
	.word	sTargetIdentities
	.word	gMultiUsePlayerCursor
	.word	gBattlersCount
	.word	gMain
	.word	gSaveBlock2Ptr
	.word	gPlayerDpadHoldFrames
.L87:
	ldr	r1, .L161
	mov	r0, #0x0
.L155:
	strb	r0, [r1]
	ldrh	r2, [r2, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L89	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L161+0x4
	ldr	r1, .L161+0x8
	ldr	r4, .L161+0xc
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L161+0x10
	str	r1, [r0]
	ldr	r1, .L161+0x14
	ldr	r0, .L161+0x18
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	EndBounceEffect
	bl	PlayerBufferExecCompleted
	b	.L90
.L162:
	.align	2, 0
.L161:
	.word	gPlayerDpadHoldFrames
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gMultiUsePlayerCursor
	.word	sub_8039B2C
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.L89:
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L92	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, #0x3b
	bls	.L91	@cond_branch
.L92:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L163
	ldr	r1, .L163+0x4
	ldr	r5, .L163+0x8
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L163+0xc
	str	r1, [r0]
	ldr	r1, .L163+0x10
	ldr	r4, .L163+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L163+0x18
	str	r1, [r0]
	ldrb	r0, [r4]
	mov	r1, #0x1
	mov	r2, #0x7
	mov	r3, #0x1
	bl	DoBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x7
	mov	r3, #0x1
	bl	DoBounceEffect
	ldrb	r0, [r5]
	mov	r1, #0x1
	bl	EndBounceEffect
	b	.L90
.L164:
	.align	2, 0
.L163:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gMultiUsePlayerCursor
	.word	sub_8039B2C
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleInputChooseMove
.L91:
	mov	r0, #0x60
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB858
	b	.L94	@long jump
.LCB858:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L165
	ldr	r1, .L165+0x4
	ldr	r3, .L165+0x8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L165+0xc
	str	r1, [r0]
	add	r5, r3, #0
.L95:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r4, #0x0
	mov	r0, sp
	b	.L156
.L166:
	.align	2, 0
.L165:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gMultiUsePlayerCursor
	.word	sub_8039B2C
.L100:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L104	@cond_branch
	mov	r2, sp
	add	r0, r2, r4
.L156:
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L100	@cond_branch
.L104:
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L107	@cond_branch
	mov	r4, #0x4
.L107:
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r0, [r0]
	bl	GetBattlerAtPosition
	strb	r0, [r5]
	ldr	r1, .L167
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L104	@cond_branch
	mov	r4, #0x0
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L117	@cond_branch
	cmp	r0, #0x1
	bgt	.L120	@cond_branch
	cmp	r0, #0
	beq	.L112	@cond_branch
	b	.L110
.L168:
	.align	2, 0
.L167:
	.word	gBattlersCount
.L120:
	cmp	r0, #0x2
	beq	.L112	@cond_branch
	cmp	r0, #0x3
	beq	.L117	@cond_branch
	b	.L110
.L112:
	ldr	r2, .L169
	ldrb	r0, [r2]
	ldrb	r1, [r5]
	cmp	r0, r1
	bne	.L117	@cond_branch
	ldr	r1, .L169+0x4
	ldrb	r2, [r2]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L169+0x8
	add	r0, r0, r1
	ldr	r1, .L169+0xc
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0xd
	bl	GetMonData
	ldr	r2, .L169+0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x6]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L110	@cond_branch
.L117:
	add	r4, r4, #0x1
.L110:
	ldr	r0, .L169+0x14
	ldrb	r1, [r0]
	ldr	r2, .L169+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	ldr	r0, .L169+0x1c
	cmp	r1, #0
	beq	.L97	@cond_branch
	mov	r4, #0x0
.L97:
	cmp	r4, #0
	beq	.L95	@cond_branch
	b	.L157
.L170:
	.align	2, 0
.L169:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gMoveSelectionCursor
	.word	gBattleMoves
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gMultiUsePlayerCursor
.L94:
	mov	r0, #0x90
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB1061
	b	.L90	@long jump
.LCB1061:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L171
	ldr	r1, .L171+0x4
	ldr	r3, .L171+0x8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L171+0xc
	str	r1, [r0]
	add	r5, r3, #0
.L126:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r4, #0x0
	mov	r0, sp
	b	.L158
.L172:
	.align	2, 0
.L171:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gMultiUsePlayerCursor
	.word	sub_8039B2C
.L131:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L135	@cond_branch
	mov	r2, sp
	add	r0, r2, r4
.L158:
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L131	@cond_branch
.L135:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L138	@cond_branch
	mov	r4, #0x0
.L138:
	mov	r1, sp
	add	r0, r1, r4
	ldrb	r0, [r0]
	bl	GetBattlerAtPosition
	strb	r0, [r5]
	ldr	r1, .L173
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L135	@cond_branch
	mov	r4, #0x0
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L148	@cond_branch
	cmp	r0, #0x1
	bgt	.L151	@cond_branch
	cmp	r0, #0
	beq	.L143	@cond_branch
	b	.L141
.L174:
	.align	2, 0
.L173:
	.word	gBattlersCount
.L151:
	cmp	r0, #0x2
	beq	.L143	@cond_branch
	cmp	r0, #0x3
	beq	.L148	@cond_branch
	b	.L141
.L143:
	ldr	r2, .L175
	ldrb	r0, [r2]
	ldrb	r1, [r5]
	cmp	r0, r1
	bne	.L148	@cond_branch
	ldr	r1, .L175+0x4
	ldrb	r2, [r2]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L175+0x8
	add	r0, r0, r1
	ldr	r1, .L175+0xc
	add	r2, r2, r1
	ldrb	r1, [r2]
	add	r1, r1, #0xd
	bl	GetMonData
	ldr	r2, .L175+0x10
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x6]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L141	@cond_branch
.L148:
	add	r4, r4, #0x1
.L141:
	ldr	r0, .L175+0x14
	ldrb	r1, [r0]
	ldr	r2, .L175+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	ldr	r0, .L175+0x1c
	cmp	r1, #0
	beq	.L128	@cond_branch
	mov	r4, #0x0
.L128:
	cmp	r4, #0
	beq	.L126	@cond_branch
.L157:
	ldr	r2, .L175+0x20
	ldr	r1, .L175+0x24
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L175+0x28
	str	r1, [r0]
.L90:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gMoveSelectionCursor
	.word	gBattleMoves
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gMultiUsePlayerCursor
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_8039AD8
.Lfe8:
	.size	 HandleInputChooseTarget,.Lfe8-HandleInputChooseTarget
	.align	2, 0
	.type	 HandleInputChooseMove,function
	.thumb_func
HandleInputChooseMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0x0
	mov	r8, r0
	ldr	r3, .L227
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	ldr	r1, .L227+0x4
	add	r6, r0, r1
	ldr	r2, .L227+0x8
	ldrh	r1, [r2, #0x2c]
	mov	r0, #0xf0
	and	r0, r0, r1
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldr	r0, .L227+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0x2
	bne	.L178	@cond_branch
	ldr	r1, .L227+0x10
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	b	.L221
.L228:
	.align	2, 0
.L227:
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gMain
	.word	gSaveBlock2Ptr
	.word	gPlayerDpadHoldFrames
.L178:
	ldr	r1, .L229
	mov	r0, #0x0
.L221:
	strb	r0, [r1]
	ldrh	r2, [r2, #0x2e]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB1339
	b	.L180	@long jump
.LCB1339:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L229+0x4
	ldr	r0, .L229+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r1, r6, r0
	ldrh	r0, [r1]
	cmp	r0, #0xae
	bne	.L181	@cond_branch
	ldrb	r0, [r6, #0x12]
	mov	r4, #0x0
	cmp	r0, #0x7
	beq	.L184	@cond_branch
	ldrb	r1, [r6, #0x13]
	mov	r0, #0x7
	eor	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	asr	r4, r0, #0x1f
	mov	r0, #0x10
	and	r4, r4, r0
	b	.L184
.L230:
	.align	2, 0
.L229:
	.word	gPlayerDpadHoldFrames
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.L181:
	ldr	r2, .L231
	ldrh	r1, [r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x6]
.L184:
	mov	r0, #0x10
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldr	r0, .L231+0x4
	ldr	r1, .L231+0x8
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L186
.L232:
	.align	2, 0
.L231:
	.word	gBattleMoves
	.word	gMultiUsePlayerCursor
	.word	gActiveBattler
.L185:
	ldr	r0, .L233
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	add	r1, r0, #0
	mov	r2, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	eor	r0, r0, r2
	bl	GetBattlerAtPosition
	ldr	r1, .L233+0x4
	strb	r0, [r1]
.L186:
	ldr	r5, .L233+0x8
	ldr	r0, .L233
	ldrb	r3, [r0]
	lsl	r2, r3, #0x9
	add	r1, r5, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r7, r0, #0
	cmp	r1, #0
	bne	.L187	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L189	@cond_branch
	add	r0, r5, #0x2
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L189	@cond_branch
	mov	r0, #0x1
	add	r8, r8, r0
	b	.L189
.L234:
	.align	2, 0
.L233:
	.word	gActiveBattler
	.word	gMultiUsePlayerCursor
	.word	gBattleBufferA
.L187:
	mov	r0, #0x7d
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L190	@cond_branch
	mov	r0, #0x1
	add	r8, r8, r0
.L190:
	ldr	r0, .L235
	add	r0, r3, r0
	add	r1, r6, #0
	add	r1, r1, #0x8
	ldrb	r0, [r0]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L220	@cond_branch
	mov	r0, #0x12
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L189	@cond_branch
	mov	r0, #0x0
	bl	CountAliveMonsInBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L189	@cond_branch
	ldrb	r0, [r7]
	bl	GetDefaultMoveTarget
	ldr	r1, .L235+0x4
	strb	r0, [r1]
	mov	r0, #0x0
	mov	r8, r0
.L189:
	ldr	r7, .L235+0x8
	mov	r0, r8
	cmp	r0, #0
	bne	.L194	@cond_branch
.L220:
	ldr	r1, .L235
	ldrb	r0, [r7]
	add	r0, r0, r1
	ldrb	r2, [r0]
	ldr	r0, .L235+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	b	.L222
.L236:
	.align	2, 0
.L235:
	.word	gMoveSelectionCursor
	.word	gMultiUsePlayerCursor
	.word	gActiveBattler
.L194:
	ldr	r1, .L237
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L237+0x4
	str	r1, [r0]
	mov	r0, #0x12
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L196	@cond_branch
	ldr	r1, .L237+0x8
	ldrb	r0, [r7]
	b	.L223
.L238:
	.align	2, 0
.L237:
	.word	gBattlerControllerFuncs
	.word	HandleInputChooseTarget
	.word	gMultiUsePlayerCursor
.L196:
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	ldr	r1, .L239
	ldrb	r1, [r1]
	ldr	r2, .L239+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L198	@cond_branch
	mov	r0, #0x3
	b	.L224
.L240:
	.align	2, 0
.L239:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L198:
	mov	r0, #0x1
.L224:
	bl	GetBattlerAtPosition
	ldr	r1, .L241
.L223:
	strb	r0, [r1]
	ldr	r2, .L241+0x4
	ldr	r1, .L241+0x8
	ldr	r0, .L241
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L241+0xc
	b	.L225
.L242:
	.align	2, 0
.L241:
	.word	gMultiUsePlayerCursor
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_8039AD8
.L180:
	mov	r6, #0x2
	add	r0, r6, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L202	@cond_branch
	ldrb	r0, [r1]
	cmp	r0, #0x3b
	bls	.L201	@cond_branch
.L202:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L243
.L222:
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	bl	PlayerBufferExecCompleted
	b	.L200
.L244:
	.align	2, 0
.L243:
	.word	0xffff
.L201:
	mov	r0, #0x20
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L204	@cond_branch
	ldr	r4, .L245
	ldrb	r0, [r7]
	add	r2, r0, r4
	ldrb	r1, [r2]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB1681
	b	.L200	@long jump
.LCB1681:
	ldrb	r0, [r2]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r7]
	add	r1, r1, r4
	ldrb	r0, [r1]
	mov	r2, #0x1
	eor	r0, r0, r2
	b	.L226
.L246:
	.align	2, 0
.L245:
	.word	gMoveSelectionCursor
.L204:
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L207	@cond_branch
	ldr	r4, .L247
	ldrb	r0, [r7]
	add	r3, r0, r4
	ldrb	r2, [r3]
	mov	r6, #0x1
	add	r0, r5, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.LCB1719
	b	.L200	@long jump
.LCB1719:
	ldr	r1, .L247+0x4
	add	r0, r6, #0
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.LCB1730
	b	.L200	@long jump
.LCB1730:
	ldrb	r0, [r3]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r7]
	add	r1, r1, r4
	ldrb	r0, [r1]
	eor	r0, r0, r6
	b	.L226
.L248:
	.align	2, 0
.L247:
	.word	gMoveSelectionCursor
	.word	gNumberOfMovesToChoose
.L207:
	mov	r0, #0x40
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L210	@cond_branch
	ldr	r4, .L249
	ldrb	r0, [r7]
	add	r2, r0, r4
	ldrb	r1, [r2]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L200	@cond_branch
	ldrb	r0, [r2]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r7]
	add	r1, r1, r4
	ldrb	r0, [r1]
	mov	r2, #0x2
	eor	r0, r0, r2
	b	.L226
.L250:
	.align	2, 0
.L249:
	.word	gMoveSelectionCursor
.L210:
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L213	@cond_branch
	ldr	r4, .L251
	ldrb	r0, [r7]
	add	r3, r0, r4
	ldrb	r2, [r3]
	mov	r5, #0x2
	add	r0, r6, #0
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L200	@cond_branch
	ldr	r1, .L251+0x4
	add	r0, r5, #0
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L200	@cond_branch
	ldrb	r0, [r3]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r7]
	add	r1, r1, r4
	ldrb	r0, [r1]
	eor	r0, r0, r5
.L226:
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
	bl	MoveSelectionDisplayPpNumber
	bl	MoveSelectionDisplayMoveType
	b	.L200
.L252:
	.align	2, 0
.L251:
	.word	gMoveSelectionCursor
	.word	gNumberOfMovesToChoose
.L213:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L200	@cond_branch
	ldr	r0, .L253
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L200	@cond_branch
	ldr	r0, .L253+0x4
	ldr	r5, [r0]
	and	r5, r5, r6
	cmp	r5, #0
	bne	.L200	@cond_branch
	ldr	r4, .L253+0x8
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x1d
	bl	MoveSelectionCreateCursorAt
	ldrb	r0, [r7]
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L218	@cond_branch
	ldr	r0, .L253+0xc
	strb	r5, [r0]
	b	.L219
.L254:
	.align	2, 0
.L253:
	.word	gNumberOfMovesToChoose
	.word	gBattleTypeFlags
	.word	gMoveSelectionCursor
	.word	gMultiUsePlayerCursor
.L218:
	ldr	r1, .L255
	add	r0, r0, #0x1
	strb	r0, [r1]
	add	r0, r1, #0
.L219:
	ldrb	r0, [r0]
	mov	r1, #0x1b
	bl	MoveSelectionCreateCursorAt
	ldr	r0, .L255+0x4
	mov	r1, #0xb
	bl	BattlePutTextOnWindow
	ldr	r1, .L255+0x8
	ldr	r0, .L255+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L255+0x10
.L225:
	str	r1, [r0]
.L200:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L256:
	.align	2, 0
.L255:
	.word	gMultiUsePlayerCursor
	.word	gText_BattleSwitchWhich
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleMoveSwitching
.Lfe9:
	.size	 HandleInputChooseMove,.Lfe9-HandleInputChooseMove
	.align	2, 0
	.globl	sub_8057FBC
	.type	 sub_8057FBC,function
	.thumb_func
sub_8057FBC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	ldr	r4, .L264
	ldrh	r1, [r4, #0x2e]
	mov	r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L258	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r7, #0x1
.L258:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L259	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L264+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L264+0x8
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	mov	r7, #0xff
.L259:
	ldrh	r1, [r4, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L260	@cond_branch
	ldr	r5, .L264+0xc
	ldr	r4, .L264+0x10
	ldrb	r0, [r4]
	add	r2, r0, r5
	ldrb	r1, [r2]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L260	@cond_branch
	ldrb	r0, [r2]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x1
	eor	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
.L260:
	ldr	r0, .L264
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L261	@cond_branch
	ldr	r5, .L264+0xc
	ldr	r4, .L264+0x10
	ldrb	r0, [r4]
	add	r3, r0, r5
	ldrb	r2, [r3]
	mov	r6, #0x1
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L261	@cond_branch
	ldr	r1, .L264+0x14
	add	r0, r6, #0
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L261	@cond_branch
	ldrb	r0, [r3]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	eor	r0, r0, r6
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
.L261:
	ldr	r0, .L264
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L262	@cond_branch
	ldr	r5, .L264+0xc
	ldr	r4, .L264+0x10
	ldrb	r0, [r4]
	add	r2, r0, r5
	ldrb	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L262	@cond_branch
	ldrb	r0, [r2]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	mov	r2, #0x2
	eor	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
.L262:
	ldr	r0, .L264
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L263	@cond_branch
	ldr	r5, .L264+0xc
	ldr	r4, .L264+0x10
	ldrb	r0, [r4]
	add	r3, r0, r5
	ldrb	r2, [r3]
	mov	r6, #0x2
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L263	@cond_branch
	ldr	r1, .L264+0x14
	add	r0, r6, #0
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L263	@cond_branch
	ldrb	r0, [r3]
	bl	MoveSelectionDestroyCursorAt
	ldrb	r1, [r4]
	add	r1, r1, r5
	ldrb	r0, [r1]
	eor	r0, r0, r6
	strb	r0, [r1]
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
.L263:
	add	r0, r7, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L265:
	.align	2, 0
.L264:
	.word	gMain
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gMoveSelectionCursor
	.word	gActiveBattler
	.word	gNumberOfMovesToChoose
.Lfe10:
	.size	 sub_8057FBC,.Lfe10-sub_8057FBC
	.align	2, 0
	.type	 HandleMoveSwitching,function
	.thumb_func
HandleMoveSwitching:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	ldr	r0, .L341
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x5
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2186
	b	.L267	@long jump
.LCB2186:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L341+0x4
	mov	sl, r0
	ldr	r1, .L341+0x8
	mov	r8, r1
	ldrb	r1, [r1]
	add	r2, r1, r0
	ldr	r5, .L341+0xc
	ldrb	r0, [r2]
	ldrb	r3, [r5]
	cmp	r0, r3
	bne	.LCB2205
	b	.L268	@long jump
.LCB2205:
	lsl	r1, r1, #0x9
	ldr	r0, .L341+0x10
	add	r1, r1, r0
	mov	r9, r1
	ldrb	r1, [r2]
	lsl	r1, r1, #0x1
	add	r1, r1, r9
	ldrh	r6, [r1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	strh	r6, [r0]
	mov	r1, r8
	ldrb	r0, [r1]
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r7, r9
	add	r7, r7, #0x8
	add	r1, r7, r1
	ldrb	r6, [r1]
	ldrb	r0, [r5]
	add	r0, r7, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r5]
	add	r0, r7, r0
	strb	r6, [r0]
	mov	r2, r8
	ldrb	r0, [r2]
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r2, r9
	add	r2, r2, #0xc
	add	r1, r2, r1
	ldrb	r6, [r1]
	ldrb	r0, [r5]
	add	r0, r2, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r5]
	add	r2, r2, r0
	strb	r6, [r2]
	mov	r3, r8
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r2, .L341+0x14
	add	r6, r0, r2
	ldrb	r4, [r6, #0x18]
	lsl	r3, r4, #0x18
	lsr	r2, r3, #0x1c
	ldr	r0, .L341+0x18
	mov	ip, r0
	add	r1, r1, sl
	ldrb	r0, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldr	r0, [r0]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L269	@cond_branch
	lsr	r1, r3, #0x1c
	bic	r1, r1, r0
	lsl	r1, r1, #0x4
	mov	r2, #0xf
	add	r0, r2, #0
	and	r0, r0, r4
	orr	r0, r0, r1
	strb	r0, [r6, #0x18]
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r3, .L341+0x14
	add	r1, r1, r3
	ldrb	r4, [r1, #0x18]
	lsr	r3, r4, #0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, ip
	ldr	r0, [r0]
	orr	r0, r0, r3
	lsl	r0, r0, #0x4
	and	r2, r2, r4
	orr	r2, r2, r0
	strb	r2, [r1, #0x18]
.L269:
	bl	MoveSelectionDisplayMoveNames
	mov	r6, #0x0
	mov	ip, r7
	mov	r5, sp
	add	r5, r5, #0x18
	str	r5, [sp, #0x1c]
	ldr	r2, .L341+0x1c
	mov	r0, r8
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r4, r0, #0
	add	r4, r4, #0x3b
	mov	r7, r8
	mov	sl, r2
	mov	r5, #0x3
.L273:
	mov	r1, sp
	add	r3, r1, r6
	ldrb	r1, [r4]
	lsl	r2, r6, #0x1
	add	r0, r5, #0
	lsl	r0, r0, r2
	and	r1, r1, r0
	asr	r1, r1, r2
	strb	r1, [r3]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L273	@cond_branch
	ldr	r1, .L341+0x4
	ldrb	r0, [r7]
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, sp
	ldrb	r0, [r0]
	ldr	r2, [sp, #0x1c]
	strb	r0, [r2]
	ldrb	r0, [r7]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r3, sp
	add	r2, r3, r0
	ldr	r1, .L341+0xc
	ldrb	r0, [r1]
	add	r0, r0, sp
	ldrb	r0, [r0]
	mov	r3, #0x0
	strb	r0, [r2]
	ldrb	r0, [r1]
	mov	r5, sp
	add	r1, r5, r0
	ldr	r2, [sp, #0x1c]
	ldrb	r0, [r2]
	strb	r0, [r1]
	strb	r3, [r2]
	mov	r6, #0x0
	ldr	r2, [sp, #0x1c]
.L278:
	mov	r3, sp
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r6, #0x1
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L278	@cond_branch
	ldrb	r1, [r7]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, sl
	add	r0, r0, #0x3b
	ldr	r5, [sp, #0x1c]
	ldrb	r1, [r5]
	strb	r1, [r0]
	mov	r6, #0x0
	add	r4, r7, #0
	mov	r3, #0x58
	mov	r0, #0x24
	add	r0, r0, sl
	mov	r8, r0
	mov	r2, r9
	mov	r7, sl
	add	r7, r7, #0xc
	mov	r5, ip
.L283:
	lsl	r1, r6, #0x1
	ldrb	r0, [r4]
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r1, r1, r7
	ldrh	r0, [r2]
	strh	r0, [r1]
	ldrb	r0, [r4]
	mov	r1, r0
	mul	r1, r1, r3
	add	r1, r6, r1
	add	r1, r1, r8
	add	r0, r5, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L283	@cond_branch
	ldr	r2, .L341+0x8
	ldrb	r1, [r2]
	mov	r0, #0x58
	mul	r0, r0, r1
	mov	r1, sl
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB2455
	b	.L268	@long jump
.LCB2455:
	mov	r6, #0x0
	mov	r1, sp
	add	r1, r1, #0x4
	str	r1, [sp, #0x20]
	add	r3, sp, #0xc
	mov	sl, r3
	ldr	r5, .L341+0x20
	mov	r9, r5
	mov	r8, r2
	mov	r7, #0x64
	ldr	r5, .L341+0x24
	add	r4, r1, #0
.L289:
	mov	r1, r8
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	add	r1, r6, #0
	add	r1, r1, #0xd
	bl	GetMonData
	strh	r0, [r4]
	mov	r2, r8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r9
	ldrh	r0, [r0]
	mul	r0, r0, r7
	add	r0, r0, r5
	add	r1, r6, #0
	add	r1, r1, #0x11
	bl	GetMonData
	mov	r3, sl
	add	r1, r3, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L289	@cond_branch
	ldr	r1, .L341+0x20
	ldr	r0, .L341+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L341+0x24
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	ldr	r5, [sp, #0x1c]
	strb	r0, [r5]
	mov	r6, #0x0
	mov	r5, #0x3
	ldr	r4, [sp, #0x1c]
.L294:
	mov	r0, sp
	add	r3, r0, r6
	lsl	r2, r6, #0x1
	add	r1, r5, #0
	lsl	r1, r1, r2
	ldrb	r0, [r4]
	and	r0, r0, r1
	asr	r0, r0, r2
	strb	r0, [r3]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L294	@cond_branch
	ldr	r4, .L341+0x4
	ldr	r3, .L341+0x8
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r2, [sp, #0x20]
	add	r1, r2, r1
	ldrh	r6, [r1]
	ldr	r2, .L341+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	ldr	r5, [sp, #0x20]
	add	r0, r5, r0
	ldrh	r0, [r0]
	mov	r5, #0x0
	strh	r0, [r1]
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	ldr	r1, [sp, #0x20]
	add	r0, r1, r0
	strh	r6, [r0]
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r1, [r0]
	add	r1, r1, sl
	ldrb	r6, [r1]
	ldrb	r0, [r2]
	add	r0, r0, sl
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2]
	add	r0, r0, sl
	strb	r6, [r0]
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r0, [r0]
	add	r0, r0, sp
	ldrb	r0, [r0]
	ldr	r1, [sp, #0x1c]
	strb	r0, [r1]
	ldrb	r0, [r3]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r3, sp
	add	r1, r3, r0
	ldrb	r0, [r2]
	add	r0, r0, sp
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r2]
	add	r1, r3, r0
	ldr	r2, [sp, #0x1c]
	ldrb	r0, [r2]
	strb	r0, [r1]
	strb	r5, [r2]
	mov	r6, #0x0
	ldr	r2, [sp, #0x1c]
.L299:
	mov	r3, sp
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r6, #0x1
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	orr	r0, r0, r1
	strb	r0, [r2]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L299	@cond_branch
	mov	r6, #0x0
	ldr	r5, .L341+0x20
	mov	sl, r5
	ldr	r0, .L341+0x8
	mov	r9, r0
	mov	r1, #0x64
	mov	r8, r1
	ldr	r7, .L341+0x24
	ldr	r5, [sp, #0x20]
	add	r5, r5, #0x8
	ldr	r4, [sp, #0x20]
.L304:
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r3, r8
	mul	r3, r3, r0
	add	r0, r3, #0
	add	r0, r0, r7
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, sl
	ldrh	r0, [r0]
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r0, r0, r7
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r2, r5, #0
	bl	SetMonData
	add	r5, r5, #0x1
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L304	@cond_branch
	ldr	r1, .L341+0x20
	ldr	r0, .L341+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L341+0x24
	add	r0, r0, r1
	mov	r1, #0x15
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
.L268:
	ldr	r1, .L341+0x28
	ldr	r2, .L341+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L341+0x2c
	str	r1, [r0]
	ldr	r3, .L341+0x4
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldr	r1, .L341+0xc
	ldrb	r1, [r1]
	strb	r1, [r0]
	ldrb	r0, [r2]
	add	r0, r0, r3
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
	b	.L336
.L342:
	.align	2, 0
.L341:
	.word	gMain
	.word	gMoveSelectionCursor
	.word	gActiveBattler
	.word	gMultiUsePlayerCursor
	.word	gBattleBufferA+0x4
	.word	gDisableStructs
	.word	gBitTable
	.word	gBattleMons
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	HandleInputChooseMove
.L267:
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L307	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L343
	ldrb	r0, [r0]
	bl	MoveSelectionDestroyCursorAt
	ldr	r1, .L343+0x4
	ldr	r4, .L343+0x8
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
	ldr	r1, .L343+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L343+0x10
	str	r1, [r0]
.L336:
	bl	MoveSelectionDisplayPpString
	bl	MoveSelectionDisplayPpNumber
	bl	MoveSelectionDisplayMoveType
	b	.L306
.L344:
	.align	2, 0
.L343:
	.word	gMultiUsePlayerCursor
	.word	gMoveSelectionCursor
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	HandleInputChooseMove
.L307:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L309	@cond_branch
	ldr	r3, .L345
	ldrb	r2, [r3]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	bne	.LCB2805
	b	.L306	@long jump
.LCB2805:
	ldr	r0, .L345+0x4
	ldr	r1, .L345+0x8
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r5, [r1]
	cmp	r2, r5
	bne	.L311	@cond_branch
.L339:
	ldrb	r0, [r1]
	mov	r1, #0x1d
	bl	MoveSelectionCreateCursorAt
	b	.L312
.L346:
	.align	2, 0
.L345:
	.word	gMultiUsePlayerCursor
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.L311:
	ldrb	r0, [r3]
	bl	MoveSelectionDestroyCursorAt
.L312:
	ldr	r4, .L347
	ldrb	r0, [r4]
	mov	r1, #0x1
	b	.L338
.L348:
	.align	2, 0
.L347:
	.word	gMultiUsePlayerCursor
.L309:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L316	@cond_branch
	ldr	r3, .L349
	ldrb	r2, [r3]
	mov	r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.LCB2874
	b	.L306	@long jump
.LCB2874:
	ldr	r1, .L349+0x4
	mov	r0, #0x1
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcc	.LCB2885
	b	.L306	@long jump
.LCB2885:
	ldr	r0, .L349+0x8
	ldr	r1, .L349+0xc
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r2, r0
	beq	.L339	@cond_branch
	b	.L311
.L350:
	.align	2, 0
.L349:
	.word	gMultiUsePlayerCursor
	.word	gNumberOfMovesToChoose
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.L316:
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L323	@cond_branch
	ldr	r3, .L351
	ldrb	r2, [r3]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L306	@cond_branch
	ldr	r0, .L351+0x4
	ldr	r1, .L351+0x8
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r5, [r1]
	cmp	r2, r5
	bne	.L325	@cond_branch
	ldrb	r0, [r1]
	mov	r1, #0x1d
	bl	MoveSelectionCreateCursorAt
	b	.L326
.L352:
	.align	2, 0
.L351:
	.word	gMultiUsePlayerCursor
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.L325:
	ldrb	r0, [r3]
	bl	MoveSelectionDestroyCursorAt
.L326:
	ldr	r4, .L353
	ldrb	r0, [r4]
	mov	r1, #0x2
.L338:
	eor	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L353+0x4
	ldr	r0, .L353+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r4]
	ldrb	r0, [r0]
	cmp	r1, r0
	beq	.L337	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0x1b
	bl	MoveSelectionCreateCursorAt
	b	.L306
.L354:
	.align	2, 0
.L353:
	.word	gMultiUsePlayerCursor
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.L323:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L306	@cond_branch
	ldr	r3, .L355
	ldrb	r2, [r3]
	mov	r0, #0x2
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L306	@cond_branch
	ldr	r1, .L355+0x4
	mov	r0, #0x2
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L306	@cond_branch
	ldr	r0, .L355+0x8
	ldr	r1, .L355+0xc
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r2, r0
	bne	.L332	@cond_branch
	ldrb	r0, [r1]
	mov	r1, #0x1d
	bl	MoveSelectionCreateCursorAt
	b	.L333
.L356:
	.align	2, 0
.L355:
	.word	gMultiUsePlayerCursor
	.word	gNumberOfMovesToChoose
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.L332:
	ldrb	r0, [r3]
	bl	MoveSelectionDestroyCursorAt
.L333:
	ldr	r4, .L357
	ldrb	r0, [r4]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r4]
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L357+0x4
	ldr	r0, .L357+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r4]
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L334	@cond_branch
.L337:
	add	r0, r1, #0
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
	b	.L306
.L358:
	.align	2, 0
.L357:
	.word	gMultiUsePlayerCursor
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.L334:
	ldrb	r0, [r4]
	mov	r1, #0x1b
	bl	MoveSelectionCreateCursorAt
.L306:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 HandleMoveSwitching,.Lfe11-HandleMoveSwitching
	.align	2, 0
	.type	 sub_80586F8,function
	.thumb_func
sub_80586F8:
	push	{lr}
	ldr	r0, .L366
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L360	@cond_branch
	ldr	r0, .L366+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L363	@cond_branch
	mov	r0, #0x5a
	bl	m4aSongNumStop
	ldr	r3, .L366+0x8
	ldr	r0, .L366+0xc
	add	r2, r3, r0
	ldrb	r1, [r2]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L366+0x10
	ldr	r0, [r0]
	str	r0, [r3]
	ldr	r0, .L366+0x14
	bl	SetMainCallback2
	ldr	r0, .L366+0x18
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L362	@cond_branch
	bl	TryPutLinkBattleTvShowOnAir
.L362:
	bl	FreeAllWindowBuffers
	b	.L363
.L367:
	.align	2, 0
.L366:
	.word	gWirelessCommType
	.word	gReceivedRemoteLinkPlayers
	.word	gMain
	.word	0x439
	.word	gPreBattleCallback1
	.word	sub_8038D64
	.word	gBattleOutcome
.L360:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L363	@cond_branch
	mov	r0, #0x5a
	bl	m4aSongNumStop
	ldr	r3, .L368
	ldr	r0, .L368+0x4
	add	r2, r3, r0
	ldrb	r1, [r2]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L368+0x8
	ldr	r0, [r0]
	str	r0, [r3]
	ldr	r0, .L368+0xc
	bl	SetMainCallback2
	ldr	r0, .L368+0x10
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L365	@cond_branch
	bl	TryPutLinkBattleTvShowOnAir
.L365:
	bl	FreeAllWindowBuffers
.L363:
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gMain
	.word	0x439
	.word	gPreBattleCallback1
	.word	sub_8038D64
	.word	gBattleOutcome
.Lfe12:
	.size	 sub_80586F8,.Lfe12-sub_80586F8
	.align	2, 0
	.globl	sub_80587B0
	.type	 sub_80587B0,function
	.thumb_func
sub_80587B0:
	push	{lr}
	ldr	r0, .L377
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L371	@cond_branch
	ldr	r0, .L377+0x4
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L372	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L371	@cond_branch
	ldr	r0, .L377+0x8
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L374	@cond_branch
	bl	sub_800AC34
	b	.L375
.L378:
	.align	2, 0
.L377:
	.word	gPaletteFade
	.word	gBattleTypeFlags
	.word	gWirelessCommType
.L374:
	bl	sub_800ADF8
.L375:
	ldr	r1, .L379
	ldr	r0, .L379+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L379+0x8
	str	r1, [r0]
	b	.L371
.L380:
	.align	2, 0
.L379:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	sub_80586F8
.L372:
	mov	r0, #0x5a
	bl	m4aSongNumStop
	ldr	r2, .L381
	ldr	r0, .L381+0x4
	add	r3, r2, r0
	ldrb	r1, [r3]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L381+0x8
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r0, [r2, #0x8]
	bl	SetMainCallback2
.L371:
	pop	{r0}
	bx	r0
.L382:
	.align	2, 0
.L381:
	.word	gMain
	.word	0x439
	.word	gPreBattleCallback1
.Lfe13:
	.size	 sub_80587B0,.Lfe13-sub_80587B0
	.align	2, 0
	.type	 CompleteOnBattlerSpriteCallbackDummy,function
	.thumb_func
CompleteOnBattlerSpriteCallbackDummy:
	push	{lr}
	ldr	r2, .L385
	ldr	r1, .L385+0x4
	ldr	r0, .L385+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L385+0xc
	cmp	r1, r0
	bne	.L384	@cond_branch
	bl	PlayerBufferExecCompleted
.L384:
	pop	{r0}
	bx	r0
.L386:
	.align	2, 0
.L385:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe14:
	.size	 CompleteOnBattlerSpriteCallbackDummy,.Lfe14-CompleteOnBattlerSpriteCallbackDummy
	.align	2, 0
	.type	 CompleteOnBankSpriteCallbackDummy2,function
	.thumb_func
CompleteOnBankSpriteCallbackDummy2:
	push	{lr}
	ldr	r2, .L389
	ldr	r1, .L389+0x4
	ldr	r0, .L389+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L389+0xc
	cmp	r1, r0
	bne	.L388	@cond_branch
	bl	PlayerBufferExecCompleted
.L388:
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.Lfe15:
	.size	 CompleteOnBankSpriteCallbackDummy2,.Lfe15-CompleteOnBankSpriteCallbackDummy2
	.align	2, 0
	.type	 sub_80588B4,function
	.thumb_func
sub_80588B4:
	push	{r4, r5, r6, lr}
	ldr	r6, .L393
	ldr	r5, .L393+0x4
	ldr	r4, .L393+0x8
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L393+0xc
	cmp	r1, r0
	bne	.L392	@cond_branch
	ldr	r0, .L393+0x10
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	bl	nullsub_25
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	bl	PlayerBufferExecCompleted
.L392:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L394:
	.align	2, 0
.L393:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gSaveBlock2Ptr
.Lfe16:
	.size	 sub_80588B4,.Lfe16-sub_80588B4
	.align	2, 0
	.type	 sub_8058924,function
	.thumb_func
sub_8058924:
	push	{r4, lr}
	ldr	r4, .L397
	ldr	r1, [r4]
	ldr	r3, .L397+0x4
	ldrb	r0, [r3]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x9]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x9]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	bne	.L396	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x9]
	bl	PlayerBufferExecCompleted
.L396:
	pop	{r4}
	pop	{r0}
	bx	r0
.L398:
	.align	2, 0
.L397:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe17:
	.size	 sub_8058924,.Lfe17-sub_8058924
	.align	2, 0
	.type	 sub_805896C,function
	.thumb_func
sub_805896C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r7, #0x0
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L401	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L400	@cond_branch
	ldr	r0, .L408
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L400	@cond_branch
.L401:
	ldr	r2, .L408+0x4
	ldr	r1, .L408+0x8
	ldr	r3, .L408+0xc
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, [r0]
	ldr	r0, .L408+0x10
	mov	sl, r3
	cmp	r1, r0
	bne	.L403	@cond_branch
	b	.L407
.L409:
	.align	2, 0
.L408:
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
.L400:
	ldr	r3, .L410
	ldr	r6, .L410+0x4
	ldr	r2, .L410+0x8
	ldrb	r4, [r2]
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r3, #0
	add	r5, r5, #0x1c
	add	r0, r0, r5
	ldr	r3, [r0]
	ldr	r0, .L410+0xc
	mov	sl, r2
	cmp	r3, r0
	bne	.L403	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L403	@cond_branch
	mov	r7, #0x1
.L403:
	cmp	r7, #0
	beq	.L405	@cond_branch
.L407:
	ldr	r0, .L410+0x10
	mov	r9, r0
	ldr	r0, [r0]
	mov	r6, sl
	ldrb	r2, [r6]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r3
	ldrb	r1, [r4, #0x1]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L405	@cond_branch
	mov	r1, #0x2
	mov	r8, r1
	mov	r1, r8
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L405	@cond_branch
	ldrb	r1, [r4]
	mov	r3, #0x7f
	add	r0, r3, #0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r2, r9
	ldr	r0, [r2]
	ldrb	r2, [r6]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r4, #0x2
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	mov	r0, r9
	ldr	r2, [r0]
	ldrb	r0, [r6]
	mov	r1, r8
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	and	r3, r3, r1
	strb	r3, [r0]
	mov	r1, r9
	ldr	r2, [r1]
	ldrb	r0, [r6]
	mov	r1, r8
	eor	r1, r1, r0
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	and	r4, r4, r1
	strb	r4, [r0, #0x1]
	ldr	r4, .L410+0x14
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r7, .L410+0x18
	ldrb	r1, [r6]
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L410+0x1c
	add	r0, r0, r4
	bl	HandleLowHpMusicChange
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L406	@cond_branch
	ldrb	r0, [r6]
	mov	r1, r8
	eor	r1, r1, r0
	lsl	r0, r1, #0x1
	add	r0, r0, r7
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	bl	HandleLowHpMusicChange
.L406:
	mov	r2, r9
	ldr	r0, [r2]
	mov	r2, sl
	ldrb	r1, [r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x9]
	ldr	r1, .L410+0x20
	mov	r2, sl
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L410+0x24
	str	r1, [r0]
.L405:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L411:
	.align	2, 0
.L410:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	0x27f9
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	sub_8058924
.Lfe18:
	.size	 sub_805896C,.Lfe18-sub_805896C
	.align	2, 0
	.type	 sub_8058B40,function
	.thumb_func
sub_8058B40:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r0, #0x0
	mov	r9, r0
	mov	r8, r0
	ldr	r4, .L430
	ldr	r0, [r4]
	ldr	r7, .L430+0x4
	ldrb	r2, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r5, #0x88
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L413	@cond_branch
	ldr	r0, .L430+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L430+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8172EF0
.L413:
	ldr	r1, [r4]
	ldrb	r0, [r7]
	mov	r6, #0x2
	add	r2, r6, #0
	eor	r2, r2, r0
	ldr	r1, [r1, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L414	@cond_branch
	ldr	r0, .L430+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L430+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8172EF0
.L414:
	ldr	r0, [r4]
	ldrb	r2, [r7]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r4, r0, r3
	ldrb	r1, [r4]
	mov	r5, #0x8
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L415	@cond_branch
	add	r1, r6, #0
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L415	@cond_branch
	ldrb	r1, [r4, #0x1]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L416	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L417	@cond_branch
	ldr	r0, .L430+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L417	@cond_branch
	ldr	r4, .L430+0x14
	ldrb	r0, [r7]
	add	r1, r6, #0
	eor	r1, r1, r0
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L430+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L430+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r7]
	eor	r0, r0, r6
	bl	sub_8076918
	ldrb	r0, [r7]
	eor	r0, r0, r6
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L417:
	ldr	r5, .L430+0x14
	ldr	r4, .L430+0x4
	ldrb	r1, [r4]
	add	r0, r1, r5
	ldrb	r0, [r0]
	ldr	r2, .L430+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L430+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r4]
	bl	sub_8076918
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
.L416:
	ldr	r0, .L430
	ldr	r2, [r0]
	ldr	r0, .L430+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
.L415:
	ldr	r5, .L430
	ldr	r0, [r5]
	ldr	r4, .L430+0x4
	ldrb	r2, [r4]
	ldr	r3, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x80
	bne	.L418	@cond_branch
	mov	r1, #0x2
	eor	r1, r1, r2
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L418	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L418	@cond_branch
	ldr	r0, [r5]
	ldrb	r1, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L419	@cond_branch
	ldr	r0, .L430+0x10
	ldr	r0, [r0]
	mov	r1, #0x42
	and	r0, r0, r1
	cmp	r0, #0x42
	bne	.L420	@cond_branch
	ldr	r0, .L430+0x18
	bl	m4aMPlayContinue
	b	.L419
.L431:
	.align	2, 0
.L430:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gHealthboxSpriteIds
	.word	gMPlayInfo_BGM
.L420:
	ldr	r0, .L432
	ldr	r1, .L432+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
.L419:
	ldr	r0, .L432+0x8
	ldr	r2, [r0]
	ldr	r0, .L432+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x1]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x1]
	mov	r0, #0x1
	mov	r9, r0
.L418:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L423	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L422	@cond_branch
	ldr	r0, .L432+0x10
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L422	@cond_branch
.L423:
	ldr	r2, .L432+0x14
	ldr	r0, .L432+0x18
	ldr	r1, .L432+0xc
	ldrb	r4, [r1]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r3, [r0]
	ldr	r0, .L432+0x1c
	cmp	r3, r0
	bne	.L425	@cond_branch
	ldr	r0, .L432+0x20
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r3
	bne	.L425	@cond_branch
	b	.L429
.L433:
	.align	2, 0
.L432:
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
.L422:
	ldr	r2, .L434
	ldr	r7, .L434+0x4
	ldr	r0, .L434+0x8
	ldrb	r3, [r0]
	add	r0, r3, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L434+0xc
	cmp	r4, r0
	bne	.L425	@cond_branch
	ldr	r6, .L434+0x10
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r5, [r0]
	cmp	r5, r4
	bne	.L425	@cond_branch
	mov	r0, #0x2
	eor	r3, r3, r0
	add	r0, r3, r7
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r4, [r0]
	cmp	r4, r5
	bne	.L425	@cond_branch
	add	r0, r3, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L425	@cond_branch
.L429:
	mov	r0, #0x1
	mov	r8, r0
.L425:
	mov	r0, r9
	cmp	r0, #0
	beq	.L427	@cond_branch
	mov	r0, r8
	cmp	r0, #0
	beq	.L427	@cond_branch
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L428	@cond_branch
	ldr	r0, .L434+0x14
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L428	@cond_branch
	ldr	r2, .L434+0x4
	ldr	r0, .L434+0x8
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L434
	add	r0, r0, r1
	bl	DestroySprite
.L428:
	ldr	r1, .L434+0x4
	ldr	r4, .L434+0x8
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L434
	add	r0, r0, r1
	bl	DestroySprite
	ldr	r3, .L434+0x18
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r1, [r2, #0x9]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r0, [r3]
	ldrb	r2, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r1, .L434+0x1c
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L434+0x20
	str	r1, [r0]
.L427:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattleTypeFlags
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	sub_805896C
.Lfe19:
	.size	 sub_8058B40,.Lfe19-sub_8058B40
	.align	2, 0
	.type	 sub_8058EDC,function
	.thumb_func
sub_8058EDC:
	push	{r4, r5, r6, lr}
	ldr	r2, .L439
	ldr	r0, .L439+0x4
	ldr	r6, .L439+0x8
	ldrb	r3, [r6]
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r4, [r0]
	ldr	r0, .L439+0xc
	cmp	r4, r0
	bne	.L437	@cond_branch
	ldr	r5, .L439+0x10
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L437	@cond_branch
	ldr	r0, .L439+0x14
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	cmp	r0, r4
	bne	.L437	@cond_branch
	add	r0, r3, #0
	bl	CopyBattleSpriteInvisibility
	ldr	r0, [r5]
	ldrb	r2, [r6]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r5]
	ldrb	r2, [r6]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldr	r4, .L439+0x18
	add	r0, r4, #0
	bl	FreeSpriteTilesByTag
	add	r0, r4, #0
	bl	FreeSpritePaletteByTag
	ldr	r0, [r5]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L438	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
.L438:
	ldr	r0, .L439+0x1c
	ldrb	r1, [r6]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L439+0x20
	str	r0, [r1]
.L437:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L440:
	.align	2, 0
.L439:
	.word	gSprites
	.word	gHealthboxSpriteIds
	.word	gActiveBattler
	.word	SpriteCallbackDummy
	.word	gBattleSpritesDataPtr
	.word	gBattlerSpriteIds
	.word	0x27f9
	.word	gBattlerControllerFuncs
	.word	sub_8058FC0
.Lfe20:
	.size	 sub_8058EDC,.Lfe20-sub_8058EDC
	.align	2, 0
	.type	 sub_8058FC0,function
	.thumb_func
sub_8058FC0:
	push	{r4, lr}
	ldr	r0, .L443
	ldr	r0, [r0]
	ldr	r4, .L443+0x4
	ldrb	r1, [r4]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L442	@cond_branch
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L442	@cond_branch
	ldr	r0, .L443+0x8
	ldr	r1, .L443+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	ldr	r2, .L443+0x10
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L443+0x14
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	PlayerBufferExecCompleted
.L442:
	pop	{r4}
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gMPlayInfo_BGM
	.word	0xffff
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe21:
	.size	 sub_8058FC0,.Lfe21-sub_8058FC0
	.align	2, 0
	.type	 sub_805902C,function
	.thumb_func
sub_805902C:
	push	{r4, r5, r6, lr}
	ldr	r6, .L448
	ldr	r0, [r6]
	ldr	r5, .L448+0x4
	ldrb	r2, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r3, r2, #0x1
	add	r0, r3, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x88
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L446	@cond_branch
	ldr	r0, .L448+0x8
	add	r0, r3, r0
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L448+0xc
	add	r1, r1, r0
	add	r0, r2, #0
	bl	sub_8172EF0
.L446:
	ldr	r4, .L448+0x10
	ldr	r0, .L448+0x14
	ldrb	r2, [r5]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r3, r0, #0x2
	add	r0, r4, #0
	add	r0, r0, #0x1c
	add	r0, r3, r0
	ldr	r1, [r0]
	ldr	r0, .L448+0x18
	cmp	r1, r0
	bne	.L447	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L447	@cond_branch
	add	r0, r3, r4
	bl	DestroySprite
	ldr	r4, .L448+0x1c
	ldrb	r1, [r5]
	add	r0, r1, r4
	ldrb	r0, [r0]
	ldr	r2, .L448+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L448+0xc
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	ldrb	r0, [r5]
	bl	sub_8076918
	ldrb	r0, [r5]
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	ldr	r1, .L448+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L448+0x24
	str	r1, [r0]
.L447:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L449:
	.align	2, 0
.L448:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gUnknown_03005D7C
	.word	SpriteCallbackDummy
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	sub_8058EDC
.Lfe22:
	.size	 sub_805902C,.Lfe22-sub_805902C
	.align	2, 0
	.globl	c3_0802FDF4
	.type	 c3_0802FDF4,function
	.thumb_func
c3_0802FDF4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsCryPlayingOrClearCrySongs
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L451	@cond_branch
	ldr	r0, .L452
	ldr	r1, .L452+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	bl	m4aMPlayVolumeControl
	add	r0, r4, #0
	bl	DestroyTask
.L451:
	pop	{r4}
	pop	{r0}
	bx	r0
.L453:
	.align	2, 0
.L452:
	.word	gMPlayInfo_BGM
	.word	0xffff
.Lfe23:
	.size	 c3_0802FDF4,.Lfe23-c3_0802FDF4
	.align	2, 0
	.type	 CompleteOnHealthbarDone,function
	.thumb_func
CompleteOnHealthbarDone:
	push	{r4, r5, r6, lr}
	ldr	r5, .L457
	ldrb	r0, [r5]
	ldr	r6, .L457+0x4
	add	r1, r0, r6
	ldrb	r1, [r1]
	mov	r2, #0x0
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r1, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L455	@cond_branch
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r0, [r0]
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
	b	.L456
.L458:
	.align	2, 0
.L457:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
.L455:
	ldr	r2, .L459
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L459+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	bl	PlayerBufferExecCompleted
.L456:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L460:
	.align	2, 0
.L459:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.Lfe24:
	.size	 CompleteOnHealthbarDone,.Lfe24-CompleteOnHealthbarDone
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter,function
	.thumb_func
CompleteOnInactiveTextPrinter:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L462	@cond_branch
	bl	PlayerBufferExecCompleted
.L462:
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 CompleteOnInactiveTextPrinter,.Lfe25-CompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 Task_GiveExpToMon,function
	.thumb_func
Task_GiveExpToMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r1, .L474
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r8, r0
	ldrb	r0, [r0, #0x8]
	mov	sl, r0
	mov	r1, r8
	ldrb	r7, [r1, #0xc]
	str	r7, [sp, #0x8]
	ldrh	r2, [r1, #0xa]
	str	r2, [sp, #0xc]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L465	@cond_branch
	ldr	r1, .L474+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	sl, r0
	bne	.LCB4769
	b	.L464	@long jump
.LCB4769:
.L465:
	mov	r0, #0x64
	mov	r1, sl
	mul	r1, r1, r0
	ldr	r0, .L474+0x8
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	ldr	r3, .L474+0xc
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L474+0x10
	lsl	r1, r5, #0x3
	sub	r1, r1, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x13]
	mov	r1, #0xca
	lsl	r1, r1, #0x1
	mul	r1, r1, r2
	add	r4, r4, r1
	add	r4, r4, r3
	ldr	r2, [r4]
	str	r2, [sp]
	ldr	r3, [sp, #0xc]
	lsl	r1, r3, #0x10
	asr	r1, r1, #0x10
	add	r0, r0, r1
	cmp	r0, r2
	bcc	.L466	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r6, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	ldr	r0, [sp, #0xc]
	sub	r2, r0, r2
	ldr	r4, .L474+0x14
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	BtlController_EmitTwoReturnValues
	strb	r5, [r4]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L467	@cond_branch
	ldr	r2, .L474+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	mov	r1, sl
	ldrh	r0, [r0]
	cmp	r1, r0
	beq	.L468	@cond_branch
	mov	r0, #0x2
	eor	r7, r7, r0
	lsl	r0, r7, #0x1
	add	r0, r0, r2
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L467	@cond_branch
.L468:
	ldr	r0, .L474+0x18
	b	.L472
.L475:
	.align	2, 0
.L474:
	.word	gTasks
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gBaseStats
	.word	gActiveBattler
	.word	Task_LaunchLvlUpAnim
.L467:
	ldr	r0, .L476
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r9
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L476+0x4
	b	.L473
.L477:
	.align	2, 0
.L476:
	.word	gTasks
	.word	DestroyExpTaskAndCompleteOnInactiveTextPrinter
.L466:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r6, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L478
	ldr	r3, [sp, #0x8]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldr	r1, .L478+0x4
	str	r1, [r0]
	mov	r0, r9
	bl	DestroyTask
	b	.L471
.L479:
	.align	2, 0
.L478:
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.L464:
	ldr	r0, .L480
.L472:
	mov	r1, r8
.L473:
	str	r0, [r1]
.L471:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L481:
	.align	2, 0
.L480:
	.word	Task_PrepareToGiveExpWithExpBar
.Lfe26:
	.size	 Task_GiveExpToMon,.Lfe26-Task_GiveExpToMon
	.align	2, 0
	.type	 Task_PrepareToGiveExpWithExpBar,function
	.thumb_func
Task_PrepareToGiveExpWithExpBar:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L483
	lsl	r2, r0, #0x2
	mov	r8, r2
	add	r8, r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x3
	mov	r8, r0
	add	r8, r8, r1
	mov	r2, r8
	ldrb	r1, [r2, #0x8]
	mov	r0, #0xa
	ldrsh	r2, [r2, r0]
	mov	r9, r2
	mov	r2, r8
	ldrb	r2, [r2, #0xc]
	mov	sl, r2
	mov	r0, #0x64
	mov	r6, r1
	mul	r6, r6, r0
	ldr	r0, .L483+0x4
	add	r6, r6, r0
	add	r0, r6, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	add	r0, r6, #0
	mov	r1, #0x19
	bl	GetMonData
	add	r3, r0, #0
	ldr	r6, .L483+0x8
	lsl	r1, r4, #0x2
	ldr	r2, .L483+0xc
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r2, [r0, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r6
	ldr	r1, [r1]
	sub	r3, r3, r1
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	add	r4, r4, r6
	ldr	r2, [r4]
	sub	r2, r2, r1
	ldr	r0, .L483+0x10
	add	r0, r0, sl
	ldrb	r1, [r0]
	mov	r0, r9
	neg	r0, r0
	str	r0, [sp]
	mov	r0, sl
	bl	SetBattleBarStruct
	mov	r0, #0x21
	bl	PlaySE
	ldr	r0, .L483+0x14
	mov	r1, r8
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L484:
	.align	2, 0
.L483:
	.word	gTasks
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gBaseStats
	.word	gHealthboxSpriteIds
	.word	sub_8059400
.Lfe27:
	.size	 Task_PrepareToGiveExpWithExpBar,.Lfe27-Task_PrepareToGiveExpWithExpBar
	.align	2, 0
	.type	 sub_8059400,function
	.thumb_func
sub_8059400:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L491
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r6, r0, r1
	ldrh	r1, [r6, #0x1c]
	mov	r2, #0x1c
	ldrsh	r0, [r6, r2]
	cmp	r0, #0xc
	bgt	.L486	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r6, #0x1c]
	b	.L487
.L492:
	.align	2, 0
.L491:
	.word	gTasks
.L486:
	ldrb	r0, [r6, #0x8]
	mov	r9, r0
	ldrh	r2, [r6, #0xa]
	mov	sl, r2
	ldrb	r7, [r6, #0xc]
	ldr	r5, .L493
	add	r5, r7, r5
	ldrb	r1, [r5]
	add	r0, r7, #0
	mov	r2, #0x1
	mov	r3, #0x0
	bl	MoveBattleBar
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	SetHealthboxSpriteVisible
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x1
	neg	r0, r0
	cmp	r4, r0
	bne	.L487	@cond_branch
	mov	r0, #0x21
	bl	m4aSongNumStop
	mov	r0, #0x64
	mov	r1, r9
	mul	r1, r1, r0
	ldr	r0, .L493+0x4
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x4]
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r3, .L493+0x8
	add	r4, r4, #0x1
	lsl	r4, r4, #0x2
	ldr	r2, .L493+0xc
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x13]
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	mul	r0, r0, r1
	add	r4, r4, r0
	add	r4, r4, r3
	ldr	r1, [r4]
	str	r1, [sp]
	mov	r2, sl
	lsl	r0, r2, #0x10
	asr	r4, r0, #0x10
	ldr	r0, [sp, #0x4]
	add	r0, r0, r4
	cmp	r0, r1
	blt	.L489	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x19
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0
	bl	CalculateMonStats
	ldr	r2, [sp]
	add	r0, sp, #0x4
	ldrh	r0, [r0]
	sub	r2, r2, r0
	sub	r2, r4, r2
	ldr	r4, .L493+0x10
	ldrb	r5, [r4]
	strb	r7, [r4]
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xb
	bl	BtlController_EmitTwoReturnValues
	strb	r5, [r4]
	ldr	r0, .L493+0x14
	str	r0, [r6]
	b	.L487
.L494:
	.align	2, 0
.L493:
	.word	gHealthboxSpriteIds
	.word	gPlayerParty
	.word	gExperienceTables
	.word	gBaseStats
	.word	gActiveBattler
	.word	Task_LaunchLvlUpAnim
.L489:
	str	r0, [sp, #0x4]
	add	r2, sp, #0x4
	add	r0, r5, #0
	mov	r1, #0x19
	bl	SetMonData
	ldr	r1, .L495
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldr	r1, .L495+0x4
	str	r1, [r0]
	mov	r0, r8
	bl	DestroyTask
.L487:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L496:
	.align	2, 0
.L495:
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe28:
	.size	 sub_8059400,.Lfe28-sub_8059400
	.align	2, 0
	.type	 Task_LaunchLvlUpAnim,function
	.thumb_func
Task_LaunchLvlUpAnim:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L499
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r4, [r0, #0xc]
	ldrb	r6, [r0, #0x8]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L498	@cond_branch
	ldr	r1, .L499+0x4
	mov	r0, #0x2
	add	r2, r4, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	bne	.L498	@cond_branch
	add	r4, r2, #0
.L498:
	add	r0, r4, #0
	add	r1, r4, #0
	add	r2, r4, #0
	mov	r3, #0x0
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, .L499
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L499+0x8
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L500:
	.align	2, 0
.L499:
	.word	gTasks
	.word	gBattlerPartyIndexes
	.word	Task_UpdateLvlInHealthbox
.Lfe29:
	.size	 Task_LaunchLvlUpAnim,.Lfe29-Task_LaunchLvlUpAnim
	.align	2, 0
	.type	 Task_UpdateLvlInHealthbox,function
	.thumb_func
Task_UpdateLvlInHealthbox:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L505
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrb	r5, [r2, #0xc]
	ldr	r0, .L505+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L502	@cond_branch
	ldrb	r4, [r2, #0x8]
	mov	r0, #0x64
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L505+0x8
	add	r7, r1, r0
	add	r0, r7, #0
	mov	r1, #0x38
	bl	GetMonData
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L503	@cond_branch
	ldr	r1, .L505+0xc
	mov	r0, #0x2
	add	r2, r5, #0
	eor	r2, r2, r0
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	bne	.L503	@cond_branch
	ldr	r0, .L505+0x10
	add	r0, r2, r0
	ldrb	r0, [r0]
	add	r1, r7, #0
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
	b	.L504
.L506:
	.align	2, 0
.L505:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gHealthboxSpriteIds
.L503:
	ldr	r0, .L507
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x64
	mul	r1, r1, r4
	ldr	r2, .L507+0x4
	add	r1, r1, r2
	mov	r2, #0x0
	bl	UpdateHealthboxAttribute
.L504:
	ldr	r0, .L507+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L507+0xc
	str	r0, [r1]
.L502:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	gHealthboxSpriteIds
	.word	gPlayerParty
	.word	gTasks
	.word	DestroyExpTaskAndCompleteOnInactiveTextPrinter
.Lfe30:
	.size	 Task_UpdateLvlInHealthbox,.Lfe30-Task_UpdateLvlInHealthbox
	.align	2, 0
	.type	 DestroyExpTaskAndCompleteOnInactiveTextPrinter,function
	.thumb_func
DestroyExpTaskAndCompleteOnInactiveTextPrinter:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L510
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrb	r1, [r4, #0x8]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L510+0x4
	add	r0, r0, r1
	mov	r1, #0x38
	bl	GetMonData
	ldrb	r0, [r4, #0xc]
	ldr	r1, .L510+0x8
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L510+0xc
	str	r1, [r0]
	add	r0, r5, #0
	bl	DestroyTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L511:
	.align	2, 0
.L510:
	.word	gTasks
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter
.Lfe31:
	.size	 DestroyExpTaskAndCompleteOnInactiveTextPrinter,.Lfe31-DestroyExpTaskAndCompleteOnInactiveTextPrinter
	.align	2, 0
	.type	 sub_80596A8,function
	.thumb_func
sub_80596A8:
	push	{r4, r5, r6, lr}
	ldr	r6, .L514
	ldr	r5, .L514+0x4
	ldr	r4, .L514+0x8
	ldrb	r2, [r4]
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r3, #0x22
	ldrsh	r1, [r0, r3]
	mov	r3, #0x26
	ldrsh	r0, [r0, r3]
	add	r1, r1, r0
	cmp	r1, #0xa0
	ble	.L513	@cond_branch
	ldr	r1, .L514+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L514+0x10
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	nullsub_24
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r0, [r0, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
	ldrb	r0, [r4]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	DestroySprite
	ldr	r1, .L514+0x14
	ldrb	r0, [r4]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PlayerBufferExecCompleted
.L513:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L515:
	.align	2, 0
.L514:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.Lfe32:
	.size	 sub_80596A8,.Lfe32-sub_80596A8
	.align	2, 0
	.type	 sub_8059744,function
	.thumb_func
sub_8059744:
	push	{r4, r5, r6, lr}
	ldr	r0, .L518
	ldr	r0, [r0]
	ldr	r6, .L518+0x4
	ldrb	r2, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L517	@cond_branch
	ldr	r5, .L518+0x8
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L518+0xc
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L518+0x10
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PlayerBufferExecCompleted
.L517:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L519:
	.align	2, 0
.L518:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe33:
	.size	 sub_8059744,.Lfe33-sub_8059744
	.align	2, 0
	.type	 CompleteOnInactiveTextPrinter2,function
	.thumb_func
CompleteOnInactiveTextPrinter2:
	push	{lr}
	mov	r0, #0x0
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L521	@cond_branch
	bl	PlayerBufferExecCompleted
.L521:
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 CompleteOnInactiveTextPrinter2,.Lfe34-CompleteOnInactiveTextPrinter2
	.align	2, 0
	.type	 OpenPartyMenuToChooseMon,function
	.thumb_func
OpenPartyMenuToChooseMon:
	push	{r4, lr}
	ldr	r0, .L524
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L523	@cond_branch
	ldr	r1, .L524+0x4
	ldr	r2, .L524+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L524+0xc
	str	r1, [r0]
	ldr	r3, .L524+0x10
	ldr	r1, .L524+0x14
	ldrb	r0, [r2]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r3
	ldrb	r4, [r1, #0x8]
	bl	DestroyTask
	bl	FreeAllWindowBuffers
	add	r0, r4, #0
	bl	OpenPartyMenuInBattle
.L523:
	pop	{r4}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gPaletteFade
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	WaitForMonSelection
	.word	gTasks
	.word	gUnknown_03005D7C
.Lfe35:
	.size	 OpenPartyMenuToChooseMon,.Lfe35-OpenPartyMenuToChooseMon
	.align	2, 0
	.type	 WaitForMonSelection,function
	.thumb_func
WaitForMonSelection:
	push	{lr}
	ldr	r0, .L531
	ldr	r1, [r0, #0x4]
	ldr	r0, .L531+0x4
	cmp	r1, r0
	bne	.L527	@cond_branch
	ldr	r0, .L531+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L527	@cond_branch
	ldr	r0, .L531+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L528	@cond_branch
	ldr	r0, .L531+0x10
	ldrb	r1, [r0]
	ldr	r2, .L531+0x14
	mov	r0, #0x1
	bl	BtlController_EmitChosenMonReturnValue
	b	.L529
.L532:
	.align	2, 0
.L531:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gPartyMenuUseExitCallback
	.word	gSelectedMonPartyId
	.word	gBattlePartyCurrentOrder
.L528:
	mov	r0, #0x1
	mov	r1, #0x6
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
.L529:
	ldr	r1, .L533
	ldr	r0, .L533+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L530	@cond_branch
	bl	PrintLinkStandbyMsg
.L530:
	bl	PlayerBufferExecCompleted
.L527:
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe36:
	.size	 WaitForMonSelection,.Lfe36-WaitForMonSelection
	.align	2, 0
	.type	 OpenBagAndChooseItem,function
	.thumb_func
OpenBagAndChooseItem:
	push	{lr}
	ldr	r0, .L537
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L536	@cond_branch
	ldr	r1, .L537+0x4
	ldr	r0, .L537+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L537+0xc
	str	r1, [r0]
	bl	nullsub_35
	bl	FreeAllWindowBuffers
	bl	CB2_BagMenuFromBattle
.L536:
	pop	{r0}
	bx	r0
.L538:
	.align	2, 0
.L537:
	.word	gPaletteFade
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteWhenChoseItem
.Lfe37:
	.size	 OpenBagAndChooseItem,.Lfe37-OpenBagAndChooseItem
	.align	2, 0
	.type	 CompleteWhenChoseItem,function
	.thumb_func
CompleteWhenChoseItem:
	push	{lr}
	ldr	r0, .L541
	ldr	r1, [r0, #0x4]
	ldr	r0, .L541+0x4
	cmp	r1, r0
	bne	.L540	@cond_branch
	ldr	r0, .L541+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L540	@cond_branch
	ldr	r0, .L541+0xc
	ldrh	r1, [r0]
	mov	r0, #0x1
	bl	BtlController_EmitOneReturnValue
	bl	PlayerBufferExecCompleted
.L540:
	pop	{r0}
	bx	r0
.L542:
	.align	2, 0
.L541:
	.word	gMain
	.word	BattleMainCB2
	.word	gPaletteFade
	.word	gSpecialVar_ItemId
.Lfe38:
	.size	 CompleteWhenChoseItem,.Lfe38-CompleteWhenChoseItem
	.align	2, 0
	.type	 CompleteOnSpecialAnimDone,function
	.thumb_func
CompleteOnSpecialAnimDone:
	push	{lr}
	ldr	r0, .L546
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L545	@cond_branch
	ldr	r0, .L546+0x4
	ldr	r2, [r0]
	ldr	r0, .L546+0x8
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L544	@cond_branch
.L545:
	bl	PlayerBufferExecCompleted
.L544:
	pop	{r0}
	bx	r0
.L547:
	.align	2, 0
.L546:
	.word	gDoingBattleAnim
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe39:
	.size	 CompleteOnSpecialAnimDone,.Lfe39-CompleteOnSpecialAnimDone
	.align	2, 0
	.type	 DoHitAnimBlinkSpriteEffect,function
	.thumb_func
DoHitAnimBlinkSpriteEffect:
	push	{r4, lr}
	ldr	r1, .L552
	ldr	r0, .L552+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r2, .L552+0x8
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r1, #0x30
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x20
	bne	.L549	@cond_branch
	mov	r3, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	sub	r0, r0, #0x5
	and	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L552+0xc
	strb	r3, [r0]
	bl	PlayerBufferExecCompleted
	b	.L550
.L553:
	.align	2, 0
.L552:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	gDoingBattleAnim
.L549:
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L551	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
.L551:
	ldrh	r0, [r4, #0x30]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x30]
.L550:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 DoHitAnimBlinkSpriteEffect,.Lfe40-DoHitAnimBlinkSpriteEffect
	.align	2, 0
	.type	 PlayerHandleUnknownYesNoInput,function
	.thumb_func
PlayerHandleUnknownYesNoInput:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L561
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L555	@cond_branch
	ldr	r4, .L561+0x4
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L555	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x0
	strb	r0, [r4]
	mov	r0, #0x0
	bl	BattleCreateYesNoCursorAt
.L555:
	ldr	r0, .L561
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L556	@cond_branch
	ldr	r4, .L561+0x4
	ldrb	r0, [r4]
	cmp	r0, #0
	bne	.L556	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	bl	BattleDestroyYesNoCursorAt
	mov	r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
	bl	BattleCreateYesNoCursorAt
.L556:
	ldr	r0, .L561
	ldrh	r1, [r0, #0x2e]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L557	@cond_branch
	str	r2, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L561+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L558	@cond_branch
	mov	r0, #0x1
	mov	r1, #0xe
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	b	.L559
.L562:
	.align	2, 0
.L561:
	.word	gMain
	.word	gMultiUsePlayerCursor
.L558:
	mov	r0, #0x1
	mov	r1, #0xd
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
.L559:
	bl	PlayerBufferExecCompleted
.L557:
	ldr	r0, .L563
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L560	@cond_branch
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	mov	r0, #0x5
	bl	PlaySE
	bl	PlayerBufferExecCompleted
.L560:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L564:
	.align	2, 0
.L563:
	.word	gMain
.Lfe41:
	.size	 PlayerHandleUnknownYesNoInput,.Lfe41-PlayerHandleUnknownYesNoInput
	.align	2, 0
	.type	 MoveSelectionDisplayMoveNames,function
	.thumb_func
MoveSelectionDisplayMoveNames:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L572
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	ldr	r3, .L572+0x4
	ldr	r2, .L572+0x8
	mov	r0, #0x0
	strb	r0, [r2]
	mov	r5, #0x0
	ldr	r7, .L572+0xc
	add	r4, r1, r3
	add	r6, r2, #0
.L569:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	MoveSelectionDestroyCursorAt
	ldrh	r1, [r4]
	mov	r0, #0xd
	mul	r1, r1, r0
	ldr	r0, .L572+0x10
	add	r1, r1, r0
	add	r0, r7, #0
	bl	StringCopy
	add	r1, r5, #0x3
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r7, #0
	bl	BattlePutTextOnWindow
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L568	@cond_branch
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L568:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L569	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L573:
	.align	2, 0
.L572:
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gNumberOfMovesToChoose
	.word	gDisplayedStringBattle
	.word	gMoveNames
.Lfe42:
	.size	 MoveSelectionDisplayMoveNames,.Lfe42-MoveSelectionDisplayMoveNames
	.align	2, 0
	.type	 MoveSelectionDisplayPpString,function
	.thumb_func
MoveSelectionDisplayPpString:
	push	{r4, lr}
	ldr	r4, .L575
	ldr	r1, .L575+0x4
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r4, #0
	mov	r1, #0x7
	bl	BattlePutTextOnWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L576:
	.align	2, 0
.L575:
	.word	gDisplayedStringBattle
	.word	gText_MoveInterfacePP
.Lfe43:
	.size	 MoveSelectionDisplayPpString,.Lfe43-MoveSelectionDisplayPpString
	.align	2, 0
	.type	 MoveSelectionDisplayPpNumber,function
	.thumb_func
MoveSelectionDisplayPpNumber:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L579
	ldr	r7, .L579+0x4
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L577	@cond_branch
	bl	SetPpNumbersPaletteInMoveSelection
	ldrb	r1, [r7]
	lsl	r4, r1, #0x9
	add	r0, r5, #0x4
	add	r4, r4, r0
	ldr	r6, .L579+0x8
	ldr	r5, .L579+0xc
	add	r1, r1, r5
	add	r0, r4, #0
	add	r0, r0, #0x8
	ldrb	r1, [r1]
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r0, r6, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	mov	r1, #0xba
	strb	r1, [r0]
	add	r0, r0, #0x1
	ldrb	r1, [r7]
	add	r1, r1, r5
	add	r4, r4, #0xc
	ldrb	r1, [r1]
	add	r4, r4, r1
	ldrb	r1, [r4]
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	add	r0, r6, #0
	mov	r1, #0x9
	bl	BattlePutTextOnWindow
.L577:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L580:
	.align	2, 0
.L579:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gDisplayedStringBattle
	.word	gMoveSelectionCursor
.Lfe44:
	.size	 MoveSelectionDisplayPpNumber,.Lfe44-MoveSelectionDisplayPpNumber
	.align	2, 0
	.type	 MoveSelectionDisplayMoveType,function
	.thumb_func
MoveSelectionDisplayMoveType:
	push	{r4, r5, r6, lr}
	ldr	r5, .L582
	ldrb	r4, [r5]
	lsl	r4, r4, #0x9
	ldr	r0, .L582+0x4
	add	r4, r4, r0
	ldr	r6, .L582+0x8
	ldr	r1, .L582+0xc
	add	r0, r6, #0
	bl	StringCopy
	mov	r1, #0xfc
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x6
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x1
	strb	r1, [r0]
	add	r0, r0, #0x1
	ldr	r3, .L582+0x10
	ldr	r2, .L582+0x14
	ldrb	r1, [r5]
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1
	add	r4, r4, r1
	ldrh	r2, [r4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrb	r2, [r1, #0x2]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	ldr	r2, .L582+0x18
	add	r1, r1, r2
	bl	StringCopy
	add	r0, r6, #0
	mov	r1, #0xa
	bl	BattlePutTextOnWindow
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L583:
	.align	2, 0
.L582:
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gDisplayedStringBattle
	.word	gText_MoveInterfaceType
	.word	gBattleMoves
	.word	gMoveSelectionCursor
	.word	gTypeNames
.Lfe45:
	.size	 MoveSelectionDisplayMoveType,.Lfe45-MoveSelectionDisplayMoveType
	.align	2, 0
	.type	 MoveSelectionCreateCursorAt,function
	.thumb_func
MoveSelectionCreateCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, sp, #0xc
	add	r0, r1, #0x1
	strh	r0, [r2]
	add	r0, r2, #0
	add	r1, r1, #0x2
	strh	r1, [r0, #0x2]
	mov	r1, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	lsl	r2, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, #0x1
	mov	r0, #0x2
	and	r3, r3, r0
	add	r3, r3, #0x37
	str	r1, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.Lfe46:
	.size	 MoveSelectionCreateCursorAt,.Lfe46-MoveSelectionCreateCursorAt
	.align	2, 0
	.type	 MoveSelectionDestroyCursorAt,function
	.thumb_func
MoveSelectionDestroyCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, sp, #0xc
	ldr	r1, .L586
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	mov	r1, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	lsl	r2, r0, #0x3
	add	r2, r2, r0
	add	r2, r2, #0x1
	mov	r0, #0x2
	and	r3, r3, r0
	add	r3, r3, #0x37
	str	r1, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L587:
	.align	2, 0
.L586:
	.word	0x1016
.Lfe47:
	.size	 MoveSelectionDestroyCursorAt,.Lfe47-MoveSelectionDestroyCursorAt
	.align	2, 0
	.globl	ActionSelectionCreateCursorAt
	.type	 ActionSelectionCreateCursorAt,function
	.thumb_func
ActionSelectionCreateCursorAt:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, sp, #0xc
	mov	r4, #0x1
	strh	r4, [r0]
	mov	r1, #0x2
	strh	r1, [r0, #0x2]
	add	r0, r3, #0
	and	r0, r0, r4
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	add	r2, r2, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	and	r3, r3, r1
	add	r3, r3, #0x23
	str	r4, [sp]
	str	r1, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 ActionSelectionCreateCursorAt,.Lfe48-ActionSelectionCreateCursorAt
	.align	2, 0
	.globl	ActionSelectionDestroyCursorAt
	.type	 ActionSelectionDestroyCursorAt,function
	.thumb_func
ActionSelectionDestroyCursorAt:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, sp, #0xc
	ldr	r1, .L590
	strh	r1, [r0]
	strh	r1, [r0, #0x2]
	mov	r1, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	add	r2, r2, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x2
	and	r3, r3, r0
	add	r3, r3, #0x23
	str	r1, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, sp, #0xc
	bl	CopyToBgTilemapBufferRect_ChangePalette
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L591:
	.align	2, 0
.L590:
	.word	0x1016
.Lfe49:
	.size	 ActionSelectionDestroyCursorAt,.Lfe49-ActionSelectionDestroyCursorAt
	.align	2, 0
	.globl	CB2_SetUpReshowBattleScreenAfterMenu
	.type	 CB2_SetUpReshowBattleScreenAfterMenu,function
	.thumb_func
CB2_SetUpReshowBattleScreenAfterMenu:
	push	{lr}
	ldr	r0, .L593
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L594:
	.align	2, 0
.L593:
	.word	ReshowBattleScreenAfterMenu
.Lfe50:
	.size	 CB2_SetUpReshowBattleScreenAfterMenu,.Lfe50-CB2_SetUpReshowBattleScreenAfterMenu
	.align	2, 0
	.globl	CB2_SetUpReshowBattleScreenAfterMenu2
	.type	 CB2_SetUpReshowBattleScreenAfterMenu2,function
	.thumb_func
CB2_SetUpReshowBattleScreenAfterMenu2:
	push	{lr}
	ldr	r0, .L596
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L597:
	.align	2, 0
.L596:
	.word	ReshowBattleScreenAfterMenu
.Lfe51:
	.size	 CB2_SetUpReshowBattleScreenAfterMenu2,.Lfe51-CB2_SetUpReshowBattleScreenAfterMenu2
	.align	2, 0
	.type	 CompleteOnFinishedStatusAnimation,function
	.thumb_func
CompleteOnFinishedStatusAnimation:
	push	{lr}
	ldr	r0, .L600
	ldr	r2, [r0]
	ldr	r0, .L600+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L599	@cond_branch
	bl	PlayerBufferExecCompleted
.L599:
	pop	{r0}
	bx	r0
.L601:
	.align	2, 0
.L600:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe52:
	.size	 CompleteOnFinishedStatusAnimation,.Lfe52-CompleteOnFinishedStatusAnimation
	.align	2, 0
	.type	 CompleteOnFinishedBattleAnimation,function
	.thumb_func
CompleteOnFinishedBattleAnimation:
	push	{lr}
	ldr	r0, .L604
	ldr	r2, [r0]
	ldr	r0, .L604+0x4
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L603	@cond_branch
	bl	PlayerBufferExecCompleted
.L603:
	pop	{r0}
	bx	r0
.L605:
	.align	2, 0
.L604:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe53:
	.size	 CompleteOnFinishedBattleAnimation,.Lfe53-CompleteOnFinishedBattleAnimation
	.align	2, 0
	.type	 PrintLinkStandbyMsg,function
	.thumb_func
PrintLinkStandbyMsg:
	push	{lr}
	ldr	r0, .L608
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L607	@cond_branch
	ldr	r0, .L608+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L608+0x8
	strh	r1, [r0]
	ldr	r0, .L608+0xc
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
.L607:
	pop	{r0}
	bx	r0
.L609:
	.align	2, 0
.L608:
	.word	gBattleTypeFlags
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gText_LinkStandby
.Lfe54:
	.size	 PrintLinkStandbyMsg,.Lfe54-PrintLinkStandbyMsg
	.align	2, 0
	.type	 PlayerHandleGetMonData,function
	.thumb_func
PlayerHandleGetMonData:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x100
	mov	r6, #0x0
	ldr	r1, .L619
	ldr	r0, .L619+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L611	@cond_branch
	ldr	r0, .L619+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, sp
	bl	CopyPlayerMonData
	add	r6, r0, #0
	b	.L612
.L620:
	.align	2, 0
.L619:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L611:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L616:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L617	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	mov	r2, sp
	add	r1, r2, r6
	bl	CopyPlayerMonData
	add	r6, r6, r0
.L617:
	lsr	r4, r4, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L616	@cond_branch
.L612:
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	mov	r2, sp
	bl	BtlController_EmitDataTransfer
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x100
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 PlayerHandleGetMonData,.Lfe55-PlayerHandleGetMonData
	.align	2, 0
	.type	 CopyPlayerMonData,function
	.thumb_func
CopyPlayerMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x90
	add	r7, r1, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L710
	ldr	r3, .L710+0x4
	ldrb	r0, [r3]
	lsl	r0, r0, #0x9
	add	r1, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x3b
	bls	.LCB6831
	bl	.L622	@far jump
.LCB6831:
	lsl	r0, r0, #0x2
	ldr	r1, .L710+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L711:
	.align	2, 0
.L710:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	.L704
	.align	2, 0
	.align	2, 0
.L704:
	.word	.L623
	.word	.L634
	.word	.L635
	.word	.L636
	.word	.L650
	.word	.L650
	.word	.L650
	.word	.L650
	.word	.L651
	.word	.L660
	.word	.L660
	.word	.L660
	.word	.L660
	.word	.L622
	.word	.L622
	.word	.L622
	.word	.L622
	.word	.L661
	.word	.L662
	.word	.L663
	.word	.L664
	.word	.L665
	.word	.L666
	.word	.L667
	.word	.L668
	.word	.L669
	.word	.L670
	.word	.L671
	.word	.L672
	.word	.L673
	.word	.L674
	.word	.L675
	.word	.L676
	.word	.L677
	.word	.L678
	.word	.L679
	.word	.L680
	.word	.L681
	.word	.L682
	.word	.L683
	.word	.L684
	.word	.L685
	.word	.L686
	.word	.L687
	.word	.L688
	.word	.L689
	.word	.L690
	.word	.L691
	.word	.L692
	.word	.L693
	.word	.L694
	.word	.L695
	.word	.L696
	.word	.L697
	.word	.L698
	.word	.L699
	.word	.L700
	.word	.L701
	.word	.L702
	.word	.L703
.L623:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L712
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2e]
	mov	r6, #0x0
	add	r0, sp, #0x24
	mov	r9, r0
	mov	r1, #0x3b
	add	r1, r1, sp
	mov	sl, r1
	mov	r2, sp
	add	r2, r2, #0x2b
	str	r2, [sp, #0x80]
	mov	r0, sp
	add	r0, r0, #0x2a
	str	r0, [sp, #0x7c]
	mov	r1, sp
	add	r1, r1, #0x68
	str	r1, [sp, #0x8c]
	add	r2, r2, #0x5
	str	r2, [sp, #0x84]
	add	r0, r0, #0x12
	str	r0, [sp, #0x88]
	mov	r8, r4
	add	r4, sp, #0xc
.L627:
	add	r1, r6, #0
	add	r1, r1, #0xd
	mov	r0, r8
	bl	GetMonData
	strh	r0, [r4]
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r0, r8
	bl	GetMonData
	mov	r2, r9
	add	r1, r2, r6
	strb	r0, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L627	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L712
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, sl
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x20
	bl	GetMonData
	ldr	r2, [sp, #0x80]
	strb	r0, [r2]
	add	r0, r4, #0
	mov	r1, #0x19
	bl	GetMonData
	str	r0, [sp, #0x44]
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	mov	r3, sp
	mov	r5, #0x1f
	and	r0, r0, r5
	ldrb	r2, [r3, #0x14]
	mov	r1, #0x20
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	mov	r3, sp
	mov	r6, #0x1f
	and	r0, r0, r6
	lsl	r0, r0, #0x5
	ldrh	r2, [r3, #0x14]
	ldr	r1, .L712+0x4
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x14]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x2
	ldrb	r2, [r3, #0x15]
	mov	r1, #0x7d
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x15]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	mov	r1, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0xf
	ldr	r0, [sp, #0x14]
	ldr	r2, .L712+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r6
	lsl	r0, r0, #0x4
	ldrh	r2, [r3, #0x16]
	ldr	r1, .L712+0xc
	and	r1, r1, r2
	orr	r1, r1, r0
	strh	r1, [r3, #0x16]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	mov	r3, sp
	and	r0, r0, r5
	lsl	r0, r0, #0x1
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x3f
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x0
	bl	GetMonData
	str	r0, [sp, #0x48]
	add	r0, r4, #0
	mov	r1, #0x37
	bl	GetMonData
	str	r0, [sp, #0x4c]
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	ldr	r1, [sp, #0x7c]
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x28]
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2c]
	add	r0, r4, #0
	mov	r1, #0x3b
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x2]
	add	r0, r4, #0
	mov	r1, #0x3c
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x4]
	add	r0, r4, #0
	mov	r1, #0x3d
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x6]
	add	r0, r4, #0
	mov	r1, #0x3e
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0x8]
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	GetMonData
	mov	r1, sp
	strh	r0, [r1, #0xa]
	add	r0, r4, #0
	mov	r1, #0x2d
	bl	GetMonData
	mov	r3, sp
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x6
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x41
	neg	r1, r1
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r3, sp
	lsl	r0, r0, #0x7
	ldrb	r2, [r3, #0x17]
	mov	r1, #0x7f
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x17]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetMonData
	str	r0, [sp, #0x54]
	add	r0, r4, #0
	mov	r1, #0x2
	ldr	r2, [sp, #0x8c]
	bl	GetMonData
	ldr	r0, [sp, #0x84]
	ldr	r1, [sp, #0x8c]
	bl	StringCopy10
	add	r0, r4, #0
	mov	r1, #0x7
	ldr	r2, [sp, #0x88]
	bl	GetMonData
	mov	r2, sp
	mov	r6, #0x0
.L632:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0x57
	bls	.L632	@cond_branch
	b	.L622
.L713:
	.align	2, 0
.L712:
	.word	gPlayerParty
	.word	-0x3e1
	.word	-0xf8001
	.word	-0x1f1
.L634:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L714
	add	r0, r0, r1
	mov	r1, #0xb
	b	.L706
.L715:
	.align	2, 0
.L714:
	.word	gPlayerParty
.L635:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L716
	add	r0, r0, r1
	mov	r1, #0xc
	b	.L706
.L717:
	.align	2, 0
.L716:
	.word	gPlayerParty
.L636:
	mov	r6, #0x0
	add	r2, sp, #0x58
	mov	r9, r2
	add	r0, sp, #0x60
	mov	sl, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L718
	add	r4, r1, r0
	mov	r8, r9
.L640:
	add	r1, r6, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	mov	r1, r8
	strh	r0, [r1]
	add	r1, r6, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	bl	GetMonData
	mov	r2, sl
	add	r1, r2, r6
	strb	r0, [r1]
	mov	r0, #0x2
	add	r8, r8, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L640	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L718
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	mov	r1, r9
	strb	r0, [r1, #0xc]
	mov	r2, r9
	mov	r6, #0x0
.L645:
	add	r0, r7, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r6, r6, #0x1
	cmp	r6, #0xf
	bls	.L645	@cond_branch
	b	.L622
.L719:
	.align	2, 0
.L718:
	.word	gPlayerParty
.L650:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L720
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L706
.L721:
	.align	2, 0
.L720:
	.word	gPlayerParty
.L651:
	mov	r6, #0x0
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r2, .L722
	mov	r8, r2
.L655:
	add	r1, r6, #0
	add	r1, r1, #0x11
	mov	r2, r8
	add	r0, r4, r2
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L655	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L722
	add	r0, r0, r1
	mov	r1, #0x15
	bl	GetMonData
	add	r1, r7, r6
	strb	r0, [r1]
	add	r6, r6, #0x1
	b	.L622
.L723:
	.align	2, 0
.L722:
	.word	gPlayerParty
.L660:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L724
	add	r0, r0, r1
	ldrb	r1, [r3]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r1, r1, #0x8
	b	.L707
.L725:
	.align	2, 0
.L724:
	.word	gPlayerParty
.L661:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L726
	add	r0, r0, r1
	mov	r1, #0x1
	b	.L708
.L727:
	.align	2, 0
.L726:
	.word	gPlayerParty
.L662:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L728
	add	r0, r0, r1
	mov	r1, #0x19
.L708:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	mov	r6, #0x3
	b	.L622
.L729:
	.align	2, 0
.L728:
	.word	gPlayerParty
.L663:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L730
	add	r0, r0, r1
	mov	r1, #0x1a
	b	.L707
.L731:
	.align	2, 0
.L730:
	.word	gPlayerParty
.L664:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L732
	add	r0, r0, r1
	mov	r1, #0x1b
	b	.L707
.L733:
	.align	2, 0
.L732:
	.word	gPlayerParty
.L665:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L734
	add	r0, r0, r1
	mov	r1, #0x1c
	b	.L707
.L735:
	.align	2, 0
.L734:
	.word	gPlayerParty
.L666:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L736
	add	r0, r0, r1
	mov	r1, #0x1d
	b	.L707
.L737:
	.align	2, 0
.L736:
	.word	gPlayerParty
.L667:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L738
	add	r0, r0, r1
	mov	r1, #0x1e
	b	.L707
.L739:
	.align	2, 0
.L738:
	.word	gPlayerParty
.L668:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L740
	add	r0, r0, r1
	mov	r1, #0x1f
	b	.L707
.L741:
	.align	2, 0
.L740:
	.word	gPlayerParty
.L669:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L742
	add	r0, r0, r1
	mov	r1, #0x20
	b	.L707
.L743:
	.align	2, 0
.L742:
	.word	gPlayerParty
.L670:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L744
	add	r0, r0, r1
	mov	r1, #0x22
	b	.L707
.L745:
	.align	2, 0
.L744:
	.word	gPlayerParty
.L671:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L746
	add	r0, r0, r1
	mov	r1, #0x23
	b	.L707
.L747:
	.align	2, 0
.L746:
	.word	gPlayerParty
.L672:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L748
	add	r0, r0, r1
	mov	r1, #0x24
	b	.L707
.L749:
	.align	2, 0
.L748:
	.word	gPlayerParty
.L673:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L750
	add	r0, r0, r1
	mov	r1, #0x25
	b	.L707
.L751:
	.align	2, 0
.L750:
	.word	gPlayerParty
.L674:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L752
	add	r0, r0, r1
	mov	r1, #0x26
	b	.L707
.L753:
	.align	2, 0
.L752:
	.word	gPlayerParty
.L675:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L754
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x27
	bl	GetMonData
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #0x28
	bl	GetMonData
	strb	r0, [r7, #0x1]
	add	r0, r4, #0
	mov	r1, #0x29
	bl	GetMonData
	strb	r0, [r7, #0x2]
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	GetMonData
	strb	r0, [r7, #0x3]
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	GetMonData
	strb	r0, [r7, #0x4]
	add	r0, r4, #0
	mov	r1, #0x2c
	bl	GetMonData
	strb	r0, [r7, #0x5]
	mov	r6, #0x6
	b	.L622
.L755:
	.align	2, 0
.L754:
	.word	gPlayerParty
.L676:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L756
	add	r0, r0, r1
	mov	r1, #0x27
	b	.L707
.L757:
	.align	2, 0
.L756:
	.word	gPlayerParty
.L677:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L758
	add	r0, r0, r1
	mov	r1, #0x28
	b	.L707
.L759:
	.align	2, 0
.L758:
	.word	gPlayerParty
.L678:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L760
	add	r0, r0, r1
	mov	r1, #0x29
	b	.L707
.L761:
	.align	2, 0
.L760:
	.word	gPlayerParty
.L679:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L762
	add	r0, r0, r1
	mov	r1, #0x2a
	b	.L707
.L763:
	.align	2, 0
.L762:
	.word	gPlayerParty
.L680:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L764
	add	r0, r0, r1
	mov	r1, #0x2b
	b	.L707
.L765:
	.align	2, 0
.L764:
	.word	gPlayerParty
.L681:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L766
	add	r0, r0, r1
	mov	r1, #0x2c
	b	.L707
.L767:
	.align	2, 0
.L766:
	.word	gPlayerParty
.L682:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L768
	add	r0, r0, r1
	mov	r1, #0x0
	b	.L709
.L769:
	.align	2, 0
.L768:
	.word	gPlayerParty
.L683:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L770
	add	r0, r0, r1
	mov	r1, #0x9
	b	.L706
.L771:
	.align	2, 0
.L770:
	.word	gPlayerParty
.L684:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L772
	add	r0, r0, r1
	mov	r1, #0x37
.L709:
	bl	GetMonData
	add	r1, r0, #0
	strb	r1, [r7]
	mov	r0, #0xff
	lsl	r0, r0, #0x8
	and	r0, r0, r1
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r0, #0xff
	lsl	r0, r0, #0x10
	and	r0, r0, r1
	lsr	r0, r0, #0x10
	strb	r0, [r7, #0x2]
	lsr	r0, r1, #0x18
	strb	r0, [r7, #0x3]
	mov	r6, #0x4
	b	.L622
.L773:
	.align	2, 0
.L772:
	.word	gPlayerParty
.L685:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L774
	add	r0, r0, r1
	mov	r1, #0x38
	b	.L707
.L775:
	.align	2, 0
.L774:
	.word	gPlayerParty
.L686:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L776
	add	r0, r0, r1
	mov	r1, #0x39
	b	.L706
.L777:
	.align	2, 0
.L776:
	.word	gPlayerParty
.L687:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L778
	add	r0, r0, r1
	mov	r1, #0x3a
	b	.L706
.L779:
	.align	2, 0
.L778:
	.word	gPlayerParty
.L688:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L780
	add	r0, r0, r1
	mov	r1, #0x3b
	b	.L706
.L781:
	.align	2, 0
.L780:
	.word	gPlayerParty
.L689:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L782
	add	r0, r0, r1
	mov	r1, #0x3c
	b	.L706
.L783:
	.align	2, 0
.L782:
	.word	gPlayerParty
.L690:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L784
	add	r0, r0, r1
	mov	r1, #0x3d
	b	.L706
.L785:
	.align	2, 0
.L784:
	.word	gPlayerParty
.L691:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L786
	add	r0, r0, r1
	mov	r1, #0x3e
	b	.L706
.L787:
	.align	2, 0
.L786:
	.word	gPlayerParty
.L692:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L788
	add	r0, r0, r1
	mov	r1, #0x3f
.L706:
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	strb	r0, [r7]
	lsr	r0, r0, #0x8
	strb	r0, [r7, #0x1]
	mov	r6, #0x2
	b	.L622
.L789:
	.align	2, 0
.L788:
	.word	gPlayerParty
.L693:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L790
	add	r0, r0, r1
	mov	r1, #0x16
	b	.L707
.L791:
	.align	2, 0
.L790:
	.word	gPlayerParty
.L694:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L792
	add	r0, r0, r1
	mov	r1, #0x17
	b	.L707
.L793:
	.align	2, 0
.L792:
	.word	gPlayerParty
.L695:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L794
	add	r0, r0, r1
	mov	r1, #0x18
	b	.L707
.L795:
	.align	2, 0
.L794:
	.word	gPlayerParty
.L696:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L796
	add	r0, r0, r1
	mov	r1, #0x21
	b	.L707
.L797:
	.align	2, 0
.L796:
	.word	gPlayerParty
.L697:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L798
	add	r0, r0, r1
	mov	r1, #0x2f
	b	.L707
.L799:
	.align	2, 0
.L798:
	.word	gPlayerParty
.L698:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L800
	add	r0, r0, r1
	mov	r1, #0x30
	b	.L707
.L801:
	.align	2, 0
.L800:
	.word	gPlayerParty
.L699:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L802
	add	r0, r0, r1
	mov	r1, #0x32
	b	.L707
.L803:
	.align	2, 0
.L802:
	.word	gPlayerParty
.L700:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L804
	add	r0, r0, r1
	mov	r1, #0x33
	b	.L707
.L805:
	.align	2, 0
.L804:
	.word	gPlayerParty
.L701:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L806
	add	r0, r0, r1
	mov	r1, #0x34
	b	.L707
.L807:
	.align	2, 0
.L806:
	.word	gPlayerParty
.L702:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L808
	add	r0, r0, r1
	mov	r1, #0x35
	b	.L707
.L809:
	.align	2, 0
.L808:
	.word	gPlayerParty
.L703:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L810
	add	r0, r0, r1
	mov	r1, #0x36
.L707:
	bl	GetMonData
	strb	r0, [r7]
	mov	r6, #0x1
.L622:
	add	r0, r6, #0
	add	sp, sp, #0x90
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L811:
	.align	2, 0
.L810:
	.word	gPlayerParty
.Lfe56:
	.size	 CopyPlayerMonData,.Lfe56-CopyPlayerMonData
	.align	2, 0
	.globl	PlayerHandleGetRawMonData
	.type	 PlayerHandleGetRawMonData,function
	.thumb_func
PlayerHandleGetRawMonData:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x58
	ldr	r2, .L818
	ldr	r5, .L818+0x4
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mov	r4, r2
	mul	r4, r4, r0
	ldr	r3, .L818+0x8
	lsl	r1, r1, #0x9
	add	r0, r3, #0x1
	add	r0, r1, r0
	ldrb	r2, [r0]
	ldr	r0, .L818+0xc
	add	r0, r2, r0
	add	r6, r4, r0
	mov	r0, sp
	add	r4, r0, r2
	mov	r2, #0x0
	add	r0, r3, #0x2
	add	r1, r1, r0
	add	r7, r5, #0
	mov	ip, r3
	ldrb	r1, [r1]
	cmp	r2, r1
	bcs	.L814	@cond_branch
	add	r3, r0, #0
.L816:
	add	r1, r4, r2
	add	r0, r6, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r2, r0
	bcc	.L816	@cond_branch
.L814:
	ldrb	r0, [r7]
	lsl	r0, r0, #0x9
	mov	r1, ip
	add	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	add	r2, r4, #0
	bl	BtlController_EmitDataTransfer
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x58
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L819:
	.align	2, 0
.L818:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gPlayerParty
.Lfe57:
	.size	 PlayerHandleGetRawMonData,.Lfe57-PlayerHandleGetRawMonData
	.align	2, 0
	.type	 PlayerHandleSetMonData,function
	.thumb_func
PlayerHandleSetMonData:
	push	{r4, r5, lr}
	ldr	r1, .L829
	ldr	r0, .L829+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L821	@cond_branch
	ldr	r0, .L829+0x8
	lsl	r1, r2, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	bl	SetPlayerMonData
	b	.L822
.L830:
	.align	2, 0
.L829:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.L821:
	ldrb	r4, [r1]
	mov	r5, #0x0
.L826:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L827	@cond_branch
	add	r0, r5, #0
	bl	SetPlayerMonData
.L827:
	lsr	r4, r4, #0x1
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x5
	bls	.L826	@cond_branch
.L822:
	bl	PlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 PlayerHandleSetMonData,.Lfe58-PlayerHandleSetMonData
	.align	2, 0
	.type	 SetPlayerMonData,function
	.thumb_func
SetPlayerMonData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L903
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	ldr	r2, .L903+0x4
	add	r3, r0, r2
	add	r6, r3, #0
	sub	r1, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r7, r2, #0
	cmp	r0, #0x3b
	bls	.LCB8326
	bl	.L832	@far jump
.LCB8326:
	lsl	r0, r0, #0x2
	ldr	r1, .L903+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L904:
	.align	2, 0
.L903:
	.word	gActiveBattler
	.word	gBattleBufferA+0x3
	.word	.L899
	.align	2, 0
	.align	2, 0
.L899:
	.word	.L833
	.word	.L839
	.word	.L840
	.word	.L841
	.word	.L850
	.word	.L850
	.word	.L850
	.word	.L850
	.word	.L851
	.word	.L855
	.word	.L855
	.word	.L855
	.word	.L855
	.word	.L832
	.word	.L832
	.word	.L832
	.word	.L832
	.word	.L856
	.word	.L857
	.word	.L858
	.word	.L859
	.word	.L860
	.word	.L861
	.word	.L862
	.word	.L863
	.word	.L864
	.word	.L865
	.word	.L866
	.word	.L867
	.word	.L868
	.word	.L869
	.word	.L870
	.word	.L871
	.word	.L872
	.word	.L873
	.word	.L874
	.word	.L875
	.word	.L876
	.word	.L877
	.word	.L878
	.word	.L879
	.word	.L880
	.word	.L881
	.word	.L882
	.word	.L883
	.word	.L884
	.word	.L885
	.word	.L886
	.word	.L887
	.word	.L888
	.word	.L889
	.word	.L890
	.word	.L891
	.word	.L892
	.word	.L893
	.word	.L894
	.word	.L895
	.word	.L896
	.word	.L897
	.word	.L898
.L833:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L905
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb
	add	r2, r6, #0
	bl	SetMonData
	add	r2, r6, #0
	add	r2, r2, #0x2e
	add	r0, r4, #0
	mov	r1, #0xc
	bl	SetMonData
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0x3b
	add	r0, r0, r6
	mov	sl, r0
	add	r0, r6, #0
	add	r0, r0, #0x2b
	str	r0, [sp, #0x20]
	add	r0, r0, #0x19
	str	r0, [sp, #0x28]
	add	r0, r0, #0x4
	str	r0, [sp, #0x2c]
	add	r0, r0, #0x4
	str	r0, [sp, #0x30]
	sub	r0, r0, #0x22
	str	r0, [sp, #0x1c]
	sub	r0, r0, #0x2
	str	r0, [sp, #0x18]
	add	r0, r0, #0x4
	str	r0, [sp, #0x24]
	add	r0, r6, #0x2
	str	r0, [sp, #0x4]
	add	r0, r6, #0x4
	str	r0, [sp, #0x8]
	add	r0, r6, #0x6
	str	r0, [sp, #0xc]
	add	r0, r0, #0x2
	str	r0, [sp, #0x10]
	add	r0, r0, #0x2
	str	r0, [sp, #0x14]
	mov	r9, r4
	add	r7, r6, #0
	add	r7, r7, #0x24
	add	r4, r6, #0
	add	r4, r4, #0xc
.L837:
	mov	r1, r8
	add	r1, r1, #0xd
	mov	r0, r9
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	mov	r0, r9
	add	r2, r7, #0
	bl	SetMonData
	add	r7, r7, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L837	@cond_branch
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L905
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0x15
	mov	r2, sl
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x20
	ldr	r2, [sp, #0x20]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x19
	ldr	r2, [sp, #0x28]
	bl	SetMonData
	ldrb	r0, [r6, #0x14]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, sp
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x27
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x14]
	lsl	r0, r0, #0x16
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x28
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x15]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x29
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldr	r0, [r6, #0x14]
	lsl	r0, r0, #0xc
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2a
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrh	r0, [r6, #0x16]
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2b
	mov	r2, sp
	bl	SetMonData
	mov	r1, sp
	ldrb	r0, [r6, #0x17]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #0x2c
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x0
	ldr	r2, [sp, #0x2c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x37
	ldr	r2, [sp, #0x30]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x38
	ldr	r2, [sp, #0x1c]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x39
	ldr	r2, [sp, #0x18]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3a
	ldr	r2, [sp, #0x24]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3b
	ldr	r2, [sp, #0x4]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3c
	ldr	r2, [sp, #0x8]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3d
	ldr	r2, [sp, #0xc]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3e
	ldr	r2, [sp, #0x10]
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x3f
	ldr	r2, [sp, #0x14]
	bl	SetMonData
	b	.L832
.L906:
	.align	2, 0
.L905:
	.word	gPlayerParty
.L839:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L907
	add	r0, r0, r1
	ldr	r1, .L907+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xb
	bl	SetMonData
	b	.L832
.L908:
	.align	2, 0
.L907:
	.word	gPlayerParty
	.word	gActiveBattler
.L840:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L909
	add	r0, r0, r1
	ldr	r1, .L909+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0xc
	bl	SetMonData
	b	.L832
.L910:
	.align	2, 0
.L909:
	.word	gPlayerParty
	.word	gActiveBattler
.L841:
	mov	r0, #0x0
	mov	r8, r0
	mov	r0, #0xc
	add	r0, r0, r3
	mov	r9, r0
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L911
	add	r7, r1, r0
	add	r6, r3, #0
	add	r6, r6, #0x8
	add	r4, r3, #0
.L845:
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r7, #0
	add	r2, r4, #0
	bl	SetMonData
	mov	r1, r8
	add	r1, r1, #0x11
	add	r0, r7, #0
	add	r2, r6, #0
	bl	SetMonData
	add	r6, r6, #0x1
	add	r4, r4, #0x2
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r0, r8
	cmp	r0, #0x3
	ble	.L845	@cond_branch
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L911
	add	r0, r0, r1
	mov	r1, #0x15
	mov	r2, r9
	bl	SetMonData
	b	.L832
.L912:
	.align	2, 0
.L911:
	.word	gPlayerParty
.L850:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L913
	add	r0, r0, r1
	ldr	r3, .L913+0x4
	ldr	r1, .L913+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x9
	b	.L901
.L914:
	.align	2, 0
.L913:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBattler
.L851:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L915
	add	r4, r4, r0
	ldr	r5, .L915+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x11
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x12
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x13
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x14
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x15
	bl	SetMonData
	b	.L832
.L916:
	.align	2, 0
.L915:
	.word	gPlayerParty
	.word	gActiveBattler
.L855:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L917
	add	r0, r0, r1
	ldr	r3, .L917+0x4
	ldr	r1, .L917+0x8
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r1, r3, #0x1
	add	r1, r2, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x8
.L901:
	add	r3, r3, #0x3
	add	r2, r2, r3
	bl	SetMonData
	b	.L832
.L918:
	.align	2, 0
.L917:
	.word	gPlayerParty
	.word	gBattleBufferA
	.word	gActiveBattler
.L856:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L919
	add	r0, r0, r1
	ldr	r1, .L919+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1
	bl	SetMonData
	b	.L832
.L920:
	.align	2, 0
.L919:
	.word	gPlayerParty
	.word	gActiveBattler
.L857:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L921
	add	r0, r0, r1
	ldr	r1, .L921+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x19
	bl	SetMonData
	b	.L832
.L922:
	.align	2, 0
.L921:
	.word	gPlayerParty
	.word	gActiveBattler
.L858:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L923
	add	r0, r0, r1
	ldr	r1, .L923+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1a
	bl	SetMonData
	b	.L832
.L924:
	.align	2, 0
.L923:
	.word	gPlayerParty
	.word	gActiveBattler
.L859:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L925
	add	r0, r0, r1
	ldr	r1, .L925+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1b
	bl	SetMonData
	b	.L832
.L926:
	.align	2, 0
.L925:
	.word	gPlayerParty
	.word	gActiveBattler
.L860:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L927
	add	r0, r0, r1
	ldr	r1, .L927+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1c
	bl	SetMonData
	b	.L832
.L928:
	.align	2, 0
.L927:
	.word	gPlayerParty
	.word	gActiveBattler
.L861:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L929
	add	r0, r0, r1
	ldr	r1, .L929+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1d
	bl	SetMonData
	b	.L832
.L930:
	.align	2, 0
.L929:
	.word	gPlayerParty
	.word	gActiveBattler
.L862:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L931
	add	r0, r0, r1
	ldr	r1, .L931+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1e
	bl	SetMonData
	b	.L832
.L932:
	.align	2, 0
.L931:
	.word	gPlayerParty
	.word	gActiveBattler
.L863:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L933
	add	r0, r0, r1
	ldr	r1, .L933+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x1f
	bl	SetMonData
	b	.L832
.L934:
	.align	2, 0
.L933:
	.word	gPlayerParty
	.word	gActiveBattler
.L864:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L935
	add	r0, r0, r1
	ldr	r1, .L935+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x20
	bl	SetMonData
	b	.L832
.L936:
	.align	2, 0
.L935:
	.word	gPlayerParty
	.word	gActiveBattler
.L865:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L937
	add	r0, r0, r1
	ldr	r1, .L937+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x22
	bl	SetMonData
	b	.L832
.L938:
	.align	2, 0
.L937:
	.word	gPlayerParty
	.word	gActiveBattler
.L866:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L939
	add	r0, r0, r1
	ldr	r1, .L939+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x23
	bl	SetMonData
	b	.L832
.L940:
	.align	2, 0
.L939:
	.word	gPlayerParty
	.word	gActiveBattler
.L867:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L941
	add	r0, r0, r1
	ldr	r1, .L941+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x24
	bl	SetMonData
	b	.L832
.L942:
	.align	2, 0
.L941:
	.word	gPlayerParty
	.word	gActiveBattler
.L868:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L943
	add	r0, r0, r1
	ldr	r1, .L943+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x25
	bl	SetMonData
	b	.L832
.L944:
	.align	2, 0
.L943:
	.word	gPlayerParty
	.word	gActiveBattler
.L869:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L945
	add	r0, r0, r1
	ldr	r1, .L945+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x26
	bl	SetMonData
	b	.L832
.L946:
	.align	2, 0
.L945:
	.word	gPlayerParty
	.word	gActiveBattler
.L870:
	mov	r0, #0x64
	mov	r4, r5
	mul	r4, r4, r0
	ldr	r0, .L947
	add	r4, r4, r0
	ldr	r5, .L947+0x4
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	add	r0, r4, #0
	mov	r1, #0x27
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x1
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x28
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x2
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x29
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x3
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2a
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x4
	add	r2, r2, r0
	add	r0, r4, #0
	mov	r1, #0x2b
	bl	SetMonData
	ldrb	r2, [r5]
	lsl	r2, r2, #0x9
	add	r0, r7, #0x5
	add	r2, r2, r0
	add	r0, r4, #0
	b	.L902
.L948:
	.align	2, 0
.L947:
	.word	gPlayerParty
	.word	gActiveBattler
.L871:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L949
	add	r0, r0, r1
	ldr	r1, .L949+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x27
	bl	SetMonData
	b	.L832
.L950:
	.align	2, 0
.L949:
	.word	gPlayerParty
	.word	gActiveBattler
.L872:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L951
	add	r0, r0, r1
	ldr	r1, .L951+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x28
	bl	SetMonData
	b	.L832
.L952:
	.align	2, 0
.L951:
	.word	gPlayerParty
	.word	gActiveBattler
.L873:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L953
	add	r0, r0, r1
	ldr	r1, .L953+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x29
	bl	SetMonData
	b	.L832
.L954:
	.align	2, 0
.L953:
	.word	gPlayerParty
	.word	gActiveBattler
.L874:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L955
	add	r0, r0, r1
	ldr	r1, .L955+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2a
	bl	SetMonData
	b	.L832
.L956:
	.align	2, 0
.L955:
	.word	gPlayerParty
	.word	gActiveBattler
.L875:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L957
	add	r0, r0, r1
	ldr	r1, .L957+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2b
	bl	SetMonData
	b	.L832
.L958:
	.align	2, 0
.L957:
	.word	gPlayerParty
	.word	gActiveBattler
.L876:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L959
	add	r0, r0, r1
	ldr	r1, .L959+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
.L902:
	mov	r1, #0x2c
	bl	SetMonData
	b	.L832
.L960:
	.align	2, 0
.L959:
	.word	gPlayerParty
	.word	gActiveBattler
.L877:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L961
	add	r0, r0, r1
	ldr	r1, .L961+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x0
	bl	SetMonData
	b	.L832
.L962:
	.align	2, 0
.L961:
	.word	gPlayerParty
	.word	gActiveBattler
.L878:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L963
	add	r0, r0, r1
	ldr	r1, .L963+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x9
	bl	SetMonData
	b	.L832
.L964:
	.align	2, 0
.L963:
	.word	gPlayerParty
	.word	gActiveBattler
.L879:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L965
	add	r0, r0, r1
	ldr	r1, .L965+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x37
	bl	SetMonData
	b	.L832
.L966:
	.align	2, 0
.L965:
	.word	gPlayerParty
	.word	gActiveBattler
.L880:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L967
	add	r0, r0, r1
	ldr	r1, .L967+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x38
	bl	SetMonData
	b	.L832
.L968:
	.align	2, 0
.L967:
	.word	gPlayerParty
	.word	gActiveBattler
.L881:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L969
	add	r0, r0, r1
	ldr	r1, .L969+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x39
	bl	SetMonData
	b	.L832
.L970:
	.align	2, 0
.L969:
	.word	gPlayerParty
	.word	gActiveBattler
.L882:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L971
	add	r0, r0, r1
	ldr	r1, .L971+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3a
	bl	SetMonData
	b	.L832
.L972:
	.align	2, 0
.L971:
	.word	gPlayerParty
	.word	gActiveBattler
.L883:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L973
	add	r0, r0, r1
	ldr	r1, .L973+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3b
	bl	SetMonData
	b	.L832
.L974:
	.align	2, 0
.L973:
	.word	gPlayerParty
	.word	gActiveBattler
.L884:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L975
	add	r0, r0, r1
	ldr	r1, .L975+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3c
	bl	SetMonData
	b	.L832
.L976:
	.align	2, 0
.L975:
	.word	gPlayerParty
	.word	gActiveBattler
.L885:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L977
	add	r0, r0, r1
	ldr	r1, .L977+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3d
	bl	SetMonData
	b	.L832
.L978:
	.align	2, 0
.L977:
	.word	gPlayerParty
	.word	gActiveBattler
.L886:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L979
	add	r0, r0, r1
	ldr	r1, .L979+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3e
	bl	SetMonData
	b	.L832
.L980:
	.align	2, 0
.L979:
	.word	gPlayerParty
	.word	gActiveBattler
.L887:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L981
	add	r0, r0, r1
	ldr	r1, .L981+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x3f
	bl	SetMonData
	b	.L832
.L982:
	.align	2, 0
.L981:
	.word	gPlayerParty
	.word	gActiveBattler
.L888:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L983
	add	r0, r0, r1
	ldr	r1, .L983+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x16
	bl	SetMonData
	b	.L832
.L984:
	.align	2, 0
.L983:
	.word	gPlayerParty
	.word	gActiveBattler
.L889:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L985
	add	r0, r0, r1
	ldr	r1, .L985+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x17
	bl	SetMonData
	b	.L832
.L986:
	.align	2, 0
.L985:
	.word	gPlayerParty
	.word	gActiveBattler
.L890:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L987
	add	r0, r0, r1
	ldr	r1, .L987+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x18
	bl	SetMonData
	b	.L832
.L988:
	.align	2, 0
.L987:
	.word	gPlayerParty
	.word	gActiveBattler
.L891:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L989
	add	r0, r0, r1
	ldr	r1, .L989+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x21
	bl	SetMonData
	b	.L832
.L990:
	.align	2, 0
.L989:
	.word	gPlayerParty
	.word	gActiveBattler
.L892:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L991
	add	r0, r0, r1
	ldr	r1, .L991+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x2f
	bl	SetMonData
	b	.L832
.L992:
	.align	2, 0
.L991:
	.word	gPlayerParty
	.word	gActiveBattler
.L893:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L993
	add	r0, r0, r1
	ldr	r1, .L993+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x30
	bl	SetMonData
	b	.L832
.L994:
	.align	2, 0
.L993:
	.word	gPlayerParty
	.word	gActiveBattler
.L894:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L995
	add	r0, r0, r1
	ldr	r1, .L995+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x32
	bl	SetMonData
	b	.L832
.L996:
	.align	2, 0
.L995:
	.word	gPlayerParty
	.word	gActiveBattler
.L895:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L997
	add	r0, r0, r1
	ldr	r1, .L997+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x33
	bl	SetMonData
	b	.L832
.L998:
	.align	2, 0
.L997:
	.word	gPlayerParty
	.word	gActiveBattler
.L896:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L999
	add	r0, r0, r1
	ldr	r1, .L999+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x34
	bl	SetMonData
	b	.L832
.L1000:
	.align	2, 0
.L999:
	.word	gPlayerParty
	.word	gActiveBattler
.L897:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L1001
	add	r0, r0, r1
	ldr	r1, .L1001+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x35
	bl	SetMonData
	b	.L832
.L1002:
	.align	2, 0
.L1001:
	.word	gPlayerParty
	.word	gActiveBattler
.L898:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, .L1003
	add	r0, r0, r1
	ldr	r1, .L1003+0x4
	ldrb	r2, [r1]
	lsl	r2, r2, #0x9
	add	r2, r2, r7
	mov	r1, #0x36
	bl	SetMonData
.L832:
	ldr	r2, .L1003+0x8
	ldr	r0, .L1003+0x4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L1003
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1004:
	.align	2, 0
.L1003:
	.word	gPlayerParty
	.word	gActiveBattler
	.word	gBattlerPartyIndexes
.Lfe59:
	.size	 SetPlayerMonData,.Lfe59-SetPlayerMonData
	.align	2, 0
	.type	 PlayerHandleSetRawMonData,function
	.thumb_func
PlayerHandleSetRawMonData:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L1011
	ldr	r7, .L1011+0x4
	ldrb	r2, [r7]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mov	r3, r1
	mul	r3, r3, r0
	ldr	r4, .L1011+0x8
	lsl	r2, r2, #0x9
	add	r0, r4, #0x1
	add	r0, r2, r0
	ldrb	r0, [r0]
	ldr	r1, .L1011+0xc
	add	r0, r0, r1
	add	r5, r3, r0
	mov	r3, #0x0
	add	r0, r4, #0x2
	add	r2, r2, r0
	ldrb	r2, [r2]
	cmp	r3, r2
	bcs	.L1007	@cond_branch
	add	r6, r4, #0
	add	r2, r7, #0
	add	r4, r0, #0
.L1009:
	add	r1, r5, r3
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, #0x3
	add	r0, r3, r0
	add	r0, r0, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r0, [r2]
	lsl	r0, r0, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r3, r0
	bcc	.L1009	@cond_branch
.L1007:
	bl	PlayerBufferExecCompleted
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1012:
	.align	2, 0
.L1011:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gPlayerParty
.Lfe60:
	.size	 PlayerHandleSetRawMonData,.Lfe60-PlayerHandleSetRawMonData
	.align	2, 0
	.type	 PlayerHandleLoadMonSprite,function
	.thumb_func
PlayerHandleLoadMonSprite:
	push	{r4, lr}
	ldr	r2, .L1014
	ldr	r4, .L1014+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L1014+0x8
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldr	r2, .L1014+0xc
	ldr	r0, .L1014+0x10
	ldrb	r3, [r4]
	add	r0, r3, r0
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldr	r1, .L1014+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1014+0x18
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1015:
	.align	2, 0
.L1014:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattlerControllerFuncs
	.word	CompleteOnBankSpritePosX_0
.Lfe61:
	.size	 PlayerHandleLoadMonSprite,.Lfe61-PlayerHandleLoadMonSprite
	.align	2, 0
	.type	 PlayerHandleSwitchInAnim,function
	.thumb_func
PlayerHandleSwitchInAnim:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1017
	ldrb	r0, [r5]
	ldr	r4, .L1017+0x4
	lsl	r1, r0, #0x9
	add	r6, r4, #0x2
	add	r1, r1, r6
	ldrb	r1, [r1]
	bl	ClearTemporarySpeciesSpriteData
	ldr	r2, .L1017+0x8
	ldrb	r0, [r5]
	lsl	r1, r0, #0x1
	add	r1, r1, r2
	lsl	r0, r0, #0x9
	add	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r4, #0x0
	strh	r0, [r1]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L1017+0xc
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldr	r1, .L1017+0x10
	ldrb	r0, [r5]
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r1, .L1017+0x14
	ldrb	r0, [r5]
	add	r0, r0, r1
	strb	r4, [r0]
	ldrb	r0, [r5]
	lsl	r1, r0, #0x9
	add	r1, r1, r6
	ldrb	r1, [r1]
	bl	sub_805B258
	ldr	r1, .L1017+0x18
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1017+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1018:
	.align	2, 0
.L1017:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
	.word	gBattlerControllerFuncs
	.word	sub_805902C
.Lfe62:
	.size	 PlayerHandleSwitchInAnim,.Lfe62-PlayerHandleSwitchInAnim
	.align	2, 0
	.type	 sub_805B258,function
	.thumb_func
sub_805B258:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	ClearTemporarySpeciesSpriteData
	ldr	r0, .L1020
	lsl	r2, r6, #0x1
	add	r2, r2, r0
	ldr	r0, .L1020+0x4
	lsl	r1, r6, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	ldrb	r0, [r1]
	strh	r0, [r2]
	ldrh	r1, [r2]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1020+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	mov	r8, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r0, .L1020+0xc
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L1020+0x10
	mov	r9, r1
	add	r9, r9, r6
	mov	r1, r9
	strb	r0, [r1]
	add	r0, r6, #0
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, r8
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L1020+0x14
	mov	sl, r0
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteDefault_Y
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r6, #0
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, sl
	add	r1, r5, #0
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L1020+0x18
	add	r4, r6, r4
	strb	r0, [r4]
	ldr	r5, .L1020+0x1c
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrb	r1, [r4]
	strh	r1, [r0, #0x30]
	mov	r0, r9
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x32]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r6, [r0, #0x2e]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, r8
	strh	r1, [r0, #0x32]
	ldrb	r0, [r4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r3, r6, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L1020+0x20
	add	r6, r6, r1
	ldrb	r1, [r6]
	bl	StartSpriteAnim
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L1020+0x24
	str	r1, [r0]
	mov	r0, #0x0
	mov	r1, #0xff
	bl	DoPokeballSendOutAnimation
	mov	r1, r9
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0x2e]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1021:
	.align	2, 0
.L1020:
	.word	gBattlerPartyIndexes
	.word	gBattleBufferA
	.word	gPlayerParty
	.word	sub_805D714
	.word	gUnknown_03005D7C
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gBattleMonForms
	.word	SpriteCallbackDummy
.Lfe63:
	.size	 sub_805B258,.Lfe63-sub_805B258
	.align	2, 0
	.type	 PlayerHandleReturnMonToBall,function
	.thumb_func
PlayerHandleReturnMonToBall:
	push	{r4, r5, r6, lr}
	ldr	r1, .L1025
	ldr	r6, .L1025+0x4
	ldrb	r2, [r6]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r3, [r0]
	cmp	r3, #0
	bne	.L1023	@cond_branch
	ldr	r0, .L1025+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r3, [r0, #0x4]
	ldr	r1, .L1025+0xc
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1025+0x10
	str	r1, [r0]
	b	.L1024
.L1026:
	.align	2, 0
.L1025:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	DoSwitchOutAnimation
.L1023:
	ldr	r5, .L1027
	add	r0, r2, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L1027+0x4
	add	r0, r0, r4
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r1, .L1027+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	SetHealthboxSpriteInvisible
	bl	PlayerBufferExecCompleted
.L1024:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1028:
	.align	2, 0
.L1027:
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	gHealthboxSpriteIds
.Lfe64:
	.size	 PlayerHandleReturnMonToBall,.Lfe64-PlayerHandleReturnMonToBall
	.align	2, 0
	.type	 DoSwitchOutAnimation,function
	.thumb_func
DoSwitchOutAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L1037
	ldr	r4, [r6]
	ldr	r5, .L1037+0x4
	ldrb	r2, [r5]
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	beq	.L1031	@cond_branch
	cmp	r0, #0x1
	beq	.L1033	@cond_branch
	b	.L1030
.L1038:
	.align	2, 0
.L1037:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L1031:
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1032	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L1032:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L1030
.L1033:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1030	@cond_branch
	strb	r0, [r3, #0x4]
	ldrb	r2, [r5]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x1
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L1039
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1039+0x4
	str	r1, [r0]
.L1030:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1040:
	.align	2, 0
.L1039:
	.word	gBattlerControllerFuncs
	.word	sub_8059744
.Lfe65:
	.size	 DoSwitchOutAnimation,.Lfe65-DoSwitchOutAnimation
	.align	2, 0
	.type	 PlayerHandleDrawTrainerPic,function
	.thumb_func
PlayerHandleDrawTrainerPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L1059
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1042	@cond_branch
	bl	GetMultiplayerId
	ldr	r5, .L1059+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r4, #0xff
	ldrb	r0, [r1]
	cmp	r0, #0x4
	beq	.L1044	@cond_branch
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L1043	@cond_branch
.L1044:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x13]
	add	r4, r0, #0x2
	b	.L1049
.L1060:
	.align	2, 0
.L1059:
	.word	gBattleTypeFlags
	.word	gLinkPlayers
.L1043:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x2
	beq	.L1047	@cond_branch
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1]
	and	r4, r4, r0
	cmp	r4, #0x1
	bne	.L1046	@cond_branch
.L1047:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x13]
	add	r4, r0, #0x4
	b	.L1049
.L1046:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r4, [r1, #0x13]
	b	.L1049
.L1042:
	ldr	r0, .L1061
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x8]
.L1049:
	ldr	r0, .L1061+0x4
	ldr	r1, [r0]
	mov	r2, #0x40
	and	r1, r1, r2
	add	r5, r0, #0
	cmp	r1, #0
	beq	.L1050	@cond_branch
	ldr	r0, .L1061+0x8
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x2
	and	r1, r1, r0
	mov	r0, #0x20
	mov	r9, r0
	cmp	r1, #0
	beq	.L1051	@cond_branch
	mov	r1, #0x5a
	mov	r9, r1
.L1051:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1053	@cond_branch
	ldr	r0, .L1061+0xc
	ldrh	r1, [r0]
	ldr	r0, .L1061+0x10
	cmp	r1, r0
	beq	.L1053	@cond_branch
	mov	r0, #0x5a
	mov	r9, r0
	ldr	r1, .L1061+0x14
	b	.L1058
.L1062:
	.align	2, 0
.L1061:
	.word	gSaveBlock2Ptr
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gPartnerTrainerId
	.word	0xc03
	.word	gTrainerFrontPicCoords
.L1053:
	ldr	r1, .L1063
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	sub	r0, r0, r1
	lsl	r0, r0, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	ldr	r5, .L1063+0x4
	b	.L1055
.L1064:
	.align	2, 0
.L1063:
	.word	gTrainerBackPicCoords
	.word	gBattleTypeFlags
.L1050:
	mov	r0, #0x50
	mov	r9, r0
	ldr	r1, .L1065
.L1058:
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x8
	sub	r0, r0, r1
	lsl	r0, r0, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r0, r0, r1
	lsr	r7, r0, #0x10
.L1055:
	ldr	r0, [r5]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB10634
	b	.L1056	@long jump
.LCB10634:
	ldr	r0, .L1065+0x4
	ldrh	r1, [r0]
	ldr	r0, .L1065+0x8
	cmp	r1, r0
	bne	.LCB10643
	b	.L1056	@long jump
.LCB10643:
	ldr	r0, .L1065+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	bl	PlayerGenderToFrontTrainerPicId
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r5, r4, #0
	ldr	r6, .L1065+0x10
	ldrb	r1, [r6]
	add	r0, r5, #0
	bl	DecompressTrainerFrontPic
	ldrb	r0, [r6]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r5, #0
	bl	SetMultiuseSpriteTemplateToTrainerFront
	ldr	r0, .L1065+0x14
	mov	r8, r0
	lsl	r4, r7, #0x10
	asr	r4, r4, #0x10
	ldrb	r0, [r6]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	mov	r1, r9
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r4, .L1065+0x18
	ldrb	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1]
	ldr	r0, .L1065+0x1c
	lsl	r5, r5, #0x3
	add	r5, r5, r0
	ldrh	r0, [r5, #0x4]
	bl	IndexOfSpritePaletteTag
	ldr	r5, .L1065+0x20
	ldrb	r1, [r6]
	add	r1, r1, r4
	ldrb	r1, [r1]
	lsl	r2, r1, #0x4
	add	r2, r2, r1
	lsl	r2, r2, #0x2
	add	r2, r2, r5
	lsl	r0, r0, #0x4
	ldrb	r3, [r2, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2, #0x5]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x30
	strh	r1, [r0, #0x26]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L1065+0x24
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L1065+0x28
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x1]
	ldrb	r0, [r6]
	add	r0, r0, r4
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1057
.L1066:
	.align	2, 0
.L1065:
	.word	gTrainerBackPicCoords
	.word	gPartnerTrainerId
	.word	0xc03
	.word	gSaveBlock2Ptr
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gTrainerFrontPicPaletteTable
	.word	gSprites
	.word	0xfffe
	.word	sub_805D7AC
.L1056:
	ldr	r5, .L1067
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	DecompressTrainerBackPic
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r6, .L1067+0x4
	mov	r8, r9
	lsl	r4, r7, #0x10
	asr	r4, r4, #0x10
	ldrb	r0, [r5]
	bl	GetBattlerSpriteSubpriority
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	add	r0, r6, #0
	mov	r1, r8
	add	r2, r4, #0
	bl	CreateSprite
	ldr	r6, .L1067+0x8
	ldrb	r1, [r5]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r4, .L1067+0xc
	ldrb	r3, [r5]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0xf0
	strh	r1, [r0, #0x24]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L1067+0x10
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L1067+0x14
	str	r1, [r0]
.L1057:
	ldr	r1, .L1067+0x18
	ldr	r0, .L1067
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1067+0x1c
	str	r1, [r0]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1068:
	.align	2, 0
.L1067:
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xfffe
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBattlerSpriteCallbackDummy
.Lfe66:
	.size	 PlayerHandleDrawTrainerPic,.Lfe66-PlayerHandleDrawTrainerPic
	.align	2, 0
	.type	 PlayerHandleTrainerSlide,function
	.thumb_func
PlayerHandleTrainerSlide:
	push	{r4, r5, r6, lr}
	ldr	r0, .L1078
	ldr	r0, [r0]
	mov	r1, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1070	@cond_branch
	bl	GetMultiplayerId
	ldr	r5, .L1078+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	mov	r4, #0xff
	ldrb	r0, [r1]
	cmp	r0, #0x4
	beq	.L1072	@cond_branch
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x5
	bne	.L1071	@cond_branch
.L1072:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x13]
	add	r4, r0, #0x2
	b	.L1077
.L1079:
	.align	2, 0
.L1078:
	.word	gBattleTypeFlags
	.word	gLinkPlayers
.L1071:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r1, [r1]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0x2
	beq	.L1075	@cond_branch
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrh	r0, [r1]
	and	r4, r4, r0
	cmp	r4, #0x1
	bne	.L1074	@cond_branch
.L1075:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1, #0x13]
	add	r4, r0, #0x4
	b	.L1077
.L1074:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r4, [r1, #0x13]
	b	.L1077
.L1070:
	ldr	r0, .L1080
	ldr	r0, [r0]
	ldrb	r4, [r0, #0x8]
.L1077:
	ldr	r5, .L1080+0x4
	ldrb	r1, [r5]
	add	r0, r4, #0
	bl	DecompressTrainerBackPic
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetMultiuseSpriteTemplateToTrainerBack
	ldr	r0, .L1080+0x8
	ldr	r1, .L1080+0xc
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	ldrb	r1, [r4]
	mov	r2, #0x8
	sub	r2, r2, r1
	lsl	r2, r2, #0x12
	mov	r1, #0xa0
	lsl	r1, r1, #0xf
	add	r2, r2, r1
	asr	r2, r2, #0x10
	mov	r1, #0x50
	mov	r3, #0x1e
	bl	CreateSprite
	ldr	r6, .L1080+0x10
	ldrb	r1, [r5]
	add	r1, r1, r6
	strb	r0, [r1]
	ldr	r4, .L1080+0x14
	ldrb	r3, [r5]
	add	r0, r3, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	lsl	r3, r3, #0x4
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L1080+0x18
	strh	r1, [r0, #0x24]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r5]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r4, r4, #0x1c
	add	r0, r0, r4
	ldr	r1, .L1080+0x1c
	str	r1, [r0]
	ldr	r1, .L1080+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1080+0x24
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1081:
	.align	2, 0
.L1080:
	.word	gSaveBlock2Ptr
	.word	gActiveBattler
	.word	gMultiuseSpriteTemplate
	.word	gTrainerBackPicCoords
	.word	gBattlerSpriteIds
	.word	gSprites
	.word	0xffa0
	.word	sub_805D7AC
	.word	gBattlerControllerFuncs
	.word	CompleteOnBankSpriteCallbackDummy2
.Lfe67:
	.size	 PlayerHandleTrainerSlide,.Lfe67-PlayerHandleTrainerSlide
	.align	2, 0
	.type	 PlayerHandleTrainerSlideBack,function
	.thumb_func
PlayerHandleTrainerSlideBack:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1083
	ldr	r6, .L1083+0x4
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L1083+0x8
	add	r0, r0, r4
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L1083+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r4, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L1083+0x10
	str	r1, [r0]
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldr	r1, .L1083+0x14
	bl	StoreSpriteCallbackInData6
	ldrb	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r1, .L1083+0x18
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1083+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1084:
	.align	2, 0
.L1083:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	SpriteCallbackDummy
	.word	gBattlerControllerFuncs
	.word	sub_80588B4
.Lfe68:
	.size	 PlayerHandleTrainerSlideBack,.Lfe68-PlayerHandleTrainerSlideBack
	.align	2, 0
	.type	 PlayerHandleFaintAnimation,function
	.thumb_func
PlayerHandleFaintAnimation:
	push	{r4, r5, r6, lr}
	ldr	r6, .L1090
	ldr	r4, [r6]
	ldr	r5, .L1090+0x4
	ldrb	r2, [r5]
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r3, r1, r0
	ldrb	r0, [r3, #0x4]
	cmp	r0, #0
	bne	.L1086	@cond_branch
	ldr	r1, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1087	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L1087:
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x4]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L1088
.L1091:
	.align	2, 0
.L1090:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L1086:
	ldrb	r1, [r3]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L1088	@cond_branch
	strb	r4, [r3, #0x4]
	ldr	r2, .L1092
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r2
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L1092+0x4
	add	r0, r0, r2
	bl	HandleLowHpMusicChange
	mov	r1, #0x40
	neg	r1, r1
	mov	r0, #0x10
	bl	PlaySE12WithPanning
	ldr	r2, .L1092+0x8
	ldr	r3, .L1092+0xc
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r4, [r0, #0x30]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	ldrb	r0, [r5]
	add	r0, r0, r3
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L1092+0x10
	str	r1, [r0]
	ldr	r1, .L1092+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1092+0x18
	str	r1, [r0]
.L1088:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1093:
	.align	2, 0
.L1092:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	sub_8039C00
	.word	gBattlerControllerFuncs
	.word	sub_80596A8
.Lfe69:
	.size	 PlayerHandleFaintAnimation,.Lfe69-PlayerHandleFaintAnimation
	.align	2, 0
	.type	 PlayerHandlePaletteFade,function
	.thumb_func
PlayerHandlePaletteFade:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 PlayerHandlePaletteFade,.Lfe70-PlayerHandlePaletteFade
	.align	2, 0
	.type	 PlayerHandleSuccessBallThrowAnim,function
	.thumb_func
PlayerHandleSuccessBallThrowAnim:
	push	{r4, r5, lr}
	ldr	r0, .L1096
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	mov	r0, #0x4
	strb	r0, [r1, #0x8]
	ldr	r1, .L1096+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r5, .L1096+0x8
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x3
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L1096+0xc
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1096+0x10
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1097:
	.align	2, 0
.L1096:
	.word	gBattleSpritesDataPtr
	.word	gDoingBattleAnim
	.word	gActiveBattler
	.word	gBattlerControllerFuncs
	.word	CompleteOnSpecialAnimDone
.Lfe71:
	.size	 PlayerHandleSuccessBallThrowAnim,.Lfe71-PlayerHandleSuccessBallThrowAnim
	.align	2, 0
	.type	 PlayerHandleBallThrowAnim,function
	.thumb_func
PlayerHandleBallThrowAnim:
	push	{r4, r5, lr}
	ldr	r1, .L1099
	ldr	r5, .L1099+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	ldr	r0, .L1099+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	strb	r1, [r0, #0x8]
	ldr	r1, .L1099+0xc
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r4, [r5]
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r3, #0x3
	bl	InitAndLaunchSpecialAnimation
	ldr	r1, .L1099+0x10
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1099+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1100:
	.align	2, 0
.L1099:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	CompleteOnSpecialAnimDone
.Lfe72:
	.size	 PlayerHandleBallThrowAnim,.Lfe72-PlayerHandleBallThrowAnim
	.align	2, 0
	.type	 PlayerHandlePause,function
	.thumb_func
PlayerHandlePause:
	push	{lr}
	ldr	r1, .L1106
	ldr	r0, .L1106+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1103	@cond_branch
.L1104:
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1104	@cond_branch
.L1103:
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1107:
	.align	2, 0
.L1106:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe73:
	.size	 PlayerHandlePause,.Lfe73-PlayerHandlePause
	.align	2, 0
	.type	 PlayerHandleMoveAnimation,function
	.thumb_func
PlayerHandleMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r5, .L1112
	ldrb	r0, [r5]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB11555
	b	.L1109	@long jump
.LCB11555:
	ldr	r0, .L1112+0x4
	mov	ip, r0
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r0, r1, r0
	ldrb	r6, [r0]
	mov	r0, ip
	add	r0, r0, #0x2
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r6, r6, r0
	ldr	r0, .L1112+0x8
	mov	r8, r0
	mov	r0, ip
	add	r0, r0, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r1, r8
	strb	r0, [r1]
	ldr	r3, .L1112+0xc
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	mov	r0, ip
	add	r0, r0, #0x4
	add	r0, r1, r0
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0x5
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	strh	r2, [r3]
	ldr	r3, .L1112+0x10
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	mov	r0, ip
	add	r0, r0, #0x6
	add	r0, r1, r0
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0x7
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	mov	r0, ip
	add	r0, r0, #0x8
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x10
	orr	r2, r2, r0
	mov	r0, ip
	add	r0, r0, #0x9
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x18
	orr	r2, r2, r0
	str	r2, [r3]
	ldr	r2, .L1112+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	mov	r1, ip
	add	r1, r1, #0xa
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r4, .L1112+0x18
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	mov	r0, ip
	add	r0, r0, #0xc
	add	r0, r1, r0
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0xd
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	strh	r2, [r4]
	ldr	r7, .L1112+0x1c
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	mov	r0, ip
	add	r0, r0, #0x10
	add	r1, r1, r0
	str	r1, [r7]
	ldr	r2, .L1112+0x20
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r1, [r1]
	str	r1, [r0]
	mov	r0, r8
	ldrb	r1, [r0]
	add	r0, r6, #0
	bl	IsMoveWithoutAnimation
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L1110	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1109
.L1113:
	.align	2, 0
.L1112:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gAnimMoveTurn
	.word	gAnimMovePower
	.word	gAnimMoveDmg
	.word	gAnimFriendship
	.word	gWeatherMoveAnim
	.word	gAnimDisableStructPtr
	.word	gTransformedPersonalities
.L1110:
	ldr	r0, .L1114
	ldr	r0, [r0]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x4]
	ldr	r1, .L1114+0x4
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1114+0x8
	str	r1, [r0]
	ldrh	r1, [r4]
	ldr	r2, [r7]
	add	r0, r6, #0
	bl	BattleTv_SetDataBasedOnMove
.L1109:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1115:
	.align	2, 0
.L1114:
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	PlayerDoMoveAnimation
.Lfe74:
	.size	 PlayerHandleMoveAnimation,.Lfe74-PlayerHandleMoveAnimation
	.align	2, 0
	.type	 PlayerDoMoveAnimation,function
	.thumb_func
PlayerDoMoveAnimation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r2, .L1130
	ldr	r6, .L1130+0x4
	ldrb	r3, [r6]
	lsl	r1, r3, #0x9
	add	r0, r2, #0x1
	mov	sl, r0
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r5, r2, #0x2
	mov	r9, r5
	add	r0, r1, r5
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	add	r2, r2, #0xb
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r8, r1
	ldr	r7, .L1130+0x8
	ldr	r5, [r7]
	ldr	r1, [r5, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x4]
	cmp	r2, #0x1
	beq	.L1120	@cond_branch
	cmp	r2, #0x1
	bgt	.L1129	@cond_branch
	cmp	r2, #0
	beq	.L1118	@cond_branch
	b	.L1117
.L1131:
	.align	2, 0
.L1130:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleSpritesDataPtr
.L1129:
	cmp	r2, #0x2
	beq	.L1122	@cond_branch
	cmp	r2, #0x3
	beq	.L1125	@cond_branch
	b	.L1117
.L1118:
	ldr	r1, [r5]
	lsl	r0, r3, #0x2
	add	r1, r0, r1
	ldrb	r2, [r1]
	mov	r0, #0xc
	and	r0, r0, r2
	cmp	r0, #0x4
	bne	.L1119	@cond_branch
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r6]
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x5
	bl	InitAndLaunchSpecialAnimation
.L1119:
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x1
	strb	r1, [r0, #0x4]
	b	.L1117
.L1120:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1117	@cond_branch
	mov	r0, #0x0
	bl	sub_805EB9C
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x2
	strb	r1, [r0, #0x4]
	b	.L1117
.L1122:
	ldr	r0, .L1132
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L1132+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1117	@cond_branch
	mov	r0, #0x1
	bl	sub_805EB9C
	ldr	r0, [r7]
	ldrb	r2, [r6]
	ldr	r1, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1124	@cond_branch
	mov	r0, r8
	cmp	r0, #0x1
	bhi	.L1124	@cond_branch
	add	r0, r2, #0
	add	r1, r2, #0
	mov	r3, #0x6
	bl	InitAndLaunchSpecialAnimation
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
.L1124:
	ldr	r0, .L1132+0x8
	ldr	r2, [r0]
	ldr	r0, .L1132+0xc
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x3
	strb	r1, [r0, #0x4]
	b	.L1117
.L1133:
	.align	2, 0
.L1132:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.L1125:
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L1117	@cond_branch
	bl	CopyAllBattleSpritesInvisibilities
	ldrb	r0, [r6]
	lsl	r2, r0, #0x9
	mov	r3, sl
	add	r1, r2, r3
	ldrb	r1, [r1]
	add	r2, r2, r9
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	bl	TrySetBehindSubstituteSpriteBit
	ldr	r0, [r7]
	ldrb	r1, [r6]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r4, [r0, #0x4]
	bl	PlayerBufferExecCompleted
.L1117:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe75:
	.size	 PlayerDoMoveAnimation,.Lfe75-PlayerDoMoveAnimation
	.align	2, 0
	.type	 PlayerHandlePrintString,function
	.thumb_func
PlayerHandlePrintString:
	push	{r4, r5, lr}
	ldr	r0, .L1135
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1135+0x4
	strh	r1, [r0]
	ldr	r5, .L1135+0x8
	ldrb	r4, [r5]
	lsl	r4, r4, #0x9
	ldr	r0, .L1135+0xc
	add	r4, r4, r0
	ldrh	r0, [r4]
	bl	BufferStringBattle
	ldr	r0, .L1135+0x10
	mov	r1, #0x0
	bl	BattlePutTextOnWindow
	ldr	r1, .L1135+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1135+0x18
	str	r1, [r0]
	ldrh	r0, [r4]
	bl	BattleTv_SetDataBasedOnString
	ldrb	r0, [r5]
	ldrh	r1, [r4]
	bl	BattleArena_DeductMindPoints
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1136:
	.align	2, 0
.L1135:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gActiveBattler
	.word	gBattleBufferA+0x2
	.word	gDisplayedStringBattle
	.word	gBattlerControllerFuncs
	.word	CompleteOnInactiveTextPrinter2
.Lfe76:
	.size	 PlayerHandlePrintString,.Lfe76-PlayerHandlePrintString
	.align	2, 0
	.type	 PlayerHandlePrintSelectionString,function
	.thumb_func
PlayerHandlePrintSelectionString:
	push	{lr}
	ldr	r0, .L1140
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1138	@cond_branch
	bl	PlayerHandlePrintString
	b	.L1139
.L1141:
	.align	2, 0
.L1140:
	.word	gActiveBattler
.L1138:
	bl	PlayerBufferExecCompleted
.L1139:
	pop	{r0}
	bx	r0
.Lfe77:
	.size	 PlayerHandlePrintSelectionString,.Lfe77-PlayerHandlePrintSelectionString
	.align	2, 0
	.type	 HandleChooseActionAfterDma3,function
	.thumb_func
HandleChooseActionAfterDma3:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L1143	@cond_branch
	ldr	r0, .L1144
	strh	r1, [r0]
	ldr	r1, .L1144+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	ldr	r1, .L1144+0x8
	ldr	r0, .L1144+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1144+0x10
	str	r1, [r0]
.L1143:
	pop	{r0}
	bx	r0
.L1145:
	.align	2, 0
.L1144:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleInputChooseAction
.Lfe78:
	.size	 HandleChooseActionAfterDma3,.Lfe78-HandleChooseActionAfterDma3
	.align	2, 0
	.type	 PlayerHandleChooseAction,function
	.thumb_func
PlayerHandleChooseAction:
	push	{r4, lr}
	ldr	r1, .L1152
	ldr	r0, .L1152+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1152+0x8
	str	r1, [r0]
	bl	BattleTv_ClearExplosionFaintCause
	ldr	r0, .L1152+0xc
	mov	r1, #0x2
	bl	BattlePutTextOnWindow
	mov	r4, #0x0
.L1150:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	ActionSelectionDestroyCursorAt
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1150	@cond_branch
	ldr	r1, .L1152+0x10
	ldr	r0, .L1152+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	ActionSelectionCreateCursorAt
	ldr	r0, .L1152+0x14
	bl	BattleStringExpandPlaceholdersToDisplayedString
	ldr	r0, .L1152+0x18
	mov	r1, #0x1
	bl	BattlePutTextOnWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.L1153:
	.align	2, 0
.L1152:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleChooseActionAfterDma3
	.word	gText_BattleMenu
	.word	gActionSelectionCursor
	.word	gText_WhatWillPkmnDo
	.word	gDisplayedStringBattle
.Lfe79:
	.size	 PlayerHandleChooseAction,.Lfe79-PlayerHandleChooseAction
	.align	2, 0
	.type	 PlayerHandleUnknownYesNoBox,function
	.thumb_func
PlayerHandleUnknownYesNoBox:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L1157
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1155	@cond_branch
	str	r0, [sp]
	mov	r0, #0x18
	mov	r1, #0x8
	mov	r2, #0x1d
	mov	r3, #0xd
	bl	HandleBattleWindow
	ldr	r0, .L1157+0x4
	mov	r1, #0xc
	bl	BattlePutTextOnWindow
	ldr	r1, .L1157+0x8
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0x1
	bl	BattleCreateYesNoCursorAt
	ldr	r1, .L1157+0xc
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1157+0x10
	str	r1, [r0]
	b	.L1156
.L1158:
	.align	2, 0
.L1157:
	.word	gActiveBattler
	.word	gText_BattleYesNoChoice
	.word	gMultiUsePlayerCursor
	.word	gBattlerControllerFuncs
	.word	PlayerHandleUnknownYesNoInput
.L1155:
	bl	PlayerBufferExecCompleted
.L1156:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 PlayerHandleUnknownYesNoBox,.Lfe80-PlayerHandleUnknownYesNoBox
	.align	2, 0
	.type	 HandleChooseMoveAfterDma3,function
	.thumb_func
HandleChooseMoveAfterDma3:
	push	{lr}
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L1160	@cond_branch
	ldr	r0, .L1161
	strh	r1, [r0]
	ldr	r1, .L1161+0x4
	mov	r2, #0xa0
	lsl	r2, r2, #0x1
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r1, .L1161+0x8
	ldr	r0, .L1161+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1161+0x10
	str	r1, [r0]
.L1160:
	pop	{r0}
	bx	r0
.L1162:
	.align	2, 0
.L1161:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleInputChooseMove
.Lfe81:
	.size	 HandleChooseMoveAfterDma3,.Lfe81-HandleChooseMoveAfterDma3
	.align	2, 0
	.type	 PlayerChooseMoveInBattlePalace,function
	.thumb_func
PlayerChooseMoveInBattlePalace:
	push	{lr}
	ldr	r0, .L1165
	ldrb	r1, [r0]
	ldr	r0, .L1165+0x4
	ldr	r0, [r0]
	add	r1, r1, r0
	mov	r0, #0xa6
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1164	@cond_branch
	ldr	r1, .L1165+0x8
	ldr	r0, .L1165+0xc
	ldr	r0, [r0]
	str	r0, [r1]
	bl	ChooseMoveAndTargetInBattlePalace
	add	r2, r0, #0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r0, #0x1
	mov	r1, #0xa
	bl	BtlController_EmitTwoReturnValues
	bl	PlayerBufferExecCompleted
.L1164:
	pop	{r0}
	bx	r0
.L1166:
	.align	2, 0
.L1165:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlePalaceMoveSelectionRngValue
	.word	gRngValue
.Lfe82:
	.size	 PlayerChooseMoveInBattlePalace,.Lfe82-PlayerChooseMoveInBattlePalace
	.align	2, 0
	.type	 PlayerHandleChooseMove,function
	.thumb_func
PlayerHandleChooseMove:
	push	{lr}
	ldr	r0, .L1171
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xa
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1168	@cond_branch
	ldr	r2, .L1171+0x4
	ldrb	r0, [r2]
	ldr	r1, .L1171+0x8
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0xa6
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x8
	strb	r1, [r0]
	ldr	r1, .L1171+0xc
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1171+0x10
	b	.L1170
.L1172:
	.align	2, 0
.L1171:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattlerControllerFuncs
	.word	PlayerChooseMoveInBattlePalace
.L1168:
	bl	InitMoveSelectionsVarsAndStrings
	ldr	r1, .L1173
	ldr	r0, .L1173+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1173+0x8
.L1170:
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L1174:
	.align	2, 0
.L1173:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	HandleChooseMoveAfterDma3
.Lfe83:
	.size	 PlayerHandleChooseMove,.Lfe83-PlayerHandleChooseMove
	.align	2, 0
	.globl	InitMoveSelectionsVarsAndStrings
	.type	 InitMoveSelectionsVarsAndStrings,function
	.thumb_func
InitMoveSelectionsVarsAndStrings:
	push	{lr}
	bl	MoveSelectionDisplayMoveNames
	ldr	r1, .L1176
	mov	r0, #0xff
	strb	r0, [r1]
	ldr	r1, .L1176+0x4
	ldr	r0, .L1176+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	MoveSelectionCreateCursorAt
	bl	MoveSelectionDisplayPpString
	bl	MoveSelectionDisplayPpNumber
	bl	MoveSelectionDisplayMoveType
	pop	{r0}
	bx	r0
.L1177:
	.align	2, 0
.L1176:
	.word	gMultiUsePlayerCursor
	.word	gMoveSelectionCursor
	.word	gActiveBattler
.Lfe84:
	.size	 InitMoveSelectionsVarsAndStrings,.Lfe84-InitMoveSelectionsVarsAndStrings
	.align	2, 0
	.type	 PlayerHandleChooseItem,function
	.thumb_func
PlayerHandleChooseItem:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1184
	ldr	r2, .L1184+0x4
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1184+0x8
	str	r1, [r0]
	ldr	r1, .L1184+0xc
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r3, #0x0
	ldr	r5, .L1184+0x10
	ldr	r4, .L1184+0x14
.L1182:
	add	r0, r3, r5
	ldrb	r1, [r2]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x1
	add	r1, r3, r1
	add	r1, r1, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1182	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1185:
	.align	2, 0
.L1184:
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	OpenBagAndChooseItem
	.word	gBattlerInMenuId
	.word	gBattlePartyCurrentOrder
	.word	gBattleBufferA
.Lfe85:
	.size	 PlayerHandleChooseItem,.Lfe85-PlayerHandleChooseItem
	.align	2, 0
	.type	 PlayerHandleChoosePokemon,function
	.thumb_func
PlayerHandleChoosePokemon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	mov	r3, #0x0
	ldr	r0, .L1194
	mov	ip, r0
	ldr	r1, .L1194+0x4
	mov	r8, r1
	ldr	r2, .L1194+0x8
	ldr	r7, .L1194+0xc
	mov	r6, ip
	mov	r5, r8
	add	r4, r2, #0
.L1190:
	add	r0, r3, r6
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r1, r1, #0x4
	add	r1, r3, r1
	add	r1, r1, r5
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0x2
	ble	.L1190	@cond_branch
	ldr	r0, [r7]
	mov	r1, #0x80
	lsl	r1, r1, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1192	@cond_branch
	ldrb	r3, [r2]
	lsl	r0, r3, #0x9
	mov	r1, r8
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x2
	beq	.L1192	@cond_branch
	ldr	r1, .L1194+0x10
	lsl	r0, r3, #0x1
	add	r0, r0, r1
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	mov	r2, ip
	bl	BtlController_EmitChosenMonReturnValue
	bl	PlayerBufferExecCompleted
	b	.L1193
.L1195:
	.align	2, 0
.L1194:
	.word	gBattlePartyCurrentOrder
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.L1192:
	ldr	r0, .L1196
	mov	r1, #0xff
	bl	CreateTask
	ldr	r3, .L1196+0x4
	ldr	r4, .L1196+0x8
	ldrb	r1, [r4]
	add	r1, r1, r3
	mov	r2, #0x0
	mov	r8, r2
	strb	r0, [r1]
	ldr	r5, .L1196+0xc
	ldrb	r2, [r4]
	add	r3, r2, r3
	ldrb	r0, [r3]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r5
	ldr	r5, .L1196+0x10
	lsl	r2, r2, #0x9
	add	r6, r5, #0x1
	add	r2, r2, r6
	ldrb	r2, [r2]
	mov	r0, #0xf
	and	r0, r0, r2
	strh	r0, [r1, #0x8]
	ldr	r3, .L1196+0x14
	ldr	r1, [r3]
	add	r1, r1, #0x49
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsr	r0, r0, #0x4
	strb	r0, [r1]
	ldr	r2, [r3]
	add	r2, r2, #0x8b
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r1, [r3]
	add	r1, r1, #0xb0
	ldrb	r0, [r4]
	lsl	r0, r0, #0x9
	add	r5, r5, #0x3
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, r8
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L1196+0x18
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1196+0x1c
	str	r1, [r0]
	ldr	r1, .L1196+0x20
	ldrb	r0, [r4]
	strb	r0, [r1]
.L1193:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1197:
	.align	2, 0
.L1196:
	.word	TaskDummy
	.word	gUnknown_03005D7C
	.word	gActiveBattler
	.word	gTasks
	.word	gBattleBufferA
	.word	gBattleStruct
	.word	gBattlerControllerFuncs
	.word	OpenPartyMenuToChooseMon
	.word	gBattlerInMenuId
.Lfe86:
	.size	 PlayerHandleChoosePokemon,.Lfe86-PlayerHandleChoosePokemon
	.align	2, 0
	.type	 PlayerHandleCmd23,function
	.thumb_func
PlayerHandleCmd23:
	push	{lr}
	add	sp, sp, #-0x4
	bl	BattleStopLowHpSound
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 PlayerHandleCmd23,.Lfe87-PlayerHandleCmd23
	.align	2, 0
	.type	 PlayerHandleHealthBarUpdate,function
	.thumb_func
PlayerHandleHealthBarUpdate:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	bl	LoadBattleBarGfx
	ldr	r3, .L1203
	ldr	r0, .L1203+0x4
	mov	r9, r0
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r3, #0x2
	add	r0, r1, r0
	ldrb	r2, [r0]
	add	r3, r3, #0x3
	add	r1, r1, r3
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r2, r2, r0
	lsl	r2, r2, #0x10
	asr	r7, r2, #0x10
	cmp	r7, #0
	ble	.L1200	@cond_branch
	ldr	r1, .L1203+0x8
	ldr	r0, [r1]
	add	r0, r0, r7
	str	r0, [r1]
.L1200:
	ldr	r0, .L1203+0xc
	cmp	r7, r0
	beq	.L1201	@cond_branch
	ldr	r6, .L1203+0x10
	mov	r1, r9
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L1203+0x14
	add	r0, r0, r4
	mov	r1, #0x3a
	bl	GetMonData
	mov	r8, r0
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x39
	bl	GetMonData
	add	r3, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r1, .L1203+0x18
	add	r1, r0, r1
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r2, r8
	bl	SetBattleBarStruct
	b	.L1202
.L1204:
	.align	2, 0
.L1203:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gPlayerPartyLostHP
	.word	0x7fff
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
.L1201:
	ldr	r1, .L1205
	mov	r2, r9
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1205+0x4
	add	r0, r0, r1
	mov	r1, #0x3a
	bl	GetMonData
	add	r2, r0, #0
	mov	r1, r9
	ldrb	r0, [r1]
	ldr	r4, .L1205+0x8
	add	r1, r0, r4
	ldrb	r1, [r1]
	str	r7, [sp]
	mov	r3, #0x0
	bl	SetBattleBarStruct
	mov	r2, r9
	ldrb	r0, [r2]
	add	r0, r0, r4
	ldrb	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	UpdateHpTextInHealthbox
.L1202:
	ldr	r1, .L1205+0xc
	ldr	r0, .L1205+0x10
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1205+0x14
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1206:
	.align	2, 0
.L1205:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gHealthboxSpriteIds
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	CompleteOnHealthbarDone
.Lfe88:
	.size	 PlayerHandleHealthBarUpdate,.Lfe88-PlayerHandleHealthBarUpdate
	.align	2, 0
	.type	 PlayerHandleExpUpdate,function
	.thumb_func
PlayerHandleExpUpdate:
	push	{r4, r5, r6, r7, lr}
	ldr	r5, .L1210
	ldr	r6, .L1210+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x9
	add	r1, r5, #0x1
	add	r0, r0, r1
	ldrb	r7, [r0]
	mov	r0, #0x64
	mov	r1, r7
	mul	r1, r1, r0
	ldr	r0, .L1210+0x8
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	cmp	r0, #0x63
	bls	.L1208	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1209
.L1211:
	.align	2, 0
.L1210:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gPlayerParty
.L1208:
	mov	r0, #0x1
	bl	LoadBattleBarGfx
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x9
	add	r0, r5, #0x2
	add	r0, r1, r0
	ldrb	r4, [r0]
	add	r0, r5, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r4, r4, r0
	ldr	r0, .L1212
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1212+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r7, [r1, #0x8]
	strh	r4, [r1, #0xa]
	ldrb	r0, [r6]
	strh	r0, [r1, #0xc]
	ldr	r1, .L1212+0x8
	ldrb	r0, [r6]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1212+0xc
	str	r1, [r0]
.L1209:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1213:
	.align	2, 0
.L1212:
	.word	Task_GiveExpToMon
	.word	gTasks
	.word	gBattlerControllerFuncs
	.word	nullsub_21
.Lfe89:
	.size	 PlayerHandleExpUpdate,.Lfe89-PlayerHandleExpUpdate
	.align	2, 0
	.type	 PlayerHandleStatusIconUpdate,function
	.thumb_func
PlayerHandleStatusIconUpdate:
	push	{r4, lr}
	ldr	r4, .L1216
	ldrb	r0, [r4]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1215	@cond_branch
	ldr	r0, .L1216+0x4
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	ldr	r2, .L1216+0x8
	lsl	r1, r1, #0x1
	add	r1, r1, r2
	ldrh	r2, [r1]
	mov	r1, #0x64
	mul	r1, r1, r2
	ldr	r2, .L1216+0xc
	add	r1, r1, r2
	mov	r2, #0x9
	bl	UpdateHealthboxAttribute
	ldrb	r2, [r4]
	ldr	r0, .L1216+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	lsl	r1, r2, #0x1
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, .L1216+0x14
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1216+0x18
	str	r1, [r0]
.L1215:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1217:
	.align	2, 0
.L1216:
	.word	gActiveBattler
	.word	gHealthboxSpriteIds
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleSpritesDataPtr
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe90:
	.size	 PlayerHandleStatusIconUpdate,.Lfe90-PlayerHandleStatusIconUpdate
	.align	2, 0
	.type	 PlayerHandleStatusAnimation,function
	.thumb_func
PlayerHandleStatusAnimation:
	push	{r4, r5, lr}
	ldr	r5, .L1220
	ldrb	r0, [r5]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1219	@cond_branch
	ldr	r4, .L1220+0x4
	ldrb	r3, [r5]
	lsl	r3, r3, #0x9
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	add	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x8
	orr	r1, r1, r2
	add	r2, r4, #0x4
	add	r2, r3, r2
	ldrb	r2, [r2]
	lsl	r2, r2, #0x10
	orr	r1, r1, r2
	add	r4, r4, #0x5
	add	r3, r3, r4
	ldrb	r2, [r3]
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	bl	InitAndLaunchChosenStatusAnimation
	ldr	r1, .L1220+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1220+0xc
	str	r1, [r0]
.L1219:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1221:
	.align	2, 0
.L1220:
	.word	gActiveBattler
	.word	gBattleBufferA
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedStatusAnimation
.Lfe91:
	.size	 PlayerHandleStatusAnimation,.Lfe91-PlayerHandleStatusAnimation
	.align	2, 0
	.type	 PlayerHandleStatusXor,function
	.thumb_func
PlayerHandleStatusXor:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	ldr	r0, .L1223
	mov	r8, r0
	ldr	r4, .L1223+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L1223+0x8
	add	r0, r0, r5
	mov	r1, #0x37
	bl	GetMonData
	ldr	r2, .L1223+0xc
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	eor	r0, r0, r1
	mov	r1, sp
	strb	r0, [r1]
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r8
	ldrh	r0, [r0]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	bl	PlayerBufferExecCompleted
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1224:
	.align	2, 0
.L1223:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
	.word	gBattleBufferA
.Lfe92:
	.size	 PlayerHandleStatusXor,.Lfe92-PlayerHandleStatusXor
	.align	2, 0
	.type	 PlayerHandleDataTransfer,function
	.thumb_func
PlayerHandleDataTransfer:
	push	{lr}
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe93:
	.size	 PlayerHandleDataTransfer,.Lfe93-PlayerHandleDataTransfer
	.align	2, 0
	.type	 PlayerHandleDMA3Transfer,function
	.thumb_func
PlayerHandleDMA3Transfer:
	push	{r4, r5, lr}
	ldr	r3, .L1233
	ldr	r0, .L1233+0x4
	ldrb	r2, [r0]
	lsl	r2, r2, #0x9
	add	r0, r3, #0x1
	add	r0, r2, r0
	ldrb	r5, [r0]
	add	r0, r3, #0x2
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r5, r5, r0
	add	r0, r3, #0x3
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x10
	orr	r5, r5, r0
	add	r0, r3, #0x4
	add	r0, r2, r0
	ldrb	r4, [r0]
	lsl	r4, r4, #0x18
	add	r0, r3, #0x5
	add	r0, r2, r0
	ldrb	r1, [r0]
	add	r0, r3, #0x6
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	add	r3, r3, #0x7
	add	r2, r2, r3
	orr	r5, r5, r4
	lsr	r4, r1, #0x10
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r4, r0
	bhi	.L1230	@cond_branch
	ldr	r0, .L1233+0x8
	str	r2, [r0]
	str	r5, [r0, #0x4]
	lsr	r1, r1, #0x11
	mov	r2, #0x80
	lsl	r2, r2, #0x18
	orr	r1, r1, r2
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	b	.L1232
.L1234:
	.align	2, 0
.L1233:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	0x40000d4
.L1230:
	ldr	r3, .L1235
	str	r2, [r3]
	str	r5, [r3, #0x4]
	ldr	r0, .L1235+0x4
	str	r0, [r3, #0x8]
	ldr	r0, [r3, #0x8]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	add	r2, r2, r0
	add	r5, r5, r0
	ldr	r1, .L1235+0x8
	add	r4, r4, r1
	cmp	r4, r0
	bhi	.L1230	@cond_branch
	str	r2, [r3]
	str	r5, [r3, #0x4]
	lsr	r0, r4, #0x1
	mov	r1, #0x80
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	str	r0, [r3, #0x8]
	ldr	r0, [r3, #0x8]
.L1232:
	bl	PlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1236:
	.align	2, 0
.L1235:
	.word	0x40000d4
	.word	-0x7ffff800
	.word	-0x1000
.Lfe94:
	.size	 PlayerHandleDMA3Transfer,.Lfe94-PlayerHandleDMA3Transfer
	.align	2, 0
	.type	 PlayerHandlePlayBGM,function
	.thumb_func
PlayerHandlePlayBGM:
	push	{lr}
	ldr	r2, .L1238
	ldr	r0, .L1238+0x4
	ldrb	r1, [r0]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1239:
	.align	2, 0
.L1238:
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe95:
	.size	 PlayerHandlePlayBGM,.Lfe95-PlayerHandlePlayBGM
	.align	2, 0
	.type	 PlayerHandleCmd32,function
	.thumb_func
PlayerHandleCmd32:
	push	{lr}
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 PlayerHandleCmd32,.Lfe96-PlayerHandleCmd32
	.align	2, 0
	.type	 PlayerHandleTwoReturnValues,function
	.thumb_func
PlayerHandleTwoReturnValues:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 PlayerHandleTwoReturnValues,.Lfe97-PlayerHandleTwoReturnValues
	.align	2, 0
	.type	 PlayerHandleChosenMonReturnValue,function
	.thumb_func
PlayerHandleChosenMonReturnValue:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	BtlController_EmitChosenMonReturnValue
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe98:
	.size	 PlayerHandleChosenMonReturnValue,.Lfe98-PlayerHandleChosenMonReturnValue
	.align	2, 0
	.type	 PlayerHandleOneReturnValue,function
	.thumb_func
PlayerHandleOneReturnValue:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BtlController_EmitOneReturnValue
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 PlayerHandleOneReturnValue,.Lfe99-PlayerHandleOneReturnValue
	.align	2, 0
	.type	 PlayerHandleOneReturnValue_Duplicate,function
	.thumb_func
PlayerHandleOneReturnValue_Duplicate:
	push	{lr}
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BtlController_EmitOneReturnValue_Duplicate
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe100:
	.size	 PlayerHandleOneReturnValue_Duplicate,.Lfe100-PlayerHandleOneReturnValue_Duplicate
	.align	2, 0
	.type	 PlayerHandleCmd37,function
	.thumb_func
PlayerHandleCmd37:
	push	{lr}
	ldr	r2, .L1246
	ldrb	r1, [r2]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1247:
	.align	2, 0
.L1246:
	.word	gUnknown_02022D0C
.Lfe101:
	.size	 PlayerHandleCmd37,.Lfe101-PlayerHandleCmd37
	.align	2, 0
	.type	 PlayerHandleCmd38,function
	.thumb_func
PlayerHandleCmd38:
	push	{lr}
	ldr	r3, .L1249
	ldr	r1, .L1249+0x4
	ldr	r0, .L1249+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r1, #0x7f
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1250:
	.align	2, 0
.L1249:
	.word	gUnknown_02022D0C
	.word	gBattleBufferA
	.word	gActiveBattler
.Lfe102:
	.size	 PlayerHandleCmd38,.Lfe102-PlayerHandleCmd38
	.align	2, 0
	.type	 PlayerHandleCmd39,function
	.thumb_func
PlayerHandleCmd39:
	push	{lr}
	ldr	r2, .L1252
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1253:
	.align	2, 0
.L1252:
	.word	gUnknown_02022D0C
.Lfe103:
	.size	 PlayerHandleCmd39,.Lfe103-PlayerHandleCmd39
	.align	2, 0
	.type	 PlayerHandleCmd40,function
	.thumb_func
PlayerHandleCmd40:
	push	{lr}
	ldr	r3, .L1255
	ldr	r1, [r3]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x1f
	mov	r0, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x7
	ldrb	r2, [r3]
	mov	r0, #0x7f
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1256:
	.align	2, 0
.L1255:
	.word	gUnknown_02022D0C
.Lfe104:
	.size	 PlayerHandleCmd40,.Lfe104-PlayerHandleCmd40
	.align	2, 0
	.type	 PlayerHandleHitAnimation,function
	.thumb_func
PlayerHandleHitAnimation:
	push	{r4, lr}
	ldr	r3, .L1260
	ldr	r2, .L1260+0x4
	ldr	r4, .L1260+0x8
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1258	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1259
.L1261:
	.align	2, 0
.L1260:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gActiveBattler
.L1258:
	ldr	r1, .L1262
	mov	r0, #0x1
	strb	r0, [r1]
	ldrb	r0, [r4]
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x30]
	ldrb	r0, [r4]
	bl	DoHitAnimHealthboxEffect
	ldr	r1, .L1262+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1262+0x8
	str	r1, [r0]
.L1259:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1263:
	.align	2, 0
.L1262:
	.word	gDoingBattleAnim
	.word	gBattlerControllerFuncs
	.word	DoHitAnimBlinkSpriteEffect
.Lfe105:
	.size	 PlayerHandleHitAnimation,.Lfe105-PlayerHandleHitAnimation
	.align	2, 0
	.type	 PlayerHandleCmd42,function
	.thumb_func
PlayerHandleCmd42:
	push	{lr}
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 PlayerHandleCmd42,.Lfe106-PlayerHandleCmd42
	.align	2, 0
	.type	 PlayerHandlePlaySE,function
	.thumb_func
PlayerHandlePlaySE:
	push	{r4, lr}
	ldr	r4, .L1268
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r3, #0x3f
	cmp	r0, #0
	bne	.L1266	@cond_branch
	mov	r3, #0xc0
.L1266:
	ldr	r2, .L1268+0x4
	ldrb	r1, [r4]
	lsl	r1, r1, #0x9
	add	r0, r2, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r2, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	lsl	r1, r3, #0x18
	asr	r1, r1, #0x18
	bl	PlaySE12WithPanning
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L1269:
	.align	2, 0
.L1268:
	.word	gActiveBattler
	.word	gBattleBufferA
.Lfe107:
	.size	 PlayerHandlePlaySE,.Lfe107-PlayerHandlePlaySE
	.align	2, 0
	.type	 PlayerHandlePlayFanfareOrBGM,function
	.thumb_func
PlayerHandlePlayFanfareOrBGM:
	push	{r4, r5, lr}
	ldr	r4, .L1273
	ldr	r5, .L1273+0x4
	ldrb	r0, [r5]
	lsl	r3, r0, #0x9
	add	r0, r4, #0x3
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1271	@cond_branch
	bl	BattleStopLowHpSound
	ldrb	r1, [r5]
	lsl	r1, r1, #0x9
	add	r0, r4, #0x1
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r2, r4, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayBGM
	b	.L1272
.L1274:
	.align	2, 0
.L1273:
	.word	gBattleBufferA
	.word	gActiveBattler
.L1271:
	add	r0, r4, #0x1
	add	r0, r3, r0
	ldrb	r0, [r0]
	add	r1, r4, #0x2
	add	r1, r3, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bl	PlayFanfare
.L1272:
	bl	PlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe108:
	.size	 PlayerHandlePlayFanfareOrBGM,.Lfe108-PlayerHandlePlayFanfareOrBGM
	.align	2, 0
	.type	 PlayerHandleFaintingCry,function
	.thumb_func
PlayerHandleFaintingCry:
	push	{lr}
	ldr	r1, .L1276
	ldr	r0, .L1276+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1276+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x19
	neg	r1, r1
	mov	r2, #0x5
	bl	PlayCry3
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1277:
	.align	2, 0
.L1276:
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gPlayerParty
.Lfe109:
	.size	 PlayerHandleFaintingCry,.Lfe109-PlayerHandleFaintingCry
	.align	2, 0
	.type	 PlayerHandleIntroSlide,function
	.thumb_func
PlayerHandleIntroSlide:
	push	{lr}
	ldr	r1, .L1279
	ldr	r0, .L1279+0x4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	HandleIntroSlide
	ldr	r2, .L1279+0x8
	ldrh	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strh	r0, [r2]
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1280:
	.align	2, 0
.L1279:
	.word	gBattleBufferA
	.word	gActiveBattler
	.word	gIntroSlideFlags
.Lfe110:
	.size	 PlayerHandleIntroSlide,.Lfe110-PlayerHandleIntroSlide
	.align	2, 0
	.type	 PlayerHandleIntroTrainerBallThrow,function
	.thumb_func
PlayerHandleIntroTrainerBallThrow:
	push	{r4, r5, r6, r7, lr}
	ldr	r6, .L1283
	ldr	r7, .L1283+0x4
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r5, .L1283+0x8
	add	r0, r0, r5
	bl	SetSpritePrimaryCoordsFromSecondaryCoords
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x32
	strh	r1, [r0, #0x2e]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L1283+0xc
	strh	r1, [r0, #0x32]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r1, [r0, #0x22]
	strh	r1, [r0, #0x36]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r5, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L1283+0x10
	str	r1, [r0]
	ldrb	r2, [r7]
	add	r0, r2, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	strh	r2, [r0, #0x38]
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L1283+0x14
	bl	StoreSpriteCallbackInData6
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x1
	bl	StartSpriteAnim
	ldr	r0, .L1283+0x18
	bl	AllocSpritePalette
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	ldr	r1, .L1283+0x1c
	ldr	r0, .L1283+0x20
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	lsr	r4, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r4, r2
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldrb	r0, [r7]
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r4
	strb	r0, [r1, #0x5]
	ldr	r0, .L1283+0x24
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L1283+0x28
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	ldrb	r0, [r7]
	strh	r0, [r1, #0x8]
	ldr	r3, .L1283+0x2c
	ldr	r0, [r3]
	ldrb	r2, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1282	@cond_branch
	ldr	r0, .L1283+0x30
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldr	r1, .L1283+0x34
	str	r1, [r0]
.L1282:
	ldr	r0, [r3]
	ldr	r2, [r0, #0x8]
	ldrb	r0, [r2, #0x9]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x9]
	ldr	r1, .L1283+0x38
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1283+0x3c
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1284:
	.align	2, 0
.L1283:
	.word	gBattlerSpriteIds
	.word	gActiveBattler
	.word	gSprites
	.word	0xffd8
	.word	StartAnimLinearTranslation
	.word	sub_805CC00
	.word	0xd6f8
	.word	gTrainerBackPicPaletteTable
	.word	gSaveBlock2Ptr
	.word	task05_08033660
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
	.word	gBattlerControllerFuncs
	.word	nullsub_21
.Lfe111:
	.size	 PlayerHandleIntroTrainerBallThrow,.Lfe111-PlayerHandleIntroTrainerBallThrow
	.align	2, 0
	.globl	sub_805CC00
	.type	 sub_805CC00,function
	.thumb_func
sub_805CC00:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldrh	r4, [r5, #0x38]
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	FreeSpriteOamMatrix
	ldrb	r0, [r5, #0x5]
	lsr	r0, r0, #0x4
	bl	GetSpritePaletteTagByPaletteNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	DestroySprite
	ldr	r1, .L1286
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L1286+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	BattleLoadPlayerMonSpriteGfx
	ldr	r0, .L1286+0x8
	add	r4, r4, r0
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1286+0xc
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAnim
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1287:
	.align	2, 0
.L1286:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerSpriteIds
	.word	gSprites
.Lfe112:
	.size	 sub_805CC00,.Lfe112-sub_805CC00
	.align	2, 0
	.type	 task05_08033660,function
	.thumb_func
task05_08033660:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L1294
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r2, [r1, #0xa]
	mov	r3, #0xa
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1e
	bgt	.L1289	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xa]
	b	.L1290
.L1295:
	.align	2, 0
.L1294:
	.word	gTasks
.L1289:
	ldr	r7, .L1296
	ldrb	r0, [r7]
	mov	r9, r0
	ldrh	r0, [r1, #0x8]
	strb	r0, [r7]
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1292	@cond_branch
	ldr	r0, .L1296+0x4
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1291	@cond_branch
.L1292:
	ldr	r0, .L1296+0x8
	ldrb	r1, [r7]
	lsl	r2, r1, #0x9
	add	r0, r0, #0x1
	add	r2, r2, r0
	ldr	r0, .L1296+0xc
	lsl	r1, r1, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	strb	r0, [r2]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_805B258
	b	.L1293
.L1297:
	.align	2, 0
.L1296:
	.word	gActiveBattler
	.word	gBattleTypeFlags
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
.L1291:
	ldr	r4, .L1298
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r4, r4, #0x1
	add	r1, r1, r4
	ldr	r5, .L1298+0x4
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_805B258
	ldrb	r0, [r7]
	mov	r6, #0x2
	eor	r0, r0, r6
	strb	r0, [r7]
	ldrb	r0, [r7]
	lsl	r1, r0, #0x9
	add	r1, r1, r4
	lsl	r0, r0, #0x1
	add	r0, r0, r5
	ldrh	r0, [r0]
	strb	r0, [r1]
	ldrb	r1, [r7]
	lsl	r0, r1, #0x1
	add	r0, r0, r5
	ldrh	r2, [r0]
	mov	r0, #0x64
	mul	r0, r0, r2
	ldr	r2, .L1298+0x8
	add	r0, r0, r2
	bl	BattleLoadPlayerMonSpriteGfx
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	sub_805B258
	ldrb	r0, [r7]
	eor	r0, r0, r6
	strb	r0, [r7]
.L1293:
	ldr	r1, .L1298+0xc
	ldr	r2, .L1298+0x10
	ldrb	r0, [r2]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1298+0x14
	str	r1, [r0]
	mov	r3, r9
	strb	r3, [r2]
	mov	r0, r8
	bl	DestroyTask
.L1290:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1299:
	.align	2, 0
.L1298:
	.word	gBattleBufferA
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerControllerFuncs
	.word	gActiveBattler
	.word	sub_8058B40
.Lfe113:
	.size	 task05_08033660,.Lfe113-task05_08033660
	.align	2, 0
	.type	 PlayerHandleDrawPartyStatusSummary,function
	.thumb_func
PlayerHandleDrawPartyStatusSummary:
	push	{r4, r5, r6, lr}
	ldr	r1, .L1304
	ldr	r0, .L1304+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1301	@cond_branch
	add	r0, r2, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1301	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1302
.L1305:
	.align	2, 0
.L1304:
	.word	gBattleBufferA
	.word	gActiveBattler
.L1301:
	ldr	r6, .L1306
	ldr	r0, [r6]
	ldr	r5, .L1306+0x4
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
	ldrb	r0, [r5]
	lsl	r3, r0, #0x9
	ldr	r4, .L1306+0x8
	add	r1, r3, r4
	sub	r2, r4, #0x3
	add	r2, r3, r2
	ldrb	r2, [r2]
	sub	r4, r4, #0x2
	add	r3, r3, r4
	ldrb	r3, [r3]
	bl	CreatePartyStatusSummarySprites
	ldr	r2, .L1306+0xc
	ldrb	r1, [r5]
	add	r1, r1, r2
	mov	r3, #0x0
	strb	r0, [r1]
	ldr	r0, [r6]
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strb	r3, [r0, #0x5]
	ldrb	r2, [r5]
	lsl	r0, r2, #0x9
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1303	@cond_branch
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x5d
	strb	r1, [r0, #0x5]
.L1303:
	ldr	r0, .L1306+0x10
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L1306+0x14
	str	r0, [r1]
.L1302:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1307:
	.align	2, 0
.L1306:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gBattlerStatusSummaryTaskId
	.word	gBattlerControllerFuncs
	.word	sub_805CE38
.Lfe114:
	.size	 PlayerHandleDrawPartyStatusSummary,.Lfe114-PlayerHandleDrawPartyStatusSummary
	.align	2, 0
	.type	 sub_805CE38,function
	.thumb_func
sub_805CE38:
	push	{r4, lr}
	ldr	r4, .L1310
	ldr	r0, [r4]
	ldr	r3, .L1310+0x4
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x5]
	add	r2, r1, #0x1
	strb	r2, [r0, #0x5]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x5c
	bls	.L1309	@cond_branch
	ldr	r0, [r4]
	ldrb	r1, [r3]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strb	r1, [r0, #0x5]
	bl	PlayerBufferExecCompleted
.L1309:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1311:
	.align	2, 0
.L1310:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
.Lfe115:
	.size	 sub_805CE38,.Lfe115-sub_805CE38
	.align	2, 0
	.type	 PlayerHandleHidePartyStatusSummary,function
	.thumb_func
PlayerHandleHidePartyStatusSummary:
	push	{lr}
	ldr	r0, .L1314
	ldr	r1, [r0]
	ldr	r0, .L1314+0x4
	ldrb	r3, [r0]
	ldr	r1, [r1, #0x4]
	lsl	r0, r3, #0x1
	add	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1313	@cond_branch
	ldr	r2, .L1314+0x8
	ldr	r0, .L1314+0xc
	add	r0, r3, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1314+0x10
	str	r1, [r0]
.L1313:
	bl	PlayerBufferExecCompleted
	pop	{r0}
	bx	r0
.L1315:
	.align	2, 0
.L1314:
	.word	gBattleSpritesDataPtr
	.word	gActiveBattler
	.word	gTasks
	.word	gBattlerStatusSummaryTaskId
	.word	Task_HidePartyStatusSummary
.Lfe116:
	.size	 PlayerHandleHidePartyStatusSummary,.Lfe116-PlayerHandleHidePartyStatusSummary
	.align	2, 0
	.type	 PlayerHandleEndBounceEffect,function
	.thumb_func
PlayerHandleEndBounceEffect:
	push	{r4, lr}
	ldr	r4, .L1317
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	EndBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	EndBounceEffect
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L1318:
	.align	2, 0
.L1317:
	.word	gActiveBattler
.Lfe117:
	.size	 PlayerHandleEndBounceEffect,.Lfe117-PlayerHandleEndBounceEffect
	.align	2, 0
	.type	 PlayerHandleSpriteInvisibility,function
	.thumb_func
PlayerHandleSpriteInvisibility:
	push	{r4, lr}
	ldr	r4, .L1321
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1320	@cond_branch
	ldr	r3, .L1321+0x4
	ldr	r0, .L1321+0x8
	ldrb	r1, [r4]
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldr	r0, .L1321+0xc
	lsl	r1, r1, #0x9
	add	r0, r0, #0x1
	add	r1, r1, r0
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r1, [r1]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r3, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r4]
	bl	CopyBattleSpriteInvisibility
.L1320:
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L1322:
	.align	2, 0
.L1321:
	.word	gActiveBattler
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleBufferA
.Lfe118:
	.size	 PlayerHandleSpriteInvisibility,.Lfe118-PlayerHandleSpriteInvisibility
	.align	2, 0
	.type	 PlayerHandleBattleAnimation,function
	.thumb_func
PlayerHandleBattleAnimation:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L1327
	ldrb	r0, [r5]
	bl	mplay_80342A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1324	@cond_branch
	ldr	r4, .L1327+0x4
	ldrb	r2, [r5]
	lsl	r1, r2, #0x9
	add	r0, r4, #0x1
	add	r0, r1, r0
	ldrb	r6, [r0]
	add	r0, r4, #0x2
	add	r0, r1, r0
	ldrb	r3, [r0]
	add	r4, r4, #0x3
	add	r1, r1, r4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x8
	orr	r3, r3, r0
	str	r3, [sp]
	add	r0, r2, #0
	add	r1, r2, #0
	add	r3, r6, #0
	bl	TryHandleLaunchBattleTableAnimation
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1325	@cond_branch
	bl	PlayerBufferExecCompleted
	b	.L1326
.L1328:
	.align	2, 0
.L1327:
	.word	gActiveBattler
	.word	gBattleBufferA
.L1325:
	ldr	r0, .L1329
	ldrb	r1, [r5]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldr	r0, .L1329+0x4
	str	r0, [r1]
.L1326:
	add	r0, r6, #0
	bl	BattleTv_SetDataBasedOnAnimation
.L1324:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1330:
	.align	2, 0
.L1329:
	.word	gBattlerControllerFuncs
	.word	CompleteOnFinishedBattleAnimation
.Lfe119:
	.size	 PlayerHandleBattleAnimation,.Lfe119-PlayerHandleBattleAnimation
	.align	2, 0
	.type	 PlayerHandleLinkStandbyMsg,function
	.thumb_func
PlayerHandleLinkStandbyMsg:
	push	{r4, r5, lr}
	ldr	r5, .L1339
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	ldr	r4, .L1339+0x4
	add	r0, r0, r4
	bl	sub_81851A8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	sub	r4, r4, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	cmp	r0, #0x1
	beq	.L1334	@cond_branch
	cmp	r0, #0x1
	bgt	.L1338	@cond_branch
	cmp	r0, #0
	beq	.L1333	@cond_branch
	b	.L1332
.L1340:
	.align	2, 0
.L1339:
	.word	gActiveBattler
	.word	gBattleBufferA+0x2
.L1338:
	cmp	r0, #0x2
	beq	.L1335	@cond_branch
	b	.L1332
.L1333:
	bl	PrintLinkStandbyMsg
.L1334:
	ldr	r4, .L1341
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	EndBounceEffect
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	EndBounceEffect
	b	.L1332
.L1342:
	.align	2, 0
.L1341:
	.word	gActiveBattler
.L1335:
	bl	PrintLinkStandbyMsg
.L1332:
	bl	PlayerBufferExecCompleted
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe120:
	.size	 PlayerHandleLinkStandbyMsg,.Lfe120-PlayerHandleLinkStandbyMsg
	.align	2, 0
	.type	 PlayerHandleResetActionMoveSelection,function
	.thumb_func
PlayerHandleResetActionMoveSelection:
	push	{r4, lr}
	ldr	r1, .L1352
	ldr	r4, .L1352+0x4
	ldrb	r3, [r4]
	lsl	r0, r3, #0x9
	add	r1, r1, #0x1
	add	r0, r0, r1
	ldrb	r2, [r0]
	cmp	r2, #0x1
	beq	.L1346	@cond_branch
	cmp	r2, #0x1
	bgt	.L1350	@cond_branch
	cmp	r2, #0
	beq	.L1345	@cond_branch
	b	.L1344
.L1353:
	.align	2, 0
.L1352:
	.word	gBattleBufferA
	.word	gActiveBattler
.L1350:
	cmp	r2, #0x2
	beq	.L1347	@cond_branch
	b	.L1344
.L1345:
	ldr	r0, .L1354
	add	r0, r3, r0
	strb	r2, [r0]
	ldr	r1, .L1354+0x4
	ldrb	r0, [r4]
	add	r0, r0, r1
	strb	r2, [r0]
	b	.L1344
.L1355:
	.align	2, 0
.L1354:
	.word	gActionSelectionCursor
	.word	gMoveSelectionCursor
.L1346:
	ldr	r0, .L1356
	b	.L1351
.L1357:
	.align	2, 0
.L1356:
	.word	gActionSelectionCursor
.L1347:
	ldr	r0, .L1358
.L1351:
	add	r0, r3, r0
	mov	r1, #0x0
	strb	r1, [r0]
.L1344:
	bl	PlayerBufferExecCompleted
	pop	{r4}
	pop	{r0}
	bx	r0
.L1359:
	.align	2, 0
.L1358:
	.word	gMoveSelectionCursor
.Lfe121:
	.size	 PlayerHandleResetActionMoveSelection,.Lfe121-PlayerHandleResetActionMoveSelection
	.align	2, 0
	.type	 PlayerHandleCmd55,function
	.thumb_func
PlayerHandleCmd55:
	push	{r4, r5, lr}
	ldr	r5, .L1361
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	ldr	r4, .L1361+0x4
	add	r0, r0, r4
	bl	sub_81851A8
	ldr	r2, .L1361+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	sub	r1, r4, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0]
	strb	r0, [r2]
	ldr	r0, .L1361+0xc
	ldr	r3, [r0]
	ldrb	r0, [r5]
	lsl	r0, r0, #0x9
	sub	r4, r4, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0]
	ldr	r1, .L1361+0x10
	add	r3, r3, r1
	mov	r1, #0x1
	and	r1, r1, r0
	lsl	r1, r1, #0x3
	ldrb	r2, [r3]
	mov	r0, #0x9
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r0, #0x5
	bl	FadeOutMapMusic
	mov	r0, #0x3
	bl	BeginFastPaletteFade
	bl	PlayerBufferExecCompleted
	ldr	r1, .L1361+0x14
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L1361+0x18
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1362:
	.align	2, 0
.L1361:
	.word	gActiveBattler
	.word	gBattleBufferA+0x4
	.word	gBattleOutcome
	.word	gSaveBlock2Ptr
	.word	0xca9
	.word	gBattlerControllerFuncs
	.word	sub_80587B0
.Lfe122:
	.size	 PlayerHandleCmd55,.Lfe122-PlayerHandleCmd55
	.align	2, 0
	.type	 PlayerCmdEnd,function
	.thumb_func
PlayerCmdEnd:
	bx	lr
.Lfe123:
	.size	 PlayerCmdEnd,.Lfe123-PlayerCmdEnd
.text
	.align	2, 0

