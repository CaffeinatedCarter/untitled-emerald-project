@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 sBgTemplates_ItemMenu,object
	.size	 sBgTemplates_ItemMenu,12
sBgTemplates_ItemMenu:
	.byte	0xf0
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0xe1
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0xde
	.byte	0x21
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sItemListMenu,object
	.size	 sItemListMenu,24
sItemListMenu:
	.word	0x0
	.word	BagMenu_MoveCursorCallback
	.word	BagMenu_ItemPrintCallback
	.short	0x0
	.short	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x8
	.byte	0x0
	.byte	0x11
	.byte	0x30
	.byte	0x0
	.byte	0x7
	.align	2, 0
	.type	 sItemMenuActions,object
sItemMenuActions:
	.word	gMenuText_Use
	.word	ItemMenu_UseOutOfBattle
	.word	gMenuText_Toss
	.word	ItemMenu_Toss
	.word	gMenuText_Register
	.word	ItemMenu_Register
	.word	gMenuText_Give
	.word	ItemMenu_Give
	.word	gText_Cancel2
	.word	ItemMenu_Cancel
	.word	gMenuText_Use
	.word	ItemMenu_UseInBattle
	.word	gMenuText_Check
	.word	ItemMenu_UseOutOfBattle
	.word	gMenuText_Walk
	.word	ItemMenu_UseOutOfBattle
	.word	gMenuText_Deselect
	.word	ItemMenu_Register
	.word	gMenuText_CheckTag
	.word	ItemMenu_CheckTag
	.word	gMenuText_Confirm
	.word	Task_FadeAndCloseBagMenu
	.word	gMenuText_Show
	.word	unknown_ItemMenu_Show
	.word	gMenuText_Give2
	.word	unknown_ItemMenu_Give2
	.word	gMenuText_Confirm
	.word	unknown_ItemMenu_Confirm2
	.word	gText_EmptyString2
	.word	0x0
	.size	 sItemMenuActions,120
	.type	 sContextMenuItems_ItemsPocket,object
sContextMenuItems_ItemsPocket:
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.size	 sContextMenuItems_ItemsPocket,4
	.type	 sContextMenuItems_KeyItemsPocket,object
sContextMenuItems_KeyItemsPocket:
	.byte	0x0
	.byte	0x2
	.byte	0xe
	.byte	0x4
	.size	 sContextMenuItems_KeyItemsPocket,4
	.type	 sContextMenuItems_BallsPocket,object
sContextMenuItems_BallsPocket:
	.byte	0x3
	.byte	0xe
	.byte	0x1
	.byte	0x4
	.size	 sContextMenuItems_BallsPocket,4
	.type	 sContextMenuItems_TmHmPocket,object
sContextMenuItems_TmHmPocket:
	.byte	0x0
	.byte	0x3
	.byte	0xe
	.byte	0x4
	.size	 sContextMenuItems_TmHmPocket,4
	.type	 sContextMenuItems_BerriesPocket,object
sContextMenuItems_BerriesPocket:
	.byte	0x9
	.byte	0xe
	.byte	0x0
	.byte	0x3
	.byte	0x1
	.byte	0x4
	.size	 sContextMenuItems_BerriesPocket,6
	.type	 sContextMenuItems_BattleUse,object
sContextMenuItems_BattleUse:
	.byte	0x5
	.byte	0x4
	.size	 sContextMenuItems_BattleUse,2
	.type	 sContextMenuItems_Give,object
sContextMenuItems_Give:
	.byte	0x3
	.byte	0x4
	.size	 sContextMenuItems_Give,2
	.type	 sContextMenuItems_Cancel,object
sContextMenuItems_Cancel:
	.byte	0x4
	.size	 sContextMenuItems_Cancel,1
	.type	 sContextMenuItems_BerryBlenderCrush,object
sContextMenuItems_BerryBlenderCrush:
	.byte	0xa
	.byte	0x9
	.byte	0xe
	.byte	0x4
	.size	 sContextMenuItems_BerryBlenderCrush,4
	.type	 sContextMenuItems_Apprentice,object
sContextMenuItems_Apprentice:
	.byte	0xb
	.byte	0x4
	.size	 sContextMenuItems_Apprentice,2
	.type	 sContextMenuItems_FavorLady,object
sContextMenuItems_FavorLady:
	.byte	0xc
	.byte	0x4
	.size	 sContextMenuItems_FavorLady,2
	.type	 sContextMenuItems_QuizLady,object
sContextMenuItems_QuizLady:
	.byte	0xd
	.byte	0x4
	.size	 sContextMenuItems_QuizLady,2
	.align	2, 0
	.type	 gUnknown_08614054,object
gUnknown_08614054:
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldGive
	.word	Task_ItemContext_Sell
	.word	Task_FadeAndCloseBagMenu
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_Deposit
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldOrBattle
	.word	Task_ItemContext_FieldOrBattle
	.word	0x0
	.word	Task_ItemContext_ItemPC_2
	.size	 gUnknown_08614054,48
	.align	2, 0
	.type	 sYesNoTossFunctions,object
	.size	 sYesNoTossFunctions,8
sYesNoTossFunctions:
	.word	BagMenu_ConfirmToss
	.word	BagMenu_CancelToss
	.align	2, 0
	.type	 sYesNoSellItemFunctions,object
	.size	 sYesNoSellItemFunctions,8
sYesNoSellItemFunctions:
	.word	BagMenu_ConfirmSell
	.word	BagMenu_CancelSell
	.align	2, 0
	.type	 sBagScrollArrowsTemplate,object
	.size	 sBagScrollArrowsTemplate,16
sBagScrollArrowsTemplate:
	.byte	0x0
	.byte	0x1c
	.byte	0x10
	.byte	0x1
	.byte	0x64
	.byte	0x10
	.short	0xffff
	.short	0xffff
	.short	0x6f
	.short	0x6f
	.byte	0x0
	.space	1
	.type	 sRegisteredSelect_Gfx,object
sRegisteredSelect_Gfx:
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x1a
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x1a
	.byte	0x51
	.byte	0x15
	.byte	0x51
	.byte	0x1a
	.byte	0x55
	.byte	0x15
	.byte	0x55
	.byte	0x1a
	.byte	0x55
	.byte	0x15
	.byte	0x55
	.byte	0x1a
	.byte	0x55
	.byte	0x15
	.byte	0x51
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x15
	.byte	0x55
	.byte	0x55
	.byte	0x51
	.byte	0x15
	.byte	0x55
	.byte	0x15
	.byte	0x51
	.byte	0x15
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x15
	.byte	0x55
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0x51
	.byte	0x15
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0x51
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0x51
	.byte	0xa1
	.byte	0x1a
	.byte	0x55
	.byte	0x55
	.byte	0x51
	.byte	0x1a
	.byte	0x55
	.byte	0x55
	.byte	0x51
	.byte	0x1a
	.byte	0x51
	.byte	0x15
	.byte	0x51
	.byte	0xaa
	.byte	0x11
	.byte	0x55
	.byte	0x55
	.byte	0xaa
	.byte	0x1a
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x51
	.byte	0x15
	.byte	0x55
	.byte	0x11
	.byte	0x51
	.byte	0x15
	.byte	0x55
	.byte	0x15
	.byte	0x11
	.byte	0x15
	.byte	0x51
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0x51
	.byte	0xa1
	.byte	0x11
	.byte	0x11
	.byte	0x55
	.byte	0xa1
	.byte	0x11
	.byte	0x51
	.byte	0x15
	.byte	0xa1
	.byte	0x55
	.byte	0x55
	.byte	0x11
	.byte	0xaa
	.byte	0x11
	.byte	0x11
	.byte	0xa1
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.byte	0xaa
	.size	 sRegisteredSelect_Gfx,192
	.type	 sFontColorTable,object
sFontColorTable:
	.byte	0x0
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.byte	0x6
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0xe
	.byte	0xa
	.size	 sFontColorTable,15
	.globl	sDefaultBagWindows
	.align	2, 0
	.type	 sDefaultBagWindows,object
sDefaultBagWindows:
	.byte	0x0
	.byte	0xe
	.byte	0x2
	.byte	0xf
	.byte	0x10
	.byte	0x1
	.short	0x27
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0xe
	.byte	0x6
	.byte	0x1
	.short	0x117
	.byte	0x0
	.byte	0x4
	.byte	0x1
	.byte	0x8
	.byte	0x2
	.byte	0x1
	.short	0x1a1
	.byte	0x0
	.byte	0x1
	.byte	0xd
	.byte	0x5
	.byte	0x6
	.byte	0xc
	.short	0x16b
	.byte	0x0
	.byte	0x7
	.byte	0xd
	.byte	0x4
	.byte	0x6
	.byte	0xc
	.short	0x189
	.byte	0x1
	.byte	0x2
	.byte	0xf
	.byte	0x1b
	.byte	0x4
	.byte	0xf
	.short	0x1b1
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sDefaultBagWindows,56
	.globl	sContextMenuWindowTemplates
	.align	2, 0
	.type	 sContextMenuWindowTemplates,object
sContextMenuWindowTemplates:
	.byte	0x1
	.byte	0x16
	.byte	0x11
	.byte	0x7
	.byte	0x2
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x16
	.byte	0xf
	.byte	0x7
	.byte	0x4
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0xf
	.byte	0xf
	.byte	0xe
	.byte	0x4
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0xf
	.byte	0xd
	.byte	0xe
	.byte	0x6
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x2
	.byte	0xf
	.byte	0x1b
	.byte	0x4
	.byte	0xf
	.short	0x1b1
	.byte	0x1
	.byte	0x18
	.byte	0xf
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x15
	.byte	0x9
	.byte	0x5
	.byte	0x4
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x18
	.byte	0x11
	.byte	0x5
	.byte	0x2
	.byte	0xf
	.short	0x21d
	.byte	0x1
	.byte	0x12
	.byte	0xb
	.byte	0xa
	.byte	0x2
	.byte	0xf
	.short	0x245
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0xa
	.byte	0x2
	.byte	0xf
	.short	0x231
	.size	 sContextMenuWindowTemplates,80
	.globl	gBagMenu
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gBagMenu,object
	.size	 gBagMenu,4
gBagMenu:
	.word	0x0
	.globl	gBagPositionStruct
	.align	2, 0
	.type	 gBagPositionStruct,object
	.size	 gBagPositionStruct,28
gBagPositionStruct:
	.word	0x0
	.space	24
	.align	2, 0
	.type	 sListBuffer1,object
	.size	 sListBuffer1,4
sListBuffer1:
	.word	0x0
	.align	2, 0
	.type	 sListBuffer2,object
	.size	 sListBuffer2,4
sListBuffer2:
	.word	0x0
	.globl	gSpecialVar_ItemId
	.align	1, 0
	.type	 gSpecialVar_ItemId,object
	.size	 gSpecialVar_ItemId,2
gSpecialVar_ItemId:
	.short	0x0
	.align	2, 0
	.type	 sTempWallyBag,object
	.size	 sTempWallyBag,4
sTempWallyBag:
	.word	0x0
.text
	.align	2, 0
	.globl	ResetBagScrollPositions
	.type	 ResetBagScrollPositions,function
	.thumb_func
ResetBagScrollPositions:
	push	{r4, lr}
	ldr	r4, .L3
	mov	r0, #0x0
	strb	r0, [r4, #0x5]
	add	r0, r4, #0
	add	r0, r0, #0x8
	mov	r1, #0x0
	mov	r2, #0xa
	bl	memset
	add	r4, r4, #0x12
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0xa
	bl	memset
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBagPositionStruct
.Lfe1:
	.size	 ResetBagScrollPositions,.Lfe1-ResetBagScrollPositions
	.align	2, 0
	.globl	CB2_BagMenuFromStartMenu
	.type	 CB2_BagMenuFromStartMenu,function
	.thumb_func
CB2_BagMenuFromStartMenu:
	push	{lr}
	ldr	r2, .L6
	mov	r0, #0x0
	mov	r1, #0x5
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L7:
	.align	2, 0
.L6:
	.word	CB2_ReturnToFieldWithOpenMenu
.Lfe2:
	.size	 CB2_BagMenuFromStartMenu,.Lfe2-CB2_BagMenuFromStartMenu
	.align	2, 0
	.globl	CB2_BagMenuFromBattle
	.type	 CB2_BagMenuFromBattle,function
	.thumb_func
CB2_BagMenuFromBattle:
	push	{lr}
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L9	@cond_branch
	ldr	r2, .L11
	mov	r0, #0x1
	mov	r1, #0x5
	bl	GoToBagMenu
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	CB2_SetUpReshowBattleScreenAfterMenu2
.L9:
	ldr	r1, .L13
	mov	r0, #0x1
	bl	GoToBattlePyramidBagMenu
.L10:
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	CB2_SetUpReshowBattleScreenAfterMenu2
.Lfe3:
	.size	 CB2_BagMenuFromBattle,.Lfe3-CB2_BagMenuFromBattle
	.align	2, 0
	.globl	CB2_ChooseBerry
	.type	 CB2_ChooseBerry,function
	.thumb_func
CB2_ChooseBerry:
	push	{lr}
	ldr	r2, .L16
	mov	r0, #0x4
	mov	r1, #0x3
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	CB2_ReturnToFieldContinueScript
.Lfe4:
	.size	 CB2_ChooseBerry,.Lfe4-CB2_ChooseBerry
	.align	2, 0
	.globl	ChooseBerrySetCallback
	.type	 ChooseBerrySetCallback,function
	.thumb_func
ChooseBerrySetCallback:
	push	{lr}
	add	r2, r0, #0
	mov	r0, #0x5
	mov	r1, #0x3
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 ChooseBerrySetCallback,.Lfe5-ChooseBerrySetCallback
	.align	2, 0
	.globl	CB2_GoToSellMenu
	.type	 CB2_GoToSellMenu,function
	.thumb_func
CB2_GoToSellMenu:
	push	{lr}
	ldr	r2, .L20
	mov	r0, #0x3
	mov	r1, #0x5
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L21:
	.align	2, 0
.L20:
	.word	CB2_ExitSellMenu
.Lfe6:
	.size	 CB2_GoToSellMenu,.Lfe6-CB2_GoToSellMenu
	.align	2, 0
	.globl	CB2_GoToItemDepositMenu
	.type	 CB2_GoToItemDepositMenu,function
	.thumb_func
CB2_GoToItemDepositMenu:
	push	{lr}
	ldr	r2, .L23
	mov	r0, #0x6
	mov	r1, #0x5
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	sub_816B31C
.Lfe7:
	.size	 CB2_GoToItemDepositMenu,.Lfe7-CB2_GoToItemDepositMenu
	.align	2, 0
	.globl	ApprenticeOpenBagMenu
	.type	 ApprenticeOpenBagMenu,function
	.thumb_func
ApprenticeOpenBagMenu:
	push	{lr}
	ldr	r2, .L26
	mov	r0, #0x9
	mov	r1, #0x5
	bl	GoToBagMenu
	ldr	r0, .L26+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L26+0x8
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	CB2_ApprenticeExitBagMenu
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
.Lfe8:
	.size	 ApprenticeOpenBagMenu,.Lfe8-ApprenticeOpenBagMenu
	.align	2, 0
	.globl	FavorLadyOpenBagMenu
	.type	 FavorLadyOpenBagMenu,function
	.thumb_func
FavorLadyOpenBagMenu:
	push	{lr}
	ldr	r2, .L29
	mov	r0, #0x7
	mov	r1, #0x5
	bl	GoToBagMenu
	ldr	r1, .L29+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	CB2_FavorLadyExitBagMenu
	.word	gSpecialVar_Result
.Lfe9:
	.size	 FavorLadyOpenBagMenu,.Lfe9-FavorLadyOpenBagMenu
	.align	2, 0
	.globl	QuizLadyOpenBagMenu
	.type	 QuizLadyOpenBagMenu,function
	.thumb_func
QuizLadyOpenBagMenu:
	push	{lr}
	ldr	r2, .L32
	mov	r0, #0x8
	mov	r1, #0x5
	bl	GoToBagMenu
	ldr	r1, .L32+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	CB2_QuizLadyExitBagMenu
	.word	gSpecialVar_Result
.Lfe10:
	.size	 QuizLadyOpenBagMenu,.Lfe10-QuizLadyOpenBagMenu
	.align	2, 0
	.globl	GoToBagMenu
	.type	 GoToBagMenu,function
	.thumb_func
GoToBagMenu:
	push	{r4, r5, r6, r7, lr}
	add	r4, r2, #0
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r6, .L41
	ldr	r0, .L41+0x4
	bl	AllocZeroed
	str	r0, [r6]
	cmp	r0, #0
	bne	.L35	@cond_branch
	add	r0, r4, #0
	bl	SetMainCallback2
	b	.L36
.L42:
	.align	2, 0
.L41:
	.word	gBagMenu
	.word	0xc48
.L35:
	ldr	r0, .L43
	cmp	r5, #0xc
	beq	.L37	@cond_branch
	strb	r5, [r0, #0x4]
.L37:
	cmp	r4, #0
	beq	.L38	@cond_branch
	str	r4, [r0]
.L38:
	cmp	r7, #0x4
	bhi	.L39	@cond_branch
	strb	r7, [r0, #0x5]
.L39:
	ldrb	r0, [r0, #0x4]
	sub	r0, r0, #0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bhi	.L40	@cond_branch
	ldr	r2, [r6]
	ldr	r0, .L43+0x4
	add	r2, r2, r0
	ldrb	r1, [r2]
	mov	r0, #0x10
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L40:
	ldr	r0, [r6]
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r1, .L43+0x8
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r1, .L43+0xc
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r1, .L43+0x10
	add	r0, r0, r1
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0]
	ldr	r0, [r6]
	ldr	r1, .L43+0x14
	add	r0, r0, r1
	mov	r1, #0xff
	mov	r2, #0xc
	bl	memset
	ldr	r0, [r6]
	mov	r1, #0x81
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	mov	r1, #0xff
	mov	r2, #0xa
	bl	memset
	ldr	r0, .L43+0x18
	bl	SetMainCallback2
.L36:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L44:
	.align	2, 0
.L43:
	.word	gBagPositionStruct
	.word	0x81b
	.word	0x81a
	.word	0x81e
	.word	0x81f
	.word	0x804
	.word	CB2_Bag
.Lfe11:
	.size	 GoToBagMenu,.Lfe11-GoToBagMenu
	.align	2, 0
	.globl	CB2_BagMenuRun
	.type	 CB2_BagMenuRun,function
	.thumb_func
CB2_BagMenuRun:
	push	{lr}
	bl	RunTasks
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	do_scheduled_bg_tilemap_copies_to_vram
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 CB2_BagMenuRun,.Lfe12-CB2_BagMenuRun
	.align	2, 0
	.globl	VBlankCB_BagMenuRun
	.type	 VBlankCB_BagMenuRun,function
	.thumb_func
VBlankCB_BagMenuRun:
	push	{lr}
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 VBlankCB_BagMenuRun,.Lfe13-VBlankCB_BagMenuRun
	.align	2, 0
	.globl	CB2_Bag
	.type	 CB2_Bag,function
	.thumb_func
CB2_Bag:
	push	{lr}
.L48:
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L49	@cond_branch
	bl	SetupBagMenu
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L49	@cond_branch
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L48	@cond_branch
.L49:
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 CB2_Bag,.Lfe14-CB2_Bag
	.align	2, 0
	.globl	SetupBagMenu
	.type	 SetupBagMenu,function
	.thumb_func
SetupBagMenu:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L83
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r2, r1, #0
	cmp	r0, #0x14
	bls	.LCB450
	b	.L78	@long jump
.LCB450:
	lsl	r0, r0, #0x2
	ldr	r1, .L83+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L84:
	.align	2, 0
.L83:
	.word	gMain
	.word	.L79
	.align	2, 0
	.align	2, 0
.L79:
	.word	.L55
	.word	.L56
	.word	.L57
	.word	.L58
	.word	.L59
	.word	.L60
	.word	.L61
	.word	.L63
	.word	.L64
	.word	.L66
	.word	.L67
	.word	.L68
	.word	.L69
	.word	.L70
	.word	.L71
	.word	.L72
	.word	.L73
	.word	.L74
	.word	.L75
	.word	.L76
	.word	.L77
.L55:
	bl	SetVBlankHBlankCallbacksToNull
	bl	clear_scheduled_bg_copies_to_vram
	b	.L81
.L56:
	bl	ScanlineEffect_Stop
	ldr	r1, .L85
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L86:
	.align	2, 0
.L85:
	.word	gMain
.L57:
	bl	FreeAllSpritePalettes
	b	.L81
.L58:
	bl	ResetPaletteFade
	ldr	r2, .L87
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r1, .L87+0x4
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L88:
	.align	2, 0
.L87:
	.word	gPaletteFade
	.word	gMain
.L59:
	bl	ResetSpriteData
	b	.L81
.L60:
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r2, r0
	b	.L82
.L61:
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L62	@cond_branch
	bl	ResetTasks
.L62:
	ldr	r1, .L89
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L90:
	.align	2, 0
.L89:
	.word	gMain
.L63:
	bl	BagMenu_InitBGs
	ldr	r0, .L91
	ldr	r0, [r0]
	ldr	r1, .L91+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r1, .L91+0x8
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L92:
	.align	2, 0
.L91:
	.word	gBagMenu
	.word	0x834
	.word	gMain
.L64:
	bl	LoadBagMenu_Graphics
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB582
	b	.L54	@long jump
.LCB582:
	b	.L81
.L66:
	bl	SetupBagMenu_Textboxes
	ldr	r1, .L93
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L94:
	.align	2, 0
.L93:
	.word	gMain
.L67:
	bl	All_CalculateNItemsAndMaxShowed
	bl	SetPocketListPositions
	bl	UpdatePocketScrollPositions
	b	.L81
.L68:
	bl	AllocateBagItemListBuffers
	ldr	r1, .L95
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L96:
	.align	2, 0
.L95:
	.word	gMain
.L69:
	ldr	r0, .L97
	ldrb	r0, [r0, #0x5]
	bl	LoadBagItemListBuffers
	b	.L81
.L98:
	.align	2, 0
.L97:
	.word	gBagPositionStruct
.L70:
	ldr	r1, .L99
	ldr	r4, .L99+0x4
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	BagMenu_PrintPocketNames
	mov	r0, #0x0
	bl	BagMenu_CopyPocketNameToWindow
	ldrb	r0, [r4, #0x5]
	mov	r1, #0x1
	bl	BagMenu_DrawPocketIndicatorSquare
	ldr	r1, .L99+0x8
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L100:
	.align	2, 0
.L99:
	.word	gPocketNamesStringsTable
	.word	gBagPositionStruct
	.word	gMain
.L71:
	ldr	r4, .L101
	ldrb	r0, [r4, #0x4]
	bl	CreateBagInputHandlerTask
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L101+0x4
	ldrb	r2, [r4, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x12
	add	r1, r2, r1
	ldrh	r1, [r1]
	add	r4, r4, #0x8
	add	r2, r2, r4
	ldrh	r2, [r2]
	bl	ListMenuInit
	ldr	r2, .L101+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	strh	r0, [r1, #0x8]
	strh	r2, [r1, #0xe]
	strh	r2, [r1, #0x18]
	b	.L81
.L102:
	.align	2, 0
.L101:
	.word	gBagPositionStruct
	.word	gMultiuseListMenuTemplate
	.word	gTasks
.L72:
	ldr	r0, .L103
	ldrb	r0, [r0, #0x5]
	bl	AddBagVisualSprite
	ldr	r1, .L103+0x4
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L104:
	.align	2, 0
.L103:
	.word	gBagPositionStruct
	.word	gMain
.L73:
	bl	sub_80D4FAC
	b	.L81
.L74:
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	ldr	r1, .L105
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L106:
	.align	2, 0
.L105:
	.word	gMain
.L75:
	bl	BagMenu_PrepareTMHMMoveWindow
	b	.L81
.L76:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldr	r1, .L107
	mov	r2, #0x87
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	b	.L82
.L108:
	.align	2, 0
.L107:
	.word	gMain
.L77:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r2, .L109
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
.L81:
	ldr	r1, .L109+0x4
	mov	r0, #0x87
	lsl	r0, r0, #0x3
	add	r1, r1, r0
.L82:
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	b	.L54
.L110:
	.align	2, 0
.L109:
	.word	gPaletteFade
	.word	gMain
.L78:
	ldr	r0, .L111
	bl	SetVBlankCallback
	ldr	r0, .L111+0x4
	bl	SetMainCallback2
	mov	r0, #0x1
	b	.L80
.L112:
	.align	2, 0
.L111:
	.word	VBlankCB_BagMenuRun
	.word	CB2_BagMenuRun
.L54:
	mov	r0, #0x0
.L80:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe15:
	.size	 SetupBagMenu,.Lfe15-SetupBagMenu
	.align	2, 0
	.globl	BagMenu_InitBGs
	.type	 BagMenu_InitBGs,function
	.thumb_func
BagMenu_InitBGs:
	push	{r4, lr}
	bl	ResetVramOamAndBgCntRegs
	ldr	r4, .L114
	ldr	r0, [r4]
	add	r0, r0, #0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r1, #0x0
	bl	memset
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L114+0x4
	mov	r0, #0x0
	mov	r2, #0x3
	bl	InitBgsFromTemplates
	ldr	r1, [r4]
	add	r1, r1, #0x4
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	bl	ResetAllBgsCoordinates
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r4}
	pop	{r0}
	bx	r0
.L115:
	.align	2, 0
.L114:
	.word	gBagMenu
	.word	sBgTemplates_ItemMenu
.Lfe16:
	.size	 BagMenu_InitBGs,.Lfe16-BagMenu_InitBGs
	.align	2, 0
	.globl	LoadBagMenu_Graphics
	.type	 LoadBagMenu_Graphics,function
	.thumb_func
LoadBagMenu_Graphics:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r4, .L134
	ldr	r0, [r4]
	ldr	r1, .L134+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x4
	bls	.LCB909
	b	.L129	@long jump
.LCB909:
	lsl	r0, r0, #0x2
	ldr	r1, .L134+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L135:
	.align	2, 0
.L134:
	.word	gBagMenu
	.word	0x834
	.word	.L130
	.align	2, 0
	.align	2, 0
.L130:
	.word	.L118
	.word	.L119
	.word	.L121
	.word	.L124
	.word	.L128
.L118:
	bl	ResetTempTileDataBuffers
	ldr	r1, .L136
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	b	.L132
.L137:
	.align	2, 0
.L136:
	.word	gBagScreen_Gfx
.L119:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L117	@cond_branch
	ldr	r0, .L138
	ldr	r4, .L138+0x4
	ldr	r1, [r4]
	add	r1, r1, #0x4
	bl	LZDecompressWram
	ldr	r1, [r4]
	b	.L133
.L139:
	.align	2, 0
.L138:
	.word	gBagScreen_GfxTileMap
	.word	gBagMenu
.L121:
	bl	IsWallysBag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L122	@cond_branch
	ldr	r0, .L140
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L122	@cond_branch
	ldr	r0, .L140+0x4
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	b	.L132
.L141:
	.align	2, 0
.L140:
	.word	gSaveBlock2Ptr
	.word	gBagScreenFemale_Pal
.L122:
	ldr	r0, .L142
	mov	r1, #0x0
	mov	r2, #0x40
	bl	LoadCompressedPalette
	b	.L132
.L143:
	.align	2, 0
.L142:
	.word	gBagScreenMale_Pal
.L124:
	bl	IsWallysBag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L126	@cond_branch
	ldr	r0, .L144
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L125	@cond_branch
.L126:
	ldr	r0, .L144+0x4
	bl	LoadCompressedSpriteSheet
	b	.L132
.L145:
	.align	2, 0
.L144:
	.word	gSaveBlock2Ptr
	.word	gBagMaleSpriteSheet
.L125:
	ldr	r0, .L146
	bl	LoadCompressedSpriteSheet
	b	.L132
.L147:
	.align	2, 0
.L146:
	.word	gBagFemaleSpriteSheet
.L128:
	ldr	r0, .L148
	bl	LoadCompressedSpritePalette
.L132:
	ldr	r0, .L148+0x4
	ldr	r1, [r0]
.L133:
	ldr	r0, .L148+0x8
	add	r1, r1, r0
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	b	.L117
.L149:
	.align	2, 0
.L148:
	.word	gBagPaletteTable
	.word	gBagMenu
	.word	0x834
.L129:
	bl	LoadListMenuArrowsGfx
	ldr	r0, [r4]
	ldr	r1, .L150
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
	mov	r0, #0x1
	b	.L131
.L151:
	.align	2, 0
.L150:
	.word	0x834
.L117:
	mov	r0, #0x0
.L131:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 LoadBagMenu_Graphics,.Lfe17-LoadBagMenu_Graphics
	.align	2, 0
	.globl	CreateBagInputHandlerTask
	.type	 CreateBagInputHandlerTask,function
	.thumb_func
CreateBagInputHandlerTask:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xa
	bne	.L153	@cond_branch
	ldr	r0, .L156
	b	.L155
.L157:
	.align	2, 0
.L156:
	.word	Task_WallyTutorialBagMenu
.L153:
	ldr	r0, .L158
.L155:
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L159:
	.align	2, 0
.L158:
	.word	Task_BagMenu_HandleInput
.Lfe18:
	.size	 CreateBagInputHandlerTask,.Lfe18-CreateBagInputHandlerTask
	.align	2, 0
	.globl	AllocateBagItemListBuffers
	.type	 AllocateBagItemListBuffers,function
	.thumb_func
AllocateBagItemListBuffers:
	push	{r4, lr}
	ldr	r4, .L161
	mov	r0, #0x82
	lsl	r0, r0, #0x2
	bl	Alloc
	str	r0, [r4]
	ldr	r4, .L161+0x4
	mov	r0, #0xc3
	lsl	r0, r0, #0x3
	bl	Alloc
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	sListBuffer1
	.word	sListBuffer2
.Lfe19:
	.size	 AllocateBagItemListBuffers,.Lfe19-AllocateBagItemListBuffers
	.align	2, 0
	.globl	LoadBagItemListBuffers
	.type	 LoadBagItemListBuffers,function
	.thumb_func
LoadBagItemListBuffers:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r7, #0x3
	ldr	r0, .L176
	add	r1, r1, r0
	mov	r8, r1
	ldr	r0, .L176+0x4
	ldr	r2, [r0]
	ldr	r1, .L176+0x8
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L164	@cond_branch
	mov	r6, #0x0
	ldr	r3, .L176+0xc
	add	r0, r2, r3
	add	r0, r0, r7
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r6, r0
	bge	.L166	@cond_branch
	ldr	r5, .L176+0x10
.L168:
	lsl	r4, r6, #0x1
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r1, r6, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	GetItemName
	ldr	r0, .L176+0x14
	ldr	r0, [r0]
	lsl	r1, r6, #0x3
	add	r1, r1, r0
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r1]
	str	r6, [r1, #0x4]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L176+0x4
	ldr	r0, [r0]
	ldr	r3, .L176+0xc
	add	r0, r0, r3
	add	r0, r0, r7
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r6, r0
	blt	.L168	@cond_branch
.L166:
	ldr	r5, .L176+0x10
	lsl	r4, r6, #0x1
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r1, .L176+0x18
	bl	StringCopy
	ldr	r0, .L176+0x14
	ldr	r0, [r0]
	lsl	r1, r6, #0x3
	add	r1, r1, r0
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r1]
	mov	r0, #0x2
	neg	r0, r0
	str	r0, [r1, #0x4]
	b	.L170
.L177:
	.align	2, 0
.L176:
	.word	gBagPockets
	.word	gBagMenu
	.word	0x81b
	.word	0x829
	.word	sListBuffer2
	.word	sListBuffer1
	.word	gText_CloseBag
.L164:
	mov	r6, #0x0
	ldr	r4, .L178
	add	r0, r2, r4
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r6, r0
	bcs	.L170	@cond_branch
	ldr	r5, .L178+0x4
.L174:
	lsl	r4, r6, #0x1
	add	r4, r4, r6
	lsl	r4, r4, #0x3
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, r8
	ldr	r2, [r1]
	lsl	r1, r6, #0x2
	add	r1, r1, r2
	ldrh	r1, [r1]
	bl	GetItemName
	ldr	r0, .L178+0x8
	ldr	r0, [r0]
	lsl	r1, r6, #0x3
	add	r1, r1, r0
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r1]
	str	r6, [r1, #0x4]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, .L178+0xc
	ldr	r0, [r0]
	ldr	r3, .L178
	add	r0, r0, r3
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r6, r0
	bcc	.L174	@cond_branch
.L170:
	ldr	r2, .L178+0x10
	add	r1, r2, #0
	ldr	r0, .L178+0x14
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldmia	r0!, {r3, r4, r5}
	stmia	r1!, {r3, r4, r5}
	ldr	r0, .L178+0xc
	ldr	r1, [r0]
	ldr	r4, .L178
	add	r0, r1, r4
	add	r0, r0, r7
	ldrb	r0, [r0]
	strh	r0, [r2, #0xc]
	ldr	r0, .L178+0x8
	ldr	r0, [r0]
	str	r0, [r2]
	ldr	r5, .L178+0x18
	add	r1, r1, r5
	add	r1, r1, r7
	ldrb	r0, [r1]
	strh	r0, [r2, #0xe]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L179:
	.align	2, 0
.L178:
	.word	0x829
	.word	sListBuffer2
	.word	sListBuffer1
	.word	gBagMenu
	.word	gMultiuseListMenuTemplate
	.word	sItemListMenu
	.word	0x82e
.Lfe20:
	.size	 LoadBagItemListBuffers,.Lfe20-LoadBagItemListBuffers
	.align	2, 0
	.globl	GetItemName
	.type	 GetItemName,function
	.thumb_func
GetItemName:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	ldr	r0, .L192
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x2
	beq	.L182	@cond_branch
	cmp	r0, #0x3
	beq	.L185	@cond_branch
	add	r0, r5, #0
	add	r1, r6, #0
	bl	CopyItemName
	b	.L181
.L193:
	.align	2, 0
.L192:
	.word	gBagPositionStruct
.L182:
	ldr	r4, .L194
	add	r0, r5, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xd
	mul	r1, r1, r0
	ldr	r0, .L194+0x4
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	mov	r0, #0xa9
	lsl	r0, r0, #0x1
	cmp	r5, r0
	bls	.L183	@cond_branch
	ldr	r0, .L194+0x8
	ldr	r2, .L194+0xc
	add	r1, r5, r2
	mov	r2, #0x2
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L194+0x10
	b	.L190
.L195:
	.align	2, 0
.L194:
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar1
	.word	-0x152
	.word	gText_ClearTo11Var1Clear5Var2
.L183:
	ldr	r0, .L196
	ldr	r2, .L196+0x4
	add	r1, r5, r2
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	b	.L191
.L197:
	.align	2, 0
.L196:
	.word	gStringVar1
	.word	-0x120
.L185:
	ldr	r0, .L198
	add	r1, r5, #0
	sub	r1, r1, #0x84
	mov	r2, #0x2
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L198+0x4
	add	r0, r5, #0
	bl	CopyItemName
.L191:
	ldr	r1, .L198+0x8
.L190:
	add	r0, r6, #0
	bl	StringExpandPlaceholders
.L181:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L199:
	.align	2, 0
.L198:
	.word	gStringVar1
	.word	gStringVar2
	.word	gText_NumberVar1Clear7Var2
.Lfe21:
	.size	 GetItemName,.Lfe21-GetItemName
	.align	2, 0
	.globl	BagMenu_MoveCursorCallback
	.type	 BagMenu_MoveCursorCallback,function
	.thumb_func
BagMenu_MoveCursorCallback:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	beq	.L201	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	ShakeBagSprite
.L201:
	ldr	r4, .L206
	ldr	r1, [r4]
	ldr	r2, .L206+0x4
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L202	@cond_branch
	add	r2, r2, #0x1
	add	r0, r1, r2
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	mov	r0, #0x1
	eor	r0, r0, r1
	bl	RemoveBagItemIconSprite
	mov	r0, #0x2
	neg	r0, r0
	cmp	r6, r0
	beq	.L203	@cond_branch
	ldr	r0, .L206+0x8
	ldrb	r0, [r0, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r6, #0x10
	lsr	r1, r1, #0x10
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [r4]
	ldr	r2, .L206+0xc
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	bl	AddBagItemIconSprite
	b	.L204
.L207:
	.align	2, 0
.L206:
	.word	gBagMenu
	.word	0x81a
	.word	gBagPositionStruct
	.word	0x81b
.L203:
	ldr	r0, .L208
	ldr	r1, [r4]
	ldr	r2, .L208+0x4
	add	r1, r1, r2
	ldrb	r1, [r1]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	bl	AddBagItemIconSprite
.L204:
	ldr	r5, .L208+0x8
	ldr	r2, [r5]
	ldr	r4, .L208+0x4
	add	r2, r2, r4
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1a
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x4
	mov	r0, #0x31
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	add	r0, r0, r4
	ldrb	r1, [r0]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L202	@cond_branch
	add	r0, r6, #0
	bl	BagMenu_PrintDescription
.L202:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L209:
	.align	2, 0
.L208:
	.word	0xffff
	.word	0x81b
	.word	gBagMenu
.Lfe22:
	.size	 BagMenu_MoveCursorCallback,.Lfe22-BagMenu_MoveCursorCallback
	.align	2, 0
	.globl	BagMenu_ItemPrintCallback
	.type	 BagMenu_ItemPrintCallback,function
	.thumb_func
BagMenu_ItemPrintCallback:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	bne	.LCB1671
	b	.L211	@long jump
.LCB1671:
	ldr	r0, .L222
	ldr	r0, [r0]
	ldr	r1, .L222+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	cmp	r1, #0xff
	beq	.L212	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	cmp	r1, r0
	bne	.L213	@cond_branch
	add	r0, r7, #0
	mov	r1, #0x2
	bl	BagMenu_PrintCursor
	b	.L212
.L223:
	.align	2, 0
.L222:
	.word	gBagMenu
	.word	0x81a
.L213:
	add	r0, r7, #0
	mov	r1, #0xff
	bl	BagMenu_PrintCursor
.L212:
	ldr	r5, .L224
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r1, r4, #0
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagGetQuantityByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r9, r4
	ldr	r1, .L224+0x4
	add	r0, r6, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x7
	bhi	.L215	@cond_branch
	ldr	r1, .L224+0x8
	sub	r3, r7, #0x1
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x10
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r2, #0x8
	bl	BlitBitmapToWindow
.L215:
	ldrb	r0, [r5, #0x5]
	cmp	r0, #0x3
	bne	.L216	@cond_branch
	ldr	r0, .L224+0xc
	add	r1, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L224+0x10
	ldr	r1, .L224+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x77
	bl	GetStringRightAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	str	r7, [sp]
	mov	r1, #0x0
	str	r1, [sp, #0x4]
	str	r1, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	b	.L221
.L225:
	.align	2, 0
.L224:
	.word	gBagPositionStruct
	.word	-0x153
	.word	gBagMenuHMIcon_Gfx
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_xVar1
.L216:
	cmp	r0, #0x4
	beq	.L218	@cond_branch
	add	r0, r6, #0
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	bne	.L218	@cond_branch
	ldr	r0, .L226
	mov	r1, r9
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L226+0x4
	ldr	r1, .L226+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x77
	bl	GetStringRightAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	str	r7, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	str	r5, [sp, #0x10]
.L221:
	mov	r0, r8
	mov	r1, #0x7
	add	r2, r4, #0
	bl	BagMenu_Print
	b	.L211
.L227:
	.align	2, 0
.L226:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_xVar1
.L218:
	ldr	r0, .L228
	ldr	r0, [r0]
	ldr	r1, .L228+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L211	@cond_branch
	cmp	r0, r6
	bne	.L211	@cond_branch
	ldr	r1, .L228+0x8
	sub	r3, r7, #0x1
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0x18
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, r8
	mov	r2, #0x60
	bl	BlitBitmapToWindow
.L211:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L229:
	.align	2, 0
.L228:
	.word	gSaveBlock1Ptr
	.word	0x496
	.word	sRegisteredSelect_Gfx
.Lfe23:
	.size	 BagMenu_ItemPrintCallback,.Lfe23-BagMenu_ItemPrintCallback
	.align	2, 0
	.globl	BagMenu_PrintDescription
	.type	 BagMenu_PrintDescription,function
	.thumb_func
BagMenu_PrintDescription:
	push	{r4, lr}
	add	sp, sp, #-0x14
	add	r1, r0, #0
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	beq	.L231	@cond_branch
	ldr	r0, .L233
	ldrb	r0, [r0, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	ItemId_GetDescription
	add	r4, r0, #0
	b	.L232
.L234:
	.align	2, 0
.L233:
	.word	gBagPositionStruct
.L231:
	ldr	r0, .L235
	ldr	r2, .L235+0x4
	ldr	r1, .L235+0x8
	ldrb	r1, [r1, #0x4]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r4, .L235+0xc
	ldr	r1, .L235+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
.L232:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	add	sp, sp, #0x14
	pop	{r4}
	pop	{r0}
	bx	r0
.L236:
	.align	2, 0
.L235:
	.word	gStringVar1
	.word	gReturnToXStringsTable
	.word	gBagPositionStruct
	.word	gStringVar4
	.word	gText_ReturnToVar1
.Lfe24:
	.size	 BagMenu_PrintDescription,.Lfe24-BagMenu_PrintDescription
	.align	2, 0
	.globl	BagMenu_PrintCursor_
	.type	 BagMenu_PrintCursor_,function
	.thumb_func
BagMenu_PrintCursor_:
	push	{r4, lr}
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	ListMenuGetYCoordForPrintingArrowCursor
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagMenu_PrintCursor
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 BagMenu_PrintCursor_,.Lfe25-BagMenu_PrintCursor_
	.align	2, 0
	.globl	BagMenu_PrintCursor
	.type	 BagMenu_PrintCursor,function
	.thumb_func
BagMenu_PrintCursor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r1, #0xff
	bne	.L239	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	bl	GetMenuCursorDimensionByFont
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	mov	r1, #0x1
	bl	GetMenuCursorDimensionByFont
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r4, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	add	r3, r5, #0
	bl	FillWindowPixelRect
	b	.L240
.L239:
	ldr	r2, .L241
	str	r5, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r1, [sp, #0x10]
	mov	r1, #0x1
	mov	r3, #0x0
	bl	BagMenu_Print
.L240:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L242:
	.align	2, 0
.L241:
	.word	gText_SelectorArrow2
.Lfe26:
	.size	 BagMenu_PrintCursor,.Lfe26-BagMenu_PrintCursor
	.align	2, 0
	.globl	CreatePocketScrollArrowPair
	.type	 CreatePocketScrollArrowPair,function
	.thumb_func
CreatePocketScrollArrowPair:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r5, .L245
	ldr	r4, [r5]
	ldr	r1, .L245+0x4
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L244	@cond_branch
	ldr	r2, .L245+0x8
	ldrb	r3, [r2, #0x5]
	ldr	r6, .L245+0xc
	add	r0, r4, r6
	add	r0, r0, r3
	ldrb	r1, [r0]
	add	r6, r6, #0x5
	add	r0, r4, r6
	add	r0, r0, r3
	ldrb	r0, [r0]
	sub	r1, r1, r0
	str	r1, [sp]
	mov	r0, #0x6e
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	ldrb	r0, [r2, #0x5]
	lsl	r0, r0, #0x1
	add	r2, r2, #0x12
	add	r0, r0, r2
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xac
	mov	r2, #0xc
	mov	r3, #0x94
	bl	AddScrollIndicatorArrowPairParameterized
	ldr	r1, [r5]
	ldr	r2, .L245+0x4
	add	r1, r1, r2
	strb	r0, [r1]
.L244:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L246:
	.align	2, 0
.L245:
	.word	gBagMenu
	.word	0x81e
	.word	gBagPositionStruct
	.word	0x829
.Lfe27:
	.size	 CreatePocketScrollArrowPair,.Lfe27-CreatePocketScrollArrowPair
	.align	2, 0
	.globl	BagDestroyPocketScrollArrowPair
	.type	 BagDestroyPocketScrollArrowPair,function
	.thumb_func
BagDestroyPocketScrollArrowPair:
	push	{r4, lr}
	ldr	r4, .L249
	ldr	r0, [r4]
	ldr	r2, .L249+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L248	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r0, [r4]
	ldr	r1, .L249+0x4
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
.L248:
	bl	BagDestroyPocketSwitchArrowPair
	pop	{r4}
	pop	{r0}
	bx	r0
.L250:
	.align	2, 0
.L249:
	.word	gBagMenu
	.word	0x81e
.Lfe28:
	.size	 BagDestroyPocketScrollArrowPair,.Lfe28-BagDestroyPocketScrollArrowPair
	.align	2, 0
	.globl	CreatePocketSwitchArrowPair
	.type	 CreatePocketSwitchArrowPair,function
	.thumb_func
CreatePocketSwitchArrowPair:
	push	{r4, lr}
	ldr	r4, .L253
	ldr	r2, [r4]
	ldr	r1, .L253+0x4
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0x1
	beq	.L252	@cond_branch
	ldr	r1, .L253+0x8
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L252	@cond_branch
	ldr	r0, .L253+0xc
	ldr	r1, .L253+0x10
	bl	AddScrollIndicatorArrowPair
	ldr	r1, [r4]
	ldr	r2, .L253+0x8
	add	r1, r1, r2
	strb	r0, [r1]
.L252:
	pop	{r4}
	pop	{r0}
	bx	r0
.L254:
	.align	2, 0
.L253:
	.word	gBagMenu
	.word	0x81b
	.word	0x81f
	.word	sBagScrollArrowsTemplate
	.word	gBagPositionStruct+0x6
.Lfe29:
	.size	 CreatePocketSwitchArrowPair,.Lfe29-CreatePocketSwitchArrowPair
	.align	2, 0
	.globl	BagDestroyPocketSwitchArrowPair
	.type	 BagDestroyPocketSwitchArrowPair,function
	.thumb_func
BagDestroyPocketSwitchArrowPair:
	push	{r4, lr}
	ldr	r4, .L257
	ldr	r0, [r4]
	ldr	r2, .L257+0x4
	add	r1, r0, r2
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L256	@cond_branch
	bl	RemoveScrollIndicatorArrowPair
	ldr	r0, [r4]
	ldr	r1, .L257+0x4
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
.L256:
	pop	{r4}
	pop	{r0}
	bx	r0
.L258:
	.align	2, 0
.L257:
	.word	gBagMenu
	.word	0x81f
.Lfe30:
	.size	 BagDestroyPocketSwitchArrowPair,.Lfe30-BagDestroyPocketSwitchArrowPair
	.align	2, 0
	.globl	FreeBagItemListBuffers
	.type	 FreeBagItemListBuffers,function
	.thumb_func
FreeBagItemListBuffers:
	push	{lr}
	ldr	r0, .L260
	ldr	r0, [r0]
	bl	Free
	ldr	r0, .L260+0x4
	ldr	r0, [r0]
	bl	Free
	bl	FreeAllWindowBuffers
	ldr	r0, .L260+0x8
	ldr	r0, [r0]
	bl	Free
	pop	{r0}
	bx	r0
.L261:
	.align	2, 0
.L260:
	.word	sListBuffer2
	.word	sListBuffer1
	.word	gBagMenu
.Lfe31:
	.size	 FreeBagItemListBuffers,.Lfe31-FreeBagItemListBuffers
	.align	2, 0
	.globl	Task_FadeAndCloseBagMenu
	.type	 Task_FadeAndCloseBagMenu,function
	.thumb_func
Task_FadeAndCloseBagMenu:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r1, .L263
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L263+0x4
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gTasks
	.word	TaskCloseBagMenu_2
.Lfe32:
	.size	 Task_FadeAndCloseBagMenu,.Lfe32-Task_FadeAndCloseBagMenu
	.align	2, 0
	.globl	TaskCloseBagMenu_2
	.type	 TaskCloseBagMenu_2,function
	.thumb_func
TaskCloseBagMenu_2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L269
	add	r2, r0, r1
	ldr	r0, .L269+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L266	@cond_branch
	ldrb	r0, [r2]
	ldr	r4, .L269+0x8
	ldrb	r2, [r4, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x12
	add	r1, r2, r1
	add	r3, r4, #0
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	DestroyListMenuTask
	ldr	r0, .L269+0xc
	ldr	r0, [r0]
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L267	@cond_branch
	bl	SetMainCallback2
	b	.L268
.L270:
	.align	2, 0
.L269:
	.word	gTasks+0x8
	.word	gPaletteFade
	.word	gBagPositionStruct
	.word	gBagMenu
.L267:
	ldr	r0, [r4]
	bl	SetMainCallback2
.L268:
	bl	BagDestroyPocketScrollArrowPair
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	FreeBagItemListBuffers
	add	r0, r5, #0
	bl	DestroyTask
.L266:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 TaskCloseBagMenu_2,.Lfe33-TaskCloseBagMenu_2
	.align	2, 0
	.globl	UpdatePocketItemList
	.type	 UpdatePocketItemList,function
	.thumb_func
UpdatePocketItemList:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r5, #0x3
	ldr	r0, .L286
	add	r4, r1, r0
	cmp	r5, #0x3
	bgt	.L275	@cond_branch
	cmp	r5, #0x2
	blt	.L275	@cond_branch
	add	r0, r4, #0
	bl	SortBerriesOrTMHMs
	b	.L272
.L287:
	.align	2, 0
.L286:
	.word	gBagPockets
.L275:
	add	r0, r4, #0
	bl	CompactItemsInBagPocket
.L272:
	ldr	r0, .L288
	ldr	r1, [r0]
	ldr	r6, .L288+0x4
	add	r1, r1, r6
	add	r1, r1, r5
	mov	r2, #0x0
	strb	r2, [r1]
	add	r3, r0, #0
	ldrb	r0, [r4, #0x4]
	cmp	r2, r0
	bcs	.L278	@cond_branch
	ldr	r0, [r4]
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L278	@cond_branch
	add	r7, r3, #0
.L280:
	ldr	r0, [r7]
	add	r0, r0, r6
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r1, r1, #0x1
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrb	r1, [r4, #0x4]
	cmp	r2, r1
	bcs	.L278	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	bne	.L280	@cond_branch
.L278:
	ldr	r2, [r3]
	ldr	r1, .L288+0x8
	add	r0, r2, r1
	ldrb	r1, [r0]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L283	@cond_branch
	ldr	r0, .L288+0x4
	add	r1, r2, r0
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
.L283:
	ldr	r1, [r3]
	ldr	r2, .L288+0x4
	add	r0, r1, r2
	add	r0, r0, r5
	ldrb	r2, [r0]
	cmp	r2, #0x8
	bls	.L284	@cond_branch
	ldr	r3, .L288+0xc
	add	r0, r1, r3
	add	r0, r0, r5
	mov	r1, #0x8
	strb	r1, [r0]
	b	.L285
.L289:
	.align	2, 0
.L288:
	.word	gBagMenu
	.word	0x829
	.word	0x81b
	.word	0x82e
.L284:
	ldr	r3, .L290
	add	r0, r1, r3
	add	r0, r0, r5
	strb	r2, [r0]
.L285:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L291:
	.align	2, 0
.L290:
	.word	0x82e
.Lfe34:
	.size	 UpdatePocketItemList,.Lfe34-UpdatePocketItemList
	.align	2, 0
	.globl	All_CalculateNItemsAndMaxShowed
	.type	 All_CalculateNItemsAndMaxShowed,function
	.thumb_func
All_CalculateNItemsAndMaxShowed:
	push	{r4, lr}
	mov	r4, #0x0
.L296:
	add	r0, r4, #0
	bl	UpdatePocketItemList
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L296	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 All_CalculateNItemsAndMaxShowed,.Lfe35-All_CalculateNItemsAndMaxShowed
	.align	2, 0
	.globl	SetInitialScrollAndCursorPositions
	.type	 SetInitialScrollAndCursorPositions,function
	.thumb_func
SetInitialScrollAndCursorPositions:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x1
	ldr	r2, .L299
	add	r4, r1, r2
	sub	r2, r2, #0xa
	add	r1, r1, r2
	ldr	r2, .L299+0x4
	ldr	r3, [r2]
	ldr	r5, .L299+0x8
	add	r2, r3, r5
	add	r2, r2, r0
	ldrb	r2, [r2]
	sub	r5, r5, #0x5
	add	r3, r3, r5
	add	r3, r3, r0
	ldrb	r3, [r3]
	add	r0, r4, #0
	bl	sub_812225C
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gBagPositionStruct+0x12
	.word	gBagMenu
	.word	0x82e
.Lfe36:
	.size	 SetInitialScrollAndCursorPositions,.Lfe36-SetInitialScrollAndCursorPositions
	.align	2, 0
	.type	 SetPocketListPositions,function
	.thumb_func
SetPocketListPositions:
	push	{r4, lr}
	mov	r4, #0x0
.L305:
	add	r0, r4, #0
	bl	SetInitialScrollAndCursorPositions
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x4
	bls	.L305	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 SetPocketListPositions,.Lfe37-SetPocketListPositions
	.align	2, 0
	.globl	UpdatePocketScrollPositions
	.type	 UpdatePocketScrollPositions,function
	.thumb_func
UpdatePocketScrollPositions:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	mov	r5, #0x0
	ldr	r6, .L313
	add	r7, r6, #0
	sub	r7, r7, #0xa
.L311:
	lsl	r1, r5, #0x1
	add	r0, r1, r6
	add	r1, r1, r7
	ldr	r2, .L313+0x4
	ldr	r3, [r2]
	ldr	r4, .L313+0x8
	add	r2, r3, r4
	add	r2, r2, r5
	ldrb	r2, [r2]
	sub	r4, r4, #0x5
	add	r3, r3, r4
	add	r3, r3, r5
	ldrb	r3, [r3]
	mov	r4, #0x8
	str	r4, [sp]
	bl	sub_8122298
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L311	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gBagPositionStruct+0x12
	.word	gBagMenu
	.word	0x82e
.Lfe38:
	.size	 UpdatePocketScrollPositions,.Lfe38-UpdatePocketScrollPositions
	.align	2, 0
	.globl	GetItemListPosition
	.type	 GetItemListPosition,function
	.thumb_func
GetItemListPosition:
	lsl	r0, r0, #0x18
	ldr	r1, .L316
	lsr	r0, r0, #0x17
	add	r2, r1, #0
	add	r2, r2, #0x12
	add	r2, r0, r2
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	ldrb	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.L317:
	.align	2, 0
.L316:
	.word	gBagPositionStruct
.Lfe39:
	.size	 GetItemListPosition,.Lfe39-GetItemListPosition
	.align	2, 0
	.globl	DisplayItemMessage
	.type	 DisplayItemMessage,function
	.thumb_func
DisplayItemMessage:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r8, r2
	mov	r9, r3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L319
	add	r4, r4, r0
	mov	r0, #0x4
	bl	AddItemMessageWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x14]
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	bl	GetPlayerTextSpeedDelay
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4, #0x14]
	str	r6, [sp]
	str	r0, [sp, #0x4]
	mov	r0, r8
	str	r0, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	add	r0, r5, #0
	mov	r2, #0xa
	mov	r3, #0xd
	bl	DisplayMessageAndContinueTask
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L320:
	.align	2, 0
.L319:
	.word	gTasks+0x8
.Lfe40:
	.size	 DisplayItemMessage,.Lfe40-DisplayItemMessage
	.align	2, 0
	.globl	BagMenu_InitListsMenu
	.type	 BagMenu_InitListsMenu,function
	.thumb_func
BagMenu_InitListsMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r6, #0x2
	add	r5, r5, r6
	lsl	r5, r5, #0x3
	ldr	r0, .L322
	add	r5, r5, r0
	ldr	r7, .L322+0x4
	ldrb	r4, [r7, #0x5]
	lsl	r4, r4, #0x1
	mov	r0, #0x12
	add	r0, r0, r7
	mov	r8, r0
	add	r8, r8, r4
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r4, r4, r0
	mov	r0, #0x4
	bl	bag_menu_RemoveBagItem_message_window
	ldrb	r0, [r5]
	mov	r1, r8
	add	r2, r4, #0
	bl	DestroyListMenuTask
	ldrb	r0, [r7, #0x5]
	bl	UpdatePocketItemList
	ldrb	r0, [r7, #0x5]
	bl	SetInitialScrollAndCursorPositions
	ldrb	r0, [r7, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L322+0x8
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r2, [r4]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r6, #0
	bl	set_callback3_to_bag
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gMultiuseListMenuTemplate
.Lfe41:
	.size	 BagMenu_InitListsMenu,.Lfe41-BagMenu_InitListsMenu
	.align	2, 0
	.globl	sub_81ABC3C
	.type	 sub_81ABC3C,function
	.thumb_func
sub_81ABC3C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	PrintItemDepositAmount
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_81ABC3C,.Lfe42-sub_81ABC3C
	.align	2, 0
	.globl	PrintItemDepositAmount
	.type	 PrintItemDepositAmount,function
	.thumb_func
PrintItemDepositAmount:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L328
	ldrb	r0, [r0, #0x5]
	mov	r3, #0x2
	cmp	r0, #0x3
	bne	.L326	@cond_branch
	mov	r3, #0x3
.L326:
	ldr	r0, .L328+0x4
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	mov	r2, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L328+0x8
	ldr	r1, .L328+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0x28
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	AddTextPrinterParameterized
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L329:
	.align	2, 0
.L328:
	.word	gBagPositionStruct
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_xVar1
.Lfe43:
	.size	 PrintItemDepositAmount,.Lfe43-PrintItemDepositAmount
	.align	2, 0
	.globl	PrintItemSoldAmount
	.type	 PrintItemSoldAmount,function
	.thumb_func
PrintItemSoldAmount:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r7, r2, #0
	ldr	r0, .L333
	ldrb	r0, [r0, #0x5]
	mov	r3, #0x2
	cmp	r0, #0x3
	bne	.L331	@cond_branch
	mov	r3, #0x3
.L331:
	ldr	r0, .L333+0x4
	mov	r2, #0x2
	bl	ConvertIntToDecimalStringN
	ldr	r6, .L333+0x8
	ldr	r1, .L333+0xc
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r5, #0x0
	str	r5, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r6, #0
	mov	r3, #0x0
	bl	AddTextPrinterParameterized
	str	r5, [sp]
	add	r0, r4, #0
	mov	r1, #0x26
	mov	r2, #0x1
	add	r3, r7, #0
	bl	PrintMoneyAmount
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L334:
	.align	2, 0
.L333:
	.word	gBagPositionStruct
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_xVar1
.Lfe44:
	.size	 PrintItemSoldAmount,.Lfe44-PrintItemSoldAmount
	.align	2, 0
	.globl	Task_BagMenu_HandleInput
	.type	 Task_BagMenu_HandleInput,function
	.thumb_func
Task_BagMenu_HandleInput:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	str	r0, [sp]
	ldr	r1, .L354
	add	r6, r0, r1
	ldr	r5, .L354+0x4
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x12
	add	r7, r0, r1
	sub	r1, r1, #0xa
	add	r0, r0, r1
	mov	r8, r0
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB3063
	b	.L335	@long jump
.LCB3063:
	ldr	r0, .L354+0x8
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3071
	b	.L335	@long jump
.LCB3071:
	bl	GetSwitchBagPocketDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L338	@cond_branch
	cmp	r0, #0x2
	beq	.L339	@cond_branch
	ldr	r0, .L354+0xc
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	sl, r0
	cmp	r0, #0
	beq	.L337	@cond_branch
	bl	sub_81AC2C0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB3095
	b	.L335	@long jump
.LCB3095:
	b	.L352
.L355:
	.align	2, 0
.L354:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gPaletteFade
	.word	gMain
.L338:
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, r9
	b	.L353
.L339:
	mov	r0, r9
	mov	r1, #0x1
.L353:
	mov	r2, #0x0
	bl	SwitchBagPocket
	b	.L335
.L352:
	ldrb	r0, [r6]
	add	r1, r7, #0
	mov	r2, r8
	bl	ListMenuGetScrollAndRow
	ldrh	r2, [r7]
	mov	r3, r8
	ldrh	r0, [r3]
	add	r2, r2, r0
	ldr	r0, .L356
	ldr	r0, [r0]
	ldr	r1, .L356+0x4
	ldr	r3, .L356+0x8
	add	r0, r0, r3
	ldrb	r1, [r1, #0x5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r2, r0
	beq	.L335	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, r9
	bl	BagMenu_SwapItems
	b	.L335
.L357:
	.align	2, 0
.L356:
	.word	gBagMenu
	.word	gBagPositionStruct
	.word	0x829
.L337:
	ldrb	r0, [r6]
	bl	ListMenu_ProcessInput
	add	r4, r0, #0
	ldrb	r0, [r6]
	add	r1, r7, #0
	mov	r2, r8
	bl	ListMenuGetScrollAndRow
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L347	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L349	@cond_branch
	b	.L335
.L347:
	ldrb	r0, [r5, #0x4]
	cmp	r0, #0x5
	bne	.L348	@cond_branch
	mov	r0, #0x20
	bl	PlaySE
	b	.L335
.L348:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L358
	mov	r1, sl
	strh	r1, [r0]
	ldr	r0, .L358+0x4
	sub	r0, r0, #0x8
	ldr	r3, [sp]
	add	r0, r3, r0
	ldr	r1, .L358+0x8
	str	r1, [r0]
	b	.L335
.L359:
	.align	2, 0
.L358:
	.word	gSpecialVar_ItemId
	.word	gTasks+0x8
	.word	Task_FadeAndCloseBagMenu
.L349:
	mov	r0, #0x5
	bl	PlaySE
	bl	BagDestroyPocketScrollArrowPair
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	strh	r4, [r6, #0x2]
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r1, r4, #0
	bl	BagGetQuantityByPocketPosition
	strh	r0, [r6, #0x4]
	ldrb	r0, [r5, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	bl	BagGetItemIdByPocketPosition
	ldr	r1, .L360
	strh	r0, [r1]
	ldr	r1, .L360+0x4
	ldrb	r0, [r5, #0x4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, r9
	bl	_call_via_r1
.L335:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L361:
	.align	2, 0
.L360:
	.word	gSpecialVar_ItemId
	.word	gUnknown_08614054
.Lfe45:
	.size	 Task_BagMenu_HandleInput,.Lfe45-Task_BagMenu_HandleInput
	.align	2, 0
	.globl	set_callback3_to_bag
	.type	 set_callback3_to_bag,function
	.thumb_func
set_callback3_to_bag:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	mov	r0, #0x3
	bl	ClearWindowTilemap
	mov	r0, #0x4
	bl	ClearWindowTilemap
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r1, .L363
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L363+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L364:
	.align	2, 0
.L363:
	.word	gTasks
	.word	Task_BagMenu_HandleInput
.Lfe46:
	.size	 set_callback3_to_bag,.Lfe46-set_callback3_to_bag
	.align	2, 0
	.globl	GetSwitchBagPocketDirection
	.type	 GetSwitchBagPocketDirection,function
	.thumb_func
GetSwitchBagPocketDirection:
	push	{lr}
	ldr	r0, .L372
	ldr	r0, [r0]
	ldr	r1, .L372+0x4
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L369	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L372+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L368	@cond_branch
	cmp	r2, #0x1
	bne	.L367	@cond_branch
.L368:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	b	.L371
.L373:
	.align	2, 0
.L372:
	.word	gBagMenu
	.word	0x81b
	.word	gMain
.L367:
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L370	@cond_branch
	cmp	r2, #0x2
	bne	.L369	@cond_branch
.L370:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x2
	b	.L371
.L369:
	mov	r0, #0x0
.L371:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 GetSwitchBagPocketDirection,.Lfe47-GetSwitchBagPocketDirection
	.align	2, 0
	.globl	ChangeBagPocketId
	.type	 ChangeBagPocketId,function
	.thumb_func
ChangeBagPocketId:
	push	{r4, lr}
	add	r2, r0, #0
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x1
	bne	.L375	@cond_branch
	ldrb	r0, [r2]
	cmp	r0, #0x4
	bne	.L375	@cond_branch
	mov	r0, #0x0
	b	.L379
.L375:
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	mov	r1, #0x1
	neg	r1, r1
	ldrb	r3, [r2]
	cmp	r0, r1
	bne	.L377	@cond_branch
	cmp	r3, #0
	bne	.L377	@cond_branch
	mov	r0, #0x4
	b	.L379
.L377:
	add	r0, r3, r4
.L379:
	strb	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 ChangeBagPocketId,.Lfe48-ChangeBagPocketId
	.align	2, 0
	.globl	SwitchBagPocket
	.type	 SwitchBagPocket,function
	.thumb_func
SwitchBagPocket:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x10
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L384
	add	r4, r0, r1
	mov	r0, #0x0
	strh	r0, [r4, #0x1a]
	strh	r0, [r4, #0x18]
	strh	r5, [r4, #0x16]
	cmp	r2, #0
	bne	.L381	@cond_branch
	mov	r0, #0x0
	bl	ClearWindowTilemap
	mov	r0, #0x1
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	ldr	r3, .L384+0x4
	ldrb	r2, [r3, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0x12
	add	r1, r2, r1
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	DestroyListMenuTask
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r3, .L384+0x8
	ldr	r0, .L384+0xc
	ldr	r2, [r0]
	ldr	r1, .L384+0x10
	add	r0, r2, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1e
	mov	r0, #0x1
	eor	r0, r0, r1
	add	r2, r2, r0
	ldr	r0, .L384+0x14
	add	r2, r2, r0
	ldrb	r1, [r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	bl	BagDestroyPocketScrollArrowPair
.L381:
	ldr	r4, .L384+0x4
	ldrb	r1, [r4, #0x5]
	add	r0, sp, #0x8
	strb	r1, [r0]
	lsl	r1, r5, #0x18
	asr	r1, r1, #0x18
	bl	ChangeBagPocketId
	lsl	r0, r5, #0x10
	asr	r1, r0, #0x10
	add	r5, r0, #0
	cmp	r1, #0x1
	bne	.L382	@cond_branch
	ldr	r2, .L384+0x18
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	add	r1, sp, #0x8
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	BagMenu_PrintPocketNames
	mov	r0, #0x0
	bl	BagMenu_CopyPocketNameToWindow
	b	.L383
.L385:
	.align	2, 0
.L384:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gSprites
	.word	gBagMenu
	.word	0x81b
	.word	0x806
	.word	gPocketNamesStringsTable
.L382:
	ldr	r2, .L386
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	BagMenu_PrintPocketNames
	mov	r0, #0x8
	bl	BagMenu_CopyPocketNameToWindow
.L383:
	ldr	r0, .L386+0x4
	ldrb	r0, [r0, #0x5]
	mov	r1, #0x0
	bl	BagMenu_DrawPocketIndicatorSquare
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	BagMenu_DrawPocketIndicatorSquare
	mov	r0, #0xf
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0xb
	mov	r2, #0xe
	mov	r3, #0x2
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	r0, sp, #0x8
	ldrb	r0, [r0]
	mov	r1, #0x1
	bl	SetBagVisualPocketId
	mov	r0, #0x1
	bl	RemoveBagSprite
	asr	r0, r5, #0x10
	bl	AddSwitchPocketRotatingBallSprite
	ldr	r1, .L386+0x8
	ldr	r2, .L386+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r2, [r0]
	add	r0, r6, #0
	bl	SetTaskFuncWithFollowupFunc
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L387:
	.align	2, 0
.L386:
	.word	gPocketNamesStringsTable
	.word	gBagPositionStruct
	.word	sub_81AC10C
	.word	gTasks
.Lfe49:
	.size	 SwitchBagPocket,.Lfe49-SwitchBagPocket
	.align	2, 0
	.globl	sub_81AC10C
	.type	 sub_81AC10C,function
	.thumb_func
sub_81AC10C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L405
	add	r6, r0, r1
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L389	@cond_branch
	bl	IsWallysBag
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L389	@cond_branch
	bl	GetSwitchBagPocketDirection
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L391	@cond_branch
	cmp	r0, #0x2
	beq	.L392	@cond_branch
	b	.L389
.L406:
	.align	2, 0
.L405:
	.word	gTasks+0x8
.L391:
	ldr	r0, .L407
	mov	r1, #0x16
	ldrsb	r1, [r6, r1]
	bl	ChangeBagPocketId
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r7, #0
	b	.L404
.L408:
	.align	2, 0
.L407:
	.word	gBagPositionStruct+0x5
.L392:
	ldr	r0, .L409
	mov	r1, #0x16
	ldrsb	r1, [r6, r1]
	bl	ChangeBagPocketId
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
	add	r0, r7, #0
	mov	r1, #0x1
.L404:
	mov	r2, #0x1
	bl	SwitchBagPocket
	b	.L388
.L410:
	.align	2, 0
.L409:
	.word	gBagPositionStruct+0x5
.L389:
	mov	r1, #0x1a
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	beq	.L396	@cond_branch
	cmp	r0, #0x1
	beq	.L401	@cond_branch
	b	.L388
.L396:
	ldrb	r0, [r6, #0x18]
	bl	sub_81AC23C
	ldrh	r0, [r6, #0x18]
	add	r1, r0, #0x1
	strh	r1, [r6, #0x18]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L397	@cond_branch
	mov	r2, #0x16
	ldrsh	r0, [r6, r2]
	cmp	r0, #0x1
	bne	.L398	@cond_branch
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x11
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BagMenu_CopyPocketNameToWindow
	b	.L397
.L398:
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x11
	mov	r0, #0x8
	sub	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	BagMenu_CopyPocketNameToWindow
.L397:
	mov	r1, #0x18
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x10
	bne	.L388	@cond_branch
	ldrh	r0, [r6, #0x1a]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x1a]
	b	.L388
.L401:
	ldr	r4, .L411
	mov	r1, #0x16
	ldrsb	r1, [r6, r1]
	add	r0, r4, #0
	bl	ChangeBagPocketId
	sub	r5, r4, #0x5
	ldrb	r0, [r5, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L411+0x4
	ldrb	r2, [r5, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r4, #0
	add	r1, r1, #0xd
	add	r1, r2, r1
	ldrh	r1, [r1]
	add	r4, r4, #0x3
	add	r2, r2, r4
	ldrh	r2, [r2]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r6]
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x2
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	bl	CreatePocketScrollArrowPair
	bl	CreatePocketSwitchArrowPair
	add	r0, r7, #0
	bl	SwitchTaskToFollowupFunc
.L388:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L412:
	.align	2, 0
.L411:
	.word	gBagPositionStruct+0x5
	.word	gMultiuseListMenuTemplate
.Lfe50:
	.size	 sub_81AC10C,.Lfe50-sub_81AC10C
	.align	2, 0
	.globl	sub_81AC23C
	.type	 sub_81AC23C,function
	.thumb_func
sub_81AC23C:
	push	{lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	lsl	r3, r3, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x12
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	mov	r0, #0xf
	str	r0, [sp]
	mov	r0, #0x1
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r1, #0x11
	mov	r2, #0xe
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 sub_81AC23C,.Lfe51-sub_81AC23C
	.align	2, 0
	.globl	BagMenu_DrawPocketIndicatorSquare
	.type	 BagMenu_DrawPocketIndicatorSquare,function
	.thumb_func
BagMenu_DrawPocketIndicatorSquare:
	push	{lr}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L415	@cond_branch
	ldr	r1, .L417
	add	r2, r0, #0x5
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect_Palette0
	b	.L416
.L418:
	.align	2, 0
.L417:
	.word	0x1017
.L415:
	ldr	r1, .L419
	add	r2, r0, #0x5
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	mov	r3, #0x3
	bl	FillBgTilemapBufferRect_Palette0
.L416:
	mov	r0, #0x2
	bl	ScheduleBgCopyTilemapToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L420:
	.align	2, 0
.L419:
	.word	0x102b
.Lfe52:
	.size	 BagMenu_DrawPocketIndicatorSquare,.Lfe52-BagMenu_DrawPocketIndicatorSquare
	.align	2, 0
	.globl	sub_81AC2C0
	.type	 sub_81AC2C0,function
	.thumb_func
sub_81AC2C0:
	push	{lr}
	ldr	r1, .L425
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0x1
	bhi	.L422	@cond_branch
	ldrb	r0, [r1, #0x5]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.L422	@cond_branch
	mov	r0, #0x1
	b	.L424
.L426:
	.align	2, 0
.L425:
	.word	gBagPositionStruct
.L422:
	mov	r0, #0x0
.L424:
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 sub_81AC2C0,.Lfe53-sub_81AC2C0
	.align	2, 0
	.globl	BagMenu_SwapItems
	.type	 BagMenu_SwapItems,function
	.thumb_func
BagMenu_SwapItems:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r0, .L428
	mov	r9, r0
	add	r6, r4, r0
	ldrb	r0, [r6]
	mov	r1, #0x10
	mov	r2, #0x1
	bl	ListMenuSetUnkIndicatorsStructField
	ldr	r3, .L428+0x4
	ldrb	r0, [r3, #0x5]
	lsl	r0, r0, #0x1
	add	r2, r3, #0
	add	r2, r2, #0x12
	add	r2, r0, r2
	add	r1, r3, #0
	add	r1, r1, #0x8
	add	r0, r0, r1
	ldrh	r1, [r0]
	ldrh	r2, [r2]
	add	r1, r1, r2
	strh	r1, [r6, #0x2]
	ldr	r0, .L428+0x8
	ldr	r0, [r0]
	ldr	r2, .L428+0xc
	add	r0, r0, r2
	mov	r5, #0x0
	strb	r1, [r0]
	ldrb	r0, [r3, #0x5]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x2]
	bl	BagGetItemIdByPocketPosition
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L428+0x10
	bl	CopyItemName
	ldr	r0, .L428+0x14
	mov	r8, r0
	ldr	r1, .L428+0x18
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r5, [sp, #0x10]
	mov	r1, #0x1
	mov	r2, r8
	mov	r3, #0x3
	bl	BagMenu_Print
	ldrb	r0, [r6, #0x2]
	bl	sub_80D4FEC
	bl	BagDestroyPocketSwitchArrowPair
	ldrb	r0, [r6]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	mov	r2, #0x8
	neg	r2, r2
	add	r9, r9, r2
	add	r4, r4, r9
	ldr	r0, .L428+0x1c
	str	r0, [r4]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L429:
	.align	2, 0
.L428:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gBagMenu
	.word	0x81a
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_MoveVar1Where
	.word	sub_81AC3C0
.Lfe54:
	.size	 BagMenu_SwapItems,.Lfe54-BagMenu_SwapItems
	.align	2, 0
	.globl	sub_81AC3C0
	.type	 sub_81AC3C0,function
	.thumb_func
sub_81AC3C0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L442
	add	r4, r0, r1
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L431	@cond_branch
	ldr	r0, .L442+0x4
	mov	r8, r0
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L432	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	ldr	r3, .L442+0x8
	ldrb	r2, [r3, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r3, #0
	add	r1, r1, #0x12
	add	r1, r2, r1
	add	r3, r3, #0x8
	add	r2, r2, r3
	bl	ListMenuGetScrollAndRow
	b	.L441
.L443:
	.align	2, 0
.L442:
	.word	gTasks+0x8
	.word	gMain
	.word	gBagPositionStruct
.L432:
	ldrb	r0, [r4]
	bl	ListMenu_ProcessInput
	add	r7, r0, #0
	ldrb	r0, [r4]
	ldr	r5, .L444
	ldrb	r2, [r5, #0x5]
	lsl	r2, r2, #0x1
	add	r1, r5, #0
	add	r1, r1, #0x12
	add	r1, r2, r1
	add	r4, r5, #0
	add	r4, r4, #0x8
	add	r2, r2, r4
	bl	ListMenuGetScrollAndRow
	mov	r0, #0x0
	bl	sub_80D4FC8
	ldrb	r0, [r5, #0x5]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	ldrb	r0, [r0]
	bl	sub_80D4FEC
	mov	r0, #0x2
	neg	r0, r0
	cmp	r7, r0
	beq	.L436	@cond_branch
	add	r0, r0, #0x1
	cmp	r7, r0
	bne	.L439	@cond_branch
	b	.L431
.L445:
	.align	2, 0
.L444:
	.word	gBagPositionStruct
.L436:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, r8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L437	@cond_branch
.L441:
	add	r0, r6, #0
	bl	sub_81AC498
	b	.L431
.L437:
	add	r0, r6, #0
	bl	sub_81AC590
	b	.L431
.L439:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r6, #0
	bl	sub_81AC498
.L431:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_81AC3C0,.Lfe55-sub_81AC3C0
	.align	2, 0
	.globl	sub_81AC498
	.type	 sub_81AC498,function
	.thumb_func
sub_81AC498:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x2
	add	r0, r0, r3
	lsl	r0, r0, #0x3
	mov	sl, r0
	ldr	r0, .L451
	add	r0, r0, sl
	mov	r9, r0
	ldr	r5, .L451+0x4
	ldrb	r6, [r5, #0x5]
	lsl	r1, r6, #0x1
	add	r0, r5, #0
	add	r0, r0, #0x12
	add	r0, r0, r1
	mov	r8, r0
	ldr	r2, .L451+0x8
	add	r7, r1, r2
	ldrh	r0, [r7]
	mov	r1, r8
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, r9
	mov	r1, #0x2
	ldrsh	r2, [r0, r1]
	cmp	r2, r4
	beq	.L448	@cond_branch
	sub	r0, r4, #0x1
	cmp	r2, r0
	bne	.L447	@cond_branch
.L448:
	add	r0, r3, #0
	bl	sub_81AC590
	b	.L449
.L452:
	.align	2, 0
.L451:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gBagPositionStruct+0x8
.L447:
	ldr	r1, .L453
	lsl	r0, r6, #0x3
	add	r0, r0, r1
	ldr	r0, [r0]
	add	r1, r2, #0
	add	r2, r4, #0
	bl	MoveItemSlotInList
	ldr	r0, .L453+0x4
	ldr	r0, [r0]
	ldr	r2, .L453+0x8
	add	r0, r0, r2
	mov	r1, #0xff
	strb	r1, [r0]
	mov	r1, r9
	ldrb	r0, [r1]
	mov	r1, r8
	add	r2, r7, #0
	bl	DestroyListMenuTask
	mov	r2, r9
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	cmp	r0, r4
	bge	.L450	@cond_branch
	ldrb	r1, [r5, #0x5]
	lsl	r1, r1, #0x1
	ldr	r2, .L453+0xc
	add	r1, r1, r2
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
.L450:
	ldrb	r0, [r5, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L453+0x10
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r2, [r7]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, r9
	strh	r0, [r1]
	mov	r0, #0x1
	bl	sub_80D4FC8
	bl	CreatePocketSwitchArrowPair
	ldr	r0, .L453+0x14
	sub	r0, r0, #0x8
	add	r0, r0, sl
	ldr	r1, .L453+0x18
	str	r1, [r0]
.L449:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L454:
	.align	2, 0
.L453:
	.word	gBagPockets
	.word	gBagMenu
	.word	0x81a
	.word	gBagPositionStruct+0x8
	.word	gMultiuseListMenuTemplate
	.word	gTasks+0x8
	.word	Task_BagMenu_HandleInput
.Lfe56:
	.size	 sub_81AC498,.Lfe56-sub_81AC498
	.align	2, 0
	.globl	sub_81AC590
	.type	 sub_81AC590,function
	.thumb_func
sub_81AC590:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	mov	r9, r1
	ldr	r0, .L457
	mov	sl, r0
	mov	r7, r9
	add	r7, r7, sl
	ldr	r4, .L457+0x4
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x12
	add	r6, r0, r1
	mov	r1, #0x8
	add	r1, r1, r4
	mov	r8, r1
	add	r5, r0, r1
	ldr	r0, .L457+0x8
	ldr	r0, [r0]
	ldr	r1, .L457+0xc
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldrb	r0, [r7]
	add	r1, r6, #0
	add	r2, r5, #0
	bl	DestroyListMenuTask
	mov	r0, #0x2
	ldrsh	r2, [r7, r0]
	ldrh	r0, [r6]
	ldrh	r1, [r5]
	add	r0, r0, r1
	cmp	r2, r0
	bge	.L456	@cond_branch
	ldrb	r1, [r4, #0x5]
	lsl	r1, r1, #0x1
	add	r1, r1, r8
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
.L456:
	ldrb	r0, [r4, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L457+0x10
	ldrh	r1, [r6]
	ldrh	r2, [r5]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	mov	r0, #0x1
	bl	sub_80D4FC8
	bl	CreatePocketSwitchArrowPair
	mov	r0, sl
	sub	r0, r0, #0x8
	add	r0, r0, r9
	ldr	r1, .L457+0x14
	str	r1, [r0]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L458:
	.align	2, 0
.L457:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gBagMenu
	.word	0x81a
	.word	gMultiuseListMenuTemplate
	.word	Task_BagMenu_HandleInput
.Lfe57:
	.size	 sub_81AC590,.Lfe57-sub_81AC590
	.align	2, 0
	.globl	OpenContextMenu
	.type	 OpenContextMenu,function
	.thumb_func
OpenContextMenu:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	ldr	r0, .L510
	ldrb	r0, [r0, #0x4]
	sub	r0, r0, #0x1
	cmp	r0, #0x9
	bls	.LCB4492
	b	.L479	@long jump
.LCB4492:
	lsl	r0, r0, #0x2
	ldr	r1, .L510+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L511:
	.align	2, 0
.L510:
	.word	gBagPositionStruct
	.word	.L499
	.align	2, 0
	.align	2, 0
.L499:
	.word	.L462
	.word	.L479
	.word	.L479
	.word	.L479
	.word	.L465
	.word	.L479
	.word	.L469
	.word	.L472
	.word	.L466
	.word	.L462
.L462:
	ldr	r0, .L512
	ldrh	r0, [r0]
	bl	ItemId_GetBattleUsage
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L463	@cond_branch
	ldr	r0, .L512+0x4
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L512+0x8
	str	r0, [r2]
	ldr	r0, .L512+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	b	.L508
.L513:
	.align	2, 0
.L512:
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_BattleUse
	.word	0x828
.L463:
	ldr	r0, .L514
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L514+0x4
	str	r0, [r2]
	ldr	r0, .L514+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	b	.L508
.L515:
	.align	2, 0
.L514:
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L465:
	ldr	r0, .L516
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L516+0x4
	str	r0, [r2]
	ldr	r0, .L516+0x8
	add	r1, r1, r0
	mov	r0, #0x4
	b	.L508
.L517:
	.align	2, 0
.L516:
	.word	gBagMenu
	.word	sContextMenuItems_BerryBlenderCrush
	.word	0x828
.L466:
	ldr	r4, .L518
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L467	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0xaf
	beq	.L467	@cond_branch
	ldr	r0, .L518+0x4
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L518+0x8
	str	r0, [r2]
	ldr	r0, .L518+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	b	.L508
.L519:
	.align	2, 0
.L518:
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_Apprentice
	.word	0x828
.L467:
	ldr	r0, .L520
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L520+0x4
	str	r0, [r2]
	ldr	r0, .L520+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	b	.L508
.L521:
	.align	2, 0
.L520:
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L469:
	ldr	r4, .L522
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L470	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0xaf
	beq	.L470	@cond_branch
	ldr	r0, .L522+0x4
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L522+0x8
	str	r0, [r2]
	ldr	r0, .L522+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	b	.L508
.L523:
	.align	2, 0
.L522:
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_FavorLady
	.word	0x828
.L470:
	ldr	r0, .L524
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L524+0x4
	str	r0, [r2]
	ldr	r0, .L524+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	b	.L508
.L525:
	.align	2, 0
.L524:
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L472:
	ldr	r4, .L526
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L473	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0xaf
	beq	.L473	@cond_branch
	ldr	r0, .L526+0x4
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L526+0x8
	str	r0, [r2]
	ldr	r0, .L526+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	b	.L508
.L527:
	.align	2, 0
.L526:
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_QuizLady
	.word	0x828
.L473:
	ldr	r0, .L528
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L528+0x4
	str	r0, [r2]
	ldr	r0, .L528+0x8
	add	r1, r1, r0
	mov	r0, #0x1
	b	.L508
.L529:
	.align	2, 0
.L528:
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L479:
	bl	MenuHelpers_LinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L481	@cond_branch
	bl	InUnionRoom
	cmp	r0, #0x1
	bne	.L480	@cond_branch
.L481:
	ldr	r0, .L530
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x4
	beq	.L483	@cond_branch
	ldr	r0, .L530+0x4
	ldrh	r0, [r0]
	bl	sub_8122148
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L482	@cond_branch
.L483:
	ldr	r0, .L530+0x8
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L530+0xc
	str	r0, [r2]
	ldr	r0, .L530+0x10
	add	r1, r1, r0
	mov	r0, #0x1
	b	.L508
.L531:
	.align	2, 0
.L530:
	.word	gBagPositionStruct
	.word	gSpecialVar_ItemId
	.word	gBagMenu
	.word	sContextMenuItems_Cancel
	.word	0x828
.L482:
	ldr	r0, .L532
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L532+0x4
	str	r0, [r2]
	ldr	r0, .L532+0x8
	add	r1, r1, r0
	mov	r0, #0x2
	b	.L508
.L533:
	.align	2, 0
.L532:
	.word	gBagMenu
	.word	sContextMenuItems_Give
	.word	0x828
.L480:
	ldr	r0, .L534
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x4
	bls	.LCB4864
	b	.L460	@long jump
.LCB4864:
	lsl	r0, r0, #0x2
	ldr	r1, .L534+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L535:
	.align	2, 0
.L534:
	.word	gBagPositionStruct
	.word	.L497
	.align	2, 0
	.align	2, 0
.L497:
	.word	.L487
	.word	.L494
	.word	.L495
	.word	.L496
	.word	.L489
.L487:
	ldr	r4, .L536
	ldr	r1, [r4]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r3, .L536+0x4
	add	r0, r1, r3
	str	r0, [r2]
	ldr	r0, .L536+0x8
	add	r1, r1, r0
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, r3
	ldr	r1, .L536+0xc
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L536+0x10
	ldrh	r0, [r0]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.LCB4913
	b	.L460	@long jump
.LCB4913:
	ldr	r0, [r4]
	ldr	r1, .L536+0x4
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	b	.L460
.L537:
	.align	2, 0
.L536:
	.word	gBagMenu
	.word	0x824
	.word	0x828
	.word	sContextMenuItems_ItemsPocket
	.word	gSpecialVar_ItemId
.L489:
	ldr	r4, .L538
	ldr	r1, [r4]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r5, .L538+0x4
	add	r0, r1, r5
	str	r0, [r2]
	ldr	r0, .L538+0x8
	add	r1, r1, r0
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, [r4]
	add	r0, r0, r5
	ldr	r1, .L538+0xc
	mov	r2, #0x4
	bl	memcpy
	ldr	r0, .L538+0x10
	ldr	r0, [r0]
	ldr	r1, .L538+0x14
	add	r0, r0, r1
	ldr	r2, .L538+0x18
	ldrh	r0, [r0]
	ldrh	r1, [r2]
	cmp	r0, r1
	bne	.L490	@cond_branch
	ldr	r0, [r4]
	ldr	r1, .L538+0x1c
	add	r0, r0, r1
	mov	r1, #0x8
	strb	r1, [r0]
.L490:
	ldrh	r1, [r2]
	ldr	r0, .L538+0x20
	cmp	r1, r0
	beq	.L492	@cond_branch
	add	r0, r0, #0xd
	cmp	r1, r0
	bne	.L460	@cond_branch
.L492:
	mov	r0, #0x6
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L460	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, r5
	mov	r1, #0x7
	strb	r1, [r0]
	b	.L460
.L539:
	.align	2, 0
.L538:
	.word	gBagMenu
	.word	0x824
	.word	0x828
	.word	sContextMenuItems_KeyItemsPocket
	.word	gSaveBlock1Ptr
	.word	0x496
	.word	gSpecialVar_ItemId
	.word	0x825
	.word	0x103
.L494:
	ldr	r0, .L540
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L540+0x4
	str	r0, [r2]
	ldr	r0, .L540+0x8
	add	r1, r1, r0
	mov	r0, #0x4
	b	.L508
.L541:
	.align	2, 0
.L540:
	.word	gBagMenu
	.word	sContextMenuItems_BallsPocket
	.word	0x828
.L495:
	ldr	r0, .L542
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L542+0x4
	str	r0, [r2]
	ldr	r0, .L542+0x8
	add	r1, r1, r0
	mov	r0, #0x4
	b	.L508
.L543:
	.align	2, 0
.L542:
	.word	gBagMenu
	.word	sContextMenuItems_TmHmPocket
	.word	0x828
.L496:
	ldr	r0, .L544
	ldr	r1, [r0]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r2, r1, r0
	ldr	r0, .L544+0x4
	str	r0, [r2]
	ldr	r0, .L544+0x8
	add	r1, r1, r0
	mov	r0, #0x6
.L508:
	strb	r0, [r1]
.L460:
	ldr	r0, .L544+0xc
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x2
	bne	.L500	@cond_branch
	mov	r0, #0x1
	bl	ClearWindowTilemap
	ldr	r0, .L544+0x10
	ldrh	r0, [r0]
	bl	PrintTMHMMoveData
	mov	r0, #0x3
	bl	PutWindowTilemap
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	b	.L501
.L545:
	.align	2, 0
.L544:
	.word	gBagMenu
	.word	sContextMenuItems_BerriesPocket
	.word	0x828
	.word	gBagPositionStruct
	.word	gSpecialVar_ItemId
.L500:
	ldr	r0, .L546
	ldrh	r0, [r0]
	ldr	r1, .L546+0x4
	bl	CopyItemName
	ldr	r4, .L546+0x8
	ldr	r1, .L546+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
.L501:
	ldr	r0, .L546+0x10
	ldr	r0, [r0]
	ldr	r1, .L546+0x14
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L502	@cond_branch
	mov	r0, #0x0
	b	.L509
.L547:
	.align	2, 0
.L546:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1IsSelected
	.word	gBagMenu
	.word	0x828
.L502:
	cmp	r0, #0x2
	bne	.L504	@cond_branch
	mov	r0, #0x1
.L509:
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_81ACAF8
	b	.L503
.L504:
	cmp	r0, #0x4
	bne	.L506	@cond_branch
	mov	r0, #0x2
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	mov	r2, #0x2
	bl	sub_81ACB54
	b	.L503
.L506:
	mov	r0, #0x3
	bl	BagMenu_AddWindow
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x2
	mov	r2, #0x3
	bl	sub_81ACB54
.L503:
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 OpenContextMenu,.Lfe58-OpenContextMenu
	.align	2, 0
	.globl	sub_81ACAF8
	.type	 sub_81ACAF8,function
	.thumb_func
sub_81ACAF8:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	ldr	r6, .L549
	ldr	r1, [r6]
	ldr	r5, .L549+0x4
	add	r0, r1, r5
	ldrb	r0, [r0]
	str	r0, [sp, #0x8]
	ldr	r0, .L549+0x8
	str	r0, [sp, #0xc]
	mov	r0, #0x82
	lsl	r0, r0, #0x4
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x7
	mov	r2, #0x8
	mov	r3, #0x1
	bl	AddItemMenuActionTextPrinters
	ldr	r0, [r6]
	add	r0, r0, r5
	ldrb	r1, [r0]
	add	r0, r4, #0
	mov	r2, #0x0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L550:
	.align	2, 0
.L549:
	.word	gBagMenu
	.word	0x828
	.word	sItemMenuActions
.Lfe59:
	.size	 sub_81ACAF8,.Lfe59-sub_81ACAF8
	.align	2, 0
	.globl	sub_81ACB54
	.type	 sub_81ACB54,function
	.thumb_func
sub_81ACB54:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, #0x38
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	ldr	r0, .L552
	str	r0, [sp, #0xc]
	ldr	r0, .L552+0x4
	ldr	r0, [r0]
	mov	r1, #0x82
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	str	r0, [sp, #0x10]
	add	r0, r4, #0
	mov	r1, #0x7
	mov	r2, #0x8
	mov	r3, #0x1
	bl	sub_8198DBC
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x38
	add	r2, r5, #0
	add	r3, r6, #0
	bl	sub_8199944
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L553:
	.align	2, 0
.L552:
	.word	sItemMenuActions
	.word	gBagMenu
.Lfe60:
	.size	 sub_81ACB54,.Lfe60-sub_81ACB54
	.align	2, 0
	.globl	Task_ItemContext_FieldOrBattle
	.type	 Task_ItemContext_FieldOrBattle,function
	.thumb_func
Task_ItemContext_FieldOrBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	OpenContextMenu
	ldr	r0, .L558
	ldr	r0, [r0]
	ldr	r1, .L558+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bhi	.L555	@cond_branch
	ldr	r0, .L558+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L558+0xc
	b	.L557
.L559:
	.align	2, 0
.L558:
	.word	gBagMenu
	.word	0x828
	.word	gTasks
	.word	Task_HandleInBattleItemMenuInput
.L555:
	ldr	r0, .L560
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L560+0x4
.L557:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L561:
	.align	2, 0
.L560:
	.word	gTasks
	.word	Task_HandleOutOfBattleItemMenuInput
.Lfe61:
	.size	 Task_ItemContext_FieldOrBattle,.Lfe61-Task_ItemContext_FieldOrBattle
	.align	2, 0
	.globl	Task_HandleInBattleItemMenuInput
	.type	 Task_HandleInBattleItemMenuInput,function
	.thumb_func
Task_HandleInBattleItemMenuInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L563	@cond_branch
	bl	Menu_ProcessInputNoWrap
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L563	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	bne	.L567	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L569
	ldr	r1, [r0, #0x24]
	add	r0, r5, #0
	bl	_call_via_r1
	b	.L563
.L570:
	.align	2, 0
.L569:
	.word	sItemMenuActions
.L567:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L571
	ldr	r0, .L571+0x4
	ldr	r0, [r0]
	mov	r2, #0x82
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r0, [r0]
	add	r0, r0, r4
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	_call_via_r1
.L563:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L572:
	.align	2, 0
.L571:
	.word	sItemMenuActions
	.word	gBagMenu
.Lfe62:
	.size	 Task_HandleInBattleItemMenuInput,.Lfe62-Task_HandleInBattleItemMenuInput
	.align	2, 0
	.globl	Task_HandleOutOfBattleItemMenuInput
	.type	 Task_HandleOutOfBattleItemMenuInput,function
	.thumb_func
Task_HandleOutOfBattleItemMenuInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	MenuHelpers_CallLinkSomething
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.LCB5469
	b	.L574	@long jump
.LCB5469:
	bl	Menu_GetCursorPos
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L593
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L575	@cond_branch
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0
	bgt	.LCB5487
	b	.L574	@long jump
.LCB5487:
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	sub_81ACDFC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB5497
	b	.L574	@long jump
.LCB5497:
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	bl	sub_8199134
	b	.L574
.L594:
	.align	2, 0
.L593:
	.word	gMain
.L575:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L578	@cond_branch
	lsl	r0, r4, #0x18
	asr	r1, r0, #0x18
	ldr	r0, .L595
	ldr	r0, [r0]
	ldr	r2, .L595+0x4
	add	r0, r0, r2
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	cmp	r1, r0
	blt	.LCB5532
	b	.L574	@long jump
.LCB5532:
	add	r0, r1, #0x2
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	sub_81ACDFC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L574	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	mov	r1, #0x1
	bl	sub_8199134
	b	.L574
.L596:
	.align	2, 0
.L595:
	.word	gBagMenu
	.word	0x828
.L578:
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L582	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L581	@cond_branch
.L582:
	lsl	r0, r4, #0x18
	asr	r1, r0, #0x18
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L574	@cond_branch
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	sub_81ACDFC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L574	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	neg	r0, r0
	b	.L592
.L581:
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L586	@cond_branch
	bl	GetLRKeysPressed
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L585	@cond_branch
.L586:
	lsl	r0, r4, #0x18
	asr	r1, r0, #0x18
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L574	@cond_branch
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	bl	sub_81ACDFC
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L574	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
.L592:
	mov	r1, #0x0
	bl	sub_8199134
	b	.L574
.L585:
	ldrh	r1, [r5, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L589	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r2, .L597
	ldr	r0, .L597+0x4
	ldr	r0, [r0]
	lsl	r1, r4, #0x18
	asr	r1, r1, #0x18
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r0, r0, r3
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r0]
	add	r0, r6, #0
	bl	_call_via_r1
	b	.L574
.L598:
	.align	2, 0
.L597:
	.word	sItemMenuActions
	.word	gBagMenu
.L589:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L574	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L599
	ldr	r1, [r0, #0x24]
	add	r0, r6, #0
	bl	_call_via_r1
.L574:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L600:
	.align	2, 0
.L599:
	.word	sItemMenuActions
.Lfe63:
	.size	 Task_HandleOutOfBattleItemMenuInput,.Lfe63-Task_HandleOutOfBattleItemMenuInput
	.align	2, 0
	.globl	sub_81ACDFC
	.type	 sub_81ACDFC,function
	.thumb_func
sub_81ACDFC:
	push	{lr}
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	blt	.L604	@cond_branch
	ldr	r0, .L606
	ldr	r2, [r0]
	ldr	r3, .L606+0x4
	add	r0, r2, r3
	ldrb	r0, [r0]
	cmp	r1, r0
	bgt	.L604	@cond_branch
	mov	r3, #0x82
	lsl	r3, r3, #0x4
	add	r0, r2, r3
	ldr	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0xe
	beq	.L604	@cond_branch
	mov	r0, #0x1
	b	.L605
.L607:
	.align	2, 0
.L606:
	.word	gBagMenu
	.word	0x828
.L604:
	mov	r0, #0x0
.L605:
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 sub_81ACDFC,.Lfe64-sub_81ACDFC
	.align	2, 0
	.globl	BagMenu_RemoveSomeWindow
	.type	 BagMenu_RemoveSomeWindow,function
	.thumb_func
BagMenu_RemoveSomeWindow:
	push	{lr}
	ldr	r0, .L615
	ldr	r0, [r0]
	ldr	r1, .L615+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L609	@cond_branch
	mov	r0, #0x0
	bl	BagMenu_RemoveWindow
	b	.L610
.L616:
	.align	2, 0
.L615:
	.word	gBagMenu
	.word	0x828
.L609:
	cmp	r0, #0x2
	bne	.L611	@cond_branch
	mov	r0, #0x1
	bl	BagMenu_RemoveWindow
	b	.L610
.L611:
	cmp	r0, #0x4
	bne	.L613	@cond_branch
	mov	r0, #0x2
	bl	BagMenu_RemoveWindow
	b	.L610
.L613:
	mov	r0, #0x3
	bl	BagMenu_RemoveWindow
.L610:
	pop	{r0}
	bx	r0
.Lfe65:
	.size	 BagMenu_RemoveSomeWindow,.Lfe65-BagMenu_RemoveSomeWindow
	.align	2, 0
	.globl	ItemMenu_UseOutOfBattle
	.type	 ItemMenu_UseOutOfBattle,function
	.thumb_func
ItemMenu_UseOutOfBattle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L623
	ldrh	r0, [r5]
	bl	ItemId_GetFieldFunc
	cmp	r0, #0
	beq	.L618	@cond_branch
	bl	BagMenu_RemoveSomeWindow
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L619	@cond_branch
	ldrh	r0, [r5]
	bl	ItemId_GetType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L619	@cond_branch
	add	r0, r4, #0
	bl	BagMenu_PrintThereIsNoPokemon
	b	.L618
.L624:
	.align	2, 0
.L623:
	.word	gSpecialVar_ItemId
.L619:
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	ldr	r0, .L625
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x3
	beq	.L621	@cond_branch
	ldr	r0, .L625+0x4
	ldrh	r0, [r0]
	bl	ItemId_GetFieldFunc
	add	r1, r0, #0
	add	r0, r4, #0
	bl	_call_via_r1
	b	.L618
.L626:
	.align	2, 0
.L625:
	.word	gBagPositionStruct
	.word	gSpecialVar_ItemId
.L621:
	add	r0, r4, #0
	bl	ItemUseOutOfBattle_Berry
.L618:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe66:
	.size	 ItemMenu_UseOutOfBattle,.Lfe66-ItemMenu_UseOutOfBattle
	.align	2, 0
	.globl	ItemMenu_Toss
	.type	 ItemMenu_Toss,function
	.thumb_func
ItemMenu_Toss:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r6, r0, #0x3
	ldr	r7, .L630
	add	r4, r6, r7
	bl	BagMenu_RemoveSomeWindow
	mov	r0, #0x1
	strh	r0, [r4, #0x10]
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	bne	.L628	@cond_branch
	add	r0, r5, #0
	bl	BagMenu_TossItems
	b	.L629
.L631:
	.align	2, 0
.L630:
	.word	gTasks+0x8
.L628:
	ldr	r0, .L632
	ldrh	r0, [r0]
	ldr	r1, .L632+0x4
	bl	CopyItemName
	ldr	r4, .L632+0x8
	ldr	r1, .L632+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	mov	r0, #0x7
	bl	sub_81ABC3C
	add	r0, r7, #0
	sub	r0, r0, #0x8
	add	r0, r6, r0
	ldr	r1, .L632+0x10
	str	r1, [r0]
.L629:
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L633:
	.align	2, 0
.L632:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TossHowManyVar1s
	.word	Task_ChooseHowManyToToss
.Lfe67:
	.size	 ItemMenu_Toss,.Lfe67-ItemMenu_Toss
	.align	2, 0
	.globl	BagMenu_TossItems
	.type	 BagMenu_TossItems,function
	.thumb_func
BagMenu_TossItems:
	push	{r4, r5, lr}
	add	sp, sp, #-0x14
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L635
	add	r4, r4, r0
	ldr	r0, .L635+0x4
	ldrh	r0, [r0]
	ldr	r1, .L635+0x8
	bl	CopyItemName
	ldr	r0, .L635+0xc
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L635+0x10
	ldr	r1, .L635+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	ldr	r2, .L635+0x18
	add	r0, r5, #0
	mov	r1, #0x5
	bl	BagMenu_YesNo
	add	sp, sp, #0x14
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L636:
	.align	2, 0
.L635:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_ConfirmTossItems
	.word	sYesNoTossFunctions
.Lfe68:
	.size	 BagMenu_TossItems,.Lfe68-BagMenu_TossItems
	.align	2, 0
	.globl	BagMenu_CancelToss
	.type	 BagMenu_CancelToss,function
	.thumb_func
BagMenu_CancelToss:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L638
	add	r4, r4, r0
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	bl	BagMenu_PrintDescription
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	add	r0, r5, #0
	bl	set_callback3_to_bag
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L639:
	.align	2, 0
.L638:
	.word	gTasks+0x8
.Lfe69:
	.size	 BagMenu_CancelToss,.Lfe69-BagMenu_CancelToss
	.align	2, 0
	.globl	Task_ChooseHowManyToToss
	.type	 Task_ChooseHowManyToToss,function
	.thumb_func
Task_ChooseHowManyToToss:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L646
	add	r4, r0, r1
	add	r0, r4, #0
	add	r0, r0, #0x10
	ldrh	r1, [r4, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L641	@cond_branch
	ldr	r0, .L646+0x4
	ldr	r0, [r0]
	ldr	r1, .L646+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	bl	PrintItemDepositAmount
	b	.L642
.L647:
	.align	2, 0
.L646:
	.word	gTasks+0x8
	.word	gBagMenu
	.word	0x817
.L641:
	ldr	r0, .L648
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L643	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	bl	BagMenu_RemoveWindow
	add	r0, r5, #0
	bl	BagMenu_TossItems
	b	.L642
.L649:
	.align	2, 0
.L648:
	.word	gMain
.L643:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L642	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	bl	BagMenu_RemoveWindow
	add	r0, r6, #0
	bl	BagMenu_CancelToss
.L642:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 Task_ChooseHowManyToToss,.Lfe70-Task_ChooseHowManyToToss
	.align	2, 0
	.globl	BagMenu_ConfirmToss
	.type	 BagMenu_ConfirmToss,function
	.thumb_func
BagMenu_ConfirmToss:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r5, .L651
	add	r6, r4, r5
	ldr	r0, .L651+0x4
	ldrh	r0, [r0]
	ldr	r1, .L651+0x8
	bl	CopyItemName
	ldr	r0, .L651+0xc
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r6, .L651+0x10
	ldr	r1, .L651+0x14
	add	r0, r6, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r6, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	sub	r5, r5, #0x8
	add	r4, r4, r5
	ldr	r0, .L651+0x18
	str	r0, [r4]
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L652:
	.align	2, 0
.L651:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_ThrewAwayVar2Var1s
	.word	Task_ActuallyToss
.Lfe71:
	.size	 BagMenu_ConfirmToss,.Lfe71-BagMenu_ConfirmToss
	.align	2, 0
	.globl	Task_ActuallyToss
	.type	 Task_ActuallyToss,function
	.thumb_func
Task_ActuallyToss:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	ldr	r1, .L655
	add	r5, r0, r1
	ldr	r4, .L655+0x4
	ldrb	r0, [r4, #0x5]
	lsl	r0, r0, #0x1
	add	r1, r4, #0
	add	r1, r1, #0x12
	add	r1, r1, r0
	mov	r8, r1
	add	r1, r4, #0
	add	r1, r1, #0x8
	add	r7, r0, r1
	ldr	r0, .L655+0x8
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L654	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L655+0xc
	ldrh	r0, [r0]
	ldrh	r1, [r5, #0x10]
	bl	RemoveBagItem
	ldrb	r0, [r5]
	mov	r1, r8
	add	r2, r7, #0
	bl	DestroyListMenuTask
	ldrb	r0, [r4, #0x5]
	bl	UpdatePocketItemList
	ldrb	r0, [r4, #0x5]
	bl	SetInitialScrollAndCursorPositions
	ldrb	r0, [r4, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L655+0x10
	mov	r2, r8
	ldrh	r1, [r2]
	ldrh	r2, [r7]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r6, #0
	bl	set_callback3_to_bag
.L654:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L656:
	.align	2, 0
.L655:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gMain
	.word	gSpecialVar_ItemId
	.word	gMultiuseListMenuTemplate
.Lfe72:
	.size	 Task_ActuallyToss,.Lfe72-Task_ActuallyToss
	.align	2, 0
	.globl	ItemMenu_Register
	.type	 ItemMenu_Register,function
	.thumb_func
ItemMenu_Register:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L660
	add	r7, r0, r1
	ldr	r0, .L660+0x4
	ldrb	r1, [r0, #0x5]
	lsl	r1, r1, #0x1
	add	r2, r0, #0
	add	r2, r2, #0x12
	add	r6, r1, r2
	add	r0, r0, #0x8
	add	r5, r1, r0
	ldr	r0, .L660+0x8
	ldr	r0, [r0]
	ldr	r2, .L660+0xc
	add	r1, r0, r2
	ldr	r0, .L660+0x10
	ldrh	r2, [r0]
	ldrh	r0, [r1]
	cmp	r0, r2
	bne	.L658	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L659
.L661:
	.align	2, 0
.L660:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gSaveBlock1Ptr
	.word	0x496
	.word	gSpecialVar_ItemId
.L658:
	strh	r2, [r1]
.L659:
	ldrb	r0, [r7]
	add	r1, r6, #0
	add	r2, r5, #0
	bl	DestroyListMenuTask
	ldr	r0, .L662
	ldrb	r0, [r0, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L662+0x4
	ldrh	r1, [r6]
	ldrh	r2, [r5]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r7]
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	add	r0, r4, #0
	bl	ItemMenu_Cancel
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	gBagPositionStruct
	.word	gMultiuseListMenuTemplate
.Lfe73:
	.size	 ItemMenu_Register,.Lfe73-ItemMenu_Register
	.align	2, 0
	.globl	ItemMenu_Give
	.type	 ItemMenu_Give,function
	.thumb_func
ItemMenu_Give:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	bl	BagMenu_RemoveSomeWindow
	ldr	r5, .L671
	ldrh	r0, [r5]
	bl	itemid_80BF6D8_mail_related
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L665	@cond_branch
	ldr	r2, .L671+0x4
	ldr	r3, .L671+0x8
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayItemMessage
	b	.L666
.L672:
	.align	2, 0
.L671:
	.word	gSpecialVar_ItemId
	.word	gText_CantWriteMail
	.word	sub_81AD350
.L665:
	ldrh	r0, [r5]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L667	@cond_branch
	bl	CalculatePlayerPartyCount
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L668	@cond_branch
	add	r0, r4, #0
	bl	BagMenu_PrintThereIsNoPokemon
	b	.L666
.L668:
	ldr	r0, .L673
	ldr	r1, [r0]
	ldr	r0, .L673+0x4
	str	r0, [r1]
	add	r0, r4, #0
	bl	Task_FadeAndCloseBagMenu
	b	.L666
.L674:
	.align	2, 0
.L673:
	.word	gBagMenu
	.word	CB2_ChooseMonToGiveItem
.L667:
	add	r0, r6, #0
	bl	BagMenu_PrintItemCantBeHeld
.L666:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe74:
	.size	 ItemMenu_Give,.Lfe74-ItemMenu_Give
	.align	2, 0
	.globl	BagMenu_PrintThereIsNoPokemon
	.type	 BagMenu_PrintThereIsNoPokemon,function
	.thumb_func
BagMenu_PrintThereIsNoPokemon:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L676
	ldr	r3, .L676+0x4
	mov	r1, #0x1
	bl	DisplayItemMessage
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	gText_NoPokemon
	.word	sub_81AD350
.Lfe75:
	.size	 BagMenu_PrintThereIsNoPokemon,.Lfe75-BagMenu_PrintThereIsNoPokemon
	.align	2, 0
	.globl	BagMenu_PrintItemCantBeHeld
	.type	 BagMenu_PrintItemCantBeHeld,function
	.thumb_func
BagMenu_PrintItemCantBeHeld:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L679
	ldrh	r0, [r0]
	ldr	r1, .L679+0x4
	bl	CopyItemName
	ldr	r5, .L679+0x8
	ldr	r1, .L679+0xc
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L679+0x10
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r5, #0
	bl	DisplayItemMessage
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L680:
	.align	2, 0
.L679:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1CantBeHeld
	.word	sub_81AD350
.Lfe76:
	.size	 BagMenu_PrintItemCantBeHeld,.Lfe76-BagMenu_PrintItemCantBeHeld
	.align	2, 0
	.globl	sub_81AD350
	.type	 sub_81AD350,function
	.thumb_func
sub_81AD350:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L683
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L682	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r4, #0
	bl	BagMenu_InitListsMenu
.L682:
	pop	{r4}
	pop	{r0}
	bx	r0
.L684:
	.align	2, 0
.L683:
	.word	gMain
.Lfe77:
	.size	 sub_81AD350,.Lfe77-sub_81AD350
	.align	2, 0
	.globl	ItemMenu_CheckTag
	.type	 ItemMenu_CheckTag,function
	.thumb_func
ItemMenu_CheckTag:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L686
	ldr	r2, [r1]
	ldr	r1, .L686+0x4
	str	r1, [r2]
	bl	Task_FadeAndCloseBagMenu
	pop	{r0}
	bx	r0
.L687:
	.align	2, 0
.L686:
	.word	gBagMenu
	.word	DoBerryTagScreen
.Lfe78:
	.size	 ItemMenu_CheckTag,.Lfe78-ItemMenu_CheckTag
	.align	2, 0
	.globl	ItemMenu_Cancel
	.type	 ItemMenu_Cancel,function
	.thumb_func
ItemMenu_Cancel:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L689
	add	r4, r4, r0
	bl	BagMenu_RemoveSomeWindow
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	bl	BagMenu_PrintDescription
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	add	r0, r5, #0
	bl	set_callback3_to_bag
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L690:
	.align	2, 0
.L689:
	.word	gTasks+0x8
.Lfe79:
	.size	 ItemMenu_Cancel,.Lfe79-ItemMenu_Cancel
	.align	2, 0
	.globl	ItemMenu_UseInBattle
	.type	 ItemMenu_UseInBattle,function
	.thumb_func
ItemMenu_UseInBattle:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L693
	ldrh	r0, [r4]
	bl	ItemId_GetBattleFunc
	cmp	r0, #0
	beq	.L692	@cond_branch
	bl	BagMenu_RemoveSomeWindow
	ldrh	r0, [r4]
	bl	ItemId_GetBattleFunc
	add	r1, r0, #0
	add	r0, r5, #0
	bl	_call_via_r1
.L692:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L694:
	.align	2, 0
.L693:
	.word	gSpecialVar_ItemId
.Lfe80:
	.size	 ItemMenu_UseInBattle,.Lfe80-ItemMenu_UseInBattle
	.align	2, 0
	.globl	CB2_ReturnToBagMenuPocket
	.type	 CB2_ReturnToBagMenuPocket,function
	.thumb_func
CB2_ReturnToBagMenuPocket:
	push	{lr}
	mov	r0, #0xc
	mov	r1, #0x5
	mov	r2, #0x0
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.Lfe81:
	.size	 CB2_ReturnToBagMenuPocket,.Lfe81-CB2_ReturnToBagMenuPocket
	.align	2, 0
	.globl	Task_ItemContext_FieldGive
	.type	 Task_ItemContext_FieldGive,function
	.thumb_func
Task_ItemContext_FieldGive:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L703
	ldrh	r0, [r4]
	bl	itemid_80BF6D8_mail_related
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L697	@cond_branch
	ldr	r2, .L703+0x4
	ldr	r3, .L703+0x8
	add	r0, r5, #0
	mov	r1, #0x1
	bl	DisplayItemMessage
	b	.L698
.L704:
	.align	2, 0
.L703:
	.word	gSpecialVar_ItemId
	.word	gText_CantWriteMail
	.word	sub_81AD350
.L697:
	ldrh	r0, [r4]
	bl	sub_8122148
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L699	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, .L705
	bl	CopyItemName
	ldr	r4, .L705+0x4
	ldr	r1, .L705+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L705+0xc
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	b	.L698
.L706:
	.align	2, 0
.L705:
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_Var1CantBeHeldHere
	.word	sub_81AD350
.L699:
	ldr	r0, .L707
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x4
	beq	.L701	@cond_branch
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L701	@cond_branch
	add	r0, r5, #0
	bl	Task_FadeAndCloseBagMenu
	b	.L698
.L708:
	.align	2, 0
.L707:
	.word	gBagPositionStruct
.L701:
	add	r0, r5, #0
	bl	BagMenu_PrintItemCantBeHeld
.L698:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe82:
	.size	 Task_ItemContext_FieldGive,.Lfe82-Task_ItemContext_FieldGive
	.align	2, 0
	.globl	Task_ItemContext_ItemPC_2
	.type	 Task_ItemContext_ItemPC_2,function
	.thumb_func
Task_ItemContext_ItemPC_2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L714
	ldrh	r0, [r5]
	bl	ItemIsMail
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L710	@cond_branch
	ldr	r2, .L714+0x4
	ldr	r3, .L714+0x8
	add	r0, r4, #0
	mov	r1, #0x1
	bl	DisplayItemMessage
	b	.L711
.L715:
	.align	2, 0
.L714:
	.word	gSpecialVar_ItemId
	.word	gText_CantWriteMail
	.word	sub_81AD350
.L710:
	ldr	r0, .L716
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x4
	beq	.L712	@cond_branch
	ldrh	r0, [r5]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L712	@cond_branch
	ldr	r0, .L716+0x4
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L716+0x8
	str	r0, [r1]
	b	.L711
.L717:
	.align	2, 0
.L716:
	.word	gBagPositionStruct
	.word	gTasks
	.word	Task_FadeAndCloseBagMenu
.L712:
	add	r0, r4, #0
	bl	BagMenu_PrintItemCantBeHeld
.L711:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe83:
	.size	 Task_ItemContext_ItemPC_2,.Lfe83-Task_ItemContext_ItemPC_2
	.align	2, 0
	.globl	UseRegisteredKeyItemOnField
	.type	 UseRegisteredKeyItemOnField,function
	.thumb_func
UseRegisteredKeyItemOnField:
	push	{r4, r5, r6, r7, lr}
	bl	InUnionRoom
	cmp	r0, #0x1
	beq	.L720	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L720	@cond_branch
	bl	InBattlePike
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0
	bne	.L720	@cond_branch
	bl	InMultiPartnerRoom
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L719	@cond_branch
.L720:
	mov	r0, #0x0
	b	.L724
.L719:
	bl	HideMapNamePopUpWindow
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY_ScreenOff
	ldr	r4, .L726
	ldr	r0, [r4]
	ldr	r5, .L726+0x4
	add	r1, r0, r5
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L721	@cond_branch
	mov	r1, #0x1
	bl	CheckBagHasItem
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x1
	bne	.L722	@cond_branch
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808B864
	bl	sub_808BCF4
	ldr	r2, .L726+0x8
	ldr	r0, [r4]
	add	r0, r0, r5
	ldrh	r1, [r0]
	strh	r1, [r2]
	ldrh	r0, [r0]
	bl	ItemId_GetFieldFunc
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L726+0xc
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r6, [r1, #0xe]
	b	.L725
.L727:
	.align	2, 0
.L726:
	.word	gSaveBlock1Ptr
	.word	0x496
	.word	gSpecialVar_ItemId
	.word	gTasks
.L722:
	ldr	r0, [r4]
	add	r0, r0, r5
	strh	r7, [r0]
.L721:
	ldr	r0, .L728
	bl	ScriptContext1_SetupScript
.L725:
	mov	r0, #0x1
.L724:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L729:
	.align	2, 0
.L728:
	.word	EventScript_SelectWithoutRegisteredItem
.Lfe84:
	.size	 UseRegisteredKeyItemOnField,.Lfe84-UseRegisteredKeyItemOnField
	.align	2, 0
	.globl	Task_ItemContext_Sell
	.type	 Task_ItemContext_Sell,function
	.thumb_func
Task_ItemContext_Sell:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L736
	add	r6, r0, r1
	ldr	r4, .L736+0x4
	ldrh	r0, [r4]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L732	@cond_branch
	ldrh	r0, [r4]
	bl	ItemId_GetPocket
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L731	@cond_branch
.L732:
	ldrh	r0, [r4]
	ldr	r1, .L736+0x8
	bl	CopyItemName
	ldr	r4, .L736+0xc
	ldr	r1, .L736+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L736+0x14
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	b	.L733
.L737:
	.align	2, 0
.L736:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_CantBuyKeyItem
	.word	BagMenu_InitListsMenu
.L731:
	mov	r0, #0x1
	strh	r0, [r6, #0x10]
	mov	r1, #0x4
	ldrsh	r0, [r6, r1]
	cmp	r0, #0x1
	bne	.L734	@cond_branch
	bl	DisplayCurrentMoneyWindow
	add	r0, r5, #0
	bl	DisplaySellItemPriceAndConfirm
	b	.L733
.L734:
	ldrh	r0, [r4]
	ldr	r1, .L738
	bl	CopyItemName
	ldr	r4, .L738+0x4
	ldr	r1, .L738+0x8
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L738+0xc
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
.L733:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L739:
	.align	2, 0
.L738:
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_HowManyToSell
	.word	sub_81AD730
.Lfe85:
	.size	 Task_ItemContext_Sell,.Lfe85-Task_ItemContext_Sell
	.align	2, 0
	.globl	DisplaySellItemPriceAndConfirm
	.type	 DisplaySellItemPriceAndConfirm,function
	.thumb_func
DisplaySellItemPriceAndConfirm:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L741
	add	r4, r4, r0
	ldr	r6, .L741+0x4
	ldr	r0, .L741+0x8
	ldrh	r0, [r0]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mul	r1, r1, r0
	add	r0, r6, #0
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L741+0xc
	ldr	r1, .L741+0x10
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L741+0x14
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L742:
	.align	2, 0
.L741:
	.word	gTasks+0x8
	.word	gStringVar1
	.word	gSpecialVar_ItemId
	.word	gStringVar4
	.word	gText_ICanPayVar1
	.word	sub_81AD6E4
.Lfe86:
	.size	 DisplaySellItemPriceAndConfirm,.Lfe86-DisplaySellItemPriceAndConfirm
	.align	2, 0
	.globl	sub_81AD6E4
	.type	 sub_81AD6E4,function
	.thumb_func
sub_81AD6E4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L744
	mov	r1, #0x6
	bl	BagMenu_YesNo
	pop	{r0}
	bx	r0
.L745:
	.align	2, 0
.L744:
	.word	sYesNoSellItemFunctions
.Lfe87:
	.size	 sub_81AD6E4,.Lfe87-sub_81AD6E4
	.align	2, 0
	.globl	BagMenu_CancelSell
	.type	 BagMenu_CancelSell,function
	.thumb_func
BagMenu_CancelSell:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L747
	add	r4, r4, r0
	bl	bag_menu_remove_money_window
	mov	r0, #0x4
	bl	bag_menu_RemoveBagItem_message_window
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	add	r0, r5, #0
	bl	set_callback3_to_bag
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L748:
	.align	2, 0
.L747:
	.word	gTasks+0x8
.Lfe88:
	.size	 BagMenu_CancelSell,.Lfe88-BagMenu_CancelSell
	.align	2, 0
	.globl	sub_81AD730
	.type	 sub_81AD730,function
	.thumb_func
sub_81AD730:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	lsl	r4, r4, #0x3
	ldr	r6, .L750
	add	r0, r4, r6
	mov	r8, r0
	mov	r0, #0x8
	bl	BagMenu_AddWindow
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L750+0x4
	ldrh	r0, [r0]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, r8
	mov	r3, #0x10
	ldrsh	r1, [r2, r3]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r5, #0
	mov	r1, #0x1
	bl	PrintItemSoldAmount
	bl	DisplayCurrentMoneyWindow
	sub	r6, r6, #0x8
	add	r4, r4, r6
	ldr	r0, .L750+0x8
	str	r0, [r4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L751:
	.align	2, 0
.L750:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	Task_BuyHowManyDialogueHandleInput
.Lfe89:
	.size	 sub_81AD730,.Lfe89-sub_81AD730
	.align	2, 0
	.globl	Task_BuyHowManyDialogueHandleInput
	.type	 Task_BuyHowManyDialogueHandleInput,function
	.thumb_func
Task_BuyHowManyDialogueHandleInput:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L758
	add	r6, r0, r1
	add	r0, r6, #0
	add	r0, r0, #0x10
	ldrh	r1, [r6, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L753	@cond_branch
	ldr	r0, .L758+0x4
	ldr	r0, [r0]
	ldr	r1, .L758+0x8
	add	r0, r0, r1
	ldrb	r4, [r0]
	mov	r2, #0x10
	ldrsh	r5, [r6, r2]
	ldr	r0, .L758+0xc
	ldrh	r0, [r0]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r6, r2]
	mov	r2, r0
	mul	r2, r2, r1
	add	r0, r4, #0
	add	r1, r5, #0
	bl	PrintItemSoldAmount
	b	.L754
.L759:
	.align	2, 0
.L758:
	.word	gTasks+0x8
	.word	gBagMenu
	.word	0x818
	.word	gSpecialVar_ItemId
.L753:
	ldr	r0, .L760
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L755	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x8
	bl	BagMenu_RemoveWindow
	add	r0, r4, #0
	bl	DisplaySellItemPriceAndConfirm
	b	.L754
.L761:
	.align	2, 0
.L760:
	.word	gMain
.L755:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L754	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r6]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	bl	bag_menu_remove_money_window
	mov	r0, #0x8
	bl	BagMenu_RemoveWindow
	mov	r0, #0x4
	bl	bag_menu_RemoveBagItem_message_window
	add	r0, r5, #0
	bl	set_callback3_to_bag
.L754:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 Task_BuyHowManyDialogueHandleInput,.Lfe90-Task_BuyHowManyDialogueHandleInput
	.align	2, 0
	.globl	BagMenu_ConfirmSell
	.type	 BagMenu_ConfirmSell,function
	.thumb_func
BagMenu_ConfirmSell:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	ldr	r0, .L763
	add	r4, r4, r0
	ldr	r6, .L763+0x4
	ldrh	r0, [r6]
	ldr	r1, .L763+0x8
	bl	CopyItemName
	ldr	r0, .L763+0xc
	mov	r8, r0
	ldrh	r0, [r6]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r2, #0x10
	ldrsh	r1, [r4, r2]
	mul	r1, r1, r0
	mov	r0, r8
	mov	r2, #0x0
	mov	r3, #0x6
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L763+0x10
	ldr	r1, .L763+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	ldr	r3, .L763+0x18
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	DisplayItemMessage
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L764:
	.align	2, 0
.L763:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gStringVar2
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_TurnedOverVar1ForVar2
	.word	sub_81AD8C8
.Lfe91:
	.size	 BagMenu_ConfirmSell,.Lfe91-BagMenu_ConfirmSell
	.align	2, 0
	.globl	sub_81AD8C8
	.type	 sub_81AD8C8,function
	.thumb_func
sub_81AD8C8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r6, r0, #0x2
	add	r6, r6, r0
	lsl	r6, r6, #0x3
	ldr	r0, .L766
	add	r0, r0, r6
	mov	sl, r0
	ldr	r7, .L766+0x4
	ldrb	r5, [r7, #0x5]
	lsl	r5, r5, #0x1
	mov	r1, #0x12
	add	r1, r1, r7
	mov	r9, r1
	add	r9, r9, r5
	add	r0, r7, #0
	add	r0, r0, #0x8
	add	r5, r5, r0
	mov	r0, #0x5f
	bl	PlaySE
	ldr	r2, .L766+0x8
	mov	r8, r2
	ldrh	r0, [r2]
	mov	r3, sl
	ldrh	r1, [r3, #0x10]
	bl	RemoveBagItem
	ldr	r0, .L766+0xc
	ldr	r4, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r4, r4, r1
	mov	r2, r8
	ldrh	r0, [r2]
	bl	ItemId_GetPrice
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x11
	mov	r3, sl
	mov	r2, #0x10
	ldrsh	r1, [r3, r2]
	mul	r1, r1, r0
	add	r0, r4, #0
	bl	AddMoney
	mov	r3, sl
	ldrb	r0, [r3]
	mov	r1, r9
	add	r2, r5, #0
	bl	DestroyListMenuTask
	ldrb	r0, [r7, #0x5]
	bl	UpdatePocketItemList
	ldrb	r0, [r7, #0x5]
	bl	SetInitialScrollAndCursorPositions
	ldrb	r0, [r7, #0x5]
	bl	LoadBagItemListBuffers
	ldr	r0, .L766+0x10
	mov	r2, r9
	ldrh	r1, [r2]
	ldrh	r2, [r5]
	bl	ListMenuInit
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r3, sl
	strh	r0, [r3]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	ldr	r0, .L766+0x14
	ldr	r0, [r0]
	ldr	r1, .L766+0x18
	add	r0, r0, r1
	ldrb	r4, [r0]
	ldr	r2, .L766+0xc
	ldr	r0, [r2]
	mov	r3, #0x92
	lsl	r3, r3, #0x3
	add	r0, r0, r3
	bl	GetMoney
	add	r1, r0, #0
	add	r0, r4, #0
	mov	r2, #0x0
	bl	PrintMoneyAmountInMoneyBox
	ldr	r0, .L766
	sub	r0, r0, #0x8
	add	r6, r6, r0
	ldr	r0, .L766+0x1c
	str	r0, [r6]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L767:
	.align	2, 0
.L766:
	.word	gTasks+0x8
	.word	gBagPositionStruct
	.word	gSpecialVar_ItemId
	.word	gSaveBlock1Ptr
	.word	gMultiuseListMenuTemplate
	.word	gBagMenu
	.word	0x819
	.word	sub_81AD9C0
.Lfe92:
	.size	 sub_81AD8C8,.Lfe92-sub_81AD8C8
	.align	2, 0
	.globl	sub_81AD9C0
	.type	 sub_81AD9C0,function
	.thumb_func
sub_81AD9C0:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L770
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L769	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	bl	bag_menu_remove_money_window
	add	r0, r4, #0
	bl	BagMenu_InitListsMenu
.L769:
	pop	{r4}
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	gMain
.Lfe93:
	.size	 sub_81AD9C0,.Lfe93-sub_81AD9C0
	.align	2, 0
	.globl	Task_ItemContext_Deposit
	.type	 Task_ItemContext_Deposit,function
	.thumb_func
Task_ItemContext_Deposit:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r5, r0, #0x3
	ldr	r6, .L775
	add	r1, r5, r6
	mov	r0, #0x1
	strh	r0, [r1, #0x10]
	mov	r3, #0x4
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x1
	bne	.L773	@cond_branch
	add	r0, r2, #0
	bl	sub_81ADB14
	b	.L774
.L776:
	.align	2, 0
.L775:
	.word	gTasks+0x8
.L773:
	ldr	r0, .L777
	ldrh	r0, [r0]
	ldr	r1, .L777+0x4
	bl	CopyItemName
	ldr	r4, .L777+0x8
	ldr	r1, .L777+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	mov	r0, #0x7
	bl	sub_81ABC3C
	add	r0, r6, #0
	sub	r0, r0, #0x8
	add	r0, r5, r0
	ldr	r1, .L777+0x10
	str	r1, [r0]
.L774:
	add	sp, sp, #0x14
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L778:
	.align	2, 0
.L777:
	.word	gSpecialVar_ItemId
	.word	gStringVar1
	.word	gStringVar4
	.word	gText_DepositHowManyVar1
	.word	sub_81ADA7C
.Lfe94:
	.size	 Task_ItemContext_Deposit,.Lfe94-Task_ItemContext_Deposit
	.align	2, 0
	.globl	sub_81ADA7C
	.type	 sub_81ADA7C,function
	.thumb_func
sub_81ADA7C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r6, r4, #0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L785
	add	r5, r0, r1
	add	r0, r5, #0
	add	r0, r0, #0x10
	ldrh	r1, [r5, #0x4]
	bl	AdjustQuantityAccordingToDPadInput
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L780	@cond_branch
	ldr	r0, .L785+0x4
	ldr	r0, [r0]
	ldr	r1, .L785+0x8
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r2, #0x10
	ldrsh	r1, [r5, r2]
	bl	PrintItemDepositAmount
	b	.L781
.L786:
	.align	2, 0
.L785:
	.word	gTasks+0x8
	.word	gBagMenu
	.word	0x817
.L780:
	ldr	r0, .L787
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L782	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	bl	BagMenu_RemoveWindow
	add	r0, r4, #0
	bl	sub_81ADB14
	b	.L781
.L788:
	.align	2, 0
.L787:
	.word	gMain
.L782:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L781	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	bl	BagMenu_PrintDescription
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	mov	r0, #0x7
	bl	BagMenu_RemoveWindow
	add	r0, r6, #0
	bl	set_callback3_to_bag
.L781:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 sub_81ADA7C,.Lfe95-sub_81ADA7C
	.align	2, 0
	.globl	sub_81ADB14
	.type	 sub_81ADB14,function
	.thumb_func
sub_81ADB14:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r7, r1, #0x3
	ldr	r0, .L796
	mov	r9, r0
	add	r2, r7, #0
	add	r2, r2, r9
	mov	r8, r2
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r4, .L796+0x4
	ldrh	r0, [r4]
	bl	ItemId_GetImportance
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L790	@cond_branch
	ldr	r2, .L796+0x8
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	str	r0, [sp, #0x10]
	mov	r0, #0x1
	b	.L794
.L797:
	.align	2, 0
.L796:
	.word	gTasks+0x8
	.word	gSpecialVar_ItemId
	.word	gText_CantStoreImportantItems
.L790:
	ldrh	r0, [r4]
	mov	r3, r8
	ldrh	r1, [r3, #0x10]
	bl	AddPCItem
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x1
	bne	.L792	@cond_branch
	ldrh	r0, [r4]
	ldr	r1, .L798
	bl	CopyItemName
	ldr	r0, .L798+0x4
	mov	r2, r8
	mov	r3, #0x10
	ldrsh	r1, [r2, r3]
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	ldr	r4, .L798+0x8
	ldr	r1, .L798+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r5, [sp, #0x10]
	mov	r0, #0x1
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3
	bl	BagMenu_Print
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L798+0x10
	b	.L795
.L799:
	.align	2, 0
.L798:
	.word	gStringVar1
	.word	gStringVar2
	.word	gStringVar4
	.word	gText_DepositedVar2Var1s
	.word	Task_ActuallyToss
.L792:
	ldr	r2, .L800
	mov	r0, #0x1
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r5, [sp, #0xc]
	str	r5, [sp, #0x10]
.L794:
	mov	r1, #0x1
	mov	r3, #0x3
	bl	BagMenu_Print
	mov	r0, r9
	sub	r0, r0, #0x8
	add	r0, r7, r0
	ldr	r1, .L800+0x4
.L795:
	str	r1, [r0]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L801:
	.align	2, 0
.L800:
	.word	gText_NoRoomForItems
	.word	sub_81ADC0C
.Lfe96:
	.size	 sub_81ADB14,.Lfe96-sub_81ADB14
	.align	2, 0
	.globl	sub_81ADC0C
	.type	 sub_81ADC0C,function
	.thumb_func
sub_81ADC0C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L804
	add	r5, r0, r1
	ldr	r0, .L804+0x4
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L803	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r1, #0x2
	ldrsh	r0, [r5, r1]
	bl	BagMenu_PrintDescription
	ldrb	r0, [r5]
	mov	r1, #0x0
	bl	BagMenu_PrintCursor_
	add	r0, r4, #0
	bl	set_callback3_to_bag
.L803:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L805:
	.align	2, 0
.L804:
	.word	gTasks+0x8
	.word	gMain
.Lfe97:
	.size	 sub_81ADC0C,.Lfe97-sub_81ADC0C
	.align	2, 0
	.globl	IsWallysBag
	.type	 IsWallysBag,function
	.thumb_func
IsWallysBag:
	push	{lr}
	ldr	r0, .L809
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0xa
	beq	.L807	@cond_branch
	mov	r0, #0x0
	b	.L808
.L810:
	.align	2, 0
.L809:
	.word	gBagPositionStruct
.L807:
	mov	r0, #0x1
.L808:
	pop	{r1}
	bx	r1
.Lfe98:
	.size	 IsWallysBag,.Lfe98-IsWallysBag
	.align	2, 0
	.globl	PrepareBagForWallyTutorial
	.type	 PrepareBagForWallyTutorial,function
	.thumb_func
PrepareBagForWallyTutorial:
	push	{r4, r5, r6, lr}
	ldr	r4, .L817
	mov	r0, #0xd0
	bl	AllocZeroed
	str	r0, [r4]
	ldr	r5, .L817+0x4
	ldr	r1, [r5]
	mov	r2, #0xac
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	mov	r2, #0x78
	bl	memcpy
	ldr	r0, [r4]
	ldr	r1, [r5]
	mov	r2, #0xca
	lsl	r2, r2, #0x3
	add	r1, r1, r2
	add	r0, r0, #0x78
	mov	r2, #0x40
	bl	memcpy
	ldr	r0, [r4]
	ldr	r2, .L817+0x8
	ldrb	r1, [r2, #0x5]
	add	r0, r0, #0xce
	strh	r1, [r0]
	mov	r6, #0x0
	add	r5, r2, #0
	add	r5, r5, #0x8
.L815:
	ldr	r2, [r4]
	lsl	r3, r6, #0x1
	add	r0, r2, #0
	add	r0, r0, #0xb8
	add	r0, r0, r3
	ldrh	r1, [r5]
	strh	r1, [r0]
	add	r2, r2, #0xc2
	add	r2, r2, r3
	ldrh	r0, [r5, #0xa]
	strh	r0, [r2]
	add	r5, r5, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x4
	bls	.L815	@cond_branch
	ldr	r4, .L817+0x4
	ldr	r0, [r4]
	mov	r1, #0xac
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	mov	r1, #0x1e
	bl	ClearItemSlots
	ldr	r0, [r4]
	mov	r2, #0xca
	lsl	r2, r2, #0x3
	add	r0, r0, r2
	mov	r1, #0x10
	bl	ClearItemSlots
	bl	ResetBagScrollPositions
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L818:
	.align	2, 0
.L817:
	.word	sTempWallyBag
	.word	gSaveBlock1Ptr
	.word	gBagPositionStruct
.Lfe99:
	.size	 PrepareBagForWallyTutorial,.Lfe99-PrepareBagForWallyTutorial
	.align	2, 0
	.globl	RestoreBagAfterWallyTutorial
	.type	 RestoreBagAfterWallyTutorial,function
	.thumb_func
RestoreBagAfterWallyTutorial:
	push	{r4, r5, r6, lr}
	ldr	r5, .L825
	ldr	r0, [r5]
	mov	r1, #0xac
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r4, .L825+0x4
	ldr	r1, [r4]
	mov	r2, #0x78
	bl	memcpy
	ldr	r0, [r5]
	mov	r1, #0xca
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	ldr	r1, [r4]
	add	r1, r1, #0x78
	mov	r2, #0x40
	bl	memcpy
	ldr	r1, .L825+0x8
	ldr	r0, [r4]
	add	r0, r0, #0xce
	ldrh	r0, [r0]
	strb	r0, [r1, #0x5]
	mov	r5, #0x0
	add	r6, r4, #0
	add	r3, r1, #0
	add	r3, r3, #0x8
.L823:
	lsl	r2, r5, #0x1
	ldr	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0xb8
	add	r0, r0, r2
	ldrh	r0, [r0]
	strh	r0, [r3]
	add	r1, r1, #0xc2
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r3, #0xa]
	add	r3, r3, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	bls	.L823	@cond_branch
	ldr	r0, [r6]
	bl	Free
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L826:
	.align	2, 0
.L825:
	.word	gSaveBlock1Ptr
	.word	sTempWallyBag
	.word	gBagPositionStruct
.Lfe100:
	.size	 RestoreBagAfterWallyTutorial,.Lfe100-RestoreBagAfterWallyTutorial
	.align	2, 0
	.globl	DoWallyTutorialBagMenu
	.type	 DoWallyTutorialBagMenu,function
	.thumb_func
DoWallyTutorialBagMenu:
	push	{lr}
	bl	PrepareBagForWallyTutorial
	mov	r0, #0xd
	mov	r1, #0x1
	bl	AddBagItem
	mov	r0, #0x4
	mov	r1, #0x1
	bl	AddBagItem
	ldr	r2, .L828
	mov	r0, #0xa
	mov	r1, #0x0
	bl	GoToBagMenu
	pop	{r0}
	bx	r0
.L829:
	.align	2, 0
.L828:
	.word	CB2_SetUpReshowBattleScreenAfterMenu2
.Lfe101:
	.size	 DoWallyTutorialBagMenu,.Lfe101-DoWallyTutorialBagMenu
	.align	2, 0
	.globl	Task_WallyTutorialBagMenu
	.type	 Task_WallyTutorialBagMenu,function
	.thumb_func
Task_WallyTutorialBagMenu:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L839
	add	r4, r0, r1
	ldr	r0, .L839+0x4
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L831	@cond_branch
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	cmp	r1, #0xcc
	beq	.L834	@cond_branch
	cmp	r1, #0xcc
	bgt	.L838	@cond_branch
	cmp	r1, #0x66
	beq	.L833	@cond_branch
	b	.L836
.L840:
	.align	2, 0
.L839:
	.word	gTasks+0x8
	.word	gPaletteFade
.L838:
	mov	r0, #0x99
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L835	@cond_branch
	b	.L836
.L833:
	mov	r0, #0x5
	bl	PlaySE
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SwitchBagPocket
	b	.L836
.L834:
	mov	r0, #0x5
	bl	PlaySE
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	BagMenu_PrintCursor_
	ldr	r1, .L841
	mov	r0, #0x4
	strh	r0, [r1]
	add	r0, r5, #0
	bl	OpenContextMenu
	b	.L836
.L842:
	.align	2, 0
.L841:
	.word	gSpecialVar_ItemId
.L835:
	mov	r0, #0x5
	bl	PlaySE
	bl	BagMenu_RemoveSomeWindow
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x0
	bl	DestroyListMenuTask
	bl	RestoreBagAfterWallyTutorial
	add	r0, r5, #0
	bl	Task_FadeAndCloseBagMenu
	b	.L831
.L836:
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
.L831:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe102:
	.size	 Task_WallyTutorialBagMenu,.Lfe102-Task_WallyTutorialBagMenu
	.align	2, 0
	.globl	unknown_ItemMenu_Show
	.type	 unknown_ItemMenu_Show,function
	.thumb_func
unknown_ItemMenu_Show:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L844
	ldr	r0, .L844+0x4
	ldrh	r0, [r0]
	strh	r0, [r1]
	ldr	r1, .L844+0x8
	mov	r0, #0x1
	strh	r0, [r1]
	bl	BagMenu_RemoveSomeWindow
	add	r0, r4, #0
	bl	Task_FadeAndCloseBagMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L845:
	.align	2, 0
.L844:
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_ItemId
	.word	gSpecialVar_Result
.Lfe103:
	.size	 unknown_ItemMenu_Show,.Lfe103-unknown_ItemMenu_Show
	.align	2, 0
	.globl	CB2_ApprenticeExitBagMenu
	.type	 CB2_ApprenticeExitBagMenu,function
	.thumb_func
CB2_ApprenticeExitBagMenu:
	push	{lr}
	ldr	r0, .L847
	ldr	r1, .L847+0x4
	str	r1, [r0]
	ldr	r0, .L847+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L848:
	.align	2, 0
.L847:
	.word	gFieldCallback
	.word	Apprentice_EnableBothScriptContexts
	.word	CB2_ReturnToField
.Lfe104:
	.size	 CB2_ApprenticeExitBagMenu,.Lfe104-CB2_ApprenticeExitBagMenu
	.align	2, 0
	.globl	unknown_ItemMenu_Give2
	.type	 unknown_ItemMenu_Give2,function
	.thumb_func
unknown_ItemMenu_Give2:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L850
	ldrh	r0, [r0]
	mov	r1, #0x1
	bl	RemoveBagItem
	ldr	r1, .L850+0x4
	mov	r0, #0x1
	strh	r0, [r1]
	bl	BagMenu_RemoveSomeWindow
	add	r0, r4, #0
	bl	Task_FadeAndCloseBagMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L851:
	.align	2, 0
.L850:
	.word	gSpecialVar_ItemId
	.word	gSpecialVar_Result
.Lfe105:
	.size	 unknown_ItemMenu_Give2,.Lfe105-unknown_ItemMenu_Give2
	.align	2, 0
	.globl	CB2_FavorLadyExitBagMenu
	.type	 CB2_FavorLadyExitBagMenu,function
	.thumb_func
CB2_FavorLadyExitBagMenu:
	push	{lr}
	ldr	r0, .L853
	ldr	r1, .L853+0x4
	str	r1, [r0]
	ldr	r0, .L853+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L854:
	.align	2, 0
.L853:
	.word	gFieldCallback
	.word	FieldCallback_FavorLadyEnableScriptContexts
	.word	CB2_ReturnToField
.Lfe106:
	.size	 CB2_FavorLadyExitBagMenu,.Lfe106-CB2_FavorLadyExitBagMenu
	.align	2, 0
	.globl	unknown_ItemMenu_Confirm2
	.type	 unknown_ItemMenu_Confirm2,function
	.thumb_func
unknown_ItemMenu_Confirm2:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L856
	mov	r0, #0x1
	strh	r0, [r1]
	bl	BagMenu_RemoveSomeWindow
	add	r0, r4, #0
	bl	Task_FadeAndCloseBagMenu
	pop	{r4}
	pop	{r0}
	bx	r0
.L857:
	.align	2, 0
.L856:
	.word	gSpecialVar_Result
.Lfe107:
	.size	 unknown_ItemMenu_Confirm2,.Lfe107-unknown_ItemMenu_Confirm2
	.align	2, 0
	.globl	CB2_QuizLadyExitBagMenu
	.type	 CB2_QuizLadyExitBagMenu,function
	.thumb_func
CB2_QuizLadyExitBagMenu:
	push	{lr}
	ldr	r0, .L859
	ldr	r1, .L859+0x4
	str	r1, [r0]
	ldr	r0, .L859+0x8
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L860:
	.align	2, 0
.L859:
	.word	gFieldCallback
	.word	FieldCallback_QuizLadyEnableScriptContexts
	.word	CB2_ReturnToField
.Lfe108:
	.size	 CB2_QuizLadyExitBagMenu,.Lfe108-CB2_QuizLadyExitBagMenu
	.align	2, 0
	.globl	BagMenu_PrintPocketNames
	.type	 BagMenu_PrintPocketNames,function
	.thumb_func
BagMenu_PrintPocketNames:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x1c
	add	r4, r0, #0
	mov	r8, r1
	mov	r0, #0x0
	mov	r1, #0
	str	r0, [sp, #0x14]
	str	r1, [sp, #0x18]
	ldr	r1, .L863
	ldr	r0, [sp, #0x14]
	and	r0, r0, r1
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
	ldr	r1, .L863+0x4
	ldr	r0, [sp, #0x18]
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	str	r0, [sp, #0x18]
	add	r0, sp, #0x14
	bl	AddWindow
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r6, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	add	r1, r4, #0
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffset
	lsl	r3, r0, #0x18
	lsr	r3, r3, #0x18
	mov	r7, #0x1
	str	r7, [sp]
	mov	r5, #0x0
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	mov	r9, r0
	str	r0, [sp, #0xc]
	str	r7, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x1
	add	r2, r4, #0
	bl	BagMenu_Print
	mov	r2, r8
	cmp	r2, #0
	beq	.L862	@cond_branch
	mov	r0, #0x1
	mov	r1, r8
	mov	r2, #0x40
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	add	r3, r3, #0x40
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r7, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, r9
	str	r0, [sp, #0xc]
	str	r7, [sp, #0x10]
	add	r0, r6, #0
	mov	r1, #0x1
	mov	r2, r8
	bl	BagMenu_Print
.L862:
	add	r0, r6, #0
	mov	r1, #0x7
	bl	GetWindowAttribute
	ldr	r1, .L863+0x8
	ldr	r1, [r1]
	ldr	r2, .L863+0xc
	add	r1, r1, r2
	ldr	r2, .L863+0x10
	bl	CpuSet
	add	r0, r6, #0
	bl	RemoveWindow
	add	sp, sp, #0x1c
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L864:
	.align	2, 0
.L863:
	.word	0xffffff
	.word	-0x100
	.word	gBagMenu
	.word	0x844
	.word	0x4000100
.Lfe109:
	.size	 BagMenu_PrintPocketNames,.Lfe109-BagMenu_PrintPocketNames
	.align	2, 0
	.globl	BagMenu_CopyPocketNameToWindow
	.type	 BagMenu_CopyPocketNameToWindow,function
	.thumb_func
BagMenu_CopyPocketNameToWindow:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	cmp	r7, #0x8
	bls	.L866	@cond_branch
	mov	r7, #0x8
.L866:
	ldr	r0, .L867
	ldr	r4, [r0]
	ldr	r0, .L867+0x4
	add	r4, r4, r0
	mov	r0, #0x2
	mov	r1, #0x7
	bl	GetWindowAttribute
	add	r5, r0, #0
	lsl	r0, r7, #0x5
	add	r0, r4, r0
	ldr	r6, .L867+0x8
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CpuSet
	add	r0, r7, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x5
	add	r4, r4, r0
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	add	r5, r5, r0
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CpuSet
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L868:
	.align	2, 0
.L867:
	.word	gBagMenu
	.word	0x844
	.word	0x4000040
.Lfe110:
	.size	 BagMenu_CopyPocketNameToWindow,.Lfe110-BagMenu_CopyPocketNameToWindow
	.align	2, 0
	.globl	SetupBagMenu_Textboxes
	.type	 SetupBagMenu_Textboxes,function
	.thumb_func
SetupBagMenu_Textboxes:
	push	{r4, lr}
	ldr	r0, .L875
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r0, #0x0
	mov	r1, #0x1
	mov	r2, #0xe0
	bl	LoadUserWindowBorderGfx
	mov	r0, #0x0
	mov	r1, #0xa
	mov	r2, #0xd0
	bl	LoadMessageBoxGfx
	mov	r0, #0xc0
	mov	r1, #0x1
	bl	sub_819A2BC
	ldr	r0, .L875+0x4
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r4, #0x0
.L873:
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L873	@cond_branch
	mov	r0, #0x0
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.L876:
	.align	2, 0
.L875:
	.word	sDefaultBagWindows
	.word	gUnknown_0860F074
.Lfe111:
	.size	 SetupBagMenu_Textboxes,.Lfe111-SetupBagMenu_Textboxes
	.align	2, 0
	.globl	BagMenu_Print
	.type	 BagMenu_Print,function
	.thumb_func
BagMenu_Print:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	mov	r9, r3
	ldr	r3, [sp, #0x30]
	ldr	r4, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	ldr	r5, [sp, #0x3c]
	mov	r8, r5
	ldr	r5, [sp, #0x40]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r7, r9
	lsl	r7, r7, #0x18
	lsr	r7, r7, #0x18
	mov	r9, r7
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r4, [sp]
	str	r6, [sp, #0x4]
	lsl	r4, r5, #0x1
	add	r4, r4, r5
	ldr	r5, .L878
	add	r4, r4, r5
	str	r4, [sp, #0x8]
	mov	r4, r8
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	str	r4, [sp, #0xc]
	str	r2, [sp, #0x10]
	mov	r2, r9
	bl	AddTextPrinterParameterized4
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L879:
	.align	2, 0
.L878:
	.word	sFontColorTable
.Lfe112:
	.size	 BagMenu_Print,.Lfe112-BagMenu_Print
	.align	2, 0
	.globl	sub_81AE124
	.type	 sub_81AE124,function
	.thumb_func
sub_81AE124:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L881
	ldr	r1, [r1]
	mov	r2, #0x81
	lsl	r2, r2, #0x4
	add	r1, r1, r2
	add	r1, r1, r0
	ldrb	r0, [r1]
	bx	lr
.L882:
	.align	2, 0
.L881:
	.word	gBagMenu
.Lfe113:
	.size	 sub_81AE124,.Lfe113-sub_81AE124
	.align	2, 0
	.globl	BagMenu_AddWindow
	.type	 BagMenu_AddWindow,function
	.thumb_func
BagMenu_AddWindow:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L885
	mov	r3, #0x81
	lsl	r3, r3, #0x4
	add	r1, r2, r3
	ldr	r0, [r0]
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L884	@cond_branch
	lsl	r0, r2, #0x3
	ldr	r1, .L885+0x4
	add	r0, r0, r1
	bl	AddWindow
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x0
	mov	r2, #0x1
	mov	r3, #0xe
	bl	DrawStdFrameWithCustomTileAndPalette
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
.L884:
	ldrb	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L886:
	.align	2, 0
.L885:
	.word	gBagMenu
	.word	sContextMenuWindowTemplates
.Lfe114:
	.size	 BagMenu_AddWindow,.Lfe114-BagMenu_AddWindow
	.align	2, 0
	.globl	BagMenu_RemoveWindow
	.type	 BagMenu_RemoveWindow,function
	.thumb_func
BagMenu_RemoveWindow:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L889
	mov	r2, #0x81
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r1]
	add	r4, r1, r0
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L888	@cond_branch
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0xff
	strb	r0, [r4]
.L888:
	pop	{r4}
	pop	{r0}
	bx	r0
.L890:
	.align	2, 0
.L889:
	.word	gBagMenu
.Lfe115:
	.size	 BagMenu_RemoveWindow,.Lfe115-BagMenu_RemoveWindow
	.align	2, 0
	.globl	AddItemMessageWindow
	.type	 AddItemMessageWindow,function
	.thumb_func
AddItemMessageWindow:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L893
	mov	r3, #0x81
	lsl	r3, r3, #0x4
	add	r1, r2, r3
	ldr	r0, [r0]
	add	r4, r0, r1
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L892	@cond_branch
	lsl	r0, r2, #0x3
	ldr	r1, .L893+0x4
	add	r0, r0, r1
	bl	AddWindow
	strb	r0, [r4]
.L892:
	ldrb	r0, [r4]
	pop	{r4}
	pop	{r1}
	bx	r1
.L894:
	.align	2, 0
.L893:
	.word	gBagMenu
	.word	sContextMenuWindowTemplates
.Lfe116:
	.size	 AddItemMessageWindow,.Lfe116-AddItemMessageWindow
	.align	2, 0
	.globl	bag_menu_RemoveBagItem_message_window
	.type	 bag_menu_RemoveBagItem_message_window,function
	.thumb_func
bag_menu_RemoveBagItem_message_window:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L897
	mov	r2, #0x81
	lsl	r2, r2, #0x4
	add	r0, r0, r2
	ldr	r1, [r1]
	add	r4, r1, r0
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L896	@cond_branch
	mov	r1, #0x0
	bl	ClearDialogWindowAndFrameToTransparent
	ldrb	r0, [r4]
	bl	ClearWindowTilemap
	ldrb	r0, [r4]
	bl	RemoveWindow
	mov	r0, #0x1
	bl	ScheduleBgCopyTilemapToVram
	mov	r0, #0xff
	strb	r0, [r4]
.L896:
	pop	{r4}
	pop	{r0}
	bx	r0
.L898:
	.align	2, 0
.L897:
	.word	gBagMenu
.Lfe117:
	.size	 bag_menu_RemoveBagItem_message_window,.Lfe117-bag_menu_RemoveBagItem_message_window
	.align	2, 0
	.globl	BagMenu_YesNo
	.type	 BagMenu_YesNo,function
	.thumb_func
BagMenu_YesNo:
	push	{lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x15
	ldr	r3, .L900
	add	r1, r1, r3
	mov	r3, #0x2
	str	r3, [sp]
	mov	r3, #0x1
	str	r3, [sp, #0x4]
	mov	r3, #0xe
	str	r3, [sp, #0x8]
	str	r2, [sp, #0xc]
	mov	r2, #0x1
	mov	r3, #0x0
	bl	CreateYesNoMenuWithCallbacks
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L901:
	.align	2, 0
.L900:
	.word	sContextMenuWindowTemplates
.Lfe118:
	.size	 BagMenu_YesNo,.Lfe118-BagMenu_YesNo
	.align	2, 0
	.globl	DisplayCurrentMoneyWindow
	.type	 DisplayCurrentMoneyWindow,function
	.thumb_func
DisplayCurrentMoneyWindow:
	push	{r4, lr}
	mov	r0, #0x9
	bl	BagMenu_AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L903
	ldr	r0, [r0]
	mov	r1, #0x92
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	bl	GetMoney
	add	r3, r0, #0
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r2, #0xe
	bl	PrintMoneyAmountInMoneyBoxWithBorder
	mov	r0, #0x13
	mov	r1, #0xb
	bl	AddMoneyLabelObject
	pop	{r4}
	pop	{r0}
	bx	r0
.L904:
	.align	2, 0
.L903:
	.word	gSaveBlock1Ptr
.Lfe119:
	.size	 DisplayCurrentMoneyWindow,.Lfe119-DisplayCurrentMoneyWindow
	.align	2, 0
	.globl	bag_menu_remove_money_window
	.type	 bag_menu_remove_money_window,function
	.thumb_func
bag_menu_remove_money_window:
	push	{lr}
	mov	r0, #0x9
	bl	BagMenu_RemoveWindow
	bl	RemoveMoneyLabelObject
	pop	{r0}
	bx	r0
.Lfe120:
	.size	 bag_menu_remove_money_window,.Lfe120-bag_menu_remove_money_window
	.align	2, 0
	.globl	BagMenu_PrepareTMHMMoveWindow
	.type	 BagMenu_PrepareTMHMMoveWindow,function
	.thumb_func
BagMenu_PrepareTMHMMoveWindow:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0x13
	mov	r2, #0x0
	mov	r3, #0x0
	bl	blit_move_info_icon
	mov	r0, #0x3
	mov	r1, #0x14
	mov	r2, #0x0
	mov	r3, #0xc
	bl	blit_move_info_icon
	mov	r0, #0x3
	mov	r1, #0x15
	mov	r2, #0x0
	mov	r3, #0x18
	bl	blit_move_info_icon
	mov	r0, #0x3
	mov	r1, #0x16
	mov	r2, #0x0
	mov	r3, #0x24
	bl	blit_move_info_icon
	mov	r0, #0x3
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe121:
	.size	 BagMenu_PrepareTMHMMoveWindow,.Lfe121-BagMenu_PrepareTMHMMoveWindow
	.align	2, 0
	.globl	PrintTMHMMoveData
	.type	 PrintTMHMMoveData,function
	.thumb_func
PrintTMHMMoveData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x4
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	cmp	r4, #0
	bne	.L908	@cond_branch
	mov	r4, #0x0
	mov	r5, #0x0
.L912:
	lsl	r0, r4, #0x1
	add	r0, r0, r4
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x18
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x4
	str	r0, [sp, #0x10]
	mov	r1, #0x1
	ldr	r2, .L919
	mov	r3, #0x7
	bl	BagMenu_Print
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L912	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L914
.L920:
	.align	2, 0
.L919:
	.word	gText_ThreeDashes
.L908:
	add	r0, r4, #0
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldr	r1, .L921
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	ldrb	r1, [r5, #0x2]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x4
	mov	r2, #0x0
	mov	r3, #0x0
	bl	blit_move_info_icon
	ldrb	r0, [r5, #0x1]
	cmp	r0, #0x1
	bhi	.L915	@cond_branch
	ldr	r2, .L921+0x4
	b	.L916
.L922:
	.align	2, 0
.L921:
	.word	gBattleMoves
	.word	gText_ThreeDashes
.L915:
	ldr	r4, .L923
	ldrb	r1, [r5, #0x1]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r2, r4, #0
.L916:
	mov	r0, #0xc
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0xff
	str	r0, [sp, #0xc]
	mov	r0, #0x4
	str	r0, [sp, #0x10]
	mov	r1, #0x1
	mov	r3, #0x7
	bl	BagMenu_Print
	ldr	r2, .L923+0x4
	lsl	r1, r7, #0x1
	add	r0, r1, r7
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x3]
	add	r6, r1, #0
	cmp	r0, #0
	bne	.L917	@cond_branch
	ldr	r2, .L923+0x8
	b	.L918
.L924:
	.align	2, 0
.L923:
	.word	gStringVar1
	.word	gBattleMoves
	.word	gText_ThreeDashes
.L917:
	ldr	r4, .L925
	ldrb	r1, [r2, #0x3]
	add	r0, r4, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r2, r4, #0
.L918:
	mov	r0, #0x18
	str	r0, [sp]
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0xff
	mov	r8, r0
	str	r0, [sp, #0xc]
	mov	r0, #0x4
	mov	r9, r0
	str	r0, [sp, #0x10]
	mov	r1, #0x1
	mov	r3, #0x7
	bl	BagMenu_Print
	ldr	r5, .L925
	ldr	r1, .L925+0x4
	add	r0, r6, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x4]
	add	r0, r5, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x24
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	mov	r0, r9
	str	r0, [sp, #0x10]
	mov	r0, #0x4
	mov	r1, #0x1
	add	r2, r5, #0
	mov	r3, #0x7
	bl	BagMenu_Print
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
.L914:
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L926:
	.align	2, 0
.L925:
	.word	gStringVar1
	.word	gBattleMoves
.Lfe122:
	.size	 PrintTMHMMoveData,.Lfe122-PrintTMHMMoveData
.text
	.align	2, 0

