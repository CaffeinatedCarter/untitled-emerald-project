@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gContestMons
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gContestMons,object
	.size	 gContestMons,256
gContestMons:
	.short	0x0
	.space	62
	.space	192
	.globl	gContestMonConditions
	.align	1, 0
	.type	 gContestMonConditions,object
	.size	 gContestMonConditions,8
gContestMonConditions:
	.short	0x0
	.space	6
	.globl	gUnknown_02039F08
	.align	1, 0
	.type	 gUnknown_02039F08,object
	.size	 gUnknown_02039F08,8
gUnknown_02039F08:
	.short	0x0
	.space	6
	.globl	gUnknown_02039F10
	.align	1, 0
	.type	 gUnknown_02039F10,object
	.size	 gUnknown_02039F10,8
gUnknown_02039F10:
	.short	0x0
	.space	6
	.globl	gUnknown_02039F18
	.align	1, 0
	.type	 gUnknown_02039F18,object
	.size	 gUnknown_02039F18,8
gUnknown_02039F18:
	.short	0x0
	.space	6
	.globl	gContestFinalStandings
	.type	 gContestFinalStandings,object
	.size	 gContestFinalStandings,4
gContestFinalStandings:
	.byte	0x0
	.space	3
	.globl	gContestMonPartyIndex
	.type	 gContestMonPartyIndex,object
	.size	 gContestMonPartyIndex,1
gContestMonPartyIndex:
	.byte	0x0
	.globl	gContestPlayerMonIndex
	.type	 gContestPlayerMonIndex,object
	.size	 gContestPlayerMonIndex,1
gContestPlayerMonIndex:
	.byte	0x0
	.globl	gContestantTurnOrder
	.type	 gContestantTurnOrder,object
	.size	 gContestantTurnOrder,4
gContestantTurnOrder:
	.byte	0x0
	.space	3
	.globl	gLinkContestFlags
	.type	 gLinkContestFlags,object
	.size	 gLinkContestFlags,1
gLinkContestFlags:
	.byte	0x0
	.globl	gUnknown_02039F2B
	.type	 gUnknown_02039F2B,object
	.size	 gUnknown_02039F2B,1
gUnknown_02039F2B:
	.byte	0x0
	.globl	gSpecialVar_ContestCategory
	.align	1, 0
	.type	 gSpecialVar_ContestCategory,object
	.size	 gSpecialVar_ContestCategory,2
gSpecialVar_ContestCategory:
	.short	0x0
	.globl	gSpecialVar_ContestRank
	.align	1, 0
	.type	 gSpecialVar_ContestRank,object
	.size	 gSpecialVar_ContestRank,2
gSpecialVar_ContestRank:
	.short	0x0
	.globl	gNumLinkContestPlayers
	.type	 gNumLinkContestPlayers,object
	.size	 gNumLinkContestPlayers,1
gNumLinkContestPlayers:
	.byte	0x0
	.globl	gHighestRibbonRank
	.type	 gHighestRibbonRank,object
	.size	 gHighestRibbonRank,1
gHighestRibbonRank:
	.byte	0x0
	.globl	gContestResources
	.align	2, 0
	.type	 gContestResources,object
	.size	 gContestResources,4
gContestResources:
	.word	0x0
	.globl	sContestBgCopyFlags
	.type	 sContestBgCopyFlags,object
	.size	 sContestBgCopyFlags,1
sContestBgCopyFlags:
	.byte	0x0
	.globl	gCurContestWinner
	.align	2, 0
	.type	 gCurContestWinner,object
	.size	 gCurContestWinner,32
gCurContestWinner:
	.word	0x0
	.space	28
	.globl	gUnknown_02039F5C
	.type	 gUnknown_02039F5C,object
	.size	 gUnknown_02039F5C,1
gUnknown_02039F5C:
	.byte	0x0
	.globl	gUnknown_02039F5D
	.type	 gUnknown_02039F5D,object
	.size	 gUnknown_02039F5D,1
gUnknown_02039F5D:
	.byte	0x0
	.section .rodata
	.type	 gUnknown_08587A6C,object
gUnknown_08587A6C:
	.byte	0x24
	.byte	0x4c
	.byte	0x74
	.byte	0x9c
	.size	 gUnknown_08587A6C,4
	.type	 gUnknown_08587A70,object
gUnknown_08587A70:
	.byte	0x24
	.byte	0x4c
	.byte	0x74
	.byte	0x9c
	.size	 gUnknown_08587A70,4
	.align	2, 0
	.type	 gUnknown_08587A74,object
	.size	 gUnknown_08587A74,8
gUnknown_08587A74:
	.word	gTiles_8C19450
	.short	0x20
	.short	0x4e20
	.align	2, 0
	.type	 gOamData_8587A7C,object
	.size	 gOamData_8587A7C,8
gOamData_8587A7C:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 gSpriteAffineAnim_8587A84,object
gSpriteAffineAnim_8587A84:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSpriteAffineAnim_8587A84,16
	.align	2, 0
	.type	 gSpriteAffineAnim_8587A94,object
gSpriteAffineAnim_8587A94:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	-0xa
	.short	-0xa
	.byte	0xec
	.byte	0x14
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSpriteAffineAnim_8587A94,24
	.align	2, 0
	.type	 gSpriteAffineAnim_8587AAC,object
gSpriteAffineAnim_8587AAC:
	.short	0x38
	.short	0x38
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0xa
	.short	0xa
	.byte	0x14
	.byte	0x14
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSpriteAffineAnim_8587AAC,24
	.align	2, 0
	.type	 gSpriteAffineAnimTable_8587AC4,object
gSpriteAffineAnimTable_8587AC4:
	.word	gSpriteAffineAnim_8587A84
	.word	gSpriteAffineAnim_8587A94
	.word	gSpriteAffineAnim_8587AAC
	.size	 gSpriteAffineAnimTable_8587AC4,12
	.align	2, 0
	.type	 gSpriteTemplate_8587AD0,object
	.size	 gSpriteTemplate_8587AD0,24
gSpriteTemplate_8587AD0:
	.short	0x4e20
	.short	0xabe0
	.word	gOamData_8587A7C
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSpriteAffineAnimTable_8587AC4
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 gUnknown_08587AE8,object
gUnknown_08587AE8:
	.word	gContestNextTurnGfx
	.short	0x100
	.short	0x4e22
	.word	gContestNextTurnGfx
	.short	0x100
	.short	0x4e23
	.word	gContestNextTurnGfx
	.short	0x100
	.short	0x4e24
	.word	gContestNextTurnGfx
	.short	0x100
	.short	0x4e25
	.size	 gUnknown_08587AE8,32
	.align	2, 0
	.type	 gUnknown_08587B08,object
	.size	 gUnknown_08587B08,8
gUnknown_08587B08:
	.word	gContestPal
	.short	0x4e22
	.space	2
	.align	2, 0
	.type	 gOamData_8587B10,object
	.size	 gOamData_8587B10,8
gOamData_8587B10:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 gSpriteTemplate_8587B18,object
gSpriteTemplate_8587B18:
	.short	0x4e22
	.short	0x4e22
	.word	gOamData_8587B10
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0x4e23
	.short	0x4e22
	.word	gOamData_8587B10
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0x4e24
	.short	0x4e22
	.word	gOamData_8587B10
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0x4e25
	.short	0x4e22
	.word	gOamData_8587B10
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 gSpriteTemplate_8587B18,96
	.globl	gSubspriteTable_8587B78
	.align	2, 0
	.type	 gSubspriteTable_8587B78,object
	.size	 gSubspriteTable_8587B78,8
gSubspriteTable_8587B78:
	.byte	-0x1c
	.byte	-0x4
	.byte	0x5
	.byte	0x0
	.byte	0x4
	.byte	-0x4
	.byte	0x45
	.byte	0x0
	.globl	gSubspriteTables_8587B80
	.align	2, 0
	.type	 gSubspriteTables_8587B80,object
gSubspriteTables_8587B80:
	.byte	0x2
	.space	3
	.word	gSubspriteTable_8587B78
	.size	 gSubspriteTables_8587B80,8
	.globl	gUnknown_08587B88
	.align	2, 0
	.type	 gUnknown_08587B88,object
	.size	 gUnknown_08587B88,8
gUnknown_08587B88:
	.word	gUnknown_08C19168
	.short	0x180
	.short	0xabe1
	.globl	gOamData_8587B90
	.align	2, 0
	.type	 gOamData_8587B90,object
	.size	 gOamData_8587B90,8
gOamData_8587B90:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.space	2
	.globl	gSpriteTemplate_8587B98
	.align	2, 0
	.type	 gSpriteTemplate_8587B98,object
	.size	 gSpriteTemplate_8587B98,24
gSpriteTemplate_8587B98:
	.short	0xabe1
	.short	0xabe0
	.word	gOamData_8587B90
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sApplauseMeterSpriteSheet,object
	.size	 sApplauseMeterSpriteSheet,8
sApplauseMeterSpriteSheet:
	.word	gContestApplauseGfx
	.short	0x400
	.short	0xabe2
	.align	2, 0
	.type	 sApplauseMeterPalette,object
	.size	 sApplauseMeterPalette,8
sApplauseMeterPalette:
	.word	gContestPal
	.short	0xabe2
	.space	2
	.align	2, 0
	.type	 sApplauseMeterOamData,object
	.size	 sApplauseMeterOamData,8
sApplauseMeterOamData:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.space	2
	.align	2, 0
	.type	 sApplauseMeterSpriteTemplate,object
	.size	 sApplauseMeterSpriteTemplate,24
sApplauseMeterSpriteTemplate:
	.short	0xabe2
	.short	0xabe2
	.word	sApplauseMeterOamData
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gOamData_8587BE0
	.align	2, 0
	.type	 gOamData_8587BE0,object
	.size	 gOamData_8587BE0,8
gOamData_8587BE0:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x2c
	.space	2
	.globl	gSpriteTemplate_8587BE8
	.align	2, 0
	.type	 gSpriteTemplate_8587BE8,object
	.size	 gSpriteTemplate_8587BE8,24
gSpriteTemplate_8587BE8:
	.short	0x4e21
	.short	0x4e21
	.word	gOamData_8587BE0
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_08587C00
	.align	2, 0
	.type	 gUnknown_08587C00,object
	.size	 gUnknown_08587C00,8
gUnknown_08587C00:
	.word	gContestJudgeGfx
	.short	0x800
	.short	0x4e21
	.globl	gUnknown_08587C08
	.align	2, 0
	.type	 gUnknown_08587C08,object
	.size	 gUnknown_08587C08,8
gUnknown_08587C08:
	.word	gContestJudgeSymbolsGfx
	.short	0x380
	.short	0xabe0
	.globl	gUnknown_08587C10
	.align	2, 0
	.type	 gUnknown_08587C10,object
	.size	 gUnknown_08587C10,8
gUnknown_08587C10:
	.word	gContest3Pal
	.short	0xabe0
	.space	2
	.globl	gSpriteTemplate_8587C18
	.align	2, 0
	.type	 gSpriteTemplate_8587C18,object
	.size	 gSpriteTemplate_8587C18,24
gSpriteTemplate_8587C18:
	.short	0xabe0
	.short	0xabe0
	.word	gOamData_AffineOff_ObjNormal_16x16
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_08587C30
	.align	1, 0
	.type	 gUnknown_08587C30,object
gUnknown_08587C30:
	.short	0x0
	.short	0x2529
	.short	0x1f
	.short	0x3e0
	.short	0x7c00
	.short	0x3ff
	.short	0x7fe0
	.short	0x7c1f
	.short	0x675a
	.short	0x0
	.short	0x0
	.short	0x779c
	.short	0x7fff
	.short	0x7f33
	.short	0x72ef
	.short	0x7fff
	.size	 gUnknown_08587C30,32
	.globl	gContestEffectDescriptionPointers
	.align	2, 0
	.type	 gContestEffectDescriptionPointers,object
gContestEffectDescriptionPointers:
	.word	gText_HighlyAppealingMove
	.word	gText_UserMoreEasilyStartled
	.word	gText_GreatAppealButNoMoreToEnd
	.word	gText_UsedRepeatedlyWithoutBoringJudge
	.word	gText_AvoidStartledByOthersOnce
	.word	gText_AvoidStartledByOthers
	.word	gText_AvoidStartledByOthersLittle
	.word	gText_UserLessLikelyStartled
	.word	gText_SlightlyStartleFrontMon
	.word	gText_SlightlyStartleAppealed
	.word	gText_StartleAppealedBeforeUser
	.word	gText_StartleAllAppealed
	.word	gText_BadlyStartleFrontMon
	.word	gText_BadlyStartleAppealed
	.word	gText_StartleAppealedBeforeUser2
	.word	gText_StartleAllAppealed2
	.word	gText_ShiftJudgesAttentionFromOthers
	.word	gText_StartleMonHasJudgesAttention
	.word	gText_JamOthersMissesTurn
	.word	gText_StartleMonsMadeSameTypeAppeal
	.word	gText_BadlyStartleCoolAppeals
	.word	gText_BadlyStartleBeautyAppeals
	.word	gText_BadlyStartleCuteAppeals
	.word	gText_BadlyStartleSmartAppeals
	.word	gText_BadlyStartleToughAppeals
	.word	gText_MakeMonAfterUserNervous
	.word	gText_MakeAllMonsAfterUserNervous
	.word	gText_WorsenConditionOfThoseMadeAppeals
	.word	gText_BadlyStartleMonsGoodCondition
	.word	gText_AppealGreatIfPerformedFirst
	.word	gText_AppealGreatIfPerformedLast
	.word	gText_AppealAsGoodAsThoseBeforeIt
	.word	gText_AppealAsGoodAsOneBeforeIt
	.word	gText_AppealBetterLaterItsPerformed
	.word	gText_AppealVariesDependingOnTiming
	.word	gText_WorksWellIfSameTypeAsBefore
	.word	gText_WorksWellIfDifferentTypeAsBefore
	.word	gText_AffectedByAppealInFront
	.word	gText_UpsConditionHelpsPreventNervousness
	.word	gText_AppealWorksWellIfConditionGood
	.word	gText_NextAppealMadeEarlier
	.word	gText_NextAppealMadeLater
	.word	gText_TurnOrderMoreEasilyScrambled
	.word	gText_ScrambleOrderOfNextAppeals
	.word	gText_AppealExcitesAudienceInAnyContest
	.word	gText_BadlyStartlesMonsGoodAppeals
	.word	gText_AppealBestMoreCrowdExcited
	.word	gText_TemporarilyStopCrowdExcited
	.size	 gContestEffectDescriptionPointers,192
	.align	2, 0
	.type	 sUnusedComboMoveNameTexts,object
sUnusedComboMoveNameTexts:
	.word	gText_RainDance
	.word	gText_RainDance
	.word	gText_Rage
	.word	gText_FocusEnergy
	.word	gText_Hypnosis
	.word	gText_Softboiled
	.word	gText_HornAttack
	.word	gText_SwordsDance
	.word	gText_Conversion
	.word	gText_SunnyDay
	.word	gText_Rest2
	.word	gText_Vicegrip
	.word	gText_DefenseCurl
	.word	gText_LockOn
	.size	 sUnusedComboMoveNameTexts,56
	.globl	gContestMoveTypeTextPointers
	.align	2, 0
	.type	 gContestMoveTypeTextPointers,object
gContestMoveTypeTextPointers:
	.word	gContestMoveTypeCoolText
	.word	gContestMoveTypeBeautyText
	.word	gContestMoveTypeCuteText
	.word	gContestMoveTypeSmartText
	.word	gContestMoveTypeToughText
	.size	 gContestMoveTypeTextPointers,20
	.align	2, 0
	.type	 sUnusedAppealResultTexts,object
sUnusedAppealResultTexts:
	.word	gText_ButAppealWasJammed
	.word	gText_FollowedAnotherMonsLead
	.word	gText_ButItMessedUp
	.word	gText_WentBetterThanUsual
	.word	gText_WentBetterThanUsual
	.word	gText_JudgeLookedAwayForSomeReason
	.word	gText_WorkedHardToBuildOnPastMistakes
	.word	gText_CantMakeAnyMoreMoves
	.word	gText_WorkedFrighteninglyWell
	.word	gText_WorkedHardAsStandoutMon
	.word	gText_JudgedLookedOnExpectantly
	.word	gText_WorkedRatherWell
	.word	gText_WorkedLittleBetterThanUsual
	.size	 sUnusedAppealResultTexts,52
	.align	2, 0
	.type	 sRoundResultTexts,object
sRoundResultTexts:
	.word	gText_MonFailedToStandOutAtAll
	.word	gText_MonDidntStandOutVeryMuch
	.word	gText_MonCaughtALittleAttention
	.word	gText_MonAttractedALotOfAttention
	.word	gText_MonCommandedTotalAttention
	.word	gText_MonHasntMadeItsAppeal
	.word	gText_JudgesViewsOnMonHeldFirm
	.word	gText_MonsXChangedPerceptions
	.word	gText_EmptyContestString
	.word	gText_MonsAppealEffectWoreOff
	.word	gText_SpecialAppealsEffectWoreOff
	.word	gText_EveryonesAppealsMadeToLookSame
	.word	gText_CheapenedMonsAppeal
	.word	gText_CheapenedAppealOfThoseAhead
	.word	gText_StoleAttentionAwayFromMon
	.word	gText_CheapenedMonsAppeal2
	.word	gText_SeverelyCheapenedOtherAppeals
	.word	gText_AnticipationSwelledForMonsAppealNext
	.word	gText_CheapenedAppealOfThoseAhead2
	.word	gText_CheapenedJudgesFavoriteAppeal
	.word	gText_AppealsOfOthersCheapenedByHalf
	.word	gText_StoodOutToMakeUpForBeingJammed
	.word	gText_CantParticipateInAppealsAnyMore
	.word	gText_TouchedJudgeForFantasticAppeal
	.word	gText_AnticipationRoseForUpcomingAppeals
	.word	gText_StoodOutAsMuchAsSpecialAppeals
	.word	gText_StoodOutAsMuchAsMon
	.word	gText_EmptyContestString
	.word	gText_EmptyContestString
	.word	gText_EmptyContestString
	.word	gText_JammedAppealsMadeEvenLessNoticeable
	.word	gText_EveryonesAppealsMadeSame
	.size	 sRoundResultTexts,128
	.align	2, 0
	.type	 sAppealResultTexts,object
sAppealResultTexts:
	.word	gText_BecameMoreConsciousOfOtherMons
	.word	gText_MonCantMakeAnAppealAfterThis
	.word	gText_SettledDownJustLittleBit
	.word	gText_BecameObliviousToOtherMons
	.word	gText_BecameLessAwareOfOtherMons
	.word	gText_StoppedCaringAboutOtherMons
	.word	gText_TriedToStartleOtherMons
	.word	gText_TriedToDazzleOthers
	.word	gText_JudgeLookedAwayFromMon
	.word	gText_TriedToUnnerveNextMon
	.word	gText_MonBecameNervous
	.word	gText_AppealTriedToUnnerveWaitingMons
	.word	gText_TauntedMonsDoingWell
	.word	gText_MonRegainedItsForm
	.word	gText_TriedToJamMonDoingWell
	.word	gText_StandoutMonHustledEvenMore
	.word	gText_LargelyUnnoticedMonWorkedHard
	.word	gText_WorkedAsMuchAsMonBefore
	.word	gText_MonsAppealDidNotGoWell
	.word	gText_WorkedAsMuchAsPrecedingMon
	.word	gText_MonsAppealDidNotGoWell2
	.word	gText_MonsAppealDidNotGoWell3
	.word	gText_MonsAppealWentSlightlyWell
	.word	gText_MonsAppealWentPrettyWell
	.word	gText_MonsAppealWentExcellently
	.word	gText_MonsAppealWasDud
	.word	gText_MonsAppealDidNotWorkVeryWell
	.word	gText_MonsAppealWentSlightlyWell2
	.word	gText_MonsAppealWentPrettyWell2
	.word	gText_MonsAppealWentVeryWell
	.word	gText_MonsAppealWentExcellently2
	.word	gText_SameTypeAsOneBeforeGood
	.word	gText_NotSameTypeAsOneBeforeGood
	.word	gText_StoodOutMuchMoreThanMonBefore
	.word	gText_DidntDoAsWellAsMonBefore
	.word	gText_MonsConditionRoseAboveUsual
	.word	gText_MonsHotStatusMadeGreatAppeal
	.word	gText_MovedUpInLineForNextAppeal
	.word	gText_MovedBackInLineForNextAppeal
	.word	gText_ScrambledUpOrderForNextTurn
	.word	gText_JudgeLookedAtMonExpectantly
	.word	gText_AppealComboWentOverWell
	.word	gText_AppealComboWentOverVeryWell
	.word	gText_AppealComboWentOverExcellently
	.word	gText_MonManagedToAvertGaze
	.word	gText_MonManagedToAvoidSeeingIt
	.word	gText_MonIsntFazedByThatSortOfThing
	.word	gText_MonBecameALittleDistracted
	.word	gText_TriedToStartleOtherPokemon
	.word	gText_MonLookedDownOutOfDistraction
	.word	gText_MonTurnedBackOutOfDistraction
	.word	gText_MonCouldntHelpUtteringCry
	.word	gText_MonCouldntHelpLeapingUp
	.word	gText_MonTrippedOutOfDistraction
	.word	gText_ButItMessedUp2
	.word	gText_ButItFailedToMakeTargetNervous
	.word	gText_ButItFailedToMakeAnyoneNervous
	.word	gText_ButItWasIgnored
	.word	gText_CouldntImproveItsCondition
	.word	gText_BadConditionResultedInWeakAppeal
	.word	gText_MonWasUnaffected
	.word	gText_AttractedCrowdsAttention
	.size	 sAppealResultTexts,248
	.align	2, 0
	.type	 sContestConditions,object
sContestConditions:
	.word	gText_Contest_Coolness
	.word	gText_Contest_Beauty
	.word	gText_Contest_Cuteness
	.word	gText_Contest_Smartness
	.word	gText_Contest_Toughness
	.size	 sContestConditions,20
	.align	2, 0
	.type	 sInvalidContestMoveNames,object
sInvalidContestMoveNames:
	.word	gText_CoolMove
	.word	gText_BeautyMove
	.word	gText_CuteMove
	.word	gText_SmartMove
	.word	gText_ToughMove
	.word	gText_3QuestionMarks
	.size	 sInvalidContestMoveNames,24
	.align	2, 0
	.type	 sContestBgTemplates,object
	.size	 sContestBgTemplates,16
sContestBgTemplates:
	.byte	0x80
	.byte	0x5
	.byte	0x0
	.space	1
	.byte	0xe9
	.byte	0x15
	.byte	0x0
	.space	1
	.byte	0xc2
	.byte	0x5
	.byte	0x0
	.space	1
	.byte	0xa3
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sContestWindowTemplates,object
sContestWindowTemplates:
	.byte	0x0
	.byte	0x12
	.byte	0x0
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x200
	.byte	0x0
	.byte	0x12
	.byte	0x5
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x218
	.byte	0x0
	.byte	0x12
	.byte	0xa
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x230
	.byte	0x0
	.byte	0x12
	.byte	0xf
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x248
	.byte	0x0
	.byte	0x1
	.byte	0xf
	.byte	0x11
	.byte	0x4
	.byte	0xf
	.short	0x260
	.byte	0x0
	.byte	0x1
	.byte	0x1f
	.byte	0x9
	.byte	0x2
	.byte	0xf
	.short	0x2a4
	.byte	0x0
	.byte	0x1
	.byte	0x21
	.byte	0x9
	.byte	0x2
	.byte	0xf
	.short	0x2b6
	.byte	0x0
	.byte	0x1
	.byte	0x23
	.byte	0x9
	.byte	0x2
	.byte	0xf
	.short	0x2c8
	.byte	0x0
	.byte	0x1
	.byte	0x25
	.byte	0x9
	.byte	0x2
	.byte	0xf
	.short	0x2da
	.byte	0x0
	.byte	0x10
	.byte	0x1f
	.byte	0x1
	.byte	0x2
	.byte	0xf
	.short	0x2ec
	.byte	0x0
	.byte	0xb
	.byte	0x23
	.byte	0x12
	.byte	0x4
	.byte	0xf
	.short	0x2ee
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sContestWindowTemplates,96
	.globl	gUnknown_08587FA4
	.align	2, 0
	.type	 gUnknown_08587FA4,object
gUnknown_08587FA4:
	.word	0x0
	.word	0xffff
	.short	0x151
	.byte	0x2
	.byte	0xbf
	.byte	0xc6
	.byte	0xbf
	.byte	0xbd
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	3
	.byte	0xbf
	.byte	0xd4
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	3
	.byte	0x0
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x171
	.byte	0x0
	.byte	0xce
	.byte	0xcc
	.byte	0xc9
	.byte	0xca
	.byte	0xc9
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xc6
	.byte	0xc6
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0x2
	.space	1
	.word	0x0
	.word	0xffff
	.short	0xb2
	.byte	0x1
	.byte	0xce
	.byte	0xcf
	.byte	0xd2
	.byte	0xbb
	.byte	0xff
	.space	6
	.byte	0xc4
	.byte	0xcf
	.byte	0xc6
	.byte	0xc3
	.byte	0xbf
	.byte	0xce
	.byte	0xff
	.space	1
	.byte	0x0
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x161
	.byte	0x4
	.byte	0xca
	.byte	0xcf
	.byte	0xc6
	.byte	0xcd
	.byte	0xbf
	.byte	0xff
	.space	5
	.byte	0xbc
	.byte	0xbb
	.byte	0xc3
	.byte	0xc6
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0x3
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x179
	.byte	0x3
	.byte	0xcd
	.byte	0xc2
	.byte	0xcf
	.byte	0xca
	.byte	0xcf
	.byte	0xca
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xbf
	.byte	0xc6
	.byte	0xbb
	.byte	0xc8
	.byte	0xd3
	.byte	0xff
	.space	1
	.byte	0x1
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x17c
	.byte	0x0
	.byte	0xc1
	.byte	0xc9
	.byte	0xc9
	.byte	0xd4
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	4
	.byte	0xc2
	.byte	0xbb
	.byte	0xc8
	.byte	0xbb
	.byte	0xff
	.space	3
	.byte	0x2
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x173
	.byte	0x1
	.byte	0xc6
	.byte	0xc9
	.byte	0xcf
	.byte	0xbe
	.byte	0xbf
	.byte	0xbe
	.byte	0xff
	.space	4
	.byte	0xbc
	.byte	0xcc
	.byte	0xd3
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xff
	.space	1
	.byte	0x2
	.space	1
	.word	0x0
	.word	0xffff
	.short	0x13c
	.byte	0x2
	.byte	0xc5
	.byte	0xc3
	.byte	0xce
	.byte	0xcd
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xc9
	.byte	0xc7
	.byte	0xbb
	.byte	0xcc
	.byte	0xff
	.space	3
	.byte	0x3
	.space	1
	.size	 gUnknown_08587FA4,256
	.globl	gContestOpponents
	.align	2, 0
	.type	 gContestOpponents,object
	.size	 gContestOpponents,6144
gContestOpponents:
	.short	0x11e
	.byte	0xca
	.byte	0xc9
	.byte	0xc9
	.byte	0xbd
	.byte	0xc2
	.byte	0xd3
	.byte	0xff
	.space	4
	.byte	0xc4
	.byte	0xc3
	.byte	0xc7
	.byte	0xc7
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0x7
	.space	2
	.word	0xc000fff
	.byte	0x44
	.space	1
	.short	0x2e
	.short	0x2c
	.short	0x24
	.short	0x150
	.byte	0xa
	.byte	0x4
	.byte	0xa
	.byte	0x3
	.byte	0x4
	.byte	0x32
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x183
	.byte	0xc7
	.byte	0xcf
	.byte	0xcd
	.byte	0xc3
	.byte	0xc6
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.space	3
	.byte	0xbf
	.byte	0xbe
	.byte	0xc3
	.byte	0xce
	.byte	0xc2
	.byte	0xff
	.space	2
	.byte	0x8
	.space	2
	.word	-0x7dfff001
	.byte	0x10
	.space	1
	.short	0x9c
	.short	0x107
	.short	0x21
	.short	0x157
	.byte	0xa
	.byte	0xa
	.byte	0x6
	.byte	0x1
	.byte	0x2
	.byte	0x3c
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x126
	.byte	0xbe
	.byte	0xcf
	.byte	0xcd
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	4
	.byte	0xbf
	.byte	0xd0
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	3
	.byte	0xb
	.space	2
	.word	0x21000fff
	.byte	0x8
	.space	1
	.short	0x13e
	.short	0xec
	.short	0x71
	.short	0x10
	.byte	0x2
	.byte	0xa
	.byte	0xa
	.byte	0xc
	.byte	0x4
	.byte	0x46
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x12a
	.byte	0xbe
	.byte	0xc9
	.byte	0xce
	.byte	0xcd
	.byte	0xff
	.space	6
	.byte	0xc5
	.byte	0xbf
	.byte	0xc6
	.byte	0xcd
	.byte	0xbf
	.byte	0xd3
	.byte	0xff
	.space	1
	.byte	0x10
	.space	2
	.word	0x20800fff
	.byte	0x60
	.space	1
	.short	0x75
	.short	0xeb
	.short	0x14b
	.short	0x4a
	.byte	0x3
	.byte	0x3
	.byte	0x5
	.byte	0x2
	.byte	0x7
	.byte	0x50
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x130
	.byte	0xce
	.byte	0xbb
	.byte	0xce
	.byte	0xbb
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xc7
	.byte	0xbb
	.byte	0xbe
	.byte	0xc3
	.byte	0xcd
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.byte	0x12
	.space	2
	.word	-0x7fbff001
	.byte	0x4
	.space	1
	.short	0x11
	.short	0x61
	.short	0x14c
	.short	0x2d
	.byte	0x1
	.byte	0x3
	.byte	0x3
	.byte	0x5
	.byte	0x4
	.byte	0x5a
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x12d
	.byte	0xc8
	.byte	0xc3
	.byte	0xc8
	.byte	0xbe
	.byte	0xbb
	.byte	0xff
	.space	5
	.byte	0xcc
	.byte	0xbb
	.byte	0xd3
	.byte	0xc7
	.byte	0xc9
	.byte	0xc8
	.byte	0xbe
	.byte	0xff
	.byte	0x2c
	.space	2
	.word	0x10200fff
	.byte	0x20
	.space	1
	.short	0x8d
	.short	0xce
	.short	0x9a
	.short	0xaa
	.byte	0x5
	.byte	0x2
	.byte	0xa
	.byte	0x7
	.byte	0x8
	.byte	0x64
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x132
	.byte	0xcd
	.byte	0xc7
	.byte	0xc3
	.byte	0xcd
	.byte	0xc2
	.byte	0xff
	.space	5
	.byte	0xc1
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xff
	.space	2
	.byte	0x23
	.space	2
	.word	0x20100fff
	.byte	0x20
	.space	1
	.short	0x4e
	.short	0x49
	.short	0x48
	.short	0xd5
	.byte	0x3
	.byte	0x3
	.byte	0xa
	.byte	0x2
	.byte	0x2
	.byte	0x32
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x155
	.byte	0xcd
	.byte	0xc6
	.byte	0xbf
	.byte	0xbb
	.byte	0xc6
	.byte	0xff
	.space	5
	.byte	0xca
	.byte	0xbb
	.byte	0xc3
	.byte	0xc1
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0x1a
	.space	2
	.word	0x8080fff
	.byte	0x18
	.space	1
	.short	0x3e
	.short	0x37
	.short	0x2d
	.short	0x13d
	.byte	0x3
	.byte	0x5
	.byte	0x1
	.byte	0xa
	.byte	0xa
	.byte	0x3c
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x16c
	.byte	0xcd
	.byte	0xc6
	.byte	0xc9
	.byte	0xc5
	.byte	0xce
	.byte	0xc2
	.byte	0xff
	.space	4
	.byte	0xbb
	.byte	0xc6
	.byte	0xbf
	.byte	0xbd
	.byte	0xff
	.space	3
	.byte	0x1f
	.space	2
	.word	0x40040fff
	.byte	0x58
	.space	1
	.short	0x46
	.short	0x44
	.short	0x119
	.short	0xe3
	.byte	0xa
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x12
	.byte	0x46
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x172
	.byte	0xd1
	.byte	0xc2
	.byte	0xc3
	.byte	0xcc
	.byte	0xc3
	.byte	0xcd
	.byte	0xff
	.space	4
	.byte	0xcd
	.byte	0xd3
	.byte	0xbe
	.byte	0xc8
	.byte	0xbf
	.byte	0xd3
	.byte	0xff
	.space	1
	.byte	0x2f
	.space	2
	.word	-0x7ffdf001
	.byte	0x24
	.space	1
	.short	0x136
	.short	0x67
	.short	0xfd
	.short	0x130
	.byte	0x2
	.byte	0x2
	.byte	0x7
	.byte	0x2
	.byte	0x7
	.byte	0x50
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x14f
	.byte	0xc7
	.byte	0xbb
	.byte	0xc2
	.byte	0xc3
	.byte	0xce
	.byte	0xbb
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xc9
	.byte	0xcc
	.byte	0xcc
	.byte	0xc3
	.byte	0xcd
	.byte	0xff
	.space	1
	.byte	0x26
	.space	2
	.word	0x8010fff
	.byte	0x44
	.space	1
	.short	0x45
	.short	0xe9
	.short	0x21
	.short	0xb3
	.byte	0x9
	.byte	0x1
	.byte	0x1
	.byte	0x8
	.byte	0x1
	.byte	0x5a
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x17e
	.byte	0xcc
	.byte	0xc9
	.byte	0xc8
	.byte	0xbb
	.byte	0xcc
	.byte	0xff
	.space	5
	.byte	0xc7
	.byte	0xbb
	.byte	0xcc
	.byte	0xc3
	.byte	0xbb
	.byte	0xc2
	.byte	0xff
	.space	1
	.byte	0xa
	.space	2
	.word	0x8008fff
	.byte	0x44
	.space	1
	.short	0xe8
	.short	0x14e
	.short	0x1d
	.short	0x24
	.byte	0x5
	.byte	0xa
	.byte	0x2
	.byte	0xa
	.byte	0x2
	.byte	0x64
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xa9
	.byte	0xbc
	.byte	0xbb
	.byte	0xce
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	5
	.byte	0xcc
	.byte	0xcf
	.byte	0xcd
	.byte	0xcd
	.byte	0xbf
	.byte	0xc6
	.byte	0xc6
	.byte	0xff
	.byte	0x21
	.space	2
	.word	-0x6fffb001
	.byte	0x38
	.space	1
	.short	0x72
	.short	0xd4
	.short	0x6d
	.short	0x8d
	.byte	0x4
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0xa
	.byte	0x32
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x16f
	.byte	0xc1
	.byte	0xcf
	.byte	0xc6
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	5
	.byte	0xc7
	.byte	0xbf
	.byte	0xc6
	.byte	0xbb
	.byte	0xc8
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.byte	0x6
	.space	2
	.word	0x40002fff
	.byte	0x10
	.space	1
	.short	0x7c
	.short	0x85
	.short	0x5c
	.short	0x119
	.byte	0x1
	.byte	0xa
	.byte	0x1
	.byte	0xa
	.byte	0x5
	.byte	0x3c
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x152
	.byte	0xcc
	.byte	0xc3
	.byte	0xc5
	.byte	0xbf
	.byte	0xc6
	.byte	0xbf
	.byte	0xbd
	.byte	0xff
	.space	3
	.byte	0xbd
	.byte	0xc2
	.byte	0xbb
	.byte	0xc8
	.byte	0xbd
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xf
	.space	2
	.word	-0x7fffe001
	.byte	0xc
	.space	1
	.short	0xd1
	.short	0x56
	.short	0x57
	.short	0x2e
	.byte	0x14
	.byte	0xa
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x46
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x1
	.byte	0xbc
	.byte	0xcf
	.byte	0xc6
	.byte	0xbc
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xc1
	.byte	0xbb
	.byte	0xce
	.byte	0xc2
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0x14
	.space	2
	.word	0xc000fff
	.byte	0x30
	.space	1
	.short	0x2d
	.short	0x49
	.short	0x21
	.short	0xe6
	.byte	0x5
	.byte	0x3
	.byte	0xa
	.byte	0xa
	.byte	0x4
	.byte	0x32
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xc
	.byte	0xc0
	.byte	0xcf
	.byte	0xce
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0xbc
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbc
	.byte	0xbf
	.byte	0xbb
	.byte	0xcf
	.byte	0xff
	.space	3
	.byte	0x28
	.space	2
	.word	-0x7dfff001
	.byte	0x28
	.space	1
	.short	0x30
	.short	0x12
	.short	0x13e
	.short	0xdb
	.byte	0x3
	.byte	0xa
	.byte	0x2
	.byte	0xa
	.byte	0x4
	.byte	0x3c
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x11
	.byte	0xca
	.byte	0xc3
	.byte	0xbe
	.byte	0xbf
	.byte	0xc9
	.byte	0xce
	.byte	0xff
	.space	4
	.byte	0xc5
	.byte	0xbb
	.byte	0xd3
	.byte	0xff
	.space	4
	.byte	0x22
	.space	2
	.word	0x21000fff
	.byte	0xc
	.space	1
	.short	0x77
	.short	0x62
	.short	0x14c
	.short	0x129
	.byte	0xa
	.byte	0x8
	.byte	0x4
	.byte	0x2
	.byte	0x3
	.byte	0x46
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x32
	.byte	0xbe
	.byte	0xc3
	.byte	0xc1
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xbb
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.space	3
	.byte	0x37
	.space	2
	.word	0x20800fff
	.byte	0x60
	.space	1
	.short	0x5b
	.short	0x59
	.short	0x5a
	.short	0xde
	.byte	0x4
	.byte	0x2
	.byte	0x3
	.byte	0x5
	.byte	0xa
	.byte	0x50
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x3c
	.byte	0xd1
	.byte	0xbb
	.byte	0xc1
	.byte	0xc3
	.byte	0xc6
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xbb
	.byte	0xc3
	.byte	0xce
	.byte	0xc6
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.byte	0x35
	.space	2
	.word	-0x7fbff001
	.byte	0x48
	.space	1
	.short	0x38
	.short	0xf0
	.short	0x22
	.short	0x3a
	.byte	0x2
	.byte	0xa
	.byte	0x5
	.byte	0x3
	.byte	0xa
	.byte	0x5a
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x9e
	.byte	0xce
	.byte	0xc9
	.byte	0xce
	.byte	0xbe
	.byte	0xc3
	.byte	0xc6
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xc9
	.byte	0xc6
	.byte	0xbc
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0x5
	.space	2
	.word	0x10200fff
	.byte	0xc
	.space	1
	.short	0x63
	.short	0x67
	.short	0x39
	.short	0x3b
	.byte	0x6
	.byte	0xa
	.byte	0x2
	.byte	0x1
	.byte	0x5
	.byte	0x64
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xa5
	.byte	0xbc
	.byte	0xbb
	.byte	0xc6
	.byte	0xbf
	.byte	0xbe
	.byte	0xd3
	.byte	0xff
	.space	4
	.byte	0xc5
	.byte	0xd3
	.byte	0xc6
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0x2d
	.space	2
	.word	0x20100fff
	.byte	0x14
	.space	1
	.short	0xe2
	.short	0x61
	.short	0x81
	.short	0xd5
	.byte	0x8
	.byte	0x6
	.byte	0x8
	.byte	0x6
	.byte	0x2
	.byte	0x5a
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xe1
	.byte	0xbc
	.byte	0xc3
	.byte	0xcc
	.byte	0xbe
	.byte	0xc6
	.byte	0xd3
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xc3
	.byte	0xbb
	.byte	0xc7
	.byte	0xff
	.space	3
	.byte	0x42
	.space	2
	.word	0x8080fff
	.byte	0x70
	.space	1
	.short	0xd9
	.short	0x107
	.short	0x108
	.short	0xd8
	.byte	0x4
	.byte	0x3
	.byte	0xa
	.byte	0x5
	.byte	0x3
	.byte	0x50
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xf6
	.byte	0xce
	.byte	0xbb
	.byte	0xcc
	.byte	0xd0
	.byte	0xc3
	.byte	0xce
	.byte	0xbb
	.byte	0xcc
	.byte	0xff
	.space	2
	.byte	0xc7
	.byte	0xc3
	.byte	0xc6
	.byte	0xc9
	.byte	0xff
	.space	3
	.byte	0x27
	.space	2
	.word	0x40040fff
	.byte	0x40
	.space	1
	.short	0x25
	.short	0x103
	.short	0xf2
	.short	0x5b
	.byte	0x8
	.byte	0x5
	.byte	0x5
	.byte	0x8
	.byte	0xa
	.byte	0x46
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x16b
	.byte	0xcc
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.space	5
	.byte	0xc5
	.byte	0xbb
	.byte	0xcc
	.byte	0xc3
	.byte	0xc8
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0x20
	.space	2
	.word	0x24000fff
	.byte	0x29
	.space	1
	.short	0x50
	.short	0x159
	.short	0x140
	.short	0x113
	.byte	0x32
	.byte	0xf
	.byte	0x4b
	.byte	0xa
	.byte	0x14
	.byte	0x64
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x55
	.byte	0xbe
	.byte	0xcf
	.byte	0xc9
	.byte	0xbe
	.byte	0xc9
	.byte	0xff
	.space	5
	.byte	0xbc
	.byte	0xc9
	.byte	0xbc
	.byte	0xbc
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0x33
	.space	2
	.word	-0x7dfff001
	.byte	0x7d
	.space	1
	.short	0x40
	.short	0x1f
	.short	0xd8
	.short	0x2d
	.byte	0xf
	.byte	0x15
	.byte	0xf
	.byte	0x55
	.byte	0x23
	.byte	0x6e
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x14c
	.byte	0xca
	.byte	0xc3
	.byte	0xc8
	.byte	0xbd
	.byte	0xc2
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	3
	.byte	0xbd
	.byte	0xc6
	.byte	0xbb
	.byte	0xc3
	.byte	0xcc
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0x8
	.space	2
	.word	-0x7efff001
	.byte	0x71
	.space	1
	.short	0x2c
	.short	0x1c
	.short	0x5b
	.short	0xb9
	.byte	0x4b
	.byte	0x19
	.byte	0x19
	.byte	0xa
	.byte	0x19
	.byte	0x78
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x158
	.byte	0xc8
	.byte	0xbb
	.byte	0xbd
	.byte	0xbb
	.byte	0xbd
	.byte	0xff
	.space	5
	.byte	0xd1
	.byte	0xc3
	.byte	0xc6
	.byte	0xc6
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xb
	.space	2
	.word	-0x7f7ff001
	.byte	0x25
	.space	1
	.short	0xbf
	.short	0x2b
	.short	0x28
	.short	0x1c
	.byte	0xa
	.byte	0x1e
	.byte	0x19
	.byte	0x41
	.byte	0x19
	.byte	0x82
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x1c
	.byte	0xcd
	.byte	0xc2
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xbe
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xbb
	.byte	0xcd
	.byte	0xcd
	.byte	0xc3
	.byte	0xbe
	.byte	0xd3
	.byte	0xff
	.byte	0x12
	.space	2
	.word	0x10400fff
	.byte	0x45
	.space	1
	.short	0xa3
	.short	0x6f
	.short	0x81
	.short	0x9a
	.byte	0x1e
	.byte	0x5a
	.byte	0x1e
	.byte	0xa
	.byte	0x64
	.byte	0x8c
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x13e
	.byte	0xce
	.byte	0xc9
	.byte	0xd3
	.byte	0xbc
	.byte	0xbb
	.byte	0xc6
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xc9
	.byte	0xcc
	.byte	0xc1
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0x2c
	.space	2
	.word	0x8200fff
	.byte	0x29
	.space	1
	.short	0x78
	.short	0x13d
	.short	0x3c
	.short	0x5d
	.byte	0x32
	.byte	0x28
	.byte	0xa
	.byte	0x23
	.byte	0x23
	.byte	0x96
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x165
	.byte	0xbd
	.byte	0xc2
	.byte	0xbb
	.byte	0xc7
	.byte	0xbd
	.byte	0xc2
	.byte	0xbb
	.byte	0xc7
	.byte	0xff
	.space	2
	.byte	0xcd
	.byte	0xcf
	.byte	0xc7
	.byte	0xc7
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	1
	.byte	0x1a
	.space	2
	.word	0x10100fff
	.byte	0x4d
	.space	1
	.short	0xb3
	.short	0x9
	.short	0x7
	.short	0x8
	.byte	0x28
	.byte	0x14
	.byte	0x28
	.byte	0x28
	.byte	0x28
	.byte	0x64
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x134
	.byte	0xcd
	.byte	0xca
	.byte	0xc3
	.byte	0xc8
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xc3
	.byte	0xc6
	.byte	0xbf
	.byte	0xcd
	.byte	0xff
	.space	2
	.byte	0x1f
	.space	2
	.word	-0x7ff7f001
	.byte	0x31
	.space	1
	.short	0x12a
	.short	0xf4
	.short	0x5f
	.short	0xfd
	.byte	0x19
	.byte	0x4b
	.byte	0x19
	.byte	0xa
	.byte	0x19
	.byte	0x6e
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x166
	.byte	0xcd
	.byte	0xd1
	.byte	0xbb
	.byte	0xbc
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xcf
	.byte	0xbe
	.byte	0xcc
	.byte	0xbf
	.byte	0xd3
	.byte	0xff
	.space	1
	.byte	0x2f
	.space	2
	.word	-0x5ffbf001
	.byte	0x29
	.space	1
	.short	0x77
	.short	0xc3
	.short	0xdb
	.short	0x36
	.byte	0x1e
	.byte	0x1e
	.byte	0x28
	.byte	0x1e
	.byte	0x19
	.byte	0x78
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x15f
	.byte	0xca
	.byte	0xc9
	.byte	0xc3
	.byte	0xc8
	.byte	0xc5
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xd0
	.byte	0xbf
	.byte	0xcc
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0x26
	.space	2
	.word	-0x7ffdf001
	.byte	0x31
	.space	1
	.short	0x96
	.short	0x6d
	.short	0xad
	.short	0x9c
	.byte	0x28
	.byte	0xa
	.byte	0x1e
	.byte	0x28
	.byte	0x1e
	.byte	0x82
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x13d
	.byte	0xc5
	.byte	0xbf
	.byte	0xbd
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xcc
	.byte	0xc3
	.byte	0xbb
	.byte	0xc8
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0xa
	.space	2
	.word	-0x7ffef001
	.byte	0x61
	.space	1
	.short	0xa8
	.short	0x67
	.short	0xf6
	.short	0x14
	.byte	0xa
	.byte	0xa
	.byte	0x28
	.byte	0x4b
	.byte	0x23
	.byte	0x8c
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x76
	.byte	0xc1
	.byte	0xc9
	.byte	0xc6
	.byte	0xbe
	.byte	0xbf
	.byte	0xc8
	.byte	0xff
	.space	4
	.byte	0xbb
	.byte	0xcd
	.byte	0xc2
	.byte	0xce
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0x21
	.space	2
	.word	-0x7fff7001
	.byte	0xd
	.space	1
	.short	0x1e
	.short	0x1f
	.short	0x20
	.short	0x27
	.byte	0x46
	.byte	0x1e
	.byte	0x5
	.byte	0x1e
	.byte	0x19
	.byte	0x96
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x143
	.byte	0xbc
	.byte	0xc9
	.byte	0xbc
	.byte	0xc9
	.byte	0xbb
	.byte	0xbd
	.byte	0xc2
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xbb
	.byte	0xc8
	.byte	0xbe
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0x6
	.space	2
	.word	-0x7fffb001
	.byte	0x71
	.space	1
	.short	0x12c
	.short	0x15a
	.short	0x59
	.short	0xf8
	.byte	0x2d
	.byte	0x2d
	.byte	0x3c
	.byte	0x19
	.byte	0xf
	.byte	0x64
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xe3
	.byte	0xbd
	.byte	0xc9
	.byte	0xcc
	.byte	0xca
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xbb
	.byte	0xcc
	.byte	0xcd
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0x23
	.space	2
	.word	0x8002fff
	.byte	0x4d
	.space	1
	.short	0x81
	.short	0x68
	.short	0x61
	.short	0xf
	.byte	0x28
	.byte	0x1e
	.byte	0x19
	.byte	0x3c
	.byte	0x14
	.byte	0x6e
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x127
	.byte	0xce
	.byte	0xbb
	.byte	0xbe
	.byte	0xc9
	.byte	0xff
	.space	6
	.byte	0xc5
	.byte	0xbb
	.byte	0xce
	.byte	0xcc
	.byte	0xc3
	.byte	0xc8
	.byte	0xbb
	.byte	0xff
	.byte	0x10
	.space	2
	.word	0x8001fff
	.byte	0x39
	.space	1
	.short	0x136
	.short	0x2d
	.short	0xf0
	.short	0x160
	.byte	0xf
	.byte	0xf
	.byte	0x1e
	.byte	0xf
	.byte	0x4b
	.byte	0x78
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x50
	.byte	0xbc
	.byte	0xcc
	.byte	0xc9
	.byte	0xd1
	.byte	0xc6
	.byte	0xc9
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xcf
	.byte	0xc5
	.byte	0xbf
	.byte	0xff
	.space	3
	.byte	0x11
	.space	2
	.word	0xc000fff
	.byte	0x31
	.space	1
	.short	0x119
	.short	0x32
	.short	0x2d
	.short	0x5d
	.byte	0x14
	.byte	0x28
	.byte	0x28
	.byte	0x1e
	.byte	0x14
	.byte	0x64
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x53
	.byte	0xc0
	.byte	0xbf
	.byte	0xce
	.byte	0xbd
	.byte	0xc2
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	3
	.byte	0xcc
	.byte	0xbb
	.byte	0xcf
	.byte	0xc6
	.byte	0xff
	.space	3
	.byte	0x42
	.space	2
	.word	-0x7dfff001
	.byte	0x15
	.space	1
	.short	0x107
	.short	0xd2
	.short	0x13
	.short	0xd8
	.byte	0x28
	.byte	0xa
	.byte	0x28
	.byte	0x14
	.byte	0x14
	.byte	0x6e
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x56
	.byte	0xcd
	.byte	0xbf
	.byte	0xbf
	.byte	0xc6
	.byte	0xbf
	.byte	0xd3
	.byte	0xff
	.space	4
	.byte	0xc4
	.byte	0xbb
	.byte	0xbe
	.byte	0xbb
	.byte	0xff
	.space	3
	.byte	0x14
	.space	2
	.word	0x21000fff
	.byte	0x19
	.space	1
	.short	0xd5
	.short	0x3a
	.short	0xdb
	.short	0x2d
	.byte	0xa
	.byte	0x1e
	.byte	0x28
	.byte	0x14
	.byte	0x14
	.byte	0x78
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x60
	.byte	0xbe
	.byte	0xcc
	.byte	0xc9
	.byte	0xd1
	.byte	0xd4
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	3
	.byte	0xd4
	.byte	0xbf
	.byte	0xbf
	.byte	0xc5
	.byte	0xff
	.space	3
	.byte	0x25
	.space	2
	.word	0x20800fff
	.byte	0x79
	.space	1
	.short	0x32
	.short	0xf8
	.short	0xed
	.short	0xd8
	.byte	0xa
	.byte	0x28
	.byte	0x32
	.byte	0x1e
	.byte	0x2d
	.byte	0x82
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x6b
	.byte	0xc2
	.byte	0xc3
	.byte	0xce
	.byte	0xbf
	.byte	0xc7
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xc3
	.byte	0xbf
	.byte	0xc1
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0x15
	.space	2
	.word	-0x7fbff001
	.byte	0x45
	.space	1
	.short	0x147
	.short	0xc5
	.short	0x117
	.short	0x5
	.byte	0x2d
	.byte	0x14
	.byte	0xa
	.byte	0x14
	.byte	0x2d
	.byte	0x8c
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xf2
	.byte	0xbc
	.byte	0xc6
	.byte	0xc3
	.byte	0xcd
	.byte	0xcd
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xc6
	.byte	0xc3
	.byte	0xd3
	.byte	0xbb
	.byte	0xc2
	.byte	0xff
	.space	1
	.byte	0x55
	.space	2
	.word	0x10200fff
	.byte	0x59
	.space	1
	.short	0x2f
	.short	0x87
	.short	0x79
	.short	0x26
	.byte	0x14
	.byte	0x23
	.byte	0x28
	.byte	0x14
	.byte	0x14
	.byte	0x96
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xef
	.byte	0xc5
	.byte	0xc3
	.byte	0xbe
	.byte	0xc6
	.byte	0xbf
	.byte	0xc5
	.byte	0xff
	.space	4
	.byte	0xc8
	.byte	0xbb
	.byte	0xce
	.byte	0xbb
	.byte	0xc6
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.byte	0x12
	.space	2
	.word	0x20100fff
	.byte	0x15
	.space	1
	.short	0x15f
	.short	0x62
	.short	0x67
	.short	0xd5
	.byte	0x28
	.byte	0xa
	.byte	0x28
	.byte	0x19
	.byte	0x19
	.byte	0x8c
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xd1
	.byte	0xcd
	.byte	0xc8
	.byte	0xcf
	.byte	0xbc
	.byte	0xbc
	.byte	0xc3
	.byte	0xc8
	.byte	0xcd
	.byte	0xff
	.space	2
	.byte	0xbe
	.byte	0xbf
	.byte	0xd0
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0x30
	.space	2
	.word	0x8080fff
	.byte	0x51
	.space	1
	.short	0xb8
	.short	0x10d
	.short	0x27
	.short	0x2c
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x14
	.byte	0x82
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xc8
	.byte	0xbe
	.byte	0xcc
	.byte	0xbf
	.byte	0xbb
	.byte	0xd0
	.byte	0xc3
	.byte	0xcd
	.byte	0xff
	.space	3
	.byte	0xce
	.byte	0xd3
	.byte	0xc6
	.byte	0xc9
	.byte	0xcc
	.byte	0xff
	.space	2
	.byte	0x28
	.space	2
	.word	0x40040fff
	.byte	0x29
	.space	1
	.short	0xc3
	.short	0xd4
	.short	0x6d
	.short	0xdc
	.byte	0xa
	.byte	0x23
	.byte	0xa
	.byte	0x2d
	.byte	0x14
	.byte	0x78
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x17f
	.byte	0xc6
	.byte	0xbb
	.byte	0xc3
	.byte	0xcc
	.byte	0xc8
	.byte	0xff
	.space	5
	.byte	0xcc
	.byte	0xc9
	.byte	0xc8
	.byte	0xc8
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0x37
	.space	2
	.word	-0x7bfff001
	.byte	0x62
	.space	1
	.short	0x13f
	.short	0xe8
	.short	0x6a
	.short	0x24
	.byte	0x1e
	.byte	0x32
	.byte	0x23
	.byte	0x64
	.byte	0x5a
	.byte	0xc8
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x12c
	.byte	0xcd
	.byte	0xc2
	.byte	0xc3
	.byte	0xc0
	.byte	0xce
	.byte	0xd3
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xc6
	.byte	0xbb
	.byte	0xcf
	.byte	0xbe
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.byte	0x8
	.space	2
	.word	-0x7dfff001
	.byte	0xe
	.space	1
	.short	0x4a
	.short	0xd
	.short	0x99
	.short	0x146
	.byte	0x4b
	.byte	0x4b
	.byte	0x41
	.byte	0x23
	.byte	0x46
	.byte	0xd2
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x12e
	.byte	0xc8
	.byte	0xc3
	.byte	0xc8
	.byte	0xbb
	.byte	0xcd
	.byte	0xff
	.space	5
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xbb
	.byte	0xcd
	.byte	0xff
	.space	2
	.byte	0xb
	.space	2
	.word	-0x7efff001
	.byte	0x72
	.space	1
	.short	0x67
	.short	0x9a
	.short	0x1c
	.short	0xe2
	.byte	0x1e
	.byte	0x32
	.byte	0x5f
	.byte	0x46
	.byte	0x46
	.byte	0xdc
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x131
	.byte	0xd1
	.byte	0xbf
	.byte	0xc6
	.byte	0xc9
	.byte	0xd1
	.byte	0xff
	.space	5
	.byte	0xc4
	.byte	0xbb
	.byte	0xbe
	.byte	0xbf
	.byte	0xff
	.space	3
	.byte	0x12
	.space	2
	.word	-0x7f7ff001
	.byte	0xe
	.space	1
	.short	0x61
	.short	0x14c
	.short	0x11
	.short	0x13
	.byte	0x41
	.byte	0x55
	.byte	0x23
	.byte	0x4b
	.byte	0x28
	.byte	0xe6
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x11f
	.byte	0xd3
	.byte	0xbf
	.byte	0xc8
	.byte	0xbb
	.byte	0xff
	.space	6
	.byte	0xc0
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xbd
	.byte	0xc3
	.byte	0xcd
	.byte	0xff
	.byte	0x2c
	.space	2
	.word	-0x7fbff001
	.byte	0x62
	.space	1
	.short	0x10d
	.short	0xa8
	.short	0x13c
	.short	0x24
	.byte	0x28
	.byte	0x50
	.byte	0x23
	.byte	0x46
	.byte	0x46
	.byte	0xf0
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x124
	.byte	0xce
	.byte	0xc3
	.byte	0xc0
	.byte	0xc6
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xbb
	.byte	0xc6
	.byte	0xc3
	.byte	0xcd
	.byte	0xc2
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0x1a
	.space	2
	.word	-0x7fdff001
	.byte	0x2a
	.space	1
	.short	0xea
	.short	0x13e
	.short	0x4e
	.short	0x122
	.byte	0x28
	.byte	0x46
	.byte	0x19
	.byte	0x50
	.byte	0x64
	.byte	0xfa
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x77
	.byte	0xc5
	.byte	0xc3
	.byte	0xc8
	.byte	0xc1
	.byte	0xcd
	.byte	0xbf
	.byte	0xbb
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xbb
	.byte	0xcf
	.byte	0xc6
	.byte	0xff
	.space	3
	.byte	0x1f
	.space	2
	.word	-0x7feff001
	.byte	0x76
	.space	1
	.short	0xaf
	.short	0x30
	.short	0x1e
	.short	0x1f
	.byte	0x50
	.byte	0x3c
	.byte	0x1e
	.byte	0x46
	.byte	0x5a
	.byte	0xc8
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x181
	.byte	0xbd
	.byte	0xbb
	.byte	0xcd
	.byte	0xce
	.byte	0xbf
	.byte	0xcc
	.byte	0xff
	.space	4
	.byte	0xc0
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xbd
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.byte	0x2f
	.space	2
	.word	-0x7ff7f001
	.byte	0x7e
	.space	1
	.short	0xf1
	.short	0x137
	.short	0xc9
	.short	0xd8
	.byte	0x46
	.byte	0x50
	.byte	0x50
	.byte	0x32
	.byte	0x41
	.byte	0xd2
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x43
	.byte	0xbd
	.byte	0xc2
	.byte	0xc9
	.byte	0xc5
	.byte	0xbf
	.byte	0xc7
	.byte	0xff
	.space	4
	.byte	0xbf
	.byte	0xc7
	.byte	0xc3
	.byte	0xc6
	.byte	0xc3
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0x26
	.space	2
	.word	-0x7ffbf001
	.byte	0x46
	.space	1
	.short	0x45
	.short	0x74
	.short	0x2
	.short	0xb8
	.byte	0x46
	.byte	0x55
	.byte	0x19
	.byte	0x3c
	.byte	0x32
	.byte	0xdc
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x128
	.byte	0xc6
	.byte	0xc9
	.byte	0xc7
	.byte	0xbc
	.byte	0xbf
	.byte	0xff
	.space	5
	.byte	0xc5
	.byte	0xbb
	.byte	0xcc
	.byte	0xc6
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xa
	.space	2
	.word	-0x7ffdf001
	.byte	0x3a
	.space	1
	.short	0xd5
	.short	0x94
	.short	0xfd
	.short	0x2d
	.byte	0x28
	.byte	0x3c
	.byte	0x5a
	.byte	0x2d
	.byte	0x46
	.byte	0xe6
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x17b
	.byte	0xd0
	.byte	0xc3
	.byte	0xca
	.byte	0xbf
	.byte	0xcd
	.byte	0xff
	.space	5
	.byte	0xbe
	.byte	0xbb
	.byte	0xcc
	.byte	0xcc
	.byte	0xd3
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0x21
	.space	2
	.word	-0x7ffef001
	.byte	0x62
	.space	1
	.short	0x131
	.short	0x89
	.short	0x23
	.short	0x67
	.byte	0x23
	.byte	0x32
	.byte	0x5a
	.byte	0x28
	.byte	0x64
	.byte	0xf0
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x139
	.byte	0xc7
	.byte	0xbf
	.byte	0xcc
	.byte	0xbb
	.byte	0xc3
	.byte	0xc6
	.byte	0xff
	.space	4
	.byte	0xcd
	.byte	0xbf
	.byte	0xc6
	.byte	0xbf
	.byte	0xc8
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0x16
	.space	2
	.word	-0x7fff7001
	.byte	0x1a
	.space	1
	.short	0x160
	.short	0x9c
	.short	0x143
	.short	0x96
	.byte	0x1e
	.byte	0x64
	.byte	0x64
	.byte	0x32
	.byte	0x1e
	.byte	0xfa
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x81
	.byte	0xc5
	.byte	0xbb
	.byte	0xcc
	.byte	0xca
	.byte	0xbb
	.byte	0xc1
	.byte	0xff
	.space	4
	.byte	0xc8
	.byte	0xc9
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	3
	.byte	0x23
	.space	2
	.word	-0x7fffb001
	.byte	0x52
	.space	1
	.short	0x21
	.short	0x96
	.short	0xaf
	.short	0x21
	.byte	0x1e
	.byte	0x1e
	.byte	0xa0
	.byte	0x32
	.byte	0xa0
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x15c
	.byte	0xc6
	.byte	0xcf
	.byte	0xc8
	.byte	0xc9
	.byte	0xc8
	.byte	0xbf
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xbb
	.byte	0xbd
	.byte	0xbf
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0x10
	.space	2
	.word	-0x7fffd001
	.byte	0x2a
	.space	1
	.short	0x99
	.short	0xf8
	.short	0x5e
	.short	0x5d
	.byte	0x32
	.byte	0x46
	.byte	0x3c
	.byte	0x46
	.byte	0x32
	.byte	0xd2
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x178
	.byte	0xbb
	.byte	0xbc
	.byte	0xcd
	.byte	0xc9
	.byte	0xff
	.space	6
	.byte	0xbd
	.byte	0xc9
	.byte	0xcc
	.byte	0xbc
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0x27
	.space	2
	.word	-0x7fffe001
	.byte	0xe
	.space	1
	.short	0xc3
	.short	0x102
	.short	0x3f
	.short	0xa3
	.byte	0x5f
	.byte	0x50
	.byte	0x55
	.byte	0x23
	.byte	0x23
	.byte	0xdc
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x67
	.byte	0xbf
	.byte	0xc1
	.byte	0xc1
	.byte	0xcd
	.byte	0xc9
	.byte	0xcc
	.byte	0xff
	.space	4
	.byte	0xc1
	.byte	0xcc
	.byte	0xbb
	.byte	0xbd
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0x20
	.space	2
	.word	0xc000fff
	.byte	0x62
	.space	1
	.short	0x17
	.short	0x5f
	.short	0x79
	.short	0x11d
	.byte	0x28
	.byte	0x32
	.byte	0x3c
	.byte	0x64
	.byte	0x50
	.byte	0xc8
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x68
	.byte	0xbd
	.byte	0xcf
	.byte	0xbc
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xc9
	.byte	0xc6
	.byte	0xce
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0x41
	.space	2
	.word	-0x7dfff001
	.byte	0x52
	.space	1
	.short	0x7d
	.short	0x9b
	.short	0xc6
	.short	0x2d
	.byte	0x28
	.byte	0x23
	.byte	0x55
	.byte	0x23
	.byte	0x64
	.byte	0xd2
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x6a
	.byte	0xc2
	.byte	0xc3
	.byte	0xce
	.byte	0xc7
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	4
	.byte	0xbf
	.byte	0xc6
	.byte	0xc6
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0x16
	.space	2
	.word	0x21000fff
	.byte	0x46
	.space	1
	.short	0xb3
	.short	0x117
	.short	0x74
	.short	0x19
	.byte	0x55
	.byte	0x1e
	.byte	0x19
	.byte	0x32
	.byte	0x64
	.byte	0xdc
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x7
	.byte	0xcd
	.byte	0xcf
	.byte	0xcc
	.byte	0xce
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xbb
	.byte	0xcc
	.byte	0xbd
	.byte	0xcf
	.byte	0xcd
	.byte	0xff
	.space	1
	.byte	0x31
	.space	2
	.word	0x20800fff
	.byte	0x52
	.space	1
	.short	0x27
	.short	0x91
	.short	0x108
	.short	0x6e
	.byte	0x1e
	.byte	0x23
	.byte	0x64
	.byte	0x28
	.byte	0x5f
	.byte	0xe6
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x73
	.byte	0xc5
	.byte	0xc2
	.byte	0xbb
	.byte	0xc8
	.byte	0xc5
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	3
	.byte	0xc5
	.byte	0xc3
	.byte	0xbb
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xe
	.space	2
	.word	-0x7fbff001
	.byte	0x46
	.space	1
	.short	0x5
	.short	0x63
	.short	0x108
	.short	0x27
	.byte	0x64
	.byte	0x32
	.byte	0x1e
	.byte	0x32
	.byte	0x64
	.byte	0xf0
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xcc
	.byte	0xca
	.byte	0xc3
	.byte	0xc8
	.byte	0xc9
	.byte	0xbd
	.byte	0xff
	.space	5
	.byte	0xbc
	.byte	0xcc
	.byte	0xd3
	.byte	0xbd
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0x24
	.space	2
	.word	0x10200fff
	.byte	0x2a
	.space	1
	.short	0x99
	.short	0xbf
	.short	0x71
	.short	0xca
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0x50
	.byte	0xfa
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xce
	.byte	0xbe
	.byte	0xc3
	.byte	0xc6
	.byte	0xce
	.byte	0xc9
	.byte	0xce
	.byte	0xff
	.space	4
	.byte	0xc4
	.byte	0xbb
	.byte	0xc7
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0x22
	.space	2
	.word	0x20100fff
	.byte	0x52
	.space	1
	.short	0xb4
	.short	0x119
	.short	0x6f
	.short	0x24
	.byte	0x28
	.byte	0x23
	.byte	0x64
	.byte	0x28
	.byte	0x6e
	.byte	0xf0
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xe5
	.byte	0xbe
	.byte	0xc9
	.byte	0xc9
	.byte	0xc7
	.byte	0xc9
	.byte	0xc8
	.byte	0xbe
	.byte	0xff
	.space	3
	.byte	0xc4
	.byte	0xc9
	.byte	0xcc
	.byte	0xc1
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0x30
	.space	2
	.word	0x8080fff
	.byte	0xe
	.space	1
	.short	0x2e
	.short	0x35
	.short	0xb9
	.short	0xf1
	.byte	0x64
	.byte	0x64
	.byte	0x1e
	.byte	0x19
	.byte	0x50
	.byte	0xe6
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xf1
	.byte	0xc7
	.byte	0xc3
	.byte	0xc6
	.byte	0xc5
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	4
	.byte	0xbe
	.byte	0xbf
	.byte	0xd0
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0x19
	.space	2
	.word	0x40040fff
	.byte	0x1a
	.space	1
	.short	0xd0
	.short	0xd7
	.short	0x6f
	.short	0x3b
	.byte	0x32
	.byte	0x6e
	.byte	0x64
	.byte	0x23
	.byte	0x28
	.byte	0xdc
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x82
	.byte	0xcc
	.byte	0xbb
	.byte	0xbe
	.byte	0xc9
	.byte	0xcd
	.byte	0xff
	.space	5
	.byte	0xc4
	.byte	0xcf
	.byte	0xcd
	.byte	0xce
	.byte	0xc3
	.byte	0xc8
	.byte	0xbb
	.byte	0xff
	.byte	0x20
	.space	2
	.word	-0x7bfff001
	.byte	0x4f
	.space	1
	.short	0x3f
	.short	0x38
	.short	0xf0
	.short	0x2c
	.byte	0xa0
	.byte	0xc8
	.byte	0x14
	.byte	0x28
	.byte	0xa0
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x173
	.byte	0xc6
	.byte	0xc9
	.byte	0xcf
	.byte	0xbe
	.byte	0xbf
	.byte	0xcc
	.byte	0xbe
	.byte	0xff
	.space	3
	.byte	0xcc
	.byte	0xbb
	.byte	0xc6
	.byte	0xca
	.byte	0xc2
	.byte	0xff
	.space	2
	.byte	0x15
	.space	2
	.word	-0x7dfff001
	.byte	0x47
	.space	1
	.short	0x130
	.short	0x17
	.short	0x2e
	.short	0x150
	.byte	0xaa
	.byte	0x32
	.byte	0x37
	.byte	0x96
	.byte	0xa0
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x13b
	.byte	0xcd
	.byte	0xc3
	.byte	0xce
	.byte	0xce
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xcc
	.byte	0xc9
	.byte	0xcd
	.byte	0xbb
	.byte	0xff
	.space	3
	.byte	0x8
	.space	2
	.word	-0x7efff001
	.byte	0x3b
	.space	1
	.short	0xd5
	.short	0x112
	.short	0xb9
	.short	0x27
	.byte	0x28
	.byte	0xc8
	.byte	0x96
	.byte	0xb9
	.byte	0x3c
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x16e
	.byte	0xcd
	.byte	0xc6
	.byte	0xc3
	.byte	0xc8
	.byte	0xc1
	.byte	0xff
	.space	5
	.byte	0xc5
	.byte	0xbf
	.byte	0xbb
	.byte	0xce
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0xb
	.space	2
	.word	-0x7f7ff001
	.byte	0x73
	.space	1
	.short	0x157
	.short	0x44
	.short	0xe3
	.short	0x12f
	.byte	0x55
	.byte	0x55
	.byte	0xaa
	.byte	0x6e
	.byte	0x96
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x167
	.byte	0xce
	.byte	0xbb
	.byte	0xcc
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.space	5
	.byte	0xc7
	.byte	0xbb
	.byte	0xd3
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0x12
	.space	2
	.word	-0x7fbff001
	.byte	0xf
	.space	1
	.short	0x15d
	.short	0x3f
	.short	0xc3
	.short	0xdb
	.byte	0xaa
	.byte	0x96
	.byte	0x1e
	.byte	0x1e
	.byte	0x5a
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x189
	.byte	0xc6
	.byte	0xc3
	.byte	0xcc
	.byte	0xc5
	.byte	0xc3
	.byte	0xff
	.space	5
	.byte	0xc6
	.byte	0xbb
	.byte	0xc7
	.byte	0xbb
	.byte	0xcc
	.byte	0xff
	.space	2
	.byte	0xf
	.space	2
	.word	-0x7fdff001
	.byte	0x27
	.space	1
	.short	0x15f
	.short	0xf7
	.short	0x11d
	.short	0xd8
	.byte	0xe6
	.byte	0x3c
	.byte	0x3c
	.byte	0xe6
	.byte	0x50
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xb6
	.byte	0xbc
	.byte	0xc6
	.byte	0xc9
	.byte	0xcd
	.byte	0xcd
	.byte	0xc9
	.byte	0xc7
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xcf
	.byte	0xbc
	.byte	0xcc
	.byte	0xbf
	.byte	0xd3
	.byte	0xff
	.space	1
	.byte	0x1a
	.space	2
	.word	-0x7feff001
	.byte	0x3b
	.space	1
	.short	0x50
	.short	0xe6
	.short	0x4e
	.short	0x94
	.byte	0x23
	.byte	0xc8
	.byte	0x96
	.byte	0x82
	.byte	0x28
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x142
	.byte	0xbf
	.byte	0xd3
	.byte	0xbf
	.byte	0xcd
	.byte	0xbb
	.byte	0xbc
	.byte	0xff
	.space	4
	.byte	0xc8
	.byte	0xc3
	.byte	0xc1
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	2
	.byte	0x1f
	.space	2
	.word	-0x7ff7f001
	.byte	0x73
	.space	1
	.short	0xd4
	.short	0xb9
	.short	0x11a
	.short	0x6d
	.byte	0x19
	.byte	0x23
	.byte	0xe6
	.byte	0x96
	.byte	0xa0
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xb1
	.byte	0xcf
	.byte	0xce
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	6
	.byte	0xbd
	.byte	0xbb
	.byte	0xc7
	.byte	0xc3
	.byte	0xc6
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.byte	0x2f
	.space	2
	.word	-0x7ffbf001
	.byte	0x73
	.space	1
	.short	0x65
	.short	0xf8
	.short	0x6d
	.short	0x5e
	.byte	0x23
	.byte	0x23
	.byte	0x96
	.byte	0x82
	.byte	0xaa
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x14b
	.byte	0xca
	.byte	0xbf
	.byte	0xbe
	.byte	0xc9
	.byte	0xcd
	.byte	0xff
	.space	5
	.byte	0xbe
	.byte	0xbf
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	3
	.byte	0x26
	.space	2
	.word	-0x7ffdf001
	.byte	0x57
	.space	1
	.short	0x61
	.short	0xcf
	.short	0x10d
	.short	0x24
	.byte	0x8c
	.byte	0x46
	.byte	0x8c
	.byte	0x4b
	.byte	0x64
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x145
	.byte	0xc6
	.byte	0xcf
	.byte	0xd0
	.byte	0xc3
	.byte	0xcd
	.byte	0xff
	.space	5
	.byte	0xc4
	.byte	0xbb
	.byte	0xc8
	.byte	0xbf
	.byte	0xc6
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.byte	0xa
	.space	2
	.word	-0x7ffef001
	.byte	0x53
	.space	1
	.short	0xba
	.short	0xd5
	.short	0x24
	.short	0xcc
	.byte	0x32
	.byte	0x64
	.byte	0xdc
	.byte	0x28
	.byte	0xbe
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xd6
	.byte	0xc2
	.byte	0xbf
	.byte	0xcc
	.byte	0xc9
	.byte	0xcd
	.byte	0xcd
	.byte	0xff
	.space	4
	.byte	0xc2
	.byte	0xbf
	.byte	0xbb
	.byte	0xce
	.byte	0xc2
	.byte	0xff
	.space	2
	.byte	0x21
	.space	2
	.word	-0x7fff7001
	.byte	0x47
	.space	1
	.short	0x46
	.short	0xcb
	.short	0xb3
	.short	0x13d
	.byte	0xaa
	.byte	0x46
	.byte	0x6e
	.byte	0xf0
	.byte	0x8c
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x65
	.byte	0xcc
	.byte	0xc9
	.byte	0xbe
	.byte	0xc6
	.byte	0xbf
	.byte	0xbd
	.byte	0xce
	.byte	0xff
	.space	3
	.byte	0xcd
	.byte	0xbb
	.byte	0xcd
	.byte	0xc2
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0x6
	.space	2
	.word	-0x7fffb001
	.byte	0xf
	.space	1
	.short	0x99
	.short	0x71
	.short	0x81
	.short	0x94
	.byte	0xc8
	.byte	0xc8
	.byte	0x1e
	.byte	0x23
	.byte	0x32
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xac
	.byte	0xbd
	.byte	0xc2
	.byte	0xcf
	.byte	0xca
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xc0
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xc5
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.byte	0x23
	.space	2
	.word	-0x7fffd001
	.byte	0x3b
	.space	1
	.short	0xba
	.short	0xd5
	.short	0x9c
	.short	0x27
	.byte	0x19
	.byte	0x96
	.byte	0xb4
	.byte	0x73
	.byte	0x78
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xca
	.byte	0xd1
	.byte	0xc9
	.byte	0xbc
	.byte	0xbf
	.byte	0xce
	.byte	0xff
	.space	5
	.byte	0xc2
	.byte	0xbf
	.byte	0xc6
	.byte	0xbf
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0x10
	.space	2
	.word	-0x7fffe001
	.byte	0x6f
	.space	1
	.short	0x44
	.short	0xf3
	.short	0xdb
	.short	0xc2
	.byte	0x3c
	.byte	0xe6
	.byte	0x32
	.byte	0xdc
	.byte	0xd2
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x5e
	.byte	0xc1
	.byte	0xbb
	.byte	0xcc
	.byte	0xbf
	.byte	0xc8
	.byte	0xff
	.space	5
	.byte	0xbd
	.byte	0xbb
	.byte	0xc7
	.byte	0xc3
	.byte	0xc6
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0x28
	.space	2
	.word	0xc000fff
	.byte	0x47
	.space	1
	.short	0xc2
	.short	0x6d
	.short	0x7a
	.short	0xbc
	.byte	0xc8
	.byte	0x64
	.byte	0x32
	.byte	0x50
	.byte	0xb4
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x89
	.byte	0xc1
	.byte	0xc9
	.byte	0xc8
	.byte	0xca
	.byte	0xc9
	.byte	0xcc
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xbb
	.byte	0xcc
	.byte	0xce
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0x2e
	.space	2
	.word	-0x7dfff001
	.byte	0x7f
	.space	1
	.short	0xb0
	.short	0xa0
	.short	0xd8
	.short	0x116
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0x82
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x95
	.byte	0xbe
	.byte	0xcc
	.byte	0xc3
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	5
	.byte	0xcd
	.byte	0xbf
	.byte	0xcc
	.byte	0xc1
	.byte	0xc3
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0x7
	.space	2
	.word	0x21000fff
	.byte	0x47
	.space	1
	.short	0xc8
	.short	0x15
	.short	0xef
	.short	0x59
	.byte	0x96
	.byte	0x8c
	.byte	0x32
	.byte	0x78
	.byte	0x96
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x34
	.byte	0xc7
	.byte	0xbf
	.byte	0xc9
	.byte	0xd1
	.byte	0xd3
	.byte	0xff
	.space	5
	.byte	0xc5
	.byte	0xbb
	.byte	0xc3
	.byte	0xc6
	.byte	0xbf
	.byte	0xd3
	.byte	0xff
	.space	1
	.byte	0x6
	.space	2
	.word	0x20800fff
	.byte	0x33
	.space	1
	.short	0x2d
	.short	0x10d
	.short	0x6
	.short	0x2c
	.byte	0x7d
	.byte	0x6e
	.byte	0xb4
	.byte	0xaa
	.byte	0x50
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0x7c
	.byte	0xc8
	.byte	0xd3
	.byte	0xd2
	.byte	0xff
	.space	7
	.byte	0xca
	.byte	0xbf
	.byte	0xcc
	.byte	0xc6
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0x2d
	.space	2
	.word	-0x7fbff001
	.byte	0x2b
	.space	1
	.short	0xc3
	.short	0xd4
	.short	0x8e
	.short	0x139
	.byte	0x64
	.byte	0x96
	.byte	0x64
	.byte	0x96
	.byte	0x78
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xaf
	.byte	0xc1
	.byte	0xbf
	.byte	0xca
	.byte	0xc3
	.byte	0xce
	.byte	0xc9
	.byte	0xff
	.space	4
	.byte	0xbd
	.byte	0xc6
	.byte	0xbb
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0x14
	.space	2
	.word	0x10200fff
	.byte	0x13
	.space	1
	.short	0x2d
	.short	0x119
	.short	0xe3
	.short	0x10a
	.byte	0x50
	.byte	0x78
	.byte	0xc8
	.byte	0x78
	.byte	0x50
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xc4
	.byte	0xcd
	.byte	0xca
	.byte	0xbf
	.byte	0xc9
	.byte	0xc8
	.byte	0xff
	.space	5
	.byte	0xc4
	.byte	0xbb
	.byte	0xc5
	.byte	0xc9
	.byte	0xbc
	.byte	0xff
	.space	2
	.byte	0x25
	.space	2
	.word	0x20100fff
	.byte	0xf
	.space	1
	.short	0x81
	.short	0x62
	.short	0xea
	.short	0x27
	.byte	0xb4
	.byte	0x96
	.byte	0x64
	.byte	0x50
	.byte	0x96
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xc7
	.byte	0xcd
	.byte	0xc6
	.byte	0xc9
	.byte	0xd1
	.byte	0xc1
	.byte	0xc9
	.byte	0xff
	.space	4
	.byte	0xce
	.byte	0xcc
	.byte	0xbf
	.byte	0xd3
	.byte	0xff
	.space	3
	.byte	0x31
	.space	2
	.word	0x8080fff
	.byte	0x53
	.space	1
	.short	0x107
	.short	0xae
	.short	0x119
	.short	0x108
	.byte	0x64
	.byte	0x50
	.byte	0xc8
	.byte	0x6e
	.byte	0xaa
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.short	0xd9
	.byte	0xcf
	.byte	0xcc
	.byte	0xcd
	.byte	0xc3
	.byte	0xc8
	.byte	0xc1
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xbb
	.byte	0xc8
	.byte	0xbf
	.byte	0xff
	.space	3
	.byte	0x2c
	.space	2
	.word	0x40040fff
	.byte	0x47
	.space	1
	.short	0x25
	.short	0x14c
	.short	0x139
	.short	0x2b
	.byte	0xb4
	.byte	0x8c
	.byte	0x1e
	.byte	0x50
	.byte	0xbe
	.byte	0xff
	.byte	0x0
	.space	11
	.word	0x0
	.word	0xffff
	.globl	gPostgameContestOpponentFilter
	.type	 gPostgameContestOpponentFilter,object
gPostgameContestOpponentFilter:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.size	 gPostgameContestOpponentFilter,96
	.align	2, 0
	.type	 sUnknown_08589904,object
sUnknown_08589904:
	.word	gBlankGfxCompressed
	.short	0x1000
	.short	0x80e8
	.word	gBlankGfxCompressed
	.short	0x1000
	.short	0x80e9
	.word	gBlankGfxCompressed
	.short	0x1000
	.short	0x80ea
	.word	gBlankGfxCompressed
	.short	0x1000
	.short	0x80eb
	.size	 sUnknown_08589904,32
	.align	2, 0
	.type	 sUnknown_08589924,object
sUnknown_08589924:
	.word	gHeap+0x1a0a4
	.short	0x80e8
	.space	2
	.word	gHeap+0x1a0c4
	.short	0x80e9
	.space	2
	.word	gHeap+0x1a0e4
	.short	0x80ea
	.space	2
	.word	gHeap+0x1a104
	.short	0x80eb
	.space	2
	.size	 sUnknown_08589924,32
	.globl	gOamData_8589944
	.align	2, 0
	.type	 gOamData_8589944,object
	.size	 gOamData_8589944,8
gOamData_8589944:
	.byte	0x0
	.byte	0x7
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.globl	gSpriteAffineAnim_858994C
	.align	2, 0
	.type	 gSpriteAffineAnim_858994C,object
gSpriteAffineAnim_858994C:
	.short	0x100
	.short	0x100
	.byte	0x0
	.byte	0x0
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSpriteAffineAnim_858994C,16
	.globl	gSpriteAffineAnim_858995C
	.align	2, 0
	.type	 gSpriteAffineAnim_858995C,object
gSpriteAffineAnim_858995C:
	.short	0x3
	.short	0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	-0x3
	.short	-0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x3
	.short	0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	-0x3
	.short	-0x3
	.byte	0x0
	.byte	0xf
	.space	2
	.short	0x7fff
	.space	6
	.size	 gSpriteAffineAnim_858995C,40
	.globl	gSpriteAffineAnimTable_8589984
	.align	2, 0
	.type	 gSpriteAffineAnimTable_8589984,object
gSpriteAffineAnimTable_8589984:
	.word	gSpriteAffineAnim_858994C
	.word	gSpriteAffineAnim_858995C
	.size	 gSpriteAffineAnimTable_8589984,8
	.globl	gSpriteTemplate_858998C
	.align	2, 0
	.type	 gSpriteTemplate_858998C,object
gSpriteTemplate_858998C:
	.short	0x80e8
	.short	0x80e8
	.word	gOamData_8589944
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSpriteAffineAnimTable_8589984
	.word	SpriteCallbackDummy
	.short	0x80e9
	.short	0x80e9
	.word	gOamData_8589944
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSpriteAffineAnimTable_8589984
	.word	SpriteCallbackDummy
	.short	0x80ea
	.short	0x80ea
	.word	gOamData_8589944
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSpriteAffineAnimTable_8589984
	.word	SpriteCallbackDummy
	.short	0x80eb
	.short	0x80eb
	.word	gOamData_8589944
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gSpriteAffineAnimTable_8589984
	.word	SpriteCallbackDummy
	.size	 gSpriteTemplate_858998C,96
	.globl	gContestExcitementTable
	.type	 gContestExcitementTable,object
gContestExcitementTable:
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	-0x1
	.byte	-0x1
	.byte	0x0
	.byte	0x1
	.size	 gContestExcitementTable,25
.text
	.align	2, 0
	.type	 TaskDummy1,function
	.thumb_func
TaskDummy1:
	bx	lr
.Lfe1:
	.size	 TaskDummy1,.Lfe1-TaskDummy1
	.align	2, 0
	.globl	ResetLinkContestBoolean
	.type	 ResetLinkContestBoolean,function
	.thumb_func
ResetLinkContestBoolean:
	ldr	r1, .L4
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L5:
	.align	2, 0
.L4:
	.word	gLinkContestFlags
.Lfe2:
	.size	 ResetLinkContestBoolean,.Lfe2-ResetLinkContestBoolean
	.align	2, 0
	.type	 SetupContestGpuRegs,function
	.thumb_func
SetupContestGpuRegs:
	push	{r4, lr}
	mov	r0, #0x0
	mov	r1, #0x40
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r4, .L7
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r1, #0xfe
	lsl	r1, r1, #0x7
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r0, .L7+0x4
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L7+0x8
	strh	r1, [r0]
	ldr	r0, .L7+0xc
	strh	r1, [r0]
	ldr	r0, .L7+0x10
	strh	r1, [r0]
	ldr	r0, .L7+0x14
	strh	r1, [r0]
	ldr	r0, .L7+0x18
	strh	r1, [r0]
	ldr	r0, .L7+0x1c
	strh	r1, [r0]
	ldr	r0, .L7+0x20
	strh	r1, [r0]
	ldr	r0, .L7+0x24
	strh	r1, [r0]
	ldr	r0, .L7+0x28
	strh	r1, [r0]
	ldr	r0, .L7+0x2c
	strh	r1, [r0]
	ldr	r0, .L7+0x30
	strh	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L8:
	.align	2, 0
.L7:
	.word	0x3f3f
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe3:
	.size	 SetupContestGpuRegs,.Lfe3-SetupContestGpuRegs
	.align	2, 0
	.globl	LoadContestBgAfterMoveAnim
	.type	 LoadContestBgAfterMoveAnim,function
	.thumb_func
LoadContestBgAfterMoveAnim:
	push	{r4, r5, lr}
	ldr	r0, .L15
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	bl	LZDecompressVram
	ldr	r0, .L15+0x4
	ldr	r1, .L15+0x8
	bl	LZDecompressVram
	ldr	r1, .L15+0xc
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	ldr	r0, .L15+0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r1, #0x0
	bl	LoadCompressedPalette
	bl	sub_80D782C
	mov	r4, #0x0
	mov	r5, #0xa0
.L13:
	ldr	r0, .L15+0x14
	add	r0, r5, r0
	ldr	r1, .L15+0x18
	add	r1, r4, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	add	r5, r5, #0x20
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L13	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gContestMiscGfx
	.word	gContestAudienceGfx
	.word	0x6002000
	.word	gOldContestGfx
	.word	gOldContestPalette
	.word	gHeap+0x1a004
	.word	gContestantTurnOrder
.Lfe4:
	.size	 LoadContestBgAfterMoveAnim,.Lfe4-LoadContestBgAfterMoveAnim
	.align	2, 0
	.type	 InitContestInfoBgs,function
	.thumb_func
InitContestInfoBgs:
	push	{r4, lr}
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L23
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	mov	r0, #0x3
	mov	r1, #0x6
	mov	r2, #0x1
	bl	SetBgAttribute
	mov	r4, #0x0
.L21:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L23+0x4
	ldr	r1, [r1]
	lsl	r2, r4, #0x2
	add	r1, r1, #0x24
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	SetBgTilemapBuffer
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L21	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	sContestBgTemplates
	.word	gContestResources
.Lfe5:
	.size	 InitContestInfoBgs,.Lfe5-InitContestInfoBgs
	.align	2, 0
	.type	 InitContestWindows,function
	.thumb_func
InitContestWindows:
	push	{lr}
	ldr	r0, .L28
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	ldr	r0, .L28+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L26	@cond_branch
	ldr	r2, .L28+0x8
	ldrb	r1, [r2]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	sContestWindowTemplates
	.word	gLinkContestFlags
	.word	gTextFlags
.L26:
	ldr	r0, .L30
	ldrb	r1, [r0]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0]
.L27:
	pop	{r0}
	bx	r0
.L31:
	.align	2, 0
.L30:
	.word	gTextFlags
.Lfe6:
	.size	 InitContestWindows,.Lfe6-InitContestWindows
	.align	2, 0
	.type	 sub_80D782C,function
	.thumb_func
sub_80D782C:
	push	{r4, r5, lr}
	ldr	r0, .L38
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x2
	bl	FillPalette
	mov	r5, #0xa
	mov	r4, #0xfa
	lsl	r4, r4, #0x10
.L36:
	lsr	r1, r4, #0x10
	ldr	r0, .L38+0x4
	mov	r2, #0x2
	bl	LoadPalette
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r4, r4, r0
	add	r5, r5, #0x1
	cmp	r5, #0xd
	ble	.L36	@cond_branch
	ldr	r0, .L38+0x8
	mov	r1, #0xf3
	mov	r2, #0x2
	bl	FillPalette
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L39:
	.align	2, 0
.L38:
	.word	gUnknown_08587C30
	.word	gPlttBufferUnfaded+0x1e2
	.word	0x7e3f
.Lfe7:
	.size	 sub_80D782C,.Lfe7-sub_80D782C
	.align	2, 0
	.type	 InitContestResources,function
	.thumb_func
InitContestResources:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L62
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x5c
	bl	memset
	mov	r5, #0x0
	mov	r2, #0xff
.L44:
	ldr	r0, [r4]
	ldr	r1, [r0]
	add	r1, r1, #0x2
	add	r1, r1, r5
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L44	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L62
	mov	r5, #0x3
.L49:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, #0x0
	mov	r2, #0x1c
	bl	memset
	add	r4, r4, #0x1c
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L49	@cond_branch
	ldr	r4, .L62
	mov	r7, #0x4
	neg	r7, r7
	mov	r6, #0xff
	mov	r3, #0x0
	mov	r5, #0x3
.L54:
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	add	r1, r3, r1
	ldrb	r2, [r1, #0xb]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	add	r1, r3, r1
	ldrb	r0, [r1, #0x13]
	orr	r0, r0, r6
	strb	r0, [r1, #0x13]
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	add	r1, r3, r1
	ldrb	r0, [r1, #0x14]
	orr	r0, r0, r6
	strb	r0, [r1, #0x14]
	add	r3, r3, #0x1c
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L54	@cond_branch
	ldr	r4, .L62
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	mov	r1, #0x0
	mov	r2, #0x14
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0xc]
	mov	r1, #0x0
	mov	r2, #0x44
	bl	memset
	ldr	r2, [r4]
	ldr	r1, [r2, #0x10]
	mov	r0, #0x0
	str	r0, [r1]
	ldr	r0, [r2, #0x14]
	mov	r1, #0x0
	mov	r2, #0x10
	bl	memset
	ldr	r0, .L62+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	mov	r0, #0x0
	bl	SortContestants
.L56:
	mov	r5, #0x0
	add	r2, r4, #0
	mov	r6, #0xff
	mov	r3, #0x0
	ldr	r4, .L62+0x8
.L60:
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	add	r1, r3, r1
	ldrb	r0, [r1, #0x19]
	orr	r0, r0, r6
	strb	r0, [r1, #0x19]
	ldr	r0, [r2]
	ldr	r1, [r0]
	add	r1, r1, #0x14
	add	r1, r1, r5
	add	r0, r5, r4
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r3, r3, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L60	@cond_branch
	bl	ApplyNextTurnOrder
	ldr	r0, .L62
	ldr	r0, [r0]
	ldr	r0, [r0, #0x1c]
	mov	r1, #0x0
	mov	r2, #0x40
	bl	memset
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L63:
	.align	2, 0
.L62:
	.word	gContestResources
	.word	gLinkContestFlags
	.word	gContestantTurnOrder
.Lfe8:
	.size	 InitContestResources,.Lfe8-InitContestResources
	.align	2, 0
	.type	 AllocContestResources,function
	.thumb_func
AllocContestResources:
	push	{r4, r5, lr}
	ldr	r4, .L65
	mov	r0, #0x40
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x5c
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
	mov	r0, #0x70
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x4]
	mov	r0, #0x14
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x8]
	mov	r0, #0x44
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0xc]
	mov	r0, #0x10
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x10]
	mov	r0, #0x10
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x14]
	mov	r0, #0x14
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x18]
	mov	r0, #0x40
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x1c]
	mov	r0, #0xc
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x20]
	mov	r5, #0x80
	lsl	r5, r5, #0x5
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x24]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x28]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x2c]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x30]
	mov	r5, #0x80
	lsl	r5, r5, #0x4
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x34]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x38]
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	ldr	r2, [r4]
	str	r0, [r2, #0x3c]
	ldr	r1, .L65+0x4
	str	r0, [r1]
	ldr	r1, .L65+0x8
	ldr	r0, [r2, #0x28]
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L66:
	.align	2, 0
.L65:
	.word	gContestResources
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.Lfe9:
	.size	 AllocContestResources,.Lfe9-AllocContestResources
	.align	2, 0
	.type	 FreeContestResources,function
	.thumb_func
FreeContestResources:
	push	{r4, r5, lr}
	ldr	r5, .L68
	ldr	r0, [r5]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	mov	r4, #0x0
	str	r4, [r0]
	ldr	r0, [r0, #0x4]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x4]
	ldr	r0, [r0, #0x8]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x8]
	ldr	r0, [r0, #0xc]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0xc]
	ldr	r0, [r0, #0x10]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x10]
	ldr	r0, [r0, #0x14]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x14]
	ldr	r0, [r0, #0x18]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x18]
	ldr	r0, [r0, #0x1c]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x1c]
	ldr	r0, [r0, #0x20]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x20]
	ldr	r0, [r0, #0x24]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x24]
	ldr	r0, [r0, #0x28]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x28]
	ldr	r0, [r0, #0x2c]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x2c]
	ldr	r0, [r0, #0x30]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x30]
	ldr	r0, [r0, #0x34]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x34]
	ldr	r0, [r0, #0x38]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x38]
	ldr	r0, [r0, #0x3c]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x3c]
	bl	Free
	str	r4, [r5]
	ldr	r0, .L68+0x4
	str	r4, [r0]
	ldr	r0, .L68+0x8
	str	r4, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L69:
	.align	2, 0
.L68:
	.word	gContestResources
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.Lfe10:
	.size	 FreeContestResources,.Lfe10-FreeContestResources
	.align	2, 0
	.globl	CB2_StartContest
	.type	 CB2_StartContest,function
	.thumb_func
CB2_StartContest:
	push	{r4, r5, r6, lr}
	ldr	r0, .L82
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r6, r0, r1
	ldrb	r5, [r6]
	cmp	r5, #0x1
	beq	.L73	@cond_branch
	cmp	r5, #0x1
	bgt	.L80	@cond_branch
	cmp	r5, #0
	beq	.L72	@cond_branch
	b	.L71
.L83:
	.align	2, 0
.L82:
	.word	gMain
.L80:
	cmp	r5, #0x2
	beq	.L74	@cond_branch
	cmp	r5, #0x3
	beq	.L76	@cond_branch
	b	.L71
.L72:
	ldr	r0, .L84
	strb	r5, [r0]
	bl	AllocContestResources
	bl	AllocateMonSpritesGfx
	ldr	r4, .L84+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r4]
	str	r5, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x7
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	InitContestInfoBgs
	bl	InitContestWindows
	bl	SetupContestGpuRegs
	bl	ScanlineEffect_Clear
	bl	ResetPaletteFade
	ldr	r2, .L84+0x8
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	bl	ResetSpriteData
	bl	ResetTasks
	bl	FreeAllSpritePalettes
	ldr	r1, .L84+0xc
	mov	r0, #0x4
	strb	r0, [r1]
	ldr	r0, .L84+0x10
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	strb	r5, [r0]
	bl	ClearBattleMonForms
	bl	InitContestResources
	b	.L81
.L85:
	.align	2, 0
.L84:
	.word	sContestBgCopyFlags
	.word	gMonSpritesGfxPtr
	.word	gPaletteFade
	.word	gReservedSpritePaletteCount
	.word	gHeap
.L73:
	mov	r0, #0x2
	strb	r0, [r6]
	b	.L71
.L74:
	ldr	r4, .L86
	ldr	r0, [r4]
	ldr	r0, [r0]
	add	r0, r0, #0x59
	bl	SetupContestGraphics
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L71	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0]
	add	r0, r0, #0x59
	mov	r1, #0x0
	strb	r1, [r0]
.L81:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	b	.L71
.L87:
	.align	2, 0
.L86:
	.word	gContestResources
.L76:
	bl	sub_80DE224
	ldr	r0, .L88
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L88+0x4
	strh	r1, [r0]
	mov	r0, #0x2
	bl	BeginFastPaletteFade
	ldr	r2, .L88+0x8
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r0, .L88+0xc
	bl	SetVBlankCallback
	ldr	r0, .L88+0x10
	mov	r1, #0xa
	bl	CreateTask
	ldr	r1, .L88+0x14
	ldr	r1, [r1]
	ldr	r1, [r1]
	strb	r0, [r1, #0x8]
	ldr	r0, .L88+0x18
	bl	SetMainCallback2
	ldr	r0, .L88+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L71	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x8
	mov	r1, #0x8
	bl	CreateWirelessStatusIndicatorSprite
.L71:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L89:
	.align	2, 0
.L88:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gPaletteFade
	.word	vblank_cb_battle
	.word	sub_80D7C7C
	.word	gContestResources
	.word	CB2_ContestMain
	.word	gLinkContestFlags
.Lfe11:
	.size	 CB2_StartContest,.Lfe11-CB2_StartContest
	.align	2, 0
	.type	 sub_80D7C7C,function
	.thumb_func
sub_80D7C7C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L92
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L91	@cond_branch
	ldr	r0, .L92+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r2, [r1, #0x8]
	ldr	r0, .L92+0x8
	str	r0, [r1]
.L91:
	pop	{r0}
	bx	r0
.L93:
	.align	2, 0
.L92:
	.word	gPaletteFade
	.word	gTasks
	.word	sub_80D7CB4
.Lfe12:
	.size	 sub_80D7C7C,.Lfe12-sub_80D7C7C
	.align	2, 0
	.type	 sub_80D7CB4,function
	.thumb_func
sub_80D7CB4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L109
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L95	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L96	@cond_branch
	ldr	r2, .L109+0x4
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r6, r1, #0
	cmp	r0, #0x1
	beq	.L99	@cond_branch
	cmp	r0, #0x1
	bgt	.L105	@cond_branch
	cmp	r0, #0
	beq	.L98	@cond_branch
	b	.L96
.L110:
	.align	2, 0
.L109:
	.word	gLinkContestFlags
	.word	gTasks
.L105:
	cmp	r0, #0x2
	beq	.L101	@cond_branch
	b	.L96
.L98:
	bl	ContestPrintLinkStandby
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L99:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L94	@cond_branch
	bl	sub_800ADF8
	ldr	r0, .L111
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L94
.L112:
	.align	2, 0
.L111:
	.word	gTasks
.L101:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L94	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L96:
	ldr	r2, .L113
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L94	@cond_branch
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldr	r0, .L113+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L107	@cond_branch
	bl	ContestPrintLinkStandby
.L107:
	ldr	r0, .L113+0x8
	mov	r1, #0x0
	bl	CreateTask
	ldr	r1, .L113+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	ldr	r1, .L113+0x10
	str	r1, [r0]
	b	.L94
.L114:
	.align	2, 0
.L113:
	.word	gPaletteFade
	.word	gLinkContestFlags
	.word	sub_80D7DAC
	.word	gTasks
	.word	TaskDummy1
.L95:
	ldr	r0, .L115
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L115+0x4
	str	r0, [r1]
.L94:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L116:
	.align	2, 0
.L115:
	.word	gTasks
	.word	sub_80D80C8
.Lfe13:
	.size	 sub_80D7CB4,.Lfe13-sub_80D7CB4
	.align	2, 0
	.type	 sub_80D7DAC,function
	.thumb_func
sub_80D7DAC:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L118
	ldr	r2, .L118+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	sub_80FC998
	.word	sub_80D7DC8
.Lfe14:
	.size	 sub_80D7DAC,.Lfe14-sub_80D7DAC
	.align	2, 0
	.type	 sub_80D7DC8,function
	.thumb_func
sub_80D7DC8:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L121
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
	ldr	r0, .L121+0x4
	str	r0, [r1]
	bx	lr
.L122:
	.align	2, 0
.L121:
	.word	gTasks
	.word	sub_80D7DE8
.Lfe15:
	.size	 sub_80D7DC8,.Lfe15-sub_80D7DC8
	.align	2, 0
	.type	 sub_80D7DE8,function
	.thumb_func
sub_80D7DE8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r5, .L125
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldrh	r1, [r0, #0x8]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	lsl	r1, r1, #0x10
	cmp	r1, #0
	bgt	.L124	@cond_branch
	bl	GetMultiplayerId
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r0, .L125+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r5
	ldr	r1, .L125+0x8
	str	r1, [r0]
	ldr	r1, .L125+0xc
	ldr	r0, .L125+0x10
	ldr	r0, [r0]
	str	r0, [r1]
.L124:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gTasks
	.word	gContestResources
	.word	sub_80D80C8
	.word	gRngValue
	.word	gContestRngValue
.Lfe16:
	.size	 sub_80D7DE8,.Lfe16-sub_80D7DE8
	.align	2, 0
	.type	 SetupContestGraphics,function
	.thumb_func
SetupContestGraphics:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x40
	mov	sl, r0
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bls	.LCB1269
	b	.L141	@long jump
.LCB1269:
	lsl	r0, r0, #0x2
	ldr	r1, .L144
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L145:
	.align	2, 0
.L144:
	.word	.L142
	.align	2, 0
	.align	2, 0
.L142:
	.word	.L129
	.word	.L130
	.word	.L131
	.word	.L137
	.word	.L138
	.word	.L139
	.word	.L140
.L129:
	ldr	r2, .L146
	ldrb	r0, [r2, #0x8]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x8]
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	mov	r4, #0x80
	lsl	r4, r4, #0x8
	mov	r0, #0x0
	add	r2, r4, #0
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldr	r1, .L146+0x4
	mov	r0, #0x0
	add	r2, r4, #0
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldr	r1, .L146+0x8
	mov	r0, #0x0
	add	r2, r4, #0
	mov	r3, #0x1
	bl	RequestDma3Fill
	b	.L128
.L147:
	.align	2, 0
.L146:
	.word	gPaletteFade
	.word	0x6008000
	.word	0x6010000
.L130:
	ldr	r0, .L148
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	bl	LZDecompressVram
	b	.L128
.L149:
	.align	2, 0
.L148:
	.word	gContestMiscGfx
.L131:
	ldr	r0, .L150
	ldr	r4, .L150+0x4
	add	r1, r4, #0
	bl	LZDecompressVram
	ldr	r3, .L150+0x8
	mov	r5, #0x80
	lsl	r5, r5, #0x6
	ldr	r1, .L150+0xc
	ldr	r6, .L150+0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r7, #0x84
	lsl	r7, r7, #0x18
.L132:
	str	r4, [r1]
	str	r3, [r1, #0x4]
	str	r6, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	add	r4, r4, r2
	add	r3, r3, r2
	sub	r5, r5, r2
	cmp	r5, r2
	bhi	.L132	@cond_branch
	str	r4, [r1]
	str	r3, [r1, #0x4]
	lsr	r0, r5, #0x2
	orr	r0, r0, r7
	str	r0, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	b	.L128
.L151:
	.align	2, 0
.L150:
	.word	gContestAudienceGfx
	.word	0x6002000
	.word	gHeap+0x18000
	.word	0x40000d4
	.word	-0x7bfffc00
.L137:
	ldr	r1, .L152
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	b	.L128
.L153:
	.align	2, 0
.L152:
	.word	gOldContestGfx
.L138:
	ldr	r1, .L154
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	ldr	r0, .L154+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x2c]
	ldr	r2, .L154+0x8
	ldr	r0, .L154+0xc
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L154+0x10
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	b	.L128
.L155:
	.align	2, 0
.L154:
	.word	gUnknown_08C17170
	.word	gContestResources
	.word	gHeap+0x1aa04
	.word	0x40000d4
	.word	-0x7bfffe00
.L139:
	ldr	r0, .L156
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r1, #0x0
	bl	LoadCompressedPalette
	ldr	r5, .L156+0x4
	ldr	r6, .L156+0x8
	add	r0, r5, #0
	mov	r1, sp
	add	r2, r6, #0
	bl	CpuSet
	ldr	r0, .L156+0xc
	mov	r9, r0
	ldrb	r0, [r0]
	add	r0, r0, #0x5
	lsl	r0, r0, #0x5
	ldr	r1, .L156+0x10
	add	r1, r1, r5
	mov	r8, r1
	add	r0, r0, r8
	add	r4, sp, #0x20
	add	r1, r4, #0
	add	r2, r6, #0
	bl	CpuSet
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	CpuSet
	mov	r2, r9
	ldrb	r1, [r2]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x5
	add	r1, r1, r8
	mov	r0, sp
	add	r2, r6, #0
	bl	CpuSet
	ldr	r1, .L156+0x14
	ldr	r0, .L156+0x18
	mov	r2, r8
	str	r2, [r0]
	str	r1, [r0, #0x4]
	ldr	r1, .L156+0x1c
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	bl	sub_80D782C
	b	.L128
.L157:
	.align	2, 0
.L156:
	.word	gOldContestPalette
	.word	gPlttBufferUnfaded+0x100
	.word	0x4000008
	.word	gContestPlayerMonIndex
	.word	-0x100
	.word	gHeap+0x1a004
	.word	0x40000d4
	.word	-0x7bffff80
.L140:
	bl	DrawContestantWindows
	bl	FillContestantWindowBgs
	bl	SwapMoveDescAndContestTilemaps
	bl	sub_80DB120
	ldr	r1, .L158
	ldr	r1, [r1]
	ldr	r1, [r1]
	mov	r4, #0x0
	strb	r0, [r1, #0x12]
	bl	sub_80DC2BC
	bl	sub_80DC4F0
	bl	CreateApplauseMeterSprite
	bl	sub_80DC5E8
	bl	sub_80DC7EC
	ldr	r1, .L158+0x4
	strb	r4, [r1]
	mov	r0, #0x1
	strb	r0, [r1, #0x1]
	mov	r3, #0x3
	strb	r3, [r1, #0x2]
	mov	r2, #0x2
	strb	r2, [r1, #0x3]
	ldr	r0, .L158+0x8
	str	r4, [r0]
	ldr	r4, .L158+0xc
	strb	r2, [r4]
	ldr	r0, .L158+0x10
	strb	r3, [r0]
	bl	sub_80DB0C4
	ldr	r2, .L158+0x14
	ldrb	r1, [r4]
	add	r1, r1, r2
	strb	r0, [r1]
	bl	sub_80DEA20
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	b	.L128
.L159:
	.align	2, 0
.L158:
	.word	gContestResources
	.word	gBattlerPositions
	.word	gBattleTypeFlags
	.word	gBattlerAttacker
	.word	gBattlerTarget
	.word	gBattlerSpriteIds
.L141:
	mov	r0, #0x0
	mov	r1, sl
	strb	r0, [r1]
	mov	r0, #0x1
	b	.L143
.L128:
	mov	r2, sl
	ldrb	r0, [r2]
	add	r0, r0, #0x1
	strb	r0, [r2]
	mov	r0, #0x0
.L143:
	add	sp, sp, #0x40
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 SetupContestGraphics,.Lfe17-SetupContestGraphics
	.align	2, 0
	.type	 sub_80D80C8,function
	.thumb_func
sub_80D80C8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L162
	ldrb	r2, [r1, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r2
	strb	r0, [r1, #0x8]
	ldrb	r1, [r1, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L161	@cond_branch
	ldr	r0, .L162+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r2, [r1, #0x8]
	strh	r2, [r1, #0xa]
	ldr	r0, .L162+0x8
	str	r0, [r1]
.L161:
	pop	{r0}
	bx	r0
.L163:
	.align	2, 0
.L162:
	.word	gPaletteFade
	.word	gTasks
	.word	sub_80D8108
.Lfe18:
	.size	 sub_80D80C8,.Lfe18-sub_80D80C8
	.align	2, 0
	.type	 sub_80D8108,function
	.thumb_func
sub_80D8108:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L177
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bhi	.L173	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L177+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L178:
	.align	2, 0
.L177:
	.word	gTasks
	.word	.L175
	.align	2, 0
	.align	2, 0
.L175:
	.word	.L166
	.word	.L168
	.word	.L170
	.word	.L171
	.word	.L173
.L166:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0xa]
	add	r1, r0, #0x1
	strh	r1, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x3c
	ble	.L165	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	mov	r0, #0x61
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L165
.L168:
	ldr	r1, .L179
	ldrh	r0, [r1]
	add	r0, r0, #0x7
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa0
	ble	.L165	@cond_branch
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	b	.L176
.L180:
	.align	2, 0
.L179:
	.word	gBattle_BG1_Y
.L170:
	bl	sub_80DE350
	ldr	r0, .L181
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L165
.L182:
	.align	2, 0
.L181:
	.word	gTasks
.L171:
	mov	r0, #0x8
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r0, #0xc
	bl	GetGpuReg
	mov	r4, sp
	add	r4, r4, #0x2
	strh	r0, [r4]
	mov	r3, sp
	ldrb	r2, [r3]
	mov	r1, #0x4
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3]
	ldrb	r0, [r4]
	and	r1, r1, r0
	strb	r1, [r4]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0x8
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0xc
	bl	SetGpuReg
	bl	StartMoveApplauseMeterOnscreen
	ldr	r1, .L183
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
.L176:
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L165
.L184:
	.align	2, 0
.L183:
	.word	gTasks
.L173:
	ldr	r0, .L185
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L165	@cond_branch
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	strh	r1, [r0, #0x8]
	strh	r1, [r0, #0xa]
	ldr	r1, .L185+0x4
	str	r1, [r0]
.L165:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L186:
	.align	2, 0
.L185:
	.word	gContestResources
	.word	sub_80D833C
.Lfe19:
	.size	 sub_80D8108,.Lfe19-sub_80D8108
	.align	2, 0
	.type	 CB2_ContestMain,function
	.thumb_func
CB2_ContestMain:
	push	{r4, r5, lr}
	bl	AnimateSprites
	bl	RunTasks
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	mov	r4, #0x0
.L191:
	ldr	r5, .L194
	ldrb	r0, [r5]
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L190	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	CopyBgTilemapBufferToVram
.L190:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L191	@cond_branch
	mov	r0, #0x0
	strb	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	sContestBgCopyFlags
.Lfe20:
	.size	 CB2_ContestMain,.Lfe20-CB2_ContestMain
	.align	2, 0
	.type	 vblank_cb_battle,function
	.thumb_func
vblank_cb_battle:
	push	{lr}
	ldr	r0, .L197
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L197+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L197+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L197+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	ldr	r0, .L197+0x10
	ldrh	r1, [r0]
	mov	r0, #0x18
	bl	SetGpuReg
	ldr	r0, .L197+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1a
	bl	SetGpuReg
	ldr	r0, .L197+0x18
	ldrh	r1, [r0]
	mov	r0, #0x1c
	bl	SetGpuReg
	ldr	r0, .L197+0x1c
	ldrh	r1, [r0]
	mov	r0, #0x1e
	bl	SetGpuReg
	ldr	r0, .L197+0x20
	ldrh	r1, [r0]
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r0, .L197+0x24
	ldrh	r1, [r0]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L197+0x28
	ldrh	r1, [r0]
	mov	r0, #0x42
	bl	SetGpuReg
	ldr	r0, .L197+0x2c
	ldrh	r1, [r0]
	mov	r0, #0x46
	bl	SetGpuReg
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe21:
	.size	 vblank_cb_battle,.Lfe21-vblank_cb_battle
	.align	2, 0
	.type	 sub_80D833C,function
	.thumb_func
sub_80D833C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L205
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L200	@cond_branch
	ldr	r0, .L205+0x4
	strh	r1, [r0]
	ldr	r0, .L205+0x8
	strh	r1, [r0]
	bl	ContestDebugDoPrint
	ldr	r1, .L205+0xc
	ldr	r2, .L205+0x10
	ldr	r0, .L205+0x14
	str	r1, [r0]
	str	r2, [r0, #0x4]
	ldr	r1, .L205+0x18
	str	r1, [r0, #0x8]
	ldr	r0, [r0, #0x8]
	ldr	r0, .L205+0x1c
	ldr	r1, .L205+0x20
	ldr	r1, [r1]
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x1]
	add	r1, r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L205+0x24
	ldrb	r0, [r0]
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L201	@cond_branch
	ldr	r0, .L205+0x28
	ldr	r1, .L205+0x2c
	bl	StringCopy
	b	.L202
.L206:
	.align	2, 0
.L205:
	.word	gTasks
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gPlttBufferUnfaded
	.word	gHeap+0x1a204
	.word	0x40000d4
	.word	-0x7bffff00
	.word	gStringVar1
	.word	gContestResources
	.word	gContestPlayerMonIndex
	.word	gDisplayedStringBattle
	.word	gText_AppealNumWhichMoveWillBePlayed
.L201:
	ldr	r0, .L207
	ldr	r1, .L207+0x4
	bl	StringCopy
.L202:
	bl	ContestClearGeneralTextWindow
	ldr	r4, .L207+0x8
	ldr	r1, .L207
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L207+0xc
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L203
.L208:
	.align	2, 0
.L207:
	.word	gDisplayedStringBattle
	.word	gText_AppealNumButItCantParticipate
	.word	gStringVar4
	.word	gTasks
.L200:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	bne	.L203	@cond_branch
	strh	r0, [r4, #0x8]
	ldr	r0, .L209
	str	r0, [r4]
.L203:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L210:
	.align	2, 0
.L209:
	.word	sub_80D8424
.Lfe22:
	.size	 sub_80D833C,.Lfe22-sub_80D833C
	.align	2, 0
	.type	 sub_80D8424,function
	.thumb_func
sub_80D8424:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	ldr	r0, .L217
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L213	@cond_branch
	cmp	r1, #0x2
	bne	.L212	@cond_branch
.L213:
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L217+0x4
	ldrb	r0, [r0]
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L214	@cond_branch
	mov	r0, #0x1
	bl	sub_80DC490
	ldr	r0, .L217+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L217+0xc
	b	.L216
.L218:
	.align	2, 0
.L217:
	.word	gMain
	.word	gContestPlayerMonIndex
	.word	gTasks
	.word	sub_80D8490
.L214:
	ldr	r0, .L219
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L219+0x4
.L216:
	str	r0, [r1]
.L212:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L220:
	.align	2, 0
.L219:
	.word	gTasks
	.word	sub_80D8894
.Lfe23:
	.size	 sub_80D8424,.Lfe23-sub_80D8424
	.align	2, 0
	.type	 sub_80D8490,function
	.thumb_func
sub_80D8490:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L231
	mov	r1, #0xa0
	strh	r1, [r0]
	ldr	r0, .L231+0x4
	strh	r1, [r0]
	mov	r6, #0x0
	ldr	r0, .L231+0x8
	mov	r8, r0
	ldr	r2, .L231+0xc
	mov	sl, r2
	ldr	r7, .L231+0x10
.L225:
	lsl	r1, r6, #0x1
	mov	r0, r8
	ldrb	r2, [r0]
	lsl	r0, r2, #0x6
	add	r1, r1, r0
	add	r1, r1, sl
	ldrh	r4, [r1]
	add	r5, sp, #0x4
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x8]
	cmp	r0, #0
	beq	.L226	@cond_branch
	add	r0, r2, #0
	bl	sub_80DE1E8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L226	@cond_branch
	ldr	r0, [r7]
	mov	r2, r8
	ldrb	r1, [r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x8]
	add	r1, r4, #0
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L226	@cond_branch
	ldr	r0, [r7]
	mov	r2, r8
	ldrb	r1, [r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L226	@cond_branch
	add	r0, sp, #0x4
	ldr	r1, .L231+0x14
	b	.L230
.L232:
	.align	2, 0
.L231:
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gContestPlayerMonIndex
	.word	gContestMons+0x1e
	.word	gContestResources
	.word	gText_ColorLightShadowDarkGrey
.L226:
	cmp	r4, #0
	beq	.L227	@cond_branch
	ldr	r0, [r7]
	mov	r2, r8
	ldrb	r1, [r2]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x8]
	cmp	r0, r4
	bne	.L227	@cond_branch
	ldr	r0, .L233
	lsl	r1, r4, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1]
	cmp	r0, #0x3
	beq	.L227	@cond_branch
	add	r0, sp, #0x4
	ldr	r1, .L233+0x4
.L230:
	bl	StringCopy
	add	r5, r0, #0
.L227:
	mov	r0, #0xd
	mov	r1, r4
	mul	r1, r1, r0
	ldr	r0, .L233+0x8
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringCopy
	add	r4, r6, #0x5
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x7
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, sp, #0x4
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L225	@cond_branch
	ldr	r4, .L233+0xc
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	sub_80D880C
	ldr	r2, .L233+0x10
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, .L233+0x14
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	bl	PrintContestMoveDescription
	ldr	r1, .L233+0x18
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L233+0x1c
	str	r1, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L234:
	.align	2, 0
.L233:
	.word	gContestMoves
	.word	gText_ColorBlue
	.word	gMoveNames
	.word	gContestResources
	.word	gContestMons
	.word	gContestPlayerMonIndex
	.word	gTasks
	.word	sub_80D8610
.Lfe24:
	.size	 sub_80D8490,.Lfe24-sub_80D8490
	.align	2, 0
	.type	 sub_80D8610,function
	.thumb_func
sub_80D8610:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r6, #0x0
	ldr	r3, .L262
	ldr	r1, .L262+0x4
	ldr	r0, .L262+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, #0x1e
	add	r1, r0, r1
	mov	r2, #0x3
.L239:
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L238	@cond_branch
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L238:
	add	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L239	@cond_branch
	ldrh	r0, [r3, #0x2e]
	mov	r5, #0x1
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L242	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r0, .L262+0xc
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L262+0x10
	str	r0, [r1]
	b	.L243
.L263:
	.align	2, 0
.L262:
	.word	gMain
	.word	gContestMons
	.word	gContestPlayerMonIndex
	.word	gTasks
	.word	sub_80D8894
.L242:
	ldrh	r0, [r3, #0x30]
	cmp	r0, #0x20
	bne	.LCB2482
	b	.L243	@long jump
.LCB2482:
	cmp	r0, #0x20
	bgt	.L260	@cond_branch
	cmp	r0, #0x2
	beq	.L245	@cond_branch
	b	.L243
.L260:
	cmp	r0, #0x40
	beq	.L250	@cond_branch
	cmp	r0, #0x80
	bne	.LCB2493
	b	.L254	@long jump
.LCB2493:
	b	.L243
.L245:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	sub_80DC490
	ldr	r0, .L264
	ldr	r1, .L264+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x1]
	add	r1, r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L264+0x8
	ldrb	r0, [r0]
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L246	@cond_branch
	ldr	r0, .L264+0xc
	ldr	r1, .L264+0x10
	bl	StringCopy
	b	.L247
.L265:
	.align	2, 0
.L264:
	.word	gStringVar1
	.word	gContestResources
	.word	gContestPlayerMonIndex
	.word	gDisplayedStringBattle
	.word	gText_AppealNumWhichMoveWillBePlayed
.L246:
	ldr	r0, .L266
	ldr	r1, .L266+0x4
	bl	StringCopy
.L247:
	bl	ContestClearGeneralTextWindow
	ldr	r4, .L266+0x8
	ldr	r1, .L266
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x0
	bl	Contest_StartTextPrinter
	ldr	r0, .L266+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L266+0x10
	strh	r1, [r0]
	ldr	r1, .L266+0x14
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L266+0x18
	str	r1, [r0]
	b	.L243
.L267:
	.align	2, 0
.L266:
	.word	gDisplayedStringBattle
	.word	gText_AppealNumButItCantParticipate
	.word	gStringVar4
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gTasks
	.word	sub_80D8424
.L250:
	ldr	r4, .L268
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	sub_80D883C
	ldr	r0, [r4]
	ldr	r1, [r0]
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L251	@cond_branch
	sub	r0, r6, #0x1
	b	.L261
.L269:
	.align	2, 0
.L268:
	.word	gContestResources
.L251:
	sub	r0, r0, #0x1
.L261:
	strb	r0, [r1]
	ldr	r4, .L270
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	sub_80D880C
	ldr	r2, .L270+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, .L270+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	bl	PrintContestMoveDescription
	cmp	r6, #0x1
	bls	.L243	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	b	.L243
.L271:
	.align	2, 0
.L270:
	.word	gContestResources
	.word	gContestMons
	.word	gContestPlayerMonIndex
.L254:
	ldr	r4, .L272
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	sub_80D883C
	ldr	r0, [r4]
	ldr	r1, [r0]
	ldrb	r2, [r1]
	sub	r0, r6, #0x1
	cmp	r2, r0
	bne	.L255	@cond_branch
	strb	r5, [r1]
	b	.L256
.L273:
	.align	2, 0
.L272:
	.word	gContestResources
.L255:
	add	r0, r2, #0x1
	strb	r0, [r1]
.L256:
	ldr	r4, .L274
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	bl	sub_80D880C
	ldr	r2, .L274+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, .L274+0x8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x6
	add	r1, r1, r0
	add	r2, r2, #0x1e
	add	r1, r1, r2
	ldrh	r0, [r1]
	bl	PrintContestMoveDescription
	cmp	r6, #0x1
	bls	.L243	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
.L243:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	gContestResources
	.word	gContestMons
	.word	gContestPlayerMonIndex
.Lfe25:
	.size	 sub_80D8610,.Lfe25-sub_80D8610
	.align	2, 0
	.type	 sub_80D880C,function
	.thumb_func
sub_80D880C:
	push	{lr}
	add	sp, sp, #-0x10
	add	r3, r0, #0
	lsl	r3, r3, #0x19
	mov	r0, #0xf8
	lsl	r0, r0, #0x15
	add	r3, r3, r0
	lsr	r3, r3, #0x18
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0x37
	mov	r2, #0x0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 sub_80D880C,.Lfe26-sub_80D880C
	.align	2, 0
	.type	 sub_80D883C,function
	.thumb_func
sub_80D883C:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x17
	add	r3, r4, #0
	add	r3, r3, #0x1f
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x2
	mov	r8, r0
	str	r0, [sp]
	mov	r5, #0x1
	str	r5, [sp, #0x4]
	mov	r6, #0x11
	str	r6, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r1, #0xb
	mov	r2, #0x0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	r4, r4, #0x20
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r0, #0x2
	mov	r1, #0xb
	mov	r2, #0x0
	add	r3, r4, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe27:
	.size	 sub_80D883C,.Lfe27-sub_80D883C
	.align	2, 0
	.type	 sub_80D8894,function
	.thumb_func
sub_80D8894:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L281
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L279	@cond_branch
	ldr	r4, .L281+0x4
	ldrb	r0, [r4]
	bl	GetChosenMove
	ldr	r1, .L281+0x8
	ldr	r1, [r1]
	ldrb	r2, [r4]
	ldr	r3, [r1, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r0, [r1, #0x6]
	ldr	r4, .L281+0xc
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L281+0x10
	add	r1, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	ldr	r1, .L281+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L281+0x18
	str	r1, [r0]
	bl	ContestPrintLinkStandby
	mov	r0, #0x0
	bl	sub_80DC490
	b	.L280
.L282:
	.align	2, 0
.L281:
	.word	gLinkContestFlags
	.word	gContestPlayerMonIndex
	.word	gContestResources
	.word	sub_80FC9F8
	.word	sub_80D892C
	.word	gTasks
	.word	TaskDummy1
.L279:
	bl	GetAllChosenMoves
	ldr	r0, .L283
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L283+0x4
	str	r0, [r1]
.L280:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	gTasks
	.word	sub_80D895C
.Lfe28:
	.size	 sub_80D8894,.Lfe28-sub_80D8894
	.align	2, 0
	.type	 sub_80D892C,function
	.thumb_func
sub_80D892C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	ldr	r2, .L286
	ldr	r0, .L286+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L286+0x8
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L287:
	.align	2, 0
.L286:
	.word	gTasks
	.word	gContestResources
	.word	sub_80D895C
.Lfe29:
	.size	 sub_80D892C,.Lfe29-sub_80D892C
	.align	2, 0
	.type	 sub_80D895C,function
	.thumb_func
sub_80D895C:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L294
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L294+0x4
	strh	r1, [r0]
	mov	r0, #0x0
	bl	sub_80DC490
	mov	r6, #0x0
	mov	r5, #0xa0
	lsl	r5, r5, #0x13
.L292:
	lsr	r4, r5, #0x18
	add	r0, r4, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r5, r5, r0
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L292	@cond_branch
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	ldr	r1, .L294+0x8
	ldr	r0, .L294+0xc
	mov	r2, #0x80
	lsl	r2, r2, #0x3
	ldr	r4, .L294+0x10
	str	r1, [r4]
	str	r0, [r4, #0x4]
	lsr	r1, r2, #0x2
	mov	r3, #0x84
	lsl	r3, r3, #0x18
	orr	r1, r1, r3
	str	r1, [r4, #0x8]
	ldr	r1, [r4, #0x8]
	ldr	r1, .L294+0x14
	add	r0, r0, r1
	mov	r1, #0x0
	bl	LoadPalette
	ldr	r1, .L294+0x18
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	strh	r1, [r0, #0xa]
	ldr	r1, .L294+0x1c
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L295:
	.align	2, 0
.L294:
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gPlttBufferFaded
	.word	gHeap+0x1a604
	.word	0x40000d4
	.word	-0x400
	.word	gTasks
	.word	sub_80D8A04
.Lfe30:
	.size	 sub_80D895C,.Lfe30-sub_80D895C
	.align	2, 0
	.type	 sub_80D8A04,function
	.thumb_func
sub_80D8A04:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L299
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L297	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L297	@cond_branch
	bl	TryMoveApplauseMeterOffscreen
	mov	r0, #0x1
	bl	sub_80DE69C
	ldr	r0, .L299+0x4
	str	r0, [r4]
.L297:
	pop	{r4}
	pop	{r0}
	bx	r0
.L300:
	.align	2, 0
.L299:
	.word	gTasks
	.word	sub_80D8A50
.Lfe31:
	.size	 sub_80D8A04,.Lfe31-sub_80D8A04
	.align	2, 0
	.type	 sub_80D8A50,function
	.thumb_func
sub_80D8A50:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L303
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x6]
	mov	r0, #0x90
	lsl	r0, r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L302	@cond_branch
	ldr	r0, .L303+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L303+0x8
	str	r0, [r1]
.L302:
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	gContestResources
	.word	gTasks
	.word	sub_80D8A88
.Lfe32:
	.size	 sub_80D8A50,.Lfe32-sub_80D8A50
	.align	2, 0
	.type	 sub_80D8A88,function
	.thumb_func
sub_80D8A88:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L313
	lsl	r3, r6, #0x2
	add	r1, r3, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x13
	ble	.L306	@cond_branch
	ldr	r2, .L313+0x4
	ldr	r0, [r2]
	ldr	r1, [r0]
	mov	r0, #0x0
	strb	r0, [r1, #0x10]
	ldr	r0, [r2]
	ldr	r1, [r0]
	ldr	r0, .L313+0x8
	ldr	r0, [r0]
	str	r0, [r1, #0x18]
	ldr	r0, .L313+0xc
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	add	r7, r3, #0
	cmp	r0, #0
	beq	.L307	@cond_branch
	bl	sub_80DA8A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L307	@cond_branch
	mov	r4, #0x0
	ldr	r1, .L313+0x10
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bgt	.L307	@cond_branch
	add	r5, r1, #0
.L311:
	ldrb	r0, [r5]
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetChosenMove
	ldr	r1, .L313+0x4
	ldr	r1, [r1]
	ldrb	r2, [r5]
	add	r2, r2, r4
	ldr	r3, [r1, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r0, [r1, #0x6]
	add	r4, r4, #0x1
	ldrb	r0, [r5]
	add	r0, r4, r0
	cmp	r0, #0x3
	ble	.L311	@cond_branch
.L307:
	ldr	r1, .L313
	add	r0, r7, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	ldr	r1, .L313+0x14
	str	r1, [r0]
.L306:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gTasks
	.word	gContestResources
	.word	gRngValue
	.word	gLinkContestFlags
	.word	gNumLinkContestPlayers
	.word	sub_80D8B38
.Lfe33:
	.size	 sub_80D8A88,.Lfe33-sub_80D8A88
	.align	2, 0
	.type	 sub_80D8B38,function
	.thumb_func
sub_80D8B38:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L563
	ldr	r0, [r2]
	ldr	r0, [r0]
	ldrb	r6, [r0, #0x11]
	ldr	r1, .L563+0x4
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r4, #0x8
	ldrsh	r0, [r0, r4]
	mov	r9, r2
	add	r4, r1, #0
	cmp	r0, #0x3b
	bls	.LCB3242
	bl	.L315	@far jump
.LCB3242:
	lsl	r0, r0, #0x2
	ldr	r1, .L563+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L564:
	.align	2, 0
.L563:
	.word	gContestResources
	.word	gTasks
	.word	.L550
	.align	2, 0
	.align	2, 0
.L550:
	.word	.L317
	.word	.L326
	.word	.L328
	.word	.L332
	.word	.L338
	.word	.L341
	.word	.L346
	.word	.L348
	.word	.L349
	.word	.L354
	.word	.L538
	.word	.L539
	.word	.L381
	.word	.L382
	.word	.L454
	.word	.L463
	.word	.L467
	.word	.L469
	.word	.L476
	.word	.L474
	.word	.L541
	.word	.L545
	.word	.L547
	.word	.L356
	.word	.L369
	.word	.L395
	.word	.L396
	.word	.L411
	.word	.L413
	.word	.L419
	.word	.L436
	.word	.L542
	.word	.L543
	.word	.L530
	.word	.L532
	.word	.L384
	.word	.L386
	.word	.L388
	.word	.L391
	.word	.L426
	.word	.L434
	.word	.L478
	.word	.L315
	.word	.L523
	.word	.L315
	.word	.L461
	.word	.L472
	.word	.L380
	.word	.L371
	.word	.L378
	.word	.L393
	.word	.L446
	.word	.L450
	.word	.L494
	.word	.L507
	.word	.L534
	.word	.L535
	.word	.L525
	.word	.L526
	.word	.L528
.L317:
	bl	ContestDebugDoPrint
	mov	r7, #0x0
	ldr	r0, .L565
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r1, #0x10]
	mov	r5, r8
	lsl	r5, r5, #0x2
	mov	sl, r5
	ldrb	r2, [r0]
	cmp	r1, r2
	beq	.L319	@cond_branch
	add	r2, r0, #0
.L320:
	add	r7, r7, #0x1
	add	r0, r2, r7
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L320	@cond_branch
.L319:
	ldr	r4, .L565
	ldr	r0, [r4]
	ldr	r0, [r0]
	strb	r7, [r0, #0x11]
	ldr	r0, [r4]
	ldr	r2, [r0]
	ldrb	r6, [r2, #0x11]
	ldr	r0, .L565+0x4
	ldrb	r1, [r0]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L323	@cond_branch
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	bl	sub_80DA8A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L324	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	sub_80DD080
.L324:
	ldr	r4, .L565+0x8
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L565+0xc
	add	r1, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	bl	ContestPrintLinkStandby
	ldr	r1, .L565+0x10
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	bl	.L315	@ far jump
.L566:
	.align	2, 0
.L565:
	.word	gContestResources
	.word	gLinkContestFlags
	.word	sub_80FCC88
	.word	sub_80DA110
	.word	gTasks
.L323:
	add	r0, r6, #0
	bl	sub_80DD080
	ldr	r0, .L567
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x2
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L568:
	.align	2, 0
.L567:
	.word	gTasks
.L326:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3400
	bl	.L315	@far jump
.LCB3400:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x2
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L328:
	add	r0, r6, #0
	bl	sub_80DF080
	bl	ContestDebugPrintBitStrings
	ldr	r0, .L569
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L330	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0
	beq	.L329	@cond_branch
.L330:
	ldr	r0, .L569+0x4
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1f
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L570:
	.align	2, 0
.L569:
	.word	gContestResources
	.word	gTasks
.L329:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L571
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r6, [r1, #0x1c]
	mov	r0, #0x3
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L572:
	.align	2, 0
.L571:
	.word	gTasks
.L332:
	mov	r4, r8
	lsl	r4, r4, #0x2
	mov	sl, r4
	ldr	r1, .L573
	mov	r2, #0x0
	add	r0, r1, #0x3
.L336:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L336	@cond_branch
	mov	r7, #0x4
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r0, [r0, #0x18]
	mov	r1, #0x0
	mov	r2, #0x14
	bl	memset
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	sub_80DE9DC
	ldr	r4, .L573+0x4
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r3, [r0, #0x11]
	lsl	r2, r3, #0x6
	add	r0, r2, r4
	ldrh	r0, [r0]
	add	r1, r4, #0
	add	r1, r1, #0x3c
	add	r1, r2, r1
	ldr	r1, [r1]
	add	r4, r4, #0x38
	add	r2, r2, r4
	ldr	r2, [r2]
	bl	sub_80DB174
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L573+0x8
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r3, r0, r2
	mov	r1, #0x78
	strh	r1, [r3, #0x24]
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L573+0xc
	str	r1, [r0]
	ldr	r0, .L573+0x10
	mov	r4, sl
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	strh	r5, [r4, #0xc]
	ldr	r1, .L573+0x14
	ldr	r0, .L573+0x18
	ldrb	r0, [r0]
	add	r0, r0, r1
	strb	r5, [r0]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	sub_80DC9EC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	sub_80DCBE8
	strh	r7, [r4, #0x8]
	bl	.L315	@ far jump
.L574:
	.align	2, 0
.L573:
	.word	gBattleMonForms
	.word	gContestMons
	.word	gSprites
	.word	sub_80DA134
	.word	gTasks
	.word	gBattlerSpriteIds
	.word	gBattlerAttacker
.L338:
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r2, r0, r4
	ldrb	r5, [r2, #0xc]
	ldr	r1, .L575
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L575+0x4
	cmp	r1, r0
	beq	.LCB3604
	bl	.L315	@far jump
.LCB3604:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB3618
	bl	.L315	@far jump
.LCB3618:
	mov	r0, #0x5
	strh	r0, [r2, #0x8]
	bl	.L315	@ far jump
.L576:
	.align	2, 0
.L575:
	.word	gSprites
	.word	SpriteCallbackDummy
.L341:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r5, r0, #0x2
	add	r1, r5, r1
	ldrb	r1, [r1, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L342	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x21
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L342:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L577
	lsl	r1, r6, #0x6
	ldr	r2, .L577+0x4
	add	r1, r1, r2
	bl	StringCopy
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	add	r3, r5, r0
	ldrh	r1, [r3, #0x6]
	mov	r0, #0xb1
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bhi	.L344	@cond_branch
	ldr	r0, .L577+0x8
	add	r2, r1, #0
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L577+0xc
	add	r1, r1, r2
	bl	StringCopy
	b	.L345
.L578:
	.align	2, 0
.L577:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar2
	.word	gMoveNames
.L344:
	ldr	r0, .L579
	ldr	r2, .L579+0x4
	ldrb	r1, [r3, #0xa]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	StringCopy
.L345:
	ldr	r4, .L579+0x8
	ldr	r1, .L579+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L579+0x10
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x6
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L580:
	.align	2, 0
.L579:
	.word	gStringVar2
	.word	sInvalidContestMoveNames
	.word	gStringVar4
	.word	gText_MonAppealedWithMove
	.word	gTasks
.L346:
	bl	Contest_RunTextPrinters
	add	r1, r0, #0
	cmp	r1, #0
	beq	.LCB3744
	bl	.L315	@far jump
.LCB3744:
	ldr	r0, .L581
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x5a
	strb	r1, [r0]
	ldr	r1, .L581+0x4
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x7
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L582:
	.align	2, 0
.L581:
	.word	gContestResources
	.word	gTasks
.L348:
	mov	r5, r9
	ldr	r1, [r5]
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	bl	SanitizeMove
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	sub_80DE864
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x11]
	bl	sub_80DE9DC
	add	r0, r4, #0
	bl	SelectContestMoveBankTarget
	add	r0, r4, #0
	bl	DoMoveAnim
	ldr	r1, .L583
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x8
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L584:
	.align	2, 0
.L583:
	.word	gTasks
.L349:
	ldr	r0, .L585
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L585+0x4
	ldrb	r4, [r0]
	cmp	r4, #0
	beq	.LCB3826
	bl	.L315	@far jump
.LCB3826:
	add	r0, r6, #0
	bl	sub_80DE9B0
	ldr	r0, .L585+0x8
	ldr	r1, [r0]
	ldr	r0, [r1]
	add	r0, r0, #0x5a
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L351	@cond_branch
	ldr	r0, .L585+0xc
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r4, [r1, #0x1c]
	mov	r0, #0x9
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L586:
	.align	2, 0
.L585:
	.word	gAnimScriptCallback
	.word	gAnimScriptActive
	.word	gContestResources
	.word	gTasks
.L351:
	ldr	r1, [r1, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L353	@cond_branch
	add	r0, r6, #0
	bl	sub_80DC674
.L353:
	bl	sub_80DE12C
	ldr	r0, .L587
	mov	r4, r8
	lsl	r1, r4, #0x2
	b	.L553
.L588:
	.align	2, 0
.L587:
	.word	gTasks
.L354:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r2, r0, r4
	ldrh	r0, [r2, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1e
	bgt	.LCB3903
	bl	.L315	@far jump
.LCB3903:
	mov	r0, #0x0
	strh	r0, [r2, #0x1c]
	mov	r0, #0x7
	strh	r0, [r2, #0x8]
	bl	.L315	@ far jump
.L356:
	mov	r0, r8
	lsl	r2, r0, #0x2
	add	r0, r2, r0
	lsl	r0, r0, #0x3
	add	r7, r0, r4
	mov	r0, #0x0
	strh	r0, [r7, #0xa]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	mov	ip, r0
	lsl	r1, r6, #0x3
	sub	r0, r1, r6
	lsl	r5, r0, #0x2
	mov	r0, ip
	add	r3, r5, r0
	ldrb	r0, [r3, #0x13]
	mov	sl, r2
	str	r1, [sp, #0x4]
	cmp	r0, #0xff
	beq	.L357	@cond_branch
	ldrb	r1, [r3, #0x13]
	add	r0, r6, #0
	bl	sub_80DD45C
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r0, r5, r0
	mov	r1, #0xff
	strb	r1, [r0, #0x13]
	mov	r0, #0x18
	strh	r0, [r7, #0x8]
	bl	.L315	@ far jump
.L357:
	ldrb	r0, [r3, #0x14]
	cmp	r0, #0xff
	beq	.L359	@cond_branch
	mov	r7, #0x0
	cmp	r7, r6
	beq	.L362	@cond_branch
	mov	r2, ip
	ldrb	r0, [r2, #0x13]
	cmp	r0, #0xff
	bne	.L361	@cond_branch
.L362:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L361	@cond_branch
	cmp	r7, r6
	beq	.L362	@cond_branch
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0xff
	beq	.L362	@cond_branch
.L361:
	cmp	r7, #0x4
	bne	.L366	@cond_branch
	mov	r4, r9
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	ldr	r5, [sp, #0x4]
	sub	r4, r5, r6
	lsl	r4, r4, #0x2
	add	r0, r4, r0
	ldrb	r1, [r0, #0x14]
	add	r0, r6, #0
	bl	sub_80DD45C
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r4, r4, r0
	mov	r0, #0xff
	strb	r0, [r4, #0x14]
	ldr	r1, .L589
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x18
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L590:
	.align	2, 0
.L589:
	.word	gTasks
.L366:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x30
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L359:
	mov	r0, #0x30
	strh	r0, [r7, #0x8]
	bl	.L315	@ far jump
.L369:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB4062
	bl	.L315	@far jump
.LCB4062:
	ldr	r0, .L591
	mov	r2, r8
	lsl	r1, r2, #0x2
.L553:
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x17
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L592:
	.align	2, 0
.L591:
	.word	gTasks
.L371:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x11]
	mov	r3, #0x3
	and	r3, r3, r0
	cmp	r3, #0x1
	bne	.L372	@cond_branch
	mov	r0, #0x5
	bl	sub_80DD720
	b	.L373
.L372:
	cmp	r3, #0x2
	bne	.L374	@cond_branch
	mov	r0, #0x6
	bl	sub_80DD720
	b	.L373
.L374:
	cmp	r3, #0x3
	bne	.L554	@cond_branch
	mov	r0, #0x7
	bl	sub_80DD720
.L373:
	ldr	r0, .L593
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x31
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L594:
	.align	2, 0
.L593:
	.word	gTasks
.L378:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4146
	bl	.L315	@far jump
.LCB4146:
.L554:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x2f
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L380:
	mov	r0, #0x1
	bl	sub_80DE008
	ldr	r0, .L595
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xc
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L596:
	.align	2, 0
.L595:
	.word	gTasks
.L381:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r4, #0x2
	ldrsh	r1, [r0, r4]
	mov	r0, #0x0
	add	r2, r6, #0
	bl	sub_80DC028
	ldr	r1, .L597
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xd
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L598:
	.align	2, 0
.L597:
	.word	gTasks
.L382:
	mov	r0, r9
	ldr	r1, [r0]
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x11]
	ldr	r1, [r1, #0x14]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4222
	bl	.L315	@far jump
.LCB4222:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x23
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L384:
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L385	@cond_branch
	mov	r0, #0x8
	bl	sub_80DD720
.L385:
	ldr	r0, .L599
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x24
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L600:
	.align	2, 0
.L599:
	.word	gTasks
.L386:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4280
	bl	.L315	@far jump
.LCB4280:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x25
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L388:
	add	r0, r6, #0
	mov	r1, #0x1
	bl	sub_80DB5B8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L389	@cond_branch
	ldr	r1, .L601
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	mov	r1, #0x26
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L602:
	.align	2, 0
.L601:
	.word	gTasks
.L389:
	ldr	r0, .L603
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L555
.L604:
	.align	2, 0
.L603:
	.word	gTasks
.L391:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bgt	.LCB4349
	bl	.L315	@far jump
.LCB4349:
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
.L555:
	mov	r0, #0x32
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L393:
	add	r0, r6, #0
	bl	sub_80DB798
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L394	@cond_branch
	mov	r0, #0x63
	bl	PlaySE
.L394:
	ldr	r0, .L605
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x19
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L606:
	.align	2, 0
.L605:
	.word	gTasks
.L395:
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0xa]
	mov	r1, #0x1a
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L396:
	mov	r3, #0x0
	mov	r5, #0x0
	str	r5, [sp]
	mov	r0, r8
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r2, #0xa
	ldrsh	r7, [r0, r2]
	mov	sl, r1
	cmp	r7, #0x3
	bgt	.L398	@cond_branch
	ldr	r5, .L607
	ldr	r2, .L607+0x4
.L400:
	mov	r3, #0x0
	str	r3, [sp]
	add	r0, r3, #0
	cmp	r0, r6
	beq	.L403	@cond_branch
	ldrb	r0, [r5]
	cmp	r0, r7
	bne	.L403	@cond_branch
	ldr	r0, [r2]
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0xff
	beq	.L403	@cond_branch
	mov	r1, #0x1
	str	r1, [sp]
	b	.L402
.L608:
	.align	2, 0
.L607:
	.word	gContestantTurnOrder
	.word	gContestResources
.L403:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	bgt	.L402	@cond_branch
	cmp	r3, r6
	beq	.L403	@cond_branch
	add	r0, r3, r5
	ldrb	r0, [r0]
	cmp	r0, r7
	bne	.L403	@cond_branch
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0xff
	beq	.L403	@cond_branch
	mov	r0, #0x1
	str	r0, [sp]
.L402:
	ldr	r1, [sp]
	cmp	r1, #0
	bne	.L552	@cond_branch
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L400	@cond_branch
.L398:
	ldr	r2, [sp]
	lsl	r0, r2, #0x18
	asr	r2, r0, #0x18
	cmp	r2, #0
	beq	.L409	@cond_branch
.L552:
	mov	r5, sl
	add	r5, r5, r8
	lsl	r5, r5, #0x3
	add	r5, r5, r4
	ldr	r0, .L609
	add	r0, r3, r0
	ldrb	r0, [r0]
	strh	r0, [r5, #0xa]
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	r4, r9
	ldr	r1, [r4]
	ldr	r1, [r1, #0x4]
	lsl	r4, r3, #0x3
	sub	r4, r4, r3
	lsl	r4, r4, #0x2
	add	r1, r4, r1
	ldrb	r1, [r1, #0x13]
	bl	sub_80DD45C
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r4, r4, r0
	mov	r0, #0xff
	strb	r0, [r4, #0x13]
	mov	r0, #0x1b
	strh	r0, [r5, #0x8]
	bl	.L315	@ far jump
.L610:
	.align	2, 0
.L609:
	.word	gContestantTurnOrder
.L409:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r2, [r0, #0xa]
	strh	r2, [r0, #0x1c]
	mov	r1, #0x33
	strh	r1, [r0, #0x8]
	bl	sub_80DB884
	bl	.L315	@ far jump
.L411:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB4560
	bl	.L315	@far jump
.LCB4560:
	ldr	r0, .L611
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1c
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L612:
	.align	2, 0
.L611:
	.word	gTasks
.L413:
	mov	r7, #0x0
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r1, r0, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	mov	r4, #0xa
	ldrsh	r2, [r1, r4]
	ldr	r1, .L613
	mov	sl, r0
	add	r5, r1, #0
	ldrb	r0, [r5]
	cmp	r2, r0
	beq	.L415	@cond_branch
	add	r1, r2, #0
	add	r2, r5, #0
.L416:
	add	r7, r7, #0x1
	add	r0, r7, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L416	@cond_branch
.L415:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0xe]
	ldrh	r0, [r0, #0x2]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	neg	r1, r1
	lsl	r2, r7, #0x18
	lsr	r2, r2, #0x18
	bl	sub_80DC028
	ldr	r1, .L613+0x4
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x1d
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L614:
	.align	2, 0
.L613:
	.word	gContestantTurnOrder
	.word	gTasks
.L419:
	mov	r7, #0x0
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r1, r0, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	mov	r5, #0xa
	ldrsh	r3, [r1, r5]
	ldr	r1, .L615
	mov	sl, r0
	add	r5, r1, #0
	ldrb	r0, [r5]
	cmp	r3, r0
	beq	.L421	@cond_branch
.L422:
	add	r7, r7, #0x1
	add	r0, r7, r1
	ldrb	r0, [r0]
	cmp	r3, r0
	bne	.L422	@cond_branch
.L421:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x14]
	lsl	r0, r7, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB4698
	bl	.L315	@far jump
.LCB4698:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x27
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L616:
	.align	2, 0
.L615:
	.word	gContestantTurnOrder
.L426:
	mov	r7, #0x0
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r1, r0, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r4
	mov	r3, #0xa
	ldrsh	r2, [r1, r3]
	ldr	r1, .L617
	mov	sl, r0
	add	r5, r1, #0
	ldrb	r4, [r5]
	cmp	r2, r4
	beq	.L428	@cond_branch
	add	r1, r2, #0
	add	r2, r5, #0
.L429:
	add	r7, r7, #0x1
	add	r0, r7, r2
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L429	@cond_branch
.L428:
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	bl	sub_80DB5B8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L432	@cond_branch
	ldr	r1, .L617+0x4
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	mov	r1, #0x28
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L618:
	.align	2, 0
.L617:
	.word	gContestantTurnOrder
	.word	gTasks
.L432:
	ldr	r0, .L619
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	b	.L556
.L620:
	.align	2, 0
.L619:
	.word	gTasks
.L434:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	bgt	.LCB4810
	bl	.L315	@far jump
.LCB4810:
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
.L556:
	mov	r0, #0x1e
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L436:
	mov	r7, #0x0
	ldr	r2, .L621
	ldrb	r3, [r2]
	mov	r0, r8
	lsl	r1, r0, #0x2
	add	r0, r1, r0
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	mov	r5, #0xa
	ldrsh	r0, [r4, r5]
	mov	sl, r1
	add	r5, r2, #0
	cmp	r3, r0
	beq	.L438	@cond_branch
	add	r3, r5, #0
	add	r2, r4, #0
.L439:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	bgt	.L438	@cond_branch
	add	r0, r7, r3
	ldrb	r1, [r0]
	mov	r4, #0xa
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	bne	.L439	@cond_branch
.L438:
	lsl	r4, r7, #0x18
	lsr	r0, r4, #0x18
	bl	sub_80DB798
	lsl	r0, r0, #0x18
	add	r6, r4, #0
	cmp	r0, #0
	beq	.L443	@cond_branch
	mov	r0, #0x63
	bl	PlaySE
	b	.L444
.L622:
	.align	2, 0
.L621:
	.word	gContestantTurnOrder
.L443:
	mov	r0, #0x64
	bl	PlaySE
.L444:
	ldr	r5, .L623
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r4, r0, #0x2
	add	r1, r4, r1
	ldrb	r1, [r1, #0x15]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L445	@cond_branch
	lsr	r0, r6, #0x18
	bl	sub_80DC674
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
.L445:
	ldr	r0, .L623+0x4
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	mov	r0, #0x1a
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L624:
	.align	2, 0
.L623:
	.word	gContestResources
	.word	gTasks
.L446:
	mov	r5, r8
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	sl, r2
	cmp	r0, #0x9
	bgt	.LCB4945
	bl	.L315	@far jump
.LCB4945:
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L449	@cond_branch
	ldrb	r1, [r2, #0x11]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L448	@cond_branch
.L449:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L625
	lsl	r1, r6, #0x6
	ldr	r2, .L625+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L625+0x8
	ldr	r1, .L625+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
.L448:
	ldr	r0, .L625+0x10
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x34
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L626:
	.align	2, 0
.L625:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	gText_MonCantAppealNextTurn
	.word	gTasks
.L450:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5015
	bl	.L315	@far jump
.LCB5015:
	ldr	r0, .L627
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L452	@cond_branch
	ldr	r0, .L627+0x4
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x11
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L628:
	.align	2, 0
.L627:
	.word	gContestResources
	.word	gTasks
.L452:
	ldr	r0, .L629
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xe
	strh	r0, [r1, #0x8]
	bl	.L315	@ far jump
.L630:
	.align	2, 0
.L629:
	.word	gTasks
.L454:
	mov	r4, r9
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	lsl	r4, r0, #0x18
	lsr	r5, r4, #0x18
	cmp	r5, #0
	beq	.L455	@cond_branch
	bl	ContestClearGeneralTextWindow
	asr	r0, r4, #0x18
	cmp	r0, #0x1
	bne	.L456	@cond_branch
	ldr	r0, .L631
	b	.L557
.L632:
	.align	2, 0
.L631:
	.word	gText_AppealComboWentOverWell
.L456:
	cmp	r0, #0x2
	bne	.L458	@cond_branch
	ldr	r0, .L633
.L557:
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	b	.L457
.L634:
	.align	2, 0
.L633:
	.word	gText_AppealComboWentOverVeryWell
.L458:
	ldr	r0, .L635
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
.L457:
	mov	r0, #0x3
	bl	sub_80DD720
	ldr	r1, .L635+0x4
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	b	.L558
.L636:
	.align	2, 0
.L635:
	.word	gText_AppealComboWentOverExcellently
	.word	gTasks
.L455:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L637
	lsl	r1, r6, #0x6
	ldr	r2, .L637+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L637+0x8
	ldr	r1, .L637+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	mov	r0, #0x2
	bl	sub_80DD720
	ldr	r1, .L637+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x1c]
.L558:
	mov	r1, #0x2d
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L638:
	.align	2, 0
.L637:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	gText_JudgeLookedAtMonExpectantly
	.word	gTasks
.L461:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5191
	bl	.L315	@far jump
.LCB5191:
	ldrb	r0, [r2, #0x11]
	bl	sub_80DC9B4
	ldr	r1, .L639
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0xf
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L640:
	.align	2, 0
.L639:
	.word	gTasks
.L463:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5216
	bl	.L315	@far jump
.LCB5216:
	ldr	r1, .L641
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x32
	bgt	.LCB5230
	bl	.L315	@far jump
.LCB5230:
	ldr	r7, .L641+0x4
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r5, r0, #0x2
	add	r2, r5, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x10
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L466	@cond_branch
	mov	r1, #0x2
	ldrsh	r0, [r2, r1]
	ldrb	r1, [r2, #0x17]
	add	r2, r6, #0
	bl	sub_80DC028
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	add	r1, r5, r1
	ldrh	r0, [r1, #0x2]
	ldrb	r2, [r1, #0x17]
	add	r0, r0, r2
	strh	r0, [r1, #0x2]
.L466:
	mov	r3, r8
	strh	r3, [r4, #0x8]
	bl	.L315	@ far jump
.L642:
	.align	2, 0
.L641:
	.word	gTasks
	.word	gContestResources
.L467:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB5287
	bl	.L315	@far jump
.LCB5287:
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r1, [r0, #0x1c]
	mov	r1, #0x11
	strh	r1, [r0, #0x8]
	bl	.L315	@ far jump
.L469:
	mov	r3, r9
	ldr	r0, [r3]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L470	@cond_branch
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L643
	lsl	r1, r6, #0x6
	ldr	r2, .L643+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L643+0x8
	ldr	r1, .L643+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r0, .L643+0x10
	mov	r5, r8
	lsl	r4, r5, #0x2
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	bl	sub_80DD720
	mov	r0, #0x2e
	strh	r0, [r4, #0x8]
	b	.L315
.L644:
	.align	2, 0
.L643:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	gText_RepeatedAppeal
	.word	gTasks
.L470:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x29
	strh	r1, [r0, #0x8]
	b	.L315
.L472:
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5380
	b	.L315	@long jump
.LCB5380:
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x13
	strh	r1, [r0, #0x8]
	b	.L315
.L474:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5395
	b	.L315	@long jump
.LCB5395:
	ldr	r5, .L645
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	lsl	r4, r6, #0x3
	sub	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r1, r4, r1
	mov	r2, #0x2
	ldrsh	r0, [r1, r2]
	ldrb	r1, [r1, #0x18]
	neg	r1, r1
	add	r2, r6, #0
	bl	sub_80DC028
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r4, r4, r0
	ldrb	r1, [r4, #0x18]
	ldrh	r0, [r4, #0x2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x2]
	ldr	r1, .L645+0x4
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x12
	strh	r1, [r0, #0x8]
	b	.L315
.L646:
	.align	2, 0
.L645:
	.word	gContestResources
	.word	gTasks
.L476:
	bl	ContestDebugDoPrint
	ldr	r0, .L647
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB5450
	b	.L315	@long jump
.LCB5450:
	ldr	r0, .L647+0x4
	mov	r5, r8
	lsl	r4, r5, #0x2
	add	r4, r4, r8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	strh	r3, [r4, #0x1c]
	bl	ContestClearGeneralTextWindow
	mov	r0, #0x29
	strh	r0, [r4, #0x8]
	b	.L315
.L648:
	.align	2, 0
.L647:
	.word	gContestResources
	.word	gTasks
.L478:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0, #0x10]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L479	@cond_branch
	ldr	r0, [r2]
	lsl	r0, r0, #0x14
	lsr	r0, r0, #0x1d
	cmp	r6, r0
	beq	.L479	@cond_branch
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x39
	strh	r1, [r0, #0x8]
	b	.L315
.L479:
	mov	r3, r9
	ldr	r1, [r3]
	ldr	r0, [r1, #0x10]
	ldrb	r0, [r0]
	str	r0, [sp]
	ldr	r1, [r1, #0x4]
	lsl	r2, r6, #0x3
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	ldrb	r1, [r5, #0x11]
	mov	r0, #0x10
	and	r0, r0, r1
	str	r2, [sp, #0x4]
	cmp	r0, #0
	beq	.L481	@cond_branch
	mov	r4, #0x1
	str	r4, [sp]
	ldr	r0, .L649
	ldrh	r2, [r5, #0x6]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L649+0x4
	add	r1, r1, r2
	bl	StringCopy
	b	.L482
.L650:
	.align	2, 0
.L649:
	.word	gStringVar3
	.word	gMoveNames
.L481:
	ldr	r0, .L651
	ldr	r3, .L651+0x4
	ldr	r2, .L651+0x8
	ldrh	r1, [r5, #0x6]
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1b
	add	r1, r1, r3
	ldr	r1, [r1]
	bl	StringCopy
.L482:
	ldr	r5, [sp]
	lsl	r0, r5, #0x18
	cmp	r0, #0
	ble	.L483	@cond_branch
	ldr	r0, .L651+0xc
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	ldr	r2, [sp, #0x4]
	sub	r0, r2, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L483	@cond_branch
	mov	r3, #0x0
	str	r3, [sp]
.L483:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L651+0x10
	lsl	r1, r6, #0x6
	ldr	r2, .L651+0x14
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L651+0xc
	ldr	r0, [r4]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x13]
	ldr	r5, [sp]
	lsl	r2, r5, #0x18
	asr	r3, r2, #0x18
	add	r0, r3, r0
	strb	r0, [r1, #0x13]
	ldr	r0, [r4]
	ldr	r1, [r0]
	mov	r0, #0x13
	ldrsb	r0, [r1, r0]
	add	r5, r2, #0
	cmp	r0, #0
	bge	.L485	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1, #0x13]
.L485:
	cmp	r3, #0
	bne	.L486	@cond_branch
	ldr	r0, .L651+0x18
	mov	r2, r8
	lsl	r1, r2, #0x2
	b	.L559
.L652:
	.align	2, 0
.L651:
	.word	gStringVar3
	.word	sContestConditions
	.word	gContestMoves
	.word	gContestResources
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gTasks
.L486:
	cmp	r3, #0
	bge	.L488	@cond_branch
	ldr	r0, .L653
	ldr	r1, .L653+0x4
	bl	StringExpandPlaceholders
	b	.L489
.L654:
	.align	2, 0
.L653:
	.word	gStringVar4
	.word	gText_MonsXDidntGoOverWell
.L488:
	cmp	r3, #0
	ble	.L490	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x4
	bgt	.L490	@cond_branch
	ldr	r0, .L655
	ldr	r1, .L655+0x4
	bl	StringExpandPlaceholders
	b	.L489
.L656:
	.align	2, 0
.L655:
	.word	gStringVar4
	.word	gText_MonsXWentOverGreat
.L490:
	ldr	r0, .L657
	ldr	r1, .L657+0x4
	bl	StringExpandPlaceholders
.L489:
	ldr	r0, .L657
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L657+0x8
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
	strh	r0, [r1, #0x1e]
	cmp	r5, #0
	bge	.L492	@cond_branch
	mov	r0, #0x35
	strh	r0, [r1, #0x8]
	b	.L315
.L658:
	.align	2, 0
.L657:
	.word	gStringVar4
	.word	gText_MonsXGotTheCrowdGoing
	.word	gTasks
.L492:
	mov	r0, #0x36
	strh	r0, [r1, #0x8]
	b	.L315
.L494:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	mov	r0, #0x1c
	ldrsh	r3, [r4, r0]
	cmp	r3, #0x1
	beq	.L497	@cond_branch
	cmp	r3, #0x1
	bgt	.L506	@cond_branch
	cmp	r3, #0
	beq	.L496	@cond_branch
	b	.L315
.L506:
	cmp	r3, #0x2
	beq	.L499	@cond_branch
	cmp	r3, #0x3
	beq	.L502	@cond_branch
	b	.L315
.L496:
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x1
	bl	sub_80DDED0
	ldr	r0, .L659
	bl	PlayFanfare
	b	.L560
.L660:
	.align	2, 0
.L659:
	.word	0x187
.L497:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	and	r3, r3, r0
	cmp	r3, #0
	beq	.LCB5774
	b	.L315	@long jump
.LCB5774:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5778
	b	.L315	@long jump
.LCB5778:
	mov	r0, #0x1
	neg	r0, r0
	bl	ShowAndUpdateApplauseMeter
	b	.L560
.L499:
	mov	r2, r9
	ldr	r0, [r2]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x20
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	beq	.LCB5797
	b	.L315	@long jump
.LCB5797:
	ldrh	r0, [r4, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	bgt	.LCB5805
	b	.L315	@long jump
.LCB5805:
	strh	r2, [r4, #0x1e]
	mov	r1, #0x1
	neg	r1, r1
	add	r0, r1, #0
	bl	sub_80DDED0
.L560:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	b	.L315
.L502:
	ldr	r0, .L661
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB5827
	b	.L315	@long jump
.LCB5827:
	strh	r0, [r4, #0x1c]
	strh	r0, [r4, #0x1e]
	mov	r0, #0x2b
	strh	r0, [r4, #0x8]
	b	.L315
.L662:
	.align	2, 0
.L661:
	.word	gPaletteFade
.L507:
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r0, r1, r3
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r5, #0x1c
	ldrsh	r0, [r0, r5]
	mov	sl, r1
	cmp	r0, #0x4
	bls	.LCB5852
	b	.L315	@long jump
.LCB5852:
	lsl	r0, r0, #0x2
	ldr	r1, .L663
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L664:
	.align	2, 0
.L663:
	.word	.L521
	.align	2, 0
	.align	2, 0
.L521:
	.word	.L509
	.word	.L511
	.word	.L513
	.word	.L516
	.word	.L519
.L509:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB5874
	b	.L315	@long jump
.LCB5874:
	mov	r0, #0x1
	mov	r1, #0x1
	b	.L561
.L511:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5892
	b	.L315	@long jump
.LCB5892:
	bl	sub_80DDE0C
	mov	r0, #0xdf
	bl	PlaySE
	mov	r0, #0x1
	bl	ShowAndUpdateApplauseMeter
	b	.L562
.L513:
	mov	r3, r9
	ldr	r2, [r3]
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x20
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB5913
	b	.L315	@long jump
.LCB5913:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r5, r0, r4
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	bgt	.LCB5927
	b	.L315	@long jump
.LCB5927:
	strh	r3, [r5, #0x1e]
	ldr	r0, [r2, #0x4]
	lsl	r4, r6, #0x3
	sub	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r0, r4, r0
	mov	r1, #0x2
	ldrsh	r0, [r0, r1]
	ldr	r1, [r2, #0x10]
	ldrb	r1, [r1, #0x2]
	lsl	r1, r1, #24
	asr	r1, r1, #24
	add	r2, r6, #0
	bl	sub_80DC028
	mov	r2, r9
	ldr	r1, [r2]
	ldr	r0, [r1, #0x4]
	add	r4, r4, r0
	ldr	r0, [r1, #0x10]
	ldrb	r0, [r0, #0x2]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	ldrh	r3, [r4, #0x2]
	add	r0, r0, r3
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	b	.L315
.L516:
	mov	r4, r9
	ldr	r2, [r4]
	ldr	r1, [r2, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5970
	b	.L315	@long jump
.LCB5970:
	ldr	r0, [r2]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB5979
	b	.L315	@long jump
.LCB5979:
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x1
.L561:
	bl	sub_80DDED0
.L562:
	ldr	r0, .L665
	mov	r1, sl
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	b	.L315
.L666:
	.align	2, 0
.L665:
	.word	gTasks
.L519:
	ldr	r0, .L667
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.LCB6013
	b	.L315	@long jump
.LCB6013:
	mov	r0, sl
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r3, [r0, #0x1c]
	strh	r3, [r0, #0x1e]
	mov	r1, #0x2b
	strh	r1, [r0, #0x8]
	b	.L315
.L668:
	.align	2, 0
.L667:
	.word	gPaletteFade
.L523:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB6046
	b	.L315	@long jump
.LCB6046:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L669
	mov	r2, r8
	lsl	r1, r2, #0x2
	b	.L559
.L670:
	.align	2, 0
.L669:
	.word	gTasks
.L525:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L671
	ldr	r5, .L671+0x4
	ldr	r1, [r5]
	ldr	r1, [r1, #0x10]
	ldr	r1, [r1]
	lsl	r1, r1, #0x14
	lsr	r1, r1, #0x1d
	lsl	r1, r1, #0x6
	ldr	r4, .L671+0x8
	add	r1, r1, r4
	bl	StringCopy
	ldr	r0, .L671+0xc
	lsl	r1, r6, #0x6
	add	r1, r1, r4
	bl	StringCopy
	ldr	r0, .L671+0x10
	ldr	r1, [r5]
	ldr	r2, [r1, #0x4]
	lsl	r1, r6, #0x3
	sub	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1, #0x6]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L671+0x14
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L671+0x18
	ldr	r1, .L671+0x1c
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L671+0x20
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3a
	strh	r1, [r0, #0x8]
	b	.L315
.L672:
	.align	2, 0
.L671:
	.word	gStringVar3
	.word	gContestResources
	.word	gContestMons+0x2
	.word	gStringVar1
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_CrowdContinuesToWatchMon
	.word	gTasks
.L526:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB6134
	b	.L315	@long jump
.LCB6134:
	bl	ContestClearGeneralTextWindow
	ldr	r4, .L673
	ldr	r1, .L673+0x4
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L673+0x8
	mov	r4, r8
	lsl	r0, r4, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x3b
	strh	r1, [r0, #0x8]
	b	.L315
.L674:
	.align	2, 0
.L673:
	.word	gStringVar4
	.word	gText_MonsMoveIsIgnored
	.word	gTasks
.L528:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB6167
	b	.L315	@long jump
.LCB6167:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L675
	mov	r5, r8
	lsl	r1, r5, #0x2
	b	.L559
.L676:
	.align	2, 0
.L675:
	.word	gTasks
.L530:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r4, r0, #0x2
	add	r2, r4, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L531	@cond_branch
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x15]
.L531:
	add	r0, r6, #0
	bl	sub_80DC9B4
	ldr	r0, .L677
	lsl	r1, r6, #0x6
	ldr	r2, .L677+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, .L677+0x8
	mov	r2, r9
	ldr	r1, [r2]
	ldr	r1, [r1, #0x4]
	add	r1, r4, r1
	ldrh	r2, [r1, #0x6]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L677+0xc
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L677+0x10
	ldr	r1, .L677+0x14
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L677+0x18
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x22
	strh	r1, [r0, #0x8]
	b	.L315
.L678:
	.align	2, 0
.L677:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar2
	.word	gMoveNames
	.word	gStringVar4
	.word	gText_MonWasTooNervousToMove
	.word	gTasks
.L532:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	beq	.LCB6259
	b	.L315	@long jump
.LCB6259:
	ldr	r0, .L679
	mov	r4, r8
	lsl	r1, r4, #0x2
.L559:
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x37
	strh	r0, [r1, #0x8]
	b	.L315
.L680:
	.align	2, 0
.L679:
	.word	gTasks
.L534:
	bl	TryMoveApplauseMeterOffscreen
	ldr	r0, .L681
	mov	r5, r8
	lsl	r1, r5, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x38
	strh	r0, [r1, #0x8]
	b	.L315
.L682:
	.align	2, 0
.L681:
	.word	gTasks
.L535:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x40
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.LCB6306
	b	.L315	@long jump
.LCB6306:
	mov	r0, #0x13
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x4
	ble	.L537	@cond_branch
	strb	r1, [r2, #0x13]
	bl	UpdateApplauseMeter
.L537:
	ldr	r0, .L683
	mov	r2, r8
	lsl	r1, r2, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0xa
	strh	r0, [r1, #0x8]
	b	.L315
.L684:
	.align	2, 0
.L683:
	.word	gTasks
.L538:
	mov	r3, r8
	lsl	r2, r3, #0x2
	add	r2, r2, r8
	lsl	r2, r2, #0x3
	add	r2, r2, r4
	ldrb	r5, [r2, #0xc]
	ldr	r1, .L685
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L685+0x4
	str	r1, [r0]
	mov	r0, #0xb
	strh	r0, [r2, #0x8]
	b	.L315
.L686:
	.align	2, 0
.L685:
	.word	gSprites
	.word	sub_80DA164
.L539:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrb	r5, [r4, #0xc]
	ldr	r1, .L687
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r6, r0, r1
	add	r0, r6, #0
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L315	@cond_branch
	add	r0, r6, #0
	bl	FreeSpriteOamMatrix
	add	r0, r6, #0
	bl	DestroySprite
	mov	r0, #0x14
	strh	r0, [r4, #0x8]
	b	.L315
.L688:
	.align	2, 0
.L687:
	.word	gSprites
.L541:
	mov	r1, r8
	lsl	r0, r1, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	mov	r1, #0x15
	strh	r1, [r0, #0x8]
	b	.L315
.L542:
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L689
	lsl	r1, r6, #0x6
	ldr	r2, .L689+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r4, .L689+0x8
	ldr	r1, .L689+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L689+0x10
	mov	r2, r8
	lsl	r0, r2, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x20
	strh	r1, [r0, #0x8]
	b	.L315
.L690:
	.align	2, 0
.L689:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	gText_MonWasWatchingOthers
	.word	gTasks
.L543:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	bne	.L315	@cond_branch
	ldr	r0, .L691
	mov	r3, r8
	lsl	r1, r3, #0x2
	add	r1, r1, r8
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x15
	strh	r0, [r1, #0x8]
	b	.L315
.L692:
	.align	2, 0
.L691:
	.word	gTasks
.L545:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r1, r0, r4
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L315	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x1c]
	mov	r0, #0x16
	strh	r0, [r1, #0x8]
	b	.L315
.L547:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strb	r0, [r1, #0x10]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bne	.L548	@cond_branch
	mov	r3, r8
	lsl	r0, r3, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r2, [r0, #0x8]
	strh	r2, [r0, #0xa]
	strh	r2, [r0, #0xc]
	ldr	r1, .L693
	str	r1, [r0]
	b	.L315
.L694:
	.align	2, 0
.L693:
	.word	sub_80DA198
.L548:
	mov	r5, r8
	lsl	r0, r5, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r2, [r0, #0x8]
.L315:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 sub_80D8B38,.Lfe34-sub_80D8B38
	.align	2, 0
	.type	 sub_80DA110,function
	.thumb_func
sub_80DA110:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L696
	ldr	r1, [r1]
	ldr	r3, [r1]
	ldrb	r2, [r3, #0x7]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r3, #0x7]
	bl	DestroyTask
	pop	{r0}
	bx	r0
.L697:
	.align	2, 0
.L696:
	.word	gContestResources
.Lfe35:
	.size	 sub_80DA110,.Lfe35-sub_80DA110
	.align	2, 0
	.type	 sub_80DA134,function
	.thumb_func
sub_80DA134:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x24]
	mov	r3, #0x24
	ldrsh	r2, [r1, r3]
	cmp	r2, #0
	beq	.L699	@cond_branch
	sub	r0, r0, #0x2
	strh	r0, [r1, #0x24]
	b	.L700
.L699:
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	bne	.L700	@cond_branch
	strh	r2, [r1, #0x2e]
	ldr	r0, .L702
	str	r0, [r1, #0x1c]
.L700:
	pop	{r0}
	bx	r0
.L703:
	.align	2, 0
.L702:
	.word	SpriteCallbackDummy
.Lfe36:
	.size	 sub_80DA134,.Lfe36-sub_80DA134
	.align	2, 0
	.type	 sub_80DA164,function
	.thumb_func
sub_80DA164:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x24]
	sub	r0, r0, #0x6
	strh	r0, [r2, #0x24]
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	mov	r3, #0x24
	ldrsh	r1, [r2, r3]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L705	@cond_branch
	ldr	r0, .L706
	str	r0, [r2, #0x1c]
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L705:
	pop	{r0}
	bx	r0
.L707:
	.align	2, 0
.L706:
	.word	SpriteCallbackDummy
.Lfe37:
	.size	 sub_80DA164,.Lfe37-sub_80DA164
	.align	2, 0
	.type	 sub_80DA198,function
	.thumb_func
sub_80DA198:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L721
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r5, r1, r2
	mov	r1, #0x8
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	beq	.L714	@cond_branch
	cmp	r0, #0x1
	bgt	.L719	@cond_branch
	cmp	r0, #0
	beq	.L710	@cond_branch
	b	.L709
.L722:
	.align	2, 0
.L721:
	.word	gTasks
.L719:
	cmp	r0, #0x2
	beq	.L716	@cond_branch
	b	.L709
.L710:
	ldr	r0, .L723
	ldrb	r1, [r0]
	mov	r6, #0x1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L711	@cond_branch
	ldr	r0, .L723+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	bl	sub_80DA8A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L712	@cond_branch
	bl	RankContestants
	bl	sub_80DBA18
.L712:
	ldr	r4, .L723+0x8
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L723+0xc
	add	r1, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	bl	ContestPrintLinkStandby
	strh	r6, [r5, #0x8]
	b	.L709
.L724:
	.align	2, 0
.L723:
	.word	gLinkContestFlags
	.word	gContestResources
	.word	sub_80FCC88
	.word	sub_80DA110
.L711:
	bl	RankContestants
	bl	sub_80DBA18
	b	.L720
.L714:
	ldr	r0, .L725
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L709	@cond_branch
.L720:
	mov	r0, #0x2
	strh	r0, [r5, #0x8]
	b	.L709
.L726:
	.align	2, 0
.L725:
	.word	gContestResources
.L716:
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	ldr	r0, .L727
	str	r0, [r5]
.L709:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L728:
	.align	2, 0
.L727:
	.word	sub_80DA25C
.Lfe38:
	.size	 sub_80DA198,.Lfe38-sub_80DA198
	.align	2, 0
	.type	 sub_80DA25C,function
	.thumb_func
sub_80DA25C:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	sub_80DE008
	ldr	r1, .L730
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	strh	r1, [r0, #0xa]
	ldr	r1, .L730+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L731:
	.align	2, 0
.L730:
	.word	gTasks
	.word	sub_80DA28C
.Lfe39:
	.size	 sub_80DA25C,.Lfe39-sub_80DA25C
	.align	2, 0
	.type	 sub_80DA28C,function
	.thumb_func
sub_80DA28C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L744
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	mov	r0, #0x8
	ldrsh	r5, [r4, r0]
	cmp	r5, #0x1
	beq	.L736	@cond_branch
	cmp	r5, #0x1
	bgt	.L742	@cond_branch
	cmp	r5, #0
	beq	.L734	@cond_branch
	b	.L733
.L745:
	.align	2, 0
.L744:
	.word	gTasks
.L742:
	cmp	r5, #0x2
	beq	.L739	@cond_branch
	b	.L733
.L734:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L733	@cond_branch
	mov	r0, #0x2
	bl	sub_80DE69C
	strh	r5, [r4, #0xa]
	b	.L743
.L736:
	ldr	r0, .L746
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x2
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L733	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L733	@cond_branch
	strh	r1, [r4, #0xa]
.L743:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L733
.L747:
	.align	2, 0
.L746:
	.word	gContestResources
.L739:
	bl	sub_80DC3AC
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xa]
	ldr	r0, .L748
	str	r0, [r4]
.L733:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	sub_80DA31C
.Lfe40:
	.size	 sub_80DA28C,.Lfe40-sub_80DA28C
	.align	2, 0
	.type	 sub_80DA31C,function
	.thumb_func
sub_80DA31C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	sub_80DC3C4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L751	@cond_branch
	ldr	r0, .L752
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L752+0x4
	str	r0, [r1]
.L751:
	pop	{r4}
	pop	{r0}
	bx	r0
.L753:
	.align	2, 0
.L752:
	.word	gTasks
	.word	sub_80DA348
.Lfe41:
	.size	 sub_80DA31C,.Lfe41-sub_80DA31C
	.align	2, 0
	.type	 sub_80DA348,function
	.thumb_func
sub_80DA348:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L755
	ldr	r3, .L755+0x4
	ldr	r1, .L755+0x8
	str	r2, [r1]
	str	r3, [r1, #0x4]
	ldr	r2, .L755+0xc
	str	r2, [r1, #0x8]
	ldr	r1, [r1, #0x8]
	ldr	r2, .L755+0x10
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	mov	r0, #0x2
	strh	r0, [r1, #0xa]
	ldr	r0, .L755+0x14
	str	r0, [r1]
	bx	lr
.L756:
	.align	2, 0
.L755:
	.word	gHeap+0x1a204
	.word	gPlttBufferUnfaded
	.word	0x40000d4
	.word	-0x7bffff00
	.word	gTasks
	.word	sub_80DA38C
.Lfe42:
	.size	 sub_80DA348,.Lfe42-sub_80DA348
	.align	2, 0
	.type	 sub_80DA38C,function
	.thumb_func
sub_80DA38C:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L760
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L758	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	ldrh	r0, [r1, #0xa]
	sub	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L758	@cond_branch
	ldr	r0, .L760+0x4
	str	r0, [r1]
.L758:
	pop	{r0}
	bx	r0
.L761:
	.align	2, 0
.L760:
	.word	gTasks
	.word	sub_80DA3CC
.Lfe43:
	.size	 sub_80DA38C,.Lfe43-sub_80DA38C
	.align	2, 0
	.type	 sub_80DA3CC,function
	.thumb_func
sub_80DA3CC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L766
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r6, r1, r2
	mov	r1, #0x8
	ldrsh	r0, [r6, r1]
	cmp	r0, #0
	bne	.L763	@cond_branch
	ldr	r0, .L766+0x4
	ldr	r0, [r0]
	ldr	r5, .L766+0x8
	ldrb	r1, [r5]
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r4, [r0, #0x1a]
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L766+0xc
	ldrb	r1, [r5]
	lsl	r1, r1, #0x6
	ldr	r2, .L766+0x10
	add	r1, r1, r2
	bl	StringCopy
	ldr	r5, .L766+0x14
	ldr	r0, .L766+0x18
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r1, [r4]
	add	r0, r5, #0
	bl	StringExpandPlaceholders
	add	r0, r5, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldrh	r0, [r6, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x8]
	b	.L764
.L767:
	.align	2, 0
.L766:
	.word	gTasks
	.word	gContestResources
	.word	gContestPlayerMonIndex
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar4
	.word	sRoundResultTexts
.L763:
	bl	Contest_RunTextPrinters
	cmp	r0, #0
	bne	.L764	@cond_branch
	strh	r0, [r6, #0x8]
	ldr	r0, .L768
	str	r0, [r6]
	bl	ContestDebugDoPrint
.L764:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L769:
	.align	2, 0
.L768:
	.word	sub_80DA464
.Lfe44:
	.size	 sub_80DA3CC,.Lfe44-sub_80DA3CC
	.align	2, 0
	.type	 sub_80DA464,function
	.thumb_func
sub_80DA464:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L772
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1d
	ble	.L771	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	bl	sub_80DC3AC
	ldr	r0, .L772+0x4
	str	r0, [r4]
.L771:
	pop	{r4}
	pop	{r0}
	bx	r0
.L773:
	.align	2, 0
.L772:
	.word	gTasks
	.word	sub_80DA49C
.Lfe45:
	.size	 sub_80DA464,.Lfe45-sub_80DA464
	.align	2, 0
	.type	 sub_80DA49C,function
	.thumb_func
sub_80DA49C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	sub_80DC3C4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L775	@cond_branch
	ldr	r1, .L776
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	ldr	r1, .L776+0x4
	str	r1, [r0]
.L775:
	pop	{r4}
	pop	{r0}
	bx	r0
.L777:
	.align	2, 0
.L776:
	.word	gTasks
	.word	sub_80DA4CC
.Lfe46:
	.size	 sub_80DA49C,.Lfe46-sub_80DA49C
	.align	2, 0
	.type	 sub_80DA4CC,function
	.thumb_func
sub_80DA4CC:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_80DE224
	ldr	r1, .L779
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L779+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L780:
	.align	2, 0
.L779:
	.word	gTasks
	.word	sub_80DE424
.Lfe47:
	.size	 sub_80DA4CC,.Lfe47-sub_80DA4CC
	.align	2, 0
	.type	 sub_80DA4F4,function
	.thumb_func
sub_80DA4F4:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_80DE350
	ldr	r1, .L782
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L782+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L783:
	.align	2, 0
.L782:
	.word	gTasks
	.word	sub_80DA51C
.Lfe48:
	.size	 sub_80DA4F4,.Lfe48-sub_80DA4F4
	.align	2, 0
	.type	 sub_80DA51C,function
	.thumb_func
sub_80DA51C:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x8
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r0, #0xc
	bl	GetGpuReg
	mov	r4, sp
	add	r4, r4, #0x2
	strh	r0, [r4]
	mov	r3, sp
	ldrb	r2, [r3]
	mov	r1, #0x4
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3]
	ldrb	r0, [r4]
	and	r1, r1, r0
	strb	r1, [r4]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0x8
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0xc
	bl	SetGpuReg
	ldr	r2, .L788
	ldr	r0, [r2]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x1]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x1]
	ldr	r0, [r2]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x5
	bne	.L785	@cond_branch
	ldr	r0, .L788+0x4
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L788+0x8
	b	.L787
.L789:
	.align	2, 0
.L788:
	.word	gContestResources
	.word	gTasks
	.word	sub_80DA5E8
.L785:
	bl	StartMoveApplauseMeterOnscreen
	ldr	r0, .L790
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L790+0x4
.L787:
	str	r0, [r1]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L791:
	.align	2, 0
.L790:
	.word	gTasks
	.word	sub_80DA5B4
.Lfe49:
	.size	 sub_80DA51C,.Lfe49-sub_80DA51C
	.align	2, 0
	.type	 sub_80DA5B4,function
	.thumb_func
sub_80DA5B4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L794
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L793	@cond_branch
	ldr	r0, .L794+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L794+0x8
	str	r0, [r1]
.L793:
	pop	{r0}
	bx	r0
.L795:
	.align	2, 0
.L794:
	.word	gContestResources
	.word	gTasks
	.word	sub_80D833C
.Lfe50:
	.size	 sub_80DA5B4,.Lfe50-sub_80DA5B4
	.align	2, 0
	.type	 sub_80DA5E8,function
	.thumb_func
sub_80DA5E8:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L804
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L804+0x4
	strh	r1, [r0]
	ldr	r4, .L804+0x8
	mov	r3, #0x0
	ldr	r2, .L804+0xc
	mov	r1, #0x3
.L800:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r0, r3, r0
	ldrh	r0, [r0, #0x4]
	strh	r0, [r2]
	add	r3, r3, #0x1c
	add	r2, r2, #0x2
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L800	@cond_branch
	bl	sub_80DBD18
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L804+0x10
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L802	@cond_branch
	ldr	r0, .L804+0x8
	ldr	r2, [r0]
	ldr	r0, .L804+0x14
	ldrb	r1, [r0]
	ldr	r2, [r2, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r0, [r0, #0x8]
	bl	BravoTrainerPokemonProfile_BeforeInterview1
	b	.L803
.L805:
	.align	2, 0
.L804:
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gContestResources
	.word	gUnknown_02039F10
	.word	gLinkContestFlags
	.word	gContestPlayerMonIndex
.L802:
	bl	sub_80DF250
	bl	sub_80DF4F8
	bl	ContestDebugPrintBitStrings
.L803:
	ldr	r1, .L806
	ldr	r0, .L806+0x4
	ldr	r0, [r0]
	str	r0, [r1]
	ldr	r4, .L806+0x8
	ldr	r1, .L806+0xc
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	ldr	r1, .L806+0x10
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0xc]
	ldr	r1, .L806+0x14
	str	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L807:
	.align	2, 0
.L806:
	.word	gContestRngValue
	.word	gRngValue
	.word	gStringVar4
	.word	gText_AllOutOfAppealTime
	.word	gTasks
	.word	sub_80DA6B4
.Lfe51:
	.size	 sub_80DA5E8,.Lfe51-sub_80DA5E8
	.align	2, 0
	.type	 sub_80DA6B4,function
	.thumb_func
sub_80DA6B4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	bl	Contest_RunTextPrinters
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L809	@cond_branch
	bl	sub_80DE224
	ldr	r0, .L810
	strh	r4, [r0]
	ldr	r1, .L810+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	mov	r0, #0x62
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r1, .L810+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x8]
	ldr	r1, .L810+0xc
	str	r1, [r0]
.L809:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L811:
	.align	2, 0
.L810:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	sub_80DA700
.Lfe52:
	.size	 sub_80DA6B4,.Lfe52-sub_80DA6B4
	.align	2, 0
	.type	 sub_80DA700,function
	.thumb_func
sub_80DA700:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L815
	ldrh	r0, [r1]
	sub	r0, r0, #0x7
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L813	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L813:
	ldrh	r2, [r1]
	cmp	r2, #0
	bne	.L814	@cond_branch
	ldr	r0, .L815+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L815+0x8
	str	r0, [r1]
	strh	r2, [r1, #0x8]
.L814:
	pop	{r0}
	bx	r0
.L816:
	.align	2, 0
.L815:
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	sub_80DA740
.Lfe53:
	.size	 sub_80DA700,.Lfe53-sub_80DA700
	.align	2, 0
	.type	 sub_80DA740,function
	.thumb_func
sub_80DA740:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L822
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x8]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x31
	ble	.L818	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L822+0x4
	ldrb	r0, [r0]
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L819	@cond_branch
	ldr	r0, .L822+0x8
	b	.L821
.L823:
	.align	2, 0
.L822:
	.word	gTasks
	.word	gLinkContestFlags
	.word	sub_80DA7A0
.L819:
	mov	r0, #0x1
	neg	r0, r0
	str	r1, [sp]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L824
.L821:
	str	r0, [r4]
.L818:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L825:
	.align	2, 0
.L824:
	.word	sub_80DA830
.Lfe54:
	.size	 sub_80DA740,.Lfe54-sub_80DA740
	.align	2, 0
	.type	 sub_80DA7A0,function
	.thumb_func
sub_80DA7A0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r5, .L827
	add	r0, r5, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L827+0x4
	add	r1, r5, #0
	bl	SetTaskFuncWithFollowupFunc
	ldr	r1, .L827+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L827+0xc
	str	r1, [r0]
	bl	ContestPrintLinkStandby
	mov	r0, #0x0
	bl	sub_80DC490
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L828:
	.align	2, 0
.L827:
	.word	sub_80FCACC
	.word	sub_80DA7EC
	.word	gTasks
	.word	TaskDummy1
.Lfe55:
	.size	 sub_80DA7A0,.Lfe55-sub_80DA7A0
	.align	2, 0
	.type	 sub_80DA7EC,function
	.thumb_func
sub_80DA7EC:
	push	{lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	DestroyTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r2, .L830
	ldr	r0, .L830+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L830+0x8
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L831:
	.align	2, 0
.L830:
	.word	gTasks
	.word	gContestResources
	.word	sub_80DA830
.Lfe56:
	.size	 sub_80DA7EC,.Lfe56-sub_80DA7EC
	.align	2, 0
	.type	 sub_80DA830,function
	.thumb_func
sub_80DA830:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L834
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L833	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
	ldr	r0, .L834+0x4
	ldr	r1, .L834+0x8
	str	r1, [r0]
	bl	FreeAllWindowBuffers
	bl	FreeContestResources
	bl	FreeMonSpritesGfx
	ldr	r0, .L834+0xc
	bl	SetMainCallback2
.L833:
	pop	{r0}
	bx	r0
.L835:
	.align	2, 0
.L834:
	.word	gPaletteFade
	.word	gFieldCallback
	.word	sub_80DA874
	.word	CB2_ReturnToField
.Lfe57:
	.size	 sub_80DA830,.Lfe57-sub_80DA830
	.align	2, 0
	.type	 sub_80DA874,function
	.thumb_func
sub_80DA874:
	push	{lr}
	bl	ScriptContext2_Disable
	bl	EnableBothScriptContexts
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 sub_80DA874,.Lfe58-sub_80DA874
	.align	2, 0
	.type	 TryPutPlayerLast,function
	.thumb_func
TryPutPlayerLast:
	push	{lr}
	ldr	r0, .L839
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L838	@cond_branch
	ldr	r1, .L839+0x4
	mov	r0, #0x3
	strb	r0, [r1]
.L838:
	pop	{r0}
	bx	r0
.L840:
	.align	2, 0
.L839:
	.word	gLinkContestFlags
	.word	gContestPlayerMonIndex
.Lfe59:
	.size	 TryPutPlayerLast,.Lfe59-TryPutPlayerLast
	.align	2, 0
	.type	 sub_80DA8A4,function
	.thumb_func
sub_80DA8A4:
	push	{lr}
	ldr	r0, .L844
	ldr	r1, .L844+0x4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L842	@cond_branch
	mov	r0, #0x0
	b	.L843
.L845:
	.align	2, 0
.L844:
	.word	gContestPlayerMonIndex
	.word	gUnknown_02039F2B
.L842:
	mov	r0, #0x1
.L843:
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 sub_80DA8A4,.Lfe60-sub_80DA8A4
	.align	2, 0
	.globl	sub_80DA8C8
	.type	 sub_80DA8C8,function
	.thumb_func
sub_80DA8C8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r6, .L866
	ldr	r1, [r6]
	mov	r0, sp
	bl	StringCopy
	ldr	r0, .L866+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L847	@cond_branch
	mov	r0, sp
	bl	sub_80DF9D4
.L847:
	ldr	r5, .L866+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x6
	ldr	r4, .L866+0xc
	add	r0, r0, r4
	mov	r1, sp
	mov	r2, #0x8
	bl	memcpy
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0
	bne	.L848	@cond_branch
	ldrb	r0, [r5]
	lsl	r0, r0, #0x6
	add	r0, r4, r0
	mov	r1, #0xd8
	b	.L865
.L867:
	.align	2, 0
.L866:
	.word	gSaveBlock2Ptr
	.word	gLinkContestFlags
	.word	gContestPlayerMonIndex
	.word	gContestMons+0xd
.L848:
	ldrb	r0, [r5]
	lsl	r0, r0, #0x6
	add	r0, r4, r0
	mov	r1, #0xd9
.L865:
	strb	r1, [r0, #0x8]
	ldr	r7, .L868
	ldr	r6, .L868+0x4
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r1, r7, #0
	add	r1, r1, #0x18
	add	r0, r0, r1
	mov	r1, #0x0
	str	r1, [r0]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r0, r0, r7
	add	r0, r0, #0x2c
	strb	r1, [r0]
	mov	r0, #0x64
	mov	r1, r8
	mul	r1, r1, r0
	ldr	r0, .L868+0x8
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x2
	mov	r2, sp
	bl	GetMonData
	mov	r0, sp
	bl	StringGetEnd10
	ldr	r0, .L868+0xc
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L850	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetMonData
	add	r1, r0, #0
	mov	r0, sp
	bl	sub_80DF9E0
.L850:
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r4, r7, #0x2
	add	r0, r0, r4
	mov	r1, sp
	mov	r2, #0xb
	bl	memcpy
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r0, r0, r4
	mov	r1, sp
	bl	StringCopy
	add	r0, r5, #0
	mov	r1, #0x16
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x26
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x17
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x27
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x18
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x28
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x21
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x29
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x2f
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x2a
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x30
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r1, r1, #0x2b
	strb	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0xd
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1, #0x1e]
	add	r0, r5, #0
	mov	r1, #0xe
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1, #0x20]
	add	r0, r5, #0
	mov	r1, #0xf
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1, #0x22]
	add	r0, r5, #0
	mov	r1, #0x10
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	strh	r0, [r1, #0x24]
	add	r0, r5, #0
	mov	r1, #0x0
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r2, r7, #0
	add	r2, r2, #0x38
	add	r1, r1, r2
	str	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetMonData
	ldrb	r1, [r6]
	lsl	r1, r1, #0x6
	add	r2, r7, #0
	add	r2, r2, #0x3c
	add	r1, r1, r2
	str	r0, [r1]
	add	r0, r5, #0
	mov	r1, #0xc
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldrb	r0, [r6]
	lsl	r0, r0, #0x6
	add	r1, r0, r7
	add	r0, r1, #0
	add	r0, r0, #0x26
	ldrb	r3, [r0]
	add	r0, r0, #0x1
	ldrb	r5, [r0]
	add	r0, r0, #0x1
	ldrb	r6, [r0]
	add	r0, r0, #0x1
	ldrb	r7, [r0]
	add	r0, r0, #0x1
	ldrb	r4, [r0]
	cmp	r2, #0xfe
	bne	.L851	@cond_branch
	add	r3, r3, #0x14
	b	.L852
.L869:
	.align	2, 0
.L868:
	.word	gContestMons
	.word	gContestPlayerMonIndex
	.word	gPlayerParty
	.word	gLinkContestFlags
.L851:
	cmp	r2, #0xff
	bne	.L853	@cond_branch
	lsl	r0, r5, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r5, r0, #0x10
	b	.L852
.L853:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	cmp	r2, r0
	bne	.L855	@cond_branch
	lsl	r0, r6, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r6, r0, #0x10
	b	.L852
.L855:
	ldr	r0, .L870
	cmp	r2, r0
	bne	.L857	@cond_branch
	lsl	r0, r7, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r7, r0, #0x10
	b	.L852
.L871:
	.align	2, 0
.L870:
	.word	0x101
.L857:
	mov	r0, #0x81
	lsl	r0, r0, #0x1
	cmp	r2, r0
	bne	.L852	@cond_branch
	lsl	r0, r4, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0xd
	add	r0, r0, r1
	lsr	r4, r0, #0x10
.L852:
	cmp	r3, #0xff
	ble	.L860	@cond_branch
	mov	r3, #0xff
.L860:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L861	@cond_branch
	mov	r5, #0xff
.L861:
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L862	@cond_branch
	mov	r6, #0xff
.L862:
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L863	@cond_branch
	mov	r7, #0xff
.L863:
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L864	@cond_branch
	mov	r4, #0xff
.L864:
	ldr	r2, .L872
	ldr	r1, .L872+0x4
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x26
	strb	r3, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x27
	strb	r5, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x28
	strb	r6, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x29
	strb	r7, [r0]
	ldrb	r0, [r1]
	lsl	r0, r0, #0x6
	add	r0, r0, r2
	add	r0, r0, #0x2a
	strb	r4, [r0]
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L873:
	.align	2, 0
.L872:
	.word	gContestMons
	.word	gContestPlayerMonIndex
.Lfe61:
	.size	 sub_80DA8C8,.Lfe61-sub_80DA8C8
	.align	2, 0
	.globl	sub_80DAB8C
	.type	 sub_80DAB8C,function
	.thumb_func
sub_80DAB8C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x64
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r6, #0x0
	mov	r7, #0x0
	bl	TryPutPlayerLast
	ldr	r0, .L906
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L875	@cond_branch
	ldr	r0, .L906+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L875	@cond_branch
	mov	r7, #0x1
.L875:
	mov	r5, #0x0
	ldr	r2, .L906+0x8
	ldr	r3, .L906+0xc
.L879:
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r8, r0
	bne	.L878	@cond_branch
	cmp	r7, #0x1
	bne	.L881	@cond_branch
	ldrb	r0, [r3]
	cmp	r0, #0x1
	beq	.L878	@cond_branch
	b	.L883
.L907:
	.align	2, 0
.L906:
	.word	0x864
	.word	gLinkContestFlags
	.word	gContestOpponents
	.word	gPostgameContestOpponentFilter
.L881:
	ldrb	r0, [r3]
	cmp	r0, #0x2
	beq	.L878	@cond_branch
.L883:
	cmp	r4, #0
	bne	.L885	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L905	@cond_branch
.L885:
	cmp	r4, #0x1
	bne	.L887	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	blt	.L905	@cond_branch
.L887:
	cmp	r4, #0x2
	bne	.L889	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L905	@cond_branch
.L889:
	cmp	r4, #0x3
	bne	.L891	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	blt	.L905	@cond_branch
.L891:
	cmp	r4, #0x4
	bne	.L878	@cond_branch
	ldrb	r0, [r2, #0x1c]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L878	@cond_branch
.L905:
	add	r0, r6, #0
	add	r1, r0, #0x1
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	add	r0, r0, sp
	strb	r5, [r0]
.L878:
	add	r2, r2, #0x40
	add	r3, r3, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5f
	bls	.L879	@cond_branch
	mov	r0, sp
	add	r1, r0, r6
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r5, #0x0
	ldr	r7, .L908
.L898:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, .L908+0x4
	lsl	r2, r5, #0x6
	add	r2, r2, r1
	mov	r1, sp
	add	r4, r1, r0
	ldrb	r1, [r4]
	lsl	r1, r1, #0x6
	add	r1, r1, r7
	add	r0, r2, #0
	mov	r2, #0x40
	bl	memcpy
	ldrb	r0, [r4]
	add	r2, r5, #0x1
	sub	r1, r6, #0x1
	cmp	r0, #0xff
	beq	.L900	@cond_branch
	add	r3, r4, #0
.L902:
	ldrb	r0, [r3, #0x1]
	strb	r0, [r3]
	add	r3, r3, #0x1
	ldrb	r0, [r3]
	cmp	r0, #0xff
	bne	.L902	@cond_branch
.L900:
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x18
	add	r5, r2, #0
	cmp	r5, #0x2
	ble	.L898	@cond_branch
	ldr	r0, .L908+0x8
	ldrb	r0, [r0]
	bl	sub_80DA8C8
	add	sp, sp, #0x64
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L909:
	.align	2, 0
.L908:
	.word	gContestOpponents
	.word	gContestMons
	.word	gContestMonPartyIndex
.Lfe62:
	.size	 sub_80DAB8C,.Lfe62-sub_80DAB8C
	.align	2, 0
	.globl	sub_80DACBC
	.type	 sub_80DACBC,function
	.thumb_func
sub_80DACBC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x64
	mov	r8, r2
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	mov	r7, #0x0
	ldr	r0, .L938
	ldrb	r1, [r0]
	mov	r9, r0
	cmp	r1, #0x4
	bne	.LCB8559
	b	.L910	@long jump
.LCB8559:
	mov	r5, #0x0
	ldr	r3, .L938+0x4
	ldr	r6, .L938+0x8
.L915:
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r2, r0
	bne	.L914	@cond_branch
	mov	r0, r8
	cmp	r0, #0x1
	bne	.L917	@cond_branch
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L914	@cond_branch
	b	.L919
.L939:
	.align	2, 0
.L938:
	.word	gNumLinkContestPlayers
	.word	gContestOpponents
	.word	gPostgameContestOpponentFilter
.L917:
	ldrb	r0, [r6]
	cmp	r0, #0x2
	beq	.L914	@cond_branch
.L919:
	cmp	r4, #0
	bne	.L923	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	blt	.L922	@cond_branch
.L923:
	cmp	r4, #0x1
	bne	.L924	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	blt	.L922	@cond_branch
.L924:
	cmp	r4, #0x2
	bne	.L925	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1b
	cmp	r0, #0
	blt	.L922	@cond_branch
.L925:
	cmp	r4, #0x3
	bne	.L926	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	blt	.L922	@cond_branch
.L926:
	cmp	r4, #0x4
	bne	.L914	@cond_branch
	ldrb	r0, [r3, #0x1c]
	lsl	r0, r0, #0x19
	cmp	r0, #0
	bge	.L914	@cond_branch
.L922:
	add	r0, r7, #0
	add	r1, r0, #0x1
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	add	r0, r0, sp
	strb	r5, [r0]
.L914:
	add	r3, r3, #0x40
	add	r6, r6, #0x1
	add	r5, r5, #0x1
	cmp	r5, #0x5f
	bls	.L915	@cond_branch
	mov	r3, sp
	add	r1, r3, r7
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r5, #0x0
	mov	r0, r9
	ldrb	r1, [r0]
	mov	r0, #0x4
	sub	r0, r0, r1
	cmp	r5, r0
	bge	.L910	@cond_branch
	ldr	r3, .L940
	mov	r8, r3
	mov	r6, r9
	mov	r0, #0x2
	add	r0, r0, r8
	mov	r9, r0
.L931:
	bl	GetContestRand
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r7, #0
	bl	__modsi3
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldrb	r0, [r6]
	add	r0, r0, r5
	lsl	r0, r0, #0x6
	add	r0, r0, r8
	ldr	r2, .L940+0x4
	mov	r3, sp
	add	r4, r3, r1
	ldrb	r1, [r4]
	lsl	r1, r1, #0x6
	add	r1, r1, r2
	mov	r2, #0x40
	bl	memcpy
	ldrb	r0, [r6]
	add	r0, r0, r5
	lsl	r0, r0, #0x6
	mov	r1, r8
	add	r1, r1, #0xd
	add	r0, r0, r1
	bl	sub_80DF9D4
	ldrb	r0, [r6]
	add	r0, r0, r5
	lsl	r0, r0, #0x6
	add	r0, r0, r9
	mov	r1, #0x2
	bl	sub_80DF9E0
	ldrb	r0, [r4]
	add	r3, r5, #0x1
	sub	r1, r7, #0x1
	cmp	r0, #0xff
	beq	.L933	@cond_branch
	add	r2, r4, #0
.L935:
	ldrb	r0, [r2, #0x1]
	strb	r0, [r2]
	add	r2, r2, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L935	@cond_branch
.L933:
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	add	r5, r3, #0
	ldrb	r1, [r6]
	mov	r0, #0x4
	sub	r0, r0, r1
	cmp	r5, r0
	blt	.L931	@cond_branch
.L910:
	add	sp, sp, #0x64
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L941:
	.align	2, 0
.L940:
	.word	gContestMons
	.word	gContestOpponents
.Lfe63:
	.size	 sub_80DACBC,.Lfe63-sub_80DACBC
	.align	2, 0
	.globl	GetContestEntryEligibility
	.type	 GetContestEntryEligibility,function
	.thumb_func
GetContestEntryEligibility:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2d
	bl	GetMonData
	cmp	r0, #0
	beq	.L943	@cond_branch
	mov	r0, #0x3
	b	.L957
.L943:
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.L944	@cond_branch
	mov	r0, #0x4
	b	.L957
.L944:
	ldr	r0, .L959
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L951	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L959+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L960:
	.align	2, 0
.L959:
	.word	gSpecialVar_ContestCategory
	.word	.L952
	.align	2, 0
	.align	2, 0
.L952:
	.word	.L946
	.word	.L947
	.word	.L948
	.word	.L949
	.word	.L950
.L946:
	add	r0, r4, #0
	mov	r1, #0x32
	b	.L958
.L947:
	add	r0, r4, #0
	mov	r1, #0x33
	b	.L958
.L948:
	add	r0, r4, #0
	mov	r1, #0x34
	b	.L958
.L949:
	add	r0, r4, #0
	mov	r1, #0x35
	b	.L958
.L950:
	add	r0, r4, #0
	mov	r1, #0x36
.L958:
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	b	.L945
.L951:
	mov	r0, #0x0
	b	.L957
.L945:
	ldr	r0, .L961
	add	r2, r1, #0
	ldrh	r1, [r0]
	mov	r0, #0x2
	cmp	r2, r1
	bhi	.L957	@cond_branch
	mov	r0, #0x0
	cmp	r2, r1
	bcc	.L957	@cond_branch
	mov	r0, #0x1
.L957:
	pop	{r4}
	pop	{r1}
	bx	r1
.L962:
	.align	2, 0
.L961:
	.word	gSpecialVar_ContestRank
.Lfe64:
	.size	 GetContestEntryEligibility,.Lfe64-GetContestEntryEligibility
	.align	2, 0
	.type	 DrawContestantWindowText,function
	.thumb_func
DrawContestantWindowText:
	push	{r4, r5, lr}
	mov	r5, #0x0
.L967:
	ldr	r0, .L969
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	lsl	r4, r5, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PrintContestantTrainerName
	add	r0, r4, #0
	bl	PrintContestantMonName
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L967	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L970:
	.align	2, 0
.L969:
	.word	gContestantTurnOrder
.Lfe65:
	.size	 DrawContestantWindowText,.Lfe65-DrawContestantWindowText
	.align	2, 0
	.type	 Contest_CopyStringWithColor,function
	.thumb_func
Contest_CopyStringWithColor:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r4, r1, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L972
	ldr	r1, .L972+0x4
	bl	StringCopy
	add	r1, r0, #0
	sub	r0, r1, #0x1
	strb	r4, [r0]
	add	r0, r1, #0
	add	r1, r5, #0
	bl	StringCopy
	add	r1, r0, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L973:
	.align	2, 0
.L972:
	.word	gDisplayedStringBattle
	.word	gText_ColorTransparent
.Lfe66:
	.size	 Contest_CopyStringWithColor,.Lfe66-Contest_CopyStringWithColor
	.align	2, 0
	.type	 PrintContestantTrainerName,function
	.thumb_func
PrintContestantTrainerName:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	mov	r2, #0xa0
	lsl	r2, r2, #0x14
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	bl	PrintContestantTrainerNameWithColor
	pop	{r0}
	bx	r0
.Lfe67:
	.size	 PrintContestantTrainerName,.Lfe67-PrintContestantTrainerName
	.align	2, 0
	.type	 PrintContestantTrainerNameWithColor,function
	.thumb_func
PrintContestantTrainerNameWithColor:
	push	{r4, r5, lr}
	add	sp, sp, #-0x24
	add	r4, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L977
	add	r0, sp, #0x4
	bl	StringCopy
	lsl	r1, r5, #0x6
	ldr	r0, .L977+0x4
	add	r1, r1, r0
	add	r0, sp, #0x4
	bl	StringAppend
	add	r0, sp, #0x4
	add	r1, r4, #0
	bl	Contest_CopyStringWithColor
	ldr	r4, .L977+0x8
	mov	r0, #0x7
	add	r1, r4, #0
	mov	r2, #0x60
	bl	GetStringRightAlignXOffset
	add	r2, r0, #0
	cmp	r2, #0x37
	ble	.L976	@cond_branch
	mov	r2, #0x37
.L976:
	ldr	r0, .L977+0xc
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x7
	str	r1, [sp]
	add	r1, r4, #0
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	sp, sp, #0x24
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L978:
	.align	2, 0
.L977:
	.word	gText_Slash
	.word	gContestMons+0xd
	.word	gDisplayedStringBattle
	.word	gContestantTurnOrder
.Lfe68:
	.size	 PrintContestantTrainerNameWithColor,.Lfe68-PrintContestantTrainerNameWithColor
	.align	2, 0
	.type	 PrintContestantMonName,function
	.thumb_func
PrintContestantMonName:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	mov	r2, #0xa0
	lsl	r2, r2, #0x14
	add	r1, r1, r2
	lsr	r1, r1, #0x18
	bl	PrintContestantMonNameWithColor
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 PrintContestantMonName,.Lfe69-PrintContestantMonName
	.align	2, 0
	.type	 PrintContestantMonNameWithColor,function
	.thumb_func
PrintContestantMonNameWithColor:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r0, r4, #0x6
	ldr	r2, .L981
	add	r0, r0, r2
	bl	Contest_CopyStringWithColor
	ldr	r0, .L981+0x4
	add	r4, r4, r0
	ldrb	r0, [r4]
	ldr	r1, .L981+0x8
	mov	r2, #0x7
	str	r2, [sp]
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L982:
	.align	2, 0
.L981:
	.word	gContestMons+0x2
	.word	gContestantTurnOrder
	.word	gDisplayedStringBattle
.Lfe70:
	.size	 PrintContestantMonNameWithColor,.Lfe70-PrintContestantMonNameWithColor
	.align	2, 0
	.type	 sub_80DAFE0,function
	.thumb_func
sub_80DAFE0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r0, r1, #0x18
	cmp	r0, #0x4
	bhi	.L990	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L994
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L995:
	.align	2, 0
.L994:
	.word	.L991
	.align	2, 0
	.align	2, 0
.L991:
	.word	.L985
	.word	.L986
	.word	.L987
	.word	.L988
	.word	.L990
.L985:
	ldr	r0, .L996
	lsl	r2, r2, #0x6
	add	r1, r2, r0
	add	r3, r1, #0
	add	r3, r3, #0x26
	ldrb	r5, [r3]
	add	r3, r3, #0x4
	ldrb	r4, [r3]
	add	r1, r1, #0x27
	b	.L992
.L997:
	.align	2, 0
.L996:
	.word	gContestMons
.L986:
	ldr	r0, .L998
	lsl	r2, r2, #0x6
	add	r1, r2, r0
	add	r3, r1, #0
	add	r3, r3, #0x27
	ldrb	r5, [r3]
	sub	r3, r3, #0x1
	ldrb	r4, [r3]
	add	r1, r1, #0x28
	b	.L992
.L999:
	.align	2, 0
.L998:
	.word	gContestMons
.L987:
	ldr	r1, .L1000
	lsl	r2, r2, #0x6
	add	r3, r2, r1
	add	r0, r3, #0
	add	r0, r0, #0x28
	b	.L993
.L1001:
	.align	2, 0
.L1000:
	.word	gContestMons
.L988:
	ldr	r1, .L1002
	lsl	r2, r2, #0x6
	add	r3, r2, r1
	add	r0, r3, #0
	add	r0, r0, #0x29
.L993:
	ldrb	r5, [r0]
	sub	r0, r0, #0x1
	ldrb	r4, [r0]
	add	r0, r0, #0x2
	ldrb	r3, [r0]
	add	r0, r1, #0
	b	.L984
.L1003:
	.align	2, 0
.L1002:
	.word	gContestMons
.L990:
	ldr	r0, .L1004
	lsl	r2, r2, #0x6
	add	r1, r2, r0
	add	r3, r1, #0
	add	r3, r3, #0x2a
	ldrb	r5, [r3]
	sub	r3, r3, #0x1
	ldrb	r4, [r3]
	add	r1, r1, #0x26
.L992:
	ldrb	r3, [r1]
.L984:
	add	r1, r2, r0
	add	r1, r1, #0x2b
	add	r0, r4, r3
	ldrb	r1, [r1]
	add	r0, r0, r1
	asr	r0, r0, #0x1
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1005:
	.align	2, 0
.L1004:
	.word	gContestMons
.Lfe71:
	.size	 sub_80DAFE0,.Lfe71-sub_80DAFE0
	.align	2, 0
	.globl	sub_80DB09C
	.type	 sub_80DB09C,function
	.thumb_func
sub_80DB09C:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	ldr	r5, .L1012
.L1010:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	add	r1, r6, #0
	bl	sub_80DAFE0
	strh	r0, [r5]
	add	r5, r5, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1010	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1013:
	.align	2, 0
.L1012:
	.word	gContestMonConditions
.Lfe72:
	.size	 sub_80DB09C,.Lfe72-sub_80DB09C
	.align	2, 0
	.type	 sub_80DB0C4,function
	.thumb_func
sub_80DB0C4:
	push	{r4, r5, lr}
	ldr	r0, .L1015
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1015+0x4
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, .L1015+0x8
	mov	r1, #0x70
	mov	r2, #0x24
	mov	r3, #0x1e
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L1015+0xc
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r5, r2, r4
	ldrb	r3, [r5, #0x5]
	mov	r1, #0xf
	and	r1, r1, r3
	mov	r3, #0x10
	orr	r1, r1, r3
	strb	r1, [r5, #0x5]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r1, .L1015+0x10
	str	r1, [r2]
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1016:
	.align	2, 0
.L1015:
	.word	gUnknown_08587C00
	.word	gContest2Pal
	.word	gSpriteTemplate_8587BE8
	.word	gSprites
	.word	SpriteCallbackDummy
.Lfe73:
	.size	 sub_80DB0C4,.Lfe73-sub_80DB0C4
	.align	2, 0
	.type	 sub_80DB120,function
	.thumb_func
sub_80DB120:
	push	{lr}
	ldr	r0, .L1018
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1018+0x4
	bl	LoadCompressedSpritePalette
	ldr	r0, .L1018+0x8
	mov	r1, #0x60
	mov	r2, #0xa
	mov	r3, #0x1d
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1018+0xc
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	mov	r1, #0x3e
	add	r1, r1, r2
	mov	ip, r1
	ldrb	r1, [r1]
	mov	r3, #0x4
	orr	r1, r1, r3
	mov	r3, ip
	strb	r1, [r3]
	ldrh	r1, [r2, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	strh	r1, [r2, #0x2e]
	pop	{r1}
	bx	r1
.L1019:
	.align	2, 0
.L1018:
	.word	gUnknown_08587C08
	.word	gUnknown_08587C10
	.word	gSpriteTemplate_8587C18
	.word	gSprites
.Lfe74:
	.size	 sub_80DB120,.Lfe74-sub_80DB120
	.align	2, 0
	.type	 sub_80DB174,function
	.thumb_func
sub_80DB174:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r1, #0
	add	r6, r2, #0
	add	r4, r3, #0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r0, r5, #0
	bl	SanitizeSpecies
	add	r5, r0, #0
	ldr	r0, .L1026
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L1021	@cond_branch
	lsl	r0, r5, #0x3
	ldr	r1, .L1026+0x4
	add	r0, r0, r1
	ldr	r1, .L1026+0x8
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	add	r2, r5, #0
	add	r3, r6, #0
	bl	HandleLoadSpecialPokePic_2
	b	.L1022
.L1027:
	.align	2, 0
.L1026:
	.word	gContestPlayerMonIndex
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
.L1021:
	lsl	r0, r5, #0x3
	ldr	r1, .L1028
	add	r0, r0, r1
	ldr	r1, .L1028+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	add	r2, r5, #0
	add	r3, r6, #0
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
.L1022:
	add	r0, r5, #0
	add	r1, r7, #0
	add	r2, r6, #0
	bl	GetMonSpritePalFromSpeciesAndPersonality
	mov	r1, #0x90
	lsl	r1, r1, #0x1
	mov	r2, #0x20
	bl	LoadCompressedPalette
	add	r0, r5, #0
	mov	r1, #0x0
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r4, .L1028+0x8
	mov	r0, #0x2
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetBattlerSpriteFinal_Y
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r4, #0
	mov	r1, #0x70
	mov	r3, #0x1e
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L1028+0xc
	mov	r8, r0
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r6, r0, #0x2
	mov	r0, r8
	add	r4, r6, r0
	ldrb	r1, [r4, #0x5]
	mov	r0, #0xf
	and	r0, r0, r1
	mov	r1, #0x20
	orr	r0, r0, r1
	mov	r1, #0xd
	neg	r1, r1
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r4, #0x5]
	mov	r0, #0x2
	bl	GetBattlerSpriteSubpriority
	add	r1, r4, #0
	add	r1, r1, #0x43
	strb	r0, [r1]
	mov	r0, r8
	add	r0, r0, #0x1c
	add	r0, r6, r0
	ldr	r1, .L1028+0x10
	str	r1, [r0]
	ldrb	r0, [r4, #0x5]
	lsr	r0, r0, #0x4
	strh	r0, [r4, #0x2e]
	strh	r5, [r4, #0x32]
	add	r0, r5, #0
	bl	IsSpeciesNotUnown
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1023	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x10
	add	r0, r6, r0
	ldr	r1, .L1028+0x14
	b	.L1025
.L1029:
	.align	2, 0
.L1028:
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	gMultiuseSpriteTemplate
	.word	gSprites
	.word	SpriteCallbackDummy
	.word	gUnknown_082FF6C0
.L1023:
	mov	r0, r8
	add	r0, r0, #0x10
	add	r0, r6, r0
	ldr	r1, .L1030
.L1025:
	str	r1, [r0]
	lsl	r0, r7, #0x4
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	ldr	r1, .L1030+0x4
	add	r0, r0, r1
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
	add	r0, r7, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1031:
	.align	2, 0
.L1030:
	.word	gUnknown_082FF694
	.word	gSprites
.Lfe75:
	.size	 sub_80DB174,.Lfe75-sub_80DB174
	.align	2, 0
	.globl	IsSpeciesNotUnown
	.type	 IsSpeciesNotUnown,function
	.thumb_func
IsSpeciesNotUnown:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xc9
	beq	.L1033	@cond_branch
	mov	r0, #0x1
	b	.L1035
.L1033:
	mov	r0, #0x0
.L1035:
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 IsSpeciesNotUnown,.Lfe76-IsSpeciesNotUnown
	.align	2, 0
	.type	 SwapMoveDescAndContestTilemaps,function
	.thumb_func
SwapMoveDescAndContestTilemaps:
	push	{r4, r5, r6, lr}
	ldr	r5, .L1037
	ldr	r0, [r5]
	ldr	r0, [r0, #0x24]
	mov	r4, #0xa0
	lsl	r4, r4, #0x3
	add	r1, r0, r4
	mov	r6, #0xa0
	lsl	r6, r6, #0x1
	add	r2, r6, #0
	bl	CpuSet
	ldr	r0, [r5]
	ldr	r0, [r0, #0x2c]
	add	r4, r0, r4
	add	r1, r4, #0
	add	r2, r6, #0
	bl	CpuSet
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1038:
	.align	2, 0
.L1037:
	.word	gContestResources
.Lfe77:
	.size	 SwapMoveDescAndContestTilemaps,.Lfe77-SwapMoveDescAndContestTilemaps
	.align	2, 0
	.type	 sub_80DB2EC,function
	.thumb_func
sub_80DB2EC:
	push	{lr}
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldr	r2, .L1048
	ldr	r1, .L1048+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bhi	.L1046	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L1048+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1049:
	.align	2, 0
.L1048:
	.word	gContestEffects
	.word	gContestMoves
	.word	.L1047
	.align	2, 0
	.align	2, 0
.L1047:
	.word	.L1043
	.word	.L1043
	.word	.L1045
	.word	.L1045
	.word	.L1046
	.word	.L1046
	.word	.L1046
	.word	.L1046
	.word	.L1043
.L1043:
	ldr	r0, .L1050
	b	.L1040
.L1051:
	.align	2, 0
.L1050:
	.word	0x9082
.L1045:
	ldr	r0, .L1052
	b	.L1040
.L1053:
	.align	2, 0
.L1052:
	.word	0x9088
.L1046:
	ldr	r0, .L1054
.L1040:
	lsl	r1, r3, #0xc
	mov	r2, #0x90
	lsl	r2, r2, #0x8
	add	r1, r1, r2
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L1055:
	.align	2, 0
.L1054:
	.word	0x9086
.Lfe78:
	.size	 sub_80DB2EC,.Lfe78-sub_80DB2EC
	.align	2, 0
	.type	 PrintContestMoveDescription,function
	.thumb_func
PrintContestMoveDescription:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldr	r1, .L1071
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	ldr	r7, .L1071+0x4
	cmp	r0, #0
	beq	.L1058	@cond_branch
	add	r7, r7, #0x5
	cmp	r0, #0x1
	beq	.L1058	@cond_branch
	add	r7, r7, #0x5
	cmp	r0, #0x2
	beq	.L1058	@cond_branch
	add	r7, r7, #0x40
	cmp	r0, #0x3
	bne	.L1058	@cond_branch
	sub	r7, r7, #0x20
.L1058:
	mov	r6, #0x5
	str	r6, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	mov	r5, #0x11
	str	r5, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r7, #0
	mov	r2, #0xb
	mov	r3, #0x1f
	bl	ContestBG_FillBoxWithIncrementingTile
	add	r1, r7, #0
	add	r1, r1, #0x10
	str	r6, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	mov	r2, #0xb
	mov	r3, #0x20
	bl	ContestBG_FillBoxWithIncrementingTile
	ldr	r2, .L1071+0x8
	ldr	r0, .L1071
	mov	r3, r8
	lsl	r1, r3, #0x3
	add	r0, r1, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r0, [r2, #0x1]
	add	r7, r1, #0
	cmp	r0, #0xff
	bne	.L1065	@cond_branch
	mov	r6, #0x0
	b	.L1066
.L1072:
	.align	2, 0
.L1071:
	.word	gContestMoves
	.word	0x4040
	.word	gContestEffects
.L1065:
	ldrb	r0, [r2, #0x1]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1066:
	cmp	r6, #0x8
	bls	.L1067	@cond_branch
	mov	r6, #0x8
.L1067:
	ldr	r1, .L1073
	mov	r0, #0x8
	str	r0, [sp]
	mov	r5, #0x1
	str	r5, [sp, #0x4]
	mov	r4, #0x11
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x15
	mov	r3, #0x1f
	bl	ContestBG_FillBoxWithTile
	ldr	r1, .L1073+0x4
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x15
	mov	r3, #0x1f
	bl	ContestBG_FillBoxWithTile
	ldr	r1, .L1073+0x8
	ldr	r0, .L1073+0xc
	add	r0, r7, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r0, [r1, #0x2]
	cmp	r0, #0xff
	bne	.L1068	@cond_branch
	mov	r6, #0x0
	b	.L1069
.L1074:
	.align	2, 0
.L1073:
	.word	0x5035
	.word	0x5012
	.word	gContestEffects
	.word	gContestMoves
.L1068:
	ldrb	r0, [r1, #0x2]
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L1069:
	cmp	r6, #0x8
	bls	.L1070	@cond_branch
	mov	r6, #0x8
.L1070:
	ldr	r1, .L1075
	mov	r0, #0x8
	str	r0, [sp]
	mov	r5, #0x1
	str	r5, [sp, #0x4]
	mov	r4, #0x11
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x15
	mov	r3, #0x20
	bl	ContestBG_FillBoxWithTile
	ldr	r1, .L1075+0x4
	str	r6, [sp]
	str	r5, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x15
	mov	r3, #0x20
	bl	ContestBG_FillBoxWithTile
	mov	r0, #0xa
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	ldr	r1, .L1075+0x8
	ldr	r0, .L1075+0xc
	add	r0, r7, r0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0xa
	bl	Contest_PrintTextToBg0WindowStd
	ldr	r1, .L1075+0x10
	mov	r0, #0x9
	bl	Contest_PrintTextToBg0WindowStd
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1076:
	.align	2, 0
.L1075:
	.word	0x5036
	.word	0x5014
	.word	gContestEffectDescriptionPointers
	.word	gContestMoves
	.word	gText_Slash
.Lfe79:
	.size	 PrintContestMoveDescription,.Lfe79-PrintContestMoveDescription
	.align	2, 0
	.type	 sub_80DB4E0,function
	.thumb_func
sub_80DB4E0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r0, .L1080
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	add	r0, r4, #0
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1078	@cond_branch
	cmp	r5, #0
	beq	.L1078	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_80DB2EC
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, #0x2
	mov	r8, r0
	str	r0, [sp]
	mov	r5, #0x1
	str	r5, [sp, #0x4]
	mov	r6, #0x11
	str	r6, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x14
	add	r3, r7, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	r4, r4, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r3, r7, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, r8
	str	r0, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	str	r5, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x14
	bl	ContestBG_FillBoxWithIncrementingTile
	b	.L1079
.L1081:
	.align	2, 0
.L1080:
	.word	gContestantTurnOrder
.L1078:
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x14
	add	r3, r7, #0
	bl	ContestBG_FillBoxWithTile
.L1079:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe80:
	.size	 sub_80DB4E0,.Lfe80-sub_80DB4E0
	.align	2, 0
	.type	 sub_80DB584,function
	.thumb_func
sub_80DB584:
	push	{r4, r5, lr}
	mov	r4, #0x0
	mov	r5, #0x0
.L1086:
	ldr	r0, .L1088
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r0, r5, r0
	ldrh	r0, [r0, #0x6]
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	bl	sub_80DB4E0
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1086	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1089:
	.align	2, 0
.L1088:
	.word	gContestResources
.Lfe81:
	.size	 sub_80DB584,.Lfe81-sub_80DB584
	.align	2, 0
	.type	 sub_80DB5B0,function
	.thumb_func
sub_80DB5B0:
	ldr	r0, .L1091
	bx	lr
.L1092:
	.align	2, 0
.L1091:
	.word	0x2034
.Lfe82:
	.size	 sub_80DB5B0,.Lfe82-sub_80DB5B0
	.align	2, 0
	.type	 sub_80DB5B8,function
	.thumb_func
sub_80DB5B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	sl, r8
	ldr	r0, .L1101
	mov	r9, r0
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r7, r0, #0x2
	add	r3, r7, r1
	ldrb	r0, [r3, #0x10]
	mov	r5, #0x30
	and	r5, r5, r0
	cmp	r5, #0
	bne	.L1094	@cond_branch
	mov	r0, #0x0
	b	.L1099
.L1102:
	.align	2, 0
.L1101:
	.word	gContestResources
.L1094:
	ldr	r0, .L1103
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0xd
	ldrsb	r0, [r3, r0]
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	asr	r4, r0, #0x18
	cmp	r5, #0x10
	bne	.L1095	@cond_branch
	bl	sub_80DB5B0
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x1
	str	r0, [sp]
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r2, #0x13
	add	r3, r6, #0
	bl	ContestBG_FillBoxWithTile
	mov	r1, r8
	cmp	r1, #0
	beq	.L1097	@cond_branch
	mov	r0, #0x5b
	b	.L1100
.L1104:
	.align	2, 0
.L1103:
	.word	gContestantTurnOrder
.L1095:
	add	r3, r6, r4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x13
	bl	ContestBG_FillBoxWithTile
	mov	r0, sl
	cmp	r0, #0
	beq	.L1097	@cond_branch
	mov	r0, #0x26
.L1100:
	bl	PlaySE
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r1, [r0, #0x4]
	add	r1, r7, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x31
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
.L1097:
	mov	r0, #0x1
.L1099:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 sub_80DB5B8,.Lfe83-sub_80DB5B8
	.align	2, 0
	.type	 sub_80DB69C,function
	.thumb_func
sub_80DB69C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	mov	r7, #0x0
	mov	r0, #0x1
	mov	sl, r0
	mov	r1, #0x11
	mov	r9, r1
	mov	r0, #0x0
	mov	r8, r0
.L1109:
	ldr	r0, .L1111
	add	r0, r7, r0
	ldrb	r0, [r0]
	lsl	r4, r0, #0x2
	add	r4, r4, r0
	add	r4, r4, #0x2
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_80DB5B0
	add	r5, r0, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L1111+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r0, r0, r8
	ldrb	r0, [r0, #0xd]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	mov	r1, sl
	str	r1, [sp]
	asr	r6, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x13
	add	r3, r4, #0
	bl	ContestBG_FillBoxWithTile
	add	r4, r4, r6
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, sl
	str	r1, [sp]
	mov	r0, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x13
	add	r3, r4, #0
	bl	ContestBG_FillBoxWithTile
	mov	r1, #0x1c
	add	r8, r8, r1
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L1109	@cond_branch
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1112:
	.align	2, 0
.L1111:
	.word	gContestantTurnOrder
	.word	gContestResources
.Lfe84:
	.size	 sub_80DB69C,.Lfe84-sub_80DB69C
	.align	2, 0
	.type	 sub_80DB748,function
	.thumb_func
sub_80DB748:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x0
	cmp	r1, #0x4
	bhi	.L1114	@cond_branch
	lsl	r0, r1, #0x2
	ldr	r1, .L1122
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1123:
	.align	2, 0
.L1122:
	.word	.L1120
	.align	2, 0
	.align	2, 0
.L1120:
	.word	.L1115
	.word	.L1116
	.word	.L1117
	.word	.L1118
	.word	.L1119
.L1115:
	mov	r0, #0x80
	b	.L1114
.L1116:
	mov	r0, #0x84
	b	.L1114
.L1117:
	mov	r0, #0x86
	b	.L1114
.L1118:
	mov	r0, #0x88
	b	.L1114
.L1119:
	mov	r0, #0x82
.L1114:
	mov	r1, #0x90
	lsl	r1, r1, #0x8
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 sub_80DB748,.Lfe85-sub_80DB748
	.align	2, 0
	.type	 sub_80DB798,function
	.thumb_func
sub_80DB798:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1
	mov	r9, r1
	mov	r1, #0x0
	mov	r8, r1
	ldr	r1, .L1136
	add	r1, r0, r1
	ldrb	r2, [r1]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x2
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	ldr	r1, .L1136+0x4
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldr	r0, [r2, #0x10]
	ldr	r1, .L1136+0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1126	@cond_branch
	ldrb	r0, [r2, #0xf]
	cmp	r0, #0
	beq	.L1125	@cond_branch
.L1126:
	mov	r0, #0x0
	b	.L1135
.L1137:
	.align	2, 0
.L1136:
	.word	gContestantTurnOrder
	.word	gContestResources
	.word	0xff0003
.L1125:
	ldrb	r1, [r2, #0xc]
	mov	r0, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1128	@cond_branch
	mov	r0, #0x1
	b	.L1135
.L1128:
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1131	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1130	@cond_branch
.L1131:
	mov	r0, #0x2
.L1135:
	bl	sub_80DB748
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	b	.L1127
.L1130:
	mov	r0, #0x0
	mov	r9, r0
.L1127:
	mov	r1, r9
	cmp	r1, #0
	beq	.L1133	@cond_branch
	mov	r6, #0x2
	str	r6, [sp]
	mov	r4, #0x1
	str	r4, [sp, #0x4]
	mov	r5, #0x11
	str	r5, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	mov	r1, r8
	mov	r2, #0x14
	add	r3, r7, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	mov	r1, r8
	add	r1, r1, #0x10
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r3, r7, #0x1
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	str	r6, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r4, [sp, #0xc]
	mov	r0, #0x0
	mov	r2, #0x14
	bl	ContestBG_FillBoxWithIncrementingTile
	b	.L1134
.L1133:
	mov	r0, #0x2
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x14
	add	r3, r7, #0
	bl	ContestBG_FillBoxWithTile
.L1134:
	mov	r0, r9
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 sub_80DB798,.Lfe86-sub_80DB798
	.align	2, 0
	.type	 sub_80DB884,function
	.thumb_func
sub_80DB884:
	push	{r4, lr}
	mov	r4, #0x0
.L1142:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80DB798
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1142	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 sub_80DB884,.Lfe87-sub_80DB884
	.align	2, 0
	.type	 ContestClearGeneralTextWindow,function
	.thumb_func
ContestClearGeneralTextWindow:
	push	{lr}
	mov	r0, #0x4
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x4
	mov	r1, #0x2
	bl	CopyWindowToVram
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	pop	{r0}
	bx	r0
.Lfe88:
	.size	 ContestClearGeneralTextWindow,.Lfe88-ContestClearGeneralTextWindow
	.align	2, 0
	.type	 GetChosenMove,function
	.thumb_func
GetChosenMove:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	add	r0, r4, #0
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1146	@cond_branch
	mov	r0, #0x0
	b	.L1149
.L1146:
	ldr	r0, .L1152
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L1147	@cond_branch
	add	r0, r4, #0
	bl	ContestAI_ResetAI
	bl	ContestAI_GetActionToUse
	lsl	r0, r0, #0x18
	ldr	r2, .L1152+0x4
	lsr	r0, r0, #0x17
	lsl	r1, r4, #0x6
	b	.L1151
.L1153:
	.align	2, 0
.L1152:
	.word	gContestPlayerMonIndex
	.word	gContestMons
.L1147:
	ldr	r2, .L1154
	ldr	r0, .L1154+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	lsl	r1, r5, #0x6
.L1151:
	add	r0, r0, r1
	add	r2, r2, #0x1e
	add	r0, r0, r2
	ldrh	r0, [r0]
.L1149:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1155:
	.align	2, 0
.L1154:
	.word	gContestMons
	.word	gContestResources
.Lfe89:
	.size	 GetChosenMove,.Lfe89-GetChosenMove
	.align	2, 0
	.type	 GetAllChosenMoves,function
	.thumb_func
GetAllChosenMoves:
	push	{r4, r5, lr}
	mov	r4, #0x0
	mov	r5, #0x0
.L1160:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetChosenMove
	ldr	r1, .L1162
	ldr	r1, [r1]
	ldr	r1, [r1, #0x4]
	add	r1, r5, r1
	strh	r0, [r1, #0x6]
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1160	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1163:
	.align	2, 0
.L1162:
	.word	gContestResources
.Lfe90:
	.size	 GetAllChosenMoves,.Lfe90-GetAllChosenMoves
	.align	2, 0
	.type	 RankContestants,function
	.thumb_func
RankContestants:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	ldr	r5, .L1192
	mov	r4, sp
	mov	r3, #0x0
	mov	r6, #0x3
.L1168:
	ldr	r2, [r5]
	ldr	r1, [r2, #0x4]
	add	r1, r3, r1
	ldrh	r0, [r1, #0x2]
	ldrh	r7, [r1, #0x4]
	add	r0, r0, r7
	strh	r0, [r1, #0x4]
	ldr	r0, [r2, #0x4]
	add	r0, r3, r0
	ldrh	r0, [r0, #0x4]
	strh	r0, [r4]
	add	r4, r4, #0x2
	add	r3, r3, #0x1c
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L1168	@cond_branch
	mov	r6, #0x0
.L1173:
	mov	r4, #0x3
	cmp	r4, r6
	ble	.L1172	@cond_branch
.L1177:
	sub	r5, r4, #0x1
	lsl	r0, r5, #0x1
	mov	r1, sp
	add	r3, r1, r0
	lsl	r0, r4, #0x1
	add	r2, r1, r0
	ldrh	r4, [r3]
	mov	r7, #0x0
	ldrsh	r1, [r3, r7]
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L1176	@cond_branch
	ldrh	r0, [r2]
	strh	r4, [r2]
	strh	r0, [r3]
.L1176:
	add	r4, r5, #0
	cmp	r4, r6
	bgt	.L1177	@cond_branch
.L1172:
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L1173	@cond_branch
	mov	r6, #0x0
	mov	r0, #0x4
	neg	r0, r0
	mov	r9, r0
	ldr	r1, .L1192
	mov	r8, r1
	mov	r7, #0x3
	mov	ip, r7
.L1184:
	mov	r4, #0x0
	lsl	r0, r6, #0x3
	add	r7, r6, #0x1
	sub	r0, r0, r6
	lsl	r5, r0, #0x2
	mov	r3, sp
.L1188:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r2, r5, r0
	mov	r6, #0x4
	ldrsh	r1, [r2, r6]
	mov	r6, #0x0
	ldrsh	r0, [r3, r6]
	cmp	r1, r0
	bne	.L1187	@cond_branch
	mov	r0, ip
	and	r4, r4, r0
	ldrb	r1, [r2, #0xb]
	mov	r0, r9
	and	r0, r0, r1
	orr	r0, r0, r4
	strb	r0, [r2, #0xb]
	b	.L1183
.L1193:
	.align	2, 0
.L1192:
	.word	gContestResources
.L1187:
	add	r3, r3, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1188	@cond_branch
.L1183:
	add	r6, r7, #0
	cmp	r6, #0x3
	ble	.L1184	@cond_branch
	mov	r0, #0x1
	bl	SortContestants
	bl	ApplyNextTurnOrder
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe91:
	.size	 RankContestants,.Lfe91-RankContestants
	.align	2, 0
	.type	 sub_80DBA18,function
	.thumb_func
sub_80DBA18:
	push	{r4, r5, lr}
	ldr	r4, .L1210
	mov	r2, #0x0
	mov	r3, #0x3
.L1198:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r1, r2, r0
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0
	bne	.L1199	@cond_branch
	mov	r1, #0x5
	b	.L1200
.L1211:
	.align	2, 0
.L1210:
	.word	gContestResources
.L1199:
	mov	r5, #0x2
	ldrsh	r0, [r1, r5]
	mov	r1, #0x0
	cmp	r0, #0
	ble	.L1200	@cond_branch
	mov	r1, #0x1
	cmp	r0, #0x1d
	ble	.L1200	@cond_branch
	mov	r1, #0x2
	cmp	r0, #0x3b
	ble	.L1200	@cond_branch
	mov	r1, #0x4
	cmp	r0, #0x4f
	bgt	.L1200	@cond_branch
	mov	r1, #0x3
.L1200:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r0, r2, r0
	strb	r1, [r0, #0x1a]
	add	r2, r2, #0x1c
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L1198	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe92:
	.size	 sub_80DBA18,.Lfe92-sub_80DBA18
	.align	2, 0
	.type	 ContestantCanUseTurn,function
	.thumb_func
ContestantCanUseTurn:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1217
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1214	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1213	@cond_branch
.L1214:
	mov	r0, #0x0
	b	.L1216
.L1218:
	.align	2, 0
.L1217:
	.word	gContestResources
.L1213:
	mov	r0, #0x1
.L1216:
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 ContestantCanUseTurn,.Lfe93-ContestantCanUseTurn
	.align	2, 0
	.type	 sub_80DBAA0,function
	.thumb_func
sub_80DBAA0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r5, .L1233
	mov	r0, #0x0
	mov	r8, r0
	mov	r1, #0x7
	neg	r1, r1
	mov	sl, r1
	mov	r0, #0x2
	neg	r0, r0
	mov	r9, r0
	mov	r4, #0x0
	mov	r6, #0x3
.L1223:
	ldr	r1, [r5]
	ldr	r0, [r1, #0x4]
	add	r0, r4, r0
	mov	r2, #0x0
	strh	r2, [r0, #0x2]
	ldr	r0, [r1, #0x4]
	add	r0, r4, r0
	strh	r2, [r0]
	ldr	r0, [r1, #0x4]
	add	r0, r4, r0
	mov	r1, r8
	strb	r1, [r0, #0x12]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r3, r4, r0
	ldrb	r2, [r3, #0xc]
	mov	r0, #0x6
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L1224	@cond_branch
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1e
	sub	r0, r0, #0x1
	mov	r1, #0x3
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	mov	r1, sl
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0xc]
.L1224:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, r8
	strb	r1, [r0, #0xe]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, r9
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, r8
	strb	r1, [r0, #0xf]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r7, #0x5
	neg	r7, r7
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x9
	neg	r0, r0
	mov	ip, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0xc]
	mov	r0, r9
	and	r0, r0, r2
	strb	r0, [r1, #0xc]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, #0xff
	strb	r1, [r0, #0x13]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, #0x1
	neg	r1, r1
	strb	r1, [r0, #0x14]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x31
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	ldr	r0, [r5]
	ldr	r2, [r0, #0x4]
	add	r2, r4, r2
	ldrb	r3, [r2, #0x15]
	lsl	r1, r3, #0x1f
	lsr	r1, r1, #0x1f
	lsl	r1, r1, #0x2
	add	r0, r7, #0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x15]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, r9
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r2, r4, r0
	ldrb	r1, [r2, #0x11]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1225	@cond_branch
	ldrb	r1, [r2, #0xc]
	mov	r0, sl
	and	r0, r0, r1
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
.L1225:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r2, r4, r0
	ldrb	r1, [r2, #0x11]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1226	@cond_branch
	ldrb	r0, [r2, #0xb]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0xb]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	mov	r0, ip
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
.L1226:
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x11]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x11]
	add	r4, r4, #0x1c
	sub	r6, r6, #0x1
	cmp	r6, #0
	blt	.LCB11229
	b	.L1223	@long jump
.LCB11229:
	mov	r6, #0x0
	ldr	r5, .L1233
	mov	r7, #0x0
	mov	r4, #0x0
.L1231:
	ldr	r3, [r5]
	ldr	r0, [r3, #0x4]
	add	r0, r4, r0
	ldrh	r1, [r0, #0x6]
	strh	r1, [r0, #0x8]
	ldr	r2, [r3]
	lsl	r1, r6, #0x1
	ldrb	r0, [r2, #0x1]
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r2, r2, #0x1c
	add	r2, r2, r1
	ldr	r0, [r3, #0x4]
	add	r0, r4, r0
	ldrh	r0, [r0, #0x6]
	strh	r0, [r2]
	ldr	r0, [r3, #0x4]
	add	r0, r4, r0
	ldrh	r0, [r0, #0x6]
	bl	Contest_GetMoveExcitement
	ldr	r1, [r5]
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x2
	add	r1, r6, r1
	add	r2, r2, #0x44
	add	r2, r2, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	strh	r7, [r0, #0x6]
	add	r4, r4, #0x1c
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L1231	@cond_branch
	ldr	r0, .L1233
	ldr	r0, [r0]
	ldr	r2, [r0, #0x10]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1234:
	.align	2, 0
.L1233:
	.word	gContestResources
.Lfe94:
	.size	 sub_80DBAA0,.Lfe94-sub_80DBAA0
	.align	2, 0
	.globl	Contest_IsMonsTurnDisabled
	.type	 Contest_IsMonsTurnDisabled,function
	.thumb_func
Contest_IsMonsTurnDisabled:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1240
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1237	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1236	@cond_branch
.L1237:
	mov	r0, #0x1
	b	.L1239
.L1241:
	.align	2, 0
.L1240:
	.word	gContestResources
.L1236:
	mov	r0, #0x0
.L1239:
	pop	{r1}
	bx	r1
.Lfe95:
	.size	 Contest_IsMonsTurnDisabled,.Lfe95-Contest_IsMonsTurnDisabled
	.align	2, 0
	.type	 sub_80DBCE0,function
	.thumb_func
sub_80DBCE0:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	sub_80DBD34
	ldr	r1, .L1243
	lsl	r4, r4, #0x1
	add	r1, r4, r1
	strh	r0, [r1]
	ldr	r2, .L1243+0x4
	add	r2, r4, r2
	ldr	r1, .L1243+0x8
	add	r4, r4, r1
	ldrh	r4, [r4]
	add	r0, r0, r4
	strh	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1244:
	.align	2, 0
.L1243:
	.word	gUnknown_02039F18
	.word	gUnknown_02039F08
	.word	gContestMonConditions
.Lfe96:
	.size	 sub_80DBCE0,.Lfe96-sub_80DBCE0
	.align	2, 0
	.type	 sub_80DBD18,function
	.thumb_func
sub_80DBD18:
	push	{r4, lr}
	mov	r4, #0x0
.L1249:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80DBCE0
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1249	@cond_branch
	bl	DetermineFinalStandings
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 sub_80DBD18,.Lfe97-sub_80DBD18
	.align	2, 0
	.type	 sub_80DBD34,function
	.thumb_func
sub_80DBD34:
	lsl	r0, r0, #0x18
	ldr	r1, .L1252
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	lsl	r0, r0, #0x11
	asr	r0, r0, #0x10
	bx	lr
.L1253:
	.align	2, 0
.L1252:
	.word	gUnknown_02039F10
.Lfe98:
	.size	 sub_80DBD34,.Lfe98-sub_80DBD34
	.align	2, 0
	.type	 DetermineFinalStandings,function
	.thumb_func
DetermineFinalStandings:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x70
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, sp
	add	r1, r1, #0x8
	str	r1, [sp, #0x64]
	mov	r3, sp
	add	r3, r3, #0xc
	str	r3, [sp, #0x68]
	mov	r6, sp
	add	r6, r6, #0x14
	str	r6, [sp, #0x6c]
	mov	r4, sp
.L1258:
	bl	Random
	strh	r0, [r4]
	mov	r2, #0x0
	cmp	r2, r9
	bge	.L1257	@cond_branch
	mov	r1, sp
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L1261	@cond_branch
	sub	r4, r4, #0x2
	mov	r7, #0x1
	neg	r7, r7
	add	r9, r9, r7
	b	.L1257
.L1261:
	add	r2, r2, #0x1
	cmp	r2, r9
	bge	.L1257	@cond_branch
	lsl	r0, r2, #0x1
	mov	r3, sp
	add	r1, r3, r0
	ldrh	r0, [r4]
	ldrh	r1, [r1]
	cmp	r0, r1
	bne	.L1261	@cond_branch
	sub	r4, r4, #0x2
	mov	r6, #0x1
	neg	r6, r6
	add	r9, r9, r6
.L1257:
	add	r4, r4, #0x2
	mov	r7, #0x1
	add	r9, r9, r7
	mov	r0, r9
	cmp	r0, #0x3
	ble	.L1258	@cond_branch
	mov	r1, #0x0
	mov	r9, r1
	mov	r4, sp
	ldr	r6, .L1287
	ldr	r2, [sp, #0x64]
	ldr	r5, .L1287+0x4
	ldr	r3, [sp, #0x68]
.L1269:
	mov	r7, r9
	lsl	r1, r7, #0x4
	mov	r7, #0x0
	ldrsh	r0, [r6, r7]
	str	r0, [r2]
	mov	r7, #0x0
	ldrsh	r0, [r5, r7]
	str	r0, [r3]
	ldrh	r0, [r4]
	str	r0, [r2, #0x8]
	ldr	r0, [sp, #0x6c]
	add	r1, r0, r1
	mov	r7, r9
	str	r7, [r1]
	add	r4, r4, #0x2
	add	r6, r6, #0x2
	add	r2, r2, #0x10
	add	r5, r5, #0x2
	add	r3, r3, #0x10
	mov	r0, #0x1
	add	r9, r9, r0
	mov	r1, r9
	cmp	r1, #0x3
	ble	.L1269	@cond_branch
	mov	r3, #0x0
	mov	r9, r3
.L1274:
	mov	r4, #0x3
	cmp	r4, r9
	ble	.L1273	@cond_branch
	add	r7, sp, #0x48
	ldr	r6, [sp, #0x68]
	str	r6, [sp, #0x58]
	ldr	r0, [sp, #0x64]
	add	r0, r0, #0x8
	str	r0, [sp, #0x5c]
	ldr	r1, [sp, #0x6c]
	str	r1, [sp, #0x60]
.L1278:
	sub	r3, r4, #0x1
	mov	sl, r3
	mov	r0, sl
	add	r1, r4, #0
	ldr	r2, [sp, #0x64]
	bl	sub_80DBF30
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1277	@cond_branch
	mov	r6, sl
	lsl	r2, r6, #0x4
	ldr	r0, [sp, #0x64]
	add	r3, r0, r2
	ldr	r0, [r3]
	str	r0, [sp, #0x48]
	ldr	r1, [sp, #0x58]
	add	r6, r1, r2
	ldr	r0, [r6]
	str	r0, [r7, #0x4]
	ldr	r0, [sp, #0x5c]
	add	r0, r0, r2
	mov	r8, r0
	ldr	r0, [r0]
	str	r0, [r7, #0x8]
	ldr	r1, [sp, #0x60]
	add	r2, r1, r2
	ldr	r0, [r2]
	str	r0, [r7, #0xc]
	lsl	r1, r4, #0x4
	ldr	r0, [sp, #0x64]
	add	r5, r0, r1
	ldr	r0, [r5]
	str	r0, [r3]
	ldr	r3, [sp, #0x58]
	add	r4, r3, r1
	ldr	r0, [r4]
	str	r0, [r6]
	ldr	r6, [sp, #0x5c]
	add	r3, r6, r1
	ldr	r0, [r3]
	mov	r6, r8
	str	r0, [r6]
	ldr	r0, [sp, #0x60]
	add	r1, r0, r1
	ldr	r0, [r1]
	str	r0, [r2]
	ldr	r0, [sp, #0x48]
	str	r0, [r5]
	ldr	r0, [r7, #0x4]
	str	r0, [r4]
	ldr	r0, [r7, #0x8]
	str	r0, [r3]
	ldr	r0, [r7, #0xc]
	str	r0, [r1]
.L1277:
	mov	r4, sl
	cmp	r4, r9
	bgt	.L1278	@cond_branch
.L1273:
	mov	r1, #0x1
	add	r9, r9, r1
	mov	r3, r9
	cmp	r3, #0x2
	ble	.L1274	@cond_branch
	mov	r6, #0x0
	mov	r9, r6
	ldr	r2, .L1287+0x8
	ldr	r1, [sp, #0x6c]
.L1285:
	ldr	r0, [r1]
	add	r0, r0, r2
	mov	r7, r9
	strb	r7, [r0]
	add	r1, r1, #0x10
	mov	r0, #0x1
	add	r9, r9, r0
	mov	r3, r9
	cmp	r3, #0x3
	ble	.L1285	@cond_branch
	add	sp, sp, #0x70
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1288:
	.align	2, 0
.L1287:
	.word	gUnknown_02039F08
	.word	gContestMonConditions
	.word	gContestFinalStandings
.Lfe99:
	.size	 DetermineFinalStandings,.Lfe99-DetermineFinalStandings
	.align	2, 0
	.globl	SaveLinkContestResults
	.type	 SaveLinkContestResults,function
	.thumb_func
SaveLinkContestResults:
	push	{lr}
	ldr	r0, .L1292
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1290	@cond_branch
	ldr	r0, .L1292+0x4
	ldr	r2, [r0]
	ldr	r1, .L1292+0x8
	ldr	r0, .L1292+0xc
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1
	ldr	r0, .L1292+0x10
	ldrh	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	ldr	r0, .L1292+0x14
	add	r2, r2, r0
	add	r2, r2, r1
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	ldr	r1, .L1292+0x18
	cmp	r0, r1
	ble	.L1291	@cond_branch
	add	r0, r1, #0
.L1291:
	strh	r0, [r2]
.L1290:
	pop	{r0}
	bx	r0
.L1293:
	.align	2, 0
.L1292:
	.word	gLinkContestFlags
	.word	gSaveBlock2Ptr
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestCategory
	.word	0x624
	.word	0x270f
.Lfe100:
	.size	 SaveLinkContestResults,.Lfe100-SaveLinkContestResults
	.align	2, 0
	.type	 sub_80DBF30,function
	.thumb_func
sub_80DBF30:
	push	{lr}
	lsl	r0, r0, #0x4
	add	r0, r0, r2
	lsl	r1, r1, #0x4
	add	r3, r1, r2
	ldr	r2, [r0]
	ldr	r1, [r3]
	cmp	r2, r1
	blt	.L1305	@cond_branch
	cmp	r2, r1
	bgt	.L1306	@cond_branch
	ldr	r2, [r0, #0x4]
	ldr	r1, [r3, #0x4]
	cmp	r2, r1
	blt	.L1305	@cond_branch
	cmp	r2, r1
	ble	.L1301	@cond_branch
.L1306:
	mov	r2, #0x0
	b	.L1296
.L1301:
	ldr	r1, [r0, #0x8]
	ldr	r0, [r3, #0x8]
	mov	r2, #0x0
	cmp	r1, r0
	bge	.L1296	@cond_branch
.L1305:
	mov	r2, #0x1
.L1296:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.Lfe101:
	.size	 sub_80DBF30,.Lfe101-sub_80DBF30
	.align	2, 0
	.type	 ContestPrintLinkStandby,function
	.thumb_func
ContestPrintLinkStandby:
	push	{lr}
	ldr	r0, .L1308
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L1308+0x4
	strh	r1, [r0]
	bl	ContestClearGeneralTextWindow
	ldr	r0, .L1308+0x8
	mov	r1, #0x0
	bl	Contest_StartTextPrinter
	pop	{r0}
	bx	r0
.L1309:
	.align	2, 0
.L1308:
	.word	gBattle_BG0_Y
	.word	gBattle_BG2_Y
	.word	gText_LinkStandby4
.Lfe102:
	.size	 ContestPrintLinkStandby,.Lfe102-ContestPrintLinkStandby
	.align	2, 0
	.type	 FillContestantWindowBgs,function
	.thumb_func
FillContestantWindowBgs:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	mov	r5, #0x80
	lsl	r5, r5, #0x12
	mov	r4, #0x3
.L1314:
	lsr	r3, r5, #0x18
	mov	r0, #0x8
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x16
	bl	ContestBG_FillBoxWithTile
	mov	r0, #0xa0
	lsl	r0, r0, #0x13
	add	r5, r5, r0
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L1314	@cond_branch
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe103:
	.size	 FillContestantWindowBgs,.Lfe103-FillContestantWindowBgs
	.align	2, 0
	.type	 sub_80DBFC8,function
	.thumb_func
sub_80DBFC8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1323
	cmp	r0, #0
	beq	.L1318	@cond_branch
	ldr	r1, .L1323+0x4
	cmp	r0, #0x1
	beq	.L1318	@cond_branch
	ldr	r1, .L1323+0x8
	cmp	r0, #0x2
	bne	.L1318	@cond_branch
	ldr	r1, .L1323+0xc
.L1318:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L1324:
	.align	2, 0
.L1323:
	.word	0x5011
	.word	0x6011
	.word	0x8011
	.word	0x7011
.Lfe104:
	.size	 sub_80DBFC8,.Lfe104-sub_80DBFC8
	.align	2, 0
	.type	 sub_80DBFFC,function
	.thumb_func
sub_80DBFFC:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	asr	r2, r0, #0x18
	cmp	r2, #0x10
	ble	.L1326	@cond_branch
	mov	r1, #0x10
	b	.L1327
.L1326:
	mov	r0, #0x10
	neg	r0, r0
	cmp	r2, r0
	bge	.L1327	@cond_branch
	mov	r1, #0xf0
.L1327:
	lsl	r0, r1, #0x18
	asr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe105:
	.size	 sub_80DBFFC,.Lfe105-sub_80DBFFC
	.align	2, 0
	.type	 sub_80DC028,function
	.thumb_func
sub_80DC028:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r5, r0, #0
	add	r6, r1, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	ldr	r0, .L1334
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x2]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r0, .L1334+0x4
	mov	r1, #0x14
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r5, #0
	bl	sub_80DBFFC
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	add	r5, r5, r6
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	add	r0, r5, #0
	bl	sub_80DBFFC
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	sub	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, r8
	bl	sub_80DBFC8
	ldr	r2, .L1334+0x8
	lsl	r3, r7, #0x2
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	add	r0, r4, #0
	cmp	r4, #0
	bge	.L1330	@cond_branch
	neg	r0, r4
.L1330:
	strh	r0, [r1, #0x8]
	lsl	r0, r5, #0x18
	asr	r0, r0, #0x18
	strh	r0, [r1, #0xa]
	cmp	r4, #0
	bgt	.L1332	@cond_branch
	cmp	r4, #0
	bne	.L1331	@cond_branch
	cmp	r0, #0
	ble	.L1331	@cond_branch
.L1332:
	mov	r0, #0x1
	strh	r0, [r1, #0xc]
	b	.L1333
.L1335:
	.align	2, 0
.L1334:
	.word	gContestResources
	.word	sub_80DC0F4
	.word	gTasks
.L1331:
	ldr	r2, .L1336
	lsl	r3, r7, #0x2
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L1336+0x4
	strh	r1, [r0, #0xc]
.L1333:
	add	r0, r3, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, r8
	strh	r1, [r0, #0xe]
	add	r0, r7, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1337:
	.align	2, 0
.L1336:
	.word	gTasks
	.word	0xffff
.Lfe106:
	.size	 sub_80DC028,.Lfe106-sub_80DC028
	.align	2, 0
	.type	 sub_80DC0F4,function
	.thumb_func
sub_80DC0F4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L1358
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrb	r0, [r4, #0xe]
	mov	r9, r0
	ldrh	r3, [r4, #0x8]
	ldrh	r1, [r4, #0xa]
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xe
	bgt	.LCB12116
	b	.L1338	@long jump
.LCB12116:
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r2, [r4, #0xa]
	mov	r5, #0xa
	ldrsh	r0, [r4, r5]
	cmp	r0, #0
	bne	.L1340	@cond_branch
	add	r0, r7, #0
	bl	DestroyTask
	ldr	r0, .L1358+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x14]
	mov	r2, r9
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x2]
	b	.L1338
.L1359:
	.align	2, 0
.L1358:
	.word	gTasks
	.word	gContestResources
.L1340:
	cmp	r3, #0
	bne	.L1342	@cond_branch
	lsl	r0, r1, #0x10
	mov	r8, r0
	cmp	r0, #0
	bge	.L1343	@cond_branch
	mov	r0, r9
	bl	sub_80DBFC8
	add	r0, r0, #0x2
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	b	.L1356
.L1343:
	mov	r0, r9
	bl	sub_80DBFC8
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldrh	r0, [r4, #0xa]
	sub	r0, r0, #0x1
.L1356:
	strh	r0, [r4, #0xa]
	ldr	r1, .L1360
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	add	r2, r1, #0x1
	strh	r2, [r0, #0x8]
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	b	.L1341
.L1361:
	.align	2, 0
.L1360:
	.word	gTasks
.L1342:
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	bge	.L1346	@cond_branch
	lsl	r0, r1, #0x10
	mov	r8, r0
	cmp	r0, #0
	bge	.L1347	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, r9
	bl	sub_80DBFC8
	add	r0, r0, #0x2
	b	.L1357
.L1347:
	ldrh	r0, [r4, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	sub	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	b	.L1341
.L1346:
	lsl	r0, r1, #0x10
	mov	r8, r0
	cmp	r0, #0
	bge	.L1350	@cond_branch
	ldrh	r0, [r4, #0x8]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	add	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	b	.L1341
.L1350:
	ldrh	r0, [r4, #0x8]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	sub	r0, r2, #0x1
	strh	r0, [r4, #0xa]
	mov	r0, r9
	bl	sub_80DBFC8
.L1357:
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
.L1341:
	str	r5, [sp, #0xc]
	mov	r0, #0x0
	mov	sl, r0
	cmp	r5, #0x7
	bls	.L1352	@cond_branch
	mov	r2, #0x1
	mov	sl, r2
	add	r0, r5, #0
	sub	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L1352:
	add	r2, r5, #0
	add	r2, r2, #0x16
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r0, .L1362
	add	r0, r0, r9
	ldrb	r0, [r0]
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	add	r3, r3, #0x2
	add	r3, r3, sl
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x0
	add	r1, r6, #0
	bl	ContestBG_FillBoxWithTile
	mov	r3, r8
	cmp	r3, #0
	ble	.L1353	@cond_branch
	mov	r0, #0x60
	bl	PlaySE
	ldr	r4, .L1362+0x4
	add	r0, r4, #0
	bl	m4aMPlayImmInit
	ldr	r1, .L1362+0x8
	ldr	r0, [sp, #0xc]
	lsl	r2, r0, #0x18
	asr	r2, r2, #0x10
	add	r0, r4, #0
	bl	m4aMPlayPitchControl
	b	.L1354
.L1363:
	.align	2, 0
.L1362:
	.word	gContestantTurnOrder
	.word	gMPlayInfo_SE1
	.word	0xffff
.L1353:
	mov	r0, #0x16
	bl	PlaySE
.L1354:
	mov	r2, sl
	cmp	r2, #0
	bne	.L1338	@cond_branch
	cmp	r5, #0
	bne	.L1338	@cond_branch
	cmp	r6, #0
	bne	.L1338	@cond_branch
	ldr	r0, .L1364
	lsl	r1, r7, #0x2
	add	r1, r1, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0xc]
	neg	r0, r0
	strh	r0, [r1, #0xc]
.L1338:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1365:
	.align	2, 0
.L1364:
	.word	gTasks
.Lfe107:
	.size	 sub_80DC0F4,.Lfe107-sub_80DC0F4
	.align	2, 0
	.type	 sub_80DC2BC,function
	.thumb_func
sub_80DC2BC:
	push	{r4, r5, lr}
	ldr	r0, .L1372
	bl	LoadSpriteSheet
	mov	r4, #0x0
	ldr	r5, .L1372+0x4
.L1370:
	ldr	r0, .L1372+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	add	r0, r0, r5
	ldrb	r2, [r0]
	ldr	r0, .L1372+0xc
	mov	r1, #0xb4
	mov	r3, #0x1
	bl	CreateSprite
	ldr	r1, .L1372+0x10
	ldr	r1, [r1]
	ldr	r2, [r1, #0x14]
	lsl	r1, r4, #0x2
	add	r1, r1, r2
	strb	r0, [r1]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1370	@cond_branch
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1373:
	.align	2, 0
.L1372:
	.word	gUnknown_08587A74
	.word	gUnknown_08587A6C
	.word	gContestantTurnOrder
	.word	gSpriteTemplate_8587AD0
	.word	gContestResources
.Lfe108:
	.size	 sub_80DC2BC,.Lfe108-sub_80DC2BC
	.align	2, 0
	.type	 sub_80DC308,function
	.thumb_func
sub_80DC308:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L1381
	ldr	r0, [r4]
	ldr	r2, [r0, #0x14]
	lsl	r3, r6, #0x2
	add	r2, r3, r2
	ldrb	r0, [r2, #0x2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x2]
	ldr	r1, [r4]
	ldr	r0, [r1, #0x14]
	add	r3, r3, r0
	ldrb	r7, [r3]
	ldr	r1, [r1, #0x4]
	lsl	r0, r6, #0x3
	sub	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x11
	lsr	r5, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x38
	ble	.L1375	@cond_branch
	mov	r5, #0x38
	b	.L1376
.L1382:
	.align	2, 0
.L1381:
	.word	gContestResources
.L1375:
	cmp	r0, #0
	bge	.L1376	@cond_branch
	mov	r5, #0x0
.L1376:
	ldr	r2, .L1383
	lsl	r3, r7, #0x4
	add	r0, r3, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	mov	r0, #0x3e
	add	r0, r0, r4
	mov	ip, r0
	ldrb	r1, [r0]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	strh	r6, [r4, #0x2e]
	strh	r5, [r4, #0x30]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x24
	ldrsh	r1, [r4, r5]
	cmp	r0, r1
	ble	.L1378	@cond_branch
	mov	r0, #0x1
	b	.L1380
.L1384:
	.align	2, 0
.L1383:
	.word	gSprites
.L1378:
	ldr	r0, .L1385
.L1380:
	strh	r0, [r4, #0x32]
	add	r0, r3, r7
	lsl	r0, r0, #0x2
	add	r1, r2, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L1385+0x4
	str	r1, [r0]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1386:
	.align	2, 0
.L1385:
	.word	0xffff
	.word	sub_80DC408
.Lfe109:
	.size	 sub_80DC308,.Lfe109-sub_80DC308
	.align	2, 0
	.type	 sub_80DC3AC,function
	.thumb_func
sub_80DC3AC:
	push	{r4, lr}
	mov	r4, #0x0
.L1391:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80DC308
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1391	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe110:
	.size	 sub_80DC3AC,.Lfe110-sub_80DC3AC
	.align	2, 0
	.type	 sub_80DC3C4,function
	.thumb_func
sub_80DC3C4:
	push	{r4, lr}
	mov	r2, #0x0
	ldr	r3, .L1403
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	ldrb	r1, [r0, #0x2]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1395	@cond_branch
	mov	r4, #0x1
.L1396:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L1395	@cond_branch
	ldr	r0, [r3]
	ldr	r1, [r0, #0x14]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x2]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1396	@cond_branch
.L1395:
	cmp	r2, #0x4
	beq	.L1400	@cond_branch
	mov	r0, #0x0
	b	.L1402
.L1404:
	.align	2, 0
.L1403:
	.word	gContestResources
.L1400:
	mov	r0, #0x1
.L1402:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe111:
	.size	 sub_80DC3C4,.Lfe111-sub_80DC3C4
	.align	2, 0
	.type	 sub_80DC408,function
	.thumb_func
sub_80DC408:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x24]
	mov	r0, #0x24
	ldrsh	r1, [r3, r0]
	mov	r4, #0x30
	ldrsh	r0, [r3, r4]
	cmp	r1, r0
	bne	.L1406	@cond_branch
	ldr	r0, .L1408
	ldr	r0, [r0]
	mov	r2, #0x2e
	ldrsh	r1, [r3, r2]
	ldr	r0, [r0, #0x14]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0x2]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x2]
	ldr	r0, .L1408+0x4
	str	r0, [r3, #0x1c]
	b	.L1407
.L1409:
	.align	2, 0
.L1408:
	.word	gContestResources
	.word	SpriteCallbackDummy
.L1406:
	ldrh	r0, [r3, #0x32]
	add	r0, r2, r0
	strh	r0, [r3, #0x24]
.L1407:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe112:
	.size	 sub_80DC408,.Lfe112-sub_80DC408
	.align	2, 0
	.type	 sub_80DC44C,function
	.thumb_func
sub_80DC44C:
	push	{r4, r5, r6, lr}
	mov	r2, #0x0
	ldr	r6, .L1416
	ldr	r5, .L1416+0x4
	ldr	r4, .L1416+0x8
	ldr	r3, .L1416+0xc
.L1414:
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r0, r2, r3
	ldrb	r0, [r0]
	add	r0, r0, r4
	ldrb	r0, [r0]
	strh	r0, [r1, #0x22]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1414	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1417:
	.align	2, 0
.L1416:
	.word	gSprites
	.word	gContestResources
	.word	gUnknown_08587A6C
	.word	gContestantTurnOrder
.Lfe113:
	.size	 sub_80DC44C,.Lfe113-sub_80DC44C
	.align	2, 0
	.type	 sub_80DC490,function
	.thumb_func
sub_80DC490:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r3, #0x0
	ldr	r7, .L1428
	ldr	r5, .L1428+0x4
	ldr	r4, .L1428+0x8
	mov	r2, #0x0
.L1422:
	add	r0, r3, r7
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bls	.L1421	@cond_branch
	cmp	r6, #0
	bne	.L1424	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0xb4
	b	.L1427
.L1429:
	.align	2, 0
.L1428:
	.word	gContestantTurnOrder
	.word	gSprites
	.word	gContestResources
.L1424:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r0, r2, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x80
	lsl	r1, r1, #0x1
.L1427:
	strh	r1, [r0, #0x20]
.L1421:
	add	r2, r2, #0x4
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L1422	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe114:
	.size	 sub_80DC490,.Lfe114-sub_80DC490
	.align	2, 0
	.type	 sub_80DC4F0,function
	.thumb_func
sub_80DC4F0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L1436
	bl	LoadSpritePalette
	mov	r5, #0x0
	ldr	r7, .L1436+0x4
	ldr	r0, .L1436+0x8
	mov	r8, r0
	mov	r6, #0x0
.L1434:
	lsl	r0, r5, #0x3
	ldr	r1, .L1436+0xc
	add	r0, r0, r1
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1436+0x10
	add	r0, r6, r0
	ldr	r2, .L1436+0x14
	ldr	r1, .L1436+0x18
	add	r1, r5, r1
	ldrb	r1, [r1]
	add	r1, r1, r2
	ldrb	r2, [r1]
	mov	r1, #0xcc
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r1, [r7]
	ldr	r1, [r1, #0x14]
	lsl	r4, r5, #0x2
	add	r1, r4, r1
	strb	r0, [r1, #0x1]
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	ldr	r1, .L1436+0x1c
	bl	SetSubspriteTables
	ldr	r0, [r7]
	ldr	r0, [r0, #0x14]
	add	r4, r4, r0
	ldrb	r1, [r4, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r6, r6, #0x18
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1434	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1437:
	.align	2, 0
.L1436:
	.word	gUnknown_08587B08
	.word	gContestResources
	.word	gSprites
	.word	gUnknown_08587AE8
	.word	gSpriteTemplate_8587B18
	.word	gUnknown_08587A70
	.word	gContestantTurnOrder
	.word	gSubspriteTables_8587B80
.Lfe115:
	.size	 sub_80DC4F0,.Lfe115-sub_80DC4F0
	.align	2, 0
	.type	 CreateApplauseMeterSprite,function
	.thumb_func
CreateApplauseMeterSprite:
	push	{lr}
	ldr	r0, .L1439
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1439+0x4
	bl	LoadSpritePalette
	ldr	r0, .L1439+0x8
	mov	r1, #0x1e
	mov	r2, #0x2c
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1439+0xc
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r3, #0x4
	orr	r2, r2, r3
	strb	r2, [r1]
	ldr	r1, .L1439+0x10
	ldr	r1, [r1]
	ldr	r1, [r1]
	add	r1, r1, #0x58
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L1440:
	.align	2, 0
.L1439:
	.word	sApplauseMeterSpriteSheet
	.word	sApplauseMeterPalette
	.word	sApplauseMeterSpriteTemplate
	.word	gSprites
	.word	gContestResources
.Lfe116:
	.size	 CreateApplauseMeterSprite,.Lfe116-CreateApplauseMeterSprite
	.align	2, 0
	.type	 sub_80DC5E8,function
	.thumb_func
sub_80DC5E8:
	push	{r4, lr}
	ldr	r0, .L1447
	mov	r1, #0x1e
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1447+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	strb	r0, [r1, #0xd]
	mov	r2, #0x0
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r4, .L1447+0x8
	mov	r3, #0xff
.L1445:
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	add	r0, r0, r4
	strh	r3, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L1445	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1448:
	.align	2, 0
.L1447:
	.word	sub_80DC728
	.word	gContestResources
	.word	gTasks+0x8
.Lfe117:
	.size	 sub_80DC5E8,.Lfe117-sub_80DC5E8
	.align	2, 0
	.type	 sub_80DC630,function
	.thumb_func
sub_80DC630:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1450
	ldr	r1, .L1450+0x4
	ldr	r5, [r1]
	ldr	r1, [r5]
	ldrb	r2, [r1, #0xd]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r3, #0x8
	add	r1, r1, r3
	mov	r4, #0x0
	strh	r4, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r1, [r5]
	ldrb	r2, [r1, #0xd]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r0, r0, r3
	strh	r4, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1451:
	.align	2, 0
.L1450:
	.word	gTasks
	.word	gContestResources
.Lfe118:
	.size	 sub_80DC630,.Lfe118-sub_80DC630
	.align	2, 0
	.type	 sub_80DC674,function
	.thumb_func
sub_80DC674:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1453
	mov	r1, #0x1f
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1453+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1454:
	.align	2, 0
.L1453:
	.word	sub_80DC6A4
	.word	gTasks
.Lfe119:
	.size	 sub_80DC674,.Lfe119-sub_80DC674
	.align	2, 0
	.type	 sub_80DC6A4,function
	.thumb_func
sub_80DC6A4:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r2, .L1458
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x8]
	add	r5, r0, #0
	ldr	r0, .L1458+0x4
	ldr	r4, [r0]
	ldr	r0, [r4]
	ldrb	r1, [r0, #0xd]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r7, r2, #0
	add	r7, r7, #0x8
	add	r1, r0, r7
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L1457	@cond_branch
	cmp	r0, #0xff
	bne	.L1456	@cond_branch
.L1457:
	mov	r3, #0x0
	mov	r0, #0xff
	strh	r0, [r1]
	lsl	r1, r5, #0x2
	add	r1, r1, #0x1
	lsl	r1, r1, #0x1
	ldr	r0, [r4]
	ldrb	r2, [r0, #0xd]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r7
	strh	r3, [r1]
	ldr	r0, [r4]
	add	r0, r0, #0x14
	add	r0, r0, r5
	ldrb	r0, [r0]
	add	r0, r0, #0x5
	lsl	r0, r0, #0x4
	add	r0, r0, #0x6
	ldr	r3, .L1458+0x8
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BlendPalette
	add	r0, r6, #0
	bl	DestroyTask
.L1456:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1459:
	.align	2, 0
.L1458:
	.word	gTasks
	.word	gContestResources
	.word	0x4bff
.Lfe120:
	.size	 sub_80DC6A4,.Lfe120-sub_80DC6A4
	.align	2, 0
	.type	 sub_80DC728,function
	.thumb_func
sub_80DC728:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	mov	r9, r1
	lsl	r7, r1, #0x3
	ldr	r0, .L1472
	mov	r8, r0
	mov	r1, #0x8
	neg	r1, r1
	add	r1, r1, r8
	mov	sl, r1
.L1464:
	lsl	r0, r6, #0x1a
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r7
	mov	r4, r8
	add	r2, r0, r4
	ldrh	r4, [r2]
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	cmp	r0, #0xff
	beq	.L1463	@cond_branch
	add	r0, r3, #0x1
	lsl	r1, r0, #0x1
	add	r1, r1, r7
	add	r1, r1, r8
	mov	r5, #0x0
	ldrsh	r1, [r1, r5]
	add	r5, r0, #0
	cmp	r1, #0
	bne	.L1466	@cond_branch
	add	r0, r4, #0x1
	b	.L1471
.L1473:
	.align	2, 0
.L1472:
	.word	gTasks+0x8
.L1466:
	sub	r0, r4, #0x1
.L1471:
	strh	r0, [r2]
	lsl	r1, r3, #0x1
	mov	r0, r9
	lsl	r2, r0, #0x3
	add	r0, r1, r2
	mov	r3, sl
	add	r3, r3, #0x8
	add	r0, r0, r3
	mov	r4, #0x0
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0x10
	beq	.L1469	@cond_branch
	cmp	r0, #0
	bne	.L1468	@cond_branch
.L1469:
	lsl	r0, r5, #0x1
	add	r0, r0, r2
	add	r0, r0, r3
	ldrh	r1, [r0]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0]
.L1468:
	ldr	r0, .L1474
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x14
	add	r0, r0, r6
	ldrb	r0, [r0]
	add	r0, r0, #0x5
	lsl	r0, r0, #0x4
	add	r0, r0, #0x6
	add	r1, r4, r7
	add	r1, r1, r8
	ldrb	r2, [r1]
	mov	r1, #0x2
	ldr	r3, .L1474+0x4
	bl	BlendPalette
.L1463:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r6, #0x3
	bls	.L1464	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1475:
	.align	2, 0
.L1474:
	.word	gContestResources
	.word	0x4bff
.Lfe121:
	.size	 sub_80DC728,.Lfe121-sub_80DC728
	.align	2, 0
	.type	 sub_80DC7EC,function
	.thumb_func
sub_80DC7EC:
	push	{r4, lr}
	ldr	r0, .L1482
	mov	r1, #0x1e
	bl	CreateTask
	ldr	r1, .L1482+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	strb	r0, [r1, #0xe]
	mov	r4, #0x0
.L1480:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80DC81C
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1480	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.L1483:
	.align	2, 0
.L1482:
	.word	sub_80DC8D0
	.word	gContestResources
.Lfe122:
	.size	 sub_80DC7EC,.Lfe122-sub_80DC7EC
	.align	2, 0
	.type	 sub_80DC81C,function
	.thumb_func
sub_80DC81C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L1485
	ldr	r1, .L1485+0x4
	ldr	r4, [r1]
	ldr	r1, [r4]
	ldrb	r2, [r1, #0xe]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r3, r3, #0x8
	add	r1, r1, r3
	mov	r5, #0x0
	mov	r2, #0xff
	strh	r2, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	ldr	r1, [r4]
	ldrb	r2, [r1, #0xe]
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r0, r0, r1
	add	r0, r0, r3
	strh	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1486:
	.align	2, 0
.L1485:
	.word	gTasks
	.word	gContestResources
.Lfe123:
	.size	 sub_80DC81C,.Lfe123-sub_80DC81C
	.align	2, 0
	.type	 sub_80DC864,function
	.thumb_func
sub_80DC864:
	push	{r4, lr}
	mov	r4, #0x0
.L1491:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80DC87C
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1491	@cond_branch
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe124:
	.size	 sub_80DC864,.Lfe124-sub_80DC864
	.align	2, 0
	.type	 sub_80DC87C,function
	.thumb_func
sub_80DC87C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	sub_80DC81C
	add	r0, r4, #0x5
	lsl	r2, r0, #0x5
	ldr	r3, .L1494
	add	r6, r2, r3
	ldr	r5, .L1494+0x4
	add	r2, r2, r5
	ldr	r1, .L1494+0x8
	str	r6, [r1]
	str	r2, [r1, #0x4]
	ldr	r2, .L1494+0xc
	str	r2, [r1, #0x8]
	ldr	r6, [r1, #0x8]
	lsl	r0, r0, #0x4
	add	r4, r4, #0xc
	add	r0, r0, r4
	lsl	r0, r0, #0x1
	sub	r3, r3, #0x14
	add	r3, r0, r3
	sub	r5, r5, #0x14
	add	r0, r0, r5
	str	r3, [r1]
	str	r0, [r1, #0x4]
	str	r2, [r1, #0x8]
	ldr	r0, [r1, #0x8]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1495:
	.align	2, 0
.L1494:
	.word	gPlttBufferUnfaded+0x14
	.word	gPlttBufferFaded+0x14
	.word	0x40000d4
	.word	-0x7fffffff
.Lfe125:
	.size	 sub_80DC87C,.Lfe125-sub_80DC87C
	.align	2, 0
	.type	 sub_80DC8D0,function
	.thumb_func
sub_80DC8D0:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r7, #0x0
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	mov	r9, r1
	lsl	r6, r1, #0x3
	ldr	r0, .L1509
	mov	r8, r0
	ldr	r1, .L1509+0x4
	mov	sl, r1
.L1500:
	lsl	r0, r7, #0x1a
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	mov	r4, r8
	add	r2, r0, r4
	mov	r5, #0x0
	ldrsh	r0, [r2, r5]
	cmp	r0, #0xff
	beq	.L1499	@cond_branch
	add	r0, r3, #0x2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	add	r1, r0, r4
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	mov	r4, #0x0
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	ble	.L1499	@cond_branch
	strh	r4, [r1]
	add	r0, r3, #0x1
	lsl	r1, r0, #0x1
	add	r1, r1, r6
	add	r1, r1, r8
	mov	r4, #0x0
	ldrsh	r1, [r1, r4]
	add	r4, r0, #0
	cmp	r1, #0
	bne	.L1503	@cond_branch
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	b	.L1508
.L1510:
	.align	2, 0
.L1509:
	.word	gTasks+0x8
	.word	0x4bff
.L1503:
	ldrh	r0, [r2]
	sub	r0, r0, #0x1
.L1508:
	strh	r0, [r2]
	lsl	r1, r3, #0x1
	mov	r5, r9
	lsl	r2, r5, #0x3
	add	r0, r1, r2
	ldr	r3, .L1511
	add	r3, r3, #0x8
	add	r0, r0, r3
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
	add	r5, r1, #0
	cmp	r0, #0x10
	beq	.L1506	@cond_branch
	cmp	r0, #0
	bne	.L1505	@cond_branch
.L1506:
	lsl	r0, r4, #0x1
	add	r0, r0, r2
	add	r0, r0, r3
	ldrh	r1, [r0]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0]
.L1505:
	add	r4, r7, #0x5
	lsl	r4, r4, #0x4
	add	r0, r4, #0
	add	r0, r0, #0xa
	add	r5, r5, r6
	add	r5, r5, r8
	ldrb	r2, [r5]
	mov	r1, #0x1
	mov	r3, sl
	bl	BlendPalette
	add	r4, r4, #0xc
	add	r4, r4, r7
	ldrb	r2, [r5]
	add	r0, r4, #0
	mov	r1, #0x1
	mov	r3, sl
	bl	BlendPalette
.L1499:
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L1500	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1512:
	.align	2, 0
.L1511:
	.word	gTasks
.Lfe126:
	.size	 sub_80DC8D0,.Lfe126-sub_80DC8D0
	.align	2, 0
	.type	 sub_80DC9B4,function
	.thumb_func
sub_80DC9B4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L1516
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1514	@cond_branch
	add	r0, r2, #0
	bl	sub_80DC630
	b	.L1515
.L1517:
	.align	2, 0
.L1516:
	.word	gContestResources
.L1514:
	add	r0, r2, #0
	bl	sub_80DC674
.L1515:
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 sub_80DC9B4,.Lfe127-sub_80DC9B4
	.align	2, 0
	.type	 sub_80DC9EC,function
	.thumb_func
sub_80DC9EC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	ldr	r6, .L1519
	add	r6, r0, r6
	ldrb	r0, [r6]
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	lsl	r5, r5, #0x1b
	mov	r0, #0x80
	lsl	r0, r0, #0x16
	add	r5, r5, r0
	lsr	r5, r5, #0x18
	ldr	r1, [sp, #0xc]
	lsl	r4, r1, #0x3
	ldr	r0, .L1519+0x4
	add	r0, r4, r0
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L1519+0x8
	add	r4, r4, r0
	add	r0, r4, #0
	bl	LoadSpritePalette
	ldr	r2, [sp, #0xc]
	lsl	r4, r2, #0x1
	add	r4, r4, r2
	lsl	r4, r4, #0x3
	ldr	r0, .L1519+0xc
	add	r4, r4, r0
	add	r0, r4, #0
	mov	r1, #0xb8
	add	r2, r5, #0
	mov	r3, #0x1d
	bl	CreateSprite
	mov	r9, r0
	mov	r3, r9
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	add	r0, r4, #0
	mov	r1, #0xf8
	add	r2, r5, #0
	mov	r3, #0x1d
	bl	CreateSprite
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r5, r0, #0x4
	add	r5, r5, r8
	lsl	r5, r5, #0x2
	ldr	r1, .L1519+0x10
	add	r5, r5, r1
	ldrh	r2, [r5, #0x4]
	lsl	r1, r2, #0x16
	lsr	r1, r1, #0x16
	add	r1, r1, #0x40
	ldr	r3, .L1519+0x14
	add	r0, r3, #0
	and	r1, r1, r0
	ldr	r0, .L1519+0x18
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r4, #0xc0
	lsl	r4, r4, #0x13
	ldrb	r0, [r6]
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x6
	ldr	r0, .L1519+0x1c
	add	r3, r3, r0
	ldr	r7, .L1519+0x20
	ldr	r0, [r7]
	ldr	r0, [r0, #0x34]
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x3
	add	r2, r4, #0
	bl	CopySpriteTiles
	ldrb	r0, [r6]
	lsl	r3, r0, #0x2
	add	r3, r3, r0
	lsl	r3, r3, #0x6
	ldr	r1, .L1519+0x24
	add	r3, r3, r1
	ldr	r0, [r7]
	ldr	r0, [r0, #0x38]
	str	r0, [sp]
	mov	r0, #0x0
	mov	r1, #0x3
	add	r2, r4, #0
	bl	CopySpriteTiles
	mov	r4, #0x0
	str	r4, [sp, #0x4]
	ldr	r0, [r7]
	ldr	r1, [r0, #0x34]
	mov	r6, #0xa0
	lsl	r6, r6, #0x3
	add	r1, r1, r6
	ldr	r2, .L1519+0x28
	mov	sl, r2
	add	r0, sp, #0x4
	bl	CpuSet
	str	r4, [sp, #0x8]
	add	r0, sp, #0x8
	ldr	r1, [r7]
	ldr	r1, [r1, #0x38]
	add	r1, r1, r6
	mov	r2, sl
	bl	CpuSet
	ldr	r0, [r7]
	ldr	r0, [r0, #0x34]
	mov	r3, r9
	lsl	r4, r3, #0x4
	add	r4, r4, r9
	lsl	r4, r4, #0x2
	ldr	r1, .L1519+0x10
	add	r4, r4, r1
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r6, .L1519+0x2c
	add	r1, r1, r6
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	sl, r2
	mov	r3, #0x1
	bl	RequestDma3Copy
	ldr	r0, [r7]
	ldr	r0, [r0, #0x38]
	ldrh	r1, [r5, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	add	r1, r1, r6
	mov	r2, sl
	mov	r3, #0x1
	bl	RequestDma3Copy
	mov	r3, r8
	strh	r3, [r4, #0x2e]
	mov	r0, r9
	strh	r0, [r5, #0x2e]
	mov	r1, sp
	ldrh	r1, [r1, #0xc]
	strh	r1, [r4, #0x30]
	mov	r2, sp
	ldrh	r2, [r2, #0xc]
	strh	r2, [r5, #0x30]
	mov	r0, r9
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1520:
	.align	2, 0
.L1519:
	.word	gContestantTurnOrder
	.word	sUnknown_08589904
	.word	sUnknown_08589924
	.word	gSpriteTemplate_858998C
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	0x600e026
	.word	gContestResources
	.word	0x600e036
	.word	0x50000c0
	.word	0x6010000
.Lfe128:
	.size	 sub_80DC9EC,.Lfe128-sub_80DC9EC
	.align	2, 0
	.type	 sub_80DCB78,function
	.thumb_func
sub_80DCB78:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1522
	lsl	r5, r0, #0x4
	add	r5, r5, r0
	lsl	r5, r5, #0x2
	add	r5, r5, r1
	ldrh	r0, [r5, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r4, r4, r1
	add	r0, r4, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroySprite
	add	r0, r5, #0
	bl	DestroySpriteAndFreeResources
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1523:
	.align	2, 0
.L1522:
	.word	gSprites
.Lfe129:
	.size	 sub_80DCB78,.Lfe129-sub_80DCB78
	.align	2, 0
	.type	 sub_80DCBB4,function
	.thumb_func
sub_80DCBB4:
	push	{lr}
	mov	r1, #0xfd
	lsl	r1, r1, #0x6
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L1525
	mov	r0, #0x52
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L1526:
	.align	2, 0
.L1525:
	.word	0x907
.Lfe130:
	.size	 sub_80DCBB4,.Lfe130-sub_80DCBB4
	.align	2, 0
	.type	 sub_80DCBD0,function
	.thumb_func
sub_80DCBD0:
	push	{lr}
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.Lfe131:
	.size	 sub_80DCBD0,.Lfe131-sub_80DCBD0
	.align	2, 0
	.type	 sub_80DCBE8,function
	.thumb_func
sub_80DCBE8:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	r4, r0, #0
	mov	r9, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r9
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	bl	sub_80DCBB4
	ldr	r0, .L1531
	ldr	r1, [r0]
	ldr	r2, .L1531+0x4
	mov	r8, r2
	lsl	r6, r4, #0x4
	add	r6, r6, r4
	lsl	r6, r6, #0x2
	add	r0, r6, r2
	mov	r3, #0x30
	ldrsh	r2, [r0, r3]
	ldr	r1, [r1, #0x14]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r1, [r2, #0x2]
	mov	r3, #0x2
	orr	r1, r1, r3
	strb	r1, [r2, #0x2]
	ldrh	r5, [r0, #0x2e]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	mov	r1, r8
	add	r0, r4, r1
	mov	r1, #0x1
	bl	StartSpriteAffineAnim
	mov	r2, #0x1c
	add	r8, r8, r2
	add	r6, r6, r8
	ldr	r0, .L1531+0x8
	str	r0, [r6]
	add	r4, r4, r8
	ldr	r0, .L1531+0xc
	str	r0, [r4]
	mov	r3, r9
	cmp	r3, #0
	bne	.L1529	@cond_branch
	mov	r0, #0x65
	bl	PlaySE
	b	.L1530
.L1532:
	.align	2, 0
.L1531:
	.word	gContestResources
	.word	gSprites
	.word	sub_80DCC84
	.word	SpriteCallbackDummy
.L1529:
	mov	r0, #0x2
	bl	PlaySE
.L1530:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe132:
	.size	 sub_80DCBE8,.Lfe132-sub_80DCBE8
	.align	2, 0
	.type	 sub_80DCC84,function
	.thumb_func
sub_80DCC84:
	push	{lr}
	mov	ip, r0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1534	@cond_branch
	mov	r0, ip
	ldrh	r1, [r0, #0x2e]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L1536
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r0, r2
	add	r0, r1, #0
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L1534	@cond_branch
	mov	r3, ip
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r3]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L1536+0x4
	mov	r1, ip
	str	r0, [r1, #0x1c]
.L1534:
	pop	{r0}
	bx	r0
.L1537:
	.align	2, 0
.L1536:
	.word	gSprites
	.word	sub_80DCCD8
.Lfe133:
	.size	 sub_80DCC84,.Lfe133-sub_80DCC84
	.align	2, 0
	.type	 sub_80DCCD8,function
	.thumb_func
sub_80DCCD8:
	push	{lr}
	ldr	r1, .L1539
	ldr	r1, [r1]
	mov	r3, #0x30
	ldrsh	r2, [r0, r3]
	ldr	r1, [r1, #0x14]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	ldrb	r3, [r2, #0x2]
	mov	r1, #0x3
	neg	r1, r1
	and	r1, r1, r3
	strb	r1, [r2, #0x2]
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80DCB78
	bl	sub_80DCBD0
	pop	{r0}
	bx	r0
.L1540:
	.align	2, 0
.L1539:
	.word	gContestResources
.Lfe134:
	.size	 sub_80DCCD8,.Lfe134-sub_80DCCD8
	.align	2, 0
	.type	 ContestDebugTogglePointTotal,function
	.thumb_func
ContestDebugTogglePointTotal:
	push	{lr}
	ldr	r0, .L1547
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r2, r0, r1
	ldrb	r1, [r2]
	add	r3, r0, #0
	cmp	r1, #0x1
	bne	.L1542	@cond_branch
	mov	r0, #0x0
	b	.L1546
.L1548:
	.align	2, 0
.L1547:
	.word	gHeap
.L1542:
	mov	r0, #0x1
.L1546:
	strb	r0, [r2]
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1544	@cond_branch
	bl	DrawContestantWindowText
	bl	SwapMoveDescAndContestTilemaps
	b	.L1545
.L1544:
	bl	ContestDebugDoPrint
.L1545:
	pop	{r0}
	bx	r0
.Lfe135:
	.size	 ContestDebugTogglePointTotal,.Lfe135-ContestDebugTogglePointTotal
	.align	2, 0
	.type	 ContestDebugDoPrint,function
	.thumb_func
ContestDebugDoPrint:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	ldr	r0, .L1574
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1549	@cond_branch
	ldr	r0, .L1574+0x4
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1549	@cond_branch
	cmp	r0, #0
	blt	.L1555	@cond_branch
	cmp	r0, #0x3
	bgt	.L1555	@cond_branch
	cmp	r0, #0x2
	blt	.L1555	@cond_branch
	bl	ContestDebugPrintBitStrings
	b	.L1549
.L1575:
	.align	2, 0
.L1574:
	.word	gEnableContestDebugging
	.word	gHeap
.L1555:
	mov	r5, #0x0
.L1559:
	add	r0, r5, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1559	@cond_branch
	mov	r5, #0x0
.L1564:
	ldr	r0, .L1576
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r2, sp, #0x4
	ldrh	r4, [r0, #0x4]
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L1565	@cond_branch
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r2, #0
	ldr	r1, .L1576+0x4
	bl	StringCopy
	add	r2, r0, #0
.L1565:
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L1576+0x8
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x7
	str	r1, [sp]
	add	r1, sp, #0x4
	mov	r2, #0x37
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1564	@cond_branch
	mov	r5, #0x0
.L1570:
	ldr	r0, .L1576
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r2, sp, #0x4
	ldrh	r4, [r0, #0x2]
	mov	r1, #0x2
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L1571	@cond_branch
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r2, #0
	ldr	r1, .L1576+0x4
	bl	StringCopy
	add	r2, r0, #0
.L1571:
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x10
	add	r0, r2, #0
	mov	r2, #0x0
	mov	r3, #0x4
	bl	ConvertIntToDecimalStringN
	ldr	r0, .L1576+0x8
	add	r0, r5, r0
	ldrb	r0, [r0]
	mov	r1, #0x7
	str	r1, [sp]
	add	r1, sp, #0x4
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L1570	@cond_branch
	bl	SwapMoveDescAndContestTilemaps
.L1549:
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1577:
	.align	2, 0
.L1576:
	.word	gContestResources
	.word	gText_OneDash
	.word	gContestantTurnOrder
.Lfe136:
	.size	 ContestDebugDoPrint,.Lfe136-ContestDebugDoPrint
	.align	2, 0
	.globl	SortContestants
	.type	 SortContestants,function
	.thumb_func
SortContestants:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r4, sp, #0x4
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	mov	r5, #0x0
	add	r4, sp, #0x4
	add	r6, r4, #0
	mov	r7, #0x0
.L1582:
	bl	Random
	add	r1, r0, #0
	mov	r0, sp
	add	r0, r0, r7
	add	r0, r0, #0x4
	strh	r1, [r0]
	mov	r2, #0x0
	cmp	r2, r5
	bge	.L1581	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sp
	ldrh	r1, [r1, #0x4]
	cmp	r0, r1
	beq	.L1637	@cond_branch
.L1585:
	add	r2, r2, #0x1
	cmp	r2, r5
	bge	.L1581	@cond_branch
	lsl	r0, r2, #0x1
	add	r0, r4, r0
	ldrh	r1, [r6]
	ldrh	r0, [r0]
	cmp	r1, r0
	bne	.L1585	@cond_branch
.L1637:
	sub	r6, r6, #0x2
	sub	r7, r7, #0x2
	sub	r5, r5, #0x1
.L1581:
	add	r6, r6, #0x2
	add	r7, r7, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1582	@cond_branch
	mov	r2, r8
	cmp	r2, #0
	bne	.L1590	@cond_branch
	mov	r5, #0x0
	ldr	r3, .L1639
	mov	r8, r3
.L1594:
	mov	r6, r8
	strb	r5, [r6]
	mov	r4, #0x0
	cmp	r4, r5
	bge	.L1596	@cond_branch
	ldr	r7, .L1639+0x4
	mov	r9, r7
	lsl	r0, r5, #0x1
	add	r1, r0, #0
	add	r1, r1, r9
	mov	ip, r1
	mov	r2, sp
	add	r2, r2, #0x4
	str	r2, [sp, #0xc]
	add	r0, r0, sp
	add	r0, r0, #0x4
	str	r0, [sp, #0x10]
	ldr	r3, .L1639
	add	r6, r3, #0
	mov	sl, r6
.L1598:
	ldrb	r0, [r3]
	lsl	r2, r0, #0x1
	mov	r7, r9
	add	r0, r2, r7
	mov	r6, #0x0
	ldrsh	r1, [r0, r6]
	mov	r7, ip
	mov	r6, #0x0
	ldrsh	r0, [r7, r6]
	cmp	r1, r0
	blt	.L1600	@cond_branch
	cmp	r1, r0
	bne	.L1597	@cond_branch
	ldr	r7, [sp, #0xc]
	add	r0, r7, r2
	ldrh	r0, [r0]
	ldr	r1, [sp, #0x10]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L1597	@cond_branch
.L1600:
	add	r2, r5, #0
	cmp	r5, r4
	ble	.L1602	@cond_branch
	sub	r0, r5, #0x1
	mov	r6, sl
	add	r1, r0, r6
.L1604:
	ldrb	r0, [r1]
	strb	r0, [r1, #0x1]
	sub	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, r4
	bgt	.L1604	@cond_branch
.L1602:
	strb	r5, [r3]
	b	.L1596
.L1640:
	.align	2, 0
.L1639:
	.word	gContestantTurnOrder
	.word	gContestMonConditions
.L1597:
	add	r3, r3, #0x1
	add	r4, r4, #0x1
	cmp	r4, r5
	blt	.L1598	@cond_branch
.L1596:
	cmp	r4, r5
	bne	.L1593	@cond_branch
	mov	r7, r8
	strb	r5, [r7]
.L1593:
	mov	r0, #0x1
	add	r8, r8, r0
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1594	@cond_branch
	ldr	r4, .L1641
	mov	r0, sp
	add	r1, r4, #0
	mov	r2, #0x4
	bl	memcpy
	mov	r5, #0x0
.L1612:
	mov	r1, sp
	add	r0, r1, r5
	ldrb	r0, [r0]
	add	r0, r0, r4
	strb	r5, [r0]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1612	@cond_branch
	b	.L1614
.L1642:
	.align	2, 0
.L1641:
	.word	gContestantTurnOrder
.L1590:
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x4
	bl	memset
	mov	r5, #0x0
	ldr	r3, .L1643
	mov	r6, #0x0
.L1618:
	ldr	r0, .L1643+0x4
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrb	r0, [r0, #0xb]
	lsl	r0, r0, #0x1e
	lsr	r2, r0, #0x1e
	mov	r7, sp
	add	r1, r7, r2
	b	.L1638
.L1644:
	.align	2, 0
.L1643:
	.word	gContestantTurnOrder
	.word	gContestResources
.L1622:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r0, sp
	add	r1, r0, r2
.L1638:
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L1622	@cond_branch
	strb	r5, [r1]
	strb	r2, [r3]
	add	r3, r3, #0x1
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1618	@cond_branch
	mov	r5, #0x0
.L1628:
	mov	r4, #0x3
	add	r1, r5, #0x1
	mov	sl, r1
	cmp	r4, r5
	ble	.L1627	@cond_branch
	mov	r9, r4
	ldr	r2, .L1645
	mov	r8, r2
	add	r3, sp, #0x4
	mov	ip, r3
.L1632:
	ldr	r6, .L1645+0x4
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	add	r1, r0, #0
	sub	r1, r1, #0x1c
	ldrb	r2, [r1, #0xb]
	ldrb	r3, [r0, #0xb]
	mov	r1, r9
	and	r1, r1, r2
	mov	r0, r9
	and	r0, r0, r3
	sub	r3, r4, #0x1
	cmp	r1, r0
	bne	.L1631	@cond_branch
	mov	r0, r8
	add	r7, r3, r0
	add	r2, r4, r0
	ldrb	r6, [r7]
	ldrb	r1, [r2]
	cmp	r6, r1
	bcs	.L1631	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, ip
	lsl	r1, r4, #0x1
	add	r1, r1, ip
	ldrh	r0, [r0]
	ldrh	r1, [r1]
	cmp	r0, r1
	bcs	.L1631	@cond_branch
	ldrb	r0, [r2]
	strb	r6, [r2]
	strb	r0, [r7]
.L1631:
	add	r4, r3, #0
	cmp	r4, r5
	bgt	.L1632	@cond_branch
.L1627:
	mov	r5, sl
	cmp	r5, #0x2
	ble	.L1628	@cond_branch
.L1614:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1646:
	.align	2, 0
.L1645:
	.word	gContestantTurnOrder
	.word	gContestResources
.Lfe137:
	.size	 SortContestants,.Lfe137-SortContestants
	.align	2, 0
	.type	 DrawContestantWindows,function
	.thumb_func
DrawContestantWindows:
	push	{r4, r5, lr}
	mov	r4, #0x0
	mov	r5, #0xa0
.L1651:
	ldr	r0, .L1653
	add	r0, r5, r0
	ldr	r1, .L1653+0x4
	add	r1, r4, r1
	ldrb	r1, [r1]
	add	r1, r1, #0x5
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadPalette
	add	r5, r5, #0x20
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1651	@cond_branch
	bl	DrawContestantWindowText
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1654:
	.align	2, 0
.L1653:
	.word	gHeap+0x1a004
	.word	gContestantTurnOrder
.Lfe138:
	.size	 DrawContestantWindows,.Lfe138-DrawContestantWindows
	.align	2, 0
	.type	 sub_80DD080,function
	.thumb_func
sub_80DD080:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r4, .L1693
	ldr	r3, [r4]
	ldr	r1, [r3, #0x4]
	lsl	r7, r6, #0x3
	sub	r0, r7, r6
	lsl	r5, r0, #0x2
	add	r1, r5, r1
	mov	r2, #0x0
	strh	r2, [r1, #0x2]
	ldr	r0, [r3, #0x4]
	add	r0, r5, r0
	strh	r2, [r0]
	add	r0, r6, #0
	bl	ContestantCanUseTurn
	lsl	r0, r0, #0x18
	mov	r8, r4
	cmp	r0, #0
	bne	.LCB14852
	b	.L1655	@long jump
.LCB14852:
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	add	r1, r5, r1
	ldrh	r0, [r1, #0x6]
	ldr	r2, .L1693+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r2, [r0]
	mov	r9, r2
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	strb	r0, [r1, #0xa]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r2, r5, r0
	ldrh	r0, [r2, #0x6]
	ldrh	r1, [r2, #0x8]
	cmp	r0, r1
	bne	.L1657	@cond_branch
	cmp	r0, #0
	beq	.L1657	@cond_branch
	ldrb	r0, [r2, #0x15]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x15]
	ldr	r0, [r4]
	ldr	r2, [r0, #0x4]
	add	r2, r5, r2
	ldrb	r3, [r2, #0xb]
	lsl	r1, r3, #0x19
	lsr	r1, r1, #0x1d
	add	r1, r1, #0x1
	mov	r0, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	mov	r0, #0x71
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0xb]
	b	.L1658
.L1694:
	.align	2, 0
.L1693:
	.word	gContestResources
	.word	gContestMoves
.L1657:
	ldr	r4, .L1695
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	lsl	r3, r6, #0x3
	sub	r1, r3, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r2, [r1, #0xb]
	mov	r0, #0x71
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	mov	r8, r4
	add	r7, r3, #0
.L1658:
	mov	r2, r8
	ldr	r4, [r2]
	ldr	r2, [r4, #0x4]
	sub	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldr	r3, .L1695+0x4
	mov	r1, r9
	lsl	r5, r1, #0x2
	add	r3, r5, r3
	ldrb	r1, [r3, #0x1]
	strh	r1, [r2]
	ldr	r1, [r4, #0x4]
	add	r0, r0, r1
	ldrh	r1, [r0]
	strh	r1, [r0, #0x2]
	ldr	r1, [r4, #0x8]
	ldrb	r0, [r3, #0x2]
	strh	r0, [r1, #0x4]
	ldr	r1, [r4, #0x8]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r1, #0x6]
	ldr	r0, [r4, #0x8]
	strb	r6, [r0, #0x11]
	mov	r2, #0x0
	mov	r9, r5
	mov	r4, r8
	mov	r3, #0x0
	mov	r1, #0x0
.L1662:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r0, r1, r0
	strb	r3, [r0, #0xe]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0xd
	add	r0, r0, r2
	strb	r3, [r0]
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1662	@cond_branch
	ldr	r5, .L1695
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r4, r0, #0x2
	add	r2, r4, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1664	@cond_branch
	ldrh	r0, [r2, #0x8]
	ldrh	r1, [r2, #0x6]
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1664	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
.L1664:
	ldr	r0, .L1695+0x8
	add	r0, r0, r9
	ldr	r0, [r0]
	bl	_call_via_r0
	ldr	r0, .L1695
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0x10
	bne	.L1665	@cond_branch
	ldrh	r1, [r2, #0x2]
	sub	r1, r1, #0xa
	mov	r0, #0xd
	ldrsb	r0, [r2, r0]
	b	.L1688
.L1696:
	.align	2, 0
.L1695:
	.word	gContestResources
	.word	gContestEffects
	.word	gContestEffectFuncs
.L1665:
	ldrb	r1, [r2, #0x11]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1667	@cond_branch
	mov	r1, #0xd
	ldrsb	r1, [r2, r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	b	.L1689
.L1667:
	mov	r0, #0xd
	ldrsb	r0, [r2, r0]
.L1689:
	ldrh	r1, [r2, #0x2]
.L1688:
	add	r0, r0, r1
	strh	r0, [r2, #0x2]
	ldr	r5, .L1697
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r4, r0, #0x2
	add	r1, r4, r1
	mov	r0, #0x0
	strb	r0, [r1, #0x16]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
	add	r0, r6, #0
	bl	sub_80DE1E8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L1669	@cond_branch
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrh	r0, [r1, #0x8]
	ldrh	r1, [r1, #0x6]
	bl	AreMovesContestCombo
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0
	beq	.L1670	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r2, r4, r0
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1670	@cond_branch
	strb	r3, [r2, #0x16]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r1, #0x15]
	mov	r2, #0x40
	orr	r0, r0, r2
	strb	r0, [r1, #0x15]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	mov	r1, #0x0
	ldrsh	r2, [r0, r1]
	ldrb	r1, [r0, #0x16]
	mul	r1, r1, r2
	strb	r1, [r0, #0x17]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r1, #0x15]
	mov	r2, #0x8
	b	.L1690
.L1698:
	.align	2, 0
.L1697:
	.word	gContestResources
.L1670:
	ldr	r2, .L1699
	ldr	r5, .L1699+0x4
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r4, r0, #0x2
	add	r3, r4, r1
	ldrh	r0, [r3, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L1672	@cond_branch
	ldrb	r0, [r3, #0x15]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r3, #0x15]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	add	r1, r4, r1
	ldrb	r0, [r1, #0x15]
	mov	r2, #0x40
.L1690:
	orr	r0, r0, r2
	strb	r0, [r1, #0x15]
	b	.L1669
.L1700:
	.align	2, 0
.L1699:
	.word	gContestMoves
	.word	gContestResources
.L1672:
	ldrb	r1, [r3, #0x15]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r3, #0x15]
.L1669:
	ldr	r5, .L1701
	ldr	r0, [r5]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r4, r0, #0x2
	add	r2, r4, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x1
	mov	r8, r0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1674	@cond_branch
	ldrb	r0, [r2, #0xb]
	lsl	r0, r0, #0x19
	lsr	r0, r0, #0x1d
	add	r0, r0, #0x1
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	strb	r1, [r2, #0x18]
.L1674:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r2, r4, r0
	ldrb	r1, [r2, #0xc]
	mov	r0, r8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1675	@cond_branch
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x15]
	ldr	r2, [r5]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	mov	r1, #0x0
	strh	r1, [r0, #0x2]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	strh	r1, [r0]
.L1675:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	add	r0, r4, r0
	ldrh	r0, [r0, #0x6]
	bl	Contest_GetMoveExcitement
	ldr	r1, [r5]
	ldr	r1, [r1, #0x10]
	strb	r0, [r1]
	ldr	r2, [r5]
	ldr	r0, [r2, #0x4]
	add	r0, r4, r0
	ldrb	r1, [r0, #0x11]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1676	@cond_branch
	ldr	r0, [r2, #0x10]
	mov	r1, r8
	strb	r1, [r0]
.L1676:
	ldr	r1, [r5]
	ldr	r3, [r1, #0x10]
	mov	r0, #0x0
	ldrsb	r0, [r3, r0]
	cmp	r0, #0
	ble	.L1677	@cond_branch
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r1, #0x0
	ldrsb	r1, [r3, r1]
	add	r0, r0, r1
	cmp	r0, #0x4
	ble	.L1678	@cond_branch
	mov	r0, #0x3c
	b	.L1691
.L1702:
	.align	2, 0
.L1701:
	.word	gContestResources
.L1678:
	mov	r0, #0xa
	b	.L1691
.L1677:
	mov	r0, #0x0
.L1691:
	strb	r0, [r3, #0x2]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x0
	b	.L1692
.L1686:
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L1683:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L1682	@cond_branch
.L1692:
	cmp	r2, r6
	beq	.L1683	@cond_branch
	cmp	r0, #0
	bne	.L1686	@cond_branch
.L1682:
	ldr	r0, .L1703
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	sub	r0, r7, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strb	r2, [r0, #0x1b]
.L1655:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1704:
	.align	2, 0
.L1703:
	.word	gContestResources
.Lfe139:
	.size	 sub_80DD080,.Lfe139-sub_80DD080
	.align	2, 0
	.globl	SetContestantEffectStringID
	.type	 SetContestantEffectStringID,function
	.thumb_func
SetContestantEffectStringID:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1706
	ldr	r2, [r2]
	ldr	r3, [r2, #0x4]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	strb	r1, [r2, #0x13]
	bx	lr
.L1707:
	.align	2, 0
.L1706:
	.word	gContestResources
.Lfe140:
	.size	 SetContestantEffectStringID,.Lfe140-SetContestantEffectStringID
	.align	2, 0
	.globl	SetContestantEffectStringID2
	.type	 SetContestantEffectStringID2,function
	.thumb_func
SetContestantEffectStringID2:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1709
	ldr	r2, [r2]
	ldr	r3, [r2, #0x4]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	strb	r1, [r2, #0x14]
	bx	lr
.L1710:
	.align	2, 0
.L1709:
	.word	gContestResources
.Lfe141:
	.size	 SetContestantEffectStringID2,.Lfe141-SetContestantEffectStringID2
	.align	2, 0
	.globl	SetStartledString
	.type	 SetStartledString,function
	.thumb_func
SetStartledString:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r2, r1, #0
	cmp	r1, #0x3b
	bls	.L1712	@cond_branch
	mov	r1, #0x35
	bl	SetContestantEffectStringID
	b	.L1713
.L1712:
	cmp	r1, #0x27
	bls	.L1714	@cond_branch
	mov	r1, #0x34
	bl	SetContestantEffectStringID
	b	.L1713
.L1714:
	cmp	r1, #0x1d
	bls	.L1716	@cond_branch
	mov	r1, #0x33
	bl	SetContestantEffectStringID
	b	.L1713
.L1716:
	cmp	r1, #0x13
	bls	.L1718	@cond_branch
	mov	r1, #0x32
	bl	SetContestantEffectStringID
	b	.L1713
.L1718:
	cmp	r2, #0x9
	bls	.L1713	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x31
	bl	SetContestantEffectStringID
.L1713:
	pop	{r0}
	bx	r0
.Lfe142:
	.size	 SetStartledString,.Lfe142-SetStartledString
	.align	2, 0
	.type	 sub_80DD45C,function
	.thumb_func
sub_80DD45C:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r0, .L1730
	lsl	r1, r4, #0x6
	ldr	r2, .L1730+0x4
	add	r1, r1, r2
	bl	StringCopy
	ldr	r0, .L1730+0x8
	ldr	r5, .L1730+0xc
	ldr	r1, [r5]
	ldr	r2, [r1, #0x4]
	lsl	r1, r4, #0x3
	sub	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1, #0x6]
	mov	r1, #0xd
	mul	r1, r1, r2
	ldr	r2, .L1730+0x10
	add	r1, r1, r2
	bl	StringCopy
	ldr	r3, .L1730+0x14
	ldr	r1, [r5]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	lsl	r1, r0, #0x1d
	cmp	r1, #0
	bne	.L1722	@cond_branch
	ldr	r0, .L1730+0x18
	ldr	r1, .L1730+0x1c
	bl	StringCopy
	b	.L1723
.L1731:
	.align	2, 0
.L1730:
	.word	gStringVar1
	.word	gContestMons+0x2
	.word	gStringVar2
	.word	gContestResources
	.word	gMoveNames
	.word	gContestMoves
	.word	gStringVar3
	.word	gText_Contest_Shyness
.L1722:
	lsr	r0, r1, #0x1d
	cmp	r0, #0x1
	bne	.L1724	@cond_branch
	ldr	r0, .L1732
	ldr	r1, .L1732+0x4
	bl	StringCopy
	b	.L1723
.L1733:
	.align	2, 0
.L1732:
	.word	gStringVar3
	.word	gText_Contest_Anxiety
.L1724:
	lsr	r0, r1, #0x1d
	cmp	r0, #0x2
	bne	.L1726	@cond_branch
	ldr	r0, .L1734
	ldr	r1, .L1734+0x4
	bl	StringCopy
	b	.L1723
.L1735:
	.align	2, 0
.L1734:
	.word	gStringVar3
	.word	gText_Contest_Laziness
.L1726:
	lsr	r0, r1, #0x1d
	cmp	r0, #0x3
	bne	.L1728	@cond_branch
	ldr	r0, .L1736
	ldr	r1, .L1736+0x4
	bl	StringCopy
	b	.L1723
.L1737:
	.align	2, 0
.L1736:
	.word	gStringVar3
	.word	gText_Contest_Hesitancy
.L1728:
	ldr	r0, .L1738
	ldr	r1, .L1738+0x4
	bl	StringCopy
.L1723:
	ldr	r4, .L1738+0x8
	ldr	r1, .L1738+0xc
	lsl	r0, r6, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	bl	ContestClearGeneralTextWindow
	add	r0, r4, #0
	mov	r1, #0x1
	bl	Contest_StartTextPrinter
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1739:
	.align	2, 0
.L1738:
	.word	gStringVar3
	.word	gText_Contest_Fear
	.word	gStringVar4
	.word	sAppealResultTexts
.Lfe143:
	.size	 sub_80DD45C,.Lfe143-sub_80DD45C
	.align	2, 0
	.globl	MakeContestantNervous
	.type	 MakeContestantNervous,function
	.thumb_func
MakeContestantNervous:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r4, .L1741
	ldr	r1, [r4]
	ldr	r3, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r3, r1, r3
	ldrb	r0, [r3, #0xc]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r3, #0xc]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r1, r1, r0
	mov	r0, #0x0
	strh	r0, [r1, #0x6]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1742:
	.align	2, 0
.L1741:
	.word	gContestResources
.Lfe144:
	.size	 MakeContestantNervous,.Lfe144-MakeContestantNervous
	.align	2, 0
	.type	 ApplyNextTurnOrder,function
	.thumb_func
ApplyNextTurnOrder:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	mov	r0, #0x0
	mov	ip, r0
	mov	r4, #0x0
	ldr	r1, .L1780
	mov	r9, r1
	add	r2, sp, #0x4
	mov	r6, r9
	mov	r5, #0x0
	add	r3, r2, #0
.L1747:
	mov	r0, sp
	add	r1, r0, r4
	add	r0, r4, r6
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, r4
	strb	r5, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1747	@cond_branch
	mov	r4, #0x0
	ldr	r7, .L1780+0x4
	ldr	r1, [r7]
	mov	r8, r1
	add	r5, r2, #0
.L1752:
	mov	r2, #0x0
	mov	r0, r8
	ldr	r1, [r0, #0x4]
.L1756:
	ldrb	r0, [r1, #0x19]
	cmp	r0, r4
	beq	.L1779	@cond_branch
	add	r1, r1, #0x1c
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1756	@cond_branch
.L1754:
	cmp	r2, #0x4
	bne	.L1751	@cond_branch
	mov	r2, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L1762	@cond_branch
	ldr	r0, [r7]
	ldr	r0, [r0, #0x4]
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0xff
	bne	.L1762	@cond_branch
	mov	ip, r2
	mov	r2, #0x1
	b	.L1761
.L1781:
	.align	2, 0
.L1780:
	.word	gContestantTurnOrder
	.word	gContestResources
.L1779:
	mov	r1, sp
	add	r0, r1, r2
	strb	r4, [r0]
	add	r1, r5, r2
	mov	r0, #0x1
	strb	r0, [r1]
	b	.L1754
.L1762:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L1778	@cond_branch
	add	r0, r5, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1762	@cond_branch
	ldr	r0, [r7]
	ldr	r1, [r0, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0xff
	bne	.L1762	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	add	r2, r2, #0x1
.L1761:
	cmp	r2, #0x3
	bgt	.L1778	@cond_branch
	ldr	r6, .L1782
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r3, r0, #0x2
.L1769:
	add	r0, r5, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L1768	@cond_branch
	ldr	r0, [r7]
	ldr	r0, [r0, #0x4]
	add	r0, r3, r0
	ldrb	r0, [r0, #0x19]
	cmp	r0, #0xff
	bne	.L1768	@cond_branch
	mov	r1, ip
	add	r0, r1, r6
	add	r1, r2, r6
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L1768	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
.L1768:
	add	r3, r3, #0x1c
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1769	@cond_branch
.L1778:
	mov	r0, sp
	add	r0, r0, ip
	strb	r4, [r0]
	mov	r0, ip
	add	r1, r5, r0
	mov	r0, #0x1
	strb	r0, [r1]
.L1751:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1752	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L1782+0x4
	mov	r5, #0x0
.L1776:
	ldr	r0, [r6]
	ldr	r1, [r0, #0x8]
	add	r1, r1, r4
	mov	r0, sp
	add	r3, r0, r4
	ldrb	r0, [r3]
	strb	r0, [r1]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x4]
	add	r0, r5, r0
	mov	r1, #0xff
	strb	r1, [r0, #0x19]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	add	r1, r5, r1
	ldrb	r2, [r1, #0x10]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1, #0x10]
	mov	r0, r9
	add	r1, r4, r0
	ldrb	r0, [r3]
	strb	r0, [r1]
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L1776	@cond_branch
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1783:
	.align	2, 0
.L1782:
	.word	gContestantTurnOrder
	.word	gContestResources
.Lfe145:
	.size	 ApplyNextTurnOrder,.Lfe145-ApplyNextTurnOrder
	.align	2, 0
	.type	 sub_80DD6DC,function
	.thumb_func
sub_80DD6DC:
	push	{lr}
	add	r2, r0, #0
	ldrh	r0, [r2, #0x30]
	add	r1, r0, #0x1
	strh	r1, [r2, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x54
	ble	.L1785	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x30]
	add	r3, r2, #0
	add	r3, r3, #0x3e
	ldrb	r0, [r3]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r3]
	ldr	r0, .L1786
	str	r0, [r2, #0x1c]
	ldr	r0, .L1786+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x11
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
.L1785:
	pop	{r0}
	bx	r0
.L1787:
	.align	2, 0
.L1786:
	.word	SpriteCallbackDummy
	.word	gContestResources
.Lfe146:
	.size	 sub_80DD6DC,.Lfe146-sub_80DD6DC
	.align	2, 0
	.type	 sub_80DD720,function
	.thumb_func
sub_80DD720:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L1802
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r5, [r0, #0x12]
	cmp	r1, #0x8
	bls	.LCB16001
	b	.L1799	@long jump
.LCB16001:
	lsl	r0, r1, #0x2
	ldr	r1, .L1802+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L1803:
	.align	2, 0
.L1802:
	.word	gContestResources
	.word	.L1800
	.align	2, 0
	.align	2, 0
.L1800:
	.word	.L1791
	.word	.L1791
	.word	.L1792
	.word	.L1793
	.word	.L1794
	.word	.L1795
	.word	.L1796
	.word	.L1799
	.word	.L1797
.L1791:
	ldr	r0, .L1804
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x2e]
	ldr	r2, .L1804+0x4
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1804+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x20
	bl	PlaySE
	b	.L1801
.L1805:
	.align	2, 0
.L1804:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1792:
	ldr	r0, .L1806
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x4
	ldr	r3, .L1806+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1806+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x1f
	bl	PlaySE
	b	.L1801
.L1807:
	.align	2, 0
.L1806:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1793:
	ldr	r0, .L1808
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x8
	ldr	r3, .L1808+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1808+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x1f
	bl	PlaySE
	b	.L1801
.L1809:
	.align	2, 0
.L1808:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1794:
	ldr	r0, .L1810
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0xc
	ldr	r3, .L1810+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1810+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x2d
	bl	PlaySE
	b	.L1801
.L1811:
	.align	2, 0
.L1810:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1795:
	ldr	r0, .L1812
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0xc
	ldr	r3, .L1812+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1812+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x2d
	bl	PlaySE
	b	.L1801
.L1813:
	.align	2, 0
.L1812:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1796:
	ldr	r0, .L1814
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x10
	ldr	r3, .L1814+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1814+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x2d
	bl	PlaySE
	b	.L1801
.L1815:
	.align	2, 0
.L1814:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1797:
	ldr	r0, .L1816
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x18
	ldr	r3, .L1816+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1816+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0xc3
	bl	PlaySE
	b	.L1801
.L1817:
	.align	2, 0
.L1816:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.L1799:
	ldr	r0, .L1818
	lsl	r4, r5, #0x4
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r2, [r1, #0x2e]
	add	r2, r2, #0x14
	ldr	r3, .L1818+0x4
	add	r0, r3, #0
	and	r2, r2, r0
	ldrh	r3, [r1, #0x4]
	ldr	r0, .L1818+0x8
	and	r0, r0, r3
	orr	r0, r0, r2
	strh	r0, [r1, #0x4]
	mov	r0, #0x2d
	bl	PlaySE
.L1801:
	add	r2, r4, #0
	ldr	r4, .L1818
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r1, r2, r4
	mov	r0, #0x0
	strh	r0, [r1, #0x30]
	add	r1, r1, #0x3e
	ldrb	r3, [r1]
	sub	r0, r0, #0x5
	and	r0, r0, r3
	strb	r0, [r1]
	add	r4, r4, #0x1c
	add	r2, r2, r4
	ldr	r0, .L1818+0xc
	str	r0, [r2]
	ldr	r0, .L1818+0x10
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1819:
	.align	2, 0
.L1818:
	.word	gSprites
	.word	0x3ff
	.word	-0x400
	.word	sub_80DD6DC
	.word	gContestResources
.Lfe147:
	.size	 sub_80DD720,.Lfe147-sub_80DD720
	.align	2, 0
	.type	 UpdateApplauseMeter,function
	.thumb_func
UpdateApplauseMeter:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r5, #0x0
	ldr	r6, .L1829
	ldr	r0, .L1829+0x4
	mov	r9, r0
	ldr	r0, .L1829+0x8
	mov	r8, r0
	ldr	r7, .L1829+0xc
.L1824:
	ldr	r0, [r6]
	ldr	r1, [r0]
	mov	r0, #0x13
	ldrsb	r0, [r1, r0]
	ldr	r4, .L1829+0x10
	cmp	r5, r0
	bge	.L1825	@cond_branch
	add	r4, r4, #0x40
.L1825:
	add	r0, r1, #0
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrh	r1, [r0, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r0, r5, #0
	add	r0, r0, #0x11
	add	r1, r1, r0
	lsl	r1, r1, #0x5
	add	r1, r1, r8
	add	r0, r4, #0
	add	r2, r7, #0
	bl	CpuSet
	add	r0, r4, #0
	add	r0, r0, #0x20
	ldr	r1, [r6]
	ldr	r1, [r1]
	add	r1, r1, #0x58
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r9
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	add	r2, r5, #0
	add	r2, r2, #0x19
	add	r1, r1, r2
	lsl	r1, r1, #0x5
	add	r1, r1, r8
	add	r2, r7, #0
	bl	CpuSet
	ldr	r0, [r6]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x4
	ble	.L1823	@cond_branch
	bl	StartApplauseOverflowAnimation
.L1823:
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L1824	@cond_branch
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1830:
	.align	2, 0
.L1829:
	.word	gContestResources
	.word	gSprites
	.word	0x6010000
	.word	0x4000008
	.word	gContestApplauseMeterGfx
.Lfe148:
	.size	 UpdateApplauseMeter,.Lfe148-UpdateApplauseMeter
	.align	2, 0
	.globl	Contest_GetMoveExcitement
	.type	 Contest_GetMoveExcitement,function
	.thumb_func
Contest_GetMoveExcitement:
	lsl	r0, r0, #0x10
	ldr	r3, .L1832
	ldr	r1, .L1832+0x4
	lsr	r0, r0, #0xd
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1d
	ldr	r0, .L1832+0x8
	ldrh	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	add	r1, r1, r0
	add	r1, r1, r3
	mov	r0, #0x0
	ldrsb	r0, [r1, r0]
	bx	lr
.L1833:
	.align	2, 0
.L1832:
	.word	gContestExcitementTable
	.word	gContestMoves
	.word	gSpecialVar_ContestCategory
.Lfe149:
	.size	 Contest_GetMoveExcitement,.Lfe149-Contest_GetMoveExcitement
	.align	2, 0
	.type	 StartApplauseOverflowAnimation,function
	.thumb_func
StartApplauseOverflowAnimation:
	push	{r4, r5, lr}
	ldr	r0, .L1835
	mov	r1, #0xa
	bl	CreateTask
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L1835+0x4
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r0, #0x1
	strh	r0, [r4, #0xa]
	ldr	r0, .L1835+0x8
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0xc]
	add	r0, r5, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L1836:
	.align	2, 0
.L1835:
	.word	Task_ApplauseOverflowAnimation
	.word	gTasks
	.word	0xabe2
.Lfe150:
	.size	 StartApplauseOverflowAnimation,.Lfe150-StartApplauseOverflowAnimation
	.align	2, 0
	.type	 Task_ApplauseOverflowAnimation,function
	.thumb_func
Task_ApplauseOverflowAnimation:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1845
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	bne	.L1838	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x8]
	mov	r3, #0xe
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L1839	@cond_branch
	ldrh	r0, [r2, #0x10]
	add	r0, r0, #0x1
	b	.L1844
.L1846:
	.align	2, 0
.L1845:
	.word	gTasks
.L1839:
	ldrh	r0, [r2, #0x10]
	sub	r0, r0, #0x1
.L1844:
	strh	r0, [r2, #0x10]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x4
	mov	r3, #0x84
	lsl	r3, r3, #0x1
	add	r6, r3, #0
	add	r0, r0, r6
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0x10]
	ldr	r3, .L1847
	mov	r1, #0x1
	bl	BlendPalette
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L1842	@cond_branch
	cmp	r0, #0x10
	bne	.L1838	@cond_branch
.L1842:
	ldrh	r0, [r4, #0xe]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0xe]
	ldr	r0, .L1847+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x4
	bgt	.L1838	@cond_branch
	mov	r3, #0xc
	ldrsh	r0, [r4, r3]
	lsl	r0, r0, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	mov	r2, #0x0
	mov	r3, #0x1f
	bl	BlendPalette
	add	r0, r5, #0
	bl	DestroyTask
.L1838:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1848:
	.align	2, 0
.L1847:
	.word	0x7fff
	.word	gContestResources
.Lfe151:
	.size	 Task_ApplauseOverflowAnimation,.Lfe151-Task_ApplauseOverflowAnimation
	.align	2, 0
	.type	 StartMoveApplauseMeterOnscreen,function
	.thumb_func
StartMoveApplauseMeterOnscreen:
	push	{r4, lr}
	ldr	r0, .L1850
	mov	r1, #0xa
	bl	CreateTask
	ldr	r3, .L1850+0x4
	ldr	r4, .L1850+0x8
	ldr	r2, [r4]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldr	r1, .L1850+0xc
	strh	r1, [r0, #0x24]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	ldr	r0, [r4]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1851:
	.align	2, 0
.L1850:
	.word	Task_MoveApplauseMeterOnscreen
	.word	gSprites
	.word	gContestResources
	.word	0xffba
.Lfe152:
	.size	 StartMoveApplauseMeterOnscreen,.Lfe152-StartMoveApplauseMeterOnscreen
	.align	2, 0
	.type	 Task_MoveApplauseMeterOnscreen,function
	.thumb_func
Task_MoveApplauseMeterOnscreen:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r3, r0, #0
	ldr	r4, .L1855
	ldr	r0, [r4]
	ldr	r0, [r0]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1855+0x4
	add	r2, r0, r1
	ldr	r0, .L1855+0x8
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r5, #0xd0
	lsl	r5, r5, #0x3
	add	r0, r5, #0
	ldrh	r5, [r1, #0x1c]
	add	r0, r0, r5
	strh	r0, [r1, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r5, [r2, #0x24]
	add	r0, r0, r5
	strh	r0, [r2, #0x24]
	ldrb	r0, [r1, #0x1c]
	strh	r0, [r1, #0x1c]
	mov	r1, #0x24
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	ble	.L1853	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x24]
.L1853:
	mov	r5, #0x24
	ldrsh	r0, [r2, r5]
	cmp	r0, #0
	bne	.L1854	@cond_branch
	ldr	r0, [r4]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
	add	r0, r3, #0
	bl	DestroyTask
.L1854:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1856:
	.align	2, 0
.L1855:
	.word	gContestResources
	.word	gSprites
	.word	gTasks
.Lfe153:
	.size	 Task_MoveApplauseMeterOnscreen,.Lfe153-Task_MoveApplauseMeterOnscreen
	.align	2, 0
	.type	 TryMoveApplauseMeterOffscreen,function
	.thumb_func
TryMoveApplauseMeterOffscreen:
	push	{r4, r5, lr}
	ldr	r5, .L1861
	ldr	r4, .L1861+0x4
	ldr	r0, [r4]
	ldr	r2, [r0]
	add	r0, r2, #0
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	cmp	r0, #0
	bge	.L1858	@cond_branch
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	b	.L1860
.L1862:
	.align	2, 0
.L1861:
	.word	gSprites
	.word	gContestResources
.L1858:
	ldr	r0, .L1863
	mov	r1, #0xa
	bl	CreateTask
	ldr	r2, [r4]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	ldr	r2, [r2]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x40
	orr	r0, r0, r1
.L1860:
	strb	r0, [r2, #0x6]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1864:
	.align	2, 0
.L1863:
	.word	Task_MoveApplauseMeterOffscreen
.Lfe154:
	.size	 TryMoveApplauseMeterOffscreen,.Lfe154-TryMoveApplauseMeterOffscreen
	.align	2, 0
	.type	 Task_MoveApplauseMeterOffscreen,function
	.thumb_func
Task_MoveApplauseMeterOffscreen:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	ldr	r5, .L1868
	ldr	r0, [r5]
	ldr	r0, [r0]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L1868+0x4
	add	r3, r0, r1
	ldr	r0, .L1868+0x8
	lsl	r2, r4, #0x2
	add	r2, r2, r4
	lsl	r2, r2, #0x3
	add	r2, r2, r0
	mov	r1, #0xd0
	lsl	r1, r1, #0x3
	add	r0, r1, #0
	ldrh	r1, [r2, #0x1c]
	add	r0, r0, r1
	strh	r0, [r2, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	ldrh	r1, [r3, #0x24]
	sub	r1, r1, r0
	strh	r1, [r3, #0x24]
	ldrb	r0, [r2, #0x1c]
	strh	r0, [r2, #0x1c]
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	mov	r1, #0x46
	neg	r1, r1
	cmp	r0, r1
	bge	.L1866	@cond_branch
	ldr	r0, .L1868+0xc
	strh	r0, [r3, #0x24]
.L1866:
	mov	r2, #0x24
	ldrsh	r0, [r3, r2]
	cmp	r0, r1
	bne	.L1867	@cond_branch
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x41
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
	add	r0, r4, #0
	bl	DestroyTask
.L1867:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1869:
	.align	2, 0
.L1868:
	.word	gContestResources
	.word	gSprites
	.word	gTasks
	.word	0xffba
.Lfe155:
	.size	 Task_MoveApplauseMeterOffscreen,.Lfe155-Task_MoveApplauseMeterOffscreen
	.align	2, 0
	.type	 ShowAndUpdateApplauseMeter,function
	.thumb_func
ShowAndUpdateApplauseMeter:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L1871
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L1871+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	strh	r4, [r1, #0x8]
	ldr	r0, .L1871+0x8
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1872:
	.align	2, 0
.L1871:
	.word	Task_ShowAndUpdateApplauseMeter
	.word	gTasks
	.word	gContestResources
.Lfe156:
	.size	 ShowAndUpdateApplauseMeter,.Lfe156-ShowAndUpdateApplauseMeter
	.align	2, 0
	.type	 Task_ShowAndUpdateApplauseMeter,function
	.thumb_func
Task_ShowAndUpdateApplauseMeter:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1884
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L1876	@cond_branch
	cmp	r0, #0x1
	bgt	.L1882	@cond_branch
	cmp	r0, #0
	beq	.L1875	@cond_branch
	b	.L1874
.L1885:
	.align	2, 0
.L1884:
	.word	gTasks
.L1882:
	cmp	r0, #0x2
	beq	.L1878	@cond_branch
	b	.L1874
.L1875:
	bl	StartMoveApplauseMeterOnscreen
	b	.L1883
.L1876:
	ldr	r0, .L1886
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1874	@cond_branch
.L1883:
	ldrh	r0, [r4, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1c]
	b	.L1874
.L1887:
	.align	2, 0
.L1886:
	.word	gContestResources
.L1878:
	ldrh	r0, [r4, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x14
	ble	.L1874	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1e]
	bl	UpdateApplauseMeter
	ldr	r0, .L1888
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
	add	r0, r5, #0
	bl	DestroyTask
.L1874:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1889:
	.align	2, 0
.L1888:
	.word	gContestResources
.Lfe157:
	.size	 Task_ShowAndUpdateApplauseMeter,.Lfe157-Task_ShowAndUpdateApplauseMeter
	.align	2, 0
	.globl	HideApplauseMeterNoAnim
	.type	 HideApplauseMeterNoAnim,function
	.thumb_func
HideApplauseMeterNoAnim:
	ldr	r3, .L1891
	ldr	r0, .L1891+0x4
	ldr	r2, [r0]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	mov	r1, #0x0
	strh	r1, [r0, #0x24]
	ldr	r0, [r2]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	add	r0, r0, #0x3e
	ldrb	r2, [r0]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.L1892:
	.align	2, 0
.L1891:
	.word	gSprites
	.word	gContestResources
.Lfe158:
	.size	 HideApplauseMeterNoAnim,.Lfe158-HideApplauseMeterNoAnim
	.align	2, 0
	.globl	ShowApplauseMeterNoAnim
	.type	 ShowApplauseMeterNoAnim,function
	.thumb_func
ShowApplauseMeterNoAnim:
	ldr	r2, .L1894
	ldr	r0, .L1894+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0x58
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	bx	lr
.L1895:
	.align	2, 0
.L1894:
	.word	gSprites
	.word	gContestResources
.Lfe159:
	.size	 ShowApplauseMeterNoAnim,.Lfe159-ShowApplauseMeterNoAnim
	.align	2, 0
	.type	 sub_80DDE0C,function
	.thumb_func
sub_80DDE0C:
	push	{lr}
	ldr	r0, .L1897
	mov	r1, #0xf
	bl	CreateTask
	ldr	r0, .L1897+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x6]
	pop	{r0}
	bx	r0
.L1898:
	.align	2, 0
.L1897:
	.word	sub_80DDE30
	.word	gContestResources
.Lfe160:
	.size	 sub_80DDE0C,.Lfe160-sub_80DDE0C
	.align	2, 0
	.type	 sub_80DDE30,function
	.thumb_func
sub_80DDE30:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L1904
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L1900	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	mov	r1, #0x1e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L1901	@cond_branch
	ldr	r0, .L1904+0x4
	ldr	r1, .L1904+0x8
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r3, #0x1
	bl	RequestDma3Copy
	b	.L1902
.L1905:
	.align	2, 0
.L1904:
	.word	gTasks
	.word	gHeap+0x19000
	.word	0x6002000
.L1901:
	ldr	r0, .L1906
	ldr	r1, .L1906+0x4
	mov	r2, #0x80
	lsl	r2, r2, #0x5
	mov	r3, #0x1
	bl	RequestDma3Copy
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
.L1902:
	ldr	r1, .L1906+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x1e]
	mov	r2, #0x1
	eor	r1, r1, r2
	strh	r1, [r0, #0x1e]
	mov	r1, #0x20
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x9
	bne	.L1900	@cond_branch
	ldr	r0, .L1906+0xc
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x6]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x6]
	add	r0, r5, #0
	bl	DestroyTask
.L1900:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1907:
	.align	2, 0
.L1906:
	.word	gHeap+0x18000
	.word	0x6002000
	.word	gTasks
	.word	gContestResources
.Lfe161:
	.size	 sub_80DDE30,.Lfe161-sub_80DDE30
	.align	2, 0
	.type	 sub_80DDED0,function
	.thumb_func
sub_80DDED0:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r0, .L1916
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r4, r4, #0x18
	cmp	r4, #0
	ble	.L1909	@cond_branch
	ldr	r7, .L1916+0x4
	lsl	r0, r5, #0x18
	add	r4, r0, #0
	cmp	r4, #0
	ble	.L1910	@cond_branch
	mov	r5, #0x0
	ldr	r2, .L1916+0x8
	ldr	r0, [r2]
	ldr	r0, [r0]
	mov	r1, #0x13
	ldrsb	r1, [r0, r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	b	.L1912
.L1917:
	.align	2, 0
.L1916:
	.word	sub_80DDF80
	.word	0x237e
	.word	gContestResources
.L1910:
	ldr	r2, .L1918
	ldr	r0, [r2]
	ldr	r0, [r0]
	mov	r1, #0x13
	ldrsb	r1, [r0, r1]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r3, #0x0
	b	.L1912
.L1919:
	.align	2, 0
.L1918:
	.word	gContestResources
.L1909:
	mov	r7, #0x0
	lsl	r0, r5, #0x18
	add	r4, r0, #0
	cmp	r4, #0
	ble	.L1913	@cond_branch
	mov	r5, #0x0
	mov	r3, #0xc
	b	.L1915
.L1913:
	mov	r5, #0xc
	mov	r3, #0x0
.L1915:
	ldr	r2, .L1920
.L1912:
	ldr	r1, .L1920+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r7, [r0, #0x8]
	strh	r5, [r0, #0xa]
	asr	r1, r4, #0x18
	strh	r1, [r0, #0xc]
	strh	r3, [r0, #0xe]
	ldr	r0, [r2]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x7]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1921:
	.align	2, 0
.L1920:
	.word	gContestResources
	.word	gTasks
.Lfe162:
	.size	 sub_80DDED0,.Lfe162-sub_80DDED0
	.align	2, 0
	.type	 sub_80DDF80,function
	.thumb_func
sub_80DDF80:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L1928
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r3, #0x1c]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L1923	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x1c]
	mov	r1, #0xc
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	ble	.L1924	@cond_branch
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	b	.L1927
.L1929:
	.align	2, 0
.L1928:
	.word	gTasks
.L1924:
	ldrh	r0, [r3, #0xa]
	sub	r0, r0, #0x1
.L1927:
	strh	r0, [r3, #0xa]
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r2
	ldrb	r2, [r4, #0xa]
	ldrh	r3, [r4, #0x8]
	mov	r0, #0x11
	mov	r1, #0x1
	bl	BlendPalette
	ldrb	r2, [r4, #0xa]
	ldrh	r3, [r4, #0x8]
	mov	r0, #0x1a
	mov	r1, #0x1
	bl	BlendPalette
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L1923	@cond_branch
	add	r0, r5, #0
	bl	DestroyTask
	ldr	r0, .L1930
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x7]
.L1923:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1931:
	.align	2, 0
.L1930:
	.word	gContestResources
.Lfe163:
	.size	 sub_80DDF80,.Lfe163-sub_80DDF80
	.align	2, 0
	.type	 sub_80DE008,function
	.thumb_func
sub_80DE008:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r5, #0x0
	ldr	r0, .L1941
	mov	r9, r0
	mov	r8, r9
	ldr	r6, .L1941+0x4
	mov	r4, #0x0
	mov	r7, #0x0
.L1936:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r0, r7, r0
	ldrb	r1, [r0, #0x10]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1937	@cond_branch
	mov	r2, sl
	cmp	r2, #0
	beq	.L1937	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	GetTurnOrderNumberGfx
	mov	r3, r8
	ldr	r1, [r3]
	ldr	r1, [r1, #0x14]
	add	r1, r4, r1
	ldrb	r2, [r1, #0x1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r1, [r1, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x11
	ldr	r2, .L1941+0x8
	add	r1, r1, r2
	ldr	r2, .L1941+0xc
	bl	CpuSet
	mov	r0, r8
	ldr	r3, [r0]
	ldr	r0, [r3, #0x14]
	add	r0, r4, r0
	ldrb	r0, [r0, #0x1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldr	r2, .L1941+0x10
	ldr	r0, .L1941+0x14
	add	r0, r5, r0
	ldrb	r0, [r0]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1, #0x22]
	ldr	r0, [r3, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r3, #0x5
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	b	.L1940
.L1942:
	.align	2, 0
.L1941:
	.word	gContestResources
	.word	gSprites
	.word	0x60100c0
	.word	0x4000008
	.word	gUnknown_08587A70
	.word	gContestantTurnOrder
.L1937:
	mov	r1, r9
	ldr	r0, [r1]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0, #0x1]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
.L1940:
	strb	r1, [r0]
	add	r4, r4, #0x4
	add	r7, r7, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1936	@cond_branch
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe164:
	.size	 sub_80DE008,.Lfe164-sub_80DE008
	.align	2, 0
	.type	 GetTurnOrderNumberGfx,function
	.thumb_func
GetTurnOrderNumberGfx:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1947
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r1, [r2, #0x10]
	mov	r0, #0xc0
	and	r0, r0, r1
	cmp	r0, #0x40
	bne	.L1944	@cond_branch
	ldrb	r0, [r2, #0x19]
	lsl	r0, r0, #0x5
	ldr	r1, .L1947+0x4
	add	r0, r0, r1
	b	.L1946
.L1948:
	.align	2, 0
.L1947:
	.word	gContestResources
	.word	gContestNextTurnNumbersGfx
.L1944:
	ldr	r0, .L1949
.L1946:
	pop	{r1}
	bx	r1
.L1950:
	.align	2, 0
.L1949:
	.word	gContestNextTurnRandomGfx
.Lfe165:
	.size	 GetTurnOrderNumberGfx,.Lfe165-GetTurnOrderNumberGfx
	.align	2, 0
	.type	 sub_80DE12C,function
	.thumb_func
sub_80DE12C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	mov	r7, #0x0
	mov	r0, #0x2
	mov	sl, r0
	mov	r0, #0x1
	mov	r8, r0
	mov	r0, #0x11
	mov	r9, r0
.L1955:
	ldr	r0, .L1958
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0xd
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L1954	@cond_branch
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L1954	@cond_branch
	ldr	r0, .L1958+0x4
	add	r0, r7, r0
	ldrb	r0, [r0]
	lsl	r5, r0, #0x2
	add	r5, r5, r0
	add	r6, r5, #0x2
	mov	r0, #0x3
	bl	sub_80DB748
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	r0, sl
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x14
	add	r3, r6, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	add	r4, r4, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r5, r5, #0x3
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, sl
	str	r0, [sp]
	mov	r0, r8
	str	r0, [sp, #0x4]
	mov	r0, r9
	str	r0, [sp, #0x8]
	mov	r0, r8
	str	r0, [sp, #0xc]
	mov	r0, #0x0
	add	r1, r4, #0
	mov	r2, #0x14
	add	r3, r5, #0
	bl	ContestBG_FillBoxWithIncrementingTile
	mov	r0, #0x63
	bl	PlaySE
.L1954:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L1955	@cond_branch
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1959:
	.align	2, 0
.L1958:
	.word	gContestResources
	.word	gContestantTurnOrder
.Lfe166:
	.size	 sub_80DE12C,.Lfe166-sub_80DE12C
	.align	2, 0
	.globl	sub_80DE1E8
	.type	 sub_80DE1E8,function
	.thumb_func
sub_80DE1E8:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1965
	ldr	r1, [r1]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r1, [r2, #0x15]
	mov	r3, #0x1
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1962	@cond_branch
	ldrb	r1, [r2, #0xc]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L1961	@cond_branch
.L1962:
	mov	r0, #0x0
	b	.L1964
.L1966:
	.align	2, 0
.L1965:
	.word	gContestResources
.L1961:
	mov	r0, #0x1
.L1964:
	pop	{r1}
	bx	r1
.Lfe167:
	.size	 sub_80DE1E8,.Lfe167-sub_80DE1E8
	.align	2, 0
	.type	 sub_80DE224,function
	.thumb_func
sub_80DE224:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	mov	r0, #0xa
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r2, sp
	ldrb	r1, [r2]
	mov	r4, #0x4
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldrb	r1, [r2]
	mov	r0, #0xd
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r0, #0x8
	bl	GetGpuReg
	mov	r6, sp
	add	r6, r6, #0x2
	strh	r0, [r6]
	mov	r0, #0xc
	bl	GetGpuReg
	add	r5, sp, #0x4
	strh	r0, [r5]
	ldrb	r1, [r6]
	add	r0, r4, #0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r6]
	ldrb	r0, [r5]
	and	r4, r4, r0
	orr	r4, r4, r1
	strb	r4, [r5]
	ldrh	r1, [r6]
	mov	r0, #0x8
	bl	SetGpuReg
	ldrh	r1, [r5]
	mov	r0, #0xc
	bl	SetGpuReg
	ldr	r1, .L1973
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r4, .L1973+0x4
	mov	r0, #0xa0
	strh	r0, [r4]
	mov	r0, #0x14
	mov	r1, #0xf0
	bl	SetGpuReg
	ldrh	r1, [r4]
	mov	r0, #0x16
	bl	SetGpuReg
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, sp, #0x8
	ldr	r4, .L1973+0x8
	ldr	r1, [r4]
	ldr	r1, [r1, #0x28]
	ldr	r2, .L1973+0xc
	bl	CpuSet
	ldr	r1, .L1973+0x10
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x1
	bl	Contest_SetBgCopyFlags
	mov	r5, #0x0
	ldr	r7, .L1973+0x14
	mov	r6, #0x4
.L1971:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	lsl	r3, r5, #0x2
	add	r0, r3, r0
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r0, r8
	and	r0, r0, r2
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x14]
	add	r3, r3, r0
	ldrb	r0, [r3, #0x1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	mov	r0, r8
	and	r0, r0, r2
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1971	@cond_branch
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1974:
	.align	2, 0
.L1973:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gContestResources
	.word	0x5000400
	.word	gUnknown_08C17980
	.word	gSprites
.Lfe168:
	.size	 sub_80DE224,.Lfe168-sub_80DE224
	.align	2, 0
	.type	 sub_80DE350,function
	.thumb_func
sub_80DE350:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	ldr	r1, .L1981
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	mov	r0, #0x0
	mov	r3, #0x1
	bl	RequestDma3Fill
	mov	r5, #0x0
	str	r5, [sp]
	ldr	r6, .L1981+0x4
	ldr	r0, [r6]
	ldr	r1, [r0, #0x28]
	ldr	r2, .L1981+0x8
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x1
	bl	Contest_SetBgCopyFlags
	mov	r0, #0xa
	bl	GetGpuReg
	add	r3, sp, #0x4
	strh	r0, [r3]
	ldrb	r1, [r3]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r3]
	mov	r1, sp
	add	r1, r1, #0x5
	ldrb	r2, [r1]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x21
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrb	r1, [r3]
	mov	r4, #0xd
	neg	r4, r4
	add	r0, r4, #0
	and	r0, r0, r1
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r3]
	ldrh	r1, [r3]
	mov	r0, #0xa
	bl	SetGpuReg
	ldr	r0, .L1981+0xc
	strh	r5, [r0]
	ldr	r0, .L1981+0x10
	strh	r5, [r0]
	ldr	r7, .L1981+0x14
.L1979:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x14]
	lsl	r3, r5, #0x2
	add	r0, r3, r0
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x14]
	add	r3, r3, r0
	ldrb	r0, [r3, #0x1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r7
	ldrb	r2, [r1, #0x5]
	add	r0, r4, #0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L1979	@cond_branch
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L1982:
	.align	2, 0
.L1981:
	.word	0x6008000
	.word	gContestResources
	.word	0x5000400
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gSprites
.Lfe169:
	.size	 sub_80DE350,.Lfe169-sub_80DE350
	.align	2, 0
	.type	 sub_80DE424,function
	.thumb_func
sub_80DE424:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r1, .L1984
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L1984+0x4
	mov	r0, #0xa0
	strh	r0, [r1]
	mov	r0, #0x62
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r1, .L1984+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L1984+0xc
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L1985:
	.align	2, 0
.L1984:
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	sub_80DE464
.Lfe170:
	.size	 sub_80DE424,.Lfe170-sub_80DE424
	.align	2, 0
	.type	 sub_80DE464,function
	.thumb_func
sub_80DE464:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r1, .L1989
	ldrh	r0, [r1]
	sub	r0, r0, #0x7
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bge	.L1987	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1]
.L1987:
	ldrh	r2, [r1]
	cmp	r2, #0
	bne	.L1988	@cond_branch
	ldr	r0, .L1989+0x4
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	strh	r2, [r1, #0x8]
	strh	r2, [r1, #0xa]
	strh	r2, [r1, #0xc]
	ldr	r0, .L1989+0x8
	str	r0, [r1]
.L1988:
	pop	{r0}
	bx	r0
.L1990:
	.align	2, 0
.L1989:
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	sub_80DE4A8
.Lfe171:
	.size	 sub_80DE464,.Lfe171-sub_80DE464
	.align	2, 0
	.type	 sub_80DE4A8,function
	.thumb_func
sub_80DE4A8:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r1, .L2010
	lsl	r3, r4, #0x2
	add	r0, r3, r4
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	cmp	r1, #0x1
	beq	.L1999	@cond_branch
	cmp	r1, #0x1
	bgt	.L2008	@cond_branch
	cmp	r1, #0
	beq	.L1993	@cond_branch
	b	.L1992
.L2011:
	.align	2, 0
.L2010:
	.word	gTasks
.L2008:
	cmp	r1, #0x2
	beq	.L2003	@cond_branch
	cmp	r1, #0x3
	beq	.L2005	@cond_branch
	b	.L1992
.L1993:
	mov	r2, #0x0
	add	r6, r3, #0
	ldr	r5, .L2012
	ldr	r3, .L2012+0x4
.L1997:
	ldr	r0, [r5]
	ldr	r1, [r0]
	add	r1, r1, #0x14
	add	r1, r1, r2
	add	r0, r2, r3
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x3
	ble	.L1997	@cond_branch
	bl	FillContestantWindowBgs
	bl	sub_80DC864
	bl	sub_80DB69C
	bl	DrawContestantWindows
	mov	r0, #0x1
	bl	sub_80DE008
	bl	sub_80DC44C
	ldr	r0, .L2012+0x8
	add	r1, r6, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	mov	r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L1992
.L2013:
	.align	2, 0
.L2012:
	.word	gContestResources
	.word	gContestantTurnOrder
	.word	gTasks
.L1999:
	ldr	r0, .L2014
	ldrb	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L2000	@cond_branch
	ldr	r0, .L2014+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	bl	sub_80DA8A4
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L2001	@cond_branch
	bl	sub_80DBAA0
.L2001:
	ldr	r4, .L2014+0x8
	add	r0, r4, #0
	mov	r1, #0x0
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2014+0xc
	add	r1, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	bl	ContestPrintLinkStandby
	mov	r0, #0x2
	strh	r0, [r5, #0x8]
	b	.L1992
.L2015:
	.align	2, 0
.L2014:
	.word	gLinkContestFlags
	.word	gContestResources
	.word	sub_80FCC88
	.word	sub_80DA110
.L2000:
	bl	sub_80DBAA0
	b	.L2009
.L2003:
	ldr	r0, .L2016
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L1992	@cond_branch
.L2009:
	mov	r0, #0x3
	strh	r0, [r5, #0x8]
	b	.L1992
.L2017:
	.align	2, 0
.L2016:
	.word	gContestResources
.L2005:
	bl	sub_80DB884
	bl	SwapMoveDescAndContestTilemaps
	mov	r0, #0x0
	strh	r0, [r5, #0x8]
	ldr	r0, .L2018
	str	r0, [r5]
.L1992:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2019:
	.align	2, 0
.L2018:
	.word	sub_80DE5F4
.Lfe172:
	.size	 sub_80DE4A8,.Lfe172-sub_80DE4A8
	.align	2, 0
	.type	 sub_80DE5C0,function
	.thumb_func
sub_80DE5C0:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L2022
	ldrh	r0, [r1]
	add	r0, r0, #0x7
	strh	r0, [r1]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa0
	ble	.L2021	@cond_branch
	ldr	r0, .L2022+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L2022+0x8
	str	r0, [r1]
.L2021:
	pop	{r0}
	bx	r0
.L2023:
	.align	2, 0
.L2022:
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	sub_80DA4F4
.Lfe173:
	.size	 sub_80DE5C0,.Lfe173-sub_80DE5C0
	.align	2, 0
	.type	 sub_80DE5F4,function
	.thumb_func
sub_80DE5F4:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2034
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	ldrh	r2, [r1, #0xc]
	mov	r3, #0xc
	ldrsh	r0, [r1, r3]
	cmp	r0, #0x9
	bgt	.L2025	@cond_branch
	add	r0, r2, #0x1
	strh	r0, [r1, #0xc]
	b	.L2026
.L2035:
	.align	2, 0
.L2034:
	.word	gTasks
.L2025:
	ldrh	r3, [r1, #0xa]
	mov	r4, #0xa
	ldrsh	r0, [r1, r4]
	cmp	r0, #0
	bne	.L2027	@cond_branch
	ldrh	r2, [r1, #0x8]
	mov	r4, #0x8
	ldrsh	r0, [r1, r4]
	cmp	r0, #0x10
	bne	.L2028	@cond_branch
	add	r0, r3, #0x1
	strh	r0, [r1, #0xa]
	b	.L2026
.L2028:
	add	r0, r2, #0x1
	b	.L2033
.L2027:
	ldrh	r0, [r1, #0x8]
	mov	r3, #0x8
	ldrsh	r2, [r1, r3]
	cmp	r2, #0
	bne	.L2031	@cond_branch
	strh	r2, [r1, #0xa]
	strh	r2, [r1, #0xc]
	ldr	r0, .L2036
	str	r0, [r1]
	b	.L2026
.L2037:
	.align	2, 0
.L2036:
	.word	sub_80DE65C
.L2031:
	sub	r0, r0, #0x1
.L2033:
	strh	r0, [r1, #0x8]
.L2026:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe174:
	.size	 sub_80DE5F4,.Lfe174-sub_80DE5F4
	.align	2, 0
	.type	 sub_80DE65C,function
	.thumb_func
sub_80DE65C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2041
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0xc]
	mov	r2, #0xc
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x9
	bgt	.L2039	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
	b	.L2040
.L2042:
	.align	2, 0
.L2041:
	.word	gTasks
.L2039:
	mov	r0, #0x0
	strh	r0, [r4, #0xc]
	mov	r0, #0x61
	mov	r1, #0x0
	bl	PlaySE12WithPanning
	ldr	r0, .L2043
	str	r0, [r4]
.L2040:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2044:
	.align	2, 0
.L2043:
	.word	sub_80DE5C0
.Lfe175:
	.size	 sub_80DE65C,.Lfe175-sub_80DE65C
	.align	2, 0
	.type	 sub_80DE69C,function
	.thumb_func
sub_80DE69C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r7, #0x0
	ldr	r6, .L2052
	ldr	r5, .L2052+0x4
.L2049:
	bl	AllocOamMatrix
	ldr	r1, [r5]
	ldr	r1, [r1, #0x14]
	lsl	r4, r7, #0x2
	add	r1, r4, r1
	ldrb	r1, [r1]
	lsl	r3, r1, #0x4
	add	r3, r3, r1
	lsl	r3, r3, #0x2
	add	r3, r3, r6
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1f
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrb	r1, [r3, #0x3]
	mov	r2, #0x3f
	neg	r2, r2
	mov	ip, r2
	mov	r2, ip
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r3, #0x3]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r2, [r0, #0x1]
	mov	r3, #0x4
	neg	r3, r3
	add	r1, r3, #0
	and	r2, r2, r1
	mov	r1, #0x1
	orr	r2, r2, r1
	strb	r2, [r0, #0x1]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, r8
	bl	StartSpriteAffineAnim
	mov	r0, r8
	cmp	r0, #0x2
	bne	.L2048	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	bl	AnimateSprite
	ldr	r0, [r5]
	ldr	r0, [r0, #0x14]
	add	r0, r4, r0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r3, #0x5
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	strb	r1, [r0]
.L2048:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L2049	@cond_branch
	ldr	r0, .L2052+0x8
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L2052+0xc
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r0, r8
	strh	r0, [r1, #0x8]
	ldr	r0, .L2052+0x4
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x7]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0x7]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2053:
	.align	2, 0
.L2052:
	.word	gSprites
	.word	gContestResources
	.word	sub_80DE794
	.word	gTasks
.Lfe176:
	.size	 sub_80DE69C,.Lfe176-sub_80DE69C
	.align	2, 0
	.type	 sub_80DE794,function
	.thumb_func
sub_80DE794:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L2067
	ldr	r3, .L2067+0x4
	ldr	r0, [r3]
	ldr	r0, [r0, #0x14]
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	add	r0, r0, #0x3f
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	cmp	r0, #0
	bge	.L2055	@cond_branch
	ldr	r0, .L2067+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrb	r0, [r1, #0x8]
	cmp	r0, #0x1
	bne	.L2056	@cond_branch
	mov	r4, #0x0
	add	r5, r2, #0
	mov	r2, #0x4
.L2060:
	ldr	r0, [r3]
	ldr	r1, [r0, #0x14]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	orr	r1, r1, r2
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2060	@cond_branch
.L2056:
	mov	r4, #0x0
.L2065:
	ldr	r5, .L2067+0x4
	ldr	r0, [r5]
	ldr	r1, [r0, #0x14]
	lsl	r0, r4, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L2067
	add	r0, r0, r1
	bl	FreeSpriteOamMatrix
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2065	@cond_branch
	ldr	r0, [r5]
	ldr	r2, [r0]
	ldrb	r1, [r2, #0x7]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2, #0x7]
	add	r0, r6, #0
	bl	DestroyTask
.L2055:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2068:
	.align	2, 0
.L2067:
	.word	gSprites
	.word	gContestResources
	.word	gTasks
.Lfe177:
	.size	 sub_80DE794,.Lfe177-sub_80DE794
	.align	2, 0
	.type	 SanitizeMove,function
	.thumb_func
SanitizeMove:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	mov	r0, #0xb1
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bls	.L2070	@cond_branch
	mov	r1, #0x1
.L2070:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.Lfe178:
	.size	 SanitizeMove,.Lfe178-SanitizeMove
	.align	2, 0
	.type	 SanitizeSpecies,function
	.thumb_func
SanitizeSpecies:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	ldr	r0, .L2073
	cmp	r1, r0
	bls	.L2072	@cond_branch
	mov	r1, #0x0
.L2072:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L2074:
	.align	2, 0
.L2073:
	.word	0x19b
.Lfe179:
	.size	 SanitizeSpecies,.Lfe179-SanitizeSpecies
	.align	2, 0
	.type	 sub_80DE864,function
	.thumb_func
sub_80DE864:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r4, .L2102
	ldr	r0, [r4]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	bl	SanitizeMove
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	ldr	r1, .L2102+0x4
	lsl	r0, r7, #0x6
	add	r0, r0, r1
	ldrh	r0, [r0]
	bl	SanitizeSpecies
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	ldr	r0, [r4]
	ldr	r0, [r0, #0x18]
	mov	r1, #0x0
	mov	r2, #0x14
	bl	memset
	bl	ClearBattleAnimationVars
	ldr	r1, .L2102+0x8
	mov	r2, #0x0
	add	r0, r1, #0x3
.L2079:
	strb	r2, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r1
	bge	.L2079	@cond_branch
	cmp	r5, #0x90
	beq	.L2087	@cond_branch
	cmp	r5, #0x90
	bgt	.L2098	@cond_branch
	cmp	r5, #0x4c
	beq	.L2093	@cond_branch
	cmp	r5, #0x4c
	bgt	.L2099	@cond_branch
	cmp	r5, #0xd
	beq	.L2093	@cond_branch
	b	.L2081
.L2103:
	.align	2, 0
.L2102:
	.word	gContestResources
	.word	gContestMons
	.word	gBattleMonForms
.L2099:
	cmp	r5, #0x82
	beq	.L2093	@cond_branch
	cmp	r5, #0x8f
	beq	.L2093	@cond_branch
	b	.L2081
.L2098:
	cmp	r5, #0xd8
	beq	.L2088	@cond_branch
	cmp	r5, #0xd8
	bgt	.L2100	@cond_branch
	cmp	r5, #0xae
	beq	.L2082	@cond_branch
	b	.L2081
.L2100:
	cmp	r5, #0xda
	beq	.L2089	@cond_branch
	mov	r0, #0x88
	lsl	r0, r0, #0x1
	cmp	r5, r0
	beq	.L2087	@cond_branch
	b	.L2081
.L2082:
	ldr	r0, .L2104
	lsl	r1, r6, #0x3
	sub	r1, r1, r6
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x7
	beq	.L2084	@cond_branch
	ldrb	r0, [r1, #0x7]
	cmp	r0, #0x7
	bne	.L2094	@cond_branch
.L2084:
	ldr	r1, .L2104+0x4
	mov	r0, #0x0
	b	.L2101
.L2105:
	.align	2, 0
.L2104:
	.word	gBaseStats
	.word	gAnimMoveTurn
.L2087:
	ldr	r6, .L2106
	ldr	r0, [r6]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x3
	sub	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x1b]
	ldr	r5, .L2106+0x4
	lsl	r4, r4, #0x6
	add	r0, r4, r5
	ldrh	r0, [r0]
	bl	SanitizeSpecies
	ldr	r2, [r6]
	ldr	r1, [r2, #0x18]
	strh	r0, [r1, #0x2]
	ldr	r2, [r2, #0x18]
	add	r5, r5, #0x38
	add	r4, r4, r5
	ldr	r0, [r4]
	str	r0, [r2, #0x10]
	ldrb	r0, [r2, #0x4]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x4]
	b	.L2081
.L2107:
	.align	2, 0
.L2106:
	.word	gContestResources
	.word	gContestMons
.L2088:
	ldr	r1, .L2108
	mov	r0, #0xff
	b	.L2101
.L2109:
	.align	2, 0
.L2108:
	.word	gAnimFriendship
.L2089:
	ldr	r1, .L2110
	mov	r0, #0x0
	b	.L2101
.L2111:
	.align	2, 0
.L2110:
	.word	gAnimFriendship
.L2093:
	ldr	r0, .L2112
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r2, r0, #0
	add	r2, r2, #0x5a
	ldrb	r1, [r2]
	cmp	r1, #0
	bne	.L2094	@cond_branch
	mov	r0, #0x2
	strb	r0, [r2]
	ldr	r0, .L2112+0x4
	strb	r1, [r0]
	b	.L2081
.L2113:
	.align	2, 0
.L2112:
	.word	gContestResources
	.word	gAnimMoveTurn
.L2094:
	ldr	r1, .L2114
	mov	r0, #0x1
.L2101:
	strb	r0, [r1]
.L2081:
	bl	sub_80DEA5C
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2115:
	.align	2, 0
.L2114:
	.word	gAnimMoveTurn
.Lfe180:
	.size	 sub_80DE864,.Lfe180-sub_80DE864
	.align	2, 0
	.type	 sub_80DE9B0,function
	.thumb_func
sub_80DE9B0:
	push	{r4, lr}
	ldr	r4, .L2118
	ldr	r0, [r4]
	ldr	r0, [r0, #0x18]
	mov	r1, #0x0
	mov	r2, #0x14
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x5a
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L2117	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L2117:
	pop	{r4}
	pop	{r0}
	bx	r0
.L2119:
	.align	2, 0
.L2118:
	.word	gContestResources
.Lfe181:
	.size	 sub_80DE9B0,.Lfe181-sub_80DE9B0
	.align	2, 0
	.type	 sub_80DE9DC,function
	.thumb_func
sub_80DE9DC:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L2121
	ldr	r0, [r6]
	ldr	r0, [r0, #0x18]
	strb	r4, [r0, #0x5]
	ldr	r5, .L2121+0x4
	lsl	r4, r4, #0x6
	add	r0, r4, r5
	ldrh	r0, [r0]
	bl	SanitizeSpecies
	ldr	r2, [r6]
	ldr	r1, [r2, #0x18]
	strh	r0, [r1]
	ldr	r1, [r2, #0x18]
	add	r0, r5, #0
	add	r0, r0, #0x38
	add	r0, r4, r0
	ldr	r0, [r0]
	str	r0, [r1, #0x8]
	add	r5, r5, #0x3c
	add	r4, r4, r5
	ldr	r0, [r4]
	str	r0, [r1, #0xc]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2122:
	.align	2, 0
.L2121:
	.word	gContestResources
	.word	gContestMons
.Lfe182:
	.size	 sub_80DE9DC,.Lfe182-sub_80DE9DC
	.align	2, 0
	.type	 sub_80DEA20,function
	.thumb_func
sub_80DEA20:
	push	{lr}
	ldr	r0, .L2124
	bl	CreateInvisibleSpriteWithCallback
	ldr	r1, .L2124+0x4
	strb	r0, [r1, #0x3]
	ldr	r0, .L2124+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L2124+0xc
	add	r0, r0, r1
	bl	InitSpriteAffineAnim
	bl	sub_80DEA5C
	pop	{r0}
	bx	r0
.L2125:
	.align	2, 0
.L2124:
	.word	SpriteCallbackDummy
	.word	gBattlerSpriteIds
	.word	gBattlerTarget
	.word	gSprites
.Lfe183:
	.size	 sub_80DEA20,.Lfe183-sub_80DEA20
	.align	2, 0
	.type	 sub_80DEA5C,function
	.thumb_func
sub_80DEA5C:
	push	{r4, lr}
	ldr	r0, .L2127
	ldrb	r0, [r0, #0x3]
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L2127+0x4
	add	r4, r4, r0
	mov	r0, #0x0
	strh	r0, [r4, #0x24]
	strh	r0, [r4, #0x26]
	mov	r0, #0x3
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x20]
	mov	r0, #0x3
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x22]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L2128:
	.align	2, 0
.L2127:
	.word	gBattlerSpriteIds
	.word	gSprites
.Lfe184:
	.size	 sub_80DEA5C,.Lfe184-sub_80DEA5C
	.align	2, 0
	.type	 SelectContestMoveBankTarget,function
	.thumb_func
SelectContestMoveBankTarget:
	push	{lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r2, .L2140
	lsl	r1, r0, #0x1
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x6]
	cmp	r0, #0x20
	bhi	.L2137	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L2140+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2141:
	.align	2, 0
.L2140:
	.word	gBattleMoves
	.word	.L2138
	.align	2, 0
	.align	2, 0
.L2138:
	.word	.L2137
	.word	.L2137
	.word	.L2132
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2132
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
	.word	.L2137
.L2132:
	ldr	r1, .L2142
	mov	r0, #0x2
	b	.L2139
.L2143:
	.align	2, 0
.L2142:
	.word	gBattlerTarget
.L2137:
	ldr	r1, .L2144
	mov	r0, #0x3
.L2139:
	strb	r0, [r1]
	pop	{r0}
	bx	r0
.L2145:
	.align	2, 0
.L2144:
	.word	gBattlerTarget
.Lfe185:
	.size	 SelectContestMoveBankTarget,.Lfe185-SelectContestMoveBankTarget
	.align	2, 0
	.type	 Contest_PrintTextToBg0WindowStd,function
	.thumb_func
Contest_PrintTextToBg0WindowStd:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	str	r1, [sp]
	mov	r0, sp
	mov	r2, #0x0
	strb	r4, [r0, #0x4]
	mov	r1, #0x1
	strb	r1, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r1, [r0, #0x7]
	strb	r2, [r0, #0x8]
	strb	r1, [r0, #0x9]
	strb	r2, [r0, #0xa]
	strb	r2, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x11
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0xf0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r1, sp
	mov	r0, #0x80
	strb	r0, [r1, #0xd]
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe186:
	.size	 Contest_PrintTextToBg0WindowStd,.Lfe186-Contest_PrintTextToBg0WindowStd
	.align	2, 0
	.globl	Contest_PrintTextToBg0WindowAt
	.type	 Contest_PrintTextToBg0WindowAt,function
	.thumb_func
Contest_PrintTextToBg0WindowAt:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r0, #0
	ldr	r4, [sp, #0x1c]
	str	r1, [sp]
	mov	r0, sp
	mov	r1, #0x0
	strb	r5, [r0, #0x4]
	strb	r4, [r0, #0x5]
	strb	r2, [r0, #0x6]
	strb	r3, [r0, #0x7]
	strb	r2, [r0, #0x8]
	strb	r3, [r0, #0x9]
	strb	r1, [r0, #0xa]
	strb	r1, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x10
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0xf0
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r1, sp
	mov	r0, #0x80
	strb	r0, [r1, #0xd]
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe187:
	.size	 Contest_PrintTextToBg0WindowAt,.Lfe187-Contest_PrintTextToBg0WindowAt
	.align	2, 0
	.type	 Contest_StartTextPrinter,function
	.thumb_func
Contest_StartTextPrinter:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	str	r0, [sp]
	mov	r2, sp
	mov	r3, #0x0
	mov	r0, #0x4
	strb	r0, [r2, #0x4]
	mov	r0, sp
	mov	r5, #0x1
	strb	r5, [r0, #0x5]
	strb	r3, [r0, #0x6]
	strb	r5, [r0, #0x7]
	strb	r3, [r0, #0x8]
	strb	r5, [r0, #0x9]
	strb	r3, [r0, #0xa]
	strb	r3, [r0, #0xb]
	mov	r4, sp
	ldrb	r3, [r4, #0xc]
	mov	r2, #0x10
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r3
	strb	r0, [r4, #0xc]
	mov	r3, sp
	mov	r0, #0x10
	strb	r0, [r3, #0xc]
	ldrb	r0, [r3, #0xd]
	and	r2, r2, r0
	strb	r2, [r3, #0xd]
	mov	r2, sp
	mov	r0, #0x80
	strb	r0, [r2, #0xd]
	cmp	r1, #0
	bne	.L2149	@cond_branch
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	b	.L2150
.L2149:
	ldr	r0, .L2153
	ldrb	r1, [r0]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2151	@cond_branch
	mov	r1, #0x4
	b	.L2152
.L2154:
	.align	2, 0
.L2153:
	.word	gLinkContestFlags
.L2151:
	bl	GetPlayerTextSpeedDelay
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L2152:
	mov	r0, sp
	mov	r2, #0x0
	bl	AddTextPrinter
.L2150:
	mov	r0, #0x4
	bl	PutWindowTilemap
	mov	r0, #0x0
	bl	Contest_SetBgCopyFlags
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe188:
	.size	 Contest_StartTextPrinter,.Lfe188-Contest_StartTextPrinter
	.align	2, 0
	.type	 ContestBG_FillBoxWithIncrementingTile,function
	.thumb_func
ContestBG_FillBoxWithIncrementingTile:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	mov	r8, r0
	ldr	r0, [sp, #0x28]
	ldr	r4, [sp, #0x2c]
	ldr	r5, [sp, #0x30]
	ldr	r6, [sp, #0x34]
	mov	r7, r8
	lsl	r7, r7, #0x18
	lsr	r7, r7, #0x18
	mov	r8, r7
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r0, [sp]
	str	r4, [sp, #0x4]
	str	r5, [sp, #0x8]
	lsl	r6, r6, #0x10
	asr	r6, r6, #0x10
	str	r6, [sp, #0xc]
	mov	r0, r8
	bl	WriteSequenceToBgTilemapBuffer
	mov	r0, r8
	bl	Contest_SetBgCopyFlags
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe189:
	.size	 ContestBG_FillBoxWithIncrementingTile,.Lfe189-ContestBG_FillBoxWithIncrementingTile
	.align	2, 0
	.type	 ContestBG_FillBoxWithTile,function
	.thumb_func
ContestBG_FillBoxWithTile:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x20]
	ldr	r5, [sp, #0x24]
	ldr	r6, [sp, #0x28]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r4, [sp]
	str	r5, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r4, #0x0
	str	r4, [sp, #0xc]
	bl	ContestBG_FillBoxWithIncrementingTile
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe190:
	.size	 ContestBG_FillBoxWithTile,.Lfe190-ContestBG_FillBoxWithTile
	.align	2, 0
	.type	 Contest_RunTextPrinters,function
	.thumb_func
Contest_RunTextPrinters:
	push	{lr}
	bl	RunTextPrinters
	mov	r0, #0x4
	bl	IsTextPrinterActive
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe191:
	.size	 Contest_RunTextPrinters,.Lfe191-Contest_RunTextPrinters
	.align	2, 0
	.type	 Contest_SetBgCopyFlags,function
	.thumb_func
Contest_SetBgCopyFlags:
	ldr	r2, .L2159
	mov	r1, #0x1
	lsl	r1, r1, r0
	ldrb	r0, [r2]
	orr	r1, r1, r0
	strb	r1, [r2]
	bx	lr
.L2160:
	.align	2, 0
.L2159:
	.word	sContestBgCopyFlags
.Lfe192:
	.size	 Contest_SetBgCopyFlags,.Lfe192-Contest_SetBgCopyFlags
	.align	2, 0
	.globl	ResetContestLinkResults
	.type	 ResetContestLinkResults,function
	.thumb_func
ResetContestLinkResults:
	push	{r4, r5, r6, lr}
	mov	r0, #0x0
	ldr	r6, .L2172
	ldr	r5, .L2172+0x4
	mov	r4, #0x0
.L2165:
	add	r3, r0, #0x1
	lsl	r1, r0, #0x3
	mov	r2, #0x3
.L2169:
	ldr	r0, [r6]
	add	r0, r0, r5
	add	r0, r0, r1
	strh	r4, [r0]
	add	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L2169	@cond_branch
	add	r0, r3, #0
	cmp	r0, #0x4
	ble	.L2165	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2173:
	.align	2, 0
.L2172:
	.word	gSaveBlock2Ptr
	.word	0x624
.Lfe193:
	.size	 ResetContestLinkResults,.Lfe193-ResetContestLinkResults
	.align	2, 0
	.globl	sub_80DEDA8
	.type	 sub_80DEDA8,function
	.thumb_func
sub_80DEDA8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r1, .L2199
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L2176	@cond_branch
.L2177:
	add	r5, r5, #0x1
	cmp	r5, #0x2
	bgt	.L2176	@cond_branch
	add	r0, r5, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2177	@cond_branch
.L2176:
	ldr	r0, [sp]
	cmp	r0, #0xff
	bne	.L2181	@cond_branch
	ldr	r0, .L2199+0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L2181	@cond_branch
	mov	r0, #0x0
	b	.L2196
.L2200:
	.align	2, 0
.L2199:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
.L2181:
	ldr	r0, .L2201
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L2182	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L2201+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2202:
	.align	2, 0
.L2201:
	.word	gSpecialVar_ContestCategory
	.word	.L2188
	.align	2, 0
	.align	2, 0
.L2188:
	.word	.L2182
	.word	.L2184
	.word	.L2185
	.word	.L2186
	.word	.L2187
.L2184:
	mov	r0, r8
	add	r0, r0, #0x3
	b	.L2197
.L2185:
	mov	r0, r8
	add	r0, r0, #0x6
	b	.L2197
.L2186:
	mov	r0, r8
	add	r0, r0, #0x9
	b	.L2197
.L2187:
	mov	r0, r8
	add	r0, r0, #0xc
.L2197:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L2182:
	ldr	r1, [sp]
	cmp	r1, #0xfe
	bne	.LCB19797
	b	.L2190	@long jump
.LCB19797:
	add	r0, r1, #0
	mov	r1, #0x1
	bl	sub_80DEFA8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r2, .L2203
	mov	sl, r2
	ldr	r0, [r2]
	mov	r3, r9
	lsl	r7, r3, #0x5
	ldr	r6, .L2203+0x4
	add	r2, r0, r6
	add	r2, r2, r7
	ldr	r4, .L2203+0x8
	lsl	r5, r5, #0x6
	add	r1, r4, #0
	add	r1, r1, #0x38
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r2]
	add	r1, r0, r7
	add	r2, r5, r4
	ldrh	r2, [r2]
	ldr	r3, .L2203+0xc
	add	r1, r1, r3
	strh	r2, [r1]
	ldr	r1, .L2203+0x10
	add	r2, r0, r1
	add	r2, r2, r7
	add	r1, r4, #0
	add	r1, r1, #0x3c
	add	r1, r5, r1
	ldr	r1, [r1]
	str	r1, [r2]
	add	r6, r7, r6
	add	r0, r0, r6
	add	r0, r0, #0xb
	add	r1, r4, #0x2
	add	r1, r5, r1
	bl	StringCopy
	mov	r2, sl
	ldr	r0, [r2]
	add	r0, r0, r6
	add	r0, r0, #0x16
	add	r4, r4, #0xd
	add	r5, r5, r4
	add	r1, r5, #0
	bl	StringCopy
	ldr	r0, .L2203+0x14
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2191	@cond_branch
	mov	r3, sl
	ldr	r0, [r3]
	add	r0, r0, r7
	ldr	r1, .L2203+0x18
	add	r0, r0, r1
	mov	r1, #0x4
	b	.L2198
.L2204:
	.align	2, 0
.L2203:
	.word	gSaveBlock1Ptr
	.word	0x2e90
	.word	gContestMons
	.word	0x2e98
	.word	0x2e94
	.word	gLinkContestFlags
	.word	0x2eae
.L2191:
	mov	r2, sl
	ldr	r0, [r2]
	add	r0, r0, r7
	ldr	r1, .L2205
	ldrh	r1, [r1]
	ldr	r3, .L2205+0x4
	add	r0, r0, r3
.L2198:
	strb	r1, [r0]
	ldr	r0, [sp]
	cmp	r0, #0xff
	beq	.L2193	@cond_branch
	ldr	r0, .L2205+0x8
	ldr	r0, [r0]
	mov	r2, r9
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	ldr	r1, .L2205+0xc
	ldrh	r1, [r1]
	ldr	r3, .L2205+0x10
	add	r0, r0, r3
	strb	r1, [r0]
	b	.L2195
.L2206:
	.align	2, 0
.L2205:
	.word	gSpecialVar_ContestRank
	.word	0x2eae
	.word	gSaveBlock1Ptr
	.word	gSpecialVar_ContestCategory
	.word	0x2e9a
.L2193:
	ldr	r0, .L2207
	ldr	r0, [r0]
	mov	r2, r9
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	ldr	r3, .L2207+0x4
	add	r0, r0, r3
	mov	r1, r8
	strb	r1, [r0]
	b	.L2195
.L2208:
	.align	2, 0
.L2207:
	.word	gSaveBlock1Ptr
	.word	0x2e9a
.L2190:
	ldr	r6, .L2209
	ldr	r4, .L2209+0x4
	lsl	r5, r5, #0x6
	add	r0, r4, #0
	add	r0, r0, #0x38
	add	r0, r5, r0
	ldr	r0, [r0]
	str	r0, [r6]
	add	r0, r4, #0
	add	r0, r0, #0x3c
	add	r0, r5, r0
	ldr	r0, [r0]
	str	r0, [r6, #0x4]
	add	r0, r5, r4
	ldrh	r0, [r0]
	strh	r0, [r6, #0x8]
	add	r0, r6, #0
	add	r0, r0, #0xb
	add	r1, r4, #0x2
	add	r1, r5, r1
	bl	StringCopy
	add	r0, r6, #0
	add	r0, r0, #0x16
	add	r4, r4, #0xd
	add	r5, r5, r4
	add	r1, r5, #0
	bl	StringCopy
	mov	r2, r8
	strb	r2, [r6, #0xa]
.L2195:
	mov	r0, #0x1
.L2196:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2210:
	.align	2, 0
.L2209:
	.word	gCurContestWinner
	.word	gContestMons
.Lfe194:
	.size	 sub_80DEDA8,.Lfe194-sub_80DEDA8
	.align	2, 0
	.globl	sub_80DEFA8
	.type	 sub_80DEFA8,function
	.thumb_func
sub_80DEFA8:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	cmp	r0, #0x3
	bgt	.L2223	@cond_branch
	cmp	r0, #0
	blt	.L2223	@cond_branch
	cmp	r1, #0
	beq	.L2217	@cond_branch
	mov	r2, #0x5
	ldr	r0, .L2234
	mov	ip, r0
	ldr	r4, .L2234+0x4
	ldr	r3, .L2234+0x8
.L2221:
	mov	r1, ip
	ldr	r0, [r1]
	lsl	r1, r2, #0x5
	add	r1, r1, r0
	add	r0, r1, r4
	add	r1, r1, r3
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6}
	stmia	r0!, {r5, r6}
	sub	r2, r2, #0x1
	cmp	r2, #0
	bgt	.L2221	@cond_branch
.L2217:
	mov	r0, #0x0
	b	.L2233
.L2235:
	.align	2, 0
.L2234:
	.word	gSaveBlock1Ptr
	.word	0x2e90
	.word	0x2e70
.L2223:
	ldr	r0, .L2236
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L2230	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L2236+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L2237:
	.align	2, 0
.L2236:
	.word	gSpecialVar_ContestCategory
	.word	.L2231
	.align	2, 0
	.align	2, 0
.L2231:
	.word	.L2225
	.word	.L2226
	.word	.L2227
	.word	.L2228
	.word	.L2230
.L2225:
	mov	r0, #0x8
	b	.L2233
.L2226:
	mov	r0, #0x9
	b	.L2233
.L2227:
	mov	r0, #0xa
	b	.L2233
.L2228:
	mov	r0, #0xb
	b	.L2233
.L2230:
	mov	r0, #0xc
.L2233:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe195:
	.size	 sub_80DEFA8,.Lfe195-sub_80DEFA8
	.align	2, 0
	.globl	ClearContestWinnerPicsInContestHall
	.type	 ClearContestWinnerPicsInContestHall,function
	.thumb_func
ClearContestWinnerPicsInContestHall:
	push	{r4, r5, r6, r7, lr}
	mov	r2, #0x0
	ldr	r0, .L2244
	mov	ip, r0
	ldr	r4, .L2244+0x4
	ldr	r3, .L2244+0x8
.L2242:
	mov	r1, ip
	ldr	r0, [r1]
	lsl	r1, r2, #0x5
	add	r0, r0, r1
	add	r0, r0, r4
	add	r1, r3, #0
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6, r7}
	stmia	r0!, {r5, r6, r7}
	ldmia	r1!, {r5, r6}
	stmia	r0!, {r5, r6}
	add	r3, r3, #0x20
	add	r2, r2, #0x1
	cmp	r2, #0x7
	ble	.L2242	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2245:
	.align	2, 0
.L2244:
	.word	gSaveBlock1Ptr
	.word	0x2e90
	.word	gUnknown_08587FA4
.Lfe196:
	.size	 ClearContestWinnerPicsInContestHall,.Lfe196-ClearContestWinnerPicsInContestHall
	.align	2, 0
	.type	 sub_80DF080,function
	.thumb_func
sub_80DF080:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r2, .L2263
	ldr	r3, [r2]
	ldr	r5, [r3, #0x10]
	ldrb	r1, [r5, #0x1]
	mov	r7, #0x1
	add	r0, r7, #0
	and	r0, r0, r1
	add	r6, r2, #0
	cmp	r0, #0
	bne	.L2247	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r5, r0]
	cmp	r0, #0
	ble	.L2247	@cond_branch
	ldr	r1, [r3, #0x4]
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2247	@cond_branch
	ldr	r1, [r3, #0x1c]
	lsl	r2, r4, #0x4
	add	r1, r2, r1
	ldrb	r3, [r1, #0xc]
	mov	r0, #0x1
	orr	r0, r0, r3
	strb	r0, [r1, #0xc]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x1c]
	add	r2, r2, r0
	ldrb	r0, [r2, #0xe]
	mov	r1, #0x2
	orr	r0, r0, r1
	strb	r0, [r2, #0xe]
.L2247:
	ldr	r3, [r6]
	ldr	r1, [r3, #0x4]
	lsl	r2, r4, #0x3
	sub	r0, r2, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0xc]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	add	r7, r2, #0
	cmp	r0, #0
	beq	.L2248	@cond_branch
	ldr	r0, [r3, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xc]
	mov	r0, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0xc]
.L2248:
	ldr	r3, [r6]
	ldr	r2, [r3, #0x10]
	ldrb	r1, [r2, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2249	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0
	beq	.L2249	@cond_branch
	mov	r0, #0x2
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x3c
	bne	.L2249	@cond_branch
	ldr	r0, [r3, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xc]
	mov	r0, #0x4
	orr	r0, r0, r2
	strb	r0, [r1, #0xc]
.L2249:
	ldr	r3, [r6]
	ldr	r1, [r3, #0x4]
	sub	r0, r7, r4
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0x15]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2250	@cond_branch
	ldrb	r0, [r2, #0x16]
	cmp	r0, #0
	beq	.L2250	@cond_branch
	ldr	r0, [r3, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xc]
	mov	r0, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0xc]
.L2250:
	mov	r3, #0x0
	mov	r5, #0x0
.L2254:
	cmp	r3, r4
	beq	.L2253	@cond_branch
	ldr	r1, [r6]
	ldr	r0, [r1, #0x4]
	add	r0, r5, r0
	ldrb	r0, [r0, #0xe]
	cmp	r0, #0
	beq	.L2253	@cond_branch
	ldr	r0, [r1, #0x1c]
	lsl	r2, r4, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0xc]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x1c]
	lsl	r2, r3, #0x4
	add	r2, r2, r0
	ldrb	r0, [r2, #0xc]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
.L2253:
	add	r5, r5, #0x1c
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L2254	@cond_branch
	ldr	r2, [r6]
	ldr	r1, [r2, #0x4]
	sub	r0, r7, r4
	lsl	r5, r0, #0x2
	add	r1, r5, r1
	ldrb	r3, [r1, #0xc]
	mov	r0, #0x6
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L2258	@cond_branch
	ldrb	r1, [r1, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2257	@cond_branch
.L2258:
	ldr	r0, [r2, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xc]
	mov	r0, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0xc]
	b	.L2259
.L2264:
	.align	2, 0
.L2263:
	.word	gContestResources
.L2257:
	mov	r0, #0x1
	and	r0, r0, r3
	cmp	r0, #0
	bne	.L2259	@cond_branch
	ldr	r2, [r2, #0x1c]
	lsl	r3, r4, #0x4
	add	r2, r3, r2
	ldrb	r0, [r2, #0xc]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0xc]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x1c]
	add	r1, r3, r1
	ldrb	r0, [r1, #0xe]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1, #0xe]
	ldr	r1, [r6]
	ldr	r0, [r1, #0x1c]
	add	r3, r3, r0
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	add	r3, r3, r0
	ldr	r0, [r1, #0x4]
	add	r0, r5, r0
	ldrh	r0, [r0, #0x6]
	strh	r0, [r3]
.L2259:
	ldr	r2, [r6]
	ldr	r1, [r2, #0x4]
	sub	r0, r7, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x15]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2261	@cond_branch
	ldr	r0, [r2, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xd]
	mov	r0, #0x2
	orr	r0, r0, r2
	strb	r0, [r1, #0xd]
.L2261:
	ldr	r2, [r6]
	ldr	r0, [r2]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0x4
	bne	.L2262	@cond_branch
	ldr	r3, [r2, #0x10]
	ldrb	r1, [r3, #0x1]
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2262	@cond_branch
	mov	r0, #0x0
	ldrsb	r0, [r3, r0]
	cmp	r0, #0
	bge	.L2262	@cond_branch
	ldr	r0, [r2, #0x1c]
	lsl	r1, r4, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xd]
	mov	r0, #0x20
	orr	r0, r0, r2
	strb	r0, [r1, #0xd]
.L2262:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe197:
	.size	 sub_80DF080,.Lfe197-sub_80DF080
	.align	2, 0
	.type	 sub_80DF250,function
	.thumb_func
sub_80DF250:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x38
	mov	r1, #0x0
	mov	r0, #0x0
	str	r0, [sp, #0x20]
	mov	r4, #0x0
	ldr	r6, .L2324
	mov	r2, sp
	add	r2, r2, #0xc
	str	r2, [sp, #0x28]
	mov	r3, sp
	add	r3, r3, #0x14
	str	r3, [sp, #0x2c]
	mov	r7, sp
	add	r7, r7, #0x2
	str	r7, [sp, #0x24]
	ldr	r5, .L2324+0x4
	mov	r2, #0x0
	mov	r3, #0x80
	lsl	r3, r3, #0x11
.L2269:
	add	r0, r4, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2270	@cond_branch
	lsr	r0, r2, #0x18
	str	r0, [sp, #0x20]
	b	.L2268
.L2325:
	.align	2, 0
.L2324:
	.word	gContestResources
	.word	gContestFinalStandings
.L2270:
	cmp	r0, #0x3
	bne	.L2268	@cond_branch
	lsr	r1, r2, #0x18
.L2268:
	add	r2, r2, r3
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L2269	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x1c]
	lsl	r1, r1, #0x4
	add	r1, r1, r0
	ldrb	r2, [r1, #0xd]
	mov	r0, #0x1
	orr	r0, r0, r2
	strb	r0, [r1, #0xd]
	mov	r4, #0x0
	ldr	r1, [sp, #0x20]
	lsl	r1, r1, #0x4
	str	r1, [sp, #0x30]
	mov	r9, r4
	mov	sl, r4
.L2277:
	ldr	r2, [sp, #0x20]
	cmp	r4, r2
	beq	.L2278	@cond_branch
	ldr	r1, .L2326
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	mov	r3, #0x0
	ldrsh	r2, [r0, r3]
	add	r1, r1, sl
	mov	r6, #0x0
	ldrsh	r0, [r1, r6]
	sub	r2, r2, r0
	cmp	r2, #0x32
	bgt	.L2278	@cond_branch
	ldr	r7, .L2326+0x4
	ldr	r0, [r7]
	ldr	r2, [r0, #0x1c]
	add	r2, r2, r9
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2278:
	ldr	r1, .L2326+0x4
	ldr	r0, [r1]
	ldr	r0, [r0, #0x1c]
	mov	r3, r9
	add	r2, r3, r0
	ldrb	r1, [r2, #0xe]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2279	@cond_branch
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x8
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2279:
	mov	r5, #0x0
	ldr	r2, .L2326+0x8
	add	r2, r2, sl
	mov	r6, #0x0
	ldrsh	r1, [r2, r6]
	ldr	r7, .L2326+0x8
	mov	r3, #0x0
	ldrsh	r0, [r7, r3]
	cmp	r1, r0
	blt	.L2281	@cond_branch
	add	r3, r2, #0
	add	r2, r7, #0
.L2282:
	add	r2, r2, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	bgt	.L2281	@cond_branch
	mov	r6, #0x0
	ldrsh	r1, [r3, r6]
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L2282	@cond_branch
.L2281:
	cmp	r5, #0x4
	bne	.L2286	@cond_branch
	ldr	r1, .L2326+0xc
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L2286	@cond_branch
	ldr	r2, .L2326+0x4
	ldr	r0, [r2]
	ldr	r2, [r0, #0x1c]
	add	r2, r2, r9
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2286:
	mov	r3, #0x0
	mov	ip, r3
	mov	r8, r3
	mov	r5, #0x0
	ldr	r0, .L2326+0x8
	add	r0, r0, sl
	mov	r7, #0x0
	ldrsh	r6, [r0, r7]
	str	r6, [sp, #0x34]
	ldr	r2, .L2326+0x8
	ldr	r0, .L2326+0x10
	mov	r1, sl
	add	r6, r1, r0
	add	r3, r0, #0
.L2290:
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	ldr	r1, [sp, #0x34]
	cmp	r1, r0
	ble	.L2291	@cond_branch
	mov	r7, #0x1
	mov	ip, r7
.L2291:
	mov	r0, #0x0
	ldrsh	r1, [r6, r0]
	mov	r7, #0x0
	ldrsh	r0, [r3, r7]
	cmp	r1, r0
	ble	.L2289	@cond_branch
	mov	r0, #0x1
	mov	r8, r0
.L2289:
	add	r2, r2, #0x2
	add	r3, r3, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L2290	@cond_branch
	mov	r1, ip
	cmp	r1, #0
	bne	.L2294	@cond_branch
	mov	r2, r8
	cmp	r2, #0
	bne	.L2294	@cond_branch
	ldr	r3, .L2326+0x4
	ldr	r0, [r3]
	ldr	r2, [r0, #0x1c]
	add	r2, r2, r9
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2294:
	ldr	r6, .L2326+0x4
	ldr	r0, [r6]
	ldr	r0, [r0, #0x1c]
	mov	r7, r9
	add	r2, r7, r0
	ldrb	r1, [r2, #0xe]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L2276	@cond_branch
	ldrb	r0, [r2, #0xd]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0xd]
.L2276:
	mov	r0, #0x10
	add	r9, r9, r0
	mov	r1, #0x2
	add	sl, sl, r1
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.LCB20748
	b	.L2277	@long jump
.LCB20748:
	mov	r4, #0x0
	mov	r5, #0x0
	mov	r3, #0x0
	ldr	r2, [sp, #0x28]
	mov	r1, sp
.L2300:
	strh	r3, [r1]
	add	r0, r2, r4
	strb	r5, [r0]
	add	r1, r1, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x4
	ble	.L2300	@cond_branch
	mov	r1, sp
	ldr	r0, .L2326+0x14
	strh	r0, [r1, #0xa]
	mov	r0, #0x0
	ldr	r2, [sp, #0x28]
	strb	r0, [r2, #0x5]
	mov	r4, #0x0
	ldr	r0, .L2326+0x4
	ldr	r0, [r0]
	mov	r8, r0
	ldr	r7, [sp, #0x30]
.L2305:
	mov	r3, r8
	ldr	r0, [r3, #0x1c]
	add	r0, r7, r0
	lsl	r1, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r4, r4, #0x1
	mov	ip, r4
	cmp	r0, #0
	beq	.L2304	@cond_branch
	ldr	r0, .L2326+0x4
	ldr	r6, [r0]
	ldr	r3, [sp, #0x28]
	mov	r4, sp
	mov	r5, #0x4
.L2310:
	ldr	r0, [r6, #0x1c]
	add	r0, r7, r0
	add	r0, r0, r1
	ldrh	r0, [r0]
	ldrh	r2, [r4]
	cmp	r0, r2
	beq	.L2311	@cond_branch
	cmp	r2, #0
	bne	.L2309	@cond_branch
	strh	r0, [r4]
.L2311:
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
.L2309:
	add	r3, r3, #0x1
	add	r4, r4, #0x2
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L2310	@cond_branch
.L2304:
	mov	r4, ip
	cmp	r4, #0x4
	ble	.L2305	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	ldr	r6, [sp, #0x2c]
	strh	r0, [r6]
	ldr	r7, [sp, #0x28]
	ldrb	r3, [r7]
	mov	r6, #0x0
	mov	r4, #0x1
	ldr	r1, [sp, #0x24]
	ldrh	r0, [r1]
	ldr	r1, .L2326+0x14
	cmp	r0, r1
	beq	.L2317	@cond_branch
	ldr	r5, [sp, #0x2c]
	add	r7, r1, #0
	mov	r2, sp
	add	r2, r2, #0x2
.L2319:
	ldr	r0, [sp, #0x28]
	add	r1, r0, r4
	ldrb	r0, [r1]
	cmp	r3, r0
	bcs	.L2320	@cond_branch
	ldrh	r0, [r2]
	strh	r0, [r5]
	ldrb	r3, [r1]
	mov	r6, #0x1
	b	.L2318
.L2327:
	.align	2, 0
.L2326:
	.word	gUnknown_02039F08
	.word	gContestResources
	.word	gContestMonConditions
	.word	gContestFinalStandings
	.word	gUnknown_02039F18
	.word	0xffff
.L2320:
	cmp	r3, r0
	bne	.L2318	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r5, r0
	ldrh	r1, [r2]
	strh	r1, [r0]
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L2318:
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	ldrh	r0, [r2]
	cmp	r0, r7
	bne	.L2319	@cond_branch
.L2317:
	bl	Random
	ldr	r1, .L2328
	ldr	r1, [r1]
	ldr	r4, [r1, #0x1c]
	ldr	r1, [sp, #0x30]
	add	r4, r1, r4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r6, #0
	bl	__modsi3
	lsl	r0, r0, #0x1
	ldr	r2, [sp, #0x2c]
	add	r0, r2, r0
	ldrh	r0, [r0]
	strh	r0, [r4, #0xa]
	add	sp, sp, #0x38
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2329:
	.align	2, 0
.L2328:
	.word	gContestResources
.Lfe198:
	.size	 sub_80DF250,.Lfe198-sub_80DF250
	.align	2, 0
	.type	 sub_80DF4F8,function
	.thumb_func
sub_80DF4F8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0xc
	ldr	r1, .L2376
	ldr	r0, .L2376+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB20991
	b	.L2330	@long jump
.LCB20991:
	mov	r7, #0x0
	mov	r3, #0x0
	ldr	r0, .L2376+0x8
	mov	ip, r0
.L2335:
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2334	@cond_branch
	lsl	r0, r3, #0x18
	lsr	r7, r0, #0x18
.L2334:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L2335	@cond_branch
	mov	r1, #0x0
	mov	r9, r1
	mov	sl, r1
	mov	r3, #0x0
	lsl	r2, r7, #0x1
	lsl	r4, r7, #0x4
	mov	r8, r4
	ldr	r1, .L2376+0xc
	add	r0, r2, r1
	mov	r6, #0x0
	ldrsh	r5, [r0, r6]
	str	r5, [sp, #0x8]
	add	r5, r1, #0
	ldr	r0, .L2376+0x10
	add	r2, r2, r0
	add	r4, r0, #0
.L2341:
	mov	r1, #0x0
	ldrsh	r0, [r5, r1]
	ldr	r6, [sp, #0x8]
	cmp	r6, r0
	bge	.L2342	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L2342:
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	mov	r6, #0x0
	ldrsh	r0, [r4, r6]
	cmp	r1, r0
	bge	.L2340	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L2340:
	add	r5, r5, #0x2
	add	r4, r4, #0x2
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L2341	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, r8
	ldrb	r1, [r0, #0xc]
	mov	r4, #0x0
	mov	r2, #0x1
	mov	r3, #0x7
.L2348:
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L2347	@cond_branch
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2347:
	lsr	r1, r1, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L2348	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L2376+0x8
	ldr	r0, [r0]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, r8
	ldrb	r1, [r0, #0xc]
	mov	r4, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2353	@cond_branch
	cmp	r5, #0
	beq	.L2352	@cond_branch
.L2356:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L2353:
	lsr	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r3, r3, #0x1
	cmp	r3, #0x7
	bgt	.L2352	@cond_branch
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L2353	@cond_branch
	cmp	r5, r4
	bne	.L2356	@cond_branch
.L2352:
	mov	r1, #0x1
	add	r0, r1, #0
	lsl	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r7, #0
	bne	.L2358	@cond_branch
	mov	r0, sp
	strb	r1, [r0]
	ldr	r1, .L2376+0x8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x1c]
	ldrb	r4, [r0, #0x1d]
	mov	r3, #0x2
	b	.L2375
.L2377:
	.align	2, 0
.L2376:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gContestResources
	.word	gContestMonConditions
	.word	gUnknown_02039F18
.L2358:
	mov	r1, sp
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L2378
	ldr	r0, [r1]
	ldr	r0, [r0, #0x1c]
	ldrb	r4, [r0, #0xd]
	mov	r3, #0x1
.L2375:
	mov	ip, r1
	mov	r5, #0x1
	lsl	r2, r2, #0x18
	str	r2, [sp, #0x4]
	cmp	r3, #0x3
	bgt	.L2361	@cond_branch
.L2363:
	cmp	r3, r7
	beq	.L2362	@cond_branch
	mov	r6, ip
	ldr	r2, [r6]
	ldr	r0, [r2, #0x1c]
	lsl	r1, r3, #0x4
	add	r0, r1, r0
	ldrb	r0, [r0, #0xd]
	cmp	r4, r0
	bcs	.L2365	@cond_branch
	mov	r0, sp
	strb	r3, [r0]
	ldr	r0, [r2, #0x1c]
	add	r0, r1, r0
	ldrb	r4, [r0, #0xd]
	mov	r5, #0x1
	b	.L2362
.L2379:
	.align	2, 0
.L2378:
	.word	gContestResources
.L2365:
	cmp	r4, r0
	bne	.L2362	@cond_branch
	mov	r1, sp
	add	r0, r1, r5
	strb	r3, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L2362:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L2363	@cond_branch
.L2361:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r5, #0
	bl	__modsi3
	add	r0, r0, sp
	ldrb	r6, [r0]
	mov	r2, #0x80
	mov	r3, #0x0
	ldr	r5, .L2380
	ldr	r0, [r5]
	ldr	r0, [r0, #0x1c]
	lsl	r1, r6, #0x4
	add	r0, r1, r0
	ldrb	r0, [r0, #0xd]
	and	r0, r0, r2
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.L2370	@cond_branch
.L2371:
	lsr	r2, r2, #0x1
	add	r3, r3, #0x1
	cmp	r3, #0x7
	bgt	.L2370	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x1c]
	add	r0, r1, r0
	ldrb	r4, [r0, #0xd]
	and	r4, r4, r2
	cmp	r4, #0
	beq	.L2371	@cond_branch
.L2370:
	mov	r0, r9
	bl	ContestLiveUpdates_BeforeInterview_1
	mov	r0, sl
	bl	ContestLiveUpdates_BeforeInterview_2
	ldr	r5, [sp, #0x4]
	lsr	r0, r5, #0x18
	bl	ContestLiveUpdates_BeforeInterview_3
	ldr	r0, .L2380
	ldr	r0, [r0]
	ldr	r0, [r0, #0x1c]
	add	r0, r0, r8
	ldrh	r0, [r0, #0xa]
	bl	ContestLiveUpdates_BeforeInterview_4
	add	r0, r4, #0
	add	r1, r6, #0
	bl	ContestLiveUpdates_BeforeInterview_5
.L2330:
	add	sp, sp, #0xc
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2381:
	.align	2, 0
.L2380:
	.word	gContestResources
.Lfe199:
	.size	 sub_80DF4F8,.Lfe199-sub_80DF4F8
	.align	2, 0
	.globl	ContestDebugToggleBitfields
	.type	 ContestDebugToggleBitfields,function
	.thumb_func
ContestDebugToggleBitfields:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L2390
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r2, r0, r1
	ldrb	r1, [r2]
	add	r4, r0, #0
	cmp	r1, #0
	bne	.L2383	@cond_branch
	cmp	r3, #0
	bne	.L2384	@cond_branch
	mov	r0, #0x2
	b	.L2389
.L2391:
	.align	2, 0
.L2390:
	.word	gHeap
.L2384:
	mov	r0, #0x3
	b	.L2389
.L2383:
	mov	r0, #0x0
.L2389:
	strb	r0, [r2]
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L2387	@cond_branch
	bl	DrawContestantWindowText
	bl	SwapMoveDescAndContestTilemaps
	b	.L2388
.L2387:
	bl	ContestDebugPrintBitStrings
.L2388:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe200:
	.size	 ContestDebugToggleBitfields,.Lfe200-ContestDebugToggleBitfields
	.align	2, 0
	.type	 ContestDebugPrintBitStrings,function
	.thumb_func
ContestDebugPrintBitStrings:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	ldr	r0, .L2432
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB21413
	b	.L2392	@long jump
.LCB21413:
	ldr	r0, .L2432+0x4
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bls	.LCB21424
	b	.L2392	@long jump
.LCB21424:
	mov	r7, #0x0
	mov	r2, sp
	add	r2, r2, #0x18
	str	r2, [sp, #0x30]
.L2398:
	add	r0, r7, #0
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L2398	@cond_branch
	ldr	r0, .L2432+0x4
	mov	r1, #0xd0
	lsl	r1, r1, #0x9
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L2400	@cond_branch
	mov	r7, #0x0
	mov	r2, #0x7
	mov	sl, r2
	ldr	r0, [sp, #0x30]
	mov	r9, r0
.L2404:
	add	r0, sp, #0x4
	ldr	r1, .L2432+0x8
	bl	StringCopy
	add	r5, r0, #0
	ldr	r0, .L2432+0xc
	add	r0, r7, r0
	ldrb	r0, [r0]
	mov	r1, sl
	str	r1, [sp]
	add	r1, sp, #0x4
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	ldr	r0, .L2432+0x10
	ldr	r0, [r0]
	ldr	r1, [r0, #0x1c]
	lsl	r0, r7, #0x4
	add	r0, r0, r1
	ldrb	r4, [r0, #0xc]
	mov	r6, #0x7
	add	r2, r7, #0x1
	mov	r8, r2
.L2408:
	mov	r1, #0x1
	and	r1, r1, r4
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	add	r5, r0, #0
	lsr	r4, r4, #0x1
	lsl	r0, r6, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	cmp	r0, r2
	bgt	.L2408	@cond_branch
	mov	r6, #0x0
	ldr	r4, .L2432+0xc
	ldr	r3, [sp, #0x30]
.L2413:
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	add	r2, r3, r0
	mov	r1, sp
	add	r1, r1, r0
	add	r1, r1, #0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	asr	r5, r0, #0x18
	cmp	r5, #0x4
	ble	.L2413	@cond_branch
	mov	r0, r9
	add	r1, r0, r5
	mov	r0, #0xff
	strb	r0, [r1]
	add	r4, r7, r4
	ldrb	r0, [r4]
	mov	r1, sl
	str	r1, [sp]
	mov	r1, r9
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	ldrb	r0, [r4]
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x4
	mov	r2, sl
	str	r2, [sp]
	mov	r2, #0x37
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L2404	@cond_branch
	b	.L2416
.L2433:
	.align	2, 0
.L2432:
	.word	gEnableContestDebugging
	.word	gHeap
	.word	gText_CDot
	.word	gContestantTurnOrder
	.word	gContestResources
.L2400:
	mov	r7, #0x0
	mov	r2, sp
	add	r2, r2, #0x6
	str	r2, [sp, #0x2c]
	ldr	r0, [sp, #0x30]
	mov	r9, r0
	mov	r1, #0x7
	mov	sl, r1
.L2420:
	add	r0, sp, #0x4
	ldr	r1, .L2434
	bl	StringCopy
	ldr	r0, .L2434+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x1c]
	lsl	r0, r7, #0x4
	add	r0, r0, r1
	ldrb	r4, [r0, #0xd]
	ldr	r5, [sp, #0x2c]
	mov	r6, #0x7
	add	r2, r7, #0x1
	mov	r8, r2
.L2424:
	mov	r1, #0x1
	and	r1, r1, r4
	add	r0, r5, #0
	mov	r2, #0x0
	mov	r3, #0x1
	bl	ConvertIntToDecimalStringN
	add	r5, r0, #0
	lsr	r4, r4, #0x1
	lsl	r0, r6, #0x18
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	mov	r2, #0x1
	neg	r2, r2
	cmp	r0, r2
	bgt	.L2424	@cond_branch
	mov	r6, #0x0
	ldr	r4, .L2434+0x8
	ldr	r3, [sp, #0x30]
.L2429:
	lsl	r0, r6, #0x18
	asr	r0, r0, #0x18
	add	r2, r3, r0
	mov	r1, sp
	add	r1, r1, r0
	add	r1, r1, #0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	asr	r5, r0, #0x18
	cmp	r5, #0x4
	ble	.L2429	@cond_branch
	mov	r0, r9
	add	r1, r0, r5
	mov	r0, #0xff
	strb	r0, [r1]
	add	r4, r7, r4
	ldrb	r0, [r4]
	mov	r1, sl
	str	r1, [sp]
	mov	r1, r9
	mov	r2, #0x5
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	ldrb	r0, [r4]
	mov	r1, sp
	add	r1, r1, r5
	add	r1, r1, #0x4
	mov	r2, sl
	str	r2, [sp]
	mov	r2, #0x37
	mov	r3, #0x1
	bl	Contest_PrintTextToBg0WindowAt
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r7, r0, #0x18
	cmp	r7, #0x3
	bls	.L2420	@cond_branch
.L2416:
	bl	SwapMoveDescAndContestTilemaps
.L2392:
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2435:
	.align	2, 0
.L2434:
	.word	gText_BDot
	.word	gContestResources
	.word	gContestantTurnOrder
.Lfe201:
	.size	 ContestDebugPrintBitStrings,.Lfe201-ContestDebugPrintBitStrings
	.align	2, 0
	.type	 sub_80DF940,function
	.thumb_func
sub_80DF940:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r5, #0x2
	ldrb	r0, [r4]
	cmp	r0, #0xfc
	bne	.L2437	@cond_branch
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0x15
	bne	.L2437	@cond_branch
	mov	r0, #0x2
	b	.L2446
.L2437:
	add	r0, r4, #0
	bl	StringLength
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x5
	bhi	.L2438	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0xff
	beq	.L2438	@cond_branch
.L2441:
	ldrb	r1, [r4]
	add	r0, r1, #0
	add	r0, r0, #0x45
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x33
	bls	.L2443	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x5f
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x9
	bls	.L2443	@cond_branch
	add	r0, r1, #0
	cmp	r0, #0
	beq	.L2443	@cond_branch
	cmp	r0, #0xad
	beq	.L2443	@cond_branch
	cmp	r0, #0xb8
	beq	.L2443	@cond_branch
	cmp	r0, #0xab
	beq	.L2443	@cond_branch
	cmp	r0, #0xac
	beq	.L2443	@cond_branch
	cmp	r0, #0xb5
	beq	.L2443	@cond_branch
	cmp	r0, #0xb6
	beq	.L2443	@cond_branch
	cmp	r0, #0xba
	beq	.L2443	@cond_branch
	cmp	r0, #0xae
	beq	.L2443	@cond_branch
	cmp	r0, #0xb0
	beq	.L2443	@cond_branch
	cmp	r0, #0xb1
	beq	.L2443	@cond_branch
	cmp	r0, #0xb2
	beq	.L2443	@cond_branch
	cmp	r0, #0xb3
	beq	.L2443	@cond_branch
	cmp	r0, #0xb1
	bne	.L2442	@cond_branch
.L2443:
	add	r4, r4, #0x1
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L2441	@cond_branch
	b	.L2438
.L2442:
	mov	r5, #0x1
.L2438:
	add	r0, r5, #0
.L2446:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe202:
	.size	 sub_80DF940,.Lfe202-sub_80DF940
	.align	2, 0
	.type	 sub_80DF9D4,function
	.thumb_func
sub_80DF9D4:
	ldrb	r2, [r0, #0x5]
	mov	r1, #0xff
	strb	r1, [r0, #0x5]
	strb	r2, [r0, #0x7]
	bx	lr
.Lfe203:
	.size	 sub_80DF9D4,.Lfe203-sub_80DF9D4
	.align	2, 0
	.type	 sub_80DF9E0,function
	.thumb_func
sub_80DF9E0:
	push	{r4, r5, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	bl	StripExtCtrlCodes
	cmp	r4, #0x1
	bne	.L2449	@cond_branch
	mov	r0, #0xff
	strb	r0, [r5, #0x5]
	mov	r0, #0xfc
	strb	r0, [r5, #0xa]
	b	.L2450
.L2449:
	ldrb	r1, [r5, #0x5]
	mov	r0, #0xff
	strb	r0, [r5, #0x5]
	strb	r1, [r5, #0xa]
.L2450:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe204:
	.size	 sub_80DF9E0,.Lfe204-sub_80DF9E0
	.align	2, 0
	.globl	sub_80DFA08
	.type	 sub_80DFA08,function
	.thumb_func
sub_80DFA08:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	add	r4, r5, #0x2
	cmp	r6, #0x1
	bne	.L2452	@cond_branch
	add	r0, r4, #0
	bl	sub_80DF940
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	ConvertInternationalString
	b	.L2453
.L2452:
	ldrb	r0, [r4, #0xa]
	cmp	r0, #0xfc
	bne	.L2454	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ConvertInternationalString
	b	.L2453
.L2454:
	strb	r0, [r4, #0x5]
	mov	r0, #0xff
	strb	r0, [r4, #0xa]
.L2453:
	add	r4, r5, #0
	add	r4, r4, #0xd
	cmp	r6, #0x1
	bne	.L2456	@cond_branch
	mov	r0, #0xff
	strb	r0, [r4, #0x7]
	ldrb	r0, [r4, #0x4]
	strb	r0, [r4, #0x6]
	ldrb	r0, [r4, #0x3]
	strb	r0, [r4, #0x5]
	ldrb	r0, [r4, #0x2]
	strb	r0, [r4, #0x4]
	ldrb	r0, [r4, #0x1]
	strb	r0, [r4, #0x3]
	ldrb	r0, [r5, #0xd]
	strb	r0, [r4, #0x2]
	mov	r0, #0x15
	strb	r0, [r4, #0x1]
	mov	r0, #0xfc
	strb	r0, [r5, #0xd]
	b	.L2457
.L2456:
	ldrb	r0, [r4, #0x7]
	strb	r0, [r4, #0x5]
	mov	r0, #0xff
	strb	r0, [r4, #0x7]
.L2457:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe205:
	.size	 sub_80DFA08,.Lfe205-sub_80DFA08
	.comm	gContestRngValue, 4	@ 4
.text
	.align	2, 0

