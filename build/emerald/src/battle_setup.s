@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	1, 0
	.type	 sTrainerBattleMode,object
	.size	 sTrainerBattleMode,2
sTrainerBattleMode:
	.short	0x0
	.globl	gTrainerBattleOpponent_A
	.align	1, 0
	.type	 gTrainerBattleOpponent_A,object
	.size	 gTrainerBattleOpponent_A,2
gTrainerBattleOpponent_A:
	.short	0x0
	.globl	gTrainerBattleOpponent_B
	.align	1, 0
	.type	 gTrainerBattleOpponent_B,object
	.size	 gTrainerBattleOpponent_B,2
gTrainerBattleOpponent_B:
	.short	0x0
	.globl	gPartnerTrainerId
	.align	1, 0
	.type	 gPartnerTrainerId,object
	.size	 gPartnerTrainerId,2
gPartnerTrainerId:
	.short	0x0
	.align	1, 0
	.type	 sTrainerObjectEventLocalId,object
	.size	 sTrainerObjectEventLocalId,2
sTrainerObjectEventLocalId:
	.short	0x0
	.align	2, 0
	.type	 sTrainerAIntroSpeech,object
	.size	 sTrainerAIntroSpeech,4
sTrainerAIntroSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerBIntroSpeech,object
	.size	 sTrainerBIntroSpeech,4
sTrainerBIntroSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerADefeatSpeech,object
	.size	 sTrainerADefeatSpeech,4
sTrainerADefeatSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerBDefeatSpeech,object
	.size	 sTrainerBDefeatSpeech,4
sTrainerBDefeatSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerVictorySpeech,object
	.size	 sTrainerVictorySpeech,4
sTrainerVictorySpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerCannotBattleSpeech,object
	.size	 sTrainerCannotBattleSpeech,4
sTrainerCannotBattleSpeech:
	.word	0x0
	.align	2, 0
	.type	 sTrainerBattleEndScript,object
	.size	 sTrainerBattleEndScript,4
sTrainerBattleEndScript:
	.word	0x0
	.align	2, 0
	.type	 sTrainerABattleScriptRetAddr,object
	.size	 sTrainerABattleScriptRetAddr,4
sTrainerABattleScriptRetAddr:
	.word	0x0
	.align	2, 0
	.type	 sTrainerBBattleScriptRetAddr,object
	.size	 sTrainerBBattleScriptRetAddr,4
sTrainerBBattleScriptRetAddr:
	.word	0x0
	.type	 sShouldCheckTrainerBScript,object
	.size	 sShouldCheckTrainerBScript,1
sShouldCheckTrainerBScript:
	.byte	0x0
	.type	 sNoOfPossibleTrainerRetScripts,object
	.size	 sNoOfPossibleTrainerRetScripts,1
sNoOfPossibleTrainerRetScripts:
	.byte	0x0
	.section .rodata
	.type	 sBattleTransitionTable_Wild,object
sBattleTransitionTable_Wild:
	.byte	0x8
	.byte	0x9
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.byte	0xa
	.byte	0x7
	.byte	0x6
	.size	 sBattleTransitionTable_Wild,8
	.type	 sBattleTransitionTable_Trainer,object
sBattleTransitionTable_Trainer:
	.byte	0x4
	.byte	0xb
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0xa
	.byte	0x1
	.byte	0x6
	.size	 sBattleTransitionTable_Trainer,8
	.type	 sUnknown_0854FE98,object
sUnknown_0854FE98:
	.byte	0x1d
	.byte	0x1e
	.byte	0x1f
	.byte	0x20
	.byte	0x22
	.byte	0x23
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.size	 sUnknown_0854FE98,12
	.type	 sUnknown_0854FEA4,object
sUnknown_0854FEA4:
	.byte	0x1f
	.byte	0x20
	.byte	0x21
	.size	 sUnknown_0854FEA4,3
	.type	 sUnknown_0854FEA7,object
sUnknown_0854FEA7:
	.byte	0x1d
	.byte	0x1f
	.byte	0x20
	.byte	0x21
	.size	 sUnknown_0854FEA7,4
	.align	2, 0
	.type	 sOrdinaryBattleParams,object
sOrdinaryBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x5
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sOrdinaryBattleParams,72
	.align	2, 0
	.type	 sContinueScriptBattleParams,object
sContinueScriptBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x2
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sContinueScriptBattleParams,72
	.align	2, 0
	.type	 sDoubleBattleParams,object
sDoubleBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x2
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x5
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sDoubleBattleParams,72
	.align	2, 0
	.type	 sOrdinaryNoIntroBattleParams,object
sOrdinaryNoIntroBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x5
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x5
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sOrdinaryNoIntroBattleParams,72
	.align	2, 0
	.type	 sContinueScriptDoubleBattleParams,object
sContinueScriptDoubleBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_A
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerAIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerADefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x2
	.space	3
	.word	sTrainerABattleScriptRetAddr
	.byte	0x2
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sContinueScriptDoubleBattleParams,72
	.align	2, 0
	.type	 sTrainerBOrdinaryBattleParams,object
sTrainerBOrdinaryBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_B
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerBIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerBDefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerBBattleScriptRetAddr
	.byte	0x5
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sTrainerBOrdinaryBattleParams,72
	.align	2, 0
	.type	 sTrainerBContinueScriptBattleParams,object
sTrainerBContinueScriptBattleParams:
	.word	sTrainerBattleMode
	.byte	0x0
	.space	3
	.word	gTrainerBattleOpponent_B
	.byte	0x1
	.space	3
	.word	sTrainerObjectEventLocalId
	.byte	0x1
	.space	3
	.word	sTrainerBIntroSpeech
	.byte	0x2
	.space	3
	.word	sTrainerBDefeatSpeech
	.byte	0x2
	.space	3
	.word	sTrainerVictorySpeech
	.byte	0x5
	.space	3
	.word	sTrainerCannotBattleSpeech
	.byte	0x5
	.space	3
	.word	sTrainerBBattleScriptRetAddr
	.byte	0x2
	.space	3
	.word	sTrainerBattleEndScript
	.byte	0x6
	.space	3
	.size	 sTrainerBContinueScriptBattleParams,72
	.globl	gRematchTable
	.align	2, 0
	.type	 gRematchTable,object
	.size	 gRematchTable,1248
gRematchTable:
	.short	0x25
	.short	0x28
	.short	0x29
	.short	0x2a
	.short	0x2b
	.short	0x0
	.short	0x21
	.space	2
	.short	0x2e1
	.short	0x32c
	.short	0x32d
	.short	0x32e
	.short	0x32f
	.short	0x0
	.short	0x14
	.space	2
	.short	0x2c
	.short	0x2f
	.short	0x30
	.short	0x31
	.short	0x32
	.short	0x0
	.short	0x1a
	.space	2
	.short	0x39
	.short	0x3c
	.short	0x3d
	.short	0x3e
	.short	0x3f
	.short	0x0
	.short	0x18
	.space	2
	.short	0x40
	.short	0x43
	.short	0x44
	.short	0x45
	.short	0x46
	.short	0x0
	.short	0x18
	.space	2
	.short	0x2af
	.short	0x2b0
	.short	0x2b1
	.short	0x2b2
	.short	0x2b3
	.short	0x0
	.short	0x27
	.space	2
	.short	0x2ff
	.short	0x33c
	.short	0x33d
	.short	0x33e
	.short	0x33f
	.short	0x0
	.short	0x24
	.space	2
	.short	0x5e
	.short	0x65
	.short	0x66
	.short	0x67
	.short	0x68
	.short	0x0
	.short	0x1a
	.space	2
	.short	0x4e
	.short	0x54
	.short	0x55
	.short	0x56
	.short	0x57
	.short	0x0
	.short	0x1a
	.space	2
	.short	0x6c
	.short	0x6e
	.short	0x6f
	.short	0x70
	.short	0x71
	.short	0x18
	.short	0x14
	.space	2
	.short	0x72
	.short	0x78
	.short	0x79
	.short	0x7a
	.short	0x7b
	.short	0x0
	.short	0x13
	.space	2
	.short	0x90
	.short	0x34c
	.short	0x34d
	.short	0x34e
	.short	0x34f
	.short	0x18
	.short	0x38
	.space	2
	.short	0x7f
	.short	0x84
	.short	0x85
	.short	0x86
	.short	0x87
	.short	0x0
	.short	0x24
	.space	2
	.short	0x88
	.short	0x8b
	.short	0x8c
	.short	0x8d
	.short	0x8e
	.short	0x0
	.short	0x13
	.space	2
	.short	0x8f
	.short	0x93
	.short	0x94
	.short	0x95
	.short	0x96
	.short	0x0
	.short	0x1d
	.space	2
	.short	0x9b
	.short	0xaf
	.short	0xb0
	.short	0xb1
	.short	0xb2
	.short	0x0
	.short	0x16
	.space	2
	.short	0xb7
	.short	0xb8
	.short	0xb9
	.short	0xba
	.short	0xbb
	.short	0x0
	.short	0x1e
	.space	2
	.short	0x2a0
	.short	0x338
	.short	0x339
	.short	0x33a
	.short	0x33b
	.short	0x0
	.short	0x2a
	.space	2
	.short	0xc3
	.short	0x340
	.short	0x341
	.short	0x342
	.short	0x343
	.short	0x0
	.short	0x26
	.space	2
	.short	0xc4
	.short	0xc5
	.short	0xc6
	.short	0xc7
	.short	0xc8
	.short	0x0
	.short	0x21
	.space	2
	.short	0xce
	.short	0xcf
	.short	0xd0
	.short	0xd1
	.short	0xd2
	.short	0x0
	.short	0x1d
	.space	2
	.short	0xd8
	.short	0xdb
	.short	0xdc
	.short	0xdd
	.short	0xde
	.short	0x18
	.short	0xd
	.space	2
	.short	0x2a9
	.short	0x2aa
	.short	0x2ab
	.short	0x2ac
	.short	0x2ad
	.short	0x18
	.short	0x1
	.space	2
	.short	0xe2
	.short	0xe4
	.short	0xe5
	.short	0xe6
	.short	0xe7
	.short	0x0
	.short	0x23
	.space	2
	.short	0xee
	.short	0xef
	.short	0xf0
	.short	0xf1
	.short	0xf2
	.short	0x0
	.short	0x26
	.space	2
	.short	0xf9
	.short	0xfa
	.short	0xfb
	.short	0xfc
	.short	0xfd
	.short	0x0
	.short	0x26
	.space	2
	.short	0xfe
	.short	0x101
	.short	0x102
	.short	0x103
	.short	0x104
	.short	0x0
	.short	0x24
	.space	2
	.short	0x118
	.short	0x11a
	.short	0x11b
	.short	0x11c
	.short	0x11d
	.short	0x0
	.short	0x1f
	.space	2
	.short	0x111
	.short	0x114
	.short	0x115
	.short	0x116
	.short	0x117
	.short	0x0
	.short	0x1f
	.space	2
	.short	0x11f
	.short	0x120
	.short	0x121
	.short	0x122
	.short	0x123
	.short	0x0
	.short	0x20
	.space	2
	.short	0x12e
	.short	0x12f
	.short	0x130
	.short	0x131
	.short	0x132
	.short	0x0
	.short	0x19
	.space	2
	.short	0x125
	.short	0x127
	.short	0x128
	.short	0x129
	.short	0x12a
	.short	0x0
	.short	0x12
	.space	2
	.short	0x133
	.short	0x134
	.short	0x135
	.short	0x136
	.short	0x137
	.short	0x0
	.short	0x1e
	.space	2
	.short	0x139
	.short	0x13a
	.short	0x13b
	.short	0x13c
	.short	0x13d
	.short	0x18
	.short	0xc
	.space	2
	.short	0x13e
	.short	0x148
	.short	0x149
	.short	0x14a
	.short	0x14b
	.short	0x0
	.short	0x11
	.space	2
	.short	0x153
	.short	0x15a
	.short	0x15b
	.short	0x15c
	.short	0x15d
	.short	0x0
	.short	0x15
	.space	2
	.short	0x178
	.short	0x17b
	.short	0x17c
	.short	0x17d
	.short	0x17e
	.short	0x0
	.short	0x2b
	.space	2
	.short	0x171
	.short	0x172
	.short	0x173
	.short	0x174
	.short	0x175
	.short	0x0
	.short	0x20
	.space	2
	.short	0x166
	.short	0x168
	.short	0x169
	.short	0x16a
	.short	0x16b
	.short	0x0
	.short	0x19
	.space	2
	.short	0x16c
	.short	0x16d
	.short	0x16e
	.short	0x16f
	.short	0x170
	.short	0x0
	.short	0x20
	.space	2
	.short	0x182
	.short	0x184
	.short	0x185
	.short	0x186
	.short	0x187
	.short	0x0
	.short	0x2b
	.space	2
	.short	0x161
	.short	0x162
	.short	0x163
	.short	0x164
	.short	0x165
	.short	0x0
	.short	0x19
	.space	2
	.short	0x179
	.short	0x334
	.short	0x335
	.short	0x336
	.short	0x337
	.short	0x0
	.short	0x29
	.space	2
	.short	0x188
	.short	0x189
	.short	0x18a
	.short	0x18b
	.short	0x18c
	.short	0x18
	.short	0x1
	.space	2
	.short	0x196
	.short	0x199
	.short	0x19a
	.short	0x19b
	.short	0x19c
	.short	0x0
	.short	0x23
	.space	2
	.short	0x1a3
	.short	0x1a5
	.short	0x1a6
	.short	0x1a7
	.short	0x1a8
	.short	0x0
	.short	0x1c
	.space	2
	.short	0x1ab
	.short	0x1ae
	.short	0x1af
	.short	0x1b0
	.short	0x1b1
	.short	0x0
	.short	0x1e
	.space	2
	.short	0x1b2
	.short	0x1b5
	.short	0x1b6
	.short	0x1b7
	.short	0x1b8
	.short	0x0
	.short	0x1c
	.space	2
	.short	0x1c1
	.short	0x1d1
	.short	0x1d2
	.short	0x1d3
	.short	0x1d4
	.short	0x0
	.short	0x27
	.space	2
	.short	0x1da
	.short	0x1dd
	.short	0x1de
	.short	0x1df
	.short	0x1e0
	.short	0x18
	.short	0xd
	.space	2
	.short	0x1e1
	.short	0x1e2
	.short	0x1e7
	.short	0x1e8
	.short	0x1e9
	.short	0x0
	.short	0x12
	.space	2
	.short	0x1ec
	.short	0x1f1
	.short	0x1f2
	.short	0x1f3
	.short	0x1f4
	.short	0x0
	.short	0x28
	.space	2
	.short	0x2e4
	.short	0x330
	.short	0x331
	.short	0x332
	.short	0x333
	.short	0x0
	.short	0x17
	.space	2
	.short	0x200
	.short	0x203
	.short	0x204
	.short	0x205
	.short	0x206
	.short	0x0
	.short	0x19
	.space	2
	.short	0x221
	.short	0x224
	.short	0x225
	.short	0x226
	.short	0x227
	.short	0x0
	.short	0x20
	.space	2
	.short	0x21a
	.short	0x21d
	.short	0x21e
	.short	0x21f
	.short	0x220
	.short	0x0
	.short	0x20
	.space	2
	.short	0x9
	.short	0x348
	.short	0x349
	.short	0x34a
	.short	0x34b
	.short	0x18
	.short	0x11
	.space	2
	.short	0x22f
	.short	0x232
	.short	0x233
	.short	0x234
	.short	0x235
	.short	0x0
	.short	0x22
	.space	2
	.short	0x228
	.short	0x22b
	.short	0x22c
	.short	0x22d
	.short	0x22e
	.short	0x0
	.short	0x22
	.space	2
	.short	0x25c
	.short	0x25f
	.short	0x260
	.short	0x261
	.short	0x262
	.short	0x0
	.short	0x13
	.space	2
	.short	0x26d
	.short	0x26e
	.short	0x26f
	.short	0x270
	.short	0x271
	.short	0x18
	.short	0xb
	.space	2
	.short	0x273
	.short	0x27c
	.short	0x27d
	.short	0x27e
	.short	0x27f
	.short	0x0
	.short	0x1b
	.space	2
	.short	0x1
	.short	0x344
	.short	0x345
	.short	0x346
	.short	0x347
	.short	0x18
	.short	0xc
	.space	2
	.short	0x282
	.short	0x283
	.short	0x284
	.short	0x285
	.short	0x286
	.short	0x18
	.short	0x3e
	.space	2
	.short	0x291
	.short	0x292
	.short	0x293
	.short	0x294
	.short	0x294
	.short	0x18
	.short	0x2b
	.space	2
	.short	0x109
	.short	0x302
	.short	0x303
	.short	0x304
	.short	0x305
	.short	0x0
	.short	0x3
	.space	2
	.short	0x10a
	.short	0x306
	.short	0x307
	.short	0x308
	.short	0x309
	.short	0x0
	.short	0xb
	.space	2
	.short	0x10b
	.short	0x30a
	.short	0x30b
	.short	0x30c
	.short	0x30d
	.short	0x0
	.short	0x2
	.space	2
	.short	0x10c
	.short	0x30e
	.short	0x30f
	.short	0x310
	.short	0x311
	.short	0x0
	.short	0xc
	.space	2
	.short	0x10d
	.short	0x312
	.short	0x313
	.short	0x314
	.short	0x315
	.short	0x0
	.short	0x0
	.space	2
	.short	0x10e
	.short	0x316
	.short	0x317
	.short	0x318
	.short	0x319
	.short	0x0
	.short	0x4
	.space	2
	.short	0x10f
	.short	0x31a
	.short	0x31b
	.short	0x31c
	.short	0x31d
	.short	0x0
	.short	0x6
	.space	2
	.short	0x110
	.short	0x31e
	.short	0x31f
	.short	0x320
	.short	0x321
	.short	0x0
	.short	0x7
	.space	2
	.short	0x105
	.short	0x105
	.short	0x105
	.short	0x105
	.short	0x105
	.short	0x0
	.short	0x8
	.space	2
	.short	0x106
	.short	0x106
	.short	0x106
	.short	0x106
	.short	0x106
	.short	0x0
	.short	0x8
	.space	2
	.short	0x107
	.short	0x107
	.short	0x107
	.short	0x107
	.short	0x107
	.short	0x0
	.short	0x8
	.space	2
	.short	0x108
	.short	0x108
	.short	0x108
	.short	0x108
	.short	0x108
	.short	0x0
	.short	0x8
	.space	2
	.short	0x14f
	.short	0x14f
	.short	0x14f
	.short	0x14f
	.short	0x14f
	.short	0x0
	.short	0x8
	.space	2
	.align	1, 0
	.type	 sBadgeFlags,object
	.size	 sBadgeFlags,16
sBadgeFlags:
	.short	0x867
	.short	0x868
	.short	0x869
	.short	0x86a
	.short	0x86b
	.short	0x86c
	.short	0x86d
	.short	0x86e
.text
	.align	2, 0
	.type	 Task_BattleStart,function
	.thumb_func
Task_BattleStart:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L10
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L4	@cond_branch
	cmp	r0, #0x1
	beq	.L6	@cond_branch
	b	.L3
.L11:
	.align	2, 0
.L10:
	.word	gTasks+0x8
.L4:
	bl	FldEffPoison_IsActive
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldrb	r0, [r4, #0x2]
	bl	BattleTransition_StartOnField
	bl	ClearMirageTowerPulseBlendEffect
	ldrh	r0, [r4]
	add	r0, r0, #0x1
	strh	r0, [r4]
	b	.L3
.L6:
	bl	IsBattleTransitionDone
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L3	@cond_branch
	bl	CleanupOverworldWindowsAndTilemaps
	ldr	r0, .L12
	bl	SetMainCallback2
	bl	RestartWildEncounterImmunitySteps
	bl	ClearPoisonStepCounter
	add	r0, r5, #0
	bl	DestroyTask
.L3:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L13:
	.align	2, 0
.L12:
	.word	CB2_InitBattle
.Lfe1:
	.size	 Task_BattleStart,.Lfe1-Task_BattleStart
	.align	2, 0
	.type	 CreateBattleStartTask,function
	.thumb_func
CreateBattleStartTask:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	ldr	r0, .L15
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L15+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0xa]
	add	r0, r5, #0
	bl	PlayMapChosenOrBattleBGM
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	Task_BattleStart
	.word	gTasks
.Lfe2:
	.size	 CreateBattleStartTask,.Lfe2-CreateBattleStartTask
	.align	2, 0
	.globl	BattleSetup_StartWildBattle
	.type	 BattleSetup_StartWildBattle,function
	.thumb_func
BattleSetup_StartWildBattle:
	push	{lr}
	bl	GetSafariZoneFlag
	cmp	r0, #0
	beq	.L18	@cond_branch
	bl	DoSafariBattle
	b	.L19
.L18:
	bl	DoStandardWildBattle
.L19:
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 BattleSetup_StartWildBattle,.Lfe3-BattleSetup_StartWildBattle
	.align	2, 0
	.globl	BattleSetup_StartBattlePikeWildBattle
	.type	 BattleSetup_StartBattlePikeWildBattle,function
	.thumb_func
BattleSetup_StartBattlePikeWildBattle:
	push	{lr}
	bl	DoBattlePikeWildBattle
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 BattleSetup_StartBattlePikeWildBattle,.Lfe4-BattleSetup_StartBattlePikeWildBattle
	.align	2, 0
	.type	 DoStandardWildBattle,function
	.thumb_func
DoStandardWildBattle:
	push	{r4, lr}
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808BCF4
	ldr	r1, .L23
	ldr	r0, .L23+0x4
	str	r0, [r1, #0x8]
	ldr	r4, .L23+0x8
	mov	r0, #0x0
	str	r0, [r4]
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L22	@cond_branch
	ldr	r0, .L23+0xc
	mov	r1, #0x0
	bl	VarSet
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	orr	r0, r0, r1
	str	r0, [r4]
.L22:
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r4}
	pop	{r0}
	bx	r0
.L24:
	.align	2, 0
.L23:
	.word	gMain
	.word	CB2_EndWildBattle
	.word	gBattleTypeFlags
	.word	0x400e
.Lfe5:
	.size	 DoStandardWildBattle,.Lfe5-DoStandardWildBattle
	.align	2, 0
	.globl	BattleSetup_StartRoamerBattle
	.type	 BattleSetup_StartRoamerBattle,function
	.thumb_func
BattleSetup_StartRoamerBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808BCF4
	ldr	r1, .L26
	ldr	r0, .L26+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L26+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	gMain
	.word	CB2_EndWildBattle
	.word	gBattleTypeFlags
.Lfe6:
	.size	 BattleSetup_StartRoamerBattle,.Lfe6-BattleSetup_StartRoamerBattle
	.align	2, 0
	.type	 DoSafariBattle,function
	.thumb_func
DoSafariBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808BCF4
	ldr	r1, .L29
	ldr	r0, .L29+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L29+0x8
	mov	r0, #0x80
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	pop	{r0}
	bx	r0
.L30:
	.align	2, 0
.L29:
	.word	gMain
	.word	CB2_EndSafariBattle
	.word	gBattleTypeFlags
.Lfe7:
	.size	 DoSafariBattle,.Lfe7-DoSafariBattle
	.align	2, 0
	.type	 DoBattlePikeWildBattle,function
	.thumb_func
DoBattlePikeWildBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808BCF4
	ldr	r1, .L32
	ldr	r0, .L32+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L32+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	gMain
	.word	CB2_EndWildBattle
	.word	gBattleTypeFlags
.Lfe8:
	.size	 DoBattlePikeWildBattle,.Lfe8-DoBattlePikeWildBattle
	.align	2, 0
	.type	 DoTrainerBattle,function
	.thumb_func
DoTrainerBattle:
	push	{lr}
	bl	GetTrainerBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x9
	bl	IncrementGameStat
	bl	TryUpdateGymLeaderRematchFromTrainer
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 DoTrainerBattle,.Lfe9-DoTrainerBattle
	.align	2, 0
	.type	 sub_80B0828,function
	.thumb_func
sub_80B0828:
	push	{lr}
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L36	@cond_branch
	mov	r0, #0xa
	bl	sub_80B100C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	b	.L37
.L36:
	mov	r0, #0xb
	bl	sub_80B100C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
.L37:
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x9
	bl	IncrementGameStat
	bl	TryUpdateGymLeaderRematchFromTrainer
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_80B0828,.Lfe10-sub_80B0828
	.align	2, 0
	.globl	StartWallyTutorialBattle
	.type	 StartWallyTutorialBattle,function
	.thumb_func
StartWallyTutorialBattle:
	push	{lr}
	ldr	r0, .L39
	mov	r1, #0xc4
	lsl	r1, r1, #0x1
	mov	r2, #0x5
	bl	CreateMaleMon
	bl	ScriptContext2_Enable
	ldr	r1, .L39+0x4
	ldr	r0, .L39+0x8
	str	r0, [r1, #0x8]
	ldr	r1, .L39+0xc
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	str	r0, [r1]
	mov	r0, #0x8
	mov	r1, #0x0
	bl	CreateBattleStartTask
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	gEnemyParty
	.word	gMain
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
	.word	gBattleTypeFlags
.Lfe11:
	.size	 StartWallyTutorialBattle,.Lfe11-StartWallyTutorialBattle
	.align	2, 0
	.globl	BattleSetup_StartScriptedWildBattle
	.type	 BattleSetup_StartScriptedWildBattle,function
	.thumb_func
BattleSetup_StartScriptedWildBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L42
	ldr	r0, .L42+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L42+0x8
	mov	r0, #0x0
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
.Lfe12:
	.size	 BattleSetup_StartScriptedWildBattle,.Lfe12-BattleSetup_StartScriptedWildBattle
	.align	2, 0
	.globl	BattleSetup_StartLatiBattle
	.type	 BattleSetup_StartLatiBattle,function
	.thumb_func
BattleSetup_StartLatiBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L45
	ldr	r0, .L45+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L45+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	str	r0, [r1]
	bl	GetWildBattleTransition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
.Lfe13:
	.size	 BattleSetup_StartLatiBattle,.Lfe13-BattleSetup_StartLatiBattle
	.align	2, 0
	.globl	BattleSetup_StartLegendaryBattle
	.type	 BattleSetup_StartLegendaryBattle,function
	.thumb_func
BattleSetup_StartLegendaryBattle:
	push	{r4, lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L60
	ldr	r0, .L60+0x4
	str	r0, [r1, #0x8]
	ldr	r4, .L60+0x8
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	str	r0, [r4]
	ldr	r0, .L60+0xc
	mov	r1, #0xb
	mov	r2, #0x0
	bl	GetMonData
	add	r1, r0, #0
	mov	r0, #0xca
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L51	@cond_branch
	cmp	r1, r0
	bhi	.L58	@cond_branch
	cmp	r1, #0x97
	beq	.L56	@cond_branch
	cmp	r1, #0x97
	bcc	.L50	@cond_branch
	cmp	r1, #0xfa
	bhi	.L50	@cond_branch
	cmp	r1, #0xf9
	bcc	.L50	@cond_branch
	ldr	r1, .L60+0x10
	b	.L59
.L61:
	.align	2, 0
.L60:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
	.word	gEnemyParty
	.word	0x229
.L58:
	mov	r0, #0xcb
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L52	@cond_branch
	cmp	r1, r0
	bcc	.L50	@cond_branch
	add	r0, r0, #0x4
	cmp	r1, r0
	beq	.L53	@cond_branch
.L50:
	ldr	r2, .L62
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x15
	orr	r0, r0, r1
	str	r0, [r2]
	mov	r1, #0xf0
	lsl	r1, r1, #0x1
	mov	r0, #0x17
	bl	CreateBattleStartTask
	b	.L48
.L63:
	.align	2, 0
.L62:
	.word	gBattleTypeFlags
.L51:
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x16
	orr	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0xf0
	lsl	r1, r1, #0x1
	mov	r0, #0x16
	bl	CreateBattleStartTask
	b	.L48
.L52:
	ldr	r0, [r4]
	mov	r1, #0x80
	lsl	r1, r1, #0x17
	orr	r0, r0, r1
	str	r0, [r4]
	mov	r1, #0xeb
	lsl	r1, r1, #0x1
	mov	r0, #0x18
	bl	CreateBattleStartTask
	b	.L48
.L53:
	ldr	r1, .L64
.L59:
	mov	r0, #0x0
	bl	CreateBattleStartTask
	b	.L48
.L65:
	.align	2, 0
.L64:
	.word	0x227
.L56:
	mov	r1, #0xec
	lsl	r1, r1, #0x1
	mov	r0, #0xa
	bl	CreateBattleStartTask
.L48:
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 BattleSetup_StartLegendaryBattle,.Lfe14-BattleSetup_StartLegendaryBattle
	.align	2, 0
	.globl	StartGroudonKyogreBattle
	.type	 StartGroudonKyogreBattle,function
	.thumb_func
StartGroudonKyogreBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L69
	ldr	r0, .L69+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L69+0x8
	mov	r0, #0xc0
	lsl	r0, r0, #0x6
	str	r0, [r1]
	ldr	r0, .L69+0xc
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L67	@cond_branch
	mov	r1, #0xf0
	lsl	r1, r1, #0x1
	mov	r0, #0xb
	bl	CreateBattleStartTask
	b	.L68
.L70:
	.align	2, 0
.L69:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
	.word	gGameVersion
.L67:
	mov	r1, #0xf0
	lsl	r1, r1, #0x1
	mov	r0, #0x6
	bl	CreateBattleStartTask
.L68:
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 StartGroudonKyogreBattle,.Lfe15-StartGroudonKyogreBattle
	.align	2, 0
	.globl	StartRegiBattle
	.type	 StartRegiBattle,function
	.thumb_func
StartRegiBattle:
	push	{lr}
	bl	ScriptContext2_Enable
	ldr	r1, .L79
	ldr	r0, .L79+0x4
	str	r0, [r1, #0x8]
	ldr	r1, .L79+0x8
	mov	r0, #0xc0
	lsl	r0, r0, #0x7
	str	r0, [r1]
	ldr	r0, .L79+0xc
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	add	r2, r1, #0
	mov	r0, #0xc9
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L74	@cond_branch
	cmp	r1, r0
	bgt	.L78	@cond_branch
	sub	r0, r0, #0x1
	cmp	r1, r0
	beq	.L73	@cond_branch
	b	.L76
.L80:
	.align	2, 0
.L79:
	.word	gMain
	.word	CB2_EndScriptedWildBattle
	.word	gBattleTypeFlags
	.word	gEnemyParty
.L78:
	ldr	r0, .L81
	cmp	r2, r0
	beq	.L75	@cond_branch
	b	.L76
.L82:
	.align	2, 0
.L81:
	.word	0x193
.L73:
	mov	r0, #0x15
	b	.L72
.L74:
	mov	r0, #0x13
	b	.L72
.L75:
	mov	r0, #0x14
	b	.L72
.L76:
	mov	r0, #0xa
.L72:
	ldr	r1, .L83
	bl	CreateBattleStartTask
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
	pop	{r0}
	bx	r0
.L84:
	.align	2, 0
.L83:
	.word	0x1df
.Lfe16:
	.size	 StartRegiBattle,.Lfe16-StartRegiBattle
	.align	2, 0
	.type	 CB2_EndWildBattle,function
	.thumb_func
CB2_EndWildBattle:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L88
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x0
	mov	r1, #0x80
	bl	ResetOamRange
	ldr	r0, .L88+0x4
	ldrb	r0, [r0]
	bl	IsPlayerDefeated
	cmp	r0, #0x1
	bne	.L86	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L86	@cond_branch
	bl	InBattlePike
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L86	@cond_branch
	ldr	r0, .L88+0x8
	bl	SetMainCallback2
	b	.L87
.L89:
	.align	2, 0
.L88:
	.word	0x1000100
	.word	gBattleOutcome
	.word	CB2_WhiteOut
.L86:
	ldr	r0, .L90
	bl	SetMainCallback2
	ldr	r1, .L90+0x4
	ldr	r0, .L90+0x8
	str	r0, [r1]
.L87:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L91:
	.align	2, 0
.L90:
	.word	CB2_ReturnToField
	.word	gFieldCallback
	.word	sub_80AF6F0
.Lfe17:
	.size	 CB2_EndWildBattle,.Lfe17-CB2_EndWildBattle
	.align	2, 0
	.type	 CB2_EndScriptedWildBattle,function
	.thumb_func
CB2_EndScriptedWildBattle:
	push	{lr}
	add	sp, sp, #-0x4
	mov	r1, sp
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	ldr	r2, .L97
	mov	r0, sp
	bl	CpuSet
	mov	r0, #0x0
	mov	r1, #0x80
	bl	ResetOamRange
	ldr	r0, .L97+0x4
	ldrb	r0, [r0]
	bl	IsPlayerDefeated
	cmp	r0, #0x1
	bne	.L93	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L94	@cond_branch
	ldr	r0, .L97+0x8
	bl	SetMainCallback2
	b	.L96
.L98:
	.align	2, 0
.L97:
	.word	0x1000100
	.word	gBattleOutcome
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L94:
	ldr	r0, .L99
	bl	SetMainCallback2
	b	.L96
.L100:
	.align	2, 0
.L99:
	.word	CB2_WhiteOut
.L93:
	ldr	r0, .L101
	bl	SetMainCallback2
.L96:
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L102:
	.align	2, 0
.L101:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe18:
	.size	 CB2_EndScriptedWildBattle,.Lfe18-CB2_EndScriptedWildBattle
	.align	2, 0
	.globl	BattleSetup_GetTerrainId
	.type	 BattleSetup_GetTerrainId,function
	.thumb_func
BattleSetup_GetTerrainId:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	MetatileBehavior_IsTallGrass
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L104	@cond_branch
	mov	r0, #0x0
	b	.L129
.L104:
	add	r0, r4, #0
	bl	MetatileBehavior_IsLongGrass
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L105	@cond_branch
	mov	r0, #0x1
	b	.L129
.L105:
	add	r0, r4, #0
	bl	MetatileBehavior_IsSandOrDeepSand
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L128	@cond_branch
	ldr	r0, .L134
	ldrb	r0, [r0, #0x17]
	sub	r0, r0, #0x1
	cmp	r0, #0x8
	bhi	.L107	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L134+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L135:
	.align	2, 0
.L134:
	.word	gMapHeader
	.word	.L119
	.align	2, 0
	.align	2, 0
.L119:
	.word	.L107
	.word	.L107
	.word	.L107
	.word	.L111
	.word	.L116
	.word	.L117
	.word	.L107
	.word	.L131
	.word	.L131
.L111:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	MetatileBehavior_IsIndoorEncounter
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L112	@cond_branch
.L131:
	mov	r0, #0x8
	b	.L129
.L112:
	add	r0, r4, #0
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L130	@cond_branch
	mov	r0, #0x7
	b	.L129
.L116:
	mov	r0, #0x3
	b	.L129
.L117:
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L132	@cond_branch
	b	.L133
.L107:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	MetatileBehavior_IsDeepOrOceanWater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L132	@cond_branch
	add	r0, r4, #0
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L130	@cond_branch
	add	r0, r4, #0
	bl	MetatileBehavior_IsMountain
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L123	@cond_branch
	mov	r0, #0x6
	b	.L129
.L123:
	mov	r0, #0x8
	bl	TestPlayerAvatarFlags
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L124	@cond_branch
	add	r0, r4, #0
	bl	MetatileBehavior_GetBridgeType
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L125	@cond_branch
.L130:
	mov	r0, #0x5
	b	.L129
.L125:
	add	r0, r4, #0
	bl	MetatileBehavior_IsBridge
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L124	@cond_branch
.L132:
	mov	r0, #0x4
	b	.L129
.L124:
	ldr	r0, .L136
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xe0
	lsl	r0, r0, #0x5
	cmp	r1, r0
	beq	.L128	@cond_branch
	bl	GetSav1Weather
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x8
	beq	.L128	@cond_branch
.L133:
	mov	r0, #0x9
	b	.L129
.L137:
	.align	2, 0
.L136:
	.word	gSaveBlock1Ptr
.L128:
	mov	r0, #0x2
.L129:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 BattleSetup_GetTerrainId,.Lfe19-BattleSetup_GetTerrainId
	.align	2, 0
	.type	 GetBattleTransitionTypeByMap,function
	.thumb_func
GetBattleTransitionTypeByMap:
	push	{r4, lr}
	add	sp, sp, #-0x4
	mov	r4, sp
	add	r4, r4, #0x2
	mov	r0, sp
	add	r1, r4, #0
	bl	PlayerGetDestCoords
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	mov	r2, #0x0
	ldrsh	r1, [r4, r2]
	bl	MapGridGetMetatileBehaviorAt
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	bl	Overworld_GetFlashLevel
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L139	@cond_branch
	mov	r0, #0x2
	b	.L146
.L139:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	MetatileBehavior_IsSurfableWaterOrUnderwater
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L140	@cond_branch
	ldr	r0, .L147
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x4
	beq	.L142	@cond_branch
	cmp	r0, #0x5
	beq	.L143	@cond_branch
	mov	r0, #0x0
	b	.L146
.L148:
	.align	2, 0
.L147:
	.word	gMapHeader
.L142:
	mov	r0, #0x1
	b	.L146
.L143:
.L140:
	mov	r0, #0x3
.L146:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 GetBattleTransitionTypeByMap,.Lfe20-GetBattleTransitionTypeByMap
	.align	2, 0
	.type	 GetSumOfPlayerPartyLevel,function
	.thumb_func
GetSumOfPlayerPartyLevel:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r7, #0x0
	mov	r6, #0x0
.L153:
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	ldr	r0, .L157
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	add	r1, r0, #0
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r1, r0
	beq	.L152	@cond_branch
	cmp	r1, #0
	beq	.L152	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L152	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x38
	bl	GetMonData
	add	r0, r7, r0
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L151	@cond_branch
.L152:
	add	r6, r6, #0x1
	cmp	r6, #0x5
	ble	.L153	@cond_branch
.L151:
	add	r0, r7, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L158:
	.align	2, 0
.L157:
	.word	gPlayerParty
.Lfe21:
	.size	 GetSumOfPlayerPartyLevel,.Lfe21-GetSumOfPlayerPartyLevel
	.align	2, 0
	.type	 GetSumOfEnemyPartyLevel,function
	.thumb_func
GetSumOfEnemyPartyLevel:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	ldr	r5, .L189
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r2, r1, r5
	add	r0, r2, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, r4
	bcs	.L160	@cond_branch
	add	r4, r0, #0
.L160:
	mov	r3, #0x0
	ldrb	r0, [r2]
	cmp	r0, #0x1
	beq	.L168	@cond_branch
	cmp	r0, #0x1
	bgt	.L188	@cond_branch
	cmp	r0, #0
	beq	.L162	@cond_branch
	b	.L161
.L190:
	.align	2, 0
.L189:
	.word	gTrainers
.L188:
	cmp	r0, #0x2
	beq	.L174	@cond_branch
	cmp	r0, #0x3
	beq	.L180	@cond_branch
	b	.L161
.L162:
	add	r0, r5, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	mov	r2, #0x0
	cmp	r3, r4
	bcs	.L161	@cond_branch
.L166:
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L166	@cond_branch
	b	.L161
.L168:
	add	r0, r5, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	mov	r2, #0x0
	cmp	r3, r4
	bcs	.L161	@cond_branch
.L172:
	lsl	r0, r2, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L172	@cond_branch
	b	.L161
.L174:
	add	r0, r5, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	mov	r2, #0x0
	cmp	r3, r4
	bcs	.L161	@cond_branch
.L178:
	lsl	r0, r2, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L178	@cond_branch
	b	.L161
.L180:
	add	r0, r5, #0
	add	r0, r0, #0x24
	add	r0, r1, r0
	ldr	r1, [r0]
	mov	r2, #0x0
	cmp	r3, r4
	bcs	.L161	@cond_branch
.L184:
	lsl	r0, r2, #0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	add	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, r4
	bcc	.L184	@cond_branch
.L161:
	add	r0, r3, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe22:
	.size	 GetSumOfEnemyPartyLevel,.Lfe22-GetSumOfEnemyPartyLevel
	.align	2, 0
	.type	 GetWildBattleTransition,function
	.thumb_func
GetWildBattleTransition:
	push	{r4, r5, r6, lr}
	bl	GetBattleTransitionTypeByMap
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	ldr	r0, .L200
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetSumOfPlayerPartyLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcs	.L192	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L193	@cond_branch
	mov	r0, #0x0
	b	.L198
.L201:
	.align	2, 0
.L200:
	.word	gEnemyParty
.L193:
	ldr	r0, .L202
	lsl	r1, r5, #0x1
	b	.L199
.L203:
	.align	2, 0
.L202:
	.word	sBattleTransitionTable_Wild
.L192:
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L196	@cond_branch
	ldr	r0, .L204
	lsl	r1, r6, #0x1
	add	r0, r0, #0x1
.L199:
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L198
.L205:
	.align	2, 0
.L204:
	.word	sBattleTransitionTable_Wild
.L196:
	mov	r0, #0xa
.L198:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 GetWildBattleTransition,.Lfe23-GetWildBattleTransition
	.align	2, 0
	.type	 GetTrainerBattleTransition,function
	.thumb_func
GetTrainerBattleTransition:
	push	{r4, r5, r6, lr}
	ldr	r4, .L226
	ldrh	r1, [r4]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L223	@cond_branch
	ldr	r1, .L226+0x4
	ldrh	r2, [r4]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r1, [r0, #0x1]
	cmp	r1, #0x1f
	bne	.L208	@cond_branch
	add	r1, r2, #0
	ldr	r0, .L226+0x8
	cmp	r1, r0
	bne	.L209	@cond_branch
	mov	r0, #0xc
	b	.L222
.L227:
	.align	2, 0
.L226:
	.word	gTrainerBattleOpponent_A
	.word	gTrainers
	.word	0x105
.L209:
	mov	r0, #0x83
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L210	@cond_branch
	mov	r0, #0xd
	b	.L222
.L210:
	ldr	r0, .L228
	cmp	r1, r0
	bne	.L211	@cond_branch
	mov	r0, #0xe
	b	.L222
.L229:
	.align	2, 0
.L228:
	.word	0x107
.L211:
	mov	r0, #0x84
	lsl	r0, r0, #0x1
	cmp	r1, r0
	bne	.L223	@cond_branch
	mov	r0, #0xf
	b	.L222
.L208:
	cmp	r1, #0x26
	bne	.L213	@cond_branch
.L223:
	mov	r0, #0x10
	b	.L222
.L213:
	cmp	r1, #0x9
	beq	.L215	@cond_branch
	cmp	r1, #0x35
	beq	.L215	@cond_branch
	cmp	r1, #0x31
	bne	.L214	@cond_branch
.L215:
	mov	r0, #0x12
	b	.L222
.L214:
	cmp	r1, #0x3
	beq	.L217	@cond_branch
	cmp	r1, #0xd
	beq	.L217	@cond_branch
	cmp	r1, #0xb
	bne	.L216	@cond_branch
.L217:
	mov	r0, #0x11
	b	.L222
.L216:
	ldrb	r0, [r0, #0x18]
	mov	r5, #0x1
	cmp	r0, #0x1
	bne	.L218	@cond_branch
	mov	r5, #0x2
.L218:
	bl	GetBattleTransitionTypeByMap
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldrh	r0, [r4]
	add	r1, r5, #0
	bl	GetSumOfEnemyPartyLevel
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	bl	GetSumOfPlayerPartyLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcc	.L220	@cond_branch
	ldr	r0, .L230
	lsl	r1, r6, #0x1
	add	r0, r0, #0x1
	b	.L225
.L231:
	.align	2, 0
.L230:
	.word	sBattleTransitionTable_Trainer
.L220:
	ldr	r0, .L232
	lsl	r1, r6, #0x1
.L225:
	add	r1, r1, r0
	ldrb	r0, [r1]
.L222:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L233:
	.align	2, 0
.L232:
	.word	sBattleTransitionTable_Trainer
.Lfe24:
	.size	 GetTrainerBattleTransition,.Lfe24-GetTrainerBattleTransition
	.align	2, 0
	.globl	sub_80B100C
	.type	 sub_80B100C,function
	.thumb_func
sub_80B100C:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L267
	mov	r1, #0x38
	bl	GetMonData
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	GetSumOfPlayerPartyLevel
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	bcs	.L235	@cond_branch
	cmp	r5, #0xa
	beq	.L240	@cond_branch
	cmp	r5, #0xa
	bgt	.L244	@cond_branch
	cmp	r5, #0x3
	beq	.L241	@cond_branch
	b	.L236
.L268:
	.align	2, 0
.L267:
	.word	gEnemyParty
.L244:
	cmp	r5, #0xd
	bgt	.L236	@cond_branch
	mov	r0, #0x4
	b	.L257
.L240:
	ldr	r4, .L269
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	b	.L259
.L270:
	.align	2, 0
.L269:
	.word	sUnknown_0854FEA4
.L241:
	ldr	r4, .L271
	bl	Random
	and	r5, r5, r0
	lsl	r0, r5, #0x10
	b	.L261
.L272:
	.align	2, 0
.L271:
	.word	sUnknown_0854FEA7
.L236:
	ldr	r0, .L273
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	beq	.L246	@cond_branch
	ldr	r4, .L273+0x4
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L263
.L274:
	.align	2, 0
.L273:
	.word	0x40ce
	.word	sUnknown_0854FE98
.L235:
	cmp	r5, #0xa
	beq	.L251	@cond_branch
	cmp	r5, #0xa
	bgt	.L255	@cond_branch
	cmp	r5, #0x3
	beq	.L252	@cond_branch
	b	.L247
.L255:
	cmp	r5, #0xd
	bgt	.L247	@cond_branch
	mov	r0, #0x3
	b	.L257
.L251:
	ldr	r4, .L275
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	b	.L259
.L276:
	.align	2, 0
.L275:
	.word	sUnknown_0854FEA4
.L252:
	ldr	r4, .L277
	bl	Random
	and	r5, r5, r0
	lsl	r0, r5, #0x10
	b	.L261
.L278:
	.align	2, 0
.L277:
	.word	sUnknown_0854FEA7
.L247:
	ldr	r0, .L279
	bl	VarGet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	beq	.L246	@cond_branch
	ldr	r4, .L279+0x4
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	b	.L263
.L280:
	.align	2, 0
.L279:
	.word	0x40ce
	.word	sUnknown_0854FE98
.L246:
	ldr	r0, .L281
	ldr	r1, [r0]
	ldr	r2, .L281+0x4
	add	r0, r1, r2
	ldrh	r0, [r0]
	lsl	r2, r0, #0x2
	ldr	r3, .L281+0x8
	add	r1, r1, r3
	add	r2, r1, r2
	lsl	r0, r0, #0x1
	add	r0, r0, #0x1
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	ldrh	r0, [r1]
	ldrh	r2, [r2]
	add	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r4, .L281+0xc
.L263:
	mov	r1, #0xc
.L259:
	bl	__umodsi3
	lsl	r0, r0, #0x10
.L261:
	lsr	r0, r0, #0x10
	add	r0, r0, r4
	ldrb	r0, [r0]
.L257:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L282:
	.align	2, 0
.L281:
	.word	gSaveBlock2Ptr
	.word	0xcb2
	.word	0xcb4
	.word	sUnknown_0854FE98
.Lfe25:
	.size	 sub_80B100C,.Lfe25-sub_80B100C
	.align	2, 0
	.globl	ChooseStarter
	.type	 ChooseStarter,function
	.thumb_func
ChooseStarter:
	push	{lr}
	ldr	r0, .L284
	bl	SetMainCallback2
	ldr	r1, .L284+0x4
	ldr	r0, .L284+0x8
	str	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	CB2_ChooseStarter
	.word	gMain
	.word	CB2_GiveStarter
.Lfe26:
	.size	 ChooseStarter,.Lfe26-ChooseStarter
	.align	2, 0
	.type	 CB2_GiveStarter,function
	.thumb_func
CB2_GiveStarter:
	push	{lr}
	add	sp, sp, #-0x8
	ldr	r0, .L287
	bl	GetVarPointer
	ldr	r2, .L287+0x4
	ldrh	r1, [r2]
	strh	r1, [r0]
	ldrh	r0, [r2]
	bl	GetStarterPokemon
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x0
	str	r1, [sp]
	str	r1, [sp, #0x4]
	mov	r1, #0x5
	mov	r2, #0x0
	mov	r3, #0x0
	bl	ScriptGiveMon
	bl	ResetTasks
	bl	PlayBattleBGM
	ldr	r0, .L287+0x8
	bl	SetMainCallback2
	mov	r0, #0x0
	bl	BattleTransition_Start
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.L288:
	.align	2, 0
.L287:
	.word	0x4023
	.word	gSpecialVar_Result
	.word	CB2_StartFirstBattle
.Lfe27:
	.size	 CB2_GiveStarter,.Lfe27-CB2_GiveStarter
	.align	2, 0
	.type	 CB2_StartFirstBattle,function
	.thumb_func
CB2_StartFirstBattle:
	push	{lr}
	bl	UpdatePaletteFade
	bl	RunTasks
	bl	IsBattleTransitionDone
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L290	@cond_branch
	ldr	r1, .L291
	mov	r0, #0x10
	str	r0, [r1]
	ldr	r1, .L291+0x4
	ldr	r0, .L291+0x8
	str	r0, [r1, #0x8]
	bl	FreeAllWindowBuffers
	ldr	r0, .L291+0xc
	bl	SetMainCallback2
	bl	RestartWildEncounterImmunitySteps
	bl	ClearPoisonStepCounter
	mov	r0, #0x7
	bl	IncrementGameStat
	mov	r0, #0x8
	bl	IncrementGameStat
	bl	IncrementDailyWildBattles
	bl	TryUpdateGymLeaderRematchFromWild
.L290:
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	gBattleTypeFlags
	.word	gMain
	.word	CB2_EndFirstBattle
	.word	CB2_InitBattle
.Lfe28:
	.size	 CB2_StartFirstBattle,.Lfe28-CB2_StartFirstBattle
	.align	2, 0
	.type	 CB2_EndFirstBattle,function
	.thumb_func
CB2_EndFirstBattle:
	push	{lr}
	bl	Overworld_ClearSavedMusic
	ldr	r0, .L294
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L295:
	.align	2, 0
.L294:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe29:
	.size	 CB2_EndFirstBattle,.Lfe29-CB2_EndFirstBattle
	.align	2, 0
	.type	 TryUpdateGymLeaderRematchFromWild,function
	.thumb_func
TryUpdateGymLeaderRematchFromWild:
	push	{lr}
	mov	r0, #0x8
	bl	GetGameStat
	mov	r1, #0x3c
	bl	__umodsi3
	cmp	r0, #0
	bne	.L297	@cond_branch
	bl	UpdateGymLeaderRematch
.L297:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 TryUpdateGymLeaderRematchFromWild,.Lfe30-TryUpdateGymLeaderRematchFromWild
	.align	2, 0
	.type	 TryUpdateGymLeaderRematchFromTrainer,function
	.thumb_func
TryUpdateGymLeaderRematchFromTrainer:
	push	{lr}
	mov	r0, #0x9
	bl	GetGameStat
	mov	r1, #0x14
	bl	__umodsi3
	cmp	r0, #0
	bne	.L299	@cond_branch
	bl	UpdateGymLeaderRematch
.L299:
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 TryUpdateGymLeaderRematchFromTrainer,.Lfe31-TryUpdateGymLeaderRematchFromTrainer
	.align	2, 0
	.type	 TrainerBattleLoadArg32,function
	.thumb_func
TrainerBattleLoadArg32:
	add	r2, r0, #0
	ldrb	r0, [r2]
	ldrb	r1, [r2, #0x1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x2]
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	ldrb	r1, [r2, #0x3]
	lsl	r1, r1, #0x18
	orr	r0, r0, r1
	bx	lr
.Lfe32:
	.size	 TrainerBattleLoadArg32,.Lfe32-TrainerBattleLoadArg32
	.align	2, 0
	.type	 TrainerBattleLoadArg16,function
	.thumb_func
TrainerBattleLoadArg16:
	add	r1, r0, #0
	ldrb	r0, [r1]
	ldrb	r1, [r1, #0x1]
	lsl	r1, r1, #0x8
	orr	r0, r0, r1
	bx	lr
.Lfe33:
	.size	 TrainerBattleLoadArg16,.Lfe33-TrainerBattleLoadArg16
	.align	2, 0
	.type	 TrainerBattleLoadArg8,function
	.thumb_func
TrainerBattleLoadArg8:
	ldrb	r0, [r0]
	bx	lr
.Lfe34:
	.size	 TrainerBattleLoadArg8,.Lfe34-TrainerBattleLoadArg8
	.align	2, 0
	.type	 GetTrainerAFlag,function
	.thumb_func
GetTrainerAFlag:
	ldr	r1, .L304
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bx	lr
.L305:
	.align	2, 0
.L304:
	.word	gTrainerBattleOpponent_A
.Lfe35:
	.size	 GetTrainerAFlag,.Lfe35-GetTrainerAFlag
	.align	2, 0
	.type	 GetTrainerBFlag,function
	.thumb_func
GetTrainerBFlag:
	ldr	r1, .L307
	mov	r2, #0xa0
	lsl	r2, r2, #0x3
	add	r0, r2, #0
	ldrh	r1, [r1]
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bx	lr
.L308:
	.align	2, 0
.L307:
	.word	gTrainerBattleOpponent_B
.Lfe36:
	.size	 GetTrainerBFlag,.Lfe36-GetTrainerBFlag
	.align	2, 0
	.type	 IsPlayerDefeated,function
	.thumb_func
IsPlayerDefeated:
	push	{lr}
	sub	r0, r0, #0x1
	cmp	r0, #0x6
	bhi	.L318	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L321
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L322:
	.align	2, 0
.L321:
	.word	.L319
	.align	2, 0
	.align	2, 0
.L319:
	.word	.L317
	.word	.L312
	.word	.L312
	.word	.L317
	.word	.L317
	.word	.L317
	.word	.L317
.L312:
	mov	r0, #0x1
	b	.L320
.L317:
.L318:
	mov	r0, #0x0
.L320:
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 IsPlayerDefeated,.Lfe37-IsPlayerDefeated
	.align	2, 0
	.globl	ResetTrainerOpponentIds
	.type	 ResetTrainerOpponentIds,function
	.thumb_func
ResetTrainerOpponentIds:
	ldr	r0, .L324
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L324+0x4
	strh	r1, [r0]
	bx	lr
.L325:
	.align	2, 0
.L324:
	.word	gTrainerBattleOpponent_A
	.word	gTrainerBattleOpponent_B
.Lfe38:
	.size	 ResetTrainerOpponentIds,.Lfe38-ResetTrainerOpponentIds
	.align	2, 0
	.type	 InitTrainerBattleVariables,function
	.thumb_func
InitTrainerBattleVariables:
	push	{lr}
	ldr	r0, .L330
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L330+0x4
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L327	@cond_branch
	ldr	r0, .L330+0x8
	str	r1, [r0]
	ldr	r0, .L330+0xc
	str	r1, [r0]
	ldr	r0, .L330+0x10
	b	.L329
.L331:
	.align	2, 0
.L330:
	.word	sTrainerBattleMode
	.word	gApproachingTrainerId
	.word	sTrainerAIntroSpeech
	.word	sTrainerADefeatSpeech
	.word	sTrainerABattleScriptRetAddr
.L327:
	ldr	r0, .L332
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L332+0x4
	str	r1, [r0]
	ldr	r0, .L332+0x8
.L329:
	str	r1, [r0]
	ldr	r1, .L332+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r0, .L332+0x10
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r0, .L332+0x14
	str	r1, [r0]
	ldr	r0, .L332+0x18
	str	r1, [r0]
	pop	{r0}
	bx	r0
.L333:
	.align	2, 0
.L332:
	.word	sTrainerBIntroSpeech
	.word	sTrainerBDefeatSpeech
	.word	sTrainerBBattleScriptRetAddr
	.word	sTrainerObjectEventLocalId
	.word	sTrainerVictorySpeech
	.word	sTrainerCannotBattleSpeech
	.word	sTrainerBattleEndScript
.Lfe39:
	.size	 InitTrainerBattleVariables,.Lfe39-InitTrainerBattleVariables
	.align	2, 0
	.type	 TrainerBattleLoadArgs,function
	.thumb_func
TrainerBattleLoadArgs:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
.L341:
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0x6
	bhi	.L342	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L360
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L361:
	.align	2, 0
.L360:
	.word	.L357
	.align	2, 0
	.align	2, 0
.L357:
	.word	.L343
	.word	.L345
	.word	.L347
	.word	.L349
	.word	.L351
	.word	.L353
	.word	.L338
.L343:
	add	r0, r5, #0
	bl	TrainerBattleLoadArg8
	ldr	r1, [r4]
	strb	r0, [r1]
	add	r5, r5, #0x1
	b	.L342
.L345:
	add	r0, r5, #0
	bl	TrainerBattleLoadArg16
	ldr	r1, [r4]
	strh	r0, [r1]
	add	r5, r5, #0x2
	b	.L342
.L347:
	add	r0, r5, #0
	bl	TrainerBattleLoadArg32
	ldr	r1, [r4]
	str	r0, [r1]
	add	r5, r5, #0x4
	b	.L342
.L349:
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1]
	b	.L342
.L351:
	ldr	r1, [r4]
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L342
.L353:
	ldr	r1, [r4]
	mov	r0, #0x0
	str	r0, [r1]
.L342:
	add	r4, r4, #0x8
	b	.L341
.L338:
	ldr	r0, [r4]
	str	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe40:
	.size	 TrainerBattleLoadArgs,.Lfe40-TrainerBattleLoadArgs
	.align	2, 0
	.globl	SetMapVarsToTrainer
	.type	 SetMapVarsToTrainer,function
	.thumb_func
SetMapVarsToTrainer:
	push	{lr}
	ldr	r0, .L364
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L363	@cond_branch
	ldr	r0, .L364+0x4
	strh	r1, [r0]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L364+0x8
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	GetObjectEventIdByLocalIdAndMap
	ldr	r1, .L364+0xc
	strb	r0, [r1]
.L363:
	pop	{r0}
	bx	r0
.L365:
	.align	2, 0
.L364:
	.word	sTrainerObjectEventLocalId
	.word	gSpecialVar_LastTalked
	.word	gSaveBlock1Ptr
	.word	gSelectedObjectEvent
.Lfe41:
	.size	 SetMapVarsToTrainer,.Lfe41-SetMapVarsToTrainer
	.align	2, 0
	.globl	BattleSetup_ConfigureTrainerBattle
	.type	 BattleSetup_ConfigureTrainerBattle,function
	.thumb_func
BattleSetup_ConfigureTrainerBattle:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	InitTrainerBattleVariables
	ldr	r4, .L399
	add	r0, r5, #0
	bl	TrainerBattleLoadArg8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	ldrh	r0, [r4]
	sub	r0, r0, #0x1
	cmp	r0, #0xb
	bls	.LCB2532
	b	.L386	@long jump
.LCB2532:
	lsl	r0, r0, #0x2
	ldr	r1, .L399+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L400:
	.align	2, 0
.L399:
	.word	sTrainerBattleMode
	.word	.L389
	.align	2, 0
	.align	2, 0
.L389:
	.word	.L373
	.word	.L370
	.word	.L368
	.word	.L369
	.word	.L377
	.word	.L375
	.word	.L376
	.word	.L375
	.word	.L378
	.word	.L381
	.word	.L382
	.word	.L383
.L368:
	ldr	r0, .L401
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	ldr	r0, .L401+0x4
	b	.L390
.L402:
	.align	2, 0
.L401:
	.word	sOrdinaryNoIntroBattleParams
	.word	EventScript_DoNoIntroTrainerBattle
.L369:
	ldr	r0, .L403
	b	.L391
.L404:
	.align	2, 0
.L403:
	.word	sDoubleBattleParams
.L370:
	ldr	r0, .L405
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L371	@cond_branch
	ldr	r0, .L405+0x4
	b	.L392
.L406:
	.align	2, 0
.L405:
	.word	gApproachingTrainerId
	.word	sContinueScriptBattleParams
.L371:
	ldr	r0, .L407
	b	.L397
.L408:
	.align	2, 0
.L407:
	.word	sTrainerBContinueScriptBattleParams
.L373:
	ldr	r0, .L409
	b	.L392
.L410:
	.align	2, 0
.L409:
	.word	sContinueScriptBattleParams
.L375:
	ldr	r0, .L411
.L391:
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r0, .L411+0x4
	b	.L390
.L412:
	.align	2, 0
.L411:
	.word	sContinueScriptDoubleBattleParams
	.word	EventScript_TryDoDoubleTrainerBattle
.L376:
	ldr	r0, .L413
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r4, .L413+0x4
	ldrh	r0, [r4]
	bl	GetRematchTrainerId
	strh	r0, [r4]
	ldr	r0, .L413+0x8
	b	.L390
.L414:
	.align	2, 0
.L413:
	.word	sDoubleBattleParams
	.word	gTrainerBattleOpponent_A
	.word	EventScript_TryDoDoubleRematchBattle
.L377:
	ldr	r0, .L415
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r4, .L415+0x4
	ldrh	r0, [r4]
	bl	GetRematchTrainerId
	strh	r0, [r4]
	ldr	r0, .L415+0x8
	b	.L390
.L416:
	.align	2, 0
.L415:
	.word	sOrdinaryBattleParams
	.word	gTrainerBattleOpponent_A
	.word	EventScript_TryDoRematchBattle
.L378:
	ldr	r0, .L417
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L379	@cond_branch
	ldr	r0, .L417+0x4
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r0, .L417+0x8
	ldrb	r0, [r0]
	bl	LocalIdToPyramidTrainerId
	ldr	r1, .L417+0xc
	b	.L393
.L418:
	.align	2, 0
.L417:
	.word	gApproachingTrainerId
	.word	sOrdinaryBattleParams
	.word	gSpecialVar_LastTalked
	.word	gTrainerBattleOpponent_A
.L379:
	ldr	r0, .L419
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	ldr	r0, .L419+0x4
	ldrb	r0, [r0]
	bl	LocalIdToPyramidTrainerId
.L398:
	ldr	r1, .L419+0x8
.L393:
	strh	r0, [r1]
	b	.L388
.L420:
	.align	2, 0
.L419:
	.word	sTrainerBOrdinaryBattleParams
	.word	gSpecialVar_LastTalked
	.word	gTrainerBattleOpponent_B
.L381:
	ldr	r0, .L421
	b	.L394
.L422:
	.align	2, 0
.L421:
	.word	sOrdinaryBattleParams
.L382:
	ldr	r0, .L423
.L394:
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	mov	r0, #0x0
	b	.L390
.L424:
	.align	2, 0
.L423:
	.word	sTrainerBOrdinaryBattleParams
.L383:
	ldr	r0, .L425
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L384	@cond_branch
	ldr	r0, .L425+0x4
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	ldr	r0, .L425+0x8
	ldrb	r0, [r0]
	bl	LocalIdToHillTrainerId
	ldr	r1, .L425+0xc
	b	.L393
.L426:
	.align	2, 0
.L425:
	.word	gApproachingTrainerId
	.word	sOrdinaryBattleParams
	.word	gSpecialVar_LastTalked
	.word	gTrainerBattleOpponent_A
.L384:
	ldr	r0, .L427
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	ldr	r0, .L427+0x4
	ldrb	r0, [r0]
	bl	LocalIdToHillTrainerId
	b	.L398
.L428:
	.align	2, 0
.L427:
	.word	sTrainerBOrdinaryBattleParams
	.word	gSpecialVar_LastTalked
.L386:
	ldr	r0, .L429
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L387	@cond_branch
	ldr	r0, .L429+0x4
.L392:
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
	bl	SetMapVarsToTrainer
	b	.L388
.L430:
	.align	2, 0
.L429:
	.word	gApproachingTrainerId
	.word	sOrdinaryBattleParams
.L387:
	ldr	r0, .L431
.L397:
	add	r1, r5, #0
	bl	TrainerBattleLoadArgs
.L388:
	ldr	r0, .L431+0x4
.L390:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L432:
	.align	2, 0
.L431:
	.word	sTrainerBOrdinaryBattleParams
	.word	EventScript_TryDoNormalTrainerBattle
.Lfe42:
	.size	 BattleSetup_ConfigureTrainerBattle,.Lfe42-BattleSetup_ConfigureTrainerBattle
	.align	2, 0
	.globl	ConfigureAndSetUpOneTrainerBattle
	.type	 ConfigureAndSetUpOneTrainerBattle,function
	.thumb_func
ConfigureAndSetUpOneTrainerBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L434
	strb	r0, [r2]
	ldr	r4, .L434+0x4
	ldr	r3, .L434+0x8
	lsl	r2, r0, #0x3
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r0, [r2, #0x8]
	strh	r0, [r4]
	add	r1, r1, #0x1
	add	r0, r1, #0
	bl	BattleSetup_ConfigureTrainerBattle
	ldr	r0, .L434+0xc
	bl	ScriptContext1_SetupScript
	bl	ScriptContext2_Enable
	pop	{r4}
	pop	{r0}
	bx	r0
.L435:
	.align	2, 0
.L434:
	.word	gSelectedObjectEvent
	.word	gSpecialVar_LastTalked
	.word	gObjectEvents
	.word	EventScript_271354
.Lfe43:
	.size	 ConfigureAndSetUpOneTrainerBattle,.Lfe43-ConfigureAndSetUpOneTrainerBattle
	.align	2, 0
	.globl	ConfigureTwoTrainersBattle
	.type	 ConfigureTwoTrainersBattle,function
	.thumb_func
ConfigureTwoTrainersBattle:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L437
	strb	r0, [r2]
	ldr	r4, .L437+0x4
	ldr	r3, .L437+0x8
	lsl	r2, r0, #0x3
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r0, [r2, #0x8]
	strh	r0, [r4]
	add	r1, r1, #0x1
	add	r0, r1, #0
	bl	BattleSetup_ConfigureTrainerBattle
	pop	{r4}
	pop	{r0}
	bx	r0
.L438:
	.align	2, 0
.L437:
	.word	gSelectedObjectEvent
	.word	gSpecialVar_LastTalked
	.word	gObjectEvents
.Lfe44:
	.size	 ConfigureTwoTrainersBattle,.Lfe44-ConfigureTwoTrainersBattle
	.align	2, 0
	.globl	SetUpTwoTrainersBattle
	.type	 SetUpTwoTrainersBattle,function
	.thumb_func
SetUpTwoTrainersBattle:
	push	{lr}
	ldr	r0, .L440
	bl	ScriptContext1_SetupScript
	bl	ScriptContext2_Enable
	pop	{r0}
	bx	r0
.L441:
	.align	2, 0
.L440:
	.word	EventScript_271354
.Lfe45:
	.size	 SetUpTwoTrainersBattle,.Lfe45-SetUpTwoTrainersBattle
	.align	2, 0
	.globl	GetTrainerFlagFromScriptPointer
	.type	 GetTrainerFlagFromScriptPointer,function
	.thumb_func
GetTrainerFlagFromScriptPointer:
	push	{lr}
	add	r0, r0, #0x2
	bl	TrainerBattleLoadArg16
	lsl	r0, r0, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe46:
	.size	 GetTrainerFlagFromScriptPointer,.Lfe46-GetTrainerFlagFromScriptPointer
	.align	2, 0
	.globl	SetUpTrainerMovement
	.type	 SetUpTrainerMovement,function
	.thumb_func
SetUpTrainerMovement:
	push	{r4, lr}
	ldr	r0, .L444
	ldrb	r0, [r0]
	lsl	r4, r0, #0x3
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	ldr	r0, .L444+0x4
	add	r4, r4, r0
	ldrb	r0, [r4, #0x18]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1c
	bl	GetTrainerFacingDirectionMovementType
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r4, #0
	bl	SetTrainerMovementType
	pop	{r4}
	pop	{r0}
	bx	r0
.L445:
	.align	2, 0
.L444:
	.word	gSelectedObjectEvent
	.word	gObjectEvents
.Lfe47:
	.size	 SetUpTrainerMovement,.Lfe47-SetUpTrainerMovement
	.align	2, 0
	.globl	GetTrainerBattleMode
	.type	 GetTrainerBattleMode,function
	.thumb_func
GetTrainerBattleMode:
	ldr	r0, .L447
	ldrb	r0, [r0]
	bx	lr
.L448:
	.align	2, 0
.L447:
	.word	sTrainerBattleMode
.Lfe48:
	.size	 GetTrainerBattleMode,.Lfe48-GetTrainerBattleMode
	.align	2, 0
	.globl	GetTrainerFlag
	.type	 GetTrainerFlag,function
	.thumb_func
GetTrainerFlag:
	push	{lr}
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L450	@cond_branch
	ldr	r0, .L458
	ldrb	r0, [r0]
	bl	GetBattlePyramidTrainerFlag
	b	.L456
.L459:
	.align	2, 0
.L458:
	.word	gSelectedObjectEvent
.L450:
	bl	InTrainerHill
	cmp	r0, #0
	bne	.L452	@cond_branch
	bl	GetTrainerAFlag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	b	.L456
.L452:
	ldr	r0, .L460
	ldrb	r0, [r0]
	bl	GetHillTrainerFlag
.L456:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L461:
	.align	2, 0
.L460:
	.word	gSelectedObjectEvent
.Lfe49:
	.size	 GetTrainerFlag,.Lfe49-GetTrainerFlag
	.align	2, 0
	.type	 SetBattledTrainersFlags,function
	.thumb_func
SetBattledTrainersFlags:
	push	{lr}
	ldr	r0, .L464
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L463	@cond_branch
	bl	GetTrainerBFlag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
.L463:
	bl	GetTrainerAFlag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
	pop	{r0}
	bx	r0
.L465:
	.align	2, 0
.L464:
	.word	gTrainerBattleOpponent_B
.Lfe50:
	.size	 SetBattledTrainersFlags,.Lfe50-SetBattledTrainersFlags
	.align	2, 0
	.type	 SetBattledTrainerFlag,function
	.thumb_func
SetBattledTrainerFlag:
	push	{lr}
	bl	GetTrainerAFlag
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 SetBattledTrainerFlag,.Lfe51-SetBattledTrainerFlag
	.align	2, 0
	.globl	HasTrainerBeenFought
	.type	 HasTrainerBeenFought,function
	.thumb_func
HasTrainerBeenFought:
	push	{lr}
	lsl	r0, r0, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 HasTrainerBeenFought,.Lfe52-HasTrainerBeenFought
	.align	2, 0
	.globl	SetTrainerFlag
	.type	 SetTrainerFlag,function
	.thumb_func
SetTrainerFlag:
	push	{lr}
	lsl	r0, r0, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagSet
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 SetTrainerFlag,.Lfe53-SetTrainerFlag
	.align	2, 0
	.globl	ClearTrainerFlag
	.type	 ClearTrainerFlag,function
	.thumb_func
ClearTrainerFlag:
	push	{lr}
	lsl	r0, r0, #0x10
	mov	r1, #0xa0
	lsl	r1, r1, #0x13
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	bl	FlagClear
	pop	{r0}
	bx	r0
.Lfe54:
	.size	 ClearTrainerFlag,.Lfe54-ClearTrainerFlag
	.align	2, 0
	.globl	BattleSetup_StartTrainerBattle
	.type	 BattleSetup_StartTrainerBattle,function
	.thumb_func
BattleSetup_StartTrainerBattle:
	push	{r4, lr}
	ldr	r0, .L484
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L471	@cond_branch
	ldr	r1, .L484+0x4
	ldr	r0, .L484+0x8
	b	.L483
.L485:
	.align	2, 0
.L484:
	.word	gNoOfApproachingTrainers
	.word	gBattleTypeFlags
	.word	0x8009
.L471:
	ldr	r1, .L486
	mov	r0, #0x8
.L483:
	str	r0, [r1]
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L473	@cond_branch
	ldr	r0, .L486+0x4
	mov	r1, #0x0
	bl	VarSet
	ldr	r2, .L486
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0xe
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L486+0x8
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L474	@cond_branch
	mov	r0, #0x1
	bl	FillFrontierTrainersParties
	ldr	r4, .L486+0xc
	add	r0, r4, #0
	bl	ZeroMonData
	add	r0, r4, #0
	add	r0, r0, #0x64
	bl	ZeroMonData
	mov	r1, #0x96
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	ZeroMonData
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	ZeroMonData
	b	.L475
.L487:
	.align	2, 0
.L486:
	.word	gBattleTypeFlags
	.word	0x400e
	.word	gNoOfApproachingTrainers
	.word	gEnemyParty+0x64
.L474:
	mov	r0, #0x1
	bl	FillFrontierTrainerParty
	ldr	r4, .L488
	add	r0, r4, #0
	bl	ZeroMonData
	add	r4, r4, #0x64
	add	r0, r4, #0
	bl	ZeroMonData
.L475:
	bl	MarkApproachingPyramidTrainersAsBattled
	b	.L476
.L489:
	.align	2, 0
.L488:
	.word	gEnemyParty+0x64
.L473:
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L476	@cond_branch
	ldr	r2, .L490
	ldr	r0, [r2]
	mov	r1, #0x80
	lsl	r1, r1, #0x13
	orr	r0, r0, r1
	str	r0, [r2]
	ldr	r0, .L490+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x2
	bne	.L478	@cond_branch
	bl	FillHillTrainersParties
	b	.L479
.L491:
	.align	2, 0
.L490:
	.word	gBattleTypeFlags
	.word	gNoOfApproachingTrainers
.L478:
	bl	FillHillTrainerParty
.L479:
	bl	SetHillTrainerFlag
.L476:
	ldr	r1, .L492
	ldr	r2, .L492+0x4
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r1, #0x0
	strb	r1, [r2]
	ldr	r0, .L492+0x8
	strb	r1, [r0]
	ldr	r1, .L492+0xc
	mov	r0, #0x0
	strh	r0, [r1]
	ldr	r1, .L492+0x10
	ldr	r0, .L492+0x14
	str	r0, [r1, #0x8]
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L481	@cond_branch
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L480	@cond_branch
.L481:
	bl	sub_80B0828
	b	.L482
.L493:
	.align	2, 0
.L492:
	.word	sNoOfPossibleTrainerRetScripts
	.word	gNoOfApproachingTrainers
	.word	sShouldCheckTrainerBScript
	.word	gWhichTrainerToFaceAfterBattle
	.word	gMain
	.word	CB2_EndTrainerBattle
.L480:
	bl	DoTrainerBattle
.L482:
	bl	ScriptContext1_Stop
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 BattleSetup_StartTrainerBattle,.Lfe55-BattleSetup_StartTrainerBattle
	.align	2, 0
	.type	 CB2_EndTrainerBattle,function
	.thumb_func
CB2_EndTrainerBattle:
	push	{lr}
	ldr	r0, .L503
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	beq	.L499	@cond_branch
	ldr	r0, .L503+0x4
	ldrb	r0, [r0]
	bl	IsPlayerDefeated
	cmp	r0, #0x1
	bne	.L497	@cond_branch
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L499	@cond_branch
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L498	@cond_branch
.L499:
	ldr	r0, .L503+0x8
	bl	SetMainCallback2
	b	.L496
.L504:
	.align	2, 0
.L503:
	.word	gTrainerBattleOpponent_A
	.word	gBattleOutcome
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L498:
	ldr	r0, .L505
	bl	SetMainCallback2
	b	.L496
.L506:
	.align	2, 0
.L505:
	.word	CB2_WhiteOut
.L497:
	ldr	r0, .L507
	bl	SetMainCallback2
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L496	@cond_branch
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L496	@cond_branch
	bl	RegisterTrainerInMatchCall
	bl	SetBattledTrainersFlags
.L496:
	pop	{r0}
	bx	r0
.L508:
	.align	2, 0
.L507:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe56:
	.size	 CB2_EndTrainerBattle,.Lfe56-CB2_EndTrainerBattle
	.align	2, 0
	.type	 CB2_EndRematchBattle,function
	.thumb_func
CB2_EndRematchBattle:
	push	{lr}
	ldr	r0, .L514
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L510	@cond_branch
	ldr	r0, .L514+0x4
	bl	SetMainCallback2
	b	.L511
.L515:
	.align	2, 0
.L514:
	.word	gTrainerBattleOpponent_A
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.L510:
	ldr	r0, .L516
	ldrb	r0, [r0]
	bl	IsPlayerDefeated
	cmp	r0, #0x1
	bne	.L512	@cond_branch
	ldr	r0, .L516+0x4
	bl	SetMainCallback2
	b	.L511
.L517:
	.align	2, 0
.L516:
	.word	gBattleOutcome
	.word	CB2_WhiteOut
.L512:
	ldr	r0, .L518
	bl	SetMainCallback2
	bl	RegisterTrainerInMatchCall
	bl	SetBattledTrainersFlags
	bl	HandleRematchVarsOnBattleEnd
.L511:
	pop	{r0}
	bx	r0
.L519:
	.align	2, 0
.L518:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe57:
	.size	 CB2_EndRematchBattle,.Lfe57-CB2_EndRematchBattle
	.align	2, 0
	.globl	BattleSetup_StartRematchBattle
	.type	 BattleSetup_StartRematchBattle,function
	.thumb_func
BattleSetup_StartRematchBattle:
	push	{lr}
	ldr	r1, .L521
	mov	r0, #0x8
	str	r0, [r1]
	ldr	r1, .L521+0x4
	ldr	r0, .L521+0x8
	str	r0, [r1, #0x8]
	bl	DoTrainerBattle
	bl	ScriptContext1_Stop
	pop	{r0}
	bx	r0
.L522:
	.align	2, 0
.L521:
	.word	gBattleTypeFlags
	.word	gMain
	.word	CB2_EndRematchBattle
.Lfe58:
	.size	 BattleSetup_StartRematchBattle,.Lfe58-BattleSetup_StartRematchBattle
	.align	2, 0
	.globl	ShowTrainerIntroSpeech
	.type	 ShowTrainerIntroSpeech,function
	.thumb_func
ShowTrainerIntroSpeech:
	push	{lr}
	bl	InBattlePyramid
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L524	@cond_branch
	ldr	r0, .L533
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L525	@cond_branch
	ldr	r0, .L533+0x4
	ldrb	r0, [r0]
	bl	LocalIdToPyramidTrainerId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CopyPyramidTrainerSpeechBefore
	b	.L530
.L534:
	.align	2, 0
.L533:
	.word	gNoOfApproachingTrainers
	.word	gSpecialVar_LastTalked
.L525:
	ldr	r3, .L535
	ldr	r2, .L535+0x4
	ldr	r0, .L535+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x8]
	bl	LocalIdToPyramidTrainerId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	CopyPyramidTrainerSpeechBefore
	b	.L532
.L536:
	.align	2, 0
.L535:
	.word	gObjectEvents
	.word	gApproachingTrainers
	.word	gApproachingTrainerId
.L524:
	bl	InTrainerHillChallenge
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L528	@cond_branch
	ldr	r0, .L537
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L529	@cond_branch
	ldr	r0, .L537+0x4
	ldrb	r0, [r0]
	bl	LocalIdToHillTrainerId
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x2
	bl	CopyTrainerHillTrainerText
	b	.L530
.L538:
	.align	2, 0
.L537:
	.word	gNoOfApproachingTrainers
	.word	gSpecialVar_LastTalked
.L529:
	ldr	r3, .L539
	ldr	r2, .L539+0x4
	ldr	r0, .L539+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x3
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x8]
	bl	LocalIdToHillTrainerId
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x2
	bl	CopyTrainerHillTrainerText
.L532:
.L530:
	bl	ShowFieldMessageFromBuffer
	b	.L527
.L540:
	.align	2, 0
.L539:
	.word	gObjectEvents
	.word	gApproachingTrainers
	.word	gApproachingTrainerId
.L528:
	bl	GetIntroSpeechOfApproachingTrainer
	bl	ShowFieldMessage
.L527:
	pop	{r0}
	bx	r0
.Lfe59:
	.size	 ShowTrainerIntroSpeech,.Lfe59-ShowTrainerIntroSpeech
	.align	2, 0
	.globl	BattleSetup_GetScriptAddrAfterBattle
	.type	 BattleSetup_GetScriptAddrAfterBattle,function
	.thumb_func
BattleSetup_GetScriptAddrAfterBattle:
	push	{lr}
	ldr	r0, .L545
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L544	@cond_branch
	ldr	r0, .L545+0x4
.L544:
	pop	{r1}
	bx	r1
.L546:
	.align	2, 0
.L545:
	.word	sTrainerBattleEndScript
	.word	EventScript_TestSignpostMsg
.Lfe60:
	.size	 BattleSetup_GetScriptAddrAfterBattle,.Lfe60-BattleSetup_GetScriptAddrAfterBattle
	.align	2, 0
	.globl	BattleSetup_GetTrainerPostBattleScript
	.type	 BattleSetup_GetTrainerPostBattleScript,function
	.thumb_func
BattleSetup_GetTrainerPostBattleScript:
	push	{lr}
	ldr	r1, .L553
	ldrb	r2, [r1]
	cmp	r2, #0
	beq	.L548	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r0, .L553+0x4
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L550	@cond_branch
	ldr	r1, .L553+0x8
	mov	r0, #0x1
	strh	r0, [r1]
	add	r0, r2, #0
	b	.L552
.L554:
	.align	2, 0
.L553:
	.word	sShouldCheckTrainerBScript
	.word	sTrainerBBattleScriptRetAddr
	.word	gWhichTrainerToFaceAfterBattle
.L548:
	ldr	r0, .L555
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L550	@cond_branch
	ldr	r0, .L555+0x4
	strh	r2, [r0]
	add	r0, r1, #0
	b	.L552
.L556:
	.align	2, 0
.L555:
	.word	sTrainerABattleScriptRetAddr
	.word	gWhichTrainerToFaceAfterBattle
.L550:
	ldr	r0, .L557
.L552:
	pop	{r1}
	bx	r1
.L558:
	.align	2, 0
.L557:
	.word	EventScript_TryGetTrainerScript
.Lfe61:
	.size	 BattleSetup_GetTrainerPostBattleScript,.Lfe61-BattleSetup_GetTrainerPostBattleScript
	.align	2, 0
	.globl	ShowTrainerCantBattleSpeech
	.type	 ShowTrainerCantBattleSpeech,function
	.thumb_func
ShowTrainerCantBattleSpeech:
	push	{lr}
	bl	GetTrainerCantBattleSpeech
	bl	ShowFieldMessage
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 ShowTrainerCantBattleSpeech,.Lfe62-ShowTrainerCantBattleSpeech
	.align	2, 0
	.globl	SetUpTrainerEncounterMusic
	.type	 SetUpTrainerEncounterMusic,function
	.thumb_func
SetUpTrainerEncounterMusic:
	push	{lr}
	ldr	r0, .L581
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L561	@cond_branch
	ldr	r0, .L581+0x4
	b	.L580
.L582:
	.align	2, 0
.L581:
	.word	gApproachingTrainerId
	.word	gTrainerBattleOpponent_A
.L561:
	ldr	r0, .L583
.L580:
	ldrh	r1, [r0]
	ldr	r0, .L583+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L563	@cond_branch
	cmp	r0, #0x8
	beq	.L563	@cond_branch
	add	r0, r1, #0
	bl	GetTrainerEncounterMusicId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xd
	bhi	.L578	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L583+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L584:
	.align	2, 0
.L583:
	.word	gTrainerBattleOpponent_B
	.word	sTrainerBattleMode
	.word	.L579
	.align	2, 0
	.align	2, 0
.L579:
	.word	.L565
	.word	.L566
	.word	.L567
	.word	.L578
	.word	.L568
	.word	.L569
	.word	.L570
	.word	.L571
	.word	.L572
	.word	.L573
	.word	.L574
	.word	.L575
	.word	.L576
	.word	.L577
.L565:
	mov	r0, #0xbe
	lsl	r0, r0, #0x1
	b	.L564
.L566:
	ldr	r0, .L585
	b	.L564
.L586:
	.align	2, 0
.L585:
	.word	0x197
.L567:
	ldr	r0, .L587
	b	.L564
.L588:
	.align	2, 0
.L587:
	.word	0x17b
.L568:
	mov	r0, #0xd0
	lsl	r0, r0, #0x1
	b	.L564
.L569:
	ldr	r0, .L589
	b	.L564
.L590:
	.align	2, 0
.L589:
	.word	0x1a1
.L570:
	ldr	r0, .L591
	b	.L564
.L592:
	.align	2, 0
.L591:
	.word	0x1a3
.L571:
	ldr	r0, .L593
	b	.L564
.L594:
	.align	2, 0
.L593:
	.word	0x1b9
.L572:
	ldr	r0, .L595
	b	.L564
.L596:
	.align	2, 0
.L595:
	.word	0x181
.L573:
	ldr	r0, .L597
	b	.L564
.L598:
	.align	2, 0
.L597:
	.word	0x1c1
.L574:
	mov	r0, #0xe1
	lsl	r0, r0, #0x1
	b	.L564
.L575:
	ldr	r0, .L599
	b	.L564
.L600:
	.align	2, 0
.L599:
	.word	0x1c3
.L576:
	ldr	r0, .L601
	b	.L564
.L602:
	.align	2, 0
.L601:
	.word	0x1c5
.L577:
	ldr	r0, .L603
	b	.L564
.L604:
	.align	2, 0
.L603:
	.word	0x18d
.L578:
	ldr	r0, .L605
.L564:
	bl	PlayNewMapMusic
.L563:
	pop	{r0}
	bx	r0
.L606:
	.align	2, 0
.L605:
	.word	0x1a7
.Lfe63:
	.size	 SetUpTrainerEncounterMusic,.Lfe63-SetUpTrainerEncounterMusic
	.align	2, 0
	.type	 ReturnEmptyStringIfNull,function
	.thumb_func
ReturnEmptyStringIfNull:
	push	{lr}
	cmp	r0, #0
	bne	.L610	@cond_branch
	ldr	r0, .L611
.L610:
	pop	{r1}
	bx	r1
.L612:
	.align	2, 0
.L611:
	.word	gText_EmptyString2
.Lfe64:
	.size	 ReturnEmptyStringIfNull,.Lfe64-ReturnEmptyStringIfNull
	.align	2, 0
	.type	 GetIntroSpeechOfApproachingTrainer,function
	.thumb_func
GetIntroSpeechOfApproachingTrainer:
	push	{lr}
	ldr	r0, .L619
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L614	@cond_branch
	ldr	r0, .L619+0x4
	b	.L618
.L620:
	.align	2, 0
.L619:
	.word	gApproachingTrainerId
	.word	sTrainerBIntroSpeech
.L614:
	ldr	r0, .L621
.L618:
	ldr	r0, [r0]
	bl	ReturnEmptyStringIfNull
	pop	{r1}
	bx	r1
.L622:
	.align	2, 0
.L621:
	.word	sTrainerAIntroSpeech
.Lfe65:
	.size	 GetIntroSpeechOfApproachingTrainer,.Lfe65-GetIntroSpeechOfApproachingTrainer
	.align	2, 0
	.globl	GetTrainerALoseText
	.type	 GetTrainerALoseText,function
	.thumb_func
GetTrainerALoseText:
	push	{r4, lr}
	ldr	r0, .L626
	ldrh	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	cmp	r1, r0
	bne	.L624	@cond_branch
	bl	GetSecretBaseTrainerLoseText
	b	.L625
.L627:
	.align	2, 0
.L626:
	.word	gTrainerBattleOpponent_A
.L624:
	ldr	r0, .L628
	ldr	r0, [r0]
.L625:
	ldr	r4, .L628+0x4
	bl	ReturnEmptyStringIfNull
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L629:
	.align	2, 0
.L628:
	.word	sTrainerADefeatSpeech
	.word	gStringVar4
.Lfe66:
	.size	 GetTrainerALoseText,.Lfe66-GetTrainerALoseText
	.align	2, 0
	.globl	GetTrainerBLoseText
	.type	 GetTrainerBLoseText,function
	.thumb_func
GetTrainerBLoseText:
	push	{r4, lr}
	ldr	r4, .L631
	ldr	r0, .L631+0x4
	ldr	r0, [r0]
	bl	ReturnEmptyStringIfNull
	add	r1, r0, #0
	add	r0, r4, #0
	bl	StringExpandPlaceholders
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L632:
	.align	2, 0
.L631:
	.word	gStringVar4
	.word	sTrainerBDefeatSpeech
.Lfe67:
	.size	 GetTrainerBLoseText,.Lfe67-GetTrainerBLoseText
	.align	2, 0
	.globl	GetTrainerWonSpeech
	.type	 GetTrainerWonSpeech,function
	.thumb_func
GetTrainerWonSpeech:
	push	{lr}
	ldr	r0, .L634
	ldr	r0, [r0]
	bl	ReturnEmptyStringIfNull
	pop	{r1}
	bx	r1
.L635:
	.align	2, 0
.L634:
	.word	sTrainerVictorySpeech
.Lfe68:
	.size	 GetTrainerWonSpeech,.Lfe68-GetTrainerWonSpeech
	.align	2, 0
	.type	 GetTrainerCantBattleSpeech,function
	.thumb_func
GetTrainerCantBattleSpeech:
	push	{lr}
	ldr	r0, .L637
	ldr	r0, [r0]
	bl	ReturnEmptyStringIfNull
	pop	{r1}
	bx	r1
.L638:
	.align	2, 0
.L637:
	.word	sTrainerCannotBattleSpeech
.Lfe69:
	.size	 GetTrainerCantBattleSpeech,.Lfe69-GetTrainerCantBattleSpeech
	.align	2, 0
	.type	 FirstBattleTrainerIdToRematchTableId,function
	.thumb_func
FirstBattleTrainerIdToRematchTableId:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r3, #0x0
	add	r2, r0, #0
.L643:
	ldrh	r0, [r2]
	cmp	r0, r1
	bne	.L642	@cond_branch
	add	r0, r3, #0
	b	.L646
.L642:
	add	r2, r2, #0x10
	add	r3, r3, #0x1
	cmp	r3, #0x4d
	ble	.L643	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L646:
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 FirstBattleTrainerIdToRematchTableId,.Lfe70-FirstBattleTrainerIdToRematchTableId
	.align	2, 0
	.type	 TrainerIdToRematchTableId,function
	.thumb_func
TrainerIdToRematchTableId:
	push	{r4, r5, lr}
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r4, #0x0
	add	r2, r0, #0
.L651:
	mov	r1, #0x0
	ldrh	r0, [r2]
	cmp	r0, #0
	beq	.L650	@cond_branch
	mov	r3, #0x0
.L656:
	add	r0, r2, r3
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L654	@cond_branch
	add	r0, r4, #0
	b	.L660
.L654:
	add	r3, r3, #0x2
	add	r1, r1, #0x1
	cmp	r1, #0x4
	bgt	.L650	@cond_branch
	add	r0, r2, r3
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L656	@cond_branch
.L650:
	add	r2, r2, #0x10
	add	r4, r4, #0x1
	cmp	r4, #0x4d
	ble	.L651	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
.L660:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 TrainerIdToRematchTableId,.Lfe71-TrainerIdToRematchTableId
	.align	2, 0
	.type	 sub_80B1D94,function
	.thumb_func
sub_80B1D94:
	push	{lr}
	cmp	r0, #0x48
	ble	.L662	@cond_branch
	mov	r0, #0x1
	b	.L667
.L662:
	cmp	r0, #0x40
	bne	.L664	@cond_branch
	mov	r0, #0x7e
	bl	FlagGet
	mov	r1, #0x0
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L665	@cond_branch
	mov	r1, #0x1
.L665:
	add	r0, r1, #0
	b	.L667
.L664:
	mov	r0, #0x0
.L667:
	pop	{r1}
	bx	r1
.Lfe72:
	.size	 sub_80B1D94,.Lfe72-sub_80B1D94
	.align	2, 0
	.type	 SetRematchIdForTrainer,function
	.thumb_func
SetRematchIdForTrainer:
	push	{r4, r5, r6, lr}
	add	r6, r1, #0
	mov	r5, #0x1
	lsl	r1, r6, #0x4
	add	r1, r1, r0
	add	r4, r1, #0x2
	b	.L669
.L671:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
.L669:
	cmp	r5, #0x4
	bgt	.L670	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L670	@cond_branch
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L671	@cond_branch
.L670:
	ldr	r0, .L676
	ldr	r0, [r0]
	ldr	r1, .L676+0x4
	add	r0, r0, r1
	add	r0, r0, r6
	strb	r5, [r0]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L677:
	.align	2, 0
.L676:
	.word	gSaveBlock1Ptr
	.word	0x9ca
.Lfe73:
	.size	 SetRematchIdForTrainer,.Lfe73-SetRematchIdForTrainer
	.align	2, 0
	.type	 UpdateRandomTrainerRematches,function
	.thumb_func
UpdateRandomTrainerRematches:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r8, r2
	mov	r7, #0x0
	mov	r5, #0x0
	add	r4, r6, #0
	add	r4, r4, #0xa
.L682:
	ldrh	r0, [r4]
	cmp	r0, r9
	bne	.L681	@cond_branch
	ldrh	r0, [r4, #0x2]
	cmp	r0, r8
	bne	.L681	@cond_branch
	add	r0, r5, #0
	bl	sub_80B1D94
	cmp	r0, #0
	bne	.L681	@cond_branch
	ldr	r0, .L689
	ldr	r0, [r0]
	ldr	r1, .L689+0x4
	add	r0, r0, r1
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L688	@cond_branch
	mov	r1, #0xae
	lsl	r1, r1, #0x1
	add	r0, r5, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L681	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1e
	bhi	.L681	@cond_branch
	add	r0, r6, #0
	add	r1, r5, #0
	bl	SetRematchIdForTrainer
.L688:
	mov	r7, #0x1
.L681:
	add	r4, r4, #0x10
	add	r5, r5, #0x1
	cmp	r5, #0x40
	ble	.L682	@cond_branch
	add	r0, r7, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L690:
	.align	2, 0
.L689:
	.word	gSaveBlock1Ptr
	.word	0x9ca
.Lfe74:
	.size	 UpdateRandomTrainerRematches,.Lfe74-UpdateRandomTrainerRematches
	.align	2, 0
	.globl	UpdateRematchIfDefeated
	.type	 UpdateRematchIfDefeated,function
	.thumb_func
UpdateRematchIfDefeated:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L693
	lsl	r0, r4, #0x4
	add	r0, r0, r5
	ldrh	r0, [r0]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L692	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	SetRematchIdForTrainer
.L692:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L694:
	.align	2, 0
.L693:
	.word	gRematchTable
.Lfe75:
	.size	 UpdateRematchIfDefeated,.Lfe75-UpdateRematchIfDefeated
	.align	2, 0
	.type	 DoesSomeoneWantRematchIn_,function
	.thumb_func
DoesSomeoneWantRematchIn_:
	push	{r4, r5, r6, lr}
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0x0
	add	r3, r0, #0
	add	r3, r3, #0xa
	ldr	r5, .L703
.L699:
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L698	@cond_branch
	ldrh	r0, [r3, #0x2]
	cmp	r0, r2
	bne	.L698	@cond_branch
	ldr	r0, [r5]
	ldr	r6, .L703+0x4
	add	r0, r0, r6
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L698	@cond_branch
	mov	r0, #0x1
	b	.L702
.L704:
	.align	2, 0
.L703:
	.word	gSaveBlock1Ptr
	.word	0x9ca
.L698:
	add	r3, r3, #0x10
	add	r1, r1, #0x1
	cmp	r1, #0x4d
	ble	.L699	@cond_branch
	mov	r0, #0x0
.L702:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 DoesSomeoneWantRematchIn_,.Lfe76-DoesSomeoneWantRematchIn_
	.align	2, 0
	.type	 IsRematchTrainerIn_,function
	.thumb_func
IsRematchTrainerIn_:
	push	{r4, lr}
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	mov	r1, #0x0
	add	r3, r0, #0
	add	r3, r3, #0xa
.L709:
	ldrh	r0, [r3]
	cmp	r0, r4
	bne	.L708	@cond_branch
	ldrh	r0, [r3, #0x2]
	cmp	r0, r2
	bne	.L708	@cond_branch
	mov	r0, #0x1
	b	.L712
.L708:
	add	r3, r3, #0x10
	add	r1, r1, #0x1
	cmp	r1, #0x4d
	ble	.L709	@cond_branch
	mov	r0, #0x0
.L712:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 IsRematchTrainerIn_,.Lfe77-IsRematchTrainerIn_
	.align	2, 0
	.type	 IsFirstTrainerIdReadyForRematch,function
	.thumb_func
IsFirstTrainerIdReadyForRematch:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FirstBattleTrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L716	@cond_branch
	cmp	r1, #0x63
	bgt	.L716	@cond_branch
	ldr	r0, .L718
	ldr	r0, [r0]
	ldr	r2, .L718+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L716	@cond_branch
	mov	r0, #0x1
	b	.L717
.L719:
	.align	2, 0
.L718:
	.word	gSaveBlock1Ptr
	.word	0x9ca
.L716:
	mov	r0, #0x0
.L717:
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 IsFirstTrainerIdReadyForRematch,.Lfe78-IsFirstTrainerIdReadyForRematch
	.align	2, 0
	.type	 IsTrainerReadyForRematch_,function
	.thumb_func
IsTrainerReadyForRematch_:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	TrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L723	@cond_branch
	cmp	r1, #0x63
	bgt	.L723	@cond_branch
	ldr	r0, .L725
	ldr	r0, [r0]
	ldr	r2, .L725+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L723	@cond_branch
	mov	r0, #0x1
	b	.L724
.L726:
	.align	2, 0
.L725:
	.word	gSaveBlock1Ptr
	.word	0x9ca
.L723:
	mov	r0, #0x0
.L724:
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 IsTrainerReadyForRematch_,.Lfe79-IsTrainerReadyForRematch_
	.align	2, 0
	.type	 GetRematchTrainerIdFromTable,function
	.thumb_func
GetRematchTrainerIdFromTable:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FirstBattleTrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L728	@cond_branch
	mov	r0, #0x0
	b	.L736
.L737:
	sub	r0, r6, #0x1
	lsl	r0, r0, #0x1
	add	r0, r7, r0
	ldrh	r0, [r0]
	b	.L739
.L738:
	ldrh	r0, [r5]
	b	.L739
.L728:
	lsl	r0, r1, #0x4
	add	r7, r4, r0
	mov	r6, #0x1
	add	r5, r7, #0x2
	add	r4, r5, #0
.L732:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L737	@cond_branch
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L738	@cond_branch
	add	r4, r4, #0x2
	add	r5, r5, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x4
	ble	.L732	@cond_branch
	ldrh	r0, [r7, #0x8]
.L739:
.L736:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 GetRematchTrainerIdFromTable,.Lfe80-GetRematchTrainerIdFromTable
	.align	2, 0
	.type	 GetLastBeatenRematchTrainerIdFromTable,function
	.thumb_func
GetLastBeatenRematchTrainerIdFromTable:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FirstBattleTrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	bne	.L741	@cond_branch
	mov	r0, #0x0
	b	.L749
.L750:
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r6, r0
	ldrh	r0, [r0]
	b	.L752
.L751:
	sub	r0, r5, #0x1
	lsl	r0, r0, #0x1
	add	r0, r6, r0
	ldrh	r0, [r0]
	b	.L752
.L741:
	lsl	r0, r1, #0x4
	add	r6, r4, r0
	mov	r5, #0x1
	add	r4, r6, #0x2
.L745:
	ldrh	r0, [r4]
	cmp	r0, #0
	beq	.L750	@cond_branch
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L751	@cond_branch
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	ble	.L745	@cond_branch
	ldrh	r0, [r6, #0x8]
.L752:
.L749:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe81:
	.size	 GetLastBeatenRematchTrainerIdFromTable,.Lfe81-GetLastBeatenRematchTrainerIdFromTable
	.align	2, 0
	.type	 ClearTrainerWantRematchState,function
	.thumb_func
ClearTrainerWantRematchState:
	push	{lr}
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	TrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L754	@cond_branch
	ldr	r0, .L755
	ldr	r0, [r0]
	ldr	r2, .L755+0x4
	add	r0, r0, r2
	add	r0, r0, r1
	mov	r1, #0x0
	strb	r1, [r0]
.L754:
	pop	{r0}
	bx	r0
.L756:
	.align	2, 0
.L755:
	.word	gSaveBlock1Ptr
	.word	0x9ca
.Lfe82:
	.size	 ClearTrainerWantRematchState,.Lfe82-ClearTrainerWantRematchState
	.align	2, 0
	.type	 GetTrainerMatchCallFlag,function
	.thumb_func
GetTrainerMatchCallFlag:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	mov	r4, #0xae
	lsl	r4, r4, #0x1
	ldr	r2, .L765
.L761:
	ldrh	r0, [r2]
	cmp	r0, r3
	bne	.L760	@cond_branch
	add	r0, r1, r4
	b	.L764
.L766:
	.align	2, 0
.L765:
	.word	gRematchTable
.L760:
	add	r2, r2, #0x10
	add	r1, r1, #0x1
	cmp	r1, #0x4d
	ble	.L761	@cond_branch
	ldr	r0, .L767
.L764:
	pop	{r4}
	pop	{r1}
	bx	r1
.L768:
	.align	2, 0
.L767:
	.word	0xffff
.Lfe83:
	.size	 GetTrainerMatchCallFlag,.Lfe83-GetTrainerMatchCallFlag
	.align	2, 0
	.type	 RegisterTrainerInMatchCall,function
	.thumb_func
RegisterTrainerInMatchCall:
	push	{lr}
	ldr	r0, .L772
	bl	FlagGet
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L770	@cond_branch
	ldr	r0, .L772+0x4
	ldrh	r0, [r0]
	bl	GetTrainerMatchCallFlag
	add	r1, r0, #0
	ldr	r0, .L772+0x8
	cmp	r1, r0
	beq	.L770	@cond_branch
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	bl	FlagSet
.L770:
	pop	{r0}
	bx	r0
.L773:
	.align	2, 0
.L772:
	.word	0x12f
	.word	gTrainerBattleOpponent_A
	.word	0xffff
.Lfe84:
	.size	 RegisterTrainerInMatchCall,.Lfe84-RegisterTrainerInMatchCall
	.align	2, 0
	.type	 WasSecondRematchWon,function
	.thumb_func
WasSecondRematchWon:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	bl	FirstBattleTrainerIdToRematchTableId
	add	r1, r0, #0
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L776	@cond_branch
	lsl	r0, r1, #0x4
	add	r0, r0, r4
	ldrh	r0, [r0, #0x2]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L776	@cond_branch
	mov	r0, #0x1
	b	.L777
.L776:
	mov	r0, #0x0
.L777:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 WasSecondRematchWon,.Lfe85-WasSecondRematchWon
	.align	2, 0
	.type	 HasAtLeastFiveBadges,function
	.thumb_func
HasAtLeastFiveBadges:
	push	{r4, r5, r6, lr}
	mov	r6, #0x0
	mov	r5, #0x0
	ldr	r4, .L787
.L782:
	ldrh	r0, [r4]
	bl	FlagGet
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L781	@cond_branch
	add	r6, r6, #0x1
	cmp	r6, #0x4
	ble	.L781	@cond_branch
	mov	r0, #0x1
	b	.L786
.L788:
	.align	2, 0
.L787:
	.word	sBadgeFlags
.L781:
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x7
	bls	.L782	@cond_branch
	mov	r0, #0x0
.L786:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe86:
	.size	 HasAtLeastFiveBadges,.Lfe86-HasAtLeastFiveBadges
	.align	2, 0
	.globl	IncrementRematchStepCounter
	.type	 IncrementRematchStepCounter,function
	.thumb_func
IncrementRematchStepCounter:
	push	{lr}
	bl	HasAtLeastFiveBadges
	cmp	r0, #0
	beq	.L790	@cond_branch
	ldr	r0, .L794
	ldr	r0, [r0]
	ldr	r2, .L794+0x4
	add	r1, r0, r2
	ldrh	r0, [r1]
	cmp	r0, #0xfe
	bls	.L791	@cond_branch
	mov	r0, #0xff
	b	.L793
.L795:
	.align	2, 0
.L794:
	.word	gSaveBlock1Ptr
	.word	0x9c8
.L791:
	add	r0, r0, #0x1
.L793:
	strh	r0, [r1]
.L790:
	pop	{r0}
	bx	r0
.Lfe87:
	.size	 IncrementRematchStepCounter,.Lfe87-IncrementRematchStepCounter
	.align	2, 0
	.type	 IsRematchStepCounterMaxed,function
	.thumb_func
IsRematchStepCounterMaxed:
	push	{lr}
	bl	HasAtLeastFiveBadges
	cmp	r0, #0
	beq	.L797	@cond_branch
	ldr	r0, .L800
	ldr	r0, [r0]
	ldr	r1, .L800+0x4
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, #0xfe
	bls	.L797	@cond_branch
	mov	r0, #0x1
	b	.L799
.L801:
	.align	2, 0
.L800:
	.word	gSaveBlock1Ptr
	.word	0x9c8
.L797:
	mov	r0, #0x0
.L799:
	pop	{r1}
	bx	r1
.Lfe88:
	.size	 IsRematchStepCounterMaxed,.Lfe88-IsRematchStepCounterMaxed
	.align	2, 0
	.globl	TryUpdateRandomTrainerRematches
	.type	 TryUpdateRandomTrainerRematches,function
	.thumb_func
TryUpdateRandomTrainerRematches:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	bl	IsRematchStepCounterMaxed
	cmp	r0, #0
	beq	.L803	@cond_branch
	ldr	r0, .L804
	add	r1, r5, #0
	add	r2, r4, #0
	bl	UpdateRandomTrainerRematches
	cmp	r0, #0x1
	bne	.L803	@cond_branch
	ldr	r0, .L804+0x4
	ldr	r0, [r0]
	ldr	r1, .L804+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0]
.L803:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L805:
	.align	2, 0
.L804:
	.word	gRematchTable
	.word	gSaveBlock1Ptr
	.word	0x9c8
.Lfe89:
	.size	 TryUpdateRandomTrainerRematches,.Lfe89-TryUpdateRandomTrainerRematches
	.align	2, 0
	.globl	DoesSomeoneWantRematchIn
	.type	 DoesSomeoneWantRematchIn,function
	.thumb_func
DoesSomeoneWantRematchIn:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L807
	add	r1, r3, #0
	bl	DoesSomeoneWantRematchIn_
	pop	{r1}
	bx	r1
.L808:
	.align	2, 0
.L807:
	.word	gRematchTable
.Lfe90:
	.size	 DoesSomeoneWantRematchIn,.Lfe90-DoesSomeoneWantRematchIn
	.align	2, 0
	.globl	IsRematchTrainerIn
	.type	 IsRematchTrainerIn,function
	.thumb_func
IsRematchTrainerIn:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	ldr	r0, .L810
	add	r1, r3, #0
	bl	IsRematchTrainerIn_
	pop	{r1}
	bx	r1
.L811:
	.align	2, 0
.L810:
	.word	gRematchTable
.Lfe91:
	.size	 IsRematchTrainerIn,.Lfe91-IsRematchTrainerIn
	.align	2, 0
	.type	 GetRematchTrainerId,function
	.thumb_func
GetRematchTrainerId:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L813
	bl	GetRematchTrainerIdFromTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L814:
	.align	2, 0
.L813:
	.word	gRematchTable
.Lfe92:
	.size	 GetRematchTrainerId,.Lfe92-GetRematchTrainerId
	.align	2, 0
	.globl	GetLastBeatenRematchTrainerId
	.type	 GetLastBeatenRematchTrainerId,function
	.thumb_func
GetLastBeatenRematchTrainerId:
	push	{lr}
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	ldr	r0, .L816
	bl	GetLastBeatenRematchTrainerIdFromTable
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.L817:
	.align	2, 0
.L816:
	.word	gRematchTable
.Lfe93:
	.size	 GetLastBeatenRematchTrainerId,.Lfe93-GetLastBeatenRematchTrainerId
	.align	2, 0
	.globl	ShouldTryRematchBattle
	.type	 ShouldTryRematchBattle,function
	.thumb_func
ShouldTryRematchBattle:
	push	{r4, r5, lr}
	ldr	r5, .L821
	ldr	r4, .L821+0x4
	ldrh	r1, [r4]
	add	r0, r5, #0
	bl	IsFirstTrainerIdReadyForRematch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L819	@cond_branch
	ldrh	r1, [r4]
	add	r0, r5, #0
	bl	WasSecondRematchWon
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L820
.L822:
	.align	2, 0
.L821:
	.word	gRematchTable
	.word	gTrainerBattleOpponent_A
.L819:
	mov	r0, #0x1
.L820:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe94:
	.size	 ShouldTryRematchBattle,.Lfe94-ShouldTryRematchBattle
	.align	2, 0
	.globl	IsTrainerReadyForRematch
	.type	 IsTrainerReadyForRematch,function
	.thumb_func
IsTrainerReadyForRematch:
	push	{lr}
	ldr	r0, .L824
	ldr	r1, .L824+0x4
	ldrh	r1, [r1]
	bl	IsTrainerReadyForRematch_
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.L825:
	.align	2, 0
.L824:
	.word	gRematchTable
	.word	gTrainerBattleOpponent_A
.Lfe95:
	.size	 IsTrainerReadyForRematch,.Lfe95-IsTrainerReadyForRematch
	.align	2, 0
	.type	 HandleRematchVarsOnBattleEnd,function
	.thumb_func
HandleRematchVarsOnBattleEnd:
	push	{lr}
	ldr	r0, .L827
	ldr	r1, .L827+0x4
	ldrh	r1, [r1]
	bl	ClearTrainerWantRematchState
	bl	SetBattledTrainersFlags
	pop	{r0}
	bx	r0
.L828:
	.align	2, 0
.L827:
	.word	gRematchTable
	.word	gTrainerBattleOpponent_A
.Lfe96:
	.size	 HandleRematchVarsOnBattleEnd,.Lfe96-HandleRematchVarsOnBattleEnd
	.align	2, 0
	.globl	ShouldTryGetTrainerScript
	.type	 ShouldTryGetTrainerScript,function
	.thumb_func
ShouldTryGetTrainerScript:
	push	{lr}
	ldr	r1, .L833
	ldrb	r0, [r1]
	cmp	r0, #0x1
	bls	.L830	@cond_branch
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L833+0x4
	mov	r0, #0x1
	strb	r0, [r1]
	ldr	r1, .L833+0x8
	mov	r0, #0x1
	b	.L832
.L834:
	.align	2, 0
.L833:
	.word	sNoOfPossibleTrainerRetScripts
	.word	sShouldCheckTrainerBScript
	.word	gSpecialVar_Result
.L830:
	ldr	r1, .L835
	mov	r0, #0x0
	strb	r0, [r1]
	ldr	r1, .L835+0x4
	mov	r0, #0x0
.L832:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L836:
	.align	2, 0
.L835:
	.word	sShouldCheckTrainerBScript
	.word	gSpecialVar_Result
.Lfe97:
	.size	 ShouldTryGetTrainerScript,.Lfe97-ShouldTryGetTrainerScript
	.align	2, 0
	.globl	CountBattledRematchTeams
	.type	 CountBattledRematchTeams,function
	.thumb_func
CountBattledRematchTeams:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	ldr	r7, .L847
	lsr	r4, r0, #0xc
	add	r6, r4, r7
	ldrh	r0, [r6]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L838	@cond_branch
	mov	r0, #0x0
	b	.L846
.L848:
	.align	2, 0
.L847:
	.word	gRematchTable
.L838:
	mov	r5, #0x1
	add	r0, r4, #0x2
	add	r0, r0, r7
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L840	@cond_branch
	add	r4, r6, #0x2
.L843:
	ldrh	r0, [r4]
	bl	HasTrainerBeenFought
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L840	@cond_branch
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x4
	bgt	.L840	@cond_branch
	ldrh	r0, [r4]
	cmp	r0, #0
	bne	.L843	@cond_branch
.L840:
	lsl	r0, r5, #0x10
	lsr	r0, r0, #0x10
.L846:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe98:
	.size	 CountBattledRematchTeams,.Lfe98-CountBattledRematchTeams
.text
	.align	2, 0

