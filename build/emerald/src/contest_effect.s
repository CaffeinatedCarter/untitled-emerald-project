@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gContestMoves
	.section .rodata
	.align	2, 0
	.type	 gContestMoves,object
	.size	 gContestMoves,2840
gContestMoves:
	.byte	0x0
	.space	7
	.byte	0x0
	.byte	0x4
	.byte	0x3c
	.byte	0x0
	.space	3
	.space	1
	.byte	0x25
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.space	3
	.space	1
	.byte	0x11
	.byte	0x4
	.byte	0x0
	.byte	0x3c
	.space	3
	.space	1
	.byte	0x23
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.byte	0x1a
	.space	2
	.space	1
	.byte	0x2e
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x2d
	.byte	0x9
	.byte	0x2c
	.byte	0x2e
	.space	1
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x2e
	.byte	0x2c
	.byte	0x2d
	.space	2
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x2c
	.byte	0xd
	.byte	0x2d
	.byte	0x2e
	.space	1
	.space	1
	.byte	0x0
	.byte	0x4
	.byte	0x15
	.byte	0x21
	.space	3
	.space	1
	.byte	0x0
	.byte	0x4
	.byte	0xb
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x0
	.byte	0x0
	.byte	0xb
	.space	3
	.space	1
	.byte	0x25
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x1
	.byte	0x7
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x23
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x4
	.byte	0x0
	.byte	0xb
	.space	3
	.space	1
	.byte	0x13
	.byte	0x4
	.byte	0x0
	.byte	0x3c
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0xc
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x21
	.space	2
	.space	1
	.byte	0x23
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x1a
	.space	2
	.space	1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1a
	.space	3
	.space	1
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x2
	.byte	0x36
	.byte	0x37
	.byte	0x18
	.space	2
	.space	1
	.byte	0xa
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x21
	.space	3
	.space	1
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.byte	0x2f
	.space	2
	.space	1
	.byte	0x2d
	.byte	0x0
	.byte	0x0
	.byte	0x6
	.space	3
	.space	1
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0xc
	.byte	0x21
	.byte	0x24
	.space	1
	.space	1
	.byte	0xc
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.byte	0x24
	.space	2
	.space	1
	.byte	0x12
	.byte	0x4
	.byte	0x0
	.byte	0x2
	.space	3
	.space	1
	.byte	0x1
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.byte	0x24
	.space	2
	.space	1
	.byte	0x1e
	.byte	0x2
	.byte	0x0
	.byte	0x23
	.space	3
	.space	1
	.byte	0xa
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xa
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x0
	.byte	0x21
	.byte	0x2
	.byte	0x10
	.space	2
	.space	1
	.byte	0xd
	.byte	0x4
	.byte	0x0
	.byte	0x21
	.byte	0x10
	.space	2
	.space	1
	.byte	0x1e
	.byte	0x2
	.byte	0x0
	.byte	0x23
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x2
	.byte	0x25
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x23
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x5
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x32
	.byte	0x31
	.space	1
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x25
	.byte	0x1
	.byte	0x1e
	.byte	0x1
	.byte	0x1f
	.space	2
	.space	1
	.byte	0x13
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x11
	.byte	0x17
	.space	2
	.space	1
	.byte	0x2b
	.byte	0x1
	.byte	0x0
	.byte	0x3e
	.space	3
	.space	1
	.byte	0xd
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x13
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x12
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x2f
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x2f
	.space	3
	.space	1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1a
	.space	3
	.space	1
	.byte	0xc
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x4
	.byte	0x4
	.byte	0x0
	.byte	0x22
	.space	3
	.space	1
	.byte	0x13
	.byte	0x4
	.byte	0x0
	.byte	0x38
	.space	3
	.space	1
	.byte	0x13
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xa
	.byte	0x3
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0xc
	.byte	0x3
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0xb
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x1
	.byte	0x16
	.byte	0x0
	.space	3
	.space	1
	.byte	0x25
	.byte	0x0
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x9
	.byte	0x16
	.space	2
	.space	1
	.byte	0x1b
	.byte	0x3
	.byte	0x0
	.byte	0x29
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x3
	.byte	0x0
	.byte	0x29
	.space	3
	.space	1
	.byte	0xd
	.byte	0x3
	.byte	0x0
	.byte	0x29
	.space	3
	.space	1
	.byte	0x12
	.byte	0x1
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0xa
	.byte	0x3
	.byte	0x20
	.byte	0x0
	.space	3
	.space	1
	.byte	0x21
	.byte	0x0
	.byte	0x1c
	.byte	0x1b
	.byte	0x1d
	.space	2
	.space	1
	.byte	0x2f
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.space	3
	.space	1
	.byte	0xb
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.byte	0x1
	.byte	0x12
	.space	1
	.space	1
	.byte	0x23
	.byte	0x4
	.byte	0xe
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x4
	.byte	0x26
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x4
	.byte	0x0
	.byte	0x26
	.space	3
	.space	1
	.byte	0x5
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xa
	.byte	0x3
	.byte	0x3b
	.byte	0x39
	.byte	0x3a
	.byte	0x3e
	.space	1
	.space	1
	.byte	0xd
	.byte	0x3
	.byte	0x39
	.byte	0x3a
	.byte	0x3b
	.byte	0x3e
	.space	1
	.space	1
	.byte	0xd
	.byte	0x3
	.byte	0x4
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x1
	.byte	0x0
	.byte	0x3e
	.space	3
	.space	1
	.byte	0x28
	.byte	0x0
	.byte	0x0
	.byte	0x27
	.space	3
	.space	1
	.byte	0x28
	.byte	0x0
	.byte	0x0
	.byte	0x27
	.space	3
	.space	1
	.byte	0x3
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x27
	.byte	0x39
	.byte	0x3a
	.byte	0x3b
	.space	1
	.byte	0x13
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x20
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x4
	.byte	0x0
	.byte	0x27
	.byte	0x0
	.space	3
	.space	1
	.byte	0x13
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x4
	.byte	0x4
	.byte	0x24
	.byte	0x0
	.space	3
	.space	1
	.byte	0x4
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x10
	.byte	0x3
	.byte	0x0
	.byte	0x3d
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x4
	.byte	0x2
	.byte	0xc
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x1
	.byte	0x0
	.byte	0x3e
	.space	3
	.space	1
	.byte	0x1b
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x3
	.byte	0x0
	.byte	0x3e
	.space	3
	.space	1
	.byte	0xd
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x20
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x13
	.space	3
	.space	1
	.byte	0xc
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x4
	.byte	0x3d
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x4
	.byte	0x2a
	.byte	0x2b
	.space	3
	.space	1
	.byte	0x11
	.byte	0x4
	.byte	0x33
	.byte	0x34
	.byte	0x35
	.space	2
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x1e
	.byte	0x4
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x4
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x1d
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xa
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x3
	.byte	0x3a
	.byte	0x39
	.byte	0x3b
	.space	2
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x13
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1a
	.space	3
	.space	1
	.byte	0xd
	.byte	0x4
	.byte	0x0
	.byte	0x21
	.space	3
	.space	1
	.byte	0xb
	.byte	0x3
	.byte	0x0
	.byte	0x4
	.byte	0x3e
	.space	2
	.space	1
	.byte	0x1b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x23
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xa
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x25
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x3
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xb
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x10
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x3
	.byte	0x0
	.byte	0x3e
	.space	3
	.space	1
	.byte	0x1e
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x25
	.byte	0x4
	.byte	0x0
	.byte	0x1
	.byte	0x7
	.space	2
	.space	1
	.byte	0x2
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x4
	.byte	0x0
	.byte	0x15
	.space	3
	.space	1
	.byte	0x0
	.byte	0x4
	.byte	0x34
	.byte	0x33
	.byte	0x35
	.space	2
	.space	1
	.byte	0x4
	.byte	0x2
	.byte	0xa
	.byte	0x19
	.byte	0x23
	.byte	0xf
	.space	1
	.space	1
	.byte	0xd
	.byte	0x4
	.byte	0x0
	.byte	0xe
	.space	3
	.space	1
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x23
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xb
	.byte	0x1
	.byte	0x0
	.byte	0x12
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x4
	.byte	0x0
	.byte	0x10
	.space	3
	.space	1
	.byte	0x25
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.byte	0x15
	.space	2
	.space	1
	.byte	0x4
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x20
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.space	3
	.space	1
	.byte	0x1f
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x3
	.byte	0x0
	.byte	0x20
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x3
	.byte	0x1a
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x3
	.byte	0x0
	.byte	0x4
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x0
	.byte	0x2
	.byte	0x0
	.byte	0xa
	.space	3
	.space	1
	.byte	0x29
	.byte	0x4
	.byte	0x28
	.byte	0x0
	.space	3
	.space	1
	.byte	0x21
	.byte	0x2
	.byte	0x0
	.byte	0x5
	.space	3
	.space	1
	.byte	0x23
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x25
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1e
	.byte	0x0
	.byte	0x0
	.byte	0x5
	.space	3
	.space	1
	.byte	0x21
	.byte	0x4
	.byte	0x0
	.byte	0x28
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x11
	.byte	0x17
	.space	3
	.space	1
	.byte	0x5
	.byte	0x2
	.byte	0x0
	.byte	0x24
	.space	3
	.space	1
	.byte	0x28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x4
	.byte	0x10
	.byte	0x2
	.byte	0x21
	.space	2
	.space	1
	.byte	0x1d
	.byte	0x3
	.byte	0x0
	.byte	0x38
	.byte	0x21
	.byte	0x3c
	.space	1
	.space	1
	.byte	0x1a
	.byte	0x2
	.byte	0x0
	.byte	0x23
	.space	3
	.space	1
	.byte	0x26
	.byte	0x2
	.byte	0x19
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x4
	.byte	0x2b
	.byte	0x2a
	.space	3
	.space	1
	.byte	0x11
	.byte	0x2
	.byte	0x37
	.byte	0x36
	.byte	0x31
	.byte	0x18
	.space	1
	.space	1
	.byte	0x11
	.byte	0x4
	.byte	0x0
	.byte	0x1
	.byte	0x12
	.space	2
	.space	1
	.byte	0x1a
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x12
	.space	3
	.space	1
	.byte	0x1b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.byte	0x14
	.byte	0x28
	.byte	0x5
	.space	1
	.space	1
	.byte	0x2d
	.byte	0x1
	.byte	0x0
	.byte	0x14
	.byte	0x25
	.space	2
	.space	1
	.byte	0xd
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x22
	.space	3
	.space	1
	.byte	0x0
	.byte	0x4
	.byte	0x35
	.byte	0x3
	.byte	0x33
	.byte	0x34
	.space	1
	.space	1
	.byte	0x2f
	.byte	0x3
	.byte	0x12
	.byte	0x0
	.space	3
	.space	1
	.byte	0x12
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x4
	.byte	0x18
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x3
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0x4
	.byte	0x4
	.byte	0x5
	.byte	0x0
	.space	3
	.space	1
	.byte	0x13
	.byte	0x2
	.byte	0x23
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x4
	.byte	0x0
	.byte	0xc
	.byte	0x24
	.space	2
	.space	1
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.space	3
	.space	1
	.byte	0x1d
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x23
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.space	3
	.space	1
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.space	3
	.space	1
	.byte	0x23
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x1
	.byte	0x14
	.byte	0x28
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0xa
	.space	3
	.space	1
	.byte	0x1e
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2c
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x3
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2c
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x3
	.byte	0x0
	.byte	0x5
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x2e
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x1a
	.space	2
	.space	1
	.byte	0x23
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x0
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.space	2
	.space	1
	.byte	0x1a
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x2
	.byte	0x29
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x30
	.space	3
	.space	1
	.byte	0x29
	.byte	0x0
	.byte	0x0
	.byte	0x38
	.space	3
	.space	1
	.byte	0x22
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x22
	.byte	0x3
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x22
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x3
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x25
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2e
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2e
	.byte	0x1
	.byte	0x9
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x4
	.byte	0x0
	.byte	0x10
	.space	3
	.space	1
	.byte	0x4
	.byte	0x1
	.byte	0x0
	.byte	0x22
	.space	3
	.space	1
	.byte	0x23
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x28
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x10
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x3
	.byte	0x0
	.byte	0x39
	.byte	0x3a
	.byte	0x3b
	.byte	0x3e
	.space	1
	.byte	0x27
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x13
	.byte	0x2
	.byte	0x38
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x4
	.byte	0x4
	.byte	0x8
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.space	3
	.space	1
	.byte	0x26
	.byte	0x4
	.byte	0x0
	.byte	0x8
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0xd
	.byte	0x1
	.byte	0x17
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x3
	.byte	0x0
	.byte	0x23
	.space	3
	.space	1
	.byte	0xc
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x2
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1e
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x29
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.space	3
	.space	1
	.byte	0xa
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2e
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x23
	.byte	0x3
	.byte	0xd
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x3
	.byte	0x22
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x23
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1f
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x22
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1
	.byte	0x4
	.byte	0x0
	.byte	0x12
	.space	3
	.space	1
	.byte	0x5
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x3
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x29
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x2
	.byte	0xf
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x3
	.byte	0x0
	.byte	0x38
	.space	3
	.space	1
	.byte	0x1e
	.byte	0x4
	.byte	0x0
	.byte	0x5
	.space	3
	.space	1
	.byte	0x21
	.byte	0x1
	.byte	0x0
	.byte	0x5
	.byte	0x26
	.byte	0x9
	.space	1
	.space	1
	.byte	0x1f
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x2
	.byte	0x0
	.byte	0x32
	.byte	0x25
	.space	2
	.space	1
	.byte	0x21
	.byte	0x4
	.byte	0x0
	.byte	0x28
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x27
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x4
	.byte	0x1
	.byte	0x1f
	.byte	0x1
	.byte	0x1e
	.space	2
	.space	1
	.byte	0x11
	.byte	0x4
	.byte	0x0
	.byte	0x3
	.byte	0x38
	.space	2
	.space	1
	.byte	0x25
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xa
	.byte	0x3
	.byte	0x0
	.byte	0x3e
	.space	3
	.space	1
	.byte	0xc
	.byte	0x3
	.byte	0x0
	.byte	0x3e
	.space	3
	.space	1
	.byte	0x1e
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x12
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x0
	.byte	0x2
	.byte	0x31
	.byte	0x37
	.byte	0x32
	.space	2
	.space	1
	.byte	0x2f
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x21
	.byte	0x2
	.byte	0x0
	.byte	0xf
	.space	3
	.space	1
	.byte	0xd
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x7
	.space	3
	.space	1
	.byte	0x12
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x12
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x23
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xa
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x1
	.byte	0x9
	.byte	0x17
	.byte	0x18
	.space	1
	.byte	0x1e
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1e
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x13
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x9
	.space	3
	.space	1
	.byte	0x1b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x3
	.byte	0x0
	.byte	0xe
	.space	3
	.space	1
	.byte	0x26
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x3
	.byte	0x30
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1b
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x21
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1d
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xc
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x13
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x3
	.byte	0x0
	.byte	0x18
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x11
	.byte	0x4
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x2d
	.byte	0x0
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0x1d
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x13
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1a
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x13
	.byte	0x0
	.byte	0x0
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.space	1
	.space	1
	.byte	0x12
	.byte	0x0
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0x26
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x5
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0xd
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1b
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1f
	.byte	0x2
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.space	3
	.space	1
	.byte	0x1d
	.byte	0x1
	.byte	0x0
	.byte	0x16
	.space	3
	.space	1
	.byte	0x0
	.byte	0x2
	.byte	0x32
	.byte	0x1
	.byte	0x31
	.space	2
	.space	1
	.byte	0x4
	.byte	0x3
	.byte	0x3e
	.byte	0x0
	.space	3
	.space	1
	.byte	0x25
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x26
	.byte	0x0
	.byte	0x1d
	.byte	0x1c
	.byte	0x1b
	.space	2
	.space	1
	.byte	0x23
	.byte	0x4
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1d
	.byte	0x0
	.byte	0x0
	.byte	0xd
	.space	3
	.space	1
	.byte	0x2b
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.space	3
	.space	1
	.byte	0x2f
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	3
	.space	1
	.byte	0x1
	.byte	0x3
	.byte	0x0
	.byte	0x3e
	.space	3
	.space	1
	.globl	gContestEffects
	.align	2, 0
	.type	 gContestEffects,object
gContestEffects:
	.byte	0x0
	.byte	0x28
	.byte	0x0
	.space	1
	.byte	0x0
	.byte	0x3c
	.byte	0x0
	.space	1
	.byte	0x0
	.byte	0x50
	.byte	0x0
	.space	1
	.byte	0x0
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x1
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0x1
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x1
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x1
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x2
	.byte	0x1e
	.byte	0x14
	.space	1
	.byte	0x3
	.byte	0x1e
	.byte	0xa
	.space	1
	.byte	0x2
	.byte	0x14
	.byte	0x1e
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0x14
	.space	1
	.byte	0x2
	.byte	0xa
	.byte	0x28
	.space	1
	.byte	0x3
	.byte	0xa
	.byte	0x1e
	.space	1
	.byte	0x2
	.byte	0x1e
	.byte	0x14
	.space	1
	.byte	0x3
	.byte	0x1e
	.byte	0xa
	.space	1
	.byte	0x4
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0xa
	.space	1
	.byte	0x3
	.byte	0x28
	.byte	0x28
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0xa
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0xa
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0xa
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0xa
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0xa
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0xa
	.space	1
	.byte	0x4
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0x4
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0x4
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x3
	.byte	0x1e
	.byte	0xa
	.space	1
	.byte	0x5
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0x14
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x6
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x6
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x6
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x6
	.byte	0x1e
	.byte	0x0
	.space	1
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x3
	.byte	0x14
	.byte	0xa
	.space	1
	.byte	0x5
	.byte	0xa
	.byte	0x0
	.space	1
	.byte	0x4
	.byte	0x1e
	.byte	0x0
	.space	1
	.size	 gContestEffects,192
	.globl	gComboStarterLookupTable
	.type	 gComboStarterLookupTable,object
gComboStarterLookupTable:
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.size	 gComboStarterLookupTable,63
	.globl	gContestEffectFuncs
	.align	2, 0
	.type	 gContestEffectFuncs,object
gContestEffectFuncs:
	.word	ContestEffect_HighlyAppealing
	.word	ContestEffect_UserMoreEasilyStartled
	.word	ContestEffect_GreatAppealButNoMoreMoves
	.word	ContestEffect_RepetitionNotBoring
	.word	ContestEffect_AvoidStartleOnce
	.word	ContestEffect_AvoidStartle
	.word	ContestEffect_AvoidStartleSlightly
	.word	ContestEffect_UserLessEasilyStartled
	.word	ContestEffect_StartleFrontMon
	.word	ContestEffect_StartlePrevMons
	.word	ContestEffect_StartleFrontMon
	.word	ContestEffect_StartlePrevMons
	.word	ContestEffect_StartleFrontMon
	.word	ContestEffect_StartlePrevMons
	.word	ContestEffect_StartlePrevMon2
	.word	ContestEffect_StartlePrevMons2
	.word	ContestEffect_ShiftJudgeAttention
	.word	ContestEffect_StartleMonWithJudgesAttention
	.word	ContestEffect_JamsOthersButMissOneTurn
	.word	ContestEffect_StartleMonsSameTypeAppeal
	.word	ContestEffect_StartleMonsCoolAppeal
	.word	ContestEffect_StartleMonsBeautyAppeal
	.word	ContestEffect_StartleMonsCuteAppeal
	.word	ContestEffect_StartleMonsSmartAppeal
	.word	ContestEffect_StartleMonsToughAppeal
	.word	ContestEffect_MakeFollowingMonNervous
	.word	ContestEffect_MakeFollowingMonsNervous
	.word	ContestEffect_WorsenConditionOfPrevMons
	.word	ContestEffect_BadlyStartlesMonsInGoodCondition
	.word	ContestEffect_BetterIfFirst
	.word	ContestEffect_BetterIfLast
	.word	ContestEffect_AppealAsGoodAsPrevOnes
	.word	ContestEffect_AppealAsGoodAsPrevOne
	.word	ContestEffect_BetterWhenLater
	.word	ContestEffect_QualityDependsOnTiming
	.word	ContestEffect_BetterIfSameType
	.word	ContestEffect_BetterIfDiffType
	.word	ContestEffect_AffectedByPrevAppeal
	.word	ContestEffect_ImproveConditionPreventNervousness
	.word	ContestEffect_BetterWithGoodCondition
	.word	ContestEffect_NextAppealEarlier
	.word	ContestEffect_NextAppealLater
	.word	ContestEffect_MakeScramblingTurnOrderEasier
	.word	ContestEffect_ScrambleNextTurnOrder
	.word	ContestEffect_ExciteAudienceInAnyContest
	.word	ContestEffect_BadlyStartleMonsWithGoodAppeals
	.word	ContestEffect_BetterWhenAudienceExcited
	.word	ContestEffect_DontExciteAudience
	.size	 gContestEffectFuncs,192
.text
	.align	2, 0
	.globl	AreMovesContestCombo
	.type	 AreMovesContestCombo,function
	.thumb_func
AreMovesContestCombo:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsl	r1, r1, #0x10
	ldr	r2, .L9
	lsr	r0, r0, #0xd
	add	r0, r0, r2
	ldrb	r4, [r0, #0x2]
	mov	r3, sp
	lsr	r1, r1, #0xd
	add	r1, r1, r2
	ldrb	r0, [r1, #0x3]
	strb	r0, [r3]
	mov	r2, sp
	ldrb	r0, [r1, #0x4]
	strb	r0, [r2, #0x1]
	ldrb	r0, [r1, #0x5]
	strb	r0, [r2, #0x2]
	mov	r0, sp
	ldrb	r1, [r1, #0x6]
	strb	r1, [r0, #0x3]
	cmp	r4, #0
	beq	.L5	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L6	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x1]
	cmp	r4, r0
	beq	.L6	@cond_branch
	mov	r0, sp
	ldrb	r0, [r0, #0x2]
	cmp	r4, r0
	beq	.L6	@cond_branch
	cmp	r4, r1
	bne	.L5	@cond_branch
.L6:
	ldr	r0, .L9+0x4
	add	r0, r4, r0
	ldrb	r0, [r0]
	b	.L8
.L10:
	.align	2, 0
.L9:
	.word	gContestMoves
	.word	gComboStarterLookupTable
.L5:
	mov	r0, #0x0
.L8:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 AreMovesContestCombo,.Lfe1-AreMovesContestCombo
	.align	2, 0
	.type	 ContestEffect_HighlyAppealing,function
	.thumb_func
ContestEffect_HighlyAppealing:
	bx	lr
.Lfe2:
	.size	 ContestEffect_HighlyAppealing,.Lfe2-ContestEffect_HighlyAppealing
	.align	2, 0
	.type	 ContestEffect_UserMoreEasilyStartled,function
	.thumb_func
ContestEffect_UserMoreEasilyStartled:
	push	{lr}
	ldr	r3, .L13
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x10]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x0
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	gContestResources
.Lfe3:
	.size	 ContestEffect_UserMoreEasilyStartled,.Lfe3-ContestEffect_UserMoreEasilyStartled
	.align	2, 0
	.type	 ContestEffect_GreatAppealButNoMoreMoves,function
	.thumb_func
ContestEffect_GreatAppealButNoMoreMoves:
	push	{lr}
	ldr	r3, .L16
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x11]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L17:
	.align	2, 0
.L16:
	.word	gContestResources
.Lfe4:
	.size	 ContestEffect_GreatAppealButNoMoreMoves,.Lfe4-ContestEffect_GreatAppealButNoMoreMoves
	.align	2, 0
	.type	 ContestEffect_RepetitionNotBoring,function
	.thumb_func
ContestEffect_RepetitionNotBoring:
	ldr	r3, .L19
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0, #0x10]
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0x15]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x15]
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	ldr	r2, [r1, #0x4]
	lsl	r1, r0, #0x3
	sub	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r2, [r1, #0xb]
	mov	r0, #0x71
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0xb]
	bx	lr
.L20:
	.align	2, 0
.L19:
	.word	gContestResources
.Lfe5:
	.size	 ContestEffect_RepetitionNotBoring,.Lfe5-ContestEffect_RepetitionNotBoring
	.align	2, 0
	.type	 ContestEffect_AvoidStartleOnce,function
	.thumb_func
ContestEffect_AvoidStartleOnce:
	push	{lr}
	ldr	r3, .L22
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x1
	strb	r1, [r0, #0x12]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x2
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L23:
	.align	2, 0
.L22:
	.word	gContestResources
.Lfe6:
	.size	 ContestEffect_AvoidStartleOnce,.Lfe6-ContestEffect_AvoidStartleOnce
	.align	2, 0
	.type	 ContestEffect_AvoidStartle,function
	.thumb_func
ContestEffect_AvoidStartle:
	push	{lr}
	ldr	r3, .L25
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x10]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x3
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L26:
	.align	2, 0
.L25:
	.word	gContestResources
.Lfe7:
	.size	 ContestEffect_AvoidStartle,.Lfe7-ContestEffect_AvoidStartle
	.align	2, 0
	.type	 ContestEffect_AvoidStartleSlightly,function
	.thumb_func
ContestEffect_AvoidStartleSlightly:
	push	{lr}
	ldr	r3, .L28
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r1, #0x14
	strb	r1, [r0, #0xf]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x4
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	gContestResources
.Lfe8:
	.size	 ContestEffect_AvoidStartleSlightly,.Lfe8-ContestEffect_AvoidStartleSlightly
	.align	2, 0
	.type	 ContestEffect_UserLessEasilyStartled,function
	.thumb_func
ContestEffect_UserLessEasilyStartled:
	push	{lr}
	ldr	r3, .L31
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x10]
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x10]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x5
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gContestResources
.Lfe9:
	.size	 ContestEffect_UserLessEasilyStartled,.Lfe9-ContestEffect_UserLessEasilyStartled
	.align	2, 0
	.type	 ContestEffect_StartleFrontMon,function
	.thumb_func
ContestEffect_StartleFrontMon:
	push	{r4, r5, lr}
	mov	r2, #0x0
	ldr	r5, .L42
	ldr	r0, [r5]
	ldr	r1, [r0, #0x8]
	ldrb	r4, [r1, #0x11]
	add	r3, r1, r4
	ldrb	r0, [r3]
	cmp	r0, #0
	beq	.L34	@cond_branch
	sub	r0, r0, #0x1
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L36	@cond_branch
	add	r3, r5, #0
.L37:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L36	@cond_branch
	ldr	r0, [r3]
	ldr	r1, [r0, #0x8]
	add	r0, r1, r4
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L37	@cond_branch
.L36:
	ldr	r1, .L42
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	strb	r2, [r0, #0x8]
	ldr	r0, [r1]
	ldr	r1, [r0, #0x8]
	mov	r0, #0xff
	strb	r0, [r1, #0x9]
	bl	WasAtLeastOneOpponentJammed
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L34:
	cmp	r2, #0
	bne	.L41	@cond_branch
	ldr	r0, .L42
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L41:
	ldr	r0, .L42
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gContestResources
.Lfe10:
	.size	 ContestEffect_StartleFrontMon,.Lfe10-ContestEffect_StartleFrontMon
	.align	2, 0
	.type	 ContestEffect_StartlePrevMons,function
	.thumb_func
ContestEffect_StartlePrevMons:
	push	{r4, r5, r6, lr}
	mov	r1, #0x0
	ldr	r2, .L53
	ldr	r0, [r2]
	ldr	r0, [r0, #0x8]
	ldrb	r5, [r0, #0x11]
	add	r0, r0, r5
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L45	@cond_branch
	mov	r3, #0x0
	mov	r4, #0x0
	add	r6, r2, #0
.L49:
	ldr	r0, [r6]
	ldr	r2, [r0, #0x8]
	add	r0, r2, r5
	add	r1, r2, r3
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L48	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0x8
	add	r0, r0, r4
	strb	r3, [r0]
	add	r4, r4, #0x1
.L48:
	add	r3, r3, #0x1
	cmp	r3, #0x3
	ble	.L49	@cond_branch
	ldr	r0, .L53
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0x8
	add	r0, r0, r4
	mov	r1, #0xff
	strb	r1, [r0]
	bl	WasAtLeastOneOpponentJammed
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
.L45:
	cmp	r1, #0
	bne	.L52	@cond_branch
	ldr	r0, .L53
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L52:
	ldr	r0, .L53
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L54:
	.align	2, 0
.L53:
	.word	gContestResources
.Lfe11:
	.size	 ContestEffect_StartlePrevMons,.Lfe11-ContestEffect_StartlePrevMons
	.align	2, 0
	.type	 ContestEffect_StartlePrevMon2,function
	.thumb_func
ContestEffect_StartlePrevMon2:
	push	{lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x14
	cmp	r0, #0x1
	bls	.L57	@cond_branch
	mov	r1, #0x3c
	cmp	r0, #0x7
	bhi	.L57	@cond_branch
	mov	r1, #0x28
.L57:
	ldr	r0, .L60
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	strh	r1, [r0, #0x4]
	bl	ContestEffect_StartleFrontMon
	pop	{r0}
	bx	r0
.L61:
	.align	2, 0
.L60:
	.word	gContestResources
.Lfe12:
	.size	 ContestEffect_StartlePrevMon2,.Lfe12-ContestEffect_StartlePrevMon2
	.align	2, 0
	.type	 ContestEffect_StartlePrevMons2,function
	.thumb_func
ContestEffect_StartlePrevMons2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r7, #0x0
	ldr	r1, .L82
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r5, [r0, #0x11]
	add	r0, r0, r5
	ldrb	r0, [r0]
	mov	r8, r1
	cmp	r0, #0
	beq	.L63	@cond_branch
	mov	r4, #0x0
	mov	r6, r8
.L67:
	ldr	r0, [r6]
	ldr	r2, [r0, #0x8]
	add	r0, r2, r5
	add	r1, r2, r4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L66	@cond_branch
	strb	r4, [r2, #0x8]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x8]
	mov	r0, #0xff
	strb	r0, [r1, #0x9]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	cmp	r0, #0
	beq	.L70	@cond_branch
	mov	r1, #0xa
	cmp	r0, #0x2
	bls	.L70	@cond_branch
	mov	r1, #0x14
	cmp	r0, #0x4
	bls	.L70	@cond_branch
	mov	r1, #0x1e
	cmp	r0, #0x6
	bls	.L70	@cond_branch
	mov	r1, #0x3c
	cmp	r0, #0x8
	bhi	.L70	@cond_branch
	mov	r1, #0x28
.L70:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	strh	r1, [r0, #0x4]
	bl	WasAtLeastOneOpponentJammed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L66	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L66:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L67	@cond_branch
.L63:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	cmp	r7, #0
	bne	.L81	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L81:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gContestResources
.Lfe13:
	.size	 ContestEffect_StartlePrevMons2,.Lfe13-ContestEffect_StartlePrevMons2
	.align	2, 0
	.type	 ContestEffect_ShiftJudgeAttention,function
	.thumb_func
ContestEffect_ShiftJudgeAttention:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L93
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r2, [r0, #0x11]
	mov	r8, r2
	add	r0, r0, r8
	ldrb	r0, [r0]
	mov	sl, r1
	cmp	r0, #0
	beq	.L85	@cond_branch
	mov	r6, #0x0
	mov	r7, sl
	mov	r5, #0x0
.L89:
	ldr	r2, [r7]
	ldr	r0, [r2, #0x8]
	mov	r3, r8
	add	r1, r0, r3
	add	r0, r0, r6
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bls	.L88	@cond_branch
	ldr	r0, [r2, #0x4]
	add	r0, r5, r0
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L88	@cond_branch
	lsl	r0, r6, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	CanUnnerveContestant
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L88	@cond_branch
	ldr	r0, [r7]
	ldr	r2, [r0, #0x4]
	add	r2, r5, r2
	ldrb	r0, [r2, #0x15]
	mov	r3, #0x11
	neg	r3, r3
	add	r1, r3, #0
	and	r0, r0, r1
	strb	r0, [r2, #0x15]
	ldr	r0, [r7]
	ldr	r2, [r0, #0x4]
	add	r2, r5, r2
	ldrb	r0, [r2, #0x15]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2, #0x15]
	add	r0, r4, #0
	mov	r1, #0x8
	bl	SetContestantEffectStringID
	mov	r0, #0x1
	mov	r9, r0
.L88:
	add	r5, r5, #0x1c
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L89	@cond_branch
.L85:
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x7
	bl	SetContestantEffectStringID
	mov	r2, r9
	cmp	r2, #0
	bne	.L92	@cond_branch
	mov	r3, sl
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L92:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gContestResources
.Lfe14:
	.size	 ContestEffect_ShiftJudgeAttention,.Lfe14-ContestEffect_ShiftJudgeAttention
	.align	2, 0
	.type	 ContestEffect_StartleMonWithJudgesAttention,function
	.thumb_func
ContestEffect_StartleMonWithJudgesAttention:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r0, #0x0
	mov	r9, r0
	ldr	r1, .L108
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r7, [r0, #0x11]
	add	r0, r0, r7
	ldrb	r0, [r0]
	add	r4, r1, #0
	cmp	r0, #0
	beq	.L96	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x0
	mov	r8, r4
.L100:
	ldr	r3, [r4]
	ldr	r2, [r3, #0x8]
	add	r0, r2, r7
	add	r1, r2, r5
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L99	@cond_branch
	ldr	r0, [r3, #0x4]
	add	r0, r6, r0
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L102	@cond_branch
	mov	r0, #0x32
	b	.L107
.L109:
	.align	2, 0
.L108:
	.word	gContestResources
.L102:
	mov	r0, #0xa
.L107:
	strh	r0, [r2, #0x4]
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	strb	r5, [r0, #0x8]
	ldr	r0, [r1]
	ldr	r1, [r0, #0x8]
	mov	r0, #0xff
	strb	r0, [r1, #0x9]
	bl	WasAtLeastOneOpponentJammed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L99	@cond_branch
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L99:
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	ldr	r4, .L110
	cmp	r5, #0x3
	ble	.L100	@cond_branch
.L96:
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	mov	r0, r9
	cmp	r0, #0
	bne	.L106	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L106:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L111:
	.align	2, 0
.L110:
	.word	gContestResources
.Lfe15:
	.size	 ContestEffect_StartleMonWithJudgesAttention,.Lfe15-ContestEffect_StartleMonWithJudgesAttention
	.align	2, 0
	.type	 ContestEffect_JamsOthersButMissOneTurn,function
	.thumb_func
ContestEffect_JamsOthersButMissOneTurn:
	push	{r4, lr}
	ldr	r4, .L113
	ldr	r1, [r4]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x11]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	bl	ContestEffect_StartlePrevMons
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r4}
	pop	{r0}
	bx	r0
.L114:
	.align	2, 0
.L113:
	.word	gContestResources
.Lfe16:
	.size	 ContestEffect_JamsOthersButMissOneTurn,.Lfe16-ContestEffect_JamsOthersButMissOneTurn
	.align	2, 0
	.type	 ContestEffect_StartleMonsSameTypeAppeal,function
	.thumb_func
ContestEffect_StartleMonsSameTypeAppeal:
	push	{r4, lr}
	ldr	r4, .L116
	ldr	r1, [r4]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	ldr	r1, .L116+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	bl	JamByMoveCategory
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r4}
	pop	{r0}
	bx	r0
.L117:
	.align	2, 0
.L116:
	.word	gContestResources
	.word	gContestMoves
.Lfe17:
	.size	 ContestEffect_StartleMonsSameTypeAppeal,.Lfe17-ContestEffect_StartleMonsSameTypeAppeal
	.align	2, 0
	.type	 ContestEffect_StartleMonsCoolAppeal,function
	.thumb_func
ContestEffect_StartleMonsCoolAppeal:
	push	{lr}
	mov	r0, #0x0
	bl	JamByMoveCategory
	ldr	r0, .L119
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L120:
	.align	2, 0
.L119:
	.word	gContestResources
.Lfe18:
	.size	 ContestEffect_StartleMonsCoolAppeal,.Lfe18-ContestEffect_StartleMonsCoolAppeal
	.align	2, 0
	.type	 ContestEffect_StartleMonsBeautyAppeal,function
	.thumb_func
ContestEffect_StartleMonsBeautyAppeal:
	push	{lr}
	mov	r0, #0x1
	bl	JamByMoveCategory
	ldr	r0, .L122
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L123:
	.align	2, 0
.L122:
	.word	gContestResources
.Lfe19:
	.size	 ContestEffect_StartleMonsBeautyAppeal,.Lfe19-ContestEffect_StartleMonsBeautyAppeal
	.align	2, 0
	.type	 ContestEffect_StartleMonsCuteAppeal,function
	.thumb_func
ContestEffect_StartleMonsCuteAppeal:
	push	{lr}
	mov	r0, #0x2
	bl	JamByMoveCategory
	ldr	r0, .L125
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gContestResources
.Lfe20:
	.size	 ContestEffect_StartleMonsCuteAppeal,.Lfe20-ContestEffect_StartleMonsCuteAppeal
	.align	2, 0
	.type	 ContestEffect_StartleMonsSmartAppeal,function
	.thumb_func
ContestEffect_StartleMonsSmartAppeal:
	push	{lr}
	mov	r0, #0x3
	bl	JamByMoveCategory
	ldr	r0, .L128
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L129:
	.align	2, 0
.L128:
	.word	gContestResources
.Lfe21:
	.size	 ContestEffect_StartleMonsSmartAppeal,.Lfe21-ContestEffect_StartleMonsSmartAppeal
	.align	2, 0
	.type	 ContestEffect_StartleMonsToughAppeal,function
	.thumb_func
ContestEffect_StartleMonsToughAppeal:
	push	{lr}
	mov	r0, #0x4
	bl	JamByMoveCategory
	ldr	r0, .L131
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r0}
	bx	r0
.L132:
	.align	2, 0
.L131:
	.word	gContestResources
.Lfe22:
	.size	 ContestEffect_StartleMonsToughAppeal,.Lfe22-ContestEffect_StartleMonsToughAppeal
	.align	2, 0
	.type	 ContestEffect_MakeFollowingMonNervous,function
	.thumb_func
ContestEffect_MakeFollowingMonNervous:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r2, .L145
	ldr	r0, [r2]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x11]
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r6, r2, #0
	cmp	r0, #0x3
	beq	.L134	@cond_branch
	mov	r5, #0x0
.L138:
	ldr	r0, .L145
	ldr	r0, [r0]
	ldr	r1, [r0, #0x8]
	ldrb	r0, [r1, #0x11]
	add	r0, r1, r0
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	add	r1, r1, r5
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L137	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	CanUnnerveContestant
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L140	@cond_branch
	add	r0, r4, #0
	bl	MakeContestantNervous
	add	r0, r4, #0
	mov	r1, #0xa
	b	.L144
.L146:
	.align	2, 0
.L145:
	.word	gContestResources
.L140:
	add	r0, r4, #0
	mov	r1, #0x3c
.L144:
	bl	SetContestantEffectStringID
	mov	r4, #0x1
.L137:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L138	@cond_branch
.L134:
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x9
	bl	SetContestantEffectStringID
	cmp	r4, #0
	bne	.L143	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L143:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 ContestEffect_MakeFollowingMonNervous,.Lfe23-ContestEffect_MakeFollowingMonNervous
	.align	2, 0
	.type	 ContestEffect_MakeFollowingMonsNervous,function
	.thumb_func
ContestEffect_MakeFollowingMonsNervous:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x1c
	mov	r0, #0x0
	mov	r9, r0
	mov	r1, #0x0
	str	r1, [sp, #0x18]
	mov	r0, sp
	mov	r1, #0xff
	mov	r2, #0x5
	bl	memset
	mov	r5, #0x0
	mov	r4, #0x0
	add	r2, sp, #0x10
	mov	r8, r2
	add	r3, sp, #0x8
	mov	sl, r3
	mov	r6, #0x0
.L151:
	ldr	r0, .L186
	ldr	r2, [r0]
	ldr	r1, [r2, #0x8]
	ldrb	r0, [r1, #0x11]
	add	r0, r1, r0
	add	r1, r1, r5
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L150	@cond_branch
	ldr	r0, [r2, #0x4]
	add	r0, r6, r0
	ldrb	r1, [r0, #0xc]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L150	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	Contest_IsMonsTurnDisabled
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L150	@cond_branch
	mov	r1, sp
	add	r0, r1, r4
	strb	r5, [r0]
	add	r4, r4, #0x1
.L150:
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L151	@cond_branch
	cmp	r4, #0x1
	bne	.L154	@cond_branch
	mov	r0, #0x3c
	mov	r2, r8
	strh	r0, [r2]
	b	.L155
.L187:
	.align	2, 0
.L186:
	.word	gContestResources
.L154:
	cmp	r4, #0x2
	bne	.L156	@cond_branch
	mov	r0, #0x1e
	mov	r3, r8
	strh	r0, [r3]
	strh	r0, [r3, #0x2]
	b	.L155
.L156:
	cmp	r4, #0x3
	bne	.L158	@cond_branch
	mov	r0, #0x14
	mov	r6, r8
	strh	r0, [r6]
	strh	r0, [r6, #0x2]
	strh	r0, [r6, #0x4]
	b	.L155
.L158:
	mov	r1, r8
	mov	r2, #0x0
	mov	r0, r8
	add	r0, r0, #0x6
.L163:
	strh	r2, [r0]
	sub	r0, r0, #0x2
	cmp	r0, r1
	bge	.L163	@cond_branch
.L155:
	mov	r5, #0x0
	ldr	r7, .L188
	mov	r6, #0x0
	mov	r4, sl
.L168:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrb	r1, [r0, #0x15]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L169	@cond_branch
	lsl	r0, r5, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80DE1E8
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L169	@cond_branch
	ldr	r0, [r7]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrh	r0, [r0, #0x8]
	lsl	r0, r0, #0x3
	ldr	r1, .L188+0x4
	add	r0, r0, r1
	ldrb	r0, [r0, #0x2]
	ldr	r2, .L188+0x8
	add	r0, r0, r2
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x1
	b	.L185
.L189:
	.align	2, 0
.L188:
	.word	gContestResources
	.word	gContestMoves
	.word	gComboStarterLookupTable
.L169:
	mov	r0, #0x0
.L185:
	strh	r0, [r4]
	ldr	r0, [r7]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrb	r0, [r0, #0xd]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	mov	r1, #0xa
	bl	__divsi3
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrh	r0, [r4]
	sub	r0, r0, r1
	strh	r0, [r4]
	add	r6, r6, #0x1c
	add	r4, r4, #0x2
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L168	@cond_branch
	mov	r3, r8
	mov	r6, #0x0
	ldrsh	r0, [r3, r6]
	cmp	r0, #0
	beq	.L172	@cond_branch
	mov	r5, #0x0
	mov	r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L172	@cond_branch
	mov	r4, sp
.L176:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x64
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r5, #0x1
	add	r1, r1, r8
	mov	r3, #0x0
	ldrsh	r2, [r1, r3]
	ldrb	r3, [r4]
	lsl	r1, r3, #0x1
	add	r1, r1, sl
	mov	r6, #0x0
	ldrsh	r1, [r1, r6]
	add	r2, r2, r1
	cmp	r0, r2
	bge	.L177	@cond_branch
	add	r0, r3, #0
	bl	CanUnnerveContestant
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L184	@cond_branch
	ldrb	r0, [r4]
	bl	MakeContestantNervous
	ldrb	r0, [r4]
	mov	r1, #0xa
	bl	SetContestantEffectStringID
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	b	.L180
.L177:
	mov	r0, #0x1
	str	r0, [sp, #0x18]
.L180:
	ldr	r1, [sp, #0x18]
	cmp	r1, #0
	beq	.L181	@cond_branch
.L184:
	mov	r2, #0x0
	str	r2, [sp, #0x18]
	ldrb	r0, [r4]
	mov	r1, #0x3c
	bl	SetContestantEffectStringID
	mov	r0, r9
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L181:
	ldr	r0, .L190
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0xd
	ldrb	r3, [r4]
	add	r0, r0, r3
	mov	r1, #0x1
	strb	r1, [r0]
	add	r4, r4, #0x1
	add	r5, r5, #0x1
	ldrb	r0, [r4]
	cmp	r0, #0xff
	bne	.L176	@cond_branch
.L172:
	ldr	r6, .L190
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0xb
	bl	SetContestantEffectStringID
	mov	r0, r9
	cmp	r0, #0
	bne	.L183	@cond_branch
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L183:
	add	sp, sp, #0x1c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	gContestResources
.Lfe24:
	.size	 ContestEffect_MakeFollowingMonsNervous,.Lfe24-ContestEffect_MakeFollowingMonsNervous
	.align	2, 0
	.type	 ContestEffect_WorsenConditionOfPrevMons,function
	.thumb_func
ContestEffect_WorsenConditionOfPrevMons:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0x0
	mov	r8, r0
	mov	r6, #0x0
	ldr	r7, .L200
	mov	r5, #0x0
.L196:
	ldr	r2, [r7]
	ldr	r0, [r2, #0x8]
	ldrb	r1, [r0, #0x11]
	add	r1, r0, r1
	add	r0, r0, r6
	ldrb	r1, [r1]
	ldrb	r0, [r0]
	cmp	r1, r0
	bls	.L195	@cond_branch
	ldr	r0, [r2, #0x4]
	add	r0, r5, r0
	ldrb	r0, [r0, #0xd]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L195	@cond_branch
	lsl	r0, r6, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	CanUnnerveContestant
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L195	@cond_branch
	ldr	r0, [r7]
	ldr	r0, [r0, #0x4]
	add	r0, r5, r0
	mov	r1, #0x0
	strb	r1, [r0, #0xd]
	ldr	r0, [r7]
	ldr	r2, [r0, #0x4]
	add	r2, r5, r2
	ldrb	r1, [r2, #0x10]
	mov	r3, #0x31
	neg	r3, r3
	add	r0, r3, #0
	and	r1, r1, r0
	mov	r0, #0x20
	orr	r1, r1, r0
	strb	r1, [r2, #0x10]
	add	r0, r4, #0
	mov	r1, #0xd
	bl	SetContestantEffectStringID
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L195:
	add	r5, r5, #0x1c
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L196	@cond_branch
	ldr	r4, .L200
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0xc
	bl	SetContestantEffectStringID
	mov	r0, r8
	cmp	r0, #0
	bne	.L199	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x39
	bl	SetContestantEffectStringID2
.L199:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L201:
	.align	2, 0
.L200:
	.word	gContestResources
.Lfe25:
	.size	 ContestEffect_WorsenConditionOfPrevMons,.Lfe25-ContestEffect_WorsenConditionOfPrevMons
	.align	2, 0
	.type	 ContestEffect_BadlyStartlesMonsInGoodCondition,function
	.thumb_func
ContestEffect_BadlyStartlesMonsInGoodCondition:
	push	{r4, r5, r6, r7, lr}
	mov	r7, #0x0
	mov	r4, #0x0
	ldr	r5, .L214
	mov	r6, #0x0
.L206:
	ldr	r3, [r5]
	ldr	r2, [r3, #0x8]
	ldrb	r0, [r2, #0x11]
	add	r0, r2, r0
	add	r1, r2, r4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L205	@cond_branch
	ldr	r0, [r3, #0x4]
	add	r0, r6, r0
	ldrb	r0, [r0, #0xd]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	ble	.L208	@cond_branch
	mov	r0, #0x28
	b	.L213
.L215:
	.align	2, 0
.L214:
	.word	gContestResources
.L208:
	mov	r0, #0xa
.L213:
	strh	r0, [r2, #0x4]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x8]
	strb	r4, [r0, #0x8]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x8]
	mov	r0, #0xff
	strb	r0, [r1, #0x9]
	bl	WasAtLeastOneOpponentJammed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L205	@cond_branch
	add	r0, r7, #0x1
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
.L205:
	add	r6, r6, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L206	@cond_branch
	ldr	r4, .L216
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0xe
	bl	SetContestantEffectStringID
	cmp	r7, #0
	bne	.L212	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x39
	bl	SetContestantEffectStringID2
.L212:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L217:
	.align	2, 0
.L216:
	.word	gContestResources
.Lfe26:
	.size	 ContestEffect_BadlyStartlesMonsInGoodCondition,.Lfe26-ContestEffect_BadlyStartlesMonsInGoodCondition
	.align	2, 0
	.type	 ContestEffect_BetterIfFirst,function
	.thumb_func
ContestEffect_BetterIfFirst:
	push	{r4, lr}
	ldr	r1, .L220
	ldr	r0, .L220+0x4
	ldr	r4, [r0]
	ldr	r0, [r4, #0x8]
	ldrb	r2, [r0, #0x11]
	add	r1, r2, r1
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L219	@cond_branch
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	ldr	r3, .L220+0x8
	ldr	r2, .L220+0xc
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	ldrh	r2, [r1, #0x2]
	add	r0, r0, r2
	strh	r0, [r1, #0x2]
	ldr	r0, [r4, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0xf
	bl	SetContestantEffectStringID
.L219:
	pop	{r4}
	pop	{r0}
	bx	r0
.L221:
	.align	2, 0
.L220:
	.word	gContestantTurnOrder
	.word	gContestResources
	.word	gContestEffects
	.word	gContestMoves
.Lfe27:
	.size	 ContestEffect_BetterIfFirst,.Lfe27-ContestEffect_BetterIfFirst
	.align	2, 0
	.type	 ContestEffect_BetterIfLast,function
	.thumb_func
ContestEffect_BetterIfLast:
	push	{r4, lr}
	ldr	r1, .L224
	ldr	r0, .L224+0x4
	ldr	r4, [r0]
	ldr	r0, [r4, #0x8]
	ldrb	r2, [r0, #0x11]
	add	r1, r2, r1
	ldrb	r0, [r1]
	cmp	r0, #0x3
	bne	.L223	@cond_branch
	ldr	r0, [r4, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	ldr	r3, .L224+0x8
	ldr	r2, .L224+0xc
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	ldrh	r2, [r1, #0x2]
	add	r0, r0, r2
	strh	r0, [r1, #0x2]
	ldr	r0, [r4, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x10
	bl	SetContestantEffectStringID
.L223:
	pop	{r4}
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	gContestantTurnOrder
	.word	gContestResources
	.word	gContestEffects
	.word	gContestMoves
.Lfe28:
	.size	 ContestEffect_BetterIfLast,.Lfe28-ContestEffect_BetterIfLast
	.align	2, 0
	.type	 ContestEffect_AppealAsGoodAsPrevOnes,function
	.thumb_func
ContestEffect_AppealAsGoodAsPrevOnes:
	push	{r4, r5, r6, r7, lr}
	mov	r1, #0x0
	mov	r5, #0x0
	ldr	r0, .L237
	ldr	r4, [r0]
	ldr	r2, [r4, #0x8]
	ldrb	r0, [r2, #0x11]
	add	r0, r2, r0
	ldrb	r6, [r0]
	mov	r3, #0x0
.L230:
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r6, r0
	bls	.L229	@cond_branch
	ldr	r0, [r4, #0x4]
	add	r0, r3, r0
	mov	r7, #0x2
	ldrsh	r0, [r0, r7]
	add	r5, r5, r0
.L229:
	add	r3, r3, #0x1c
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L230	@cond_branch
	cmp	r5, #0
	bge	.L233	@cond_branch
	mov	r5, #0x0
.L233:
	ldr	r0, .L237
	ldr	r3, [r0]
	ldr	r0, [r3, #0x8]
	ldrb	r2, [r0, #0x11]
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L235	@cond_branch
	cmp	r5, #0
	bne	.L234	@cond_branch
.L235:
	add	r0, r2, #0
	mov	r1, #0x12
	bl	SetContestantEffectStringID
	b	.L236
.L238:
	.align	2, 0
.L237:
	.word	gContestResources
.L234:
	ldr	r0, [r3, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	lsr	r0, r5, #0x1f
	add	r0, r5, r0
	asr	r0, r0, #0x1
	ldrh	r2, [r1, #0x2]
	add	r0, r0, r2
	strh	r0, [r1, #0x2]
	ldr	r0, [r3, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x11
	bl	SetContestantEffectStringID
.L236:
	ldr	r4, .L239
	ldr	r1, [r4]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	mov	r7, #0x2
	ldrsh	r0, [r0, r7]
	bl	RoundTowardsZero
	ldr	r2, [r4]
	ldr	r1, [r2, #0x8]
	ldrb	r3, [r1, #0x11]
	ldr	r2, [r2, #0x4]
	lsl	r1, r3, #0x3
	sub	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	strh	r0, [r1, #0x2]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L240:
	.align	2, 0
.L239:
	.word	gContestResources
.Lfe29:
	.size	 ContestEffect_AppealAsGoodAsPrevOnes,.Lfe29-ContestEffect_AppealAsGoodAsPrevOnes
	.align	2, 0
	.type	 ContestEffect_AppealAsGoodAsPrevOne,function
	.thumb_func
ContestEffect_AppealAsGoodAsPrevOne:
	push	{r4, r5, r6, r7, lr}
	mov	r6, #0x0
	ldr	r0, .L252
	ldr	r4, [r0]
	ldr	r2, [r4, #0x8]
	ldrb	r1, [r2, #0x11]
	add	r3, r2, r1
	ldrb	r1, [r3]
	add	r7, r0, #0
	cmp	r1, #0
	beq	.L250	@cond_branch
	mov	r1, #0x0
	add	r5, r4, #0
	add	r4, r2, #0
	ldrb	r0, [r3]
	sub	r3, r0, #0x1
	mov	r2, #0x0
.L246:
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r3, r0
	bne	.L245	@cond_branch
	ldr	r0, [r5, #0x4]
	add	r0, r2, r0
	ldrh	r6, [r0, #0x2]
.L245:
	add	r2, r2, #0x1c
	add	r1, r1, #0x1
	cmp	r1, #0x3
	ble	.L246	@cond_branch
	ldr	r3, [r7]
	ldr	r0, [r3, #0x8]
	ldrb	r2, [r0, #0x11]
	add	r0, r0, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L250	@cond_branch
	lsl	r0, r6, #0x10
	asr	r4, r0, #0x10
	cmp	r4, #0
	bgt	.L249	@cond_branch
.L250:
	ldr	r0, [r7]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x14
	bl	SetContestantEffectStringID
	b	.L251
.L253:
	.align	2, 0
.L252:
	.word	gContestResources
.L249:
	ldr	r1, [r3, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r1, [r0, #0x2]
	add	r1, r4, r1
	strh	r1, [r0, #0x2]
	ldr	r0, [r3, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x13
	bl	SetContestantEffectStringID
.L251:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 ContestEffect_AppealAsGoodAsPrevOne,.Lfe30-ContestEffect_AppealAsGoodAsPrevOne
	.align	2, 0
	.type	 ContestEffect_BetterWhenLater,function
	.thumb_func
ContestEffect_BetterWhenLater:
	push	{r4, r5, lr}
	ldr	r1, .L264
	ldr	r3, [r1]
	ldr	r0, [r3, #0x8]
	ldrb	r2, [r0, #0x11]
	add	r0, r0, r2
	ldrb	r4, [r0]
	add	r5, r1, #0
	cmp	r4, #0
	bne	.L255	@cond_branch
	ldr	r0, [r3, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0xa
	b	.L263
.L265:
	.align	2, 0
.L264:
	.word	gContestResources
.L255:
	ldr	r0, [r3, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x2
.L263:
	strh	r0, [r1, #0x2]
	cmp	r4, #0
	bne	.L257	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x15
	bl	SetContestantEffectStringID
	b	.L258
.L257:
	cmp	r4, #0x1
	bne	.L259	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x16
	bl	SetContestantEffectStringID
	b	.L258
.L259:
	cmp	r4, #0x2
	bne	.L261	@cond_branch
	ldr	r0, [r5]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x17
	bl	SetContestantEffectStringID
	b	.L258
.L261:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x18
	bl	SetContestantEffectStringID
.L258:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 ContestEffect_BetterWhenLater,.Lfe31-ContestEffect_BetterWhenLater
	.align	2, 0
	.type	 ContestEffect_QualityDependsOnTiming,function
	.thumb_func
ContestEffect_QualityDependsOnTiming:
	push	{r4, lr}
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0x2
	bhi	.L267	@cond_branch
	mov	r4, #0xa
	ldr	r0, .L275
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1a
	bl	SetContestantEffectStringID
	b	.L268
.L276:
	.align	2, 0
.L275:
	.word	gContestResources
.L267:
	cmp	r0, #0x5
	bhi	.L269	@cond_branch
	mov	r4, #0x14
	ldr	r0, .L277
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1b
	bl	SetContestantEffectStringID
	b	.L268
.L278:
	.align	2, 0
.L277:
	.word	gContestResources
.L269:
	cmp	r0, #0x7
	bhi	.L271	@cond_branch
	mov	r4, #0x28
	ldr	r0, .L279
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1c
	bl	SetContestantEffectStringID
	b	.L268
.L280:
	.align	2, 0
.L279:
	.word	gContestResources
.L271:
	cmp	r1, #0x8
	bhi	.L273	@cond_branch
	mov	r4, #0x3c
	ldr	r0, .L281
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1d
	bl	SetContestantEffectStringID
	b	.L268
.L282:
	.align	2, 0
.L281:
	.word	gContestResources
.L273:
	mov	r4, #0x50
	ldr	r0, .L283
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1e
	bl	SetContestantEffectStringID
.L268:
	ldr	r0, .L283
	ldr	r1, [r0]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r4, [r0, #0x2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	gContestResources
.Lfe32:
	.size	 ContestEffect_QualityDependsOnTiming,.Lfe32-ContestEffect_QualityDependsOnTiming
	.align	2, 0
	.type	 ContestEffect_BetterIfSameType,function
	.thumb_func
ContestEffect_BetterIfSameType:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r2, .L302
	ldr	r0, [r2]
	ldr	r3, [r0, #0x8]
	ldrb	r0, [r3, #0x11]
	add	r0, r3, r0
	mov	r1, #0x0
	ldrsb	r1, [r0, r1]
	sub	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r8, r2
	cmp	r1, #0
	beq	.L285	@cond_branch
	mov	r7, r8
	ldrb	r6, [r3]
.L289:
	mov	r2, #0x0
	lsl	r0, r4, #0x18
	asr	r1, r0, #0x18
	add	r5, r0, #0
	cmp	r6, r1
	beq	.L291	@cond_branch
	ldr	r4, .L302
.L292:
	lsl	r0, r2, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r2, r0, #0x18
	asr	r3, r0, #0x18
	cmp	r3, #0x3
	bgt	.L291	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	add	r0, r0, r3
	ldrb	r0, [r0]
	cmp	r0, r1
	bne	.L292	@cond_branch
.L291:
	ldr	r0, [r7]
	lsl	r3, r2, #0x18
	asr	r1, r3, #0x18
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	mov	ip, r3
	cmp	r0, #0
	bne	.L297	@cond_branch
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L288	@cond_branch
.L297:
	mov	r1, #0xff
	lsl	r1, r1, #0x18
	add	r0, r5, r1
	lsr	r4, r0, #0x18
	cmp	r0, #0
	blt	.L285	@cond_branch
	b	.L289
.L303:
	.align	2, 0
.L302:
	.word	gContestResources
.L288:
	mov	r2, r8
	ldr	r6, [r2]
	ldr	r0, [r6, #0x8]
	ldrb	r1, [r0, #0x11]
	ldr	r4, [r6, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r5, r0, r4
	ldrh	r0, [r5, #0x6]
	ldr	r3, .L304
	lsl	r0, r0, #0x3
	add	r7, r0, r3
	ldrb	r2, [r7, #0x1]
	lsl	r2, r2, #0x1d
	mov	r0, ip
	asr	r1, r0, #0x18
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r0, [r0, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r2, r0
	bne	.L285	@cond_branch
	ldr	r1, .L304+0x4
	ldrb	r0, [r7]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	ldrh	r1, [r5, #0x2]
	add	r0, r0, r1
	strh	r0, [r5, #0x2]
	ldr	r0, [r6, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1f
	bl	SetContestantEffectStringID
.L285:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L305:
	.align	2, 0
.L304:
	.word	gContestMoves
	.word	gContestEffects
.Lfe33:
	.size	 ContestEffect_BetterIfSameType,.Lfe33-ContestEffect_BetterIfSameType
	.align	2, 0
	.type	 ContestEffect_BetterIfDiffType,function
	.thumb_func
ContestEffect_BetterIfDiffType:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r0, .L314
	ldr	r3, [r0]
	ldr	r1, [r3, #0x8]
	ldrb	r2, [r1, #0x11]
	add	r1, r1, r2
	ldrb	r1, [r1]
	mov	r9, r0
	cmp	r1, #0
	beq	.L307	@cond_branch
	ldr	r1, [r3, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x6]
	mov	r8, r0
	mov	r6, #0x0
	ldr	r0, .L314+0x4
	mov	ip, r0
	mov	r7, #0x0
.L311:
	mov	r1, r9
	ldr	r4, [r1]
	ldr	r0, [r4, #0x8]
	ldrb	r2, [r0, #0x11]
	add	r1, r0, r2
	ldrb	r1, [r1]
	sub	r1, r1, #0x1
	add	r0, r0, r6
	ldrb	r0, [r0]
	cmp	r1, r0
	bne	.L310	@cond_branch
	mov	r1, r8
	lsl	r0, r1, #0x3
	mov	r1, ip
	add	r5, r0, r1
	ldrb	r1, [r5, #0x1]
	lsl	r1, r1, #0x1d
	ldr	r3, [r4, #0x4]
	add	r0, r7, r3
	ldrh	r0, [r0, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, ip
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	cmp	r1, r0
	beq	.L310	@cond_branch
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldr	r2, .L314+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1
	ldrh	r2, [r1, #0x2]
	add	r0, r0, r2
	strh	r0, [r1, #0x2]
	ldr	r0, [r4, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x20
	bl	SetContestantEffectStringID
	b	.L307
.L315:
	.align	2, 0
.L314:
	.word	gContestResources
	.word	gContestMoves
	.word	gContestEffects
.L310:
	add	r7, r7, #0x1c
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L311	@cond_branch
.L307:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 ContestEffect_BetterIfDiffType,.Lfe34-ContestEffect_BetterIfDiffType
	.align	2, 0
	.type	 ContestEffect_AffectedByPrevAppeal,function
	.thumb_func
ContestEffect_AffectedByPrevAppeal:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L327
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x11]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L317	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x0
.L321:
	ldr	r0, .L327
	ldr	r4, [r0]
	ldr	r1, [r4, #0x8]
	ldrb	r2, [r1, #0x11]
	add	r0, r1, r2
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	add	r1, r1, r5
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L320	@cond_branch
	ldr	r1, [r4, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r0, r1
	add	r1, r6, r1
	mov	r0, #0x2
	ldrsh	r2, [r3, r0]
	mov	r7, #0x2
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	ble	.L323	@cond_branch
	add	r0, r2, #0
	lsl	r0, r0, #0x1
	strh	r0, [r3, #0x2]
	ldr	r0, [r4, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x21
	bl	SetContestantEffectStringID
	b	.L320
.L328:
	.align	2, 0
.L327:
	.word	gContestResources
.L323:
	cmp	r2, r0
	bge	.L320	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0x2]
	ldr	r0, [r4, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x22
	bl	SetContestantEffectStringID
.L320:
	add	r6, r6, #0x1c
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L321	@cond_branch
.L317:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 ContestEffect_AffectedByPrevAppeal,.Lfe35-ContestEffect_AffectedByPrevAppeal
	.align	2, 0
	.type	 ContestEffect_ImproveConditionPreventNervousness,function
	.thumb_func
ContestEffect_ImproveConditionPreventNervousness:
	push	{r4, lr}
	ldr	r4, .L332
	ldr	r1, [r4]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r1, r0, r1
	ldrb	r3, [r1, #0xd]
	mov	r0, #0xd
	ldrsb	r0, [r1, r0]
	cmp	r0, #0x1d
	bgt	.L330	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xa
	strb	r0, [r1, #0xd]
	ldr	r1, [r4]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x10]
	mov	r1, #0x31
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x10
	orr	r1, r1, r2
	strb	r1, [r0, #0x10]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x23
	bl	SetContestantEffectStringID
	b	.L331
.L333:
	.align	2, 0
.L332:
	.word	gContestResources
.L330:
	add	r0, r2, #0
	mov	r1, #0x3a
	bl	SetContestantEffectStringID
.L331:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 ContestEffect_ImproveConditionPreventNervousness,.Lfe36-ContestEffect_ImproveConditionPreventNervousness
	.align	2, 0
	.type	 ContestEffect_BetterWithGoodCondition,function
	.thumb_func
ContestEffect_BetterWithGoodCondition:
	push	{lr}
	ldr	r3, .L337
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x11]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldr	r1, [r3]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0xd]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	beq	.L335	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x24
	bl	SetContestantEffectStringID
	b	.L336
.L338:
	.align	2, 0
.L337:
	.word	gContestResources
.L335:
	add	r0, r2, #0
	mov	r1, #0x3b
	bl	SetContestantEffectStringID
.L336:
	pop	{r0}
	bx	r0
.Lfe37:
	.size	 ContestEffect_BetterWithGoodCondition,.Lfe37-ContestEffect_BetterWithGoodCondition
	.align	2, 0
	.type	 ContestEffect_NextAppealEarlier,function
	.thumb_func
ContestEffect_NextAppealEarlier:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L363
	ldr	r2, [r0]
	ldr	r1, [r2]
	ldrb	r1, [r1, #0x1]
	mov	ip, r0
	cmp	r1, #0x4
	bne	.LCB2915
	b	.L340	@long jump
.LCB2915:
	mov	r6, #0x0
	add	r4, r2, #0
.L344:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	mov	r0, sp
	add	r3, r0, r1
	ldr	r2, [r4, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x19]
	strb	r0, [r3]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x3
	ble	.L344	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r2, sp
	add	r1, r2, r0
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r6, #0x0
	mov	r3, ip
	ldr	r7, [r3]
.L349:
	mov	r5, #0x0
.L353:
	lsl	r0, r5, #0x18
	asr	r2, r0, #0x18
	ldr	r0, [r7, #0x8]
	ldrb	r0, [r0, #0x11]
	cmp	r2, r0
	beq	.L352	@cond_branch
	lsl	r0, r6, #0x18
	asr	r3, r0, #0x18
	mov	r0, sp
	add	r4, r0, r2
	ldrb	r1, [r4]
	cmp	r3, r1
	bne	.L352	@cond_branch
	ldr	r0, [r7, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1, #0x19]
	cmp	r0, r1
	bne	.L352	@cond_branch
	add	r0, r3, #0x1
	strb	r0, [r4]
	b	.L351
.L364:
	.align	2, 0
.L363:
	.word	gContestResources
.L352:
	lsl	r0, r5, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r5, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L353	@cond_branch
.L351:
	cmp	r5, #0x4
	beq	.L347	@cond_branch
	lsl	r0, r6, #0x18
	mov	r3, #0x80
	lsl	r3, r3, #0x11
	add	r0, r0, r3
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L349	@cond_branch
.L347:
	mov	r4, ip
	ldr	r1, [r4]
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r3, sp
	add	r2, r3, r0
	mov	r0, #0x0
	strb	r0, [r2]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x10]
	mov	r1, #0x3f
	and	r1, r1, r2
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0, #0x10]
	mov	r6, #0x0
	mov	r3, ip
.L361:
	ldr	r0, [r3]
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r4, sp
	add	r2, r4, r1
	ldrb	r2, [r2]
	strb	r2, [r0, #0x19]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x3
	ble	.L361	@cond_branch
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x11]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x1
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x25
	bl	SetContestantEffectStringID
.L340:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe38:
	.size	 ContestEffect_NextAppealEarlier,.Lfe38-ContestEffect_NextAppealEarlier
	.align	2, 0
	.type	 ContestEffect_NextAppealLater,function
	.thumb_func
ContestEffect_NextAppealLater:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L389
	ldr	r2, [r0]
	ldr	r1, [r2]
	ldrb	r1, [r1, #0x1]
	mov	ip, r0
	cmp	r1, #0x4
	bne	.LCB3146
	b	.L366	@long jump
.LCB3146:
	mov	r6, #0x0
	add	r4, r2, #0
.L370:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	mov	r0, sp
	add	r3, r0, r1
	ldr	r2, [r4, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x19]
	strb	r0, [r3]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x3
	ble	.L370	@cond_branch
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r2, sp
	add	r1, r2, r0
	mov	r0, #0xff
	strb	r0, [r1]
	mov	r6, #0x3
	mov	r3, ip
	ldr	r7, [r3]
	mov	r4, #0x1
	neg	r4, r4
	mov	r8, r4
.L375:
	mov	r5, #0x0
.L379:
	lsl	r0, r5, #0x18
	asr	r2, r0, #0x18
	ldr	r0, [r7, #0x8]
	ldrb	r0, [r0, #0x11]
	cmp	r2, r0
	beq	.L378	@cond_branch
	lsl	r0, r6, #0x18
	asr	r3, r0, #0x18
	mov	r0, sp
	add	r4, r0, r2
	ldrb	r1, [r4]
	cmp	r3, r1
	bne	.L378	@cond_branch
	ldr	r0, [r7, #0x4]
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r1, #0x19]
	cmp	r0, r1
	bne	.L378	@cond_branch
	sub	r0, r3, #0x1
	strb	r0, [r4]
	b	.L377
.L390:
	.align	2, 0
.L389:
	.word	gContestResources
.L378:
	lsl	r0, r5, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r5, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L379	@cond_branch
.L377:
	cmp	r5, #0x4
	beq	.L373	@cond_branch
	lsl	r0, r6, #0x18
	mov	r3, #0xff
	lsl	r3, r3, #0x18
	add	r0, r0, r3
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, r8
	bgt	.L375	@cond_branch
.L373:
	mov	r4, ip
	ldr	r1, [r4]
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r3, sp
	add	r2, r3, r0
	mov	r0, #0x3
	strb	r0, [r2]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x10]
	mov	r1, #0x3f
	and	r1, r1, r2
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r0, #0x10]
	mov	r6, #0x0
	mov	r3, ip
.L387:
	ldr	r0, [r3]
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	ldr	r2, [r0, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r4, sp
	add	r2, r4, r1
	ldrb	r2, [r2]
	strb	r2, [r0, #0x19]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x3
	ble	.L387	@cond_branch
	mov	r0, ip
	ldr	r1, [r0]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x11]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	mov	r1, ip
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x26
	bl	SetContestantEffectStringID
.L366:
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe39:
	.size	 ContestEffect_NextAppealLater,.Lfe39-ContestEffect_NextAppealLater
	.align	2, 0
	.type	 ContestEffect_MakeScramblingTurnOrderEasier,function
	.thumb_func
ContestEffect_MakeScramblingTurnOrderEasier:
	bx	lr
.Lfe40:
	.size	 ContestEffect_MakeScramblingTurnOrderEasier,.Lfe40-ContestEffect_MakeScramblingTurnOrderEasier
	.align	2, 0
	.type	 ContestEffect_ScrambleNextTurnOrder,function
	.thumb_func
ContestEffect_ScrambleNextTurnOrder:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x8
	ldr	r0, .L417
	ldr	r1, [r0]
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0x4
	beq	.L393	@cond_branch
	mov	r6, #0x0
	add	r5, sp, #0x4
	add	r4, r1, #0
	add	r7, r5, #0
.L397:
	lsl	r1, r6, #0x18
	asr	r1, r1, #0x18
	mov	r0, sp
	add	r3, r0, r1
	ldr	r2, [r4, #0x4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x19]
	strb	r0, [r3]
	add	r0, r7, r1
	strb	r6, [r0]
	add	r1, r1, #0x1
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	asr	r1, r1, #0x18
	cmp	r1, #0x3
	ble	.L397	@cond_branch
	mov	r6, #0x0
	add	r7, r5, #0
.L402:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r6, #0x18
	asr	r2, r2, #0x18
	mov	r1, #0x4
	sub	r1, r1, r2
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	mov	r1, #0x0
.L406:
	lsl	r0, r1, #0x18
	asr	r2, r0, #0x18
	add	r3, r7, r2
	ldrb	r1, [r3]
	add	r5, r0, #0
	cmp	r1, #0xff
	beq	.L405	@cond_branch
	cmp	r4, #0
	bne	.L408	@cond_branch
	mov	r1, sp
	add	r0, r1, r2
	strb	r6, [r0]
	mov	r0, #0xff
	strb	r0, [r3]
	b	.L401
.L418:
	.align	2, 0
.L417:
	.word	gContestResources
.L408:
	sub	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L405:
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r5, r1
	lsr	r1, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L406	@cond_branch
.L401:
	lsl	r0, r6, #0x18
	mov	r6, #0x80
	lsl	r6, r6, #0x11
	add	r0, r0, r6
	lsr	r6, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0x3
	ble	.L402	@cond_branch
	mov	r6, #0x0
	ldr	r5, .L419
	add	r4, r5, #0
.L415:
	ldr	r0, [r4]
	lsl	r3, r6, #0x18
	asr	r3, r3, #0x18
	ldr	r1, [r0, #0x4]
	lsl	r2, r3, #0x3
	sub	r2, r2, r3
	lsl	r2, r2, #0x2
	add	r1, r2, r1
	mov	r6, sp
	add	r0, r6, r3
	ldrb	r0, [r0]
	strb	r0, [r1, #0x19]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r2, r2, r0
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2, #0x10]
	add	r3, r3, #0x1
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	asr	r3, r3, #0x18
	cmp	r3, #0x3
	ble	.L415	@cond_branch
	ldr	r1, [r5]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x11]
	mov	r2, #0x3
	orr	r1, r1, r2
	strb	r1, [r0, #0x11]
	ldr	r0, [r5]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x27
	bl	SetContestantEffectStringID
.L393:
	add	sp, sp, #0x8
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L420:
	.align	2, 0
.L419:
	.word	gContestResources
.Lfe41:
	.size	 ContestEffect_ScrambleNextTurnOrder,.Lfe41-ContestEffect_ScrambleNextTurnOrder
	.align	2, 0
	.type	 ContestEffect_ExciteAudienceInAnyContest,function
	.thumb_func
ContestEffect_ExciteAudienceInAnyContest:
	push	{lr}
	ldr	r3, .L423
	ldr	r0, .L423+0x4
	ldr	r1, [r0]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrh	r0, [r2, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	ldr	r1, .L423+0x8
	lsr	r0, r0, #0x1d
	ldrh	r1, [r1]
	cmp	r0, r1
	beq	.L422	@cond_branch
	ldrb	r0, [r2, #0x11]
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2, #0x11]
.L422:
	pop	{r0}
	bx	r0
.L424:
	.align	2, 0
.L423:
	.word	gContestMoves
	.word	gContestResources
	.word	gSpecialVar_ContestCategory
.Lfe42:
	.size	 ContestEffect_ExciteAudienceInAnyContest,.Lfe42-ContestEffect_ExciteAudienceInAnyContest
	.align	2, 0
	.type	 ContestEffect_BadlyStartleMonsWithGoodAppeals,function
	.thumb_func
ContestEffect_BadlyStartleMonsWithGoodAppeals:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r0, #0x0
	mov	r8, r0
	mov	r4, #0x0
	ldr	r5, .L436
	mov	r6, #0x0
.L429:
	ldr	r3, [r5]
	ldr	r2, [r3, #0x8]
	ldrb	r0, [r2, #0x11]
	add	r0, r2, r0
	add	r1, r2, r4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L428	@cond_branch
	ldr	r0, [r3, #0x4]
	add	r1, r6, r0
	mov	r7, #0x2
	ldrsh	r0, [r1, r7]
	cmp	r0, #0
	ble	.L431	@cond_branch
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r2, #0x4]
	ldr	r0, [r3, #0x8]
	mov	r1, #0x4
	ldrsh	r0, [r0, r1]
	bl	RoundUp
	ldr	r1, [r5]
	ldr	r1, [r1, #0x8]
	strh	r0, [r1, #0x4]
	b	.L432
.L437:
	.align	2, 0
.L436:
	.word	gContestResources
.L431:
	mov	r0, #0xa
	strh	r0, [r2, #0x4]
.L432:
	ldr	r0, [r5]
	ldr	r0, [r0, #0x8]
	strb	r4, [r0, #0x8]
	ldr	r0, [r5]
	ldr	r1, [r0, #0x8]
	mov	r0, #0xff
	strb	r0, [r1, #0x9]
	bl	WasAtLeastOneOpponentJammed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L428	@cond_branch
	mov	r0, r8
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L428:
	add	r6, r6, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L429	@cond_branch
	mov	r7, r8
	cmp	r7, #0
	bne	.L435	@cond_branch
	ldr	r0, .L438
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L435:
	ldr	r0, .L438
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x30
	bl	SetContestantEffectStringID
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L439:
	.align	2, 0
.L438:
	.word	gContestResources
.Lfe43:
	.size	 ContestEffect_BadlyStartleMonsWithGoodAppeals,.Lfe43-ContestEffect_BadlyStartleMonsWithGoodAppeals
	.align	2, 0
	.type	 ContestEffect_BetterWhenAudienceExcited,function
	.thumb_func
ContestEffect_BetterWhenAudienceExcited:
	push	{r4, lr}
	ldr	r0, .L449
	ldr	r1, [r0]
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x13]
	lsl	r0, r0, #24
	asr	r0, r0, #24
	cmp	r0, #0
	bne	.L441	@cond_branch
	mov	r4, #0xa
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1a
	bl	SetContestantEffectStringID
	b	.L442
.L450:
	.align	2, 0
.L449:
	.word	gContestResources
.L441:
	cmp	r0, #0x1
	bne	.L443	@cond_branch
	mov	r4, #0x14
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1b
	bl	SetContestantEffectStringID
	b	.L442
.L443:
	cmp	r0, #0x2
	bne	.L445	@cond_branch
	mov	r4, #0x1e
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1c
	bl	SetContestantEffectStringID
	b	.L442
.L445:
	cmp	r0, #0x3
	bne	.L447	@cond_branch
	mov	r4, #0x32
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1d
	bl	SetContestantEffectStringID
	b	.L442
.L447:
	mov	r4, #0x3c
	ldr	r0, [r1, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x1e
	bl	SetContestantEffectStringID
.L442:
	ldr	r0, .L451
	ldr	r1, [r0]
	ldr	r0, [r1, #0x8]
	ldrb	r2, [r0, #0x11]
	ldr	r1, [r1, #0x4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	strh	r4, [r0, #0x2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L452:
	.align	2, 0
.L451:
	.word	gContestResources
.Lfe44:
	.size	 ContestEffect_BetterWhenAudienceExcited,.Lfe44-ContestEffect_BetterWhenAudienceExcited
	.align	2, 0
	.type	 ContestEffect_DontExciteAudience,function
	.thumb_func
ContestEffect_DontExciteAudience:
	push	{r4, lr}
	ldr	r4, .L455
	ldr	r0, [r4]
	ldr	r2, [r0, #0x10]
	ldrb	r1, [r2, #0x1]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L454	@cond_branch
	mov	r0, #0x1
	orr	r0, r0, r1
	strb	r0, [r2, #0x1]
	ldr	r0, [r4]
	ldr	r3, [r0, #0x10]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x7
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r3, #0x1]
	mov	r0, #0xf
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x1]
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x3d
	bl	SetContestantEffectStringID
.L454:
	pop	{r4}
	pop	{r0}
	bx	r0
.L456:
	.align	2, 0
.L455:
	.word	gContestResources
.Lfe45:
	.size	 ContestEffect_DontExciteAudience,.Lfe45-ContestEffect_DontExciteAudience
	.align	2, 0
	.type	 JamByMoveCategory,function
	.thumb_func
JamByMoveCategory:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r7, #0x0
	mov	r4, #0x0
	ldr	r6, .L469
	ldr	r0, .L469+0x4
	mov	r9, r0
	mov	r5, #0x0
.L461:
	ldr	r3, [r6]
	ldr	r2, [r3, #0x8]
	ldrb	r0, [r2, #0x11]
	add	r0, r2, r0
	add	r1, r2, r4
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bls	.L460	@cond_branch
	ldr	r0, [r3, #0x4]
	add	r0, r5, r0
	ldrh	r0, [r0, #0x6]
	lsl	r0, r0, #0x3
	add	r0, r0, r9
	ldrb	r0, [r0, #0x1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	cmp	r8, r0
	bne	.L463	@cond_branch
	mov	r0, #0x28
	b	.L468
.L470:
	.align	2, 0
.L469:
	.word	gContestResources
	.word	gContestMoves
.L463:
	mov	r0, #0xa
.L468:
	strh	r0, [r2, #0x4]
	ldr	r0, [r6]
	ldr	r0, [r0, #0x8]
	strb	r4, [r0, #0x8]
	ldr	r0, [r6]
	ldr	r1, [r0, #0x8]
	mov	r0, #0xff
	strb	r0, [r1, #0x9]
	bl	WasAtLeastOneOpponentJammed
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L460	@cond_branch
	add	r7, r7, #0x1
.L460:
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L461	@cond_branch
	cmp	r7, #0
	bne	.L467	@cond_branch
	ldr	r0, .L471
	ldr	r0, [r0]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x11]
	mov	r1, #0x36
	bl	SetContestantEffectStringID2
.L467:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L472:
	.align	2, 0
.L471:
	.word	gContestResources
.Lfe46:
	.size	 JamByMoveCategory,.Lfe46-JamByMoveCategory
	.align	2, 0
	.type	 CanUnnerveContestant,function
	.thumb_func
CanUnnerveContestant:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L482
	ldr	r0, [r2]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0xd
	add	r0, r0, r3
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, [r2]
	ldr	r1, [r0, #0x4]
	lsl	r0, r3, #0x3
	sub	r0, r0, r3
	lsl	r0, r0, #0x2
	add	r2, r0, r1
	ldrb	r1, [r2, #0x10]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L474	@cond_branch
	add	r0, r3, #0
	mov	r1, #0x2d
	b	.L481
.L483:
	.align	2, 0
.L482:
	.word	gContestResources
.L474:
	ldrb	r0, [r2, #0x12]
	cmp	r0, #0
	bne	.L476	@cond_branch
	ldrb	r1, [r2, #0xb]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L478	@cond_branch
	ldrb	r1, [r2, #0xc]
	mov	r0, #0x6
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L478	@cond_branch
	mov	r0, #0x1
	b	.L480
.L476:
	sub	r0, r0, #0x1
	strb	r0, [r2, #0x12]
	add	r0, r3, #0
	mov	r1, #0x2c
.L481:
	bl	SetContestantEffectStringID
.L478:
	mov	r0, #0x0
.L480:
	pop	{r1}
	bx	r1
.Lfe47:
	.size	 CanUnnerveContestant,.Lfe47-CanUnnerveContestant
	.align	2, 0
	.type	 WasAtLeastOneOpponentJammed,function
	.thumb_func
WasAtLeastOneOpponentJammed:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x8
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	mov	r7, #0x0
	ldr	r4, .L503
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	ldrb	r0, [r0, #0x8]
	cmp	r0, #0xff
	beq	.L486	@cond_branch
	mov	r8, r4
.L488:
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0x8
	add	r0, r0, r7
	ldrb	r5, [r0]
	add	r6, r5, #0
	add	r0, r5, #0
	bl	CanUnnerveContestant
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L487	@cond_branch
	ldr	r2, [r4]
	ldr	r1, [r2, #0x8]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r1, #0x6]
	ldr	r1, [r2, #0x4]
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r4, r0, #0x2
	add	r1, r4, r1
	ldrb	r1, [r1, #0x10]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L490	@cond_branch
	ldr	r1, [r2, #0x8]
	mov	r2, #0x6
	ldrsh	r0, [r1, r2]
	lsl	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L490:
	mov	r0, r8
	ldr	r3, [r0]
	ldr	r0, [r3, #0x4]
	add	r1, r4, r0
	ldrb	r0, [r1, #0x10]
	mov	r4, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L491	@cond_branch
	ldr	r1, [r3, #0x8]
	mov	r0, #0xa
	strh	r0, [r1, #0x6]
	add	r0, r5, #0
	mov	r1, #0x2f
	bl	SetContestantEffectStringID
	b	.L487
.L504:
	.align	2, 0
.L503:
	.word	gContestResources
.L491:
	ldr	r2, [r3, #0x8]
	ldrb	r1, [r1, #0xf]
	ldrh	r0, [r2, #0x6]
	sub	r0, r0, r1
	strh	r0, [r2, #0x6]
	ldr	r2, [r3, #0x8]
	ldrh	r1, [r2, #0x6]
	mov	r3, #0x6
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bgt	.L493	@cond_branch
	strh	r4, [r2, #0x6]
	add	r0, r5, #0
	mov	r1, #0x2e
	bl	SetContestantEffectStringID
	b	.L487
.L493:
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r6, #0
	bl	JamContestant
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r0, [r0, #0x8]
	ldrb	r1, [r0, #0x6]
	add	r0, r6, #0
	bl	SetStartledString
	lsl	r0, r6, #0x1
	mov	r2, sp
	add	r1, r2, r0
	mov	r3, r8
	ldr	r0, [r3]
	ldr	r0, [r0, #0x8]
	ldrh	r0, [r0, #0x6]
	strh	r0, [r1]
.L487:
	add	r7, r7, #0x1
	ldr	r4, .L505
	ldr	r0, [r4]
	ldr	r0, [r0, #0x8]
	add	r0, r0, #0x8
	add	r0, r0, r7
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L488	@cond_branch
.L486:
	mov	r7, #0x0
	mov	r1, sp
.L499:
	mov	r2, #0x0
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L498	@cond_branch
	mov	r0, #0x1
	b	.L502
.L506:
	.align	2, 0
.L505:
	.word	gContestResources
.L498:
	add	r1, r1, #0x2
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L499	@cond_branch
	mov	r0, #0x0
.L502:
	add	sp, sp, #0x8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 WasAtLeastOneOpponentJammed,.Lfe48-WasAtLeastOneOpponentJammed
	.align	2, 0
	.type	 JamContestant,function
	.thumb_func
JamContestant:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, .L508
	ldr	r4, [r2]
	ldr	r3, [r4, #0x4]
	lsl	r2, r0, #0x3
	sub	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r3, r2, r3
	ldrh	r0, [r3, #0x2]
	sub	r0, r0, r1
	strh	r0, [r3, #0x2]
	ldr	r0, [r4, #0x4]
	add	r2, r2, r0
	ldrb	r0, [r2, #0xe]
	add	r1, r1, r0
	strb	r1, [r2, #0xe]
	pop	{r4}
	pop	{r0}
	bx	r0
.L509:
	.align	2, 0
.L508:
	.word	gContestResources
.Lfe49:
	.size	 JamContestant,.Lfe49-JamContestant
	.align	2, 0
	.type	 RoundTowardsZero,function
	.thumb_func
RoundTowardsZero:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r4, r0, #0x10
	add	r0, r4, #0
	cmp	r4, #0
	bge	.L511	@cond_branch
	neg	r0, r4
.L511:
	mov	r1, #0xa
	bl	__modsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r4, #0
	bge	.L512	@cond_branch
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L514	@cond_branch
	add	r0, r4, #0
	sub	r0, r0, #0xa
	add	r0, r1, r0
	b	.L515
.L512:
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	sub	r0, r4, r0
.L515:
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L514:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe50:
	.size	 RoundTowardsZero,.Lfe50-RoundTowardsZero
	.align	2, 0
	.type	 RoundUp,function
	.thumb_func
RoundUp:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	asr	r4, r0, #0x10
	add	r0, r4, #0
	cmp	r4, #0
	bge	.L517	@cond_branch
	neg	r0, r4
.L517:
	mov	r1, #0xa
	bl	__modsi3
	lsl	r0, r0, #0x10
	asr	r1, r0, #0x10
	cmp	r1, #0
	beq	.L518	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0xa
	sub	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L518:
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe51:
	.size	 RoundUp,.Lfe51-RoundUp
.text
	.align	2, 0

