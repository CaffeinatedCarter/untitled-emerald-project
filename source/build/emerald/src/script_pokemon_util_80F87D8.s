@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.type	 gUnknown_0858D8EC,object
gUnknown_0858D8EC:
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0xe
	.size	 gUnknown_0858D8EC,4
.text
	.align	2, 0
	.globl	SetContestTrainerGfxIds
	.type	 SetContestTrainerGfxIds,function
	.thumb_func
SetContestTrainerGfxIds:
	push	{r4, lr}
	ldr	r0, .L3
	ldr	r2, [r0]
	ldr	r1, .L3+0x4
	ldrb	r3, [r1, #0x15]
	ldr	r4, .L3+0x8
	add	r0, r2, r4
	strh	r3, [r0]
	add	r0, r1, #0
	add	r0, r0, #0x55
	ldrb	r3, [r0]
	add	r4, r4, #0x2
	add	r0, r2, r4
	strh	r3, [r0]
	add	r1, r1, #0x95
	ldrb	r0, [r1]
	mov	r1, #0x9e
	lsl	r1, r1, #0x5
	add	r2, r2, r1
	strh	r0, [r2]
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gSaveBlock1Ptr
	.word	gContestMons
	.word	0x13bc
.Lfe1:
	.size	 SetContestTrainerGfxIds,.Lfe1-SetContestTrainerGfxIds
	.align	2, 0
	.globl	sub_80F8814
	.type	 sub_80F8814,function
	.thumb_func
sub_80F8814:
	push	{lr}
	ldr	r0, .L13
	ldrb	r0, [r0]
	add	r1, r0, #0
	cmp	r0, #0x1
	beq	.L8	@cond_branch
	cmp	r0, #0x1
	bgt	.L12	@cond_branch
	cmp	r0, #0
	beq	.L7	@cond_branch
	b	.L10
.L14:
	.align	2, 0
.L13:
	.word	gSpecialVar_0x8005
.L12:
	cmp	r1, #0x2
	beq	.L9	@cond_branch
	b	.L10
.L7:
	mov	r1, #0x3
	b	.L6
.L8:
	mov	r1, #0x4
	b	.L6
.L9:
	mov	r1, #0x5
	b	.L6
.L10:
	mov	r1, #0x64
.L6:
	ldr	r0, .L15
	strh	r1, [r0]
	pop	{r0}
	bx	r0
.L16:
	.align	2, 0
.L15:
	.word	gSpecialVar_0x8004
.Lfe2:
	.size	 sub_80F8814,.Lfe2-sub_80F8814
	.align	2, 0
	.globl	BufferContestTrainerAndMonNames
	.type	 BufferContestTrainerAndMonNames,function
	.thumb_func
BufferContestTrainerAndMonNames:
	push	{lr}
	bl	BufferContestantTrainerName
	bl	BufferContestantMonNickname
	bl	BufferContestantMonSpecies
	pop	{r0}
	bx	r0
.Lfe3:
	.size	 BufferContestTrainerAndMonNames,.Lfe3-BufferContestTrainerAndMonNames
	.align	2, 0
	.globl	DoesContestCategoryHaveWinner
	.type	 DoesContestCategoryHaveWinner,function
	.thumb_func
DoesContestCategoryHaveWinner:
	push	{lr}
	ldr	r0, .L29
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L25	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L29+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L30:
	.align	2, 0
.L29:
	.word	gSpecialVar_ContestCategory
	.word	.L26
	.align	2, 0
	.align	2, 0
.L26:
	.word	.L20
	.word	.L21
	.word	.L22
	.word	.L23
	.word	.L25
.L20:
	mov	r1, #0x8
	b	.L19
.L21:
	mov	r1, #0x9
	b	.L19
.L22:
	mov	r1, #0xa
	b	.L19
.L23:
	mov	r1, #0xb
	b	.L19
.L25:
	mov	r1, #0xc
.L19:
	ldr	r0, .L31
	ldr	r0, [r0]
	lsl	r1, r1, #0x5
	add	r0, r0, r1
	ldr	r1, .L31+0x4
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	bne	.L27	@cond_branch
	ldr	r0, .L31+0x8
	strh	r1, [r0]
	b	.L28
.L32:
	.align	2, 0
.L31:
	.word	gSaveBlock1Ptr
	.word	0x2e98
	.word	gSpecialVar_0x8004
.L27:
	ldr	r1, .L33
	mov	r0, #0x1
	strh	r0, [r1]
.L28:
	pop	{r0}
	bx	r0
.L34:
	.align	2, 0
.L33:
	.word	gSpecialVar_0x8004
.Lfe4:
	.size	 DoesContestCategoryHaveWinner,.Lfe4-DoesContestCategoryHaveWinner
	.align	2, 0
	.globl	SaveMuseumContestPainting
	.type	 SaveMuseumContestPainting,function
	.thumb_func
SaveMuseumContestPainting:
	push	{lr}
	mov	r0, #0xff
	bl	sub_80DEDA8
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 SaveMuseumContestPainting,.Lfe5-SaveMuseumContestPainting
	.align	2, 0
	.globl	ShouldReadyContestArtist
	.type	 ShouldReadyContestArtist,function
	.thumb_func
ShouldReadyContestArtist:
	push	{lr}
	ldr	r0, .L40
	ldr	r1, .L40+0x4
	ldrb	r2, [r1]
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L37	@cond_branch
	ldr	r0, .L40+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x3
	bne	.L37	@cond_branch
	ldr	r1, .L40+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L40+0x10
	cmp	r1, r0
	ble	.L37	@cond_branch
	ldr	r1, .L40+0x14
	mov	r0, #0x1
	b	.L39
.L41:
	.align	2, 0
.L40:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestRank
	.word	gUnknown_02039F08
	.word	0x31f
	.word	gSpecialVar_0x8004
.L37:
	ldr	r1, .L42
	mov	r0, #0x0
.L39:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L43:
	.align	2, 0
.L42:
	.word	gSpecialVar_0x8004
.Lfe6:
	.size	 ShouldReadyContestArtist,.Lfe6-ShouldReadyContestArtist
	.align	2, 0
	.globl	CountPlayerContestPaintings
	.type	 CountPlayerContestPaintings,function
	.thumb_func
CountPlayerContestPaintings:
	push	{lr}
	mov	r3, #0x0
	ldr	r0, .L51
	ldr	r0, [r0]
	ldr	r2, .L51+0x4
	add	r1, r0, r2
	mov	r2, #0x4
.L48:
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L47	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L47:
	add	r1, r1, #0x20
	sub	r2, r2, #0x1
	cmp	r2, #0
	bge	.L48	@cond_branch
	add	r0, r3, #0
	pop	{r1}
	bx	r1
.L52:
	.align	2, 0
.L51:
	.word	gSaveBlock1Ptr
	.word	0x2f98
.Lfe7:
	.size	 CountPlayerContestPaintings,.Lfe7-CountPlayerContestPaintings
	.align	2, 0
	.globl	sub_80F8970
	.type	 sub_80F8970,function
	.thumb_func
sub_80F8970:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r0, .L96
	mov	ip, r0
	ldr	r1, .L96+0x4
	mov	r9, r1
	ldr	r2, .L96+0x8
	mov	sl, r2
	mov	r2, ip
	mov	r1, sp
	mov	r6, #0x3
.L57:
	ldrh	r0, [r2]
	strh	r0, [r1]
	add	r2, r2, #0x2
	add	r1, r1, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L57	@cond_branch
	mov	r6, #0x0
.L62:
	mov	r1, #0x3
	cmp	r1, r6
	ble	.L61	@cond_branch
.L66:
	sub	r5, r1, #0x1
	lsl	r0, r5, #0x1
	mov	r4, sp
	add	r3, r4, r0
	lsl	r0, r1, #0x1
	add	r2, r4, r0
	ldrh	r4, [r3]
	mov	r7, #0x0
	ldrsh	r1, [r3, r7]
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	cmp	r1, r0
	bge	.L65	@cond_branch
	strh	r4, [r2]
	strh	r0, [r3]
.L65:
	add	r1, r5, #0
	cmp	r1, r6
	bgt	.L66	@cond_branch
.L61:
	add	r6, r6, #0x1
	cmp	r6, #0x2
	ble	.L62	@cond_branch
	mov	r2, r9
	ldrh	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, sp
	ldrh	r0, [r0]
	mov	r2, #0x0
	mov	r8, r2
	mov	r6, #0x0
	lsl	r0, r0, #0x10
	asr	r4, r0, #0x10
	add	r3, r0, #0
	mov	r1, sp
	mov	r5, r9
.L73:
	mov	r7, #0x0
	ldrsh	r0, [r1, r7]
	cmp	r0, r4
	bne	.L72	@cond_branch
	lsl	r0, r2, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r0, r0, r2
	lsr	r2, r0, #0x18
	ldrh	r7, [r5]
	cmp	r6, r7
	bne	.L72	@cond_branch
	mov	r8, r2
.L72:
	add	r1, r1, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L73	@cond_branch
	mov	r6, #0x0
	mov	r0, sp
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	asr	r1, r3, #0x10
	lsl	r2, r2, #0x18
	mov	r9, r2
	cmp	r0, r1
	beq	.L78	@cond_branch
	add	r2, r1, #0
	mov	r1, sp
.L79:
	add	r1, r1, #0x2
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bgt	.L78	@cond_branch
	mov	r4, #0x0
	ldrsh	r0, [r1, r4]
	cmp	r0, r2
	bne	.L79	@cond_branch
.L78:
	lsl	r0, r6, #0x18
	lsr	r7, r0, #0x18
	mov	r2, r8
	mov	r6, #0x0
	asr	r1, r3, #0x10
	mov	r5, ip
	mov	r4, #0x0
	ldrsh	r0, [r5, r4]
	b	.L94
.L97:
	.align	2, 0
.L96:
	.word	gContestMonConditions
	.word	gSpecialVar_0x8006
	.word	gContestMons+0x2
.L88:
	sub	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L85:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	bgt	.L84	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, ip
	asr	r1, r3, #0x10
	mov	r5, #0x0
	ldrsh	r0, [r0, r5]
.L94:
	cmp	r1, r0
	bne	.L85	@cond_branch
	cmp	r2, #0x1
	bne	.L88	@cond_branch
.L84:
	lsl	r4, r6, #0x6
	mov	r0, sl
	add	r1, r4, r0
	ldr	r0, .L98
	bl	StringCopy
	ldr	r5, .L98+0x4
	mov	r0, sl
	add	r0, r0, #0xb
	add	r4, r4, r0
	add	r0, r5, #0
	add	r1, r4, #0
	bl	StringCopy
	add	r0, r5, #0
	bl	sub_81DB5AC
	mov	r1, r9
	asr	r0, r1, #0x18
	cmp	r0, #0x1
	beq	.L95	@cond_branch
	cmp	r8, r0
	bne	.L92	@cond_branch
.L95:
	ldr	r0, .L98+0x8
	strh	r7, [r0]
	b	.L91
.L99:
	.align	2, 0
.L98:
	.word	gStringVar1
	.word	gStringVar2
	.word	gSpecialVar_0x8006
.L92:
	ldr	r1, .L100
	add	r0, r7, #0x4
	strh	r0, [r1]
.L91:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L101:
	.align	2, 0
.L100:
	.word	gSpecialVar_0x8006
.Lfe8:
	.size	 sub_80F8970,.Lfe8-sub_80F8970
	.align	2, 0
	.type	 ShowContestWinnerCleanup,function
	.thumb_func
ShowContestWinnerCleanup:
	push	{lr}
	ldr	r0, .L103
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L104:
	.align	2, 0
.L103:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe9:
	.size	 ShowContestWinnerCleanup,.Lfe9-ShowContestWinnerCleanup
	.align	2, 0
	.globl	ShowContestWinner
	.type	 ShowContestWinner,function
	.thumb_func
ShowContestWinner:
	push	{lr}
	ldr	r0, .L106
	bl	SetMainCallback2
	ldr	r1, .L106+0x4
	ldr	r0, .L106+0x8
	str	r0, [r1, #0x8]
	pop	{r0}
	bx	r0
.L107:
	.align	2, 0
.L106:
	.word	CB2_ContestPainting
	.word	gMain
	.word	ShowContestWinnerCleanup
.Lfe10:
	.size	 ShowContestWinner,.Lfe10-ShowContestWinner
	.align	2, 0
	.globl	SetLinkContestPlayerGfx
	.type	 SetLinkContestPlayerGfx,function
	.thumb_func
SetLinkContestPlayerGfx:
	push	{r4, r5, lr}
	ldr	r0, .L119
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L109	@cond_branch
	mov	r3, #0x0
	ldr	r0, .L119+0x4
	add	r4, r0, #0
	ldr	r5, .L119+0x8
	ldrb	r0, [r4]
	cmp	r3, r0
	bge	.L111	@cond_branch
	add	r2, r5, #0
	ldr	r1, .L119+0xc
.L113:
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bhi	.L112	@cond_branch
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L115	@cond_branch
	mov	r0, #0xeb
	b	.L118
.L120:
	.align	2, 0
.L119:
	.word	gLinkContestFlags
	.word	gNumLinkContestPlayers
	.word	gContestMons
	.word	gLinkPlayers
.L115:
	mov	r0, #0xec
.L118:
	strb	r0, [r2, #0x15]
.L112:
	add	r2, r2, #0x40
	add	r1, r1, #0x1c
	add	r3, r3, #0x1
	ldrb	r0, [r4]
	cmp	r3, r0
	blt	.L113	@cond_branch
.L111:
	ldr	r0, .L121
	ldrb	r1, [r5, #0x15]
	bl	VarSet
	ldr	r0, .L121+0x4
	add	r1, r5, #0
	add	r1, r1, #0x55
	ldrb	r1, [r1]
	bl	VarSet
	ldr	r0, .L121+0x8
	add	r1, r5, #0
	add	r1, r1, #0x95
	ldrb	r1, [r1]
	bl	VarSet
	ldr	r0, .L121+0xc
	add	r1, r5, #0
	add	r1, r1, #0xd5
	ldrb	r1, [r1]
	bl	VarSet
.L109:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L122:
	.align	2, 0
.L121:
	.word	0x4010
	.word	0x4011
	.word	0x4012
	.word	0x4013
.Lfe11:
	.size	 SetLinkContestPlayerGfx,.Lfe11-SetLinkContestPlayerGfx
	.align	2, 0
	.globl	LoadLinkContestPlayerPalettes
	.type	 LoadLinkContestPlayerPalettes,function
	.thumb_func
LoadLinkContestPlayerPalettes:
	push	{r4, r5, r6, r7, lr}
	ldr	r1, .L137
	mov	r0, #0xc
	strb	r0, [r1]
	ldr	r0, .L137+0x4
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L124	@cond_branch
	mov	r5, #0x0
	ldr	r0, .L137+0x8
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L124	@cond_branch
	mov	r7, #0x0
	mov	r6, #0x60
	mov	r4, #0xb0
	lsl	r4, r4, #0x11
.L128:
	ldr	r0, .L137+0xc
	add	r0, r5, r0
	ldrb	r0, [r0]
	ldr	r1, .L137+0x10
	ldr	r2, [r1]
	ldrb	r1, [r2, #0x5]
	ldrb	r2, [r2, #0x4]
	bl	GetObjectEventIdByLocalIdAndMap
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L137+0x14
	lsl	r1, r0, #0x3
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r0, [r1, #0x4]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L137+0x18
	add	r1, r1, r0
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xf
	and	r0, r0, r2
	orr	r0, r0, r6
	strb	r0, [r1, #0x5]
	ldr	r0, .L137+0x1c
	add	r1, r7, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	cmp	r0, #0x1
	bhi	.L129	@cond_branch
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L130	@cond_branch
	lsr	r1, r4, #0x10
	ldr	r0, .L137+0x20
	b	.L136
.L138:
	.align	2, 0
.L137:
	.word	gReservedSpritePaletteCount
	.word	gLinkContestFlags
	.word	gNumLinkContestPlayers
	.word	gUnknown_0858D8EC
	.word	gSaveBlock1Ptr
	.word	gObjectEvents
	.word	gSprites
	.word	gLinkPlayers
	.word	gObjectEventPalette33
.L130:
	lsr	r1, r4, #0x10
	ldr	r0, .L139
	b	.L136
.L140:
	.align	2, 0
.L139:
	.word	gObjectEventPalette34
.L129:
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L133	@cond_branch
	lsr	r1, r4, #0x10
	ldr	r0, .L141
.L136:
	mov	r2, #0x20
	bl	LoadPalette
	b	.L127
.L142:
	.align	2, 0
.L141:
	.word	gObjectEventPalette8
.L133:
	lsr	r1, r4, #0x10
	ldr	r0, .L143
	mov	r2, #0x20
	bl	LoadPalette
.L127:
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	add	r4, r4, r0
	add	r7, r7, #0x1c
	add	r6, r6, #0x10
	add	r5, r5, #0x1
	ldr	r0, .L143+0x4
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L128	@cond_branch
.L124:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L144:
	.align	2, 0
.L143:
	.word	gObjectEventPalette17
	.word	gNumLinkContestPlayers
.Lfe12:
	.size	 LoadLinkContestPlayerPalettes,.Lfe12-LoadLinkContestPlayerPalettes
	.align	2, 0
	.globl	GiveMonArtistRibbon
	.type	 GiveMonArtistRibbon,function
	.thumb_func
GiveMonArtistRibbon:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r6, .L150
	ldrb	r0, [r6]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L150+0x4
	add	r0, r0, r4
	mov	r1, #0x46
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, sp
	strb	r0, [r1]
	cmp	r0, #0
	bne	.L146	@cond_branch
	ldr	r0, .L150+0x8
	ldr	r1, .L150+0xc
	ldrb	r2, [r1]
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L146	@cond_branch
	ldr	r0, .L150+0x10
	ldrh	r0, [r0]
	cmp	r0, #0x3
	bne	.L146	@cond_branch
	ldr	r1, .L150+0x14
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	ldr	r0, .L150+0x18
	cmp	r1, r0
	ble	.L146	@cond_branch
	mov	r1, #0x1
	mov	r0, sp
	strb	r1, [r0]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x46
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L147	@cond_branch
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x46
	bl	TryPutSpotTheCutiesOnAir
.L147:
	mov	r0, #0x1
	b	.L149
.L151:
	.align	2, 0
.L150:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestRank
	.word	gUnknown_02039F08
	.word	0x31f
.L146:
	mov	r0, #0x0
.L149:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 GiveMonArtistRibbon,.Lfe13-GiveMonArtistRibbon
	.align	2, 0
	.globl	IsContestDebugActive
	.type	 IsContestDebugActive,function
	.thumb_func
IsContestDebugActive:
	mov	r0, #0x0
	bx	lr
.Lfe14:
	.size	 IsContestDebugActive,.Lfe14-IsContestDebugActive
	.align	2, 0
	.globl	ShowContestEntryMonPic
	.type	 ShowContestEntryMonPic,function
	.thumb_func
ShowContestEntryMonPic:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r7, .L160
	add	r0, r7, #0
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0xff
	beq	.LCB1057
	b	.L154	@long jump
.LCB1057:
	bl	AllocateMonSpritesGfx
	mov	r0, #0xa
	mov	r9, r0
	mov	r1, #0x3
	mov	sl, r1
	ldr	r2, .L160+0x4
	ldr	r4, .L160+0x8
	ldrh	r1, [r4]
	lsl	r1, r1, #0x6
	add	r0, r1, r2
	ldrh	r6, [r0]
	add	r0, r2, #0
	add	r0, r0, #0x38
	add	r0, r1, r0
	ldr	r5, [r0]
	add	r2, r2, #0x3c
	add	r1, r1, r2
	ldr	r1, [r1]
	mov	r8, r1
	add	r0, r7, #0
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L160+0xc
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	strh	r6, [r0, #0xa]
	ldr	r1, .L160+0x10
	ldrh	r0, [r4]
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L155	@cond_branch
	lsl	r0, r6, #0x3
	ldr	r1, .L160+0x14
	add	r0, r0, r1
	ldr	r1, .L160+0x18
	ldr	r1, [r1]
	ldr	r1, [r1, #0x8]
	add	r2, r6, #0
	add	r3, r5, #0
	bl	HandleLoadSpecialPokePic_2
	b	.L156
.L161:
	.align	2, 0
.L160:
	.word	Task_ShowContestEntryMonPic
	.word	gContestMons
	.word	gSpecialVar_0x8006
	.word	gTasks
	.word	gContestPlayerMonIndex
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
.L155:
	lsl	r0, r6, #0x3
	ldr	r1, .L162
	add	r0, r0, r1
	ldr	r1, .L162+0x4
	ldr	r1, [r1]
	ldr	r1, [r1, #0x8]
	add	r2, r6, #0
	add	r3, r5, #0
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
.L156:
	add	r0, r6, #0
	mov	r1, r8
	add	r2, r5, #0
	bl	GetMonSpritePalStructFromOtIdPersonality
	add	r4, r0, #0
	bl	LoadCompressedSpritePalette
	add	r0, r6, #0
	mov	r1, #0x1
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L162+0x8
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x2]
	mov	r1, r9
	add	r1, r1, #0x1
	lsl	r1, r1, #0x13
	mov	r2, #0x80
	lsl	r2, r2, #0xe
	add	r1, r1, r2
	asr	r1, r1, #0x10
	mov	r3, sl
	lsl	r2, r3, #0x13
	mov	r3, #0xa0
	lsl	r3, r3, #0xe
	add	r2, r2, r3
	asr	r2, r2, #0x10
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L162+0xc
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L157	@cond_branch
	mov	r0, #0x4
	and	r0, r0, r1
	lsl	r4, r5, #0x4
	cmp	r0, #0
	bne	.L159	@cond_branch
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L162+0x10
	add	r0, r0, r1
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DoMonFrontSpriteAnimation
	b	.L159
.L163:
	.align	2, 0
.L162:
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
	.word	gMultiuseSpriteTemplate
	.word	gLinkContestFlags
	.word	gSprites
.L157:
	lsl	r4, r5, #0x4
	add	r0, r4, r5
	lsl	r0, r0, #0x2
	ldr	r1, .L164
	add	r0, r0, r1
	add	r1, r6, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DoMonFrontSpriteAnimation
.L159:
	ldr	r1, .L164+0x4
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0xc]
	mov	r1, r9
	strh	r1, [r0, #0xe]
	mov	r2, sl
	strh	r2, [r0, #0x10]
	ldr	r3, .L164
	add	r1, r4, r5
	lsl	r1, r1, #0x2
	add	r0, r3, #0
	add	r0, r0, #0x1c
	add	r0, r1, r0
	ldr	r2, .L164+0x8
	str	r2, [r0]
	add	r1, r1, r3
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1, #0x5]
.L154:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L165:
	.align	2, 0
.L164:
	.word	gSprites
	.word	gTasks
	.word	SpriteCallbackDummy
.Lfe15:
	.size	 ShowContestEntryMonPic,.Lfe15-ShowContestEntryMonPic
	.align	2, 0
	.globl	HideContestEntryMonPic
	.type	 HideContestEntryMonPic,function
	.thumb_func
HideContestEntryMonPic:
	push	{lr}
	ldr	r0, .L168
	bl	FindTaskIdByFunc
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	beq	.L167	@cond_branch
	ldr	r0, .L168+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	bl	FreeMonSpritesGfx
.L167:
	pop	{r0}
	bx	r0
.L169:
	.align	2, 0
.L168:
	.word	Task_ShowContestEntryMonPic
	.word	gTasks
.Lfe16:
	.size	 HideContestEntryMonPic,.Lfe16-HideContestEntryMonPic
	.align	2, 0
	.type	 Task_ShowContestEntryMonPic,function
	.thumb_func
Task_ShowContestEntryMonPic:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	ldr	r1, .L181
	add	r5, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r5, r2]
	add	r2, r1, #0
	cmp	r0, #0x4
	bhi	.L171	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L181+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L182:
	.align	2, 0
.L181:
	.word	gTasks
	.word	.L178
	.align	2, 0
	.align	2, 0
.L178:
	.word	.L180
	.word	.L173
	.word	.L171
	.word	.L175
	.word	.L177
.L173:
	mov	r0, #0xa
	mov	r1, #0x3
	mov	r2, #0x8
	mov	r3, #0x8
	bl	CreateWindowFromRect
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x12]
	mov	r1, #0x1
	bl	SetStandardWindowBorderStyle
	b	.L180
.L175:
	mov	r0, #0xc
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r1, .L183
	add	r4, r0, r1
	ldrb	r0, [r4, #0x5]
	lsr	r0, r0, #0x4
	bl	GetSpritePaletteTagByPaletteNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	bl	FreeSpritePaletteByTag
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	beq	.L176	@cond_branch
	ldrb	r0, [r4, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	bl	FreeOamMatrix
.L176:
	add	r0, r4, #0
	bl	DestroySprite
.L180:
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x8]
	b	.L171
.L184:
	.align	2, 0
.L183:
	.word	gSprites
.L177:
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrb	r0, [r0, #0x12]
	bl	ClearToTransparentAndRemoveWindow
	add	r0, r4, #0
	bl	DestroyTask
.L171:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe17:
	.size	 Task_ShowContestEntryMonPic,.Lfe17-Task_ShowContestEntryMonPic
	.align	2, 0
	.globl	ScriptGetMultiplayerId
	.type	 ScriptGetMultiplayerId,function
	.thumb_func
ScriptGetMultiplayerId:
	push	{r4, lr}
	ldr	r0, .L188
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L186	@cond_branch
	ldr	r0, .L188+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x4
	bne	.L186	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L186	@cond_branch
	ldr	r4, .L188+0x8
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4]
	b	.L187
.L189:
	.align	2, 0
.L188:
	.word	gLinkContestFlags
	.word	gNumLinkContestPlayers
	.word	gSpecialVar_Result
.L186:
	ldr	r1, .L190
	mov	r0, #0x4
	strh	r0, [r1]
.L187:
	pop	{r4}
	pop	{r0}
	bx	r0
.L191:
	.align	2, 0
.L190:
	.word	gSpecialVar_Result
.Lfe18:
	.size	 ScriptGetMultiplayerId,.Lfe18-ScriptGetMultiplayerId
	.align	2, 0
	.globl	ScriptRandom
	.type	 ScriptRandom,function
	.thumb_func
ScriptRandom:
	push	{r4, lr}
	ldr	r0, .L195
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L193	@cond_branch
	ldr	r2, .L195+0x4
	ldr	r1, [r2]
	ldr	r0, .L195+0x8
	mul	r0, r0, r1
	ldr	r1, .L195+0xc
	add	r0, r0, r1
	str	r0, [r2]
	lsr	r0, r0, #0x10
	ldr	r4, .L195+0x10
	b	.L194
.L196:
	.align	2, 0
.L195:
	.word	gLinkContestFlags
	.word	gContestRngValue
	.word	0x41c64e6d
	.word	0x6073
	.word	gSpecialVar_Result
.L193:
	ldr	r4, .L197
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L194:
	ldrh	r1, [r4]
	bl	__umodsi3
	strh	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L198:
	.align	2, 0
.L197:
	.word	gSpecialVar_Result
.Lfe19:
	.size	 ScriptRandom,.Lfe19-ScriptRandom
	.align	2, 0
	.globl	GetContestRand
	.type	 GetContestRand,function
	.thumb_func
GetContestRand:
	ldr	r2, .L200
	ldr	r1, [r2]
	ldr	r0, .L200+0x4
	mul	r0, r0, r1
	ldr	r1, .L200+0x8
	add	r0, r0, r1
	str	r0, [r2]
	lsr	r0, r0, #0x10
	bx	lr
.L201:
	.align	2, 0
.L200:
	.word	gContestRngValue
	.word	0x41c64e6d
	.word	0x6073
.Lfe20:
	.size	 GetContestRand,.Lfe20-GetContestRand
	.align	2, 0
	.globl	LinkContestWaitForConnection
	.type	 LinkContestWaitForConnection,function
	.thumb_func
LinkContestWaitForConnection:
	push	{lr}
	ldr	r0, .L206
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L203	@cond_branch
	mov	r0, #0x0
	b	.L205
.L207:
	.align	2, 0
.L206:
	.word	gLinkContestFlags
.L203:
	ldr	r0, .L208
	mov	r1, #0x5
	bl	CreateTask
	mov	r0, #0x1
.L205:
	pop	{r1}
	bx	r1
.L209:
	.align	2, 0
.L208:
	.word	Task_LinkContestWaitForConnection
.Lfe21:
	.size	 LinkContestWaitForConnection,.Lfe21-LinkContestWaitForConnection
	.align	2, 0
	.type	 Task_LinkContestWaitForConnection,function
	.thumb_func
Task_LinkContestWaitForConnection:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L220
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L212	@cond_branch
	cmp	r0, #0x1
	beq	.L214	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L211	@cond_branch
	bl	EnableBothScriptContexts
	add	r0, r5, #0
	bl	DestroyTask
	b	.L211
.L221:
	.align	2, 0
.L220:
	.word	gTasks
.L212:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L211	@cond_branch
	bl	sub_800ADF8
.L214:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
.L211:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe22:
	.size	 Task_LinkContestWaitForConnection,.Lfe22-Task_LinkContestWaitForConnection
	.align	2, 0
	.globl	LinkContestTryShowWirelessIndicator
	.type	 LinkContestTryShowWirelessIndicator,function
	.thumb_func
LinkContestTryShowWirelessIndicator:
	push	{lr}
	ldr	r0, .L225
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L223	@cond_branch
	ldr	r0, .L225+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L223	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x8
	mov	r1, #0x8
	bl	CreateWirelessStatusIndicatorSprite
.L223:
	pop	{r0}
	bx	r0
.L226:
	.align	2, 0
.L225:
	.word	gLinkContestFlags
	.word	gReceivedRemoteLinkPlayers
.Lfe23:
	.size	 LinkContestTryShowWirelessIndicator,.Lfe23-LinkContestTryShowWirelessIndicator
	.align	2, 0
	.globl	LinkContestTryHideWirelessIndicator
	.type	 LinkContestTryHideWirelessIndicator,function
	.thumb_func
LinkContestTryHideWirelessIndicator:
	push	{lr}
	ldr	r0, .L230
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L228	@cond_branch
	ldr	r0, .L230+0x4
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L228	@cond_branch
	bl	DestroyWirelessStatusIndicatorSprite
.L228:
	pop	{r0}
	bx	r0
.L231:
	.align	2, 0
.L230:
	.word	gLinkContestFlags
	.word	gReceivedRemoteLinkPlayers
.Lfe24:
	.size	 LinkContestTryHideWirelessIndicator,.Lfe24-LinkContestTryHideWirelessIndicator
	.align	2, 0
	.globl	IsContestWithRSPlayer
	.type	 IsContestWithRSPlayer,function
	.thumb_func
IsContestWithRSPlayer:
	push	{lr}
	ldr	r0, .L236
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L233	@cond_branch
	mov	r0, #0x0
	b	.L235
.L237:
	.align	2, 0
.L236:
	.word	gLinkContestFlags
.L233:
	mov	r0, #0x1
.L235:
	pop	{r1}
	bx	r1
.Lfe25:
	.size	 IsContestWithRSPlayer,.Lfe25-IsContestWithRSPlayer
	.align	2, 0
	.globl	ClearLinkContestFlags
	.type	 ClearLinkContestFlags,function
	.thumb_func
ClearLinkContestFlags:
	ldr	r1, .L239
	mov	r0, #0x0
	strb	r0, [r1]
	bx	lr
.L240:
	.align	2, 0
.L239:
	.word	gLinkContestFlags
.Lfe26:
	.size	 ClearLinkContestFlags,.Lfe26-ClearLinkContestFlags
	.align	2, 0
	.globl	IsWirelessContest
	.type	 IsWirelessContest,function
	.thumb_func
IsWirelessContest:
	push	{lr}
	ldr	r0, .L245
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L242	@cond_branch
	mov	r0, #0x0
	b	.L244
.L246:
	.align	2, 0
.L245:
	.word	gLinkContestFlags
.L242:
	mov	r0, #0x1
.L244:
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 IsWirelessContest,.Lfe27-IsWirelessContest
	.align	2, 0
	.globl	HealPlayerParty
	.type	 HealPlayerParty,function
	.thumb_func
HealPlayerParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	r8, r0
	ldr	r0, .L258
	ldrb	r0, [r0]
	cmp	r8, r0
	bcs	.L249	@cond_branch
	ldr	r1, .L258+0x4
	mov	sl, r1
	mov	r6, sp
.L251:
	mov	r0, #0x64
	mov	r4, r8
	mul	r4, r4, r0
	add	r4, r4, sl
	add	r0, r4, #0
	mov	r1, #0x3a
	bl	GetMonData
	lsl	r1, r0, #0x10
	strb	r0, [r6]
	lsr	r1, r1, #0x18
	strb	r1, [r6, #0x1]
	add	r0, r4, #0
	mov	r1, #0x39
	mov	r2, sp
	bl	SetMonData
	add	r0, r4, #0
	mov	r1, #0x15
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r5, #0x0
	mov	r1, #0x1
	add	r1, r1, r8
	mov	r9, r1
.L255:
	add	r1, r5, #0
	add	r1, r1, #0xd
	add	r0, r4, #0
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r7, #0
	add	r2, r5, #0
	bl	CalculatePPWithBonus
	strb	r0, [r6]
	add	r1, r5, #0
	add	r1, r1, #0x11
	add	r0, r4, #0
	mov	r2, sp
	bl	SetMonData
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x3
	bls	.L255	@cond_branch
	mov	r0, #0x0
	strb	r0, [r6]
	strb	r0, [r6, #0x1]
	strb	r0, [r6, #0x2]
	strb	r0, [r6, #0x3]
	mov	r1, #0x64
	mov	r0, r8
	mul	r0, r0, r1
	add	r0, r0, sl
	mov	r1, #0x37
	mov	r2, sp
	bl	SetMonData
	mov	r1, r9
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L258
	ldrb	r0, [r0]
	cmp	r8, r0
	bcc	.L251	@cond_branch
.L249:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L259:
	.align	2, 0
.L258:
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe28:
	.size	 HealPlayerParty,.Lfe28-HealPlayerParty
	.align	2, 0
	.globl	ScriptGiveMon
	.type	 ScriptGiveMon,function
	.thumb_func
ScriptGiveMon:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x78
	add	r5, r0, #0
	add	r3, r1, #0
	add	r4, r2, #0
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	lsl	r4, r4, #0x10
	lsr	r0, r4, #0x10
	mov	r8, r0
	add	r6, sp, #0x14
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r3, #0
	mov	r3, #0x20
	bl	CreateMon
	add	r0, sp, #0x10
	mov	r1, r8
	strb	r1, [r0]
	lsr	r4, r4, #0x18
	strb	r4, [r0, #0x1]
	add	r0, r6, #0
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
	add	r0, r6, #0
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r4, #0x1
	bgt	.L261	@cond_branch
	cmp	r4, #0
	blt	.L261	@cond_branch
	add	r0, r5, #0
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	add	r0, r5, #0
	mov	r1, #0x3
	bl	GetSetPokedexFlag
.L261:
	add	r0, r4, #0
	add	sp, sp, #0x78
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 ScriptGiveMon,.Lfe29-ScriptGiveMon
	.align	2, 0
	.globl	ScriptGiveEgg
	.type	 ScriptGiveEgg,function
	.thumb_func
ScriptGiveEgg:
	push	{lr}
	add	sp, sp, #-0x68
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, sp
	mov	r2, #0x1
	bl	CreateEgg
	add	r2, sp, #0x64
	mov	r0, #0x1
	strb	r0, [r2]
	mov	r0, sp
	mov	r1, #0x2d
	bl	SetMonData
	mov	r0, sp
	bl	GiveMonToPlayer
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	sp, sp, #0x68
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 ScriptGiveEgg,.Lfe30-ScriptGiveEgg
	.align	2, 0
	.globl	HasEnoughMonsForDoubleBattle
	.type	 HasEnoughMonsForDoubleBattle,function
	.thumb_func
HasEnoughMonsForDoubleBattle:
	push	{lr}
	bl	GetMonsStateToDoubles
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1
	beq	.L270	@cond_branch
	cmp	r1, #0x1
	bgt	.L274	@cond_branch
	cmp	r1, #0
	beq	.L271	@cond_branch
	b	.L268
.L274:
	cmp	r1, #0x2
	bne	.L268	@cond_branch
.L270:
.L271:
	ldr	r0, .L275
	strh	r1, [r0]
.L268:
	pop	{r0}
	bx	r0
.L276:
	.align	2, 0
.L275:
	.word	gSpecialVar_Result
.Lfe31:
	.size	 HasEnoughMonsForDoubleBattle,.Lfe31-HasEnoughMonsForDoubleBattle
	.align	2, 0
	.type	 CheckPartyMonHasHeldItem,function
	.thumb_func
CheckPartyMonHasHeldItem:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	mov	r5, #0x0
	mov	r7, #0xce
	lsl	r7, r7, #0x1
.L281:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L285
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L280	@cond_branch
	cmp	r0, r7
	beq	.L280	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xc
	bl	GetMonData
	cmp	r0, r6
	bne	.L280	@cond_branch
	mov	r0, #0x1
	b	.L284
.L286:
	.align	2, 0
.L285:
	.word	gPlayerParty
.L280:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L281	@cond_branch
	mov	r0, #0x0
.L284:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 CheckPartyMonHasHeldItem,.Lfe32-CheckPartyMonHasHeldItem
	.align	2, 0
	.globl	DoesPartyHaveEnigmaBerry
	.type	 DoesPartyHaveEnigmaBerry,function
	.thumb_func
DoesPartyHaveEnigmaBerry:
	push	{r4, lr}
	mov	r0, #0xaf
	bl	CheckPartyMonHasHeldItem
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r4, r0, #0
	cmp	r4, #0x1
	bne	.L288	@cond_branch
	mov	r0, #0xaf
	bl	ItemIdToBerryType
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L289
	bl	GetBerryNameByBerryType
.L288:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L290:
	.align	2, 0
.L289:
	.word	gStringVar1
.Lfe33:
	.size	 DoesPartyHaveEnigmaBerry,.Lfe33-DoesPartyHaveEnigmaBerry
	.align	2, 0
	.globl	CreateScriptedWildMon
	.type	 CreateScriptedWildMon,function
	.thumb_func
CreateScriptedWildMon:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r7, r2, #0x10
	lsr	r6, r7, #0x10
	bl	ZeroEnemyPartyMons
	ldr	r0, .L293
	mov	r8, r0
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	str	r0, [sp, #0x8]
	str	r0, [sp, #0xc]
	mov	r0, r8
	add	r1, r4, #0
	add	r2, r5, #0
	mov	r3, #0x20
	bl	CreateMon
	cmp	r6, #0
	beq	.L292	@cond_branch
	add	r0, sp, #0x10
	strb	r6, [r0]
	add	r1, r0, #0
	lsr	r0, r7, #0x18
	strb	r0, [r1, #0x1]
	mov	r0, r8
	mov	r1, #0xc
	add	r2, sp, #0x10
	bl	SetMonData
.L292:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gEnemyParty
.Lfe34:
	.size	 CreateScriptedWildMon,.Lfe34-CreateScriptedWildMon
	.align	2, 0
	.globl	ScriptSetMonMoveSlot
	.type	 ScriptSetMonMoveSlot,function
	.thumb_func
ScriptSetMonMoveSlot:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r3, #0x6
	bls	.L296	@cond_branch
	ldr	r0, .L297
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L296:
	mov	r0, #0x64
	mul	r0, r0, r3
	ldr	r1, .L297+0x4
	add	r0, r0, r1
	add	r1, r4, #0
	bl	SetMonMoveSlot
	pop	{r4}
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	gPlayerPartyCount
	.word	gPlayerParty
.Lfe35:
	.size	 ScriptSetMonMoveSlot,.Lfe35-ScriptSetMonMoveSlot
	.align	2, 0
	.globl	ChooseHalfPartyForBattle
	.type	 ChooseHalfPartyForBattle,function
	.thumb_func
ChooseHalfPartyForBattle:
	push	{lr}
	ldr	r0, .L300
	ldr	r1, .L300+0x4
	str	r1, [r0, #0x8]
	ldr	r0, .L300+0x8
	mov	r1, #0x9
	bl	VarSet
	mov	r0, #0x0
	bl	InitChooseHalfPartyForBattle
	pop	{r0}
	bx	r0
.L301:
	.align	2, 0
.L300:
	.word	gMain
	.word	CB2_ReturnFromChooseHalfParty
	.word	0x40cf
.Lfe36:
	.size	 ChooseHalfPartyForBattle,.Lfe36-ChooseHalfPartyForBattle
	.align	2, 0
	.type	 CB2_ReturnFromChooseHalfParty,function
	.thumb_func
CB2_ReturnFromChooseHalfParty:
	push	{lr}
	ldr	r0, .L307
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L305	@cond_branch
	ldr	r0, .L307+0x4
	strh	r1, [r0]
	b	.L303
.L308:
	.align	2, 0
.L307:
	.word	gSelectedOrderFromParty
	.word	gSpecialVar_Result
.L305:
	ldr	r1, .L309
	mov	r0, #0x1
	strh	r0, [r1]
.L303:
	ldr	r0, .L309+0x4
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L310:
	.align	2, 0
.L309:
	.word	gSpecialVar_Result
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe37:
	.size	 CB2_ReturnFromChooseHalfParty,.Lfe37-CB2_ReturnFromChooseHalfParty
	.align	2, 0
	.globl	ChoosePartyForBattleFrontier
	.type	 ChoosePartyForBattleFrontier,function
	.thumb_func
ChoosePartyForBattleFrontier:
	push	{lr}
	ldr	r1, .L312
	ldr	r0, .L312+0x4
	str	r0, [r1, #0x8]
	ldr	r0, .L312+0x8
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	InitChooseHalfPartyForBattle
	pop	{r0}
	bx	r0
.L313:
	.align	2, 0
.L312:
	.word	gMain
	.word	CB2_ReturnFromChooseBattleFrontierParty
	.word	gSpecialVar_0x8004
.Lfe38:
	.size	 ChoosePartyForBattleFrontier,.Lfe38-ChoosePartyForBattleFrontier
	.align	2, 0
	.type	 CB2_ReturnFromChooseBattleFrontierParty,function
	.thumb_func
CB2_ReturnFromChooseBattleFrontierParty:
	push	{lr}
	ldr	r0, .L319
	ldrb	r1, [r0]
	cmp	r1, #0
	bne	.L317	@cond_branch
	ldr	r0, .L319+0x4
	strh	r1, [r0]
	b	.L315
.L320:
	.align	2, 0
.L319:
	.word	gSelectedOrderFromParty
	.word	gSpecialVar_Result
.L317:
	ldr	r1, .L321
	mov	r0, #0x1
	strh	r0, [r1]
.L315:
	ldr	r0, .L321+0x4
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L322:
	.align	2, 0
.L321:
	.word	gSpecialVar_Result
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe39:
	.size	 CB2_ReturnFromChooseBattleFrontierParty,.Lfe39-CB2_ReturnFromChooseBattleFrontierParty
	.align	2, 0
	.globl	ReducePlayerPartyToSelectedMons
	.type	 ReducePlayerPartyToSelectedMons,function
	.thumb_func
ReducePlayerPartyToSelectedMons:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x198
	add	r0, sp, #0x190
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r2, .L335
	mov	r1, sp
	bl	CpuSet
	mov	r5, #0x0
	mov	r7, #0x64
	ldr	r6, .L335+0x4
	mov	r4, sp
.L327:
	ldr	r0, .L335+0x8
	add	r1, r5, r0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L326	@cond_branch
	sub	r0, r0, #0x1
	mov	r1, r0
	mul	r1, r1, r7
	add	r1, r1, r6
	add	r0, r4, #0
	mov	r2, #0x64
	bl	memcpy
.L326:
	add	r4, r4, #0x64
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L327	@cond_branch
	add	r0, sp, #0x194
	mov	r1, #0x0
	str	r1, [r0]
	ldr	r4, .L335+0x4
	ldr	r2, .L335+0xc
	add	r1, r4, #0
	bl	CpuSet
	mov	r5, sp
	add	r6, sp, #0x12c
.L333:
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x64
	bl	memcpy
	add	r5, r5, #0x64
	add	r4, r4, #0x64
	cmp	r5, r6
	ble	.L333	@cond_branch
	bl	CalculatePlayerPartyCount
	add	sp, sp, #0x198
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L336:
	.align	2, 0
.L335:
	.word	0x5000064
	.word	gPlayerParty
	.word	gSelectedOrderFromParty
	.word	0x5000096
.Lfe40:
	.size	 ReducePlayerPartyToSelectedMons,.Lfe40-ReducePlayerPartyToSelectedMons
.text
	.align	2, 0

