@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gWirelessStatusIndicatorSpriteId
	.section ewram_data,"aw"
	.type	 gWirelessStatusIndicatorSpriteId,object
	.size	 gWirelessStatusIndicatorSpriteId,1
gWirelessStatusIndicatorSpriteId:
	.byte	0x0
	.globl	gWirelessLinkIconPalette
	.section .rodata
	.align	1, 0
	.type	 gWirelessLinkIconPalette,object
gWirelessLinkIconPalette:
	.short	0x7ed5
	.short	0x5250
	.short	0x7bdd
	.short	0x5ed6
	.short	0x3569
	.short	0x1f
	.short	0x42df
	.short	0x7fff
	.short	0x0
	.short	0x7bdd
	.short	0x7bdd
	.short	0x7bdd
	.short	0x7bdd
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gWirelessLinkIconPalette,32
	.globl	gWirelessLinkIconPic
	.align	2, 0
	.type	 gWirelessLinkIconPic,object
gWirelessLinkIconPic:
	.word	0x38010
	.word	0x44444000
	.word	0x77773444
	.word	-0xf8b8a89
	.word	0x32003
	.word	0x600041e
	.word	0x48030043
	.word	0x7c03f047
	.word	-0x56d49fb4
	.word	0x7430777a
	.word	0x10030079
	.word	0x7777a907
	.word	0x700e034
	.word	0x23105b10
	.word	0x4ccc7777
	.word	0x7bb73377
	.word	0x3000700
	.word	0x37007bb7
	.word	-0x48e0fd00
	.word	0x5b10437b
	.word	0x7ff07ff0
	.word	0x7ff07ff0
	.word	0x44770080
	.word	0x324a7974
	.word	0x4a02a974
	.word	0x47a97411
	.word	0x447fd044
	.word	0x337f0080
	.word	0x114c7b74
	.word	0x471f7bb4
	.word	0x7ff07444
	.word	0x7ff07bf0
	.word	0x7f2003f0
	.word	0x7ff0576e
	.word	-0xf8a8090
	.word	-0xf800f81
	.word	0x740d5577
	.word	-0xf89a889
	.word	0x5503307f
	.word	0x673e0300
	.word	-0xf800f8b
	.word	-0xf800f81
	.word	0x577f507f
	.word	0x65730086
	.word	0x60577477
	.word	0x55ffa07f
	.word	0x566f10ab
	.word	0x20757310
	.word	0x7ff0777f
	.word	-0xf038010
	.word	-0xf800f81
	.word	-0xe800e01
	.word	-0x56000e81
	.word	0x74550a7a
	.word	0x7f005a79
	.word	0x577f005a
	.word	-0x2eaaac
	.word	0x757f1055
	.word	0x7bb57f00
	.word	0x75554710
	.word	0x55547fb0
	.word	-0xf08aaab
	.word	0x10033003
	.word	0x45060023
	.word	0x33003f0
	.word	0x972b80
	.word	0x324547
	.word	0x3001103
	.word	0x5b105320
	.word	0x2750ce
	.word	0x70334508
	.word	0x13301c
	.word	0x5b
	.size	 gWirelessLinkIconPic,292
	.globl	sWireless_ASCIItoRSETable
	.type	 sWireless_ASCIItoRSETable,object
sWireless_ASCIItoRSETable:
	.byte	0xff
	.byte	0x95
	.byte	0x96
	.byte	0x97
	.byte	0x98
	.byte	0x99
	.byte	0x9a
	.byte	0x37
	.byte	0x38
	.byte	0x39
	.byte	0x3a
	.byte	0x3b
	.byte	0x3c
	.byte	0x3d
	.byte	0x3e
	.byte	0x3f
	.byte	0x40
	.byte	0x41
	.byte	0x42
	.byte	0x43
	.byte	0x44
	.byte	0x45
	.byte	0x46
	.byte	0x47
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x4b
	.byte	0x4c
	.byte	0x4d
	.byte	0x4e
	.byte	0x4f
	.byte	0x0
	.byte	0xab
	.byte	0xb5
	.byte	0xb6
	.byte	0xb1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xb2
	.byte	0xf1
	.byte	0x0
	.byte	0xae
	.byte	0xad
	.byte	0xba
	.byte	0xa1
	.byte	0xa2
	.byte	0xa3
	.byte	0xa4
	.byte	0xa5
	.byte	0xa6
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0x0
	.byte	0x9b
	.byte	0x9c
	.byte	0x9d
	.byte	0x9e
	.byte	0x9f
	.byte	0x0
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xf2
	.byte	0xf3
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0x0
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xdd
	.byte	0xde
	.byte	0xdf
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0x2d
	.byte	0x2f
	.byte	0x30
	.byte	0x31
	.byte	0x32
	.byte	0x33
	.byte	0x34
	.byte	0x35
	.byte	0x36
	.byte	0x50
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x18
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0xad
	.byte	0xb3
	.byte	0xb4
	.byte	0x0
	.byte	0xaf
	.byte	0x7d
	.byte	0x7f
	.byte	0x80
	.byte	0x81
	.byte	0x82
	.byte	0x83
	.byte	0x84
	.byte	0x85
	.byte	0x86
	.byte	0xa0
	.byte	0xae
	.byte	0x51
	.byte	0x52
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.byte	0x57
	.byte	0x58
	.byte	0x59
	.byte	0x5a
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.byte	0x5e
	.byte	0x5f
	.byte	0x60
	.byte	0x61
	.byte	0x62
	.byte	0x63
	.byte	0x64
	.byte	0x65
	.byte	0x66
	.byte	0x67
	.byte	0x68
	.byte	0x69
	.byte	0x6a
	.byte	0x6b
	.byte	0x6c
	.byte	0x6d
	.byte	0x6e
	.byte	0x6f
	.byte	0x70
	.byte	0x71
	.byte	0x72
	.byte	0x73
	.byte	0x74
	.byte	0x75
	.byte	0x76
	.byte	0x77
	.byte	0x78
	.byte	0x79
	.byte	0x7a
	.byte	0x7b
	.byte	0x7c
	.byte	0x7e
	.byte	0xb0
	.byte	0xac
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.byte	0x1f
	.byte	0x20
	.byte	0x21
	.byte	0x22
	.byte	0x23
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x2a
	.byte	0x2b
	.byte	0x2c
	.byte	0x2e
	.byte	0x87
	.byte	0x88
	.byte	0x89
	.byte	0x8a
	.byte	0x8b
	.byte	0x8c
	.byte	0x8d
	.byte	0x8e
	.byte	0x8f
	.byte	0x90
	.byte	0x91
	.byte	0x92
	.byte	0x93
	.byte	0x94
	.size	 sWireless_ASCIItoRSETable,256
	.globl	sWireless_RSEtoASCIITable
	.type	 sWireless_RSEtoASCIITable,object
sWireless_RSEtoASCIITable:
	.byte	0x20
	.byte	0x86
	.byte	0x87
	.byte	0x88
	.byte	0x89
	.byte	0x8a
	.byte	0x8b
	.byte	0x8c
	.byte	0x8d
	.byte	0x8e
	.byte	0x8f
	.byte	0x90
	.byte	0x91
	.byte	0x92
	.byte	0x93
	.byte	0x94
	.byte	0x95
	.byte	0x96
	.byte	0x97
	.byte	0x98
	.byte	0x99
	.byte	0x9a
	.byte	0x9b
	.byte	0x9c
	.byte	0x9d
	.byte	0x9e
	.byte	0x9f
	.byte	0xa0
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0xef
	.byte	0xf0
	.byte	0x7b
	.byte	0xf1
	.byte	0x7c
	.byte	0x7d
	.byte	0x7e
	.byte	0x7f
	.byte	0x80
	.byte	0x81
	.byte	0x82
	.byte	0x83
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0xa
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x15
	.byte	0x16
	.byte	0x17
	.byte	0x18
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.byte	0x1f
	.byte	0x84
	.byte	0xb1
	.byte	0xb2
	.byte	0xb3
	.byte	0xb4
	.byte	0xb5
	.byte	0xb6
	.byte	0xb7
	.byte	0xb8
	.byte	0xb9
	.byte	0xba
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xa6
	.byte	0xdd
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0xab
	.byte	0xac
	.byte	0xad
	.byte	0xae
	.byte	0xf2
	.byte	0xf3
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0xf7
	.byte	0xf8
	.byte	0xf9
	.byte	0xfa
	.byte	0xfb
	.byte	0xfc
	.byte	0xfd
	.byte	0xfe
	.byte	0xff
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x3b
	.byte	0x3c
	.byte	0x3d
	.byte	0x3e
	.byte	0x3f
	.byte	0xaf
	.byte	0x30
	.byte	0x31
	.byte	0x32
	.byte	0x33
	.byte	0x34
	.byte	0x35
	.byte	0x36
	.byte	0x37
	.byte	0x38
	.byte	0x39
	.byte	0x21
	.byte	0xdf
	.byte	0xa1
	.byte	0xb0
	.byte	0xa5
	.byte	0xde
	.byte	0x24
	.byte	0x2a
	.byte	0xa2
	.byte	0xa3
	.byte	0x22
	.byte	0x23
	.byte	0x20
	.byte	0xa4
	.byte	0x20
	.byte	0x2f
	.byte	0x41
	.byte	0x42
	.byte	0x43
	.byte	0x44
	.byte	0x45
	.byte	0x46
	.byte	0x47
	.byte	0x48
	.byte	0x49
	.byte	0x4a
	.byte	0x4b
	.byte	0x4c
	.byte	0x4d
	.byte	0x4e
	.byte	0x4f
	.byte	0x50
	.byte	0x51
	.byte	0x52
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.byte	0x57
	.byte	0x58
	.byte	0x59
	.byte	0x5a
	.byte	0x61
	.byte	0x62
	.byte	0x63
	.byte	0x64
	.byte	0x65
	.byte	0x66
	.byte	0x67
	.byte	0x68
	.byte	0x69
	.byte	0x6a
	.byte	0x6b
	.byte	0x6c
	.byte	0x6d
	.byte	0x6e
	.byte	0x6f
	.byte	0x70
	.byte	0x71
	.byte	0x72
	.byte	0x73
	.byte	0x74
	.byte	0x75
	.byte	0x76
	.byte	0x77
	.byte	0x78
	.byte	0x79
	.byte	0x7a
	.byte	0x20
	.byte	0x20
	.byte	0x2b
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.byte	0x5e
	.byte	0x5f
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x20
	.byte	0x0
	.size	 sWireless_RSEtoASCIITable,256
	.globl	sWirelessStatusIndicatorOamData
	.align	2, 0
	.type	 sWirelessStatusIndicatorOamData,object
	.size	 sWirelessStatusIndicatorOamData,8
sWirelessStatusIndicatorOamData:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.space	2
	.globl	sWirelessStatusIndicatorAnim0
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim0,object
sWirelessStatusIndicatorAnim0:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x10
	.byte	0xa
	.space	1
	.short	0xc
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim0,28
	.globl	sWirelessStatusIndicatorAnim1
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim1,object
sWirelessStatusIndicatorAnim1:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	0xc
	.byte	0xa
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim1,20
	.globl	sWirelessStatusIndicatorAnim2
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim2,object
sWirelessStatusIndicatorAnim2:
	.short	0x4
	.byte	0x5
	.space	1
	.short	0x8
	.byte	0x5
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim2,12
	.globl	sWirelessStatusIndicatorAnim3
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim3,object
sWirelessStatusIndicatorAnim3:
	.short	0x4
	.byte	0xa
	.space	1
	.short	0x14
	.byte	0xa
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim3,12
	.globl	sWirelessStatusIndicatorAnim4
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnim4,object
sWirelessStatusIndicatorAnim4:
	.short	0x18
	.byte	0xa
	.space	1
	.short	0x4
	.byte	0xa
	.space	1
	.short	-0x2
	.byte	0x0
	.space	1
	.size	 sWirelessStatusIndicatorAnim4,12
	.globl	sWirelessStatusIndicatorAnims
	.align	2, 0
	.type	 sWirelessStatusIndicatorAnims,object
sWirelessStatusIndicatorAnims:
	.word	sWirelessStatusIndicatorAnim0
	.word	sWirelessStatusIndicatorAnim1
	.word	sWirelessStatusIndicatorAnim2
	.word	sWirelessStatusIndicatorAnim3
	.word	sWirelessStatusIndicatorAnim4
	.size	 sWirelessStatusIndicatorAnims,20
	.globl	sWirelessStatusIndicatorSpriteSheet
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpriteSheet,object
	.size	 sWirelessStatusIndicatorSpriteSheet,8
sWirelessStatusIndicatorSpriteSheet:
	.word	gWirelessLinkIconPic
	.short	0x380
	.short	0xd431
	.globl	sWirelessStatusIndicatorSpritePalette
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpritePalette,object
	.size	 sWirelessStatusIndicatorSpritePalette,8
sWirelessStatusIndicatorSpritePalette:
	.word	gWirelessLinkIconPalette
	.short	0xd432
	.space	2
	.globl	sWirelessStatusIndicatorSpriteTemplate
	.align	2, 0
	.type	 sWirelessStatusIndicatorSpriteTemplate,object
	.size	 sWirelessStatusIndicatorSpriteTemplate,24
sWirelessStatusIndicatorSpriteTemplate:
	.short	0xd431
	.short	0xd432
	.word	sWirelessStatusIndicatorOamData
	.word	sWirelessStatusIndicatorAnims
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	sub_800D6C8
	.type	 sub_800D6C8,function
	.thumb_func
sub_800D6C8:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r0, #0x0
	mov	r4, #0x0
	mov	r5, #0x46
.L6:
	add	r2, r0, #0x1
	mov	r1, #0x45
	mul	r0, r0, r5
	add	r0, r0, r3
	add	r0, r0, #0x45
.L10:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L10	@cond_branch
	add	r0, r2, #0
	cmp	r0, #0x1f
	ble	.L6	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L13
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0x8c
	lsl	r2, r2, #0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L13+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L13+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L14:
	.align	2, 0
.L13:
	.word	0x8c1
	.word	0x8c2
	.word	0x8c3
.Lfe1:
	.size	 sub_800D6C8,.Lfe1-sub_800D6C8
	.align	2, 0
	.globl	sub_800D724
	.type	 sub_800D724,function
	.thumb_func
sub_800D724:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	mov	r4, #0x0
.L19:
	lsl	r0, r1, #0x3
	add	r2, r1, #0x1
	sub	r0, r0, r1
	mov	r1, #0xd
	lsl	r0, r0, #0x1
	add	r0, r0, r3
	add	r0, r0, #0xd
.L23:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L23	@cond_branch
	add	r1, r2, #0
	cmp	r1, #0x27
	ble	.L19	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L26
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0x8c
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L26+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L26+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L27:
	.align	2, 0
.L26:
	.word	0x231
	.word	0x232
	.word	0x233
.Lfe2:
	.size	 sub_800D724,.Lfe2-sub_800D724
	.align	2, 0
	.globl	sub_800D780
	.type	 sub_800D780,function
	.thumb_func
sub_800D780:
	push	{r4, lr}
	add	r3, r0, #0
	mov	r1, #0x0
	mov	r4, #0x0
.L32:
	lsl	r0, r1, #0x8
	add	r2, r1, #0x1
	mov	r1, #0xff
	add	r0, r0, r3
	add	r0, r0, #0xff
.L36:
	strb	r4, [r0]
	sub	r0, r0, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bge	.L36	@cond_branch
	add	r1, r2, #0
	cmp	r1, #0x1
	ble	.L32	@cond_branch
	mov	r1, #0x0
	ldr	r2, .L39
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L39+0x4
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	ldr	r2, .L39+0x8
	add	r0, r3, r2
	ldrb	r2, [r0]
	strb	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L40:
	.align	2, 0
.L39:
	.word	0x201
	.word	0x202
	.word	0x203
.Lfe3:
	.size	 sub_800D780,.Lfe3-sub_800D780
	.align	2, 0
	.globl	sub_800D7D8
	.type	 sub_800D7D8,function
	.thumb_func
sub_800D7D8:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	ldr	r1, .L61
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1f
	bhi	.L42	@cond_branch
	ldr	r0, .L61+0x4
	ldrh	r1, [r0]
	add	r7, r1, #0
	mov	r1, #0x0
	strh	r1, [r0]
	mov	r5, #0x0
	mov	r2, #0x0
.L46:
	add	r1, r4, r2
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.L45	@cond_branch
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0
	bne	.L45	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L45:
	add	r2, r2, #0xe
	cmp	r2, #0x45
	ble	.L46	@cond_branch
	cmp	r5, #0x5
	beq	.L49	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x8c
	lsl	r0, r0, #0x4
	add	r5, r3, r0
	mov	r6, #0x46
.L53:
	ldrb	r0, [r5]
	mov	r1, r0
	mul	r1, r1, r6
	add	r1, r2, r1
	add	r1, r3, r1
	add	r0, r4, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L53	@cond_branch
	mov	r0, #0x8c
	lsl	r0, r0, #0x4
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L61
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x0
	add	r0, r4, #0
	add	r0, r0, #0x45
.L58:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r4
	bge	.L58	@cond_branch
.L49:
	ldr	r0, .L61+0x4
	strh	r7, [r0]
	b	.L60
.L62:
	.align	2, 0
.L61:
	.word	0x8c2
	.word	0x4000208
.L42:
	ldr	r1, .L63
	add	r0, r3, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L60:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L64:
	.align	2, 0
.L63:
	.word	0x8c3
.Lfe4:
	.size	 sub_800D7D8,.Lfe4-sub_800D7D8
	.align	2, 0
	.globl	sub_800D888
	.type	 sub_800D888,function
	.thumb_func
sub_800D888:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	ldr	r1, .L85
	add	r0, r6, r1
	ldrb	r0, [r0]
	cmp	r0, #0x27
	bhi	.L66	@cond_branch
	ldr	r1, .L85+0x4
	ldrh	r0, [r1]
	add	r7, r0, #0
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r2, #0x0
	ldrb	r0, [r5]
	cmp	r0, #0
	bne	.L68	@cond_branch
.L69:
	add	r2, r2, #0x1
	cmp	r2, #0xd
	bgt	.L68	@cond_branch
	add	r0, r5, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L69	@cond_branch
.L68:
	cmp	r2, #0xe
	beq	.L73	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x8c
	lsl	r0, r0, #0x2
	add	r3, r6, r0
.L77:
	ldrb	r1, [r3]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r2, r0
	add	r0, r6, r0
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xd
	ble	.L77	@cond_branch
	mov	r1, #0x8c
	lsl	r1, r1, #0x2
	add	r4, r6, r1
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x28
	bl	__umodsi3
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldr	r0, .L85
	add	r1, r6, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r1, #0x0
	add	r0, r5, #0
	add	r0, r0, #0xd
.L82:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r5
	bge	.L82	@cond_branch
.L73:
	ldr	r0, .L85+0x4
	strh	r7, [r0]
	b	.L84
.L86:
	.align	2, 0
.L85:
	.word	0x232
	.word	0x4000208
.L66:
	ldr	r1, .L87
	add	r0, r6, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L84:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L88:
	.align	2, 0
.L87:
	.word	0x233
.Lfe5:
	.size	 sub_800D888,.Lfe5-sub_800D888
	.align	2, 0
	.globl	sub_800D934
	.type	 sub_800D934,function
	.thumb_func
sub_800D934:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	ldr	r1, .L103
	ldrh	r0, [r1]
	mov	ip, r0
	mov	r0, #0x0
	strh	r0, [r1]
	mov	r1, #0x8c
	lsl	r1, r1, #0x4
	add	r0, r3, r1
	ldr	r7, .L103+0x4
	add	r5, r3, r7
	ldrb	r1, [r0]
	ldrb	r0, [r5]
	cmp	r1, r0
	beq	.L91	@cond_branch
	ldr	r1, .L103+0x8
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L90	@cond_branch
.L91:
	mov	r1, #0x0
	add	r0, r4, #0
	add	r0, r0, #0x45
.L95:
	strb	r1, [r0]
	sub	r0, r0, #0x1
	cmp	r0, r4
	bge	.L95	@cond_branch
	ldr	r0, .L103
	mov	r7, ip
	strh	r7, [r0]
	mov	r0, #0x0
	b	.L102
.L104:
	.align	2, 0
.L103:
	.word	0x4000208
	.word	0x8c1
	.word	0x8c3
.L90:
	mov	r2, #0x0
	mov	r6, #0x46
.L100:
	add	r1, r4, r2
	ldrb	r0, [r5]
	mov	r7, r0
	mul	r7, r7, r6
	add	r0, r7, #0
	add	r0, r2, r0
	add	r0, r3, r0
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	cmp	r2, #0x45
	ble	.L100	@cond_branch
	ldr	r0, .L105
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1f
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r7, .L105+0x4
	add	r1, r3, r7
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L105+0x8
	mov	r1, ip
	strh	r1, [r0]
	mov	r0, #0x1
.L102:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L106:
	.align	2, 0
.L105:
	.word	0x8c1
	.word	0x8c2
	.word	0x4000208
.Lfe6:
	.size	 sub_800D934,.Lfe6-sub_800D934
	.align	2, 0
	.globl	sub_800D9DC
	.type	 sub_800D9DC,function
	.thumb_func
sub_800D9DC:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r6, r1, #0
	mov	r1, #0x8c
	lsl	r1, r1, #0x2
	add	r0, r5, r1
	add	r1, r1, #0x1
	add	r4, r5, r1
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	cmp	r1, r0
	beq	.L109	@cond_branch
	ldr	r1, .L116
	add	r0, r5, r1
	ldrb	r0, [r0]
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L108	@cond_branch
.L109:
	mov	r0, #0x0
	b	.L115
.L117:
	.align	2, 0
.L116:
	.word	0x233
.L108:
	ldr	r1, .L118
	ldrh	r0, [r1]
	add	r7, r0, #0
	strh	r2, [r1]
	mov	r3, #0x0
.L113:
	add	r2, r6, r3
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	add	r0, r5, r0
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r3, r3, #0x1
	cmp	r3, #0xd
	ble	.L113	@cond_branch
	ldr	r0, .L118+0x4
	add	r4, r5, r0
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldrb	r0, [r4]
	mov	r1, #0x28
	bl	__umodsi3
	ldrb	r1, [r4]
	strb	r0, [r4]
	ldr	r0, .L118+0x8
	add	r1, r5, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L118
	strh	r7, [r0]
	mov	r0, #0x1
.L115:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L119:
	.align	2, 0
.L118:
	.word	0x4000208
	.word	0x231
	.word	0x232
.Lfe7:
	.size	 sub_800D9DC,.Lfe7-sub_800D9DC
	.align	2, 0
	.globl	sub_800DA68
	.type	 sub_800DA68,function
	.thumb_func
sub_800DA68:
	push	{r4, lr}
	add	r2, r0, #0
	add	r4, r1, #0
	ldrb	r0, [r4, #0x1]
	cmp	r0, #0
	bne	.L121	@cond_branch
	add	r0, r2, #0
	mov	r1, #0x0
	bl	sub_800DAC8
	b	.L122
.L121:
	mov	r3, #0x0
.L126:
	ldrb	r1, [r2, #0x1c]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r3, r0
	add	r0, r2, r0
	add	r1, r4, r3
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r3, r3, #0x1
	cmp	r3, #0xd
	ble	.L126	@cond_branch
	ldrb	r0, [r2, #0x1c]
	add	r0, r0, #0x1
	ldrb	r1, [r2, #0x1c]
	strb	r0, [r2, #0x1c]
	ldrb	r1, [r2, #0x1c]
	mov	r0, #0x1
	and	r0, r0, r1
	ldrb	r1, [r2, #0x1c]
	strb	r0, [r2, #0x1c]
	ldrb	r0, [r2, #0x1e]
	cmp	r0, #0x1
	bhi	.L128	@cond_branch
	ldrb	r0, [r2, #0x1e]
	add	r0, r0, #0x1
	ldrb	r1, [r2, #0x1e]
	strb	r0, [r2, #0x1e]
	b	.L122
.L128:
	ldrb	r0, [r2, #0x1c]
	ldrb	r1, [r2, #0x1d]
	strb	r0, [r2, #0x1d]
.L122:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_800DA68,.Lfe8-sub_800DA68
	.align	2, 0
	.globl	sub_800DAC8
	.type	 sub_800DAC8,function
	.thumb_func
sub_800DAC8:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r3, #0x1e]
	cmp	r0, #0
	bne	.L131	@cond_branch
	mov	r0, #0x0
	b	.L138
.L131:
	cmp	r5, #0
	beq	.L132	@cond_branch
	mov	r4, #0x0
.L136:
	add	r2, r5, r4
	ldrb	r1, [r3, #0x1d]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x1
	add	r0, r4, r0
	add	r0, r3, r0
	ldrb	r0, [r0]
	strb	r0, [r2]
	add	r4, r4, #0x1
	cmp	r4, #0xd
	ble	.L136	@cond_branch
.L132:
	ldrb	r0, [r3, #0x1d]
	add	r0, r0, #0x1
	ldrb	r1, [r3, #0x1d]
	strb	r0, [r3, #0x1d]
	ldrb	r1, [r3, #0x1d]
	mov	r0, #0x1
	and	r0, r0, r1
	ldrb	r1, [r3, #0x1d]
	strb	r0, [r3, #0x1d]
	ldrb	r0, [r3, #0x1e]
	sub	r0, r0, #0x1
	ldrb	r1, [r3, #0x1e]
	strb	r0, [r3, #0x1e]
	mov	r0, #0x1
.L138:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_800DAC8,.Lfe9-sub_800DAC8
	.align	2, 0
	.globl	sub_800DB18
	.type	 sub_800DB18,function
	.thumb_func
sub_800DB18:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	ldr	r1, .L147
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bhi	.L140	@cond_branch
	mov	r2, #0x0
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r4, r3, r0
.L144:
	ldrb	r0, [r4]
	lsl	r0, r0, #0x8
	add	r0, r2, r0
	add	r0, r3, r0
	add	r1, r5, r2
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xff
	ble	.L144	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L147
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	b	.L146
.L148:
	.align	2, 0
.L147:
	.word	0x202
.L140:
	ldr	r1, .L149
	add	r0, r3, r1
	ldrb	r1, [r0]
	mov	r1, #0x1
	strb	r1, [r0]
.L146:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L150:
	.align	2, 0
.L149:
	.word	0x203
.Lfe10:
	.size	 sub_800DB18,.Lfe10-sub_800DB18
	.align	2, 0
	.globl	sub_800DB84
	.type	 sub_800DB84,function
	.thumb_func
sub_800DB84:
	push	{r4, r5, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	mov	r1, #0x80
	lsl	r1, r1, #0x2
	add	r0, r3, r1
	add	r1, r1, #0x1
	add	r4, r3, r1
	ldrb	r1, [r0]
	ldrb	r0, [r4]
	cmp	r1, r0
	beq	.L153	@cond_branch
	ldr	r1, .L160
	add	r0, r3, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L152	@cond_branch
.L153:
	mov	r0, #0x0
	b	.L159
.L161:
	.align	2, 0
.L160:
	.word	0x203
.L152:
	mov	r2, #0x0
.L157:
	add	r0, r5, r2
	ldrb	r1, [r4]
	lsl	r1, r1, #0x8
	add	r1, r2, r1
	add	r1, r3, r1
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r2, r2, #0x1
	cmp	r2, #0xff
	ble	.L157	@cond_branch
	ldr	r0, .L162
	add	r1, r3, r0
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0x1
	and	r0, r0, r2
	ldrb	r2, [r1]
	strb	r0, [r1]
	ldr	r0, .L162+0x4
	add	r1, r3, r0
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	ldrb	r2, [r1]
	strb	r0, [r1]
	mov	r0, #0x1
.L159:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L163:
	.align	2, 0
.L162:
	.word	0x201
	.word	0x202
.Lfe11:
	.size	 sub_800DB84,.Lfe11-sub_800DB84
	.align	2, 0
	.globl	sub_800DBF8
	.type	 sub_800DBF8,function
	.thumb_func
sub_800DBF8:
	push	{r4, r5, r6, r7, lr}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	add	r0, r1, #0
	mov	r5, #0x0
	cmp	r1, #0x1
	beq	.L172	@cond_branch
	cmp	r1, #0x1
	bgt	.L192	@cond_branch
	cmp	r1, #0
	beq	.L166	@cond_branch
	b	.L165
.L192:
	cmp	r0, #0x2
	beq	.L178	@cond_branch
	cmp	r0, #0x3
	beq	.L184	@cond_branch
	b	.L165
.L166:
	mov	r4, #0x0
.L170:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r1, [r0]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r1, #0
	cmp	r4, #0xc7
	ble	.L170	@cond_branch
	b	.L193
.L172:
	mov	r4, #0x0
	add	r2, r6, #0
	add	r2, r2, #0xc8
.L176:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r1, [r0]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r1, #0
	cmp	r4, #0x63
	ble	.L176	@cond_branch
	strh	r5, [r2]
	b	.L165
.L178:
	mov	r4, #0x0
.L182:
	bl	Random
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r6, r4
	strb	r0, [r1]
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r4, r4, #0x1
	cmp	r4, #0xc7
	ble	.L182	@cond_branch
.L193:
	add	r0, r6, r4
	strh	r5, [r0]
	b	.L165
.L184:
	mov	r4, #0x0
	ldr	r3, .L194
	ldrb	r1, [r3]
	ldrb	r0, [r3]
	add	r7, r0, #0x1
	add	r2, r1, #0x1
	mov	r0, #0xff
	mov	ip, r0
.L188:
	add	r0, r6, r4
	add	r1, r4, #0x1
	strb	r2, [r0]
	add	r0, r4, r7
	mov	r4, ip
	and	r0, r0, r4
	add	r0, r5, r0
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	add	r2, r2, #0x1
	add	r4, r1, #0
	cmp	r1, #0xc7
	ble	.L188	@cond_branch
	add	r0, r6, r1
	strh	r5, [r0]
	ldrb	r0, [r3]
	add	r0, r0, #0x1
	strb	r0, [r3]
.L165:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L195:
	.align	2, 0
.L194:
	.word	gUnknown_03000D74
.Lfe12:
	.size	 sub_800DBF8,.Lfe12-sub_800DBF8
	.align	2, 0
	.globl	PkmnStrToASCII
	.type	 PkmnStrToASCII,function
	.thumb_func
PkmnStrToASCII:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r3, #0x0
	ldrb	r0, [r1]
	cmp	r0, #0xff
	beq	.L198	@cond_branch
	ldr	r5, .L202
	add	r2, r1, #0
.L200:
	add	r1, r4, r3
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0xff
	bne	.L200	@cond_branch
.L198:
	add	r1, r4, r3
	mov	r0, #0x0
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L203:
	.align	2, 0
.L202:
	.word	sWireless_RSEtoASCIITable
.Lfe13:
	.size	 PkmnStrToASCII,.Lfe13-PkmnStrToASCII
	.align	2, 0
	.globl	ASCIIToPkmnStr
	.type	 ASCIIToPkmnStr,function
	.thumb_func
ASCIIToPkmnStr:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r3, #0x0
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L206	@cond_branch
	ldr	r5, .L210
	add	r2, r1, #0
.L208:
	add	r1, r4, r3
	ldrb	r0, [r2]
	add	r0, r0, r5
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r2, r2, #0x1
	add	r3, r3, #0x1
	ldrb	r0, [r2]
	cmp	r0, #0
	bne	.L208	@cond_branch
.L206:
	add	r1, r4, r3
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L211:
	.align	2, 0
.L210:
	.word	sWireless_ASCIItoRSETable
.Lfe14:
	.size	 ASCIIToPkmnStr,.Lfe14-ASCIIToPkmnStr
	.align	2, 0
	.globl	sub_800DD1C
	.type	 sub_800DD1C,function
	.thumb_func
sub_800DD1C:
	.syntax unified
	push {r4-r7,lr}
	lsls r0, 24
	lsrs r5, r0, 24
	movs r6, 0
	ldr r0, =gRfuLinkStatus
	ldr r4, [r0]
	ldrb r2, [r4, 0x2]
	ldrb r1, [r4]
	adds r7, r0, 0
	cmp r1, 0x1
	bne _0800DD72
	movs r3, 0
	ands r1, r2
	cmp r1, 0
	beq _0800DD4E
	cmp r5, 0x1
	bne _0800DD48
	ldrb r0, [r4, 0xA]
	b _0800DD8C
	.pool
_0800DD48:
	adds r0, r6, 0x1
	lsls r0, 24
	lsrs r6, r0, 24
_0800DD4E:
	lsrs r2, 1
	adds r0, r3, 0x1
	lsls r0, 24
	lsrs r3, r0, 24
	cmp r3, 0x3
	bhi _0800DD8A
	movs r0, 0x1
	ands r0, r2
	cmp r0, 0
	beq _0800DD4E
	adds r0, r6, 0x1
	cmp r5, r0
	bne _0800DD48
_0800DD68:
	ldr r0, [r7]
	adds r0, 0xA
	adds r0, r3
	ldrb r0, [r0]
	b _0800DD8C
_0800DD72:
	movs r3, 0
	movs r1, 0x1
_0800DD76:
	adds r0, r2, 0
	ands r0, r1
	cmp r0, 0
	bne _0800DD68
	lsrs r2, 1
	adds r0, r3, 0x1
	lsls r0, 24
	lsrs r3, r0, 24
	cmp r3, 0x3
	bls _0800DD76
_0800DD8A:
	movs r0, 0
_0800DD8C:
	pop {r4-r7}
	pop {r1}
	bx r1
.syntax divided
	.code	16
.Lfe15:
	.size	 sub_800DD1C,.Lfe15-sub_800DD1C
	.align	2, 0
	.globl	sub_800DD94
	.type	 sub_800DD94,function
	.thumb_func
sub_800DD94:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	mov	r4, #0x0
	ldr	r0, .L224
	mov	r8, r0
	add	r6, r7, #0x2
	ldr	r0, [r0]
	add	r5, r0, #0
	add	r5, r5, #0xa
.L217:
	add	r0, r6, r4
	add	r1, r5, r4
	ldrb	r1, [r1]
	strb	r1, [r0]
	add	r4, r4, #0x1
	cmp	r4, #0x1
	ble	.L217	@cond_branch
	mov	r4, #0x0
	lsl	r2, r2, #0x7
	mov	ip, r2
	add	r1, r7, #0x4
.L222:
	add	r0, r1, r4
	strb	r3, [r0]
	asr	r3, r3, #0x8
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L222	@cond_branch
	mov	r1, r8
	ldr	r0, [r1]
	ldrb	r0, [r0, #0x8]
	mov	r6, #0x1
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r2, [r7, #0xb]
	mov	r5, #0x2
	neg	r5, r5
	add	r0, r5, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r7, #0xb]
	mov	r4, #0x7f
	mov	r1, r9
	and	r1, r1, r4
	ldrb	r2, [r7, #0xa]
	mov	r0, #0x80
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	and	r0, r0, r4
	mov	r1, ip
	orr	r0, r0, r1
	strb	r0, [r7, #0xa]
	ldrb	r0, [r7]
	mov	r1, #0x10
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x2
	orr	r1, r1, r0
	ldrb	r2, [r7, #0x1]
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r2
	mov	r2, #0xc
	orr	r0, r0, r2
	strb	r0, [r7, #0x1]
	mov	r0, #0x11
	neg	r0, r0
	and	r1, r1, r0
	sub	r0, r0, #0x10
	and	r1, r1, r0
	sub	r0, r0, #0x20
	and	r1, r1, r0
	strb	r1, [r7]
	ldr	r0, .L224+0x4
	bl	FlagGet
	lsl	r0, r0, #0x7
	ldrb	r1, [r7]
	and	r4, r4, r1
	orr	r4, r4, r0
	strb	r4, [r7]
	bl	IsNationalPokedexEnabled
	and	r0, r0, r6
	ldrb	r1, [r7, #0x1]
	and	r5, r5, r1
	orr	r5, r5, r0
	strb	r5, [r7, #0x1]
	ldr	r0, .L224+0x8
	bl	FlagGet
	and	r6, r6, r0
	lsl	r6, r6, #0x1
	ldrb	r1, [r7, #0x1]
	mov	r0, #0x3
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r6
	strb	r0, [r7, #0x1]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L225:
	.align	2, 0
.L224:
	.word	gSaveBlock2Ptr
	.word	0x87f
	.word	0x864
.Lfe16:
	.size	 sub_800DD94,.Lfe16-sub_800DD94
	.align	2, 0
	.globl	sub_800DE7C
	.type	 sub_800DE7C,function
	.thumb_func
sub_800DE7C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r8, r1
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	ldr	r0, .L234
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	bne	.L227	@cond_branch
	mov	r0, #0x1
	mov	r9, r0
	ldr	r6, .L234+0x4
	ldr	r0, [r6]
	lsl	r4, r5, #0x5
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	sub_8010454
	cmp	r0, #0
	beq	.L228	@cond_branch
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x7]
	asr	r0, r0, r5
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L233	@cond_branch
.L228:
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	mov	r0, r8
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
	b	.L230
.L235:
	.align	2, 0
.L234:
	.word	lman
	.word	gRfuLinkStatus
.L227:
	mov	r0, #0x0
	mov	r9, r0
	ldr	r6, .L236
	ldr	r0, [r6]
	lsl	r4, r5, #0x5
	add	r0, r0, r4
	ldrh	r0, [r0, #0x18]
	bl	sub_8010454
	cmp	r0, #0
	beq	.L231	@cond_branch
	ldr	r1, [r6]
.L233:
	add	r1, r4, r1
	add	r1, r1, #0x1a
	add	r0, r7, #0
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, [r6]
	add	r1, r4, r1
	add	r1, r1, #0x29
	mov	r0, r8
	mov	r2, #0x8
	bl	memcpy
	b	.L230
.L237:
	.align	2, 0
.L236:
	.word	gRfuLinkStatus
.L231:
	add	r0, r7, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	mov	r0, r8
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
.L230:
	mov	r0, r9
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 sub_800DE7C,.Lfe17-sub_800DE7C
	.align	2, 0
	.globl	sub_800DF34
	.type	 sub_800DF34,function
	.thumb_func
sub_800DF34:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r5, r1, #0
	lsl	r2, r2, #0x18
	mov	r7, #0x0
	ldr	r6, .L241
	ldr	r0, [r6]
	lsr	r4, r2, #0x13
	add	r2, r0, r4
	ldrh	r1, [r2, #0x18]
	ldr	r0, .L241+0x4
	cmp	r1, r0
	bne	.L239	@cond_branch
	add	r1, r2, #0
	add	r1, r1, #0x1a
	add	r0, r3, #0
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, [r6]
	add	r1, r4, r1
	add	r1, r1, #0x29
	add	r0, r5, #0
	mov	r2, #0x8
	bl	memcpy
	mov	r7, #0x1
	b	.L240
.L242:
	.align	2, 0
.L241:
	.word	gRfuLinkStatus
	.word	0x7f7d
.L239:
	add	r0, r3, #0
	mov	r1, #0x0
	mov	r2, #0xd
	bl	memset
	add	r0, r5, #0
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
.L240:
	add	r0, r7, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 sub_800DF34,.Lfe18-sub_800DF34
	.align	2, 0
	.globl	sub_800DF90
	.type	 sub_800DF90,function
	.thumb_func
sub_800DF90:
	push	{r4, lr}
	add	r4, r1, #0
	ldr	r1, .L244
	mov	r2, #0xd
	bl	memcpy
	ldr	r1, .L244+0x4
	add	r0, r4, #0
	mov	r2, #0x8
	bl	memcpy
	pop	{r4}
	pop	{r0}
	bx	r0
.L245:
	.align	2, 0
.L244:
	.word	gUnknown_02022B14
	.word	gUnknown_02022B22
.Lfe19:
	.size	 sub_800DF90,.Lfe19-sub_800DF90
	.align	2, 0
	.globl	CreateWirelessStatusIndicatorSprite
	.type	 CreateWirelessStatusIndicatorSprite,function
	.thumb_func
CreateWirelessStatusIndicatorSprite:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r2, r1, #0x18
	cmp	r3, #0
	bne	.L247	@cond_branch
	cmp	r2, #0
	bne	.L247	@cond_branch
	mov	r3, #0xe7
	mov	r2, #0x8
.L247:
	ldr	r0, .L250
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L248	@cond_branch
	ldr	r0, .L250+0x4
	add	r1, r3, #0
	mov	r3, #0x0
	bl	CreateSprite
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L250+0x8
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, .L250+0xc
	strh	r0, [r4, #0x3c]
	ldr	r0, .L250+0x10
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	strh	r0, [r4, #0x3a]
	add	r4, r4, #0x3e
	ldrb	r0, [r4]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	ldr	r0, .L250+0x14
	strb	r5, [r0]
	b	.L249
.L251:
	.align	2, 0
.L250:
	.word	gRfuLinkStatus
	.word	sWirelessStatusIndicatorSpriteTemplate
	.word	gSprites
	.word	0x1234
	.word	sWirelessStatusIndicatorSpriteSheet
	.word	gWirelessStatusIndicatorSpriteId
.L248:
	ldr	r0, .L252
	add	r1, r3, #0
	mov	r3, #0x0
	bl	CreateSprite
	ldr	r4, .L252+0x4
	strb	r0, [r4]
	ldr	r5, .L252+0x8
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldr	r1, .L252+0xc
	strh	r1, [r0, #0x3c]
	ldr	r0, .L252+0x10
	ldrh	r0, [r0, #0x6]
	bl	GetSpriteTileStartByTag
	ldrb	r2, [r4]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	strh	r0, [r1, #0x3a]
	ldrb	r1, [r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L249:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L253:
	.align	2, 0
.L252:
	.word	sWirelessStatusIndicatorSpriteTemplate
	.word	gWirelessStatusIndicatorSpriteId
	.word	gSprites
	.word	0x1234
	.word	sWirelessStatusIndicatorSpriteSheet
.Lfe20:
	.size	 CreateWirelessStatusIndicatorSprite,.Lfe20-CreateWirelessStatusIndicatorSprite
	.align	2, 0
	.globl	DestroyWirelessStatusIndicatorSprite
	.type	 DestroyWirelessStatusIndicatorSprite,function
	.thumb_func
DestroyWirelessStatusIndicatorSprite:
	push	{r4, lr}
	ldr	r4, .L256
	ldr	r3, .L256+0x4
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r4
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	ldr	r0, .L256+0x8
	cmp	r1, r0
	bne	.L255	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x3c]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	ldr	r3, .L256+0xc
	mov	r0, #0x84
	lsl	r0, r0, #0x3
	add	r3, r3, r0
	ldr	r0, .L256+0x10
	ldr	r1, [r0]		@ created by thumb_load_double_from_address
	ldr	r2, [r0, #0x4]		@ created by thumb_load_double_from_address
	str	r1, [r3]
	str	r2, [r3, #0x4]
	ldr	r1, .L256+0x14
	mov	r2, #0x4
	bl	CpuSet
.L255:
	pop	{r4}
	pop	{r0}
	bx	r0
.L257:
	.align	2, 0
.L256:
	.word	gSprites
	.word	gWirelessStatusIndicatorSpriteId
	.word	0x1234
	.word	gMain
	.word	gDummyOamData
	.word	0x70003e8
.Lfe21:
	.size	 DestroyWirelessStatusIndicatorSprite,.Lfe21-DestroyWirelessStatusIndicatorSprite
	.align	2, 0
	.globl	LoadWirelessStatusIndicatorSpriteGfx
	.type	 LoadWirelessStatusIndicatorSpriteGfx,function
	.thumb_func
LoadWirelessStatusIndicatorSpriteGfx:
	push	{r4, lr}
	ldr	r4, .L260
	ldrh	r0, [r4, #0x6]
	bl	GetSpriteTileStartByTag
	lsl	r0, r0, #0x10
	ldr	r1, .L260+0x4
	cmp	r0, r1
	bne	.L259	@cond_branch
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
.L259:
	ldr	r0, .L260+0x8
	bl	LoadSpritePalette
	ldr	r1, .L260+0xc
	mov	r0, #0xff
	strb	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.L261:
	.align	2, 0
.L260:
	.word	sWirelessStatusIndicatorSpriteSheet
	.word	-0x10000
	.word	sWirelessStatusIndicatorSpritePalette
	.word	gWirelessStatusIndicatorSpriteId
.Lfe22:
	.size	 LoadWirelessStatusIndicatorSpriteGfx,.Lfe22-LoadWirelessStatusIndicatorSpriteGfx
	.align	2, 0
	.globl	sub_800E124
	.type	 sub_800E124,function
	.thumb_func
sub_800E124:
	push	{r4, lr}
	ldr	r1, .L270
	ldr	r0, [r1]
	ldrb	r2, [r0, #0x2]
	mov	r3, #0x0
	mov	r4, #0x1
.L266:
	add	r0, r2, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L267	@cond_branch
	ldr	r0, [r1]
	add	r0, r0, #0xa
	add	r0, r0, r3
	ldrb	r0, [r0]
	b	.L269
.L271:
	.align	2, 0
.L270:
	.word	gRfuLinkStatus
.L267:
	lsr	r2, r2, #0x1
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L266	@cond_branch
	mov	r0, #0x0
.L269:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 sub_800E124,.Lfe23-sub_800E124
	.align	2, 0
	.globl	sub_800E15C
	.type	 sub_800E15C,function
	.thumb_func
sub_800E15C:
	push	{lr}
	add	r2, r0, #0
	mov	r3, #0x32
	ldrsh	r0, [r2, r3]
	cmp	r0, r1
	beq	.L273	@cond_branch
	mov	r0, #0x0
	strh	r1, [r2, #0x32]
	strh	r0, [r2, #0x34]
	strh	r0, [r2, #0x36]
.L273:
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 sub_800E15C,.Lfe24-sub_800E15C
	.align	2, 0
	.globl	sub_800E174
	.type	 sub_800E174,function
	.thumb_func
sub_800E174:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r1, .L299
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.LCB2097
	b	.L275	@long jump
.LCB2097:
	ldr	r2, .L299+0x4
	add	r1, r0, #0
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r0, r2
	mov	r0, #0x3c
	ldrsh	r1, [r2, r0]
	ldr	r0, .L299+0x8
	cmp	r1, r0
	beq	.LCB2111
	b	.L275	@long jump
.LCB2111:
	add	r6, r2, #0
	mov	r5, #0xff
	mov	r4, #0x0
	ldr	r0, .L299+0xc
	ldr	r0, [r0]
	ldrb	r0, [r0]
	cmp	r0, #0x1
	bne	.L276	@cond_branch
	add	r7, r6, #0
	add	r7, r7, #0x28
	mov	r1, #0x29
	add	r1, r1, r6
	mov	r8, r1
	b	.L277
.L300:
	.align	2, 0
.L299:
	.word	gWirelessStatusIndicatorSpriteId
	.word	gSprites
	.word	0x1234
	.word	gRfuLinkStatus
.L280:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	sub_800DD1C
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r5, r0
	bcc	.L277	@cond_branch
	add	r0, r4, #0
	bl	sub_800DD1C
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L277:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r0, #0x1
	cmp	r4, r0
	blt	.L280	@cond_branch
	b	.L283
.L276:
	bl	sub_800E124
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r7, r6, #0
	add	r7, r7, #0x28
	mov	r2, #0x29
	add	r2, r2, r6
	mov	r8, r2
.L283:
	bl	sub_8012224
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L284	@cond_branch
	mov	r0, #0x4
	b	.L298
.L284:
	cmp	r5, #0x18
	bhi	.L286	@cond_branch
	mov	r0, #0x3
	b	.L298
.L286:
	add	r0, r5, #0
	sub	r0, r0, #0x19
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x65
	bhi	.L288	@cond_branch
	mov	r0, #0x2
	b	.L298
.L288:
	add	r0, r5, #0
	sub	r0, r0, #0x7f
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x65
	bhi	.L290	@cond_branch
	mov	r0, #0x1
	b	.L298
.L290:
	cmp	r5, #0xe4
	bls	.L285	@cond_branch
	mov	r0, #0x0
.L298:
	strh	r0, [r6, #0x2e]
.L285:
	mov	r3, #0x2e
	ldrsh	r1, [r6, r3]
	mov	r2, #0x30
	ldrsh	r0, [r6, r2]
	cmp	r1, r0
	beq	.L293	@cond_branch
	add	r0, r6, #0
	bl	sub_800E15C
	ldrh	r0, [r6, #0x2e]
	strh	r0, [r6, #0x30]
.L293:
	mov	r0, #0x32
	ldrsh	r1, [r6, r0]
	ldr	r2, [r6, #0x8]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r3, #0x36
	ldrsh	r0, [r6, r3]
	ldr	r1, [r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0xa
	lsr	r0, r0, #0x1a
	mov	r3, #0x34
	ldrsh	r1, [r6, r3]
	cmp	r0, r1
	bge	.L294	@cond_branch
	ldrh	r0, [r6, #0x36]
	add	r0, r0, #0x1
	mov	r3, #0x0
	strh	r0, [r6, #0x36]
	strh	r3, [r6, #0x34]
	mov	r1, #0x32
	ldrsh	r0, [r6, r1]
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r2, #0x36
	ldrsh	r1, [r6, r2]
	ldr	r0, [r0]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	mov	r0, #0x0
	ldrsh	r1, [r1, r0]
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	bne	.L296	@cond_branch
	strh	r3, [r6, #0x36]
	b	.L296
.L294:
	ldrh	r0, [r6, #0x34]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x34]
.L296:
	ldr	r4, .L301
	mov	r1, #0x84
	lsl	r1, r1, #0x3
	add	r0, r4, r1
	ldr	r1, .L301+0x4
	ldr	r2, [r1, #0x4]		@ created by thumb_load_double_from_address
	ldr	r1, [r1]		@ created by thumb_load_double_from_address
	str	r1, [r0]
	str	r2, [r0, #0x4]
	mov	r3, #0x20
	ldrsh	r2, [r6, r3]
	mov	r1, #0x0
	ldrsb	r1, [r7, r1]
	add	r2, r2, r1
	ldr	r1, .L301+0x8
	add	r5, r4, r1
	ldr	r3, .L301+0xc
	add	r1, r3, #0
	and	r2, r2, r1
	ldrh	r3, [r5]
	ldr	r1, .L301+0x10
	and	r1, r1, r3
	orr	r1, r1, r2
	strh	r1, [r5]
	ldrh	r1, [r6, #0x22]
	mov	r2, r8
	ldrb	r2, [r2]
	add	r1, r1, r2
	strb	r1, [r0]
	ldrb	r2, [r6, #0x5]
	ldr	r3, .L301+0x14
	add	r5, r4, r3
	lsr	r2, r2, #0x4
	lsl	r2, r2, #0x4
	ldrb	r3, [r5]
	mov	r1, #0xf
	and	r1, r1, r3
	orr	r1, r1, r2
	strb	r1, [r5]
	mov	r1, #0x32
	ldrsh	r2, [r6, r1]
	ldr	r1, [r6, #0x8]
	lsl	r2, r2, #0x2
	add	r2, r2, r1
	mov	r3, #0x36
	ldrsh	r1, [r6, r3]
	ldr	r2, [r2]
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrh	r2, [r1]
	ldrh	r6, [r6, #0x3a]
	add	r2, r2, r6
	ldr	r1, .L301+0x18
	add	r4, r4, r1
	ldr	r3, .L301+0x1c
	add	r1, r3, #0
	and	r2, r2, r1
	ldrh	r3, [r4]
	ldr	r1, .L301+0x20
	and	r1, r1, r3
	orr	r1, r1, r2
	strh	r1, [r4]
	ldr	r1, .L301+0x24
	mov	r2, #0x4
	bl	CpuSet
	bl	sub_8011A74
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L275	@cond_branch
	bl	DestroyWirelessStatusIndicatorSprite
.L275:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	gMain
	.word	sWirelessStatusIndicatorOamData
	.word	0x422
	.word	0x1ff
	.word	-0x200
	.word	0x425
	.word	0x424
	.word	0x3ff
	.word	-0x400
	.word	0x70003e8
.Lfe25:
	.size	 sub_800E174,.Lfe25-sub_800E174
	.align	2, 0
	.globl	CopyTrainerRecord
	.type	 CopyTrainerRecord,function
	.thumb_func
CopyTrainerRecord:
	push	{lr}
	stmia	r0!, {r1}
	add	r1, r2, #0
	bl	StringCopy
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 CopyTrainerRecord,.Lfe26-CopyTrainerRecord
	.align	2, 0
	.globl	NameIsNotEmpty
	.type	 NameIsNotEmpty,function
	.thumb_func
NameIsNotEmpty:
	push	{lr}
	add	r2, r0, #0
	mov	r1, #0x0
.L308:
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L307	@cond_branch
	mov	r0, #0x1
	b	.L311
.L307:
	add	r1, r1, #0x1
	cmp	r1, #0x7
	ble	.L308	@cond_branch
	mov	r0, #0x0
.L311:
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 NameIsNotEmpty,.Lfe27-NameIsNotEmpty
	.align	2, 0
	.globl	RecordMixTrainerNames
	.type	 RecordMixTrainerNames,function
	.thumb_func
RecordMixTrainerNames:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	ldr	r0, .L339
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB2464
	b	.L313	@long jump
.LCB2464:
	mov	r0, #0xf0
	bl	AllocZeroed
	str	r0, [sp, #0x14]
	mov	r4, #0x0
	b	.L314
.L340:
	.align	2, 0
.L339:
	.word	gWirelessCommType
.L317:
	lsl	r2, r4, #0x2
	mov	r0, sp
	add	r1, r0, r2
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [r1]
	mov	r5, #0x0
	mov	r8, r2
	lsl	r0, r4, #0x3
	add	r1, r4, #0x1
	mov	r9, r1
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	str	r0, [sp, #0x1c]
	ldr	r7, .L341
	mov	sl, r7
	ldr	r6, .L341+0x4
	mov	r4, #0x0
	mov	r0, sl
	sub	r0, r0, #0x4
	ldr	r1, [sp, #0x1c]
	add	r3, r1, r0
.L321:
	ldrh	r1, [r3]
	ldr	r0, .L341+0x8
	ldr	r2, [r0]
	ldr	r7, .L341+0x4
	add	r0, r2, r7
	add	r0, r0, r4
	ldr	r0, [r0]
	cmp	r1, r0
	bne	.L320	@cond_branch
	add	r1, r2, r6
	add	r1, r1, #0x4
	ldr	r0, [sp, #0x1c]
	add	r0, r0, sl
	str	r3, [sp, #0x18]
	bl	StringCompare
	ldr	r3, [sp, #0x18]
	cmp	r0, #0
	bne	.L320	@cond_branch
	mov	r0, sp
	add	r0, r0, r8
	str	r5, [r0]
.L320:
	add	r6, r6, #0xc
	add	r4, r4, #0xc
	add	r5, r5, #0x1
	cmp	r5, #0x13
	ble	.L321	@cond_branch
	mov	r4, r9
.L314:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L317	@cond_branch
	mov	r0, #0x0
	mov	r8, r0
	mov	r4, #0x0
	mov	r7, sp
	mov	r5, #0x0
	ldr	r6, [sp, #0x14]
	b	.L325
.L342:
	.align	2, 0
.L341:
	.word	gLinkPlayers+0x8
	.word	0x3b98
	.word	gSaveBlock1Ptr
.L328:
	bl	GetMultiplayerId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	beq	.L327	@cond_branch
	ldr	r2, .L343
	add	r0, r5, r2
	ldrh	r0, [r0, #0x1a]
	cmp	r0, #0x1
	beq	.L327	@cond_branch
	add	r0, r2, #0x4
	add	r0, r5, r0
	ldrh	r1, [r0]
	add	r2, r2, #0x8
	add	r2, r5, r2
	add	r0, r6, #0
	bl	CopyTrainerRecord
	ldr	r2, [r7]
	cmp	r2, #0
	blt	.L330	@cond_branch
	ldr	r0, .L343+0x4
	ldr	r1, [r0]
	lsl	r0, r2, #0x1
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, .L343+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	mov	r2, #0x8
	bl	memset
.L330:
	add	r6, r6, #0xc
	mov	r0, #0x1
	add	r8, r8, r0
.L327:
	add	r7, r7, #0x4
	add	r5, r5, #0x1c
	add	r4, r4, #0x1
.L325:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r4, r0
	blt	.L328	@cond_branch
	mov	r4, #0x0
	ldr	r1, .L343+0x4
	mov	r9, r1
	ldr	r6, .L343+0xc
	mov	r7, #0x0
	mov	r1, r8
	lsl	r0, r1, #0x1
	add	r0, r0, r8
	lsl	r0, r0, #0x2
	ldr	r1, [sp, #0x14]
	add	r5, r0, r1
.L335:
	mov	r1, r9
	ldr	r0, [r1]
	add	r0, r0, r6
	add	r0, r0, #0x4
	bl	NameIsNotEmpty
	cmp	r0, #0
	beq	.L334	@cond_branch
	mov	r0, r9
	ldr	r2, [r0]
	ldr	r1, .L343+0xc
	add	r0, r2, r1
	add	r0, r0, r7
	ldr	r1, [r0]
	add	r2, r2, r6
	add	r2, r2, #0x4
	add	r0, r5, #0
	bl	CopyTrainerRecord
	add	r5, r5, #0xc
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x13
	bgt	.L333	@cond_branch
.L334:
	add	r6, r6, #0xc
	add	r7, r7, #0xc
	add	r4, r4, #0x1
	cmp	r4, #0x13
	ble	.L335	@cond_branch
.L333:
	ldr	r0, .L343+0x4
	ldr	r0, [r0]
	ldr	r7, .L343+0xc
	add	r0, r0, r7
	ldr	r1, [sp, #0x14]
	mov	r2, #0xf0
	bl	memcpy
	ldr	r0, [sp, #0x14]
	bl	Free
.L313:
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L344:
	.align	2, 0
.L343:
	.word	gLinkPlayers
	.word	gSaveBlock1Ptr
	.word	0x3b9c
	.word	0x3b98
.Lfe28:
	.size	 RecordMixTrainerNames,.Lfe28-RecordMixTrainerNames
	.align	2, 0
	.globl	sub_800E540
	.type	 sub_800E540,function
	.thumb_func
sub_800E540:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	mov	r7, #0x0
	ldr	r6, .L355
	ldr	r4, .L355+0x4
	mov	r5, #0x0
.L349:
	ldr	r0, [r6]
	add	r0, r0, r4
	add	r0, r0, #0x4
	mov	r1, r9
	bl	StringCompare
	cmp	r0, #0
	bne	.L350	@cond_branch
	ldr	r0, [r6]
	ldr	r1, .L355+0x4
	add	r0, r0, r1
	add	r0, r0, r5
	ldr	r0, [r0]
	cmp	r0, r8
	bne	.L350	@cond_branch
	mov	r0, #0x1
	b	.L353
.L356:
	.align	2, 0
.L355:
	.word	gSaveBlock1Ptr
	.word	0x3b98
.L350:
	ldr	r0, [r6]
	add	r0, r0, r4
	add	r0, r0, #0x4
	bl	NameIsNotEmpty
	cmp	r0, #0
	beq	.L354	@cond_branch
	add	r4, r4, #0xc
	add	r5, r5, #0xc
	add	r7, r7, #0x1
	cmp	r7, #0x13
	ble	.L349	@cond_branch
.L354:
	mov	r0, #0x0
.L353:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 sub_800E540,.Lfe29-sub_800E540
	.align	2, 0
	.globl	WipeTrainerNameRecords
	.type	 WipeTrainerNameRecords,function
	.thumb_func
WipeTrainerNameRecords:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x4
	ldr	r0, .L363
	mov	r8, r0
	mov	r7, #0x0
	mov	r6, r8
	mov	r5, #0x0
	mov	r4, #0x13
.L361:
	ldr	r0, .L363+0x4
	ldr	r1, [r0]
	mov	r2, r8
	add	r0, r1, r2
	add	r0, r0, r5
	str	r7, [r0]
	mov	r0, sp
	strh	r7, [r0]
	add	r1, r1, r6
	add	r1, r1, #0x4
	ldr	r2, .L363+0x8
	bl	CpuSet
	add	r6, r6, #0xc
	add	r5, r5, #0xc
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L361	@cond_branch
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L364:
	.align	2, 0
.L363:
	.word	0x3b98
	.word	gSaveBlock1Ptr
	.word	0x1000004
.Lfe30:
	.size	 WipeTrainerNameRecords,.Lfe30-WipeTrainerNameRecords

	.lcomm	gUnknown_03000D74,1
.text
	.align	2, 0

