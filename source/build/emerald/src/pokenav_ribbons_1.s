@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
	.type	 gUnknown_086235D8,object
gUnknown_086235D8:
	.word	sub_81CFB8C
	.word	sub_81CFC2C
	.word	sub_81CFC40
	.size	 gUnknown_086235D8,12
	.align	1, 0
	.type	 gUnknown_086235E4,object
gUnknown_086235E4:
	.short	0x300
	.short	0x367f
	.short	0x7fff
	.short	0x3dcd
	.short	0x0
	.short	0x21b7
	.short	0x2506
	.short	0x4f7f
	.short	0x2a16
	.short	0x3637
	.short	0x6318
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_086235E4,32
	.align	2, 0
	.type	 gUnknown_08623604,object
gUnknown_08623604:
	.word	0x20010
	.word	-0x77777800
	.word	-0x66666678
	.word	0x38880099
	.word	0x69996666
	.word	-0x77ff8889
	.word	0x63777768
	.word	0xc777766
	.word	0x11117776
	.word	0x1f500310
	.word	0x66676666
	.word	0x1701500
	.word	0x1301111
	.word	0x7f03f60
	.word	-0x76f85f4f
	.word	0x1200410
	.word	0x996639
	.word	0x340af68
	.word	-0x67e1ffe9
	.word	0x67801a60
	.word	0x1b905f50
	.word	0x1f20c1
	.word	-0x6669a8fd
	.word	0x3405199
	.word	-0xf58af19
	.word	0x33003
	.word	-0x6ffe1000
	.word	-0x7cefff
	.word	0x37003f0
	.word	0x1f08750
	.word	-0x78affed0
	.word	-0x604ffc10
	.word	0x55666600
	.word	0x55633355
	.word	0x68880055
	.word	0x69995555
	.word	-0x77f3999a
	.word	0x10333338
	.word	0x554750cf
	.word	0x170cd55
	.word	0x33330311
	.word	-0x78bfe0d0
	.word	0x3e373157
	.word	0x47513399
	.word	0x3b503551
	.word	0x17033b0
	.word	-0x7cff31ab
	.word	-0x6c99fcf0
	.word	0x1cd03c00
	.word	0x100
	.size	 gUnknown_08623604,200
	.align	2, 0
	.type	 gUnknown_086236CC,object
gUnknown_086236CC:
	.word	0x50010
	.word	-0xfeffdcf
	.word	0x11001
	.word	0x1f00110
	.word	0x1c086
	.word	-0x10000000
	.word	0x6013039
	.word	-0xff8efc1
	.word	-0xffe3fff
	.word	-0xfc00fc1
	.word	-0x1c00fff
	.word	0x3ff001f0
	.word	0x3ff001f0
	.word	0x1f03ff0
	.word	0x2e033fd0
	.word	0x1a00410
	.word	-0xfc00ffb
	.word	0x83f8001
	.word	-0x5ff6efd1
	.word	0x3ff00a01
	.word	0x3ff001f0
	.word	-0xf1dc010
	.word	0x3ff02f
	.word	0xe100d3f
	.word	-0xf0fe60
	.word	0x1f03ff0
	.word	0x3ff13ff1
	.word	0x3ff02ff0
	.word	0x3ff03ff0
	.word	-0xffe0f01
	.word	-0xffe0fc1
	.word	-0xffe0fc1
	.word	-0xfc00fc1
	.word	0x3ff0ff01
	.word	0x3ff001f0
	.word	0x3ff001f0
	.word	0x1f03ff0
	.word	-0xf00c010
	.word	-0xfc00fc5
	.word	-0xfc00fff
	.word	-0xffe0fc1
	.word	-0x70c00fc1
	.word	0x100b0140
	.word	-0x3ffe0ff4
	.word	-0xfc00fff
	.word	0x1f0fc01
	.word	0x3ff0a384
	.word	0x1f001f0
	.word	0x3fa0
	.size	 gUnknown_086236CC,196
	.align	1, 0
	.type	 gUnknown_08623790,object
gUnknown_08623790:
	.short	0x300
	.short	0x367f
	.short	0x7fff
	.short	0x3dcd
	.short	0x0
	.short	0x7f65
	.short	0x5560
	.short	0x669f
	.short	0x1072
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_08623790,32
	.align	2, 0
	.type	 gUnknown_086237B0,object
	.size	 gUnknown_086237B0,8
gUnknown_086237B0:
	.byte	0x65
	.byte	0x20
	.byte	0x0
	.space	1
	.byte	0x7a
	.byte	0x30
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 gUnknown_086237B8,object
gUnknown_086237B8:
	.word	0x0
	.word	sub_81CFFFC
	.word	sub_81D0074
	.word	sub_81D00EC
	.word	sub_81D0164
	.word	sub_81D01DC
	.word	sub_81D021C
	.size	 gUnknown_086237B8,28
	.align	2, 0
	.type	 gUnknown_086237D4,object
	.size	 gUnknown_086237D4,8
gUnknown_086237D4:
	.byte	0x1
	.byte	0x1
	.byte	0x6
	.byte	0x7
	.byte	0x2
	.byte	0x1
	.short	0x14
	.type	 sText_MaleSymbol,object
sText_MaleSymbol:
	.byte	0xfc
	.byte	0x4
	.byte	0x5
	.byte	0x1
	.byte	0x6
	.byte	0xb5
	.byte	0xfc
	.byte	0x4
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0xff
	.size	 sText_MaleSymbol,12
	.type	 sText_FemaleSymbol,object
sText_FemaleSymbol:
	.byte	0xfc
	.byte	0x4
	.byte	0x7
	.byte	0x1
	.byte	0x8
	.byte	0xb6
	.byte	0xfc
	.byte	0x4
	.byte	0x2
	.byte	0x1
	.byte	0x3
	.byte	0xff
	.size	 sText_FemaleSymbol,12
	.type	 sText_NoGenderSymbol,object
sText_NoGenderSymbol:
	.byte	0x77
	.byte	0xff
	.size	 sText_NoGenderSymbol,2
.text
	.align	2, 0
	.globl	PokenavCallback_Init_12
	.type	 PokenavCallback_Init_12,function
	.thumb_func
PokenavCallback_Init_12:
	push	{r4, lr}
	mov	r0, #0x9
	mov	r1, #0x20
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L4	@cond_branch
	ldr	r1, .L6
	mov	r0, #0x12
	bl	AllocSubstruct
	str	r0, [r4, #0x1c]
	cmp	r0, #0
	beq	.L4	@cond_branch
	ldr	r0, .L6+0x4
	str	r0, [r4]
	ldr	r0, .L6+0x8
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r4, #0x4]
	mov	r0, #0x0
	str	r0, [r4, #0x14]
	mov	r0, #0x1
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	0x6ac
	.word	sub_81CFA68
	.word	sub_81CFB74
.L4:
	mov	r0, #0x0
.L5:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 PokenavCallback_Init_12,.Lfe1-PokenavCallback_Init_12
	.align	2, 0
	.globl	PokenavCallback_Init_14
	.type	 PokenavCallback_Init_14,function
	.thumb_func
PokenavCallback_Init_14:
	push	{r4, lr}
	mov	r0, #0x9
	mov	r1, #0x20
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L9	@cond_branch
	mov	r0, #0x12
	bl	GetSubstructPtr
	str	r0, [r4, #0x1c]
	ldr	r0, .L11
	str	r0, [r4]
	mov	r0, #0x1
	str	r0, [r4, #0x14]
	b	.L10
.L12:
	.align	2, 0
.L11:
	.word	sub_81CFA88
.L9:
	mov	r0, #0x0
.L10:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe2:
	.size	 PokenavCallback_Init_14,.Lfe2-PokenavCallback_Init_14
	.align	2, 0
	.globl	sub_81CFA34
	.type	 sub_81CFA34,function
	.thumb_func
sub_81CFA34:
	push	{lr}
	mov	r0, #0x9
	bl	GetSubstructPtr
	ldr	r1, [r0]
	bl	_call_via_r1
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 sub_81CFA34,.Lfe3-sub_81CFA34
	.align	2, 0
	.globl	sub_81CFA48
	.type	 sub_81CFA48,function
	.thumb_func
sub_81CFA48:
	push	{lr}
	mov	r0, #0x9
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x18]
	cmp	r0, #0
	bne	.L15	@cond_branch
	mov	r0, #0x12
	bl	FreePokenavSubstruct
.L15:
	mov	r0, #0x9
	bl	FreePokenavSubstruct
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_81CFA48,.Lfe4-sub_81CFA48
	.align	2, 0
	.type	 sub_81CFA68,function
	.thumb_func
sub_81CFA68:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #0x4]
	bl	IsLoopedTaskActive
	cmp	r0, #0
	bne	.L17	@cond_branch
	ldr	r0, .L18
	str	r0, [r4]
.L17:
	mov	r0, #0x0
	pop	{r4}
	pop	{r1}
	bx	r1
.L19:
	.align	2, 0
.L18:
	.word	sub_81CFA88
.Lfe5:
	.size	 sub_81CFA68,.Lfe5-sub_81CFA68
	.align	2, 0
	.type	 sub_81CFA88,function
	.thumb_func
sub_81CFA88:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r2, .L28
	ldrh	r1, [r2, #0x30]
	mov	r0, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L21	@cond_branch
	mov	r0, #0x1
	b	.L27
.L29:
	.align	2, 0
.L28:
	.word	gMain
.L21:
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L22	@cond_branch
	mov	r0, #0x2
	b	.L27
.L22:
	ldrh	r1, [r2, #0x2e]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L23	@cond_branch
	mov	r0, #0x3
	b	.L27
.L23:
	mov	r0, #0x10
	and	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0
	beq	.L24	@cond_branch
	mov	r0, #0x4
	b	.L27
.L24:
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	str	r2, [r4, #0x18]
	ldr	r0, .L30
	str	r0, [r4]
	mov	r0, #0x5
	b	.L27
.L31:
	.align	2, 0
.L30:
	.word	sub_81CFB08
.L25:
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L26	@cond_branch
	mov	r0, #0x0
	b	.L27
.L26:
	bl	GetSelectedMatchCall
	ldr	r1, [r4, #0x1c]
	strh	r0, [r1, #0x2]
	str	r5, [r4, #0x18]
	ldr	r0, .L32
	str	r0, [r4]
	mov	r0, #0x6
.L27:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L33:
	.align	2, 0
.L32:
	.word	sub_81CFB10
.Lfe6:
	.size	 sub_81CFA88,.Lfe6-sub_81CFA88
	.align	2, 0
	.type	 sub_81CFB08,function
	.thumb_func
sub_81CFB08:
	ldr	r0, .L35
	bx	lr
.L36:
	.align	2, 0
.L35:
	.word	0x186a5
.Lfe7:
	.size	 sub_81CFB08,.Lfe7-sub_81CFB08
	.align	2, 0
	.type	 sub_81CFB10,function
	.thumb_func
sub_81CFB10:
	ldr	r0, .L38
	bx	lr
.L39:
	.align	2, 0
.L38:
	.word	0x186ad
.Lfe8:
	.size	 sub_81CFB10,.Lfe8-sub_81CFB10
	.align	2, 0
	.type	 sub_81CFB18,function
	.thumb_func
sub_81CFB18:
	push	{lr}
	mov	r0, #0x9
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x14]
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 sub_81CFB18,.Lfe9-sub_81CFB18
	.align	2, 0
	.type	 sub_81CFB28,function
	.thumb_func
sub_81CFB28:
	push	{lr}
	mov	r0, #0x9
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x1c]
	add	r0, r0, #0x4
	pop	{r1}
	bx	r1
.Lfe10:
	.size	 sub_81CFB28,.Lfe10-sub_81CFB28
	.align	2, 0
	.type	 sub_81CFB38,function
	.thumb_func
sub_81CFB38:
	push	{lr}
	mov	r0, #0x9
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x1c]
	ldrh	r0, [r0]
	pop	{r1}
	bx	r1
.Lfe11:
	.size	 sub_81CFB38,.Lfe11-sub_81CFB38
	.align	2, 0
	.type	 sub_81CFB48,function
	.thumb_func
sub_81CFB48:
	push	{r4, lr}
	mov	r0, #0x9
	bl	GetSubstructPtr
	add	r4, r0, #0
	bl	GetSelectedMatchCall
	ldr	r1, [r4, #0x1c]
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x6]
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 sub_81CFB48,.Lfe12-sub_81CFB48
	.align	2, 0
	.type	 sub_81CFB64,function
	.thumb_func
sub_81CFB64:
	push	{lr}
	mov	r0, #0x9
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x1c]
	ldrh	r0, [r0, #0x2]
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 sub_81CFB64,.Lfe13-sub_81CFB64
	.align	2, 0
	.type	 sub_81CFB74,function
	.thumb_func
sub_81CFB74:
	push	{lr}
	ldr	r2, .L46
	lsl	r1, r0, #0x2
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	_call_via_r1
	pop	{r1}
	bx	r1
.L47:
	.align	2, 0
.L46:
	.word	gUnknown_086235D8
.Lfe14:
	.size	 sub_81CFB74,.Lfe14-sub_81CFB74
	.align	2, 0
	.type	 sub_81CFB8C,function
	.thumb_func
sub_81CFB8C:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	mov	r0, #0x9
	bl	GetSubstructPtr
	add	r6, r0, #0
	ldr	r0, [r6, #0x1c]
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, [r6, #0x1c]
	strh	r1, [r0, #0x2]
	ldr	r1, .L59
	ldr	r0, [sp]
	and	r0, r0, r1
	mov	r1, #0xe
	orr	r0, r0, r1
	str	r0, [sp]
	mov	r5, #0x0
.L52:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L59+0x4
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L58	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x6
	bl	GetMonData
	cmp	r0, #0
	bne	.L51	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x4
	bl	GetMonData
	cmp	r0, #0
	bne	.L51	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x52
	bl	GetMonData
	add	r3, r0, #0
	cmp	r3, #0
	beq	.L51	@cond_branch
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x10
	ldr	r2, .L59+0x8
	ldr	r0, [sp]
	and	r0, r0, r2
	orr	r0, r0, r1
	lsl	r2, r3, #0x10
	ldr	r1, .L59+0xc
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp]
	add	r0, r6, #0
	mov	r1, sp
	bl	sub_81CFCEC
.L51:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L52	@cond_branch
.L58:
	mov	r0, #0x1
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L60:
	.align	2, 0
.L59:
	.word	-0x100
	.word	gPlayerParty
	.word	-0xff01
	.word	0xffff
.Lfe15:
	.size	 sub_81CFB8C,.Lfe15-sub_81CFB8C
	.align	2, 0
	.type	 sub_81CFC2C,function
	.thumb_func
sub_81CFC2C:
	push	{lr}
	mov	r0, #0x9
	bl	GetSubstructPtr
	mov	r1, #0x0
	str	r1, [r0, #0x10]
	str	r1, [r0, #0xc]
	mov	r0, #0x1
	pop	{r1}
	bx	r1
.Lfe16:
	.size	 sub_81CFC2C,.Lfe16-sub_81CFC2C
	.align	2, 0
	.type	 sub_81CFC40,function
	.thumb_func
sub_81CFC40:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x9
	bl	GetSubstructPtr
	mov	r8, r0
	ldr	r7, [r0, #0xc]
	ldr	r6, [r0, #0x10]
	mov	r0, #0x0
	mov	r9, r0
	cmp	r7, #0xd
	bgt	.L64	@cond_branch
	b	.L66
.L68:
	add	r0, r7, #0
	add	r1, r6, #0
	bl	CheckBoxMonSanityAt
	cmp	r0, #0
	beq	.L69	@cond_branch
	lsl	r0, r7, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r6, #0x18
	lsr	r4, r0, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x52
	bl	GetBoxMonDataAt
	add	r3, r0, #0
	cmp	r3, #0
	beq	.L69	@cond_branch
	ldr	r1, .L75
	ldr	r0, [sp]
	and	r0, r0, r1
	orr	r0, r0, r5
	lsl	r2, r4, #0x8
	ldr	r1, .L75+0x4
	and	r0, r0, r1
	orr	r0, r0, r2
	lsl	r2, r3, #0x10
	ldr	r1, .L75+0x8
	and	r0, r0, r1
	orr	r0, r0, r2
	str	r0, [sp]
	mov	r0, r8
	mov	r1, sp
	bl	sub_81CFCEC
.L69:
	mov	r1, #0x1
	add	r9, r9, r1
	add	r6, r6, #0x1
	mov	r0, r9
	cmp	r0, #0xe
	ble	.L66	@cond_branch
	mov	r1, r8
	str	r7, [r1, #0xc]
	str	r6, [r1, #0x10]
	mov	r0, #0x3
	b	.L74
.L76:
	.align	2, 0
.L75:
	.word	-0x100
	.word	-0xff01
	.word	0xffff
.L66:
	cmp	r6, #0x1d
	ble	.L68	@cond_branch
	mov	r6, #0x0
	add	r7, r7, #0x1
	cmp	r7, #0xd
	ble	.L66	@cond_branch
.L64:
	mov	r0, #0x1
	mov	r1, r8
	str	r0, [r1, #0x14]
	mov	r0, #0x4
.L74:
	add	sp, sp, #0x4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe17:
	.size	 sub_81CFC40,.Lfe17-sub_81CFC40
	.align	2, 0
	.type	 sub_81CFCEC,function
	.thumb_func
sub_81CFCEC:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	add	r7, r1, #0
	mov	r1, #0x0
	ldr	r0, [r5, #0x1c]
	ldrh	r2, [r0]
	lsr	r3, r2, #0x1
	cmp	r2, r3
	beq	.L79	@cond_branch
	add	r6, r0, #0
	ldrh	r4, [r7, #0x2]
.L80:
	lsl	r0, r3, #0x2
	add	r0, r6, r0
	ldrh	r0, [r0, #0x6]
	cmp	r4, r0
	bls	.L81	@cond_branch
	add	r2, r3, #0
	b	.L82
.L81:
	add	r1, r3, #0x1
.L82:
	sub	r0, r2, r1
	lsr	r0, r0, #0x1
	add	r3, r1, r0
	cmp	r2, r3
	bne	.L80	@cond_branch
.L79:
	ldr	r0, [r5, #0x1c]
	ldrh	r2, [r0]
	lsl	r6, r3, #0x2
	cmp	r2, r3
	bls	.L85	@cond_branch
	lsl	r0, r2, #0x2
	sub	r4, r0, #0x4
.L87:
	ldr	r0, [r5, #0x1c]
	lsl	r1, r2, #0x2
	add	r0, r0, #0x4
	add	r1, r0, r1
	add	r0, r0, r4
	ldr	r0, [r0]
	str	r0, [r1]
	sub	r4, r4, #0x4
	sub	r2, r2, #0x1
	cmp	r2, r3
	bhi	.L87	@cond_branch
.L85:
	ldr	r0, [r5, #0x1c]
	add	r0, r0, #0x4
	add	r0, r0, r6
	ldr	r1, [r7]
	str	r1, [r0]
	ldr	r1, [r5, #0x1c]
	ldrh	r0, [r1]
	add	r0, r0, #0x1
	strh	r0, [r1]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_81CFCEC,.Lfe18-sub_81CFCEC
	.align	2, 0
	.type	 sub_81CFD58,function
	.thumb_func
sub_81CFD58:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
.L93:
	mov	r0, #0x64
	mov	r1, r5
	mul	r1, r1, r0
	ldr	r0, .L112
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x5
	bl	GetMonData
	cmp	r0, #0
	beq	.L92	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x6
	bl	GetMonData
	cmp	r0, #0
	bne	.L92	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x53
	bl	GetMonData
	cmp	r0, #0
	bne	.L111	@cond_branch
.L92:
	add	r5, r5, #0x1
	cmp	r5, #0x5
	ble	.L93	@cond_branch
	mov	r5, #0x0
.L101:
	mov	r4, #0x0
	lsl	r6, r5, #0x18
.L105:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	CheckBoxMonSanityAt
	cmp	r0, #0
	beq	.L104	@cond_branch
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	lsr	r0, r6, #0x18
	mov	r2, #0x53
	bl	GetBoxMonDataAt
	cmp	r0, #0
	beq	.L104	@cond_branch
.L111:
	mov	r0, #0x1
	b	.L110
.L113:
	.align	2, 0
.L112:
	.word	gPlayerParty
.L104:
	add	r4, r4, #0x1
	cmp	r4, #0x1d
	ble	.L105	@cond_branch
	add	r5, r5, #0x1
	cmp	r5, #0xd
	ble	.L101	@cond_branch
	mov	r0, #0x0
.L110:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe19:
	.size	 sub_81CFD58,.Lfe19-sub_81CFD58
	.align	2, 0
	.globl	sub_81CFDD0
	.type	 sub_81CFDD0,function
	.thumb_func
sub_81CFDD0:
	push	{r4, lr}
	mov	r1, #0x81
	lsl	r1, r1, #0x4
	mov	r0, #0xa
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L115	@cond_branch
	ldr	r0, .L117
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r4, #0x4]
	ldr	r0, .L117+0x4
	str	r0, [r4]
	mov	r0, #0x0
	str	r0, [r4, #0xc]
	mov	r0, #0x1
	b	.L116
.L118:
	.align	2, 0
.L117:
	.word	sub_81CFEB8
	.word	sub_81CFE84
.L115:
	mov	r0, #0x0
.L116:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe20:
	.size	 sub_81CFDD0,.Lfe20-sub_81CFDD0
	.align	2, 0
	.globl	sub_81CFE08
	.type	 sub_81CFE08,function
	.thumb_func
sub_81CFE08:
	push	{r4, lr}
	mov	r1, #0x81
	lsl	r1, r1, #0x4
	mov	r0, #0xa
	bl	AllocSubstruct
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L120	@cond_branch
	ldr	r0, .L122
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r4, #0x4]
	ldr	r0, .L122+0x4
	str	r0, [r4]
	mov	r0, #0x1
	str	r0, [r4, #0xc]
	b	.L121
.L123:
	.align	2, 0
.L122:
	.word	sub_81CFEB8
	.word	sub_81CFE84
.L120:
	mov	r0, #0x0
.L121:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe21:
	.size	 sub_81CFE08,.Lfe21-sub_81CFE08
	.align	2, 0
	.globl	sub_81CFE40
	.type	 sub_81CFE40,function
	.thumb_func
sub_81CFE40:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0xa
	bl	GetSubstructPtr
	add	r5, r0, #0
	ldr	r0, .L125
	lsl	r4, r4, #0x2
	add	r4, r4, r0
	ldr	r0, [r4]
	mov	r1, #0x1
	bl	CreateLoopedTask
	str	r0, [r5, #0x4]
	ldr	r0, .L125+0x4
	str	r0, [r5]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L126:
	.align	2, 0
.L125:
	.word	gUnknown_086237B8
	.word	sub_81CFE84
.Lfe22:
	.size	 sub_81CFE40,.Lfe22-sub_81CFE40
	.align	2, 0
	.globl	sub_81CFE70
	.type	 sub_81CFE70,function
	.thumb_func
sub_81CFE70:
	push	{lr}
	mov	r0, #0xa
	bl	GetSubstructPtr
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 sub_81CFE70,.Lfe23-sub_81CFE70
	.align	2, 0
	.type	 sub_81CFE84,function
	.thumb_func
sub_81CFE84:
	push	{lr}
	mov	r0, #0xa
	bl	GetSubstructPtr
	ldr	r0, [r0, #0x4]
	bl	IsLoopedTaskActive
	pop	{r1}
	bx	r1
.Lfe24:
	.size	 sub_81CFE84,.Lfe24-sub_81CFE84
	.align	2, 0
	.globl	sub_81CFE98
	.type	 sub_81CFE98,function
	.thumb_func
sub_81CFE98:
	push	{r4, lr}
	mov	r0, #0xa
	bl	GetSubstructPtr
	add	r4, r0, #0
	bl	sub_81C8234
	ldrb	r0, [r4, #0x8]
	bl	RemoveWindow
	mov	r0, #0xa
	bl	FreePokenavSubstruct
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 sub_81CFE98,.Lfe25-sub_81CFE98
	.align	2, 0
	.type	 sub_81CFEB8,function
	.thumb_func
sub_81CFEB8:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r0, #0xa
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x5
	bls	.LCB1052
	b	.L131	@long jump
.LCB1052:
	lsl	r0, r4, #0x2
	ldr	r1, .L154
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L155:
	.align	2, 0
.L154:
	.word	.L146
	.align	2, 0
	.align	2, 0
.L146:
	.word	.L132
	.word	.L133
	.word	.L136
	.word	.L138
	.word	.L140
	.word	.L143
.L132:
	ldr	r0, .L156
	mov	r1, #0x2
	bl	InitBgTemplates
	ldr	r1, .L156+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	add	r1, r5, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, .L156+0x8
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r0, .L156+0xc
	mov	r1, #0x10
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
.L153:
	mov	r0, #0x0
	b	.L148
.L157:
	.align	2, 0
.L156:
	.word	gUnknown_086237B0
	.word	gUnknown_08623604
	.word	gUnknown_086236CC
	.word	gUnknown_086235E4
.L133:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L149	@cond_branch
	bl	sub_81CFB18
	cmp	r0, #0
	beq	.L149	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	bl	ShowBg
	b	.L153
.L136:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L149	@cond_branch
	ldr	r0, .L158
	mov	r1, #0x20
	mov	r2, #0x20
	bl	CopyPaletteIntoBufferUnfaded
	bl	sub_81D0304
	b	.L153
.L159:
	.align	2, 0
.L158:
	.word	gUnknown_08623790
.L138:
	bl	sub_81C8224
	cmp	r0, #0
	bne	.L149	@cond_branch
	add	r0, r5, #0
	bl	sub_81D024C
	b	.L153
.L140:
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L149	@cond_branch
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	HideBg
	mov	r0, #0x9
	bl	PrintHelpBarText
	mov	r0, #0x1
	bl	PokenavFadeScreen
	ldr	r0, [r5, #0xc]
	cmp	r0, #0
	bne	.L153	@cond_branch
	mov	r0, #0x2
	bl	LoadLeftHeaderGfxForIndex
	mov	r0, #0x2
	mov	r1, #0x1
	mov	r2, #0x0
	bl	sub_81C7FA0
	b	.L153
.L143:
	bl	IsPaletteFadeActive
	cmp	r0, #0
	bne	.L149	@cond_branch
	bl	sub_81C8010
	cmp	r0, #0
	beq	.L131	@cond_branch
.L149:
	mov	r0, #0x2
	b	.L148
.L131:
	mov	r0, #0x4
.L148:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe26:
	.size	 sub_81CFEB8,.Lfe26-sub_81CFEB8
	.align	2, 0
	.type	 sub_81CFFFC,function
	.thumb_func
sub_81CFFFC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0xa
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L170	@cond_branch
	cmp	r4, #0x1
	bgt	.L177	@cond_branch
	cmp	r4, #0
	beq	.L162	@cond_branch
	b	.L161
.L177:
	cmp	r4, #0x2
	beq	.L172	@cond_branch
	cmp	r4, #0x3
	beq	.L173	@cond_branch
	b	.L161
.L162:
	bl	MatchCall_MoveCursorUp
	cmp	r0, #0x1
	beq	.L165	@cond_branch
	cmp	r0, #0x1
	bgt	.L169	@cond_branch
	cmp	r0, #0
	beq	.L161	@cond_branch
	b	.L179
.L169:
	cmp	r0, #0x2
	beq	.L166	@cond_branch
	b	.L179
.L165:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L178
.L166:
	mov	r0, #0x5
	bl	PlaySE
	b	.L179
.L170:
	bl	sub_81C8630
	cmp	r0, #0
	bne	.L180	@cond_branch
.L172:
	add	r0, r5, #0
	bl	sub_81D0288
.L179:
	mov	r0, #0x0
	b	.L178
.L173:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L161	@cond_branch
.L180:
	mov	r0, #0x2
	b	.L178
.L161:
	mov	r0, #0x4
.L178:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe27:
	.size	 sub_81CFFFC,.Lfe27-sub_81CFFFC
	.align	2, 0
	.type	 sub_81D0074,function
	.thumb_func
sub_81D0074:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0xa
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L191	@cond_branch
	cmp	r4, #0x1
	bgt	.L198	@cond_branch
	cmp	r4, #0
	beq	.L183	@cond_branch
	b	.L182
.L198:
	cmp	r4, #0x2
	beq	.L193	@cond_branch
	cmp	r4, #0x3
	beq	.L194	@cond_branch
	b	.L182
.L183:
	bl	MatchCall_MoveCursorDown
	cmp	r0, #0x1
	beq	.L186	@cond_branch
	cmp	r0, #0x1
	bgt	.L190	@cond_branch
	cmp	r0, #0
	beq	.L182	@cond_branch
	b	.L200
.L190:
	cmp	r0, #0x2
	beq	.L187	@cond_branch
	b	.L200
.L186:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L199
.L187:
	mov	r0, #0x5
	bl	PlaySE
	b	.L200
.L191:
	bl	sub_81C8630
	cmp	r0, #0
	bne	.L201	@cond_branch
.L193:
	add	r0, r5, #0
	bl	sub_81D0288
.L200:
	mov	r0, #0x0
	b	.L199
.L194:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L182	@cond_branch
.L201:
	mov	r0, #0x2
	b	.L199
.L182:
	mov	r0, #0x4
.L199:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe28:
	.size	 sub_81D0074,.Lfe28-sub_81D0074
	.align	2, 0
	.type	 sub_81D00EC,function
	.thumb_func
sub_81D00EC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0xa
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L212	@cond_branch
	cmp	r4, #0x1
	bgt	.L219	@cond_branch
	cmp	r4, #0
	beq	.L204	@cond_branch
	b	.L203
.L219:
	cmp	r4, #0x2
	beq	.L214	@cond_branch
	cmp	r4, #0x3
	beq	.L215	@cond_branch
	b	.L203
.L204:
	bl	MatchCall_PageUp
	cmp	r0, #0x1
	beq	.L207	@cond_branch
	cmp	r0, #0x1
	bgt	.L211	@cond_branch
	cmp	r0, #0
	beq	.L203	@cond_branch
	b	.L221
.L211:
	cmp	r0, #0x2
	beq	.L208	@cond_branch
	b	.L221
.L207:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L220
.L208:
	mov	r0, #0x5
	bl	PlaySE
	b	.L221
.L212:
	bl	sub_81C8630
	cmp	r0, #0
	bne	.L222	@cond_branch
.L214:
	add	r0, r5, #0
	bl	sub_81D0288
.L221:
	mov	r0, #0x0
	b	.L220
.L215:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L203	@cond_branch
.L222:
	mov	r0, #0x2
	b	.L220
.L203:
	mov	r0, #0x4
.L220:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe29:
	.size	 sub_81D00EC,.Lfe29-sub_81D00EC
	.align	2, 0
	.type	 sub_81D0164,function
	.thumb_func
sub_81D0164:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0xa
	bl	GetSubstructPtr
	add	r5, r0, #0
	cmp	r4, #0x1
	beq	.L233	@cond_branch
	cmp	r4, #0x1
	bgt	.L240	@cond_branch
	cmp	r4, #0
	beq	.L225	@cond_branch
	b	.L224
.L240:
	cmp	r4, #0x2
	beq	.L235	@cond_branch
	cmp	r4, #0x3
	beq	.L236	@cond_branch
	b	.L224
.L225:
	bl	MatchCall_PageDown
	cmp	r0, #0x1
	beq	.L228	@cond_branch
	cmp	r0, #0x1
	bgt	.L232	@cond_branch
	cmp	r0, #0
	beq	.L224	@cond_branch
	b	.L242
.L232:
	cmp	r0, #0x2
	beq	.L229	@cond_branch
	b	.L242
.L228:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x7
	b	.L241
.L229:
	mov	r0, #0x5
	bl	PlaySE
	b	.L242
.L233:
	bl	sub_81C8630
	cmp	r0, #0
	bne	.L243	@cond_branch
.L235:
	add	r0, r5, #0
	bl	sub_81D0288
.L242:
	mov	r0, #0x0
	b	.L241
.L236:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L224	@cond_branch
.L243:
	mov	r0, #0x2
	b	.L241
.L224:
	mov	r0, #0x4
.L241:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe30:
	.size	 sub_81D0164,.Lfe30-sub_81D0164
	.align	2, 0
	.type	 sub_81D01DC,function
	.thumb_func
sub_81D01DC:
	push	{lr}
	cmp	r0, #0
	beq	.L246	@cond_branch
	cmp	r0, #0x1
	beq	.L247	@cond_branch
	b	.L245
.L246:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	PokenavFadeScreen
	bl	sub_81C78A0
	mov	r0, #0x0
	b	.L252
.L247:
	bl	IsPaletteFadeActive
	cmp	r0, #0
	bne	.L253	@cond_branch
	bl	MainMenuLoopedTaskIsBusy
	cmp	r0, #0
	beq	.L249	@cond_branch
.L253:
	mov	r0, #0x2
	b	.L252
.L249:
	bl	sub_81C7FDC
.L245:
	mov	r0, #0x4
.L252:
	pop	{r1}
	bx	r1
.Lfe31:
	.size	 sub_81D01DC,.Lfe31-sub_81D01DC
	.align	2, 0
	.type	 sub_81D021C,function
	.thumb_func
sub_81D021C:
	push	{lr}
	cmp	r0, #0
	beq	.L256	@cond_branch
	cmp	r0, #0x1
	beq	.L257	@cond_branch
	b	.L255
.L256:
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x0
	bl	PokenavFadeScreen
	mov	r0, #0x0
	b	.L261
.L257:
	bl	IsPaletteFadeActive
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x2
	b	.L261
.L255:
	mov	r0, #0x4
.L261:
	pop	{r1}
	bx	r1
.Lfe32:
	.size	 sub_81D021C,.Lfe32-sub_81D021C
	.align	2, 0
	.type	 sub_81D024C,function
	.thumb_func
sub_81D024C:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L263
	bl	AddWindow
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	PutWindowTilemap
	bl	sub_81CFB38
	add	r2, r0, #0
	ldrh	r0, [r4, #0x8]
	mov	r1, #0x0
	bl	sub_81D02B0
	ldrb	r0, [r4, #0x8]
	mov	r1, #0x1
	bl	CopyWindowToVram
	add	r0, r4, #0
	bl	sub_81D0288
	pop	{r4}
	pop	{r0}
	bx	r0
.L264:
	.align	2, 0
.L263:
	.word	gUnknown_086237D4
.Lfe33:
	.size	 sub_81D024C,.Lfe33-sub_81D024C
	.align	2, 0
	.type	 sub_81D0288,function
	.thumb_func
sub_81D0288:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	GetSelectedMatchCall
	add	r4, r0, #0
	bl	sub_81CFB38
	add	r2, r0, #0
	ldrh	r0, [r5, #0x8]
	add	r4, r4, #0x1
	add	r1, r4, #0
	bl	sub_81D02B0
	ldrb	r0, [r5, #0x8]
	mov	r1, #0x2
	bl	CopyWindowToVram
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 sub_81D0288,.Lfe34-sub_81D0288
	.align	2, 0
	.type	 sub_81D02B0,function
	.thumb_func
sub_81D02B0:
	push	{r4, r5, lr}
	add	sp, sp, #-0x1c
	add	r4, r0, #0
	add	r5, r2, #0
	add	r0, sp, #0xc
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r1, #0xba
	strb	r1, [r0]
	add	r0, r0, #0x1
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	mov	r0, #0x1
	add	r1, sp, #0xc
	mov	r2, #0x38
	bl	GetStringCenterAlignXOffset
	add	r3, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, sp, #0xc
	bl	AddTextPrinterParameterized
	add	sp, sp, #0x1c
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 sub_81D02B0,.Lfe35-sub_81D02B0
	.align	2, 0
	.type	 sub_81D0304,function
	.thumb_func
sub_81D0304:
	push	{r4, lr}
	add	sp, sp, #-0x18
	bl	sub_81CFB28
	str	r0, [sp]
	bl	sub_81CFB38
	mov	r1, sp
	mov	r4, #0x0
	strh	r0, [r1, #0x4]
	mov	r0, #0x4
	strb	r0, [r1, #0x8]
	bl	sub_81CFB64
	mov	r1, sp
	strh	r0, [r1, #0x6]
	mov	r0, #0xd
	strb	r0, [r1, #0x9]
	mov	r0, #0x11
	strb	r0, [r1, #0xa]
	mov	r0, sp
	mov	r2, #0x1
	strb	r2, [r0, #0xb]
	mov	r0, #0x8
	strb	r0, [r1, #0xc]
	mov	r0, #0x2
	strb	r0, [r1, #0xd]
	mov	r0, sp
	strb	r2, [r0, #0xe]
	ldr	r0, .L268
	str	r0, [sp, #0x10]
	str	r4, [sp, #0x14]
	ldr	r0, .L268+0x4
	mov	r2, #0x0
	bl	sub_81C81D4
	add	sp, sp, #0x18
	pop	{r4}
	pop	{r0}
	bx	r0
.L269:
	.align	2, 0
.L268:
	.word	BufferRibbonMonInfoText
	.word	gUnknown_086237B0+0x4
.Lfe36:
	.size	 sub_81D0304,.Lfe36-sub_81D0304
	.align	2, 0
	.type	 BufferRibbonMonInfoText,function
	.thumb_func
BufferRibbonMonInfoText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r1, #0
	add	r7, r0, #0
	ldrb	r0, [r7]
	cmp	r0, #0xe
	bne	.L271	@cond_branch
	ldrb	r1, [r7, #0x1]
	mov	r0, #0x64
	mov	r4, r1
	mul	r4, r4, r0
	ldr	r0, .L278
	add	r4, r4, r0
	add	r0, r4, #0
	bl	GetMonGender
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	bl	GetLevelFromMonExp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L278+0x4
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetMonData
	b	.L272
.L279:
	.align	2, 0
.L278:
	.word	gPlayerParty
	.word	gStringVar3
.L271:
	ldrb	r0, [r7]
	ldrb	r1, [r7, #0x1]
	bl	GetBoxedMonPtr
	add	r4, r0, #0
	bl	GetBoxMonGender
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	bl	GetLevelFromBoxMonExp
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r2, .L280
	add	r0, r4, #0
	mov	r1, #0x2
	bl	GetBoxMonData
.L272:
	ldr	r4, .L280
	add	r0, r4, #0
	bl	StringGetEnd10
	add	r0, r6, #0
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x3c
	bl	sub_81DB494
	add	r6, r0, #0
	cmp	r5, #0
	beq	.L275	@cond_branch
	cmp	r5, #0xfe
	beq	.L276	@cond_branch
	ldr	r1, .L280+0x4
	b	.L273
.L281:
	.align	2, 0
.L280:
	.word	gStringVar3
	.word	sText_NoGenderSymbol
.L275:
	ldr	r1, .L282
	b	.L273
.L283:
	.align	2, 0
.L282:
	.word	sText_MaleSymbol
.L276:
	ldr	r1, .L284
.L273:
	ldr	r4, .L284+0x4
	add	r0, r4, #0
	bl	StringCopy
	mov	r1, #0xba
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0xf9
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x5
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, r8
	mov	r2, #0x0
	mov	r3, #0x3
	bl	ConvertIntToDecimalStringN
	add	r0, r6, #0
	mov	r1, #0x1
	add	r2, r4, #0
	mov	r3, #0x36
	bl	sub_81DB494
	add	r6, r0, #0
	ldrh	r1, [r7, #0x2]
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ConvertIntToDecimalStringN
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L285:
	.align	2, 0
.L284:
	.word	sText_FemaleSymbol
	.word	gStringVar1
.Lfe37:
	.size	 BufferRibbonMonInfoText,.Lfe37-BufferRibbonMonInfoText
.text
	.align	2, 0

