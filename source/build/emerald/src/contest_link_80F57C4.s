@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_0203A034
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_0203A034,object
	.size	 gUnknown_0203A034,4
gUnknown_0203A034:
	.word	0x0
	.section .rodata
	.align	1, 0
	.type	 sUnknown_0858D6B0,object
sUnknown_0858D6B0:
	.short	0x0
	.short	0x2529
	.short	0x1f
	.short	0x3e0
	.short	0x7c00
	.short	0x3ff
	.short	0x7fe0
	.short	0x7c1f
	.short	0x675a
	.short	0x0
	.short	0x0
	.short	0x779c
	.short	0x7fff
	.short	0x7f33
	.short	0x72ef
	.short	0x7fff
	.size	 sUnknown_0858D6B0,32
	.type	 sUnknown_0858D6D0,object
sUnknown_0858D6D0:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x50
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x0
	.byte	0x50
	.byte	0x99
	.byte	0x88
	.byte	0x0
	.byte	0x95
	.byte	0x88
	.byte	0x22
	.byte	0x0
	.byte	0x95
	.byte	0x28
	.byte	0x11
	.byte	0x0
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x99
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x88
	.byte	0x99
	.byte	0x5
	.byte	0x0
	.byte	0x22
	.byte	0x88
	.byte	0x59
	.byte	0x0
	.byte	0x11
	.byte	0x82
	.byte	0x59
	.byte	0x0
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x0
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x0
	.byte	0x95
	.byte	0x28
	.byte	0x11
	.byte	0x0
	.byte	0x95
	.byte	0x88
	.byte	0x22
	.byte	0x0
	.byte	0x50
	.byte	0x99
	.byte	0x88
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x99
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x82
	.byte	0x59
	.byte	0x0
	.byte	0x22
	.byte	0x88
	.byte	0x59
	.byte	0x0
	.byte	0x88
	.byte	0x99
	.byte	0x5
	.byte	0x0
	.byte	0x99
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x50
	.byte	0x89
	.byte	0x12
	.byte	0x11
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x11
	.byte	0x21
	.byte	0x98
	.byte	0x5
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x11
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x22
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x88
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x99
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x55
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sUnknown_0858D6D0,256
	.align	1, 0
	.type	 sMiscBlank_Pal,object
sMiscBlank_Pal:
	.short	0x0
	.short	0x7fff
	.short	0x62f7
	.short	0x4610
	.short	0x3d8c
	.short	0x3528
	.short	0x2cc5
	.short	0x53f2
	.short	0x3bd1
	.short	0x1f28
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x675a
	.short	0x2529
	.size	 sMiscBlank_Pal,32
	.align	2, 0
	.type	 sOamData_858D7F0,object
	.size	 sOamData_858D7F0,8
sOamData_858D7F0:
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0xc0
	.byte	0x0
	.byte	0x2c
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_858D7F8,object
	.size	 sSpriteTemplate_858D7F8,24
sSpriteTemplate_858D7F8:
	.short	0xbc1
	.short	0xbc1
	.word	sOamData_858D7F0
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0858D810,object
sUnknown_0858D810:
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc1
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc2
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc3
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc4
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc5
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc6
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc7
	.word	gMiscBlank_Gfx
	.short	0x400
	.short	0xbc8
	.size	 sUnknown_0858D810,64
	.align	2, 0
	.type	 sUnknown_0858D850,object
	.size	 sUnknown_0858D850,8
sUnknown_0858D850:
	.word	sMiscBlank_Pal
	.short	0xbc1
	.space	2
	.align	2, 0
	.type	 sOamData_858D858,object
	.size	 sOamData_858D858,8
sOamData_858D858:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_858D860,object
	.size	 sSpriteTemplate_858D860,24
sSpriteTemplate_858D860:
	.short	0xbc9
	.short	0xbc9
	.word	sOamData_858D858
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_80F7768
	.align	2, 0
	.type	 sUnknown_0858D878,object
	.size	 sUnknown_0858D878,8
sUnknown_0858D878:
	.word	gContestConfetti_Gfx
	.short	0x220
	.short	0xbc9
	.align	2, 0
	.type	 sUnknown_0858D880,object
	.size	 sUnknown_0858D880,8
sUnknown_0858D880:
	.word	gContestConfetti_Pal
	.short	0xbc9
	.space	2
	.align	2, 0
	.type	 sUnknown_0858D888,object
	.size	 sUnknown_0858D888,16
sUnknown_0858D888:
	.byte	0xe0
	.byte	0x1
	.byte	0x0
	.space	1
	.byte	0x81
	.byte	0x31
	.byte	0x0
	.space	1
	.byte	0xc2
	.byte	0x31
	.byte	0x0
	.space	1
	.byte	0xa3
	.byte	0x31
	.byte	0x0
	.space	1
	.align	2, 0
	.type	 sUnknown_0858D898,object
sUnknown_0858D898:
	.byte	0x1
	.byte	0x7
	.byte	0x4
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x302
	.byte	0x1
	.byte	0x7
	.byte	0x7
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x31a
	.byte	0x1
	.byte	0x7
	.byte	0xa
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x332
	.byte	0x1
	.byte	0x7
	.byte	0xd
	.byte	0xc
	.byte	0x2
	.byte	0xf
	.short	0x34a
	.byte	0xff
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.short	0x0
	.size	 sUnknown_0858D898,40
	.align	2, 0
	.type	 sUnknown_0858D8C0,object
	.size	 sUnknown_0858D8C0,8
sUnknown_0858D8C0:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x40
	.byte	0x0
	.byte	0x0
	.short	0x0
	.align	2, 0
	.type	 sSpriteTemplate_858D8C8,object
	.size	 sSpriteTemplate_858D8C8,24
sSpriteTemplate_858D8C8:
	.short	0x56ce
	.short	0x0
	.word	sUnknown_0858D8C0
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.align	2, 0
	.type	 sUnknown_0858D8E0,object
	.size	 sUnknown_0858D8E0,8
sUnknown_0858D8E0:
	.word	gMiscBlank_Gfx
	.short	0x200
	.short	0x56ce
	.type	 sContestLinkTextColors,object
	.size	 sContestLinkTextColors,4
sContestLinkTextColors:
	.byte	0x1
	.byte	0xf
	.byte	0xe
	.space	1
.text
	.align	2, 0
	.globl	sub_80F57C4
	.type	 sub_80F57C4,function
	.thumb_func
sub_80F57C4:
	push	{r4, lr}
	mov	r0, #0x0
	mov	r1, #0x40
	bl	SetGpuReg
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L8
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	mov	r4, #0x0
.L6:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L8+0x4
	ldr	r1, [r1]
	lsl	r2, r4, #0x2
	add	r1, r1, #0xc
	add	r1, r1, r2
	ldr	r1, [r1]
	bl	SetBgTilemapBuffer
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L6	@cond_branch
	ldr	r0, .L8+0x8
	bl	InitWindows
	bl	DeactivateAllTextPrinters
	mov	r0, #0x4c
	mov	r1, #0x0
	bl	SetGpuReg
	ldr	r1, .L8+0xc
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L8+0x10
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x42
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x46
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x10
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x12
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x14
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x16
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x18
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1a
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1c
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x1e
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r0, .L8+0x14
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L8+0x18
	strh	r1, [r0]
	ldr	r0, .L8+0x1c
	strh	r1, [r0]
	ldr	r0, .L8+0x20
	strh	r1, [r0]
	ldr	r0, .L8+0x24
	strh	r1, [r0]
	ldr	r0, .L8+0x28
	strh	r1, [r0]
	ldr	r0, .L8+0x2c
	strh	r1, [r0]
	ldr	r0, .L8+0x30
	strh	r1, [r0]
	ldr	r0, .L8+0x34
	strh	r1, [r0]
	ldr	r0, .L8+0x38
	strh	r1, [r0]
	ldr	r0, .L8+0x3c
	strh	r1, [r0]
	ldr	r0, .L8+0x40
	strh	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L9:
	.align	2, 0
.L8:
	.word	sUnknown_0858D888
	.word	gUnknown_0203A034
	.word	sUnknown_0858D898
	.word	0x3f3f
	.word	0x3f2e
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe1:
	.size	 sub_80F57C4,.Lfe1-sub_80F57C4
	.align	2, 0
	.globl	sub_80F591C
	.type	 sub_80F591C,function
	.thumb_func
sub_80F591C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r0, .L26
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	bl	LZDecompressVram
	ldr	r1, .L26+0x4
	mov	r0, #0x3
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L26+0x8
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	ldr	r1, .L26+0xc
	mov	r0, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	bl	sub_80F71C8
	ldr	r0, .L26+0x10
	mov	r2, #0x80
	lsl	r2, r2, #0x2
	mov	r1, #0x0
	bl	LoadCompressedPalette
	ldr	r0, .L26+0x14
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r7, #0x0
	mov	r0, #0x1
	mov	r8, r0
.L14:
	lsl	r5, r7, #0x18
	lsr	r5, r5, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_80F7310
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	sub_80F7364
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	mov	r6, #0x0
	lsl	r1, r7, #0x1
	add	r2, r7, #0x1
	str	r2, [sp, #0xc]
	lsl	r4, r4, #0x18
	asr	r4, r4, #0x18
	mov	sl, r4
	add	r1, r1, r7
	add	r0, r1, #0x6
	lsl	r0, r0, #0x18
	mov	r9, r0
	add	r1, r1, #0x5
	lsl	r7, r1, #0x18
.L18:
	ldr	r1, .L26+0x18
	cmp	r6, sl
	bge	.L19	@cond_branch
	add	r1, r1, #0x2
.L19:
	ldr	r4, [sp, #0x8]
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	add	r2, r0, #0
	cmp	r0, #0
	bge	.L21	@cond_branch
	neg	r2, r0
.L21:
	cmp	r6, r2
	bge	.L20	@cond_branch
	ldr	r5, .L26+0x1c
	cmp	r0, #0
	bge	.L23	@cond_branch
	add	r5, r5, #0x2
	b	.L23
.L27:
	.align	2, 0
.L26:
	.word	gUnknown_08C19588
	.word	gUnknown_08C1A12C
	.word	gUnknown_08C1A000
	.word	gUnknown_08C19EEC
	.word	gUnknown_08C1A2B4
	.word	sUnknown_0858D6B0
	.word	0x60b2
	.word	0x60a4
.L20:
	ldr	r5, .L28
.L23:
	add	r4, r6, #0
	add	r4, r4, #0x13
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, r8
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	add	r2, r4, #0
	lsr	r3, r7, #0x18
	bl	FillBgTilemapBufferRect_Palette0
	mov	r2, r8
	str	r2, [sp]
	str	r2, [sp, #0x4]
	mov	r0, #0x1
	add	r1, r5, #0
	add	r2, r4, #0
	mov	r4, r9
	lsr	r3, r4, #0x18
	bl	FillBgTilemapBufferRect_Palette0
	add	r6, r6, #0x1
	cmp	r6, #0x9
	ble	.L18	@cond_branch
	ldr	r7, [sp, #0xc]
	cmp	r7, #0x3
	ble	.L14	@cond_branch
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x3
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L29:
	.align	2, 0
.L28:
	.word	0x60a2
.Lfe2:
	.size	 sub_80F591C,.Lfe2-sub_80F591C
	.align	2, 0
	.type	 sub_80F5A74,function
	.thumb_func
sub_80F5A74:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r1, r5, #0x6
	ldr	r0, .L32
	add	r7, r1, r0
	ldr	r6, .L32+0x4
	ldr	r0, .L32+0x8
	ldrb	r0, [r0]
	cmp	r5, r0
	bne	.L31	@cond_branch
	ldr	r1, .L32+0xc
	add	r0, r6, #0
	bl	StringCopy
	add	r6, r0, #0
.L31:
	add	r1, r7, #0x2
	add	r0, r6, #0
	bl	StringCopy
	ldr	r4, .L32+0x4
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x0
	bl	sub_80F7ED0
	ldr	r1, .L32+0x10
	add	r0, r6, #0
	bl	StringCopy
	add	r1, r7, #0
	add	r1, r1, #0xd
	add	r0, r6, #0
	bl	StringAppend
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x32
	bl	sub_80F7ED0
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L33:
	.align	2, 0
.L32:
	.word	gContestMons
	.word	gDisplayedStringBattle
	.word	gContestPlayerMonIndex
	.word	gText_ColorDarkGrey
	.word	gText_Slash
.Lfe3:
	.size	 sub_80F5A74,.Lfe3-sub_80F5A74
	.align	2, 0
	.globl	sub_80F5AE0
	.type	 sub_80F5AE0,function
	.thumb_func
sub_80F5AE0:
	push	{r4, lr}
	mov	r4, #0x0
.L38:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	sub_80F5A74
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L38	@cond_branch
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe4:
	.size	 sub_80F5AE0,.Lfe4-sub_80F5AE0
	.align	2, 0
	.globl	sub_80F5B00
	.type	 sub_80F5B00,function
	.thumb_func
sub_80F5B00:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r5, .L43
	ldrb	r0, [r5, #0x8]
	mov	r6, #0x80
	orr	r0, r0, r6
	strb	r0, [r5, #0x8]
	mov	r0, #0x0
	bl	SetVBlankCallback
	bl	sub_80F7DF4
	bl	sub_80F57C4
	bl	ScanlineEffect_Clear
	bl	ResetPaletteFade
	bl	ResetSpriteData
	bl	ResetTasks
	bl	FreeAllSpritePalettes
	bl	sub_80F591C
	bl	sub_80F6A9C
	mov	r0, #0x0
	mov	r1, #0x1
	bl	LoadAllContestMonIcons
	bl	sub_80F5AE0
	ldr	r4, .L43+0x4
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	mov	r2, #0x18
	bl	memset
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	mov	r1, #0x0
	mov	r2, #0x50
	bl	memset
	bl	sub_80F6DC0
	bl	sub_80F6AE8
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldrb	r1, [r5, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r5, #0x8]
	ldr	r0, .L43+0x8
	mov	r1, #0x5
	bl	CreateTask
	ldr	r1, [r4]
	ldr	r1, [r1]
	strb	r0, [r1, #0x2]
	ldr	r0, .L43+0xc
	bl	SetMainCallback2
	ldr	r1, .L43+0x10
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r1, .L43+0x14
	ldr	r2, .L43+0x18
	add	r0, r2, #0
	strh	r0, [r1]
	ldr	r0, .L43+0x1c
	mov	r1, #0x14
	bl	CreateTask
	bl	sub_80F7880
	ldr	r0, .L43+0x20
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L41	@cond_branch
	ldrb	r0, [r5, #0x8]
	orr	r0, r0, r6
	strb	r0, [r5, #0x8]
	b	.L42
.L44:
	.align	2, 0
.L43:
	.word	gPaletteFade
	.word	gUnknown_0203A034
	.word	sub_80F5CE4
	.word	sub_80F5C00
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
	.word	0x80a0
	.word	sub_80F68B4
	.word	gLinkContestFlags
.L41:
	mov	r0, #0xdf
	lsl	r0, r0, #0x1
	bl	PlayBGM
.L42:
	ldr	r0, .L45
	bl	SetVBlankCallback
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L46:
	.align	2, 0
.L45:
	.word	sub_80F5C24
.Lfe5:
	.size	 sub_80F5B00,.Lfe5-sub_80F5B00
	.align	2, 0
	.type	 sub_80F5C00,function
	.thumb_func
sub_80F5C00:
	push	{lr}
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	RunTasks
	bl	UpdatePaletteFade
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_80F5C00,.Lfe6-sub_80F5C00
	.align	2, 0
	.type	 sub_80F5C24,function
	.thumb_func
sub_80F5C24:
	push	{lr}
	ldr	r0, .L49
	ldrh	r1, [r0]
	mov	r0, #0x10
	bl	SetGpuReg
	ldr	r0, .L49+0x4
	ldrh	r1, [r0]
	mov	r0, #0x12
	bl	SetGpuReg
	ldr	r0, .L49+0x8
	ldrh	r1, [r0]
	mov	r0, #0x14
	bl	SetGpuReg
	ldr	r0, .L49+0xc
	ldrh	r1, [r0]
	mov	r0, #0x16
	bl	SetGpuReg
	ldr	r0, .L49+0x10
	ldrh	r1, [r0]
	mov	r0, #0x18
	bl	SetGpuReg
	ldr	r0, .L49+0x14
	ldrh	r1, [r0]
	mov	r0, #0x1a
	bl	SetGpuReg
	ldr	r0, .L49+0x18
	ldrh	r1, [r0]
	mov	r0, #0x1c
	bl	SetGpuReg
	ldr	r0, .L49+0x1c
	ldrh	r1, [r0]
	mov	r0, #0x1e
	bl	SetGpuReg
	ldr	r0, .L49+0x20
	ldrh	r1, [r0]
	mov	r0, #0x40
	bl	SetGpuReg
	ldr	r0, .L49+0x24
	ldrh	r1, [r0]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r0, .L49+0x28
	ldrh	r1, [r0]
	mov	r0, #0x42
	bl	SetGpuReg
	ldr	r0, .L49+0x2c
	ldrh	r1, [r0]
	mov	r0, #0x46
	bl	SetGpuReg
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	TransferPlttBuffer
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.L50:
	.align	2, 0
.L49:
	.word	gBattle_BG0_X
	.word	gBattle_BG0_Y
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gBattle_BG2_X
	.word	gBattle_BG2_Y
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	gBattle_WIN1H
	.word	gBattle_WIN1V
.Lfe7:
	.size	 sub_80F5C24,.Lfe7-sub_80F5C24
	.align	2, 0
	.type	 sub_80F5CE4,function
	.thumb_func
sub_80F5CE4:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r3, .L72
	ldrb	r1, [r3]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB683
	b	.L52	@long jump
.LCB683:
	ldr	r2, .L72+0x4
	lsl	r1, r6, #0x2
	add	r0, r1, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	add	r7, r1, #0
	cmp	r0, #0x1
	beq	.L57	@cond_branch
	cmp	r0, #0x1
	bgt	.L65	@cond_branch
	cmp	r0, #0
	beq	.L54	@cond_branch
	b	.L52
.L73:
	.align	2, 0
.L72:
	.word	gLinkContestFlags
	.word	gTasks
.L65:
	cmp	r0, #0x2
	beq	.L59	@cond_branch
	cmp	r0, #0x3
	beq	.L61	@cond_branch
	b	.L52
.L54:
	bl	SaveLinkContestResults
	ldr	r1, .L74
	ldr	r0, .L74+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L55	@cond_branch
	mov	r0, #0x23
	bl	IncrementGameStat
	ldr	r1, .L74+0x8
	mov	r0, #0x8
	strh	r0, [r1]
	bl	InterviewBefore
	ldr	r0, .L74+0xc
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L55	@cond_branch
	bl	InterviewAfter
.L55:
	mov	r0, #0x2
	bl	TryGainNewFanFromCounter
	ldr	r0, .L74+0x10
	ldrb	r0, [r0]
	bl	sub_80DEDA8
	mov	r0, #0xfe
	bl	sub_80DEDA8
	ldr	r1, .L74+0x14
	mov	r0, #0x1
	strb	r0, [r1]
	mov	r0, #0xfe
	mov	r1, #0x0
	bl	sub_80DEFA8
	ldr	r1, .L74+0x18
	strb	r0, [r1]
	ldr	r5, .L74+0x1c
	add	r0, r5, #0
	bl	VarGet
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	add	r0, r5, #0
	mov	r1, #0x0
	bl	VarSet
	bl	SetContinueGameWarpStatusToDynamicWarp
	mov	r0, #0x1
	bl	TrySavingData
	bl	ClearContinueGameWarpStatus2
	add	r0, r5, #0
	add	r1, r4, #0
	bl	VarSet
	ldr	r0, .L74+0x20
	add	r1, r7, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L52
.L75:
	.align	2, 0
.L74:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
	.word	gSpecialVar_ContestRank
	.word	gUnknown_02039F5C
	.word	gUnknown_02039F5D
	.word	0x4086
	.word	gTasks
.L57:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	ldrb	r1, [r3]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L52	@cond_branch
	mov	r0, #0x64
	b	.L70
.L59:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L51	@cond_branch
	bl	sub_800ADF8
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L51
.L61:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L51	@cond_branch
	mov	r0, #0xdf
	lsl	r0, r0, #0x1
	bl	PlayBGM
	ldr	r2, .L76
	ldrb	r1, [r2, #0x8]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2, #0x8]
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
.L70:
	strh	r0, [r4, #0x8]
.L52:
	ldr	r0, .L76
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L51	@cond_branch
	ldr	r1, .L76+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	strh	r2, [r4, #0x8]
	ldr	r0, .L76+0x8
	ldrb	r1, [r0]
	mov	r5, #0x1
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L67	@cond_branch
	ldr	r0, .L76+0xc
	bl	sub_80F707C
	ldr	r0, .L76+0x10
	b	.L71
.L77:
	.align	2, 0
.L76:
	.word	gPaletteFade
	.word	gTasks
	.word	gLinkContestFlags
	.word	gText_CommunicationStandby
	.word	sub_80F5ED8
.L67:
	mov	r0, #0x24
	bl	IncrementGameStat
	ldr	r1, .L78
	ldr	r0, .L78+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L69	@cond_branch
	mov	r0, #0x25
	bl	IncrementGameStat
.L69:
	ldr	r0, .L78+0x8
	ldrb	r0, [r0]
	bl	sub_80DEDA8
	mov	r0, #0xfe
	bl	sub_80DEDA8
	ldr	r0, .L78+0xc
	strb	r5, [r0]
	mov	r0, #0xfe
	mov	r1, #0x0
	bl	sub_80DEFA8
	ldr	r1, .L78+0x10
	strb	r0, [r1]
	mov	r0, #0x2
	bl	TryGainNewFanFromCounter
	ldr	r0, .L78+0x14
.L71:
	str	r0, [r4]
.L51:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L79:
	.align	2, 0
.L78:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestRank
	.word	gUnknown_02039F5C
	.word	gUnknown_02039F5D
	.word	sub_80F5F74
.Lfe8:
	.size	 sub_80F5CE4,.Lfe8-sub_80F5CE4
	.align	2, 0
	.type	 sub_80F5ED8,function
	.thumb_func
sub_80F5ED8:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L82
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L81	@cond_branch
	ldr	r0, .L82+0x4
	mov	r1, #0x0
	bl	CreateTask
	ldr	r1, .L82+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L82+0xc
	str	r1, [r0]
.L81:
	pop	{r4}
	pop	{r0}
	bx	r0
.L83:
	.align	2, 0
.L82:
	.word	gReceivedRemoteLinkPlayers
	.word	sub_80F5F14
	.word	gTasks
	.word	TaskDummy
.Lfe9:
	.size	 sub_80F5ED8,.Lfe9-sub_80F5ED8
	.align	2, 0
	.type	 sub_80F5F14,function
	.thumb_func
sub_80F5F14:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L85
	ldr	r2, .L85+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L86:
	.align	2, 0
.L85:
	.word	sub_80FC998
	.word	sub_80F5F30
.Lfe10:
	.size	 sub_80F5F14,.Lfe10-sub_80F5F14
	.align	2, 0
	.type	 sub_80F5F30,function
	.thumb_func
sub_80F5F30:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L88	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r2, .L89
	ldr	r0, .L89+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x2]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L89+0x8
	str	r1, [r0]
	bl	sub_80F7144
.L88:
	pop	{r4}
	pop	{r0}
	bx	r0
.L90:
	.align	2, 0
.L89:
	.word	gTasks
	.word	gUnknown_0203A034
	.word	sub_80F5F74
.Lfe11:
	.size	 sub_80F5F30,.Lfe11-sub_80F5F30
	.align	2, 0
	.type	 sub_80F5F74,function
	.thumb_func
sub_80F5F74:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L106
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r1, [r4, #0x8]
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L92	@cond_branch
	ldr	r0, .L106+0x4
	mov	r1, #0x14
	bl	CreateTask
	ldr	r0, .L106+0x8
	ldr	r1, .L106+0xc
	ldr	r1, [r1]
	ldr	r1, [r1]
	ldrb	r1, [r1]
	bl	sub_80F6B78
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x88
	lsl	r3, r3, #0x3
	mov	r1, #0x90
	mov	r2, #0x78
	b	.L104
.L107:
	.align	2, 0
.L106:
	.word	gTasks
	.word	sub_80F68F0
	.word	gText_AnnouncingResults
	.word	gUnknown_0203A034
.L92:
	cmp	r0, #0x1
	bne	.L94	@cond_branch
	ldr	r0, .L108
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	bne	.L93	@cond_branch
	b	.L105
.L109:
	.align	2, 0
.L108:
	.word	gUnknown_0203A034
.L94:
	cmp	r0, #0x2
	bne	.L97	@cond_branch
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L93	@cond_branch
	mov	r0, #0x0
.L105:
	strh	r0, [r4, #0xa]
	add	r0, r1, #0x1
	strh	r0, [r4, #0x8]
	b	.L93
.L97:
	cmp	r0, #0x3
	bne	.L100	@cond_branch
	ldr	r0, .L110
	ldr	r1, .L110+0x4
	ldr	r1, [r1]
	ldr	r1, [r1]
	ldrb	r1, [r1]
	bl	sub_80F6B78
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, .L110+0x8
	mov	r3, #0x88
	lsl	r3, r3, #0x3
	mov	r1, #0x90
.L104:
	bl	sub_80F6E9C
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L93
.L111:
	.align	2, 0
.L110:
	.word	gText_PreliminaryResults
	.word	gUnknown_0203A034
	.word	0xffff
.L100:
	cmp	r0, #0x4
	bne	.L93	@cond_branch
	ldr	r0, .L112
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0x2
	bne	.L93	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L112+0x4
	str	r0, [r4]
.L93:
	pop	{r4}
	pop	{r0}
	bx	r0
.L113:
	.align	2, 0
.L112:
	.word	gUnknown_0203A034
	.word	sub_80F6058
.Lfe12:
	.size	 sub_80F5F74,.Lfe12-sub_80F5F74
	.align	2, 0
	.type	 sub_80F6058,function
	.thumb_func
sub_80F6058:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L126
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L120	@cond_branch
	cmp	r0, #0x1
	bgt	.L125	@cond_branch
	cmp	r0, #0
	beq	.L116	@cond_branch
	b	.L115
.L127:
	.align	2, 0
.L126:
	.word	gTasks
.L125:
	cmp	r0, #0x2
	beq	.L122	@cond_branch
	b	.L115
.L116:
	ldr	r5, .L128
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L115	@cond_branch
	ldrh	r1, [r4, #0xc]
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x0
	bl	sub_80F7A80
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L118	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L115
.L129:
	.align	2, 0
.L128:
	.word	gUnknown_0203A034
.L118:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L115
.L120:
	ldr	r0, .L130
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L115	@cond_branch
	strh	r0, [r4, #0x8]
	b	.L115
.L131:
	.align	2, 0
.L130:
	.word	gUnknown_0203A034
.L122:
	mov	r0, #0x88
	lsl	r0, r0, #0x3
	bl	sub_80F6EF4
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	strh	r0, [r4, #0xc]
	ldr	r0, .L132
	str	r0, [r4]
.L115:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L133:
	.align	2, 0
.L132:
	.word	sub_80F60F0
.Lfe13:
	.size	 sub_80F6058,.Lfe13-sub_80F6058
	.align	2, 0
	.type	 sub_80F60F0,function
	.thumb_func
sub_80F60F0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r4, r2, #0
	ldr	r0, .L139
	ldr	r5, [r0]
	ldr	r0, [r5]
	ldrb	r3, [r0, #0x4]
	cmp	r3, #0
	bne	.L135	@cond_branch
	ldr	r1, .L139+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x15
	bne	.L137	@cond_branch
	strh	r3, [r1, #0xa]
	ldr	r0, .L139+0x8
	ldr	r1, [r5]
	ldrb	r1, [r1]
	bl	sub_80F6B78
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, .L139+0xc
	mov	r3, #0x88
	lsl	r3, r3, #0x3
	mov	r1, #0x90
	bl	sub_80F6E9C
	b	.L137
.L140:
	.align	2, 0
.L139:
	.word	gUnknown_0203A034
	.word	gTasks
	.word	gText_Round2Results
	.word	0xffff
.L135:
	cmp	r3, #0x2
	bne	.L137	@cond_branch
	ldr	r0, .L141
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L141+0x4
	str	r0, [r1]
.L137:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L142:
	.align	2, 0
.L141:
	.word	gTasks
	.word	sub_80F616C
.Lfe14:
	.size	 sub_80F60F0,.Lfe14-sub_80F60F0
	.align	2, 0
	.type	 sub_80F616C,function
	.thumb_func
sub_80F616C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L155
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L149	@cond_branch
	cmp	r0, #0x1
	bgt	.L154	@cond_branch
	cmp	r0, #0
	beq	.L145	@cond_branch
	b	.L144
.L156:
	.align	2, 0
.L155:
	.word	gTasks
.L154:
	cmp	r0, #0x2
	beq	.L151	@cond_branch
	b	.L144
.L145:
	ldr	r5, .L157
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0xa]
	cmp	r0, #0
	bne	.L144	@cond_branch
	ldrh	r1, [r4, #0xc]
	add	r0, r1, #0x1
	strh	r0, [r4, #0xc]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x1
	bl	sub_80F7A80
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L147	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4, #0x8]
	b	.L144
.L158:
	.align	2, 0
.L157:
	.word	gUnknown_0203A034
.L147:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L144
.L149:
	ldr	r0, .L159
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x14]
	cmp	r0, #0
	bne	.L144	@cond_branch
	strh	r0, [r4, #0x8]
	b	.L144
.L160:
	.align	2, 0
.L159:
	.word	gUnknown_0203A034
.L151:
	mov	r0, #0x88
	lsl	r0, r0, #0x3
	bl	sub_80F6EF4
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldr	r0, .L161
	str	r0, [r4]
.L144:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L162:
	.align	2, 0
.L161:
	.word	sub_80F6204
.Lfe15:
	.size	 sub_80F616C,.Lfe15-sub_80F616C
	.align	2, 0
	.type	 sub_80F6204,function
	.thumb_func
sub_80F6204:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x64
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L197
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r2, r1, #0
	cmp	r0, #0x5
	bls	.LCB1555
	b	.L164	@long jump
.LCB1555:
	lsl	r0, r0, #0x2
	ldr	r1, .L197+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L198:
	.align	2, 0
.L197:
	.word	gTasks
	.word	.L193
	.align	2, 0
	.align	2, 0
.L193:
	.word	.L165
	.word	.L167
	.word	.L169
	.word	.L175
	.word	.L184
	.word	.L192
.L165:
	ldr	r0, .L199
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x4]
	cmp	r0, #0
	beq	.LCB1582
	b	.L164	@long jump
.LCB1582:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L164
.L200:
	.align	2, 0
.L199:
	.word	gUnknown_0203A034
.L167:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r2
	ldrh	r0, [r1, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	beq	.LCB1612
	b	.L164	@long jump
.LCB1612:
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
	b	.L195
.L169:
	mov	r4, #0x0
	lsl	r6, r5, #0x2
	ldr	r7, .L201
.L173:
	ldr	r0, .L201+0x4
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r7
	ldr	r0, .L201+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	strh	r0, [r1, #0x8]
	strh	r4, [r1, #0xa]
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L173	@cond_branch
	b	.L196
.L202:
	.align	2, 0
.L201:
	.word	gTasks
	.word	sub_80F73DC
	.word	gContestFinalStandings
.L175:
	ldr	r0, .L203
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x5]
	cmp	r0, #0x4
	beq	.LCB1668
	b	.L164	@long jump
.LCB1668:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r2
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1f
	beq	.LCB1682
	b	.L164	@long jump
.LCB1682:
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldr	r0, .L203+0x4
	mov	r1, #0xa
	bl	CreateTask
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	mov	r4, #0x0
	ldr	r1, .L203+0x8
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L179	@cond_branch
.L180:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L179	@cond_branch
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L180	@cond_branch
.L179:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0xe
	bl	sub_80F77E0
	b	.L164
.L204:
	.align	2, 0
.L203:
	.word	gUnknown_0203A034
	.word	sub_80F74BC
	.word	gContestFinalStandings
.L184:
	lsl	r1, r5, #0x2
	add	r0, r1, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r2
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r2, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r6, r1, #0
	cmp	r0, #0x15
	bne	.L164	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0xa]
	mov	r4, #0x0
	ldr	r1, .L205
	ldrb	r0, [r1]
	ldr	r7, .L205+0x4
	ldr	r2, .L205+0x8
	mov	r8, r2
	cmp	r0, #0
	beq	.L187	@cond_branch
.L188:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L187	@cond_branch
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L188	@cond_branch
.L187:
	lsl	r4, r4, #0x6
	mov	r0, r8
	add	r1, r4, r0
	add	r0, r7, #0
	bl	StringCopy
	add	r0, r7, #0
	bl	sub_81DB5AC
	ldr	r0, .L205+0xc
	mov	r1, r8
	sub	r1, r1, #0xb
	add	r4, r4, r1
	add	r1, r4, #0
	bl	StringCopy
	ldr	r1, .L205+0x10
	mov	r0, sp
	bl	StringExpandPlaceholders
	ldr	r0, .L205+0x14
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0]
	mov	r0, sp
	bl	sub_80F6B78
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r2, .L205+0x18
	mov	r3, #0x88
	lsl	r3, r3, #0x3
	mov	r1, #0x90
	bl	sub_80F6E9C
.L196:
	ldr	r0, .L205+0x1c
	add	r1, r6, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
.L195:
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L164
.L206:
	.align	2, 0
.L205:
	.word	gContestFinalStandings
	.word	gStringVar1
	.word	gContestMons+0xd
	.word	gStringVar2
	.word	gText_Var1sVar2Won
	.word	gUnknown_0203A034
	.word	0xffff
	.word	gTasks
.L192:
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x8]
	ldr	r1, .L207
	str	r1, [r0]
.L164:
	add	sp, sp, #0x64
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L208:
	.align	2, 0
.L207:
	.word	sub_80F6404
.Lfe16:
	.size	 sub_80F6204,.Lfe16-sub_80F6204
	.align	2, 0
	.type	 sub_80F6404,function
	.thumb_func
sub_80F6404:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L237
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r2, #0x8
	ldrsh	r0, [r0, r2]
	add	r4, r1, #0
	cmp	r0, #0x5
	bls	.LCB1885
	b	.L210	@long jump
.LCB1885:
	lsl	r0, r0, #0x2
	ldr	r1, .L237+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L238:
	.align	2, 0
.L237:
	.word	gTasks
	.word	.L234
	.align	2, 0
	.align	2, 0
.L234:
	.word	.L211
	.word	.L220
	.word	.L224
	.word	.L226
	.word	.L228
	.word	.L232
.L211:
	ldr	r1, .L239
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r1, .L239+0x4
	ldr	r3, .L239+0x8
	add	r0, r3, #0
	strh	r0, [r1]
	mov	r2, #0x0
	ldr	r1, .L239+0xc
	ldrb	r0, [r1]
	lsl	r4, r7, #0x2
	mov	sl, r4
	ldr	r3, .L239+0x10
	ldr	r4, .L239+0x14
	mov	r9, r4
	ldr	r4, .L239+0x18
	mov	ip, r4
	ldr	r4, .L239+0x1c
	mov	r8, r4
	cmp	r0, #0
	beq	.L213	@cond_branch
.L214:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bgt	.L213	@cond_branch
	add	r0, r2, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L214	@cond_branch
.L213:
	lsl	r1, r2, #0x6
	add	r0, r1, r3
	ldrh	r6, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x38
	add	r0, r1, r0
	ldr	r4, [r0]
	add	r0, r3, #0
	add	r0, r0, #0x3c
	add	r1, r1, r0
	ldr	r5, [r1]
	mov	r0, r9
	ldrb	r0, [r0]
	cmp	r2, r0
	bne	.L218	@cond_branch
	lsl	r0, r6, #0x3
	add	r0, r0, ip
	mov	r2, r8
	ldr	r1, [r2]
	ldr	r1, [r1, #0x8]
	add	r2, r6, #0
	add	r3, r4, #0
	bl	HandleLoadSpecialPokePic_2
	b	.L219
.L240:
	.align	2, 0
.L239:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x5050
	.word	gContestFinalStandings
	.word	gContestMons
	.word	gContestPlayerMonIndex
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
.L218:
	lsl	r0, r6, #0x3
	add	r0, r0, ip
	mov	r3, r8
	ldr	r1, [r3]
	ldr	r1, [r1, #0x8]
	add	r2, r6, #0
	add	r3, r4, #0
	bl	HandleLoadSpecialPokePic_DontHandleDeoxys
.L219:
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	GetMonSpritePalStructFromOtIdPersonality
	add	r4, r0, #0
	bl	LoadCompressedSpritePalette
	add	r0, r6, #0
	mov	r1, #0x1
	bl	SetMultiuseSpriteTemplateToPokemon
	ldr	r0, .L241
	ldrh	r1, [r4, #0x4]
	strh	r1, [r0, #0x2]
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	mov	r2, #0x50
	mov	r3, #0xa
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L241+0x4
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r3, r2, r5
	strh	r6, [r3, #0x30]
	ldrb	r4, [r3, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r4
	strb	r1, [r3, #0x5]
	add	r5, r5, #0x1c
	add	r2, r2, r5
	ldr	r1, .L241+0x8
	str	r1, [r2]
	ldr	r1, .L241+0xc
	ldr	r1, [r1]
	ldr	r1, [r1]
	strb	r0, [r1, #0x8]
	ldr	r0, .L241+0x10
	bl	LoadCompressedSpriteSheet
	ldr	r0, .L241+0x14
	bl	LoadCompressedSpritePalette
	ldr	r0, .L241+0x18
	mov	r1, #0xa
	bl	CreateTask
	ldr	r0, .L241+0x1c
	mov	r4, sl
	add	r1, r4, r7
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	b	.L210
.L242:
	.align	2, 0
.L241:
	.word	gMultiuseSpriteTemplate
	.word	gSprites
	.word	sub_80F75A8
	.word	gUnknown_0203A034
	.word	sUnknown_0858D878
	.word	sUnknown_0858D880
	.word	sub_80F7670
	.word	gTasks
.L220:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r4, r0, r4
	ldrh	r0, [r4, #0xe]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	beq	.LCB2097
	b	.L210	@long jump
.LCB2097:
	mov	r0, #0x0
	strh	r0, [r4, #0xe]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x2
	strh	r0, [r4, #0xc]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x20
	ble	.L222	@cond_branch
	mov	r0, #0x20
	strh	r0, [r4, #0xc]
.L222:
	ldrb	r2, [r4, #0xc]
	ldr	r3, .L243
	mov	r0, #0x50
	sub	r0, r0, r2
	lsl	r0, r0, #0x8
	add	r1, r2, #0
	add	r1, r1, #0x50
	orr	r0, r0, r1
	strh	r0, [r3]
	cmp	r2, #0x20
	bne	.L210	@cond_branch
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L210
.L244:
	.align	2, 0
.L243:
	.word	gBattle_WIN0V
.L224:
	ldr	r0, .L245
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x1
	bne	.L210	@cond_branch
	b	.L236
.L246:
	.align	2, 0
.L245:
	.word	gUnknown_0203A034
.L226:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r4
	ldrh	r0, [r3, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r3, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x79
	bne	.L210	@cond_branch
	mov	r0, #0x0
	strh	r0, [r3, #0xa]
	ldr	r2, .L247
	ldr	r0, .L247+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r1, [r0, #0x8]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x1c
	add	r0, r0, r2
	ldr	r1, .L247+0x8
	str	r1, [r0]
	ldrh	r0, [r3, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r3, #0x8]
	b	.L210
.L248:
	.align	2, 0
.L247:
	.word	gSprites
	.word	gUnknown_0203A034
	.word	sub_80F7620
.L228:
	ldr	r0, .L249
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x6]
	cmp	r0, #0x2
	bne	.L210	@cond_branch
	ldr	r3, .L249+0x4
	ldrh	r0, [r3]
	lsr	r2, r0, #0x8
	add	r0, r2, #0x2
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x50
	bls	.L230	@cond_branch
	mov	r2, #0x50
.L230:
	lsl	r1, r2, #0x8
	mov	r0, #0xa0
	sub	r0, r0, r2
	orr	r1, r1, r0
	strh	r1, [r3]
	cmp	r2, #0x50
	bne	.L210	@cond_branch
.L236:
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	ldrh	r1, [r0, #0x8]
	add	r1, r1, #0x1
	strh	r1, [r0, #0x8]
	b	.L210
.L250:
	.align	2, 0
.L249:
	.word	gUnknown_0203A034
	.word	gBattle_WIN0V
.L232:
	ldr	r0, .L251
	ldr	r0, [r0]
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x6]
	cmp	r0, #0x2
	bne	.L210	@cond_branch
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r2, #0x9]
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r4
	strh	r1, [r0, #0x8]
	ldr	r1, .L251+0x4
	str	r1, [r0]
.L210:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	gUnknown_0203A034
	.word	sub_80F66B4
.Lfe17:
	.size	 sub_80F6404,.Lfe17-sub_80F6404
	.align	2, 0
	.type	 sub_80F66B4,function
	.thumb_func
sub_80F66B4:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r0, .L261
	ldrh	r1, [r0, #0x2e]
	mov	r2, #0x1
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L254	@cond_branch
	ldr	r0, .L261+0x4
	ldrb	r1, [r0]
	add	r0, r2, #0
	and	r0, r0, r1
	lsl	r6, r7, #0x2
	cmp	r0, #0
	bne	.L255	@cond_branch
	ldr	r5, .L261+0x8
	mov	r4, #0x3
.L259:
	ldrh	r0, [r5]
	bl	SpeciesToNationalPokedexNum
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x2
	bl	GetSetPokedexFlag
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L259	@cond_branch
.L255:
	ldr	r1, .L261+0xc
	add	r0, r6, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, #0x0
	strh	r1, [r0, #0x1c]
	ldr	r1, .L261+0x10
	str	r1, [r0]
.L254:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L262:
	.align	2, 0
.L261:
	.word	gMain
	.word	gLinkContestFlags
	.word	gContestMons
	.word	gTasks
	.word	sub_80F671C
.Lfe18:
	.size	 sub_80F66B4,.Lfe18-sub_80F66B4
	.align	2, 0
	.type	 sub_80F671C,function
	.thumb_func
sub_80F671C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L267
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L264	@cond_branch
	ldr	r0, .L267+0x4
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r4, r1, r0
	mov	r1, #0x1c
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L266	@cond_branch
	ldr	r0, .L267+0x8
	bl	sub_80F707C
	bl	sub_800AC34
	ldr	r0, .L267+0xc
	str	r0, [r4]
	b	.L266
.L268:
	.align	2, 0
.L267:
	.word	gLinkContestFlags
	.word	gTasks
	.word	gText_CommunicationStandby
	.word	sub_80F677C
.L264:
	ldr	r0, .L269
	lsl	r1, r2, #0x2
	add	r1, r1, r2
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L269+0x4
	str	r0, [r1]
.L266:
	pop	{r4}
	pop	{r0}
	bx	r0
.L270:
	.align	2, 0
.L269:
	.word	gTasks
	.word	sub_80F67C4
.Lfe19:
	.size	 sub_80F671C,.Lfe19-sub_80F671C
	.align	2, 0
	.type	 sub_80F677C,function
	.thumb_func
sub_80F677C:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L274
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L272	@cond_branch
	ldr	r0, .L274+0x4
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L273	@cond_branch
	bl	DestroyWirelessStatusIndicatorSprite
.L273:
	bl	sub_80F7144
	ldr	r0, .L274+0x8
	lsl	r1, r4, #0x2
	add	r1, r1, r4
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L274+0xc
	str	r0, [r1]
.L272:
	pop	{r4}
	pop	{r0}
	bx	r0
.L275:
	.align	2, 0
.L274:
	.word	gReceivedRemoteLinkPlayers
	.word	gLinkContestFlags
	.word	gTasks
	.word	sub_80F67C4
.Lfe20:
	.size	 sub_80F677C,.Lfe20-sub_80F677C
	.align	2, 0
	.type	 sub_80F67C4,function
	.thumb_func
sub_80F67C4:
	push	{r4, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L278
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L277	@cond_branch
	ldr	r1, .L278+0x4
	ldr	r0, .L278+0x8
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	bl	BravoTrainerPokemonProfile_BeforeInterview2
.L277:
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0xff
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginHardwarePaletteFade
	ldr	r1, .L278+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L278+0x10
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L279:
	.align	2, 0
.L278:
	.word	gLinkContestFlags
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gTasks
	.word	sub_80F6820
.Lfe21:
	.size	 sub_80F67C4,.Lfe21-sub_80F67C4
	.align	2, 0
	.type	 sub_80F6820,function
	.thumb_func
sub_80F6820:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r5, r2, #0
	ldr	r0, .L287
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L281	@cond_branch
	ldr	r1, .L287+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L282	@cond_branch
	ldr	r0, .L287+0x8
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x3]
	bl	DestroyTask
	ldr	r0, .L287+0xc
	b	.L286
.L288:
	.align	2, 0
.L287:
	.word	gPaletteFade
	.word	gTasks
	.word	gUnknown_0203A034
	.word	0xffff
.L282:
	cmp	r0, #0x1
	bne	.L284	@cond_branch
	ldr	r0, .L289
.L286:
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	b	.L281
.L290:
	.align	2, 0
.L289:
	.word	-0x10000
.L284:
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x54
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r5, #0
	bl	DestroyTask
	bl	FreeAllWindowBuffers
	ldr	r0, .L291
	bl	SetMainCallback2
	bl	sub_80F7E64
.L281:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L292:
	.align	2, 0
.L291:
	.word	CB2_ReturnToFieldContinueScriptPlayMapMusic
.Lfe22:
	.size	 sub_80F6820,.Lfe22-sub_80F6820
	.align	2, 0
	.type	 sub_80F68B4,function
	.thumb_func
sub_80F68B4:
	push	{r4, r5, lr}
	ldr	r2, .L296
	ldrh	r3, [r2]
	add	r0, r3, #0x2
	strh	r0, [r2]
	ldr	r4, .L296+0x4
	ldrh	r5, [r4]
	add	r1, r5, #0x1
	strh	r1, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	bls	.L294	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xfd
	strh	r0, [r2]
.L294:
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	bls	.L295	@cond_branch
	add	r0, r5, #0
	sub	r0, r0, #0xfe
	strh	r0, [r4]
.L295:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L297:
	.align	2, 0
.L296:
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
.Lfe23:
	.size	 sub_80F68B4,.Lfe23-sub_80F68B4
	.align	2, 0
	.type	 sub_80F68F0,function
	.thumb_func
sub_80F68F0:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r1, .L309
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r2, r0, r1
	ldrh	r0, [r2, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r2, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x2
	bne	.L299	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x8]
	mov	r3, #0xc
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L300	@cond_branch
	ldrh	r0, [r2, #0xa]
	add	r0, r0, #0x1
	b	.L307
.L310:
	.align	2, 0
.L309:
	.word	gTasks
.L300:
	ldrh	r0, [r2, #0xa]
	sub	r0, r0, #0x1
.L307:
	strh	r0, [r2, #0xa]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0x10
	bne	.L302	@cond_branch
	mov	r0, #0x1
	b	.L308
.L302:
	cmp	r0, #0
	bne	.L303	@cond_branch
.L308:
	strh	r0, [r1, #0xc]
.L303:
	ldr	r0, .L311
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrb	r2, [r4, #0xa]
	ldr	r3, .L311+0x4
	mov	r0, #0x6b
	mov	r1, #0x1
	bl	BlendPalette
	ldrb	r2, [r4, #0xa]
	ldr	r3, .L311+0x8
	mov	r0, #0x68
	mov	r1, #0x1
	bl	BlendPalette
	ldrb	r2, [r4, #0xa]
	ldr	r3, .L311+0xc
	mov	r0, #0x6e
	mov	r1, #0x1
	bl	BlendPalette
.L299:
	ldr	r1, .L311
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r3, #0xa
	ldrsh	r4, [r0, r3]
	cmp	r4, #0
	bne	.L305	@cond_branch
	ldr	r0, .L311+0x10
	ldr	r0, [r0]
	ldr	r0, [r0]
	strb	r4, [r0, #0xa]
	b	.L306
.L312:
	.align	2, 0
.L311:
	.word	gTasks
	.word	0x2ede
	.word	0x7fff
	.word	0x77be
	.word	gUnknown_0203A034
.L305:
	ldr	r0, .L313
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0xa]
.L306:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L314:
	.align	2, 0
.L313:
	.word	gUnknown_0203A034
.Lfe24:
	.size	 sub_80F68F0,.Lfe24-sub_80F68F0
	.align	2, 0
	.globl	sub_80F69B8
	.type	 sub_80F69B8,function
	.thumb_func
sub_80F69B8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	mov	r8, r4
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r6, r3, #0x18
	ldr	r0, .L320
	mov	r2, #0x0
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L316	@cond_branch
	mov	r2, #0x1
.L316:
	add	r0, r7, #0
	ldr	r1, [sp, #0x28]
	bl	GetMonIconPtr
	add	r3, r0, #0
	lsl	r0, r5, #0x9
	add	r0, r0, #0x80
	add	r3, r3, r0
	cmp	r6, #0
	beq	.L318	@cond_branch
	lsl	r1, r4, #0x9
	ldr	r0, .L320+0x4
	add	r1, r1, r0
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	add	r0, r3, #0
	mov	r3, #0x1
	bl	RequestDma3Copy
	add	r0, r4, #0
	add	r0, r0, #0xa
	lsl	r0, r0, #0x1c
	lsl	r1, r4, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x12
	add	r1, r1, r2
	orr	r1, r1, r0
	lsr	r1, r1, #0x10
	lsl	r3, r4, #0x1
	add	r3, r3, r4
	add	r3, r3, #0x4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x4
	str	r0, [sp]
	mov	r0, #0x3
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	mov	r0, #0x1
	str	r0, [sp, #0xc]
	mov	r2, #0x3
	bl	WriteSequenceToBgTilemapBuffer
	b	.L319
.L321:
	.align	2, 0
.L320:
	.word	gContestPlayerMonIndex
	.word	0x6004000
.L318:
	mov	r0, r8
	lsl	r1, r0, #0x9
	ldr	r2, .L322
	add	r1, r1, r2
	mov	r2, #0xc0
	lsl	r2, r2, #0x1
	add	r0, r3, #0
	mov	r3, #0x1
	bl	RequestDma3Copy
.L319:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L323:
	.align	2, 0
.L322:
	.word	0x6004000
.Lfe25:
	.size	 sub_80F69B8,.Lfe25-sub_80F69B8
	.align	2, 0
	.type	 LoadAllContestMonIcons,function
	.thumb_func
LoadAllContestMonIcons:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	mov	r5, #0x0
	ldr	r4, .L330
.L328:
	ldrh	r0, [r4]
	lsl	r1, r5, #0x18
	lsr	r1, r1, #0x18
	ldr	r2, [r4, #0x38]
	str	r2, [sp]
	add	r2, r7, #0
	add	r3, r6, #0
	bl	sub_80F69B8
	add	r4, r4, #0x40
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L328	@cond_branch
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L331:
	.align	2, 0
.L330:
	.word	gContestMons
.Lfe26:
	.size	 LoadAllContestMonIcons,.Lfe26-LoadAllContestMonIcons
	.align	2, 0
	.type	 sub_80F6A9C,function
	.thumb_func
sub_80F6A9C:
	push	{r4, r5, r6, lr}
	mov	r4, #0x0
	ldr	r6, .L338
	mov	r5, #0xa0
	lsl	r5, r5, #0x10
.L336:
	ldr	r1, .L338+0x4
	lsl	r0, r4, #0x6
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, #0x0
	bl	GetIconSpecies
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r0, r0, #0x5
	ldr	r1, .L338+0x8
	add	r0, r0, r1
	lsr	r1, r5, #0x10
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	add	r5, r5, r0
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L336	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L339:
	.align	2, 0
.L338:
	.word	gMonIconPaletteIndices
	.word	gContestMons
	.word	gMonIconPalettes
.Lfe27:
	.size	 sub_80F6A9C,.Lfe27-sub_80F6A9C
	.align	2, 0
	.type	 sub_80F6AE8,function
	.thumb_func
sub_80F6AE8:
	push	{r4, lr}
	ldr	r0, .L342
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L341	@cond_branch
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0x8
	mov	r1, #0x8
	bl	CreateWirelessStatusIndicatorSprite
	ldr	r4, .L342+0x4
	ldr	r0, .L342+0x8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	add	r0, r0, #0x43
	mov	r1, #0x1
	strb	r1, [r0]
	ldr	r0, .L342+0xc
	bl	LoadSpriteSheet
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	mov	r0, #0x1
	neg	r0, r0
	lsr	r1, r1, #0xb
	ldr	r2, .L342+0x10
	add	r1, r1, r2
	mov	r2, #0x80
	mov	r3, #0x1
	bl	RequestDma3Fill
	ldr	r0, .L342+0x14
	mov	r1, #0x8
	mov	r2, #0x8
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	ldrb	r2, [r1, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	mov	r2, #0x8
	orr	r0, r0, r2
	strb	r0, [r1, #0x1]
.L341:
	pop	{r4}
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	gLinkContestFlags
	.word	gSprites
	.word	gWirelessStatusIndicatorSpriteId
	.word	sUnknown_0858D8E0
	.word	0x6010000
	.word	sSpriteTemplate_858D8C8
.Lfe28:
	.size	 sub_80F6AE8,.Lfe28-sub_80F6AE8
	.align	2, 0
	.globl	sub_80F6B78
	.type	 sub_80F6B78,function
	.thumb_func
sub_80F6B78:
	.syntax unified

    push {r4-r7,lr}
    mov r7, r10
    mov r6, r9
    mov r5, r8
    push {r5-r7}
    sub sp, 0x44
    adds r5, r0, 0
    lsls r1, 24
    lsrs r7, r1, 24
    add r4, sp, 0x20
    adds r0, r4, 0
    movs r1, 0
    movs r2, 0x8
    bl memset
    movs r0, 0x1E
    strb r0, [r4, 0x3]
    movs r0, 0x2
    strb r0, [r4, 0x4]
    adds r0, r4, 0
    bl AddWindow
    lsls r6, r0, 24
    lsrs r4, r6, 24
    adds r0, r4, 0
    movs r1, 0x11
    bl FillWindowPixelBuffer
    movs r0, 0x1
    adds r1, r5, 0
    movs r2, 0
    bl GetStringWidth
    adds r2, r0, 0
    adds r2, 0x9
    cmp r2, 0
    bge _080F6BC4
    adds r2, 0x7
_080F6BC4:
    asrs r2, 3
    mov r10, r2
    cmp r2, 0x1E
    ble _080F6BD0
    movs r1, 0x1E
    mov r10, r1
_080F6BD0:
    mov r1, r10
    lsls r2, r1, 3
    subs r2, r0
    lsrs r0, r2, 31
    adds r2, r0
    asrs r2, 1
    lsls r2, 24
    lsrs r2, 24
    ldr r0, =sContestLinkTextColors
    str r0, [sp]
    movs r0, 0x1
    negs r0, r0
    str r0, [sp, 0x4]
    str r5, [sp, 0x8]
    adds r0, r4, 0
    movs r1, 0x1
    movs r3, 0x1
    bl AddTextPrinterParameterized3
    adds r0, r4, 0
    movs r1, 0x7
    bl GetWindowAttribute
    mov r9, r0
    ldr r2, =sUnknown_0858D6D0
    mov r8, r2
    lsls r1, r7, 4
    adds r1, r7
    lsls r1, 2
    ldr r3, =gSprites
    adds r1, r3
    ldrh r0, [r1, 0x4]
    lsls r0, 22
    lsrs r0, 17
    ldr r2, =0x06010000
    adds r0, r2
    str r0, [sp, 0xC]
    str r6, [sp, 0x38]
    mov r7, sp
    adds r7, 0x1C
    str r7, [sp, 0x2C]
    mov r0, r10
    adds r0, 0x2
    str r0, [sp, 0x30]
    movs r5, 0
    add r7, sp, 0x10
    mov r12, r7
    adds r6, r1, 0
    adds r6, 0x2E
    movs r4, 0x2
_080F6C34:
    adds r0, r6, r5
    movs r7, 0
    ldrsh r1, [r0, r7]
    lsls r0, r1, 4
    adds r0, r1
    lsls r0, 2
    adds r0, r3
    ldrh r0, [r0, 0x4]
    lsls r0, 22
    lsrs r0, 17
    adds r0, r2
    mov r1, r12
    adds r1, 0x4
    mov r12, r1
    subs r1, 0x4
    stm r1!, {r0}
    adds r5, 0x2
    subs r4, 0x1
    cmp r4, 0
    bge _080F6C34
    mov r7, r8
    adds r7, 0x80
    mov r2, r8
    adds r2, 0x40
    str r2, [sp, 0x28]
    mov r0, r8
    adds r0, 0x20
    str r0, [sp, 0x3C]
    mov r1, r8
    adds r1, 0xA0
    str r1, [sp, 0x40]
    adds r2, 0x20
    str r2, [sp, 0x34]
    add r5, sp, 0xC
    movs r6, 0
    movs r4, 0x3
_080F6C7C:
    str r6, [sp, 0x1C]
    ldm r5!, {r1}
    ldr r0, [sp, 0x2C]
    ldr r2, =0x05000100
    bl CpuSet
    subs r4, 0x1
    cmp r4, 0
    bge _080F6C7C
    ldr r5, [sp, 0xC]
    ldr r6, =0x04000008
    mov r0, r8
    adds r1, r5, 0
    adds r2, r6, 0
    bl CpuSet
    movs r0, 0x80
    lsls r0, 1
    adds r1, r5, r0
    adds r0, r7, 0
    adds r2, r6, 0
    bl CpuSet
    movs r2, 0x80
    lsls r2, 2
    adds r1, r5, r2
    adds r0, r7, 0
    adds r2, r6, 0
    bl CpuSet
    movs r7, 0xC0
    lsls r7, 2
    adds r1, r5, r7
    ldr r0, [sp, 0x28]
    adds r2, r6, 0
    bl CpuSet
    movs r4, 0
    cmp r4, r10
    bge _080F6D32
    adds r7, r6, 0
_080F6CCE:
    adds r6, r4, 0x1
    adds r0, r6, 0
    cmp r6, 0
    bge _080F6CDA
    adds r0, r4, 0
    adds r0, 0x8
_080F6CDA:
    asrs r0, 3
    lsls r1, r0, 2
    add r1, sp
    adds r1, 0xC
    lsls r0, 3
    subs r0, r6, r0
    lsls r0, 5
    ldr r1, [r1]
    adds r5, r1, r0
    mov r0, r8
    adds r0, 0xC0
    adds r1, r5, 0
    adds r2, r7, 0
    bl CpuSet
    movs r0, 0x80
    lsls r0, 1
    adds r1, r5, r0
    mov r0, r9
    adds r2, r7, 0
    bl CpuSet
    movs r0, 0xF0
    lsls r0, 2
    add r0, r9
    movs r2, 0x80
    lsls r2, 2
    adds r1, r5, r2
    adds r2, r7, 0
    bl CpuSet
    movs r0, 0xC0
    lsls r0, 2
    adds r1, r5, r0
    mov r0, r8
    adds r0, 0xE0
    adds r2, r7, 0
    bl CpuSet
    movs r1, 0x20
    add r9, r1
    adds r4, r6, 0
    cmp r4, r10
    blt _080F6CCE
_080F6D32:
    adds r2, r4, 0x1
    adds r0, r2, 0
    cmp r2, 0
    bge _080F6D3E
    adds r0, r4, 0
    adds r0, 0x8
_080F6D3E:
    asrs r0, 3
    lsls r1, r0, 2
    add r1, sp
    adds r1, 0xC
    lsls r0, 3
    subs r0, r2, r0
    lsls r0, 5
    ldr r1, [r1]
    adds r5, r1, r0
    ldr r4, =0x04000008
    ldr r0, [sp, 0x3C]
    adds r1, r5, 0
    adds r2, r4, 0
    bl CpuSet
    movs r2, 0x80
    lsls r2, 1
    adds r1, r5, r2
    ldr r0, [sp, 0x40]
    adds r2, r4, 0
    bl CpuSet
    movs r7, 0x80
    lsls r7, 2
    adds r1, r5, r7
    ldr r0, [sp, 0x40]
    adds r2, r4, 0
    bl CpuSet
    movs r0, 0xC0
    lsls r0, 2
    adds r1, r5, r0
    ldr r0, [sp, 0x34]
    adds r2, r4, 0
    bl CpuSet
    ldr r1, [sp, 0x38]
    lsrs r0, r1, 24
    bl RemoveWindow
    ldr r2, [sp, 0x30]
    lsls r1, r2, 3
    movs r0, 0xF0
    subs r0, r1
    asrs r0, 1
    add sp, 0x44
    pop {r3-r5}
    mov r8, r3
    mov r9, r4
    mov r10, r5
    pop {r4-r7}
    pop {r1}
    bx r1
    .pool
.syntax divided
	.code	16
.Lfe29:
	.size	 sub_80F6B78,.Lfe29-sub_80F6B78
	.align	2, 0
	.type	 sub_80F6DC0,function
	.thumb_func
sub_80F6DC0:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x20
	mov	r1, sp
	ldr	r0, .L356
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	ldmia	r0!, {r2, r3, r4}
	stmia	r1!, {r2, r3, r4}
	add	r5, sp, #0x18
	ldr	r6, .L356+0x4
	mov	r4, #0x7
.L349:
	add	r0, r6, #0
	bl	LoadSpriteSheet
	add	r6, r6, #0x8
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L349	@cond_branch
	ldr	r0, .L356+0x8
	bl	LoadSpritePalette
	mov	r4, #0x0
	mov	r6, sp
.L354:
	mov	r0, sp
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	mov	r2, #0x90
	mov	r3, #0xa
	bl	CreateSprite
	add	r1, r5, r4
	strb	r0, [r1]
	ldrh	r0, [r6]
	add	r0, r0, #0x1
	strh	r0, [r6]
	add	r4, r4, #0x1
	cmp	r4, #0x7
	ble	.L354	@cond_branch
	ldr	r2, .L356+0xc
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x1]
	mov	r3, #0x0
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x2]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r5]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x3]
	strh	r1, [r0, #0x32]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x5]
	strh	r1, [r0, #0x2e]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x6]
	strh	r1, [r0, #0x30]
	ldrb	r1, [r5, #0x4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r1, [r5, #0x7]
	strh	r1, [r0, #0x32]
	ldr	r1, .L356+0x10
	ldr	r0, [r1]
	ldr	r2, [r0]
	ldrb	r0, [r5]
	strb	r0, [r2]
	ldr	r0, [r1]
	ldr	r0, [r0]
	strb	r3, [r0, #0x4]
	ldr	r0, [r1]
	ldr	r1, [r0]
	ldrb	r0, [r5, #0x4]
	strb	r0, [r1, #0x1]
	bl	sub_80F7144
	add	sp, sp, #0x20
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L357:
	.align	2, 0
.L356:
	.word	sSpriteTemplate_858D7F8
	.word	sUnknown_0858D810
	.word	sUnknown_0858D850
	.word	gSprites
	.word	gUnknown_0203A034
.Lfe30:
	.size	 sub_80F6DC0,.Lfe30-sub_80F6DC0
	.align	2, 0
	.type	 sub_80F6E9C,function
	.thumb_func
sub_80F6E9C:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	ldr	r4, .L359
	ldr	r4, [r4]
	mov	r8, r4
	ldr	r4, [r4]
	ldrb	r5, [r4]
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r5, .L359+0x4
	add	r4, r4, r5
	mov	r6, #0x0
	mov	r5, #0x88
	lsl	r5, r5, #0x1
	strh	r5, [r4, #0x20]
	strh	r1, [r4, #0x22]
	strh	r6, [r4, #0x24]
	strh	r6, [r4, #0x26]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	add	r0, r0, #0x20
	strh	r0, [r4, #0x36]
	strh	r2, [r4, #0x38]
	strh	r3, [r4, #0x3a]
	strh	r6, [r4, #0x3c]
	ldr	r0, .L359+0x8
	str	r0, [r4, #0x1c]
	mov	r0, r8
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0x4]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	gUnknown_0203A034
	.word	gSprites
	.word	sub_80F6F68
.Lfe31:
	.size	 sub_80F6E9C,.Lfe31-sub_80F6E9C
	.align	2, 0
	.type	 sub_80F6EF4,function
	.thumb_func
sub_80F6EF4:
	push	{r4, r5, lr}
	ldr	r1, .L362
	ldr	r4, [r1]
	ldr	r1, [r4]
	ldrb	r2, [r1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r2, .L362+0x4
	add	r1, r1, r2
	ldrh	r2, [r1, #0x24]
	ldrh	r3, [r1, #0x20]
	add	r2, r2, r3
	mov	r3, #0x0
	strh	r2, [r1, #0x20]
	ldrh	r2, [r1, #0x26]
	ldrh	r5, [r1, #0x22]
	add	r2, r2, r5
	strh	r2, [r1, #0x22]
	strh	r3, [r1, #0x26]
	strh	r3, [r1, #0x24]
	strh	r0, [r1, #0x3a]
	strh	r3, [r1, #0x3c]
	ldr	r0, .L362+0x8
	str	r0, [r1, #0x1c]
	ldr	r1, [r4]
	mov	r0, #0x3
	strb	r0, [r1, #0x4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L363:
	.align	2, 0
.L362:
	.word	gUnknown_0203A034
	.word	gSprites
	.word	sub_80F7014
.Lfe32:
	.size	 sub_80F6EF4,.Lfe32-sub_80F6EF4
	.align	2, 0
	.type	 sub_80F6F40,function
	.thumb_func
sub_80F6F40:
	mov	r3, #0x0
	mov	r2, #0x0
	mov	r1, #0x88
	lsl	r1, r1, #0x1
	strh	r1, [r0, #0x20]
	mov	r1, #0x90
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x26]
	strh	r2, [r0, #0x24]
	ldr	r1, .L365
	str	r1, [r0, #0x1c]
	ldr	r0, .L365+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	strb	r3, [r0, #0x4]
	bx	lr
.L366:
	.align	2, 0
.L365:
	.word	SpriteCallbackDummy
	.word	gUnknown_0203A034
.Lfe33:
	.size	 sub_80F6F40,.Lfe33-sub_80F6F40
	.align	2, 0
	.type	 sub_80F6F68,function
	.thumb_func
sub_80F6F68:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x3a]
	ldrh	r0, [r3, #0x3c]
	add	r2, r2, r0
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r1, #0xff
	and	r2, r2, r1
	strh	r2, [r3, #0x3c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldrh	r2, [r3, #0x36]
	mov	r4, #0x36
	ldrsh	r1, [r3, r4]
	cmp	r0, r1
	bge	.L368	@cond_branch
	strh	r2, [r3, #0x20]
.L368:
	mov	r4, #0x0
	ldr	r6, .L375
	mov	r5, #0x40
	add	r2, r3, #0
	add	r2, r2, #0x2e
.L372:
	mov	r7, #0x0
	ldrsh	r0, [r2, r7]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r3, #0x24]
	ldrh	r7, [r3, #0x20]
	add	r0, r0, r7
	add	r0, r0, r5
	strh	r0, [r1, #0x20]
	add	r5, r5, #0x40
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L372	@cond_branch
	mov	r0, #0x20
	ldrsh	r1, [r3, r0]
	mov	r2, #0x36
	ldrsh	r0, [r3, r2]
	cmp	r1, r0
	bne	.L374	@cond_branch
	ldr	r0, .L375+0x4
	str	r0, [r3, #0x1c]
.L374:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L376:
	.align	2, 0
.L375:
	.word	gSprites
	.word	sub_80F6FDC
.Lfe34:
	.size	 sub_80F6F68,.Lfe34-sub_80F6F68
	.align	2, 0
	.type	 sub_80F6FDC,function
	.thumb_func
sub_80F6FDC:
	push	{lr}
	add	r2, r0, #0
	ldr	r0, .L380
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #0x2
	strb	r0, [r1, #0x4]
	ldrh	r3, [r2, #0x38]
	ldr	r1, .L380+0x4
	lsr	r0, r1, #0x10
	cmp	r3, r0
	beq	.L378	@cond_branch
	sub	r0, r3, #0x1
	strh	r0, [r2, #0x38]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	asr	r1, r1, #0x10
	cmp	r0, r1
	bne	.L378	@cond_branch
	ldrh	r0, [r2, #0x3a]
	bl	sub_80F6EF4
.L378:
	pop	{r0}
	bx	r0
.L381:
	.align	2, 0
.L380:
	.word	gUnknown_0203A034
	.word	-0x10000
.Lfe35:
	.size	 sub_80F6FDC,.Lfe35-sub_80F6FDC
	.align	2, 0
	.type	 sub_80F7014,function
	.thumb_func
sub_80F7014:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	ldrh	r2, [r3, #0x3a]
	ldrh	r0, [r3, #0x3c]
	add	r2, r2, r0
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r0, #0xff
	and	r2, r2, r0
	strh	r2, [r3, #0x3c]
	mov	r4, #0x0
	ldr	r6, .L389
	mov	r5, #0x40
	add	r2, r3, #0
	add	r2, r2, #0x2e
.L386:
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r3, #0x24]
	ldrh	r7, [r3, #0x20]
	add	r0, r0, r7
	add	r0, r0, r5
	strh	r0, [r1, #0x20]
	add	r5, r5, #0x40
	add	r2, r2, #0x2
	add	r4, r4, #0x1
	cmp	r4, #0x2
	ble	.L386	@cond_branch
	mov	r1, #0x20
	ldrsh	r0, [r3, r1]
	mov	r2, #0x24
	ldrsh	r1, [r3, r2]
	add	r0, r0, r1
	mov	r1, #0xe0
	neg	r1, r1
	cmp	r0, r1
	bge	.L388	@cond_branch
	add	r0, r3, #0
	bl	sub_80F6F40
.L388:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L390:
	.align	2, 0
.L389:
	.word	gSprites
.Lfe36:
	.size	 sub_80F7014,.Lfe36-sub_80F7014
	.align	2, 0
	.type	 sub_80F707C,function
	.thumb_func
sub_80F707C:
	push	{r4, r5, r6, r7, lr}
	ldr	r4, .L397
	ldr	r1, [r4]
	ldr	r1, [r1]
	ldrb	r1, [r1, #0x1]
	bl	sub_80F6B78
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [r4]
	ldr	r1, [r1]
	ldrb	r2, [r1, #0x1]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	ldr	r3, .L397+0x4
	add	r4, r1, r3
	add	r0, r0, #0x20
	strh	r0, [r4, #0x20]
	mov	r0, #0x50
	strh	r0, [r4, #0x22]
	add	r5, r4, #0
	add	r5, r5, #0x3e
	ldrb	r1, [r5]
	mov	r2, #0x5
	neg	r2, r2
	add	r0, r2, #0
	and	r0, r0, r1
	strb	r0, [r5]
	mov	r5, #0x0
	add	r6, r3, #0
	mov	ip, r2
	mov	r3, #0x40
.L395:
	lsl	r0, r5, #0x1
	add	r2, r4, #0
	add	r2, r2, #0x2e
	add	r2, r2, r0
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	ldrh	r0, [r4, #0x24]
	ldrh	r7, [r4, #0x20]
	add	r0, r0, r7
	add	r0, r0, r3
	strh	r0, [r1, #0x20]
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r4, #0x22]
	strh	r1, [r0, #0x22]
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, ip
	and	r0, r0, r2
	strb	r0, [r1]
	add	r3, r3, #0x40
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L395	@cond_branch
	ldr	r1, .L397+0x8
	mov	r0, #0xf0
	strh	r0, [r1]
	ldr	r2, .L397+0xc
	ldrh	r1, [r4, #0x22]
	add	r0, r1, #0
	sub	r0, r0, #0x10
	lsl	r0, r0, #0x8
	add	r1, r1, #0x10
	orr	r0, r0, r1
	strh	r0, [r2]
	ldr	r1, .L397+0x10
	mov	r0, #0x48
	bl	SetGpuReg
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L398:
	.align	2, 0
.L397:
	.word	gUnknown_0203A034
	.word	gSprites
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3e
.Lfe37:
	.size	 sub_80F707C,.Lfe37-sub_80F707C
	.align	2, 0
	.type	 sub_80F7144,function
	.thumb_func
sub_80F7144:
	push	{r4, r5, r6, r7, lr}
	ldr	r0, .L405
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	ldr	r3, .L405+0x4
	add	r2, r2, r3
	mov	r0, #0x3e
	add	r0, r0, r2
	mov	ip, r0
	ldrb	r0, [r0]
	mov	r1, #0x4
	orr	r0, r0, r1
	mov	r1, ip
	strb	r0, [r1]
	ldr	r7, .L405+0x8
	ldr	r6, .L405+0xc
	add	r5, r3, #0
	mov	r4, #0x4
	add	r2, r2, #0x2e
	mov	r3, #0x2
.L403:
	mov	r1, #0x0
	ldrsh	r0, [r2, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r5
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	add	r2, r2, #0x2
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L403	@cond_branch
	mov	r0, #0x0
	strh	r0, [r7]
	strh	r0, [r6]
	mov	r0, #0x40
	mov	r1, #0x0
	bl	SetGpuReg
	ldrh	r1, [r6]
	mov	r0, #0x44
	bl	SetGpuReg
	ldr	r1, .L405+0x10
	mov	r0, #0x48
	bl	SetGpuReg
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L406:
	.align	2, 0
.L405:
	.word	gUnknown_0203A034
	.word	gSprites
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
.Lfe38:
	.size	 sub_80F7144,.Lfe38-sub_80F7144
	.align	2, 0
	.type	 sub_80F71C8,function
	.thumb_func
sub_80F71C8:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	mov	r5, #0x5
	mov	r4, #0x1
	ldr	r0, .L427
	ldrb	r1, [r0]
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L408	@cond_branch
	ldr	r1, .L427+0x4
	str	r5, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	mov	r2, #0x5
	mov	r3, #0x1
	bl	CopyToBgTilemapBufferRect
	mov	r5, #0xa
	b	.L409
.L428:
	.align	2, 0
.L427:
	.word	gLinkContestFlags
	.word	gUnknown_08DC6498
.L408:
	ldr	r0, .L429
	ldrh	r2, [r0]
	cmp	r2, #0
	bne	.L410	@cond_branch
	ldr	r1, .L429+0x4
	b	.L424
.L430:
	.align	2, 0
.L429:
	.word	gSpecialVar_ContestRank
	.word	gUnknown_08DC63F8
.L410:
	cmp	r2, #0x1
	bne	.L412	@cond_branch
	ldr	r1, .L431
	b	.L424
.L432:
	.align	2, 0
.L431:
	.word	gUnknown_08DC6420
.L412:
	cmp	r2, #0x2
	bne	.L414	@cond_branch
	ldr	r1, .L433
	mov	r0, #0xa
	str	r0, [sp]
	str	r2, [sp, #0x4]
	mov	r0, #0x2
	b	.L425
.L434:
	.align	2, 0
.L433:
	.word	gUnknown_08DC6448
.L414:
	ldr	r1, .L435
.L424:
	mov	r0, #0xa
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
.L425:
	mov	r2, #0x5
	mov	r3, #0x1
	bl	CopyToBgTilemapBufferRect
	mov	r5, #0xf
.L409:
	ldr	r0, .L435+0x4
	ldrh	r0, [r0]
	cmp	r0, #0
	bne	.L416	@cond_branch
	mov	r6, #0x0
	ldr	r1, .L435+0x8
	b	.L426
.L436:
	.align	2, 0
.L435:
	.word	gUnknown_08DC6470
	.word	gSpecialVar_ContestCategory
	.word	gUnknown_08DC64AC
.L416:
	cmp	r0, #0x1
	bne	.L418	@cond_branch
	mov	r6, #0x1
	ldr	r1, .L437
	b	.L426
.L438:
	.align	2, 0
.L437:
	.word	gUnknown_08DC64C0
.L418:
	cmp	r0, #0x2
	bne	.L420	@cond_branch
	mov	r6, #0x2
	ldr	r1, .L439
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	mov	r0, #0x5
	str	r0, [sp]
	str	r6, [sp, #0x4]
	mov	r0, #0x2
	bl	CopyToBgTilemapBufferRect
	b	.L417
.L440:
	.align	2, 0
.L439:
	.word	gUnknown_08DC64D4
.L420:
	cmp	r0, #0x3
	bne	.L422	@cond_branch
	mov	r6, #0x3
	ldr	r1, .L441
.L426:
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	mov	r0, #0x5
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	bl	CopyToBgTilemapBufferRect
	b	.L417
.L442:
	.align	2, 0
.L441:
	.word	gUnknown_08DC64E8
.L422:
	mov	r6, #0x4
	ldr	r1, .L443
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	lsl	r4, r4, #0x18
	lsr	r3, r4, #0x18
	mov	r0, #0x5
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	bl	CopyToBgTilemapBufferRect
.L417:
	add	r5, r5, #0x5
	ldr	r1, .L443+0x4
	lsl	r2, r5, #0x18
	lsr	r2, r2, #0x18
	lsr	r3, r4, #0x18
	mov	r0, #0x6
	str	r0, [sp]
	mov	r0, #0x2
	str	r0, [sp, #0x4]
	bl	CopyToBgTilemapBufferRect
	ldr	r0, .L443+0x8
	ldr	r0, [r0]
	ldr	r1, [r0, #0x14]
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x4
	str	r0, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBufferRect_ChangePalette
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	gUnknown_08DC64FC
	.word	gUnknown_08DC6510
	.word	gUnknown_0203A034
.Lfe39:
	.size	 sub_80F71C8,.Lfe39-sub_80F71C8
	.align	2, 0
	.globl	sub_80F7310
	.type	 sub_80F7310,function
	.thumb_func
sub_80F7310:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	ldr	r1, .L449
	lsr	r0, r0, #0x17
	add	r0, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	lsl	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x3f
	bl	__udivsi3
	add	r1, r0, #0
	ldr	r0, .L449+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L446	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r1, r1, r0
.L446:
	lsr	r1, r1, #0x10
	cmp	r1, #0
	bne	.L447	@cond_branch
	cmp	r4, #0
	beq	.L447	@cond_branch
	mov	r1, #0x1
.L447:
	cmp	r5, #0
	beq	.L448	@cond_branch
	cmp	r1, #0xa
	bls	.L448	@cond_branch
	mov	r1, #0xa
.L448:
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L450:
	.align	2, 0
.L449:
	.word	gContestMonConditions
	.word	0xffff
.Lfe40:
	.size	 sub_80F7310,.Lfe40-sub_80F7310
	.align	2, 0
	.globl	sub_80F7364
	.type	 sub_80F7364,function
	.thumb_func
sub_80F7364:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	ldr	r1, .L460
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	mov	r2, #0x0
	ldrsh	r0, [r0, r2]
	add	r7, r1, #0
	cmp	r0, #0
	bge	.L452	@cond_branch
	neg	r0, r0
.L452:
	lsl	r4, r0, #0x10
	add	r0, r4, #0
	mov	r1, #0x50
	bl	__udivsi3
	add	r2, r0, #0
	ldr	r0, .L460+0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L454	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x9
	add	r2, r2, r0
.L454:
	lsr	r2, r2, #0x10
	cmp	r2, #0
	bne	.L455	@cond_branch
	cmp	r4, #0
	beq	.L455	@cond_branch
	mov	r2, #0x1
.L455:
	cmp	r6, #0
	beq	.L456	@cond_branch
	cmp	r2, #0xa
	bls	.L456	@cond_branch
	mov	r2, #0xa
.L456:
	lsl	r0, r5, #0x1
	add	r0, r0, r7
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bge	.L457	@cond_branch
	neg	r0, r2
	lsl	r0, r0, #0x18
	b	.L459
.L461:
	.align	2, 0
.L460:
	.word	gUnknown_02039F18
	.word	0xffff
.L457:
	lsl	r0, r2, #0x18
.L459:
	lsr	r0, r0, #0x18
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 sub_80F7364,.Lfe41-sub_80F7364
	.align	2, 0
	.type	 sub_80F73DC,function
	.thumb_func
sub_80F73DC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r1, .L467
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r7, r0, r1
	ldrh	r2, [r7, #0x1c]
	mov	r0, #0x1c
	ldrsh	r6, [r7, r0]
	cmp	r6, #0
	bne	.L463	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r7, r1]
	mov	r1, #0x3
	sub	r1, r1, r0
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	strh	r0, [r7, #0x1e]
	add	r0, r2, #0x1
	strh	r0, [r7, #0x1c]
	b	.L464
.L468:
	.align	2, 0
.L467:
	.word	gTasks
.L463:
	cmp	r6, #0x1
	bne	.L464	@cond_branch
	ldrh	r0, [r7, #0x1e]
	sub	r0, r0, #0x1
	strh	r0, [r7, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x1
	neg	r1, r1
	cmp	r0, r1
	bne	.L464	@cond_branch
	mov	r2, #0x8
	ldrsh	r4, [r7, r2]
	lsl	r4, r4, #0x11
	ldr	r0, .L469
	add	r4, r4, r0
	lsr	r4, r4, #0x10
	mov	r1, #0xa
	ldrsh	r0, [r7, r1]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	add	r3, r3, #0x5
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, #0x2
	mov	r9, r2
	str	r2, [sp]
	str	r6, [sp, #0x4]
	mov	r5, #0x11
	str	r5, [sp, #0x8]
	str	r6, [sp, #0xc]
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x1
	bl	WriteSequenceToBgTilemapBuffer
	add	r4, r4, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r1, #0xa
	ldrsh	r0, [r7, r1]
	lsl	r3, r0, #0x1
	add	r3, r3, r0
	add	r3, r3, #0x6
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r2, r9
	str	r2, [sp]
	str	r6, [sp, #0x4]
	str	r5, [sp, #0x8]
	str	r6, [sp, #0xc]
	mov	r0, #0x2
	add	r1, r4, #0
	mov	r2, #0x1
	bl	WriteSequenceToBgTilemapBuffer
	ldr	r0, .L469+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x5]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x5]
	mov	r0, r8
	bl	DestroyTask
	mov	r0, #0x18
	bl	PlaySE
.L464:
	add	sp, sp, #0x10
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L470:
	.align	2, 0
.L469:
	.word	0x50430000
	.word	gUnknown_0203A034
.Lfe42:
	.size	 sub_80F73DC,.Lfe42-sub_80F73DC
	.align	2, 0
	.type	 sub_80F74BC,function
	.thumb_func
sub_80F74BC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r1, .L478
	ldrb	r0, [r1]
	ldr	r6, .L478+0x4
	cmp	r0, #0
	beq	.L473	@cond_branch
.L474:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	bgt	.L473	@cond_branch
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L474	@cond_branch
.L473:
	ldr	r1, [r6]
	lsl	r3, r4, #0x1
	add	r3, r3, r4
	lsl	r0, r3, #0x6
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	ldr	r1, [r1, #0x14]
	add	r1, r1, r0
	add	r3, r3, #0x4
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x3
	str	r0, [sp, #0x4]
	mov	r0, #0x9
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r2, #0x0
	bl	CopyToBgTilemapBufferRect_ChangePalette
	ldr	r1, .L478+0x8
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r4, [r0, #0x1c]
	mov	r1, #0x1
	strh	r1, [r0, #0x20]
	ldr	r1, .L478+0xc
	str	r1, [r0]
	ldr	r0, [r6]
	ldr	r0, [r0]
	strb	r5, [r0, #0x3]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L479:
	.align	2, 0
.L478:
	.word	gContestFinalStandings
	.word	gUnknown_0203A034
	.word	gTasks
	.word	sub_80F753C
.Lfe43:
	.size	 sub_80F74BC,.Lfe43-sub_80F74BC
	.align	2, 0
	.type	 sub_80F753C,function
	.thumb_func
sub_80F753C:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L486
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrh	r0, [r4, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x1e]
	lsl	r0, r0, #0x10
	asr	r5, r0, #0x10
	cmp	r5, #0x1
	bne	.L481	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1e]
	ldrh	r2, [r4, #0x20]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r3, .L486+0x4
	mov	r0, #0x91
	mov	r1, #0x1
	bl	BlendPalette
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L482	@cond_branch
	ldrh	r0, [r4, #0x20]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x10
	bne	.L481	@cond_branch
	strh	r5, [r4, #0x22]
	b	.L481
.L487:
	.align	2, 0
.L486:
	.word	gTasks
	.word	0x6f8d
.L482:
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L481	@cond_branch
	strh	r0, [r4, #0x22]
.L481:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe44:
	.size	 sub_80F753C,.Lfe44-sub_80F753C
	.align	2, 0
	.type	 sub_80F75A8,function
	.thumb_func
sub_80F75A8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x9
	bgt	.L489	@cond_branch
	add	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xa
	bne	.L491	@cond_branch
	ldrh	r0, [r4, #0x30]
	mov	r1, #0x0
	bl	PlayCry1
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	b	.L491
.L489:
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	add	r2, r0, #0
	ldrh	r1, [r4, #0x30]
	add	r2, r2, r1
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r4, #0x20]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	mov	r1, #0xff
	and	r2, r2, r1
	strh	r2, [r4, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x77
	bgt	.L492	@cond_branch
	mov	r0, #0x78
	strh	r0, [r4, #0x20]
.L492:
	mov	r2, #0x20
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x78
	bne	.L491	@cond_branch
	ldr	r0, .L494
	str	r0, [r4, #0x1c]
	mov	r0, #0x0
	strh	r0, [r4, #0x30]
	ldr	r0, .L494+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #0x1
	strb	r0, [r1, #0x6]
.L491:
	pop	{r4}
	pop	{r0}
	bx	r0
.L495:
	.align	2, 0
.L494:
	.word	SpriteCallbackDummy
	.word	gUnknown_0203A034
.Lfe45:
	.size	 sub_80F75A8,.Lfe45-sub_80F75A8
	.align	2, 0
	.type	 sub_80F7620,function
	.thumb_func
sub_80F7620:
	push	{lr}
	add	r3, r0, #0
	mov	r0, #0xc0
	lsl	r0, r0, #0x3
	add	r2, r0, #0
	ldrh	r0, [r3, #0x30]
	add	r2, r2, r0
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r3, #0x20]
	sub	r0, r0, r1
	strh	r0, [r3, #0x20]
	mov	r1, #0xff
	and	r2, r2, r1
	strh	r2, [r3, #0x30]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L497	@cond_branch
	ldr	r0, .L498
	str	r0, [r3, #0x1c]
	add	r2, r3, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, .L498+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	mov	r0, #0x2
	strb	r0, [r1, #0x6]
.L497:
	pop	{r0}
	bx	r0
.L499:
	.align	2, 0
.L498:
	.word	SpriteCallbackDummy
	.word	gUnknown_0203A034
.Lfe46:
	.size	 sub_80F7620,.Lfe46-sub_80F7620
	.align	2, 0
	.type	 sub_80F7670,function
	.thumb_func
sub_80F7670:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r1, .L504
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L501	@cond_branch
	mov	r0, #0x0
	strh	r0, [r1, #0x8]
	ldr	r0, .L504+0x4
	mov	r8, r0
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x7]
	cmp	r0, #0x27
	bhi	.L501	@cond_branch
	ldr	r4, .L504+0x8
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf0
	bl	__umodsi3
	add	r1, r0, #0
	sub	r1, r1, #0x14
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x2c
	mov	r3, #0x5
	bl	CreateSprite
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	ldr	r1, .L504+0xc
	lsl	r5, r4, #0x4
	add	r5, r5, r4
	lsl	r5, r5, #0x2
	add	r5, r5, r1
	lsl	r0, r0, #0x17
	lsr	r0, r0, #0x17
	strh	r0, [r5, #0x2e]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x18
	bl	__umodsi3
	add	r0, r0, #0x10
	strh	r0, [r5, #0x30]
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xff
	and	r0, r0, r1
	add	r0, r0, #0x30
	strh	r0, [r5, #0x32]
	bl	Random
	ldrh	r6, [r5, #0x4]
	lsl	r4, r6, #0x16
	lsr	r4, r4, #0x16
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x11
	bl	__umodsi3
	add	r4, r4, r0
	ldr	r1, .L504+0x10
	add	r0, r1, #0
	and	r4, r4, r0
	ldr	r0, .L504+0x14
	and	r0, r0, r6
	orr	r0, r0, r4
	strh	r0, [r5, #0x4]
	mov	r1, r8
	ldr	r0, [r1]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x7]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x7]
.L501:
	ldr	r0, .L504+0x4
	ldr	r0, [r0]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	beq	.L503	@cond_branch
	add	r0, r7, #0
	bl	DestroyTask
.L503:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L505:
	.align	2, 0
.L504:
	.word	gTasks
	.word	gUnknown_0203A034
	.word	sSpriteTemplate_858D860
	.word	gSprites
	.word	0x3ff
	.word	-0x400
.Lfe47:
	.size	 sub_80F7670,.Lfe47-sub_80F7670
	.align	2, 0
	.type	 sub_80F7768,function
	.thumb_func
sub_80F7768:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x32]
	ldrh	r0, [r4, #0x36]
	add	r1, r1, r0
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	mov	r0, #0xff
	and	r1, r1, r0
	strh	r1, [r4, #0x36]
	ldrh	r0, [r4, #0x22]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x22]
	ldr	r5, .L510
	ldr	r0, [r5]
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x9]
	cmp	r0, #0
	beq	.L507	@cond_branch
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r2]
.L507:
	mov	r1, #0x20
	ldrsh	r0, [r4, r1]
	cmp	r0, #0xf8
	bgt	.L509	@cond_branch
	mov	r2, #0x22
	ldrsh	r0, [r4, r2]
	cmp	r0, #0x74
	ble	.L508	@cond_branch
.L509:
	add	r0, r4, #0
	bl	DestroySprite
	ldr	r0, [r5]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x7]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x7]
.L508:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L511:
	.align	2, 0
.L510:
	.word	gUnknown_0203A034
.Lfe48:
	.size	 sub_80F7768,.Lfe48-sub_80F7768
	.align	2, 0
	.type	 sub_80F77E0,function
	.thumb_func
sub_80F77E0:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r0, .L513
	mov	r1, #0x8
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L513+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	strh	r5, [r1, #0xa]
	ldr	r0, .L513+0x8
	lsl	r4, r4, #0x6
	add	r4, r4, r0
	ldrh	r0, [r4]
	strh	r0, [r1, #0xc]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L514:
	.align	2, 0
.L513:
	.word	sub_80F7824
	.word	gTasks
	.word	gContestMons
.Lfe49:
	.size	 sub_80F77E0,.Lfe49-sub_80F77E0
	.align	2, 0
	.type	 sub_80F7824,function
	.thumb_func
sub_80F7824:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L517
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r4, r1, r2
	ldrb	r5, [r4, #0x8]
	ldrh	r0, [r4, #0x1c]
	add	r1, r0, #0x1
	strh	r1, [r4, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	bne	.L516	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0xc]
	ldrb	r2, [r4, #0x1e]
	ldr	r1, .L517+0x4
	lsl	r3, r5, #0x6
	add	r1, r1, #0x38
	add	r3, r3, r1
	ldr	r1, [r3]
	str	r1, [sp]
	add	r1, r5, #0
	mov	r3, #0x0
	bl	sub_80F69B8
	ldrh	r0, [r4, #0x1e]
	mov	r1, #0x1
	eor	r0, r0, r1
	strh	r0, [r4, #0x1e]
.L516:
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L518:
	.align	2, 0
.L517:
	.word	gTasks
	.word	gContestMons
.Lfe50:
	.size	 sub_80F7824,.Lfe50-sub_80F7824
	.align	2, 0
	.type	 sub_80F7880,function
	.thumb_func
sub_80F7880:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L553
	ldrh	r2, [r0]
	add	r4, r0, #0
	add	r3, r4, #0x2
	mov	r0, #0x2
	mov	r8, r0
.L523:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x0
	ldrsh	r1, [r3, r5]
	cmp	r0, r1
	bge	.L522	@cond_branch
	ldrh	r2, [r3]
.L522:
	add	r3, r3, #0x2
	mov	r0, #0x1
	neg	r0, r0
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0
	bge	.L523	@cond_branch
	lsl	r0, r2, #0x10
	str	r0, [sp]
	cmp	r0, #0
	bge	.L526	@cond_branch
	ldrh	r2, [r4]
	add	r3, r4, #0x2
	mov	r4, #0x2
	mov	r8, r4
.L530:
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x10
	mov	r5, #0x0
	ldrsh	r1, [r3, r5]
	cmp	r0, r1
	ble	.L529	@cond_branch
	ldrh	r2, [r3]
.L529:
	add	r3, r3, #0x2
	mov	r0, #0x1
	neg	r0, r0
	add	r8, r8, r0
	lsl	r1, r2, #0x10
	str	r1, [sp]
	mov	r4, r8
	cmp	r4, #0
	bge	.L530	@cond_branch
.L526:
	mov	r5, #0x0
	mov	r8, r5
	mov	sl, r5
.L536:
	ldr	r0, .L553+0x4
	mov	r1, r8
	lsl	r7, r1, #0x1
	add	r0, r7, r0
	mov	r2, #0x0
	ldrsh	r1, [r0, r2]
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	ldr	r4, [sp]
	asr	r5, r4, #0x10
	add	r1, r5, #0
	cmp	r5, #0
	bge	.L537	@cond_branch
	neg	r1, r5
.L537:
	bl	__divsi3
	add	r4, r0, #0
	mov	r1, #0xa
	bl	__modsi3
	cmp	r0, #0x4
	ble	.L538	@cond_branch
	add	r4, r4, #0xa
.L538:
	ldr	r0, .L553+0x8
	mov	r9, r0
	ldr	r0, [r0]
	ldr	r0, [r0, #0x4]
	mov	r1, sl
	add	r6, r1, r0
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r6]
	ldr	r0, .L553+0xc
	add	r7, r7, r0
	mov	r2, #0x0
	ldrsh	r1, [r7, r2]
	cmp	r1, #0
	bge	.L539	@cond_branch
	neg	r1, r1
.L539:
	lsl	r0, r1, #0x5
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r1, r5, #0
	cmp	r1, #0
	bge	.L540	@cond_branch
	neg	r1, r1
.L540:
	bl	__divsi3
	add	r4, r0, #0
	mov	r1, #0xa
	bl	__modsi3
	cmp	r0, #0x4
	ble	.L541	@cond_branch
	add	r4, r4, #0xa
.L541:
	add	r0, r4, #0
	mov	r1, #0xa
	bl	__divsi3
	str	r0, [r6, #0x4]
	mov	r4, #0x0
	ldrsh	r0, [r7, r4]
	cmp	r0, #0
	bge	.L542	@cond_branch
	mov	r0, #0x1
	strb	r0, [r6, #0x10]
.L542:
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	mov	r1, sl
	add	r4, r1, r0
	ldr	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	sub	r0, r0, r1
	lsl	r0, r0, #0xb
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	mov	r5, #0xff
	and	r0, r0, r5
	cmp	r0, #0x7f
	bls	.L543	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r1, r1, r2
.L543:
	lsr	r0, r1, #0x8
	str	r0, [r4, #0x8]
	ldr	r1, [r4, #0x4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	sub	r0, r0, r1
	lsl	r0, r0, #0xb
	mov	r1, #0x64
	bl	__divsi3
	add	r1, r0, #0
	and	r0, r0, r5
	cmp	r0, #0x7f
	bls	.L544	@cond_branch
	mov	r5, #0x80
	lsl	r5, r5, #0x1
	add	r1, r1, r5
.L544:
	lsr	r0, r1, #0x8
	str	r0, [r4, #0xc]
	mov	r0, r8
	lsl	r4, r0, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_80F7310
	mov	r2, r9
	ldr	r1, [r2]
	ldr	r1, [r1, #0x4]
	add	r1, r1, sl
	strb	r0, [r1, #0x11]
	add	r0, r4, #0
	mov	r1, #0x1
	bl	sub_80F7364
	mov	r4, r9
	ldr	r1, [r4]
	ldr	r1, [r1, #0x4]
	add	r1, r1, sl
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	cmp	r0, #0
	bge	.L545	@cond_branch
	neg	r0, r0
.L545:
	strb	r0, [r1, #0x12]
	ldr	r0, .L553+0x10
	add	r0, r0, r8
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L535	@cond_branch
	mov	r5, r9
	ldr	r0, [r5]
	ldr	r0, [r0, #0x4]
	mov	r2, sl
	add	r1, r2, r0
	ldr	r5, [r1, #0x8]
	ldrh	r3, [r1, #0x8]
	ldr	r4, [r1, #0xc]
	ldrh	r2, [r1, #0xc]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0
	beq	.L547	@cond_branch
	lsl	r0, r2, #0x10
	neg	r0, r0
	lsr	r2, r0, #0x10
.L547:
	lsl	r0, r3, #0x10
	asr	r3, r0, #0x10
	lsl	r0, r2, #0x10
	asr	r2, r0, #0x10
	add	r0, r3, r2
	cmp	r0, #0x58
	bne	.L535	@cond_branch
	cmp	r2, #0
	ble	.L549	@cond_branch
	sub	r0, r4, #0x1
	str	r0, [r1, #0xc]
	b	.L535
.L554:
	.align	2, 0
.L553:
	.word	gUnknown_02039F08
	.word	gContestMonConditions
	.word	gUnknown_0203A034
	.word	gUnknown_02039F18
	.word	gContestFinalStandings
.L549:
	cmp	r3, #0
	ble	.L535	@cond_branch
	sub	r0, r5, #0x1
	str	r0, [r1, #0x8]
.L535:
	mov	r4, #0x14
	add	sl, sl, r4
	mov	r5, #0x1
	add	r8, r8, r5
	mov	r0, r8
	cmp	r0, #0x3
	bgt	.LCB5318
	b	.L536	@long jump
.LCB5318:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 sub_80F7880,.Lfe51-sub_80F7880
	.align	2, 0
	.type	 sub_80F7A80,function
	.thumb_func
sub_80F7A80:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r3, #0x0
	str	r3, [sp, #0xc]
	cmp	r0, #0
	bne	.L556	@cond_branch
	mov	r9, r3
	ldr	r4, .L581
	mov	sl, r4
	mov	r7, #0xa0
	lsl	r7, r7, #0x13
	mov	r6, #0x0
.L560:
	mov	r1, sl
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	add	r0, r6, r0
	ldrb	r2, [r0, #0x11]
	cmp	r8, r2
	bcs	.L559	@cond_branch
	add	r2, r2, #0x13
	mov	r3, r8
	sub	r2, r2, r3
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsr	r3, r7, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	ldr	r1, .L581+0x4
	bl	FillBgTilemapBufferRect_Palette0
	ldr	r0, .L581+0x8
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, sl
	ldr	r4, [r0]
	ldr	r1, [r4, #0x4]
	add	r1, r6, r1
	ldr	r0, [r1, #0x8]
	lsl	r0, r0, #0x10
	ldrb	r1, [r1, #0x11]
	bl	__udivsi3
	mov	r1, r8
	add	r1, r1, #0x1
	mov	r3, r0
	mul	r3, r3, r1
	ldr	r0, .L581+0xc
	and	r0, r0, r3
	ldr	r1, .L581+0x10
	cmp	r0, r1
	bls	.L562	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r3, r3, r1
.L562:
	ldr	r1, .L581+0x14
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, r9
	strh	r1, [r0, #0x8]
	lsr	r1, r3, #0x10
	strh	r1, [r0, #0xa]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L559:
	mov	r3, #0xc0
	lsl	r3, r3, #0x12
	add	r7, r7, r3
	add	r6, r6, #0x14
	mov	r4, #0x1
	add	r9, r9, r4
	mov	r0, r9
	cmp	r0, #0x3
	ble	.L560	@cond_branch
	b	.L564
.L582:
	.align	2, 0
.L581:
	.word	gUnknown_0203A034
	.word	0x60b3
	.word	sub_80F7CA8
	.word	0xffff
	.word	0x7fff
	.word	gTasks
.L556:
	mov	r1, #0x0
	mov	r9, r1
	mov	sl, r1
	mov	r3, #0xc0
	lsl	r3, r3, #0x13
	str	r3, [sp, #0x10]
.L568:
	ldr	r4, .L583
	ldr	r0, [r4]
	ldr	r0, [r0, #0x4]
	add	r0, r0, sl
	ldrb	r2, [r0, #0x12]
	ldrb	r0, [r0, #0x10]
	ldr	r1, .L583+0x4
	cmp	r0, #0
	beq	.L569	@cond_branch
	add	r1, r1, #0x2
.L569:
	lsl	r0, r2, #0x18
	asr	r0, r0, #0x18
	cmp	r8, r0
	bge	.L567	@cond_branch
	mov	r3, r8
	lsl	r2, r3, #0x18
	asr	r2, r2, #0x18
	sub	r2, r2, #0x13
	sub	r2, r0, r2
	sub	r2, r2, #0x1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldr	r4, [sp, #0x10]
	lsr	r3, r4, #0x18
	mov	r7, #0x1
	str	r7, [sp]
	str	r7, [sp, #0x4]
	mov	r0, #0x1
	bl	FillBgTilemapBufferRect_Palette0
	ldr	r0, .L583+0x8
	mov	r1, #0xa
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L583
	ldr	r6, [r0]
	ldr	r1, [r6, #0x4]
	add	r1, r1, sl
	ldr	r0, [r1, #0xc]
	lsl	r0, r0, #0x10
	ldrb	r1, [r1, #0x12]
	bl	__udivsi3
	mov	r1, r8
	add	r1, r1, #0x1
	mov	r3, r0
	mul	r3, r3, r1
	ldr	r0, .L583+0xc
	and	r0, r0, r3
	ldr	r1, .L583+0x10
	cmp	r0, r1
	bls	.L572	@cond_branch
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	add	r3, r3, r1
.L572:
	ldr	r1, .L583+0x14
	lsl	r2, r5, #0x2
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	mov	r0, r9
	strh	r0, [r4, #0x8]
	ldr	r0, [r6, #0x4]
	add	r0, r0, sl
	ldrb	r0, [r0, #0x10]
	add	r6, r1, #0
	cmp	r0, #0
	beq	.L573	@cond_branch
	strh	r7, [r4, #0xc]
	ldr	r0, [sp, #0xc]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	b	.L574
.L584:
	.align	2, 0
.L583:
	.word	gUnknown_0203A034
	.word	0x60a3
	.word	sub_80F7CA8
	.word	0xffff
	.word	0x7fff
	.word	gTasks
.L573:
	ldr	r0, [sp, #0x8]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
.L574:
	ldr	r1, .L585
	ldr	r0, [r1]
	ldr	r0, [r0, #0x4]
	mov	r4, sl
	add	r1, r4, r0
	ldrb	r0, [r1, #0x10]
	ldr	r4, .L585
	cmp	r0, #0
	beq	.L575	@cond_branch
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	lsr	r2, r3, #0x10
	ldr	r1, [r1, #0x8]
	sub	r1, r1, r2
	b	.L580
.L586:
	.align	2, 0
.L585:
	.word	gUnknown_0203A034
.L575:
	add	r0, r2, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r6
	lsr	r2, r3, #0x10
	ldr	r1, [r1, #0x8]
	add	r1, r1, r2
.L580:
	strh	r1, [r0, #0xa]
	ldr	r0, [r4]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x14]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x14]
.L567:
	mov	r0, #0x14
	add	sl, sl, r0
	ldr	r1, [sp, #0x10]
	mov	r3, #0xc0
	lsl	r3, r3, #0x12
	add	r1, r1, r3
	str	r1, [sp, #0x10]
	mov	r4, #0x1
	add	r9, r9, r4
	mov	r0, r9
	cmp	r0, #0x3
	bgt	.LCB5661
	b	.L568	@long jump
.LCB5661:
.L564:
	ldr	r1, [sp, #0xc]
	cmp	r1, #0
	beq	.L578	@cond_branch
	mov	r0, #0x16
	bl	PlaySE
.L578:
	ldr	r3, [sp, #0x8]
	cmp	r3, #0
	beq	.L579	@cond_branch
	mov	r0, #0x15
	bl	PlaySE
.L579:
	add	sp, sp, #0x14
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 sub_80F7A80,.Lfe52-sub_80F7A80
	.align	2, 0
	.globl	sub_80F7CA8
	.type	 sub_80F7CA8,function
	.thumb_func
sub_80F7CA8:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r4, #0x0
	mov	r9, r4
	ldr	r1, .L616
	lsl	r0, r0, #0x2
	add	r0, r0, r8
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r6, [r0, #0x8]
	ldrh	r7, [r0, #0xa]
	ldrh	r1, [r0, #0xc]
	mov	ip, r1
	mov	r2, #0xc
	ldrsh	r0, [r0, r2]
	cmp	r0, #0
	beq	.L588	@cond_branch
	ldr	r2, .L616+0x4
	ldr	r0, [r2]
	ldr	r0, [r0]
	lsl	r1, r6, #0x1
	add	r0, r0, #0xc
	add	r0, r0, r1
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	add	r5, r1, #0
	cmp	r0, #0
	bgt	.L590	@cond_branch
	b	.L613
.L617:
	.align	2, 0
.L616:
	.word	gTasks
	.word	gUnknown_0203A034
.L588:
	ldr	r2, .L618
	ldr	r0, [r2]
	ldr	r0, [r0]
	lsl	r1, r6, #0x1
	add	r0, r0, #0xc
	add	r0, r0, r1
	mov	r3, #0x0
	ldrsh	r0, [r0, r3]
	add	r5, r1, #0
	cmp	r0, #0x57
	ble	.L590	@cond_branch
.L613:
	mov	r4, #0x1
.L590:
	ldr	r0, [r2]
	ldr	r0, [r0]
	add	r0, r0, #0xc
	add	r2, r0, r5
	ldrh	r3, [r2]
	mov	r0, #0x0
	ldrsh	r1, [r2, r0]
	lsl	r0, r7, #0x10
	asr	r0, r0, #0x10
	cmp	r1, r0
	bne	.L592	@cond_branch
	mov	r1, #0x1
	mov	r9, r1
.L592:
	mov	r0, r9
	cmp	r0, #0
	bne	.L593	@cond_branch
	cmp	r4, #0
	beq	.L594	@cond_branch
	strh	r7, [r2]
	b	.L593
.L619:
	.align	2, 0
.L618:
	.word	gUnknown_0203A034
.L594:
	mov	r1, ip
	cmp	r1, #0
	beq	.L596	@cond_branch
	sub	r0, r3, #0x1
	b	.L614
.L596:
	add	r0, r3, #0x1
.L614:
	strh	r0, [r2]
.L593:
	cmp	r4, #0
	bne	.L598	@cond_branch
	mov	r2, r9
	cmp	r2, #0
	bne	.L612	@cond_branch
	mov	r2, #0x0
.L602:
	ldr	r0, .L620
	ldr	r0, [r0]
	ldr	r0, [r0]
	add	r0, r0, #0xc
	add	r0, r0, r5
	mov	r1, #0x0
	ldrsh	r3, [r0, r1]
	add	r0, r2, #0x1
	lsl	r1, r0, #0x3
	add	r4, r0, #0
	cmp	r3, r1
	blt	.L603	@cond_branch
	mov	r0, #0x8
	b	.L604
.L621:
	.align	2, 0
.L620:
	.word	gUnknown_0203A034
.L603:
	lsl	r0, r2, #0x3
	cmp	r3, r0
	blt	.L605	@cond_branch
	add	r0, r3, #0
	cmp	r3, #0
	bge	.L606	@cond_branch
	add	r0, r3, #0x7
.L606:
	asr	r0, r0, #0x3
	lsl	r0, r0, #0x3
	sub	r0, r3, r0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L604
.L605:
	mov	r0, #0x0
.L604:
	cmp	r0, #0x3
	bhi	.L608	@cond_branch
	ldr	r3, .L622
	b	.L615
.L623:
	.align	2, 0
.L622:
	.word	0x504c
.L608:
	ldr	r3, .L624
.L615:
	add	r1, r0, r3
	add	r2, r2, #0x7
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r3, r5, r6
	add	r3, r3, #0x6
	lsl	r3, r3, #0x18
	mov	r0, #0x1
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x2
	lsr	r3, r3, #0x18
	bl	FillBgTilemapBufferRect_Palette0
	add	r2, r4, #0
	cmp	r2, #0xa
	ble	.L602	@cond_branch
.L598:
	mov	r0, r9
	cmp	r0, #0
	beq	.L611	@cond_branch
.L612:
	ldr	r0, .L624+0x4
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x14]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	mov	r0, r8
	bl	DestroyTask
.L611:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L625:
	.align	2, 0
.L624:
	.word	0x5057
	.word	gUnknown_0203A034
.Lfe53:
	.size	 sub_80F7CA8,.Lfe53-sub_80F7CA8
	.align	2, 0
	.type	 sub_80F7DF4,function
	.thumb_func
sub_80F7DF4:
	push	{r4, r5, lr}
	ldr	r4, .L627
	mov	r0, #0x20
	bl	AllocZeroed
	str	r0, [r4]
	mov	r0, #0x18
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1]
	mov	r0, #0x50
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x4]
	mov	r5, #0x80
	lsl	r5, r5, #0x4
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x8]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0xc]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x10]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x14]
	add	r0, r5, #0
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x18]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	bl	AllocZeroed
	ldr	r1, [r4]
	str	r0, [r1, #0x1c]
	bl	AllocateMonSpritesGfx
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L628:
	.align	2, 0
.L627:
	.word	gUnknown_0203A034
.Lfe54:
	.size	 sub_80F7DF4,.Lfe54-sub_80F7DF4
	.align	2, 0
	.type	 sub_80F7E64,function
	.thumb_func
sub_80F7E64:
	push	{r4, r5, lr}
	ldr	r5, .L630
	ldr	r0, [r5]
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	mov	r4, #0x0
	str	r4, [r0]
	ldr	r0, [r0, #0x4]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x4]
	ldr	r0, [r0, #0x8]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x8]
	ldr	r0, [r0, #0xc]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0xc]
	ldr	r0, [r0, #0x10]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x10]
	ldr	r0, [r0, #0x14]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x14]
	ldr	r0, [r0, #0x18]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x18]
	ldr	r0, [r0, #0x1c]
	bl	Free
	ldr	r0, [r5]
	str	r4, [r0, #0x1c]
	bl	Free
	str	r4, [r5]
	bl	FreeMonSpritesGfx
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L631:
	.align	2, 0
.L630:
	.word	gUnknown_0203A034
.Lfe55:
	.size	 sub_80F7E64,.Lfe55-sub_80F7E64
	.align	2, 0
	.type	 sub_80F7ED0,function
	.thumb_func
sub_80F7ED0:
	push	{r4, lr}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	str	r1, [sp]
	mov	r0, sp
	mov	r3, #0x0
	strb	r4, [r0, #0x4]
	mov	r1, sp
	mov	r0, #0x7
	strb	r0, [r1, #0x5]
	mov	r0, sp
	strb	r2, [r0, #0x6]
	mov	r1, #0x2
	strb	r1, [r0, #0x7]
	strb	r2, [r0, #0x8]
	strb	r1, [r0, #0x9]
	strb	r3, [r0, #0xa]
	strb	r3, [r0, #0xb]
	mov	r3, sp
	ldrb	r2, [r3, #0xc]
	sub	r1, r1, #0x12
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r3, #0xc]
	mov	r2, sp
	mov	r0, #0x10
	strb	r0, [r2, #0xc]
	ldrb	r0, [r2, #0xd]
	and	r1, r1, r0
	strb	r1, [r2, #0xd]
	mov	r1, sp
	mov	r0, #0x80
	strb	r0, [r1, #0xd]
	mov	r0, sp
	mov	r1, #0x0
	mov	r2, #0x0
	bl	AddTextPrinter
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	sp, sp, #0x10
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe56:
	.size	 sub_80F7ED0,.Lfe56-sub_80F7ED0
	.align	2, 0
	.globl	TryEnterContestMon
	.type	 TryEnterContestMon,function
	.thumb_func
TryEnterContestMon:
	push	{r4, r5, lr}
	ldr	r0, .L635
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L635+0x4
	add	r0, r0, r1
	bl	GetContestEntryEligibility
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L634	@cond_branch
	ldr	r4, .L635+0x8
	ldrb	r0, [r4]
	ldr	r1, .L635+0xc
	ldrb	r1, [r1]
	bl	sub_80DAB8C
	ldrb	r0, [r4]
	bl	sub_80DB09C
.L634:
	ldr	r0, .L635+0x10
	strh	r5, [r0]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L636:
	.align	2, 0
.L635:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestCategory
	.word	gSpecialVar_ContestRank
	.word	gSpecialVar_Result
.Lfe57:
	.size	 TryEnterContestMon,.Lfe57-TryEnterContestMon
	.align	2, 0
	.globl	HasMonWonThisContestBefore
	.type	 HasMonWonThisContestBefore,function
	.thumb_func
HasMonWonThisContestBefore:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r0, .L652
	ldrb	r1, [r0]
	mov	r0, #0x64
	mul	r1, r1, r0
	ldr	r0, .L652+0x4
	add	r2, r1, r0
	ldr	r0, .L652+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bhi	.L638	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L652+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L653:
	.align	2, 0
.L652:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestCategory
	.word	.L649
	.align	2, 0
	.align	2, 0
.L649:
	.word	.L639
	.word	.L641
	.word	.L643
	.word	.L645
	.word	.L647
.L639:
	add	r0, r2, #0
	mov	r1, #0x32
	b	.L651
.L641:
	add	r0, r2, #0
	mov	r1, #0x33
	b	.L651
.L643:
	add	r0, r2, #0
	mov	r1, #0x34
	b	.L651
.L645:
	add	r0, r2, #0
	mov	r1, #0x35
	b	.L651
.L647:
	add	r0, r2, #0
	mov	r1, #0x36
.L651:
	bl	GetMonData
	ldr	r1, .L654
	ldrh	r1, [r1]
	cmp	r0, r1
	bls	.L638	@cond_branch
	mov	r4, #0x1
.L638:
	add	r0, r4, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L655:
	.align	2, 0
.L654:
	.word	gSpecialVar_ContestRank
.Lfe58:
	.size	 HasMonWonThisContestBefore,.Lfe58-HasMonWonThisContestBefore
	.align	2, 0
	.globl	GiveMonContestRibbon
	.type	 GiveMonContestRibbon,function
	.thumb_func
GiveMonContestRibbon:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L676
	ldr	r0, .L676+0x4
	ldrb	r0, [r0]
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.LCB6282
	b	.L656	@long jump
.LCB6282:
	ldr	r0, .L676+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x4
	bls	.LCB6287
	b	.L656	@long jump
.LCB6287:
	lsl	r0, r0, #0x2
	ldr	r1, .L676+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L677:
	.align	2, 0
.L676:
	.word	gContestFinalStandings
	.word	gContestPlayerMonIndex
	.word	gSpecialVar_ContestCategory
	.word	.L674
	.align	2, 0
	.align	2, 0
.L674:
	.word	.L659
	.word	.L662
	.word	.L665
	.word	.L668
	.word	.L671
.L659:
	ldr	r6, .L678
	ldrb	r0, [r6]
	mov	r5, #0x64
	mul	r0, r0, r5
	ldr	r4, .L678+0x4
	add	r0, r0, r4
	mov	r1, #0x32
	bl	GetMonData
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, sp
	strb	r1, [r0]
	ldr	r0, .L678+0x8
	ldrh	r0, [r0]
	cmp	r1, r0
	bls	.LCB6333
	b	.L656	@long jump
.LCB6333:
	add	r0, r1, #0
	cmp	r0, #0x3
	bls	.LCB6337
	b	.L656	@long jump
.LCB6337:
	add	r1, r0, #0x1
	mov	r0, sp
	strb	r1, [r0]
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x32
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.LCB6360
	b	.L656	@long jump
.LCB6360:
	ldrb	r0, [r6]
	mul	r0, r0, r5
	add	r0, r0, r4
	mov	r1, #0x32
	bl	TryPutSpotTheCutiesOnAir
	b	.L656
.L679:
	.align	2, 0
.L678:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.L662:
	mov	r4, sp
	ldr	r7, .L680
	ldrb	r0, [r7]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L680+0x4
	add	r0, r0, r5
	mov	r1, #0x33
	bl	GetMonData
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r2, [r0]
	ldr	r0, .L680+0x8
	ldrh	r0, [r0]
	cmp	r2, r0
	bls	.LCB6401
	b	.L656	@long jump
.LCB6401:
	cmp	r2, #0x3
	bls	.LCB6406
	b	.L656	@long jump
.LCB6406:
	mov	r1, sp
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x33
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bhi	.LCB6427
	b	.L656	@long jump
.LCB6427:
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x33
	bl	TryPutSpotTheCutiesOnAir
	b	.L656
.L681:
	.align	2, 0
.L680:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.L665:
	mov	r4, sp
	ldr	r7, .L682
	ldrb	r0, [r7]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L682+0x4
	add	r0, r0, r5
	mov	r1, #0x34
	bl	GetMonData
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r2, [r0]
	ldr	r0, .L682+0x8
	ldrh	r0, [r0]
	cmp	r2, r0
	bls	.LCB6468
	b	.L656	@long jump
.LCB6468:
	cmp	r2, #0x3
	bls	.LCB6473
	b	.L656	@long jump
.LCB6473:
	mov	r1, sp
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x34
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L656	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x34
	bl	TryPutSpotTheCutiesOnAir
	b	.L656
.L683:
	.align	2, 0
.L682:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.L668:
	mov	r4, sp
	ldr	r7, .L684
	ldrb	r0, [r7]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L684+0x4
	add	r0, r0, r5
	mov	r1, #0x35
	bl	GetMonData
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r2, [r0]
	ldr	r0, .L684+0x8
	ldrh	r0, [r0]
	cmp	r2, r0
	bhi	.L656	@cond_branch
	cmp	r2, #0x3
	bhi	.L656	@cond_branch
	mov	r1, sp
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x35
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L656	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x35
	bl	TryPutSpotTheCutiesOnAir
	b	.L656
.L685:
	.align	2, 0
.L684:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.L671:
	mov	r4, sp
	ldr	r7, .L686
	ldrb	r0, [r7]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L686+0x4
	add	r0, r0, r5
	mov	r1, #0x36
	bl	GetMonData
	strb	r0, [r4]
	mov	r0, sp
	ldrb	r2, [r0]
	ldr	r0, .L686+0x8
	ldrh	r0, [r0]
	cmp	r2, r0
	bhi	.L656	@cond_branch
	cmp	r2, #0x3
	bhi	.L656	@cond_branch
	mov	r1, sp
	add	r0, r2, #0x1
	strb	r0, [r1]
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x36
	mov	r2, sp
	bl	SetMonData
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	bl	GetRibbonCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x4
	bls	.L656	@cond_branch
	ldrb	r0, [r7]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x36
	bl	TryPutSpotTheCutiesOnAir
.L656:
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L687:
	.align	2, 0
.L686:
	.word	gContestMonPartyIndex
	.word	gPlayerParty
	.word	gSpecialVar_ContestRank
.Lfe59:
	.size	 GiveMonContestRibbon,.Lfe59-GiveMonContestRibbon
	.align	2, 0
	.globl	BufferContestantTrainerName
	.type	 BufferContestantTrainerName,function
	.thumb_func
BufferContestantTrainerName:
	push	{r4, lr}
	ldr	r4, .L689
	ldr	r0, .L689+0x4
	ldrh	r1, [r0]
	lsl	r1, r1, #0x6
	ldr	r0, .L689+0x8
	add	r1, r1, r0
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r4, #0
	bl	sub_81DB5AC
	pop	{r4}
	pop	{r0}
	bx	r0
.L690:
	.align	2, 0
.L689:
	.word	gStringVar1
	.word	gSpecialVar_0x8006
	.word	gContestMons+0xd
.Lfe60:
	.size	 BufferContestantTrainerName,.Lfe60-BufferContestantTrainerName
	.align	2, 0
	.globl	BufferContestantMonNickname
	.type	 BufferContestantMonNickname,function
	.thumb_func
BufferContestantMonNickname:
	push	{lr}
	ldr	r0, .L692
	ldr	r1, .L692+0x4
	ldrh	r1, [r1]
	lsl	r1, r1, #0x6
	ldr	r2, .L692+0x8
	add	r1, r1, r2
	bl	StringCopy
	pop	{r0}
	bx	r0
.L693:
	.align	2, 0
.L692:
	.word	gStringVar3
	.word	gSpecialVar_0x8006
	.word	gContestMons+0x2
.Lfe61:
	.size	 BufferContestantMonNickname,.Lfe61-BufferContestantMonNickname
	.align	2, 0
	.globl	GetContestMonConditionRanking
	.type	 GetContestMonConditionRanking,function
	.thumb_func
GetContestMonConditionRanking:
	push	{r4, r5, r6, lr}
	mov	r1, #0x0
	mov	r2, #0x0
	ldr	r5, .L701
	ldr	r4, .L701+0x4
	ldr	r0, .L701+0x8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r4
	mov	r6, #0x0
	ldrsh	r3, [r0, r6]
.L698:
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	mov	r6, #0x0
	ldrsh	r0, [r0, r6]
	cmp	r3, r0
	bge	.L697	@cond_branch
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
.L697:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bls	.L698	@cond_branch
	strh	r2, [r5]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L702:
	.align	2, 0
.L701:
	.word	gSpecialVar_0x8004
	.word	gContestMonConditions
	.word	gSpecialVar_0x8006
.Lfe62:
	.size	 GetContestMonConditionRanking,.Lfe62-GetContestMonConditionRanking
	.align	2, 0
	.globl	GetContestMonCondition
	.type	 GetContestMonCondition,function
	.thumb_func
GetContestMonCondition:
	ldr	r2, .L704
	ldr	r1, .L704+0x4
	ldr	r0, .L704+0x8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
	bx	lr
.L705:
	.align	2, 0
.L704:
	.word	gSpecialVar_0x8004
	.word	gContestMonConditions
	.word	gSpecialVar_0x8006
.Lfe63:
	.size	 GetContestMonCondition,.Lfe63-GetContestMonCondition
	.align	2, 0
	.globl	GetContestWinnerId
	.type	 GetContestWinnerId,function
	.thumb_func
GetContestWinnerId:
	push	{lr}
	mov	r1, #0x0
	ldr	r2, .L713
	ldrb	r0, [r2]
	ldr	r3, .L713+0x4
	cmp	r0, #0
	beq	.L708	@cond_branch
.L709:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bhi	.L708	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L709	@cond_branch
.L708:
	strh	r1, [r3]
	pop	{r0}
	bx	r0
.L714:
	.align	2, 0
.L713:
	.word	gContestFinalStandings
	.word	gSpecialVar_0x8005
.Lfe64:
	.size	 GetContestWinnerId,.Lfe64-GetContestWinnerId
	.align	2, 0
	.globl	BufferContestWinnerTrainerName
	.type	 BufferContestWinnerTrainerName,function
	.thumb_func
BufferContestWinnerTrainerName:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r2, .L722
	ldrb	r0, [r2]
	ldr	r4, .L722+0x4
	ldr	r3, .L722+0x8
	cmp	r0, #0
	beq	.L717	@cond_branch
.L718:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bhi	.L717	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L718	@cond_branch
.L717:
	lsl	r1, r1, #0x6
	add	r1, r1, r3
	add	r0, r4, #0
	bl	StringCopy
	add	r0, r4, #0
	bl	sub_81DB5AC
	pop	{r4}
	pop	{r0}
	bx	r0
.L723:
	.align	2, 0
.L722:
	.word	gContestFinalStandings
	.word	gStringVar3
	.word	gContestMons+0xd
.Lfe65:
	.size	 BufferContestWinnerTrainerName,.Lfe65-BufferContestWinnerTrainerName
	.align	2, 0
	.globl	BufferContestWinnerMonName
	.type	 BufferContestWinnerMonName,function
	.thumb_func
BufferContestWinnerMonName:
	push	{r4, lr}
	mov	r1, #0x0
	ldr	r2, .L731
	ldrb	r0, [r2]
	ldr	r4, .L731+0x4
	ldr	r3, .L731+0x8
	cmp	r0, #0
	beq	.L726	@cond_branch
.L727:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x3
	bhi	.L726	@cond_branch
	add	r0, r1, r2
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L727	@cond_branch
.L726:
	lsl	r1, r1, #0x6
	add	r1, r1, r3
	add	r0, r4, #0
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L732:
	.align	2, 0
.L731:
	.word	gContestFinalStandings
	.word	gStringVar1
	.word	gContestMons+0x2
.Lfe66:
	.size	 BufferContestWinnerMonName,.Lfe66-BufferContestWinnerMonName
	.align	2, 0
	.globl	CB2_SetStartContestCallback
	.type	 CB2_SetStartContestCallback,function
	.thumb_func
CB2_SetStartContestCallback:
	push	{lr}
	ldr	r0, .L734
	bl	SetMainCallback2
	pop	{r0}
	bx	r0
.L735:
	.align	2, 0
.L734:
	.word	CB2_StartContest
.Lfe67:
	.size	 CB2_SetStartContestCallback,.Lfe67-CB2_SetStartContestCallback
	.align	2, 0
	.type	 Task_StartContest,function
	.thumb_func
Task_StartContest:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L738
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L737	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
	ldr	r0, .L738+0x4
	bl	SetMainCallback2
.L737:
	pop	{r0}
	bx	r0
.L739:
	.align	2, 0
.L738:
	.word	gPaletteFade
	.word	CB2_SetStartContestCallback
.Lfe68:
	.size	 Task_StartContest,.Lfe68-Task_StartContest
	.align	2, 0
	.globl	StartContest
	.type	 StartContest,function
	.thumb_func
StartContest:
	push	{lr}
	add	sp, sp, #-0x4
	bl	ScriptContext2_Enable
	ldr	r0, .L741
	mov	r1, #0xa
	bl	CreateTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L742:
	.align	2, 0
.L741:
	.word	Task_StartContest
.Lfe69:
	.size	 StartContest,.Lfe69-StartContest
	.align	2, 0
	.globl	BufferContestantMonSpecies
	.type	 BufferContestantMonSpecies,function
	.thumb_func
BufferContestantMonSpecies:
	ldr	r2, .L744
	ldr	r1, .L744+0x4
	ldr	r0, .L744+0x8
	ldrh	r0, [r0]
	lsl	r0, r0, #0x6
	add	r0, r0, r1
	ldrh	r0, [r0]
	strh	r0, [r2]
	bx	lr
.L745:
	.align	2, 0
.L744:
	.word	gSpecialVar_0x8004
	.word	gContestMons
	.word	gSpecialVar_0x8006
.Lfe70:
	.size	 BufferContestantMonSpecies,.Lfe70-BufferContestantMonSpecies
	.align	2, 0
	.type	 sub_80F8458,function
	.thumb_func
sub_80F8458:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L748
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L747	@cond_branch
	add	r0, r2, #0
	bl	DestroyTask
	ldr	r0, .L748+0x4
	bl	SetMainCallback2
.L747:
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	gPaletteFade
	.word	sub_80F5B00
.Lfe71:
	.size	 sub_80F8458,.Lfe71-sub_80F8458
	.align	2, 0
	.globl	sub_80F8484
	.type	 sub_80F8484,function
	.thumb_func
sub_80F8484:
	push	{lr}
	add	sp, sp, #-0x4
	bl	ScriptContext2_Enable
	ldr	r0, .L751
	mov	r1, #0xa
	bl	CreateTask
	mov	r0, #0x1
	neg	r0, r0
	mov	r1, #0x0
	str	r1, [sp]
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L752:
	.align	2, 0
.L751:
	.word	sub_80F8458
.Lfe72:
	.size	 sub_80F8484,.Lfe72-sub_80F8484
	.align	2, 0
	.globl	GetContestPlayerId
	.type	 GetContestPlayerId,function
	.thumb_func
GetContestPlayerId:
	ldr	r0, .L754
	ldr	r1, .L754+0x4
	ldrb	r1, [r1]
	strh	r1, [r0]
	bx	lr
.L755:
	.align	2, 0
.L754:
	.word	gSpecialVar_0x8004
	.word	gContestPlayerMonIndex
.Lfe73:
	.size	 GetContestPlayerId,.Lfe73-GetContestPlayerId
	.align	2, 0
	.globl	sub_80F84C4
	.type	 sub_80F84C4,function
	.thumb_func
sub_80F84C4:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	bl	ScriptContext2_Enable
	ldr	r6, .L757
	add	r0, r6, #0
	mov	r1, #0x0
	bl	CreateTask
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r2, .L757+0x4
	add	r0, r4, #0
	add	r1, r6, #0
	bl	SetTaskFuncWithFollowupFunc
	ldr	r1, .L757+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x1a]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L758:
	.align	2, 0
.L757:
	.word	sub_80FC580
	.word	sub_80F8508
	.word	gTasks
.Lfe74:
	.size	 sub_80F84C4,.Lfe74-sub_80F84C4
	.align	2, 0
	.type	 sub_80F8508,function
	.thumb_func
sub_80F8508:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L762
	ldrb	r1, [r0]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L760	@cond_branch
	ldr	r0, .L762+0x4
	ldrb	r0, [r0]
	bl	sub_80DA8C8
	ldr	r1, .L762+0x8
	ldr	r2, .L762+0xc
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	b	.L761
.L763:
	.align	2, 0
.L762:
	.word	gLinkContestFlags
	.word	gContestMonPartyIndex
	.word	sub_80FC6BC
	.word	sub_80F8568
.L760:
	ldr	r0, .L764
	ldrb	r0, [r0]
	bl	sub_80DA8C8
	ldr	r1, .L764+0x4
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L764+0x8
	str	r1, [r0]
.L761:
	pop	{r4}
	pop	{r0}
	bx	r0
.L765:
	.align	2, 0
.L764:
	.word	gContestMonPartyIndex
	.word	gTasks
	.word	sub_81D9DE4
.Lfe75:
	.size	 sub_80F8508,.Lfe75-sub_80F8508
	.align	2, 0
	.type	 sub_80F8568,function
	.thumb_func
sub_80F8568:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L767
	ldr	r2, .L767+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L768:
	.align	2, 0
.L767:
	.word	sub_80FC804
	.word	sub_80F8584
.Lfe76:
	.size	 sub_80F8568,.Lfe76-sub_80F8568
	.align	2, 0
	.type	 sub_80F8584,function
	.thumb_func
sub_80F8584:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L770
	ldr	r2, .L770+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L771:
	.align	2, 0
.L770:
	.word	sub_80FCE48
	.word	sub_80F85A0
.Lfe77:
	.size	 sub_80F8584,.Lfe77-sub_80F8584
	.align	2, 0
	.type	 sub_80F85A0,function
	.thumb_func
sub_80F85A0:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L773
	ldr	r2, .L773+0x4
	bl	SetTaskFuncWithFollowupFunc
	pop	{r0}
	bx	r0
.L774:
	.align	2, 0
.L773:
	.word	sub_80FC894
	.word	sub_80F85BC
.Lfe78:
	.size	 sub_80F85A0,.Lfe78-sub_80F85A0
	.align	2, 0
	.type	 sub_80F85BC,function
	.thumb_func
sub_80F85BC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r3, #0x0
	ldr	r5, .L796
	mov	ip, r5
	ldr	r0, .L796+0x4
	mov	r9, r0
	add	r1, sp, #0x4
	mov	r8, r1
	ldrb	r0, [r5]
	cmp	r3, r0
	bcs	.L777	@cond_branch
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r4, r0, #0x3
	ldr	r7, .L796+0x8
.L779:
	mov	r1, sp
	add	r2, r1, r3
	add	r1, r3, #0x1
	lsl	r0, r1, #0x1
	add	r0, r0, r4
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r2]
	lsl	r1, r1, #0x18
	lsr	r3, r1, #0x18
	ldrb	r0, [r5]
	cmp	r3, r0
	bcc	.L779	@cond_branch
.L777:
	mov	r3, #0x0
	mov	r1, ip
	ldrb	r0, [r1]
	cmp	r3, r0
	bcs	.L782	@cond_branch
	add	r4, r0, #0
	mov	r2, sp
.L784:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcs	.L782	@cond_branch
	mov	r0, sp
	add	r1, r0, r3
	ldrb	r0, [r2]
	ldrb	r1, [r1]
	cmp	r0, r1
	beq	.L784	@cond_branch
.L782:
	mov	r1, ip
	ldrb	r1, [r1]
	cmp	r3, r1
	bne	.L788	@cond_branch
	mov	r0, #0x0
	b	.L795
.L797:
	.align	2, 0
.L796:
	.word	gNumLinkContestPlayers
	.word	gSpecialVar_0x8004
	.word	gTasks+0x8
.L788:
	mov	r0, #0x1
.L795:
	mov	r1, r9
	strh	r0, [r1]
	mov	r3, #0x0
	mov	r4, ip
	ldrb	r0, [r4]
	cmp	r3, r0
	bcs	.L791	@cond_branch
	mov	r5, r8
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r2, r0, #0x3
	ldr	r7, .L798
.L793:
	add	r1, r5, r3
	add	r0, r3, #0x5
	lsl	r0, r0, #0x1
	add	r0, r0, r2
	add	r0, r0, r7
	ldrh	r0, [r0]
	strb	r0, [r1]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldrb	r1, [r4]
	cmp	r3, r1
	bcc	.L793	@cond_branch
.L791:
	mov	r0, r8
	bl	sub_80F86E0
	ldr	r1, .L798+0x4
	strb	r0, [r1]
	ldr	r0, .L798+0x8
	ldrb	r0, [r0]
	bl	sub_80DB09C
	ldr	r1, .L798+0xc
	ldr	r2, .L798+0x10
	add	r0, r6, #0
	bl	SetTaskFuncWithFollowupFunc
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L799:
	.align	2, 0
.L798:
	.word	gTasks+0x8
	.word	gUnknown_02039F2B
	.word	gSpecialVar_ContestCategory
	.word	sub_80FCF40
	.word	sub_80F86B8
.Lfe79:
	.size	 sub_80F85BC,.Lfe79-sub_80F85BC
	.align	2, 0
	.type	 sub_80F86B8,function
	.thumb_func
sub_80F86B8:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x0
	bl	SortContestants
	ldr	r1, .L801
	ldr	r2, .L801+0x4
	add	r0, r4, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r4}
	pop	{r0}
	bx	r0
.L802:
	.align	2, 0
.L801:
	.word	sub_80FCFD0
	.word	sub_80F8714
.Lfe80:
	.size	 sub_80F86B8,.Lfe80-sub_80F86B8
	.align	2, 0
	.globl	sub_80F86E0
	.type	 sub_80F86E0,function
	.thumb_func
sub_80F86E0:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r4, #0x0
	mov	r2, #0x1
	ldr	r0, .L810
	ldrb	r0, [r0]
	cmp	r2, r0
	bge	.L805	@cond_branch
	add	r5, r0, #0
.L807:
	add	r0, r3, r4
	add	r1, r3, r2
	ldrb	r0, [r0]
	ldrb	r1, [r1]
	cmp	r0, r1
	bcs	.L806	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r4, r0, #0x18
.L806:
	add	r2, r2, #0x1
	cmp	r2, r5
	blt	.L807	@cond_branch
.L805:
	add	r0, r4, #0
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L811:
	.align	2, 0
.L810:
	.word	gNumLinkContestPlayers
.Lfe81:
	.size	 sub_80F86E0,.Lfe81-sub_80F86E0
	.align	2, 0
	.globl	sub_80F8714
	.type	 sub_80F8714,function
	.thumb_func
sub_80F8714:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L821
	ldrh	r0, [r0]
	cmp	r0, #0x1
	bne	.L813	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L815	@cond_branch
	ldr	r0, .L821+0x4
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L821+0x8
	str	r0, [r1]
	b	.L815
.L822:
	.align	2, 0
.L821:
	.word	gSpecialVar_0x8004
	.word	gTasks
	.word	sub_80F878C
.L813:
	ldr	r5, .L823
	mov	r4, #0x3
.L819:
	add	r0, r5, #0
	bl	StringGetEnd10
	add	r5, r5, #0x40
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L819	@cond_branch
	add	r0, r6, #0
	bl	DestroyTask
	ldr	r0, .L823+0x4
	ldr	r0, [r0]
	mov	r1, #0x4
	ldrsb	r1, [r0, r1]
	mov	r2, #0x5
	ldrsb	r2, [r0, r2]
	mov	r3, #0x1
	neg	r3, r3
	mov	r0, #0x0
	bl	SetDynamicWarp
	bl	ScriptContext2_Disable
	bl	EnableBothScriptContexts
.L815:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L824:
	.align	2, 0
.L823:
	.word	gContestMons+0x2
	.word	gSaveBlock1Ptr
.Lfe82:
	.size	 sub_80F8714,.Lfe82-sub_80F8714
	.align	2, 0
	.type	 sub_80F878C,function
	.thumb_func
sub_80F878C:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	sub_800AC34
	ldr	r1, .L826
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L826+0x4
	str	r1, [r0]
	pop	{r4}
	pop	{r0}
	bx	r0
.L827:
	.align	2, 0
.L826:
	.word	gTasks
	.word	sub_80F87B4
.Lfe83:
	.size	 sub_80F878C,.Lfe83-sub_80F878C
	.align	2, 0
	.type	 sub_80F87B4,function
	.thumb_func
sub_80F87B4:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	ldr	r0, .L830
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L829	@cond_branch
	add	r0, r1, #0
	bl	DestroyTask
	bl	ScriptContext2_Disable
	bl	EnableBothScriptContexts
.L829:
	pop	{r0}
	bx	r0
.L831:
	.align	2, 0
.L830:
	.word	gReceivedRemoteLinkPlayers
.Lfe84:
	.size	 sub_80F87B4,.Lfe84-sub_80F87B4
.text
	.align	2, 0

