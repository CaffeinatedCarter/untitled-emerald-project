@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gApprentices
	.section .rodata
	.align	2, 0
	.type	 gApprentices,object
	.size	 gApprentices,1408
gApprentices:
	.byte	0x5b
	.byte	0x91
	.byte	0x6b
	.byte	0x7b
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xc6
	.byte	0xbb
	.byte	0xc8
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xc6
	.byte	0xbb
	.byte	0xc3
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xbe
	.byte	0xbf
	.byte	0xc6
	.byte	0xc0
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xbd
	.byte	0xc6
	.byte	0xbb
	.byte	0xcf
	.byte	0xcd
	.byte	0xff
	.space	2
	.byte	0xce
	.byte	0xbf
	.byte	0xc9
	.byte	0xff
	.space	4
	.short	0xbdc9
	.byte	0x43
	.space	1
	.short	0x124
	.short	0x126
	.short	0x183
	.short	0x12c
	.short	0x133
	.short	0x12e
	.short	0x12f
	.short	0x7f
	.short	0xd6
	.short	0x182
	.byte	0x0
	.space	1
	.short	0x81d
	.short	0x143e
	.short	0xc00
	.short	0xa01
	.short	0x630
	.short	0x1444
	.space	2
	.byte	0x6b
	.byte	0x7b
	.byte	0x55
	.byte	0xff
	.space	4
	.byte	0xc6
	.byte	0xc3
	.byte	0xc9
	.byte	0xc8
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xc6
	.byte	0xc3
	.byte	0xc9
	.byte	0xc8
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xbd
	.byte	0xbb
	.byte	0xc3
	.byte	0xc9
	.byte	0xff
	.space	3
	.byte	0xc6
	.byte	0xcf
	.byte	0xbe
	.byte	0xd1
	.byte	0xc3
	.byte	0xc1
	.byte	0xff
	.space	1
	.byte	0xc6
	.byte	0xbf
	.byte	0xc9
	.byte	0xff
	.space	4
	.short	0xcf09
	.byte	0x2b
	.space	1
	.short	0x131
	.short	0x170
	.short	0xd5
	.short	0x152
	.short	0x141
	.short	0x150
	.short	0x11f
	.short	0x129
	.short	0x147
	.short	0x144
	.byte	0x1
	.space	1
	.short	0xc38
	.short	0xa01
	.short	0x630
	.short	0xa06
	.short	0x1020
	.short	0x2213
	.space	2
	.byte	0x59
	.byte	0x52
	.byte	0x8d
	.byte	0xff
	.space	4
	.byte	0xcd
	.byte	0xc9
	.byte	0xc8
	.byte	0xc8
	.byte	0xd3
	.byte	0xff
	.space	2
	.byte	0xc2
	.byte	0xbf
	.byte	0xcc
	.byte	0xd0
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xc0
	.byte	0xbf
	.byte	0xbe
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0xd1
	.byte	0xbf
	.byte	0xc8
	.byte	0xd4
	.byte	0xbf
	.byte	0xc6
	.byte	0xff
	.space	1
	.byte	0xcd
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xc3
	.byte	0xff
	.space	2
	.short	0x2e34
	.byte	0x26
	.space	1
	.short	0x121
	.short	0x11f
	.short	0x144
	.short	0x17c
	.short	0x17b
	.short	0x26
	.short	0x13d
	.short	0xd5
	.short	0x152
	.short	0x44
	.byte	0x2
	.space	1
	.short	0xa01
	.short	0x160a
	.short	0xe15
	.short	0x630
	.short	0xc3b
	.short	0xc04
	.space	2
	.byte	0x75
	.byte	0x77
	.byte	0xff
	.space	5
	.byte	0xc6
	.byte	0xbb
	.byte	0xd3
	.byte	0xc6
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xbb
	.byte	0xd3
	.byte	0xc6
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xcd
	.byte	0xce
	.byte	0xcc
	.byte	0xc3
	.byte	0xbe
	.byte	0xff
	.space	1
	.byte	0xcd
	.byte	0xc9
	.byte	0xc8
	.byte	0xc4
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xc9
	.byte	0xc6
	.byte	0xbb
	.byte	0xff
	.space	3
	.short	0x84ef
	.byte	0x47
	.space	1
	.short	0x170
	.short	0xb2
	.short	0x167
	.short	0x37
	.short	0x14e
	.short	0x41
	.short	0x18a
	.short	0x13a
	.short	0x160
	.short	0x11f
	.byte	0x3
	.space	1
	.short	0x100b
	.short	0x1e0f
	.short	0x1039
	.short	0x1421
	.short	0xc03
	.short	0xffff
	.space	2
	.byte	0x76
	.byte	0x53
	.byte	0x56
	.byte	0xff
	.space	4
	.byte	0xc7
	.byte	0xbb
	.byte	0xbd
	.byte	0xd3
	.byte	0xff
	.space	3
	.byte	0xbb
	.byte	0xc7
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xbd
	.byte	0xc6
	.byte	0xbf
	.byte	0xc9
	.byte	0xff
	.space	3
	.byte	0xc7
	.byte	0xbb
	.byte	0xcc
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xcd
	.byte	0xbb
	.byte	0xff
	.space	2
	.short	0x1e43
	.byte	0x27
	.space	1
	.short	0x28
	.short	0x121
	.short	0xe6
	.short	0x13c
	.short	0x1a
	.short	0x16
	.short	0x79
	.short	0x165
	.short	0x12c
	.short	0x124
	.byte	0x4
	.space	1
	.short	0x1e0f
	.short	0x1014
	.short	0x1006
	.short	0x280f
	.short	0x1c1c
	.short	0x1c13
	.space	2
	.byte	0x74
	.byte	0x5d
	.byte	0x5c
	.byte	0xff
	.space	4
	.byte	0xbe
	.byte	0xc9
	.byte	0xc8
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbc
	.byte	0xcc
	.byte	0xbb
	.byte	0xc2
	.byte	0xc3
	.byte	0xc7
	.byte	0xff
	.space	1
	.byte	0xc1
	.byte	0xc6
	.byte	0xbb
	.byte	0xcf
	.byte	0xbd
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xc4
	.byte	0xc9
	.byte	0xcd
	.byte	0xbf
	.byte	0xc0
	.byte	0xff
	.space	2
	.byte	0xcc
	.byte	0xc9
	.byte	0xcb
	.byte	0xcf
	.byte	0xbf
	.byte	0xff
	.space	2
	.short	0x379f
	.byte	0x30
	.space	1
	.short	0x79
	.short	0x55
	.short	0x180
	.short	0x52
	.short	0x44
	.short	0x187
	.short	0xd6
	.short	0x140
	.short	0x174
	.short	0x11f
	.byte	0x5
	.space	1
	.short	0xa29
	.short	0x1408
	.short	0x102f
	.short	0x1638
	.short	0x820
	.short	0xc00
	.space	2
	.byte	0x70
	.byte	0x5b
	.byte	0x55
	.byte	0xff
	.space	4
	.byte	0xbb
	.byte	0xc7
	.byte	0xc3
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xbb
	.byte	0xcf
	.byte	0xcc
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbe
	.byte	0xbb
	.byte	0xc0
	.byte	0xc8
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xc7
	.byte	0xbf
	.byte	0xc6
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xc6
	.byte	0xbb
	.byte	0xcc
	.byte	0xbb
	.byte	0xff
	.space	3
	.short	0xf555
	.byte	0x31
	.space	1
	.short	0x79
	.short	0x55
	.short	0x52
	.short	0x165
	.short	0x11f
	.short	0x15b
	.short	0x4c
	.short	0x65
	.short	0x136
	.short	0x14b
	.byte	0x6
	.space	1
	.short	0xc0b
	.short	0x123e
	.short	0xc00
	.short	0xa31
	.short	0x1430
	.short	0xc00
	.space	2
	.byte	0x56
	.byte	0x8e
	.byte	0x5b
	.byte	0xff
	.space	4
	.byte	0xc5
	.byte	0xbb
	.byte	0xc6
	.byte	0xc3
	.byte	0xff
	.space	3
	.byte	0xc4
	.byte	0xc9
	.byte	0xbe
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xc3
	.byte	0xc6
	.byte	0xbf
	.byte	0xc8
	.byte	0xc3
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0xc5
	.byte	0xbb
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	3
	.byte	0xbf
	.byte	0xc6
	.byte	0xcd
	.byte	0xbb
	.byte	0xff
	.space	3
	.short	0x8d26
	.byte	0x14
	.space	1
	.short	0x26
	.short	0x41
	.short	0x117
	.short	0x18d
	.short	0x37
	.short	0x163
	.short	0x6e
	.short	0xab
	.short	0x18a
	.short	0x149
	.byte	0x7
	.space	1
	.short	0xa06
	.short	0x620
	.short	0xa1f
	.short	0xa02
	.short	0xc03
	.short	0xffff
	.space	2
	.byte	0x5d
	.byte	0x70
	.byte	0x7a
	.byte	0xff
	.space	4
	.byte	0xbb
	.byte	0xc8
	.byte	0xc8
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xc8
	.byte	0xc8
	.byte	0xc3
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xc3
	.byte	0xc7
	.byte	0xbf
	.byte	0xc6
	.byte	0xbe
	.byte	0xbb
	.byte	0xff
	.space	1
	.byte	0xc3
	.byte	0xc8
	.byte	0xbf
	.byte	0xcd
	.byte	0xff
	.space	3
	.byte	0xcc
	.byte	0xc9
	.byte	0xcd
	.byte	0xbb
	.byte	0xff
	.space	3
	.short	0x800c
	.byte	0xd
	.space	1
	.short	0x117
	.short	0x2d
	.short	0xb6
	.short	0x16b
	.short	0xde
	.short	0x14e
	.short	0x133
	.short	0x149
	.short	0x167
	.short	0x185
	.byte	0x8
	.space	1
	.short	0x1e22
	.short	0x433
	.short	0x20e
	.short	0xa02
	.short	0x101e
	.short	0xc00
	.space	2
	.byte	0x51
	.byte	0x57
	.byte	0x69
	.byte	0x78
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xc3
	.byte	0xc6
	.byte	0xc6
	.byte	0xbf
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0xcc
	.byte	0xbf
	.byte	0xc8
	.byte	0xbf
	.byte	0xff
	.space	3
	.byte	0xc3
	.byte	0xc8
	.byte	0xbe
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0xbe
	.byte	0xbf
	.byte	0xce
	.byte	0xc6
	.byte	0xbf
	.byte	0xc0
	.byte	0xff
	.space	1
	.byte	0xca
	.byte	0xbf
	.byte	0xbe
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	2
	.short	0x469f
	.byte	0x0
	.space	1
	.short	0xe3
	.short	0x4c
	.short	0x11a
	.short	0x154
	.short	0xe8
	.short	0x59
	.short	0x18d
	.short	0x171
	.short	0x15d
	.short	0x70
	.byte	0x9
	.space	1
	.short	0xa3d
	.short	0x1011
	.short	0xe1e
	.short	0x201c
	.short	0xc04
	.short	0xffff
	.space	2
	.byte	0x64
	.byte	0x53
	.byte	0x90
	.byte	0x53
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xbb
	.byte	0xc6
	.byte	0xc6
	.byte	0xbb
	.byte	0xcd
	.byte	0xff
	.space	1
	.byte	0xbc
	.byte	0xcc
	.byte	0xcf
	.byte	0xc8
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xbf
	.byte	0xbb
	.byte	0xcc
	.byte	0xbd
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xbb
	.byte	0xc8
	.byte	0xcd
	.byte	0xc1
	.byte	0xbb
	.byte	0xcc
	.byte	0xff
	.space	1
	.byte	0xc7
	.byte	0xbb
	.byte	0xc8
	.byte	0xc9
	.byte	0xc6
	.byte	0xc9
	.byte	0xff
	.space	1
	.short	0x71fc
	.byte	0x2d
	.space	1
	.short	0x77
	.short	0x79
	.short	0x37
	.short	0x49
	.short	0xe0
	.short	0x177
	.short	0x15b
	.short	0x13a
	.short	0x14b
	.short	0xe6
	.byte	0xa
	.space	1
	.short	0xa05
	.short	0x606
	.short	0x160e
	.short	0xa14
	.short	0xc00
	.short	0xffff
	.space	2
	.byte	0x5e
	.byte	0x52
	.byte	0x74
	.byte	0xff
	.space	4
	.byte	0xc0
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xc5
	.byte	0xff
	.space	2
	.byte	0xc0
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xc5
	.byte	0xff
	.space	2
	.byte	0xc9
	.byte	0xc6
	.byte	0xc3
	.byte	0xc8
	.byte	0xbe
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xc0
	.byte	0xcc
	.byte	0xbb
	.byte	0xc8
	.byte	0xc5
	.byte	0xff
	.space	2
	.byte	0xc7
	.byte	0xbb
	.byte	0xcf
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	2
	.short	0xa39e
	.byte	0x3a
	.space	1
	.short	0xc3
	.short	0x79
	.short	0x136
	.short	0x147
	.short	0x13a
	.short	0x82
	.short	0x11d
	.short	0xab
	.short	0x144
	.short	0xd5
	.byte	0xb
	.space	1
	.short	0x280e
	.short	0x103d
	.short	0x240f
	.short	0xa14
	.short	0x1e23
	.short	0x1024
	.space	2
	.byte	0x78
	.byte	0x85
	.byte	0x53
	.byte	0x8d
	.byte	0xff
	.space	3
	.byte	0xc6
	.byte	0xbb
	.byte	0xc7
	.byte	0xc9
	.byte	0xc8
	.byte	0xce
	.byte	0xff
	.space	1
	.byte	0xd2
	.byte	0xbb
	.byte	0xd0
	.byte	0xff
	.space	4
	.byte	0xc9
	.byte	0xcc
	.byte	0xc0
	.byte	0xbf
	.byte	0xc9
	.byte	0xff
	.space	2
	.byte	0xc4
	.byte	0xf3
	.byte	0xcc
	.byte	0xc1
	.byte	0xbf
	.byte	0xc8
	.byte	0xff
	.space	1
	.byte	0xc4
	.byte	0xc9
	.byte	0xcc
	.byte	0xc1
	.byte	0xbf
	.byte	0xff
	.space	2
	.short	0xe590
	.byte	0x19
	.space	1
	.short	0x178
	.short	0xa9
	.short	0x174
	.short	0x52
	.short	0x14b
	.short	0x152
	.short	0x190
	.short	0x65
	.short	0x140
	.short	0x6e
	.byte	0xc
	.space	1
	.short	0x1020
	.short	0x62e
	.short	0x100b
	.short	0x1e22
	.short	0x1e0f
	.short	0x100b
	.space	2
	.byte	0x56
	.byte	0x62
	.byte	0x51
	.byte	0x57
	.byte	0xff
	.space	3
	.byte	0xce
	.byte	0xd3
	.byte	0xcc
	.byte	0xbf
	.byte	0xcd
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xbb
	.byte	0xc8
	.byte	0xbe
	.byte	0xd3
	.byte	0xff
	.space	3
	.byte	0xca
	.byte	0xbb
	.byte	0xcc
	.byte	0xc3
	.byte	0xbe
	.byte	0xbf
	.byte	0xff
	.space	1
	.byte	0xbe
	.byte	0xbb
	.byte	0xd0
	.byte	0xc3
	.byte	0xbe
	.byte	0xff
	.space	2
	.byte	0xbd
	.byte	0xc2
	.byte	0xc3
	.byte	0xbd
	.byte	0xc2
	.byte	0xc9
	.byte	0xff
	.space	1
	.short	0xd018
	.byte	0xa
	.space	1
	.short	0x11a
	.short	0x4c
	.short	0x44
	.short	0x70
	.short	0x150
	.short	0x180
	.short	0x165
	.short	0x17c
	.short	0x16d
	.short	0x16e
	.byte	0xd
	.space	1
	.short	0xa29
	.short	0x63a
	.short	0xe15
	.short	0x1435
	.short	0x1034
	.short	0x61e
	.space	2
	.byte	0x64
	.byte	0x5c
	.byte	0x70
	.byte	0x62
	.byte	0xff
	.space	3
	.byte	0xbe
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xbe
	.byte	0xbb
	.byte	0xc8
	.byte	0xce
	.byte	0xbf
	.byte	0xff
	.space	2
	.byte	0xcc
	.byte	0xbb
	.byte	0xc9
	.byte	0xcf
	.byte	0xc6
	.byte	0xff
	.space	2
	.byte	0xc6
	.byte	0xc9
	.byte	0xce
	.byte	0xc2
	.byte	0xbb
	.byte	0xcc
	.byte	0xff
	.space	1
	.byte	0xca
	.byte	0xbb
	.byte	0xbc
	.byte	0xc6
	.byte	0xc9
	.byte	0xff
	.space	2
	.short	0xbc75
	.byte	0xe
	.space	1
	.short	0x117
	.short	0x1c
	.short	0x14e
	.short	0x13f
	.short	0x187
	.short	0xa9
	.short	0x185
	.short	0x15d
	.short	0x15c
	.short	0x4c
	.byte	0xe
	.space	1
	.short	0xa01
	.short	0x1017
	.short	0x1243
	.short	0x1e22
	.short	0x100b
	.short	0x280f
	.space	2
	.byte	0x7b
	.byte	0xae
	.byte	0x53
	.byte	0x82
	.byte	0x7e
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xcc
	.byte	0xce
	.byte	0xcf
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xbb
	.byte	0xcc
	.byte	0xce
	.byte	0xcf
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xcc
	.byte	0xc9
	.byte	0xc7
	.byte	0xc9
	.byte	0xc6
	.byte	0xc9
	.byte	0xff
	.space	1
	.byte	0xbc
	.byte	0xcc
	.byte	0xc3
	.byte	0xbb
	.byte	0xc8
	.byte	0xff
	.space	2
	.byte	0xbb
	.byte	0xcc
	.byte	0xce
	.byte	0xcf
	.byte	0xcc
	.byte	0xc9
	.byte	0xff
	.space	1
	.short	0xfa02
	.byte	0x20
	.space	1
	.short	0x178
	.short	0x11f
	.short	0x41
	.short	0x17a
	.short	0x26
	.short	0x13f
	.short	0x59
	.short	0x18d
	.short	0x157
	.short	0x16a
	.byte	0xf
	.space	1
	.short	0x1e0f
	.short	0x1404
	.short	0x102f
	.short	0x1006
	.short	0x1020
	.short	0xe03
	.space	2
	.align	2, 0
	.type	 sApprenticeFirstMeetingTexts,object
	.size	 sApprenticeFirstMeetingTexts,256
sApprenticeFirstMeetingTexts:
	.word	gText_ApprenticePleaseTeach0
	.word	gText_ApprenticeRejectTeaching0
	.word	gText_ApprenticeWhichLevelMode0
	.word	gText_ApprenticeLevelModeThanks0
	.word	gText_ApprenticePleaseTeach1
	.word	gText_ApprenticeRejectTeaching1
	.word	gText_ApprenticeWhichLevelMode1
	.word	gText_ApprenticeLevelModeThanks1
	.word	gText_ApprenticePleaseTeach2
	.word	gText_ApprenticeRejectTeaching2
	.word	gText_ApprenticeWhichLevelMode2
	.word	gText_ApprenticeLevelModeThanks2
	.word	gText_ApprenticePleaseTeach3
	.word	gText_ApprenticeRejectTeaching3
	.word	gText_ApprenticeWhichLevelMode3
	.word	gText_ApprenticeLevelModeThanks3
	.word	gText_ApprenticePleaseTeach4
	.word	gText_ApprenticeRejectTeaching4
	.word	gText_ApprenticeWhichLevelMode4
	.word	gText_ApprenticeLevelModeThanks4
	.word	gText_ApprenticePleaseTeach5
	.word	gText_ApprenticeRejectTeaching5
	.word	gText_ApprenticeWhichLevelMode5
	.word	gText_ApprenticeLevelModeThanks5
	.word	gText_ApprenticePleaseTeach6
	.word	gText_ApprenticeRejectTeaching6
	.word	gText_ApprenticeWhichLevelMode6
	.word	gText_ApprenticeLevelModeThanks6
	.word	gText_ApprenticePleaseTeach7
	.word	gText_ApprenticeRejectTeaching7
	.word	gText_ApprenticeWhichLevelMode7
	.word	gText_ApprenticeLevelModeThanks7
	.word	gText_ApprenticePleaseTeach8
	.word	gText_ApprenticeRejectTeaching8
	.word	gText_ApprenticeWhichLevelMode8
	.word	gText_ApprenticeLevelModeThanks8
	.word	gText_ApprenticePleaseTeach9
	.word	gText_ApprenticeRejectTeaching9
	.word	gText_ApprenticeWhichLevelMode9
	.word	gText_ApprenticeLevelModeThanks9
	.word	gText_ApprenticePleaseTeach10
	.word	gText_ApprenticeRejectTeaching10
	.word	gText_ApprenticeWhichLevelMode10
	.word	gText_ApprenticeLevelModeThanks10
	.word	gText_ApprenticePleaseTeach11
	.word	gText_ApprenticeRejectTeaching11
	.word	gText_ApprenticeWhichLevelMode11
	.word	gText_ApprenticeLevelModeThanks11
	.word	gText_ApprenticePleaseTeach12
	.word	gText_ApprenticeRejectTeaching12
	.word	gText_ApprenticeWhichLevelMode12
	.word	gText_ApprenticeLevelModeThanks12
	.word	gText_ApprenticePleaseTeach13
	.word	gText_ApprenticeRejectTeaching13
	.word	gText_ApprenticeWhichLevelMode13
	.word	gText_ApprenticeLevelModeThanks13
	.word	gText_ApprenticePleaseTeach14
	.word	gText_ApprenticeRejectTeaching14
	.word	gText_ApprenticeWhichLevelMode14
	.word	gText_ApprenticeLevelModeThanks14
	.word	gText_ApprenticePleaseTeach15
	.word	gText_ApprenticeRejectTeaching15
	.word	gText_ApprenticeWhichLevelMode15
	.word	gText_ApprenticeLevelModeThanks15
	.align	2, 0
	.type	 sApprenticeWhichMonTexts,object
	.size	 sApprenticeWhichMonTexts,128
sApprenticeWhichMonTexts:
	.word	gText_ApprenticeWhichMon0
	.word	gText_ApprenticeMonThanks0
	.word	gText_ApprenticeWhichMon1
	.word	gText_ApprenticeMonThanks1
	.word	gText_ApprenticeWhichMon2
	.word	gText_ApprenticeMonThanks2
	.word	gText_ApprenticeWhichMon3
	.word	gText_ApprenticeMonThanks3
	.word	gText_ApprenticeWhichMon4
	.word	gText_ApprenticeMonThanks4
	.word	gText_ApprenticeWhichMon5
	.word	gText_ApprenticeMonThanks5
	.word	gText_ApprenticeWhichMon6
	.word	gText_ApprenticeMonThanks6
	.word	gText_ApprenticeWhichMon7
	.word	gText_ApprenticeMonThanks7
	.word	gText_ApprenticeWhichMon8
	.word	gText_ApprenticeMonThanks8
	.word	gText_ApprenticeWhichMon9
	.word	gText_ApprenticeMonThanks9
	.word	gText_ApprenticeWhichMon10
	.word	gText_ApprenticeMonThanks10
	.word	gText_ApprenticeWhichMon11
	.word	gText_ApprenticeMonThanks11
	.word	gText_ApprenticeWhichMon12
	.word	gText_ApprenticeMonThanks12
	.word	gText_ApprenticeWhichMon13
	.word	gText_ApprenticeMonThanks13
	.word	gText_ApprenticeWhichMon14
	.word	gText_ApprenticeMonThanks14
	.word	gText_ApprenticeWhichMon15
	.word	gText_ApprenticeMonThanks15
	.align	2, 0
	.type	 sApprenticeHeldItemTexts,object
	.size	 sApprenticeHeldItemTexts,320
sApprenticeHeldItemTexts:
	.word	gText_ApprenticeWhatHeldItem0
	.word	gText_ApprenticeHoldNothing0
	.word	gText_ApprenticeThanksNoHeldItem0
	.word	gText_ApprenticeThanksHeldItem0
	.word	gText_ApprenticeItemAlreadyRecommended0
	.word	gText_ApprenticeWhatHeldItem1
	.word	gText_ApprenticeHoldNothing1
	.word	gText_ApprenticeThanksNoHeldItem1
	.word	gText_ApprenticeThanksHeldItem1
	.word	gText_ApprenticeItemAlreadyRecommended1
	.word	gText_ApprenticeWhatHeldItem2
	.word	gText_ApprenticeHoldNothing2
	.word	gText_ApprenticeThanksNoHeldItem2
	.word	gText_ApprenticeThanksHeldItem2
	.word	gText_ApprenticeItemAlreadyRecommended2
	.word	gText_ApprenticeWhatHeldItem3
	.word	gText_ApprenticeHoldNothing3
	.word	gText_ApprenticeThanksNoHeldItem3
	.word	gText_ApprenticeThanksHeldItem3
	.word	gText_ApprenticeItemAlreadyRecommended3
	.word	gText_ApprenticeWhatHeldItem4
	.word	gText_ApprenticeHoldNothing4
	.word	gText_ApprenticeThanksNoHeldItem4
	.word	gText_ApprenticeThanksHeldItem4
	.word	gText_ApprenticeItemAlreadyRecommended4
	.word	gText_ApprenticeWhatHeldItem5
	.word	gText_ApprenticeHoldNothing5
	.word	gText_ApprenticeThanksNoHeldItem5
	.word	gText_ApprenticeThanksHeldItem5
	.word	gText_ApprenticeItemAlreadyRecommended5
	.word	gText_ApprenticeWhatHeldItem6
	.word	gText_ApprenticeHoldNothing6
	.word	gText_ApprenticeThanksNoHeldItem6
	.word	gText_ApprenticeThanksHeldItem6
	.word	gText_ApprenticeItemAlreadyRecommended6
	.word	gText_ApprenticeWhatHeldItem7
	.word	gText_ApprenticeHoldNothing7
	.word	gText_ApprenticeThanksNoHeldItem7
	.word	gText_ApprenticeThanksHeldItem7
	.word	gText_ApprenticeItemAlreadyRecommended7
	.word	gText_ApprenticeWhatHeldItem8
	.word	gText_ApprenticeHoldNothing8
	.word	gText_ApprenticeThanksNoHeldItem8
	.word	gText_ApprenticeThanksHeldItem8
	.word	gText_ApprenticeItemAlreadyRecommended8
	.word	gText_ApprenticeWhatHeldItem9
	.word	gText_ApprenticeHoldNothing9
	.word	gText_ApprenticeThanksNoHeldItem9
	.word	gText_ApprenticeThanksHeldItem9
	.word	gText_ApprenticeItemAlreadyRecommended9
	.word	gText_ApprenticeWhatHeldItem10
	.word	gText_ApprenticeHoldNothing10
	.word	gText_ApprenticeThanksNoHeldItem10
	.word	gText_ApprenticeThanksHeldItem10
	.word	gText_ApprenticeItemAlreadyRecommended10
	.word	gText_ApprenticeWhatHeldItem11
	.word	gText_ApprenticeHoldNothing11
	.word	gText_ApprenticeThanksNoHeldItem11
	.word	gText_ApprenticeThanksHeldItem11
	.word	gText_ApprenticeItemAlreadyRecommended11
	.word	gText_ApprenticeWhatHeldItem12
	.word	gText_ApprenticeHoldNothing12
	.word	gText_ApprenticeThanksNoHeldItem12
	.word	gText_ApprenticeThanksHeldItem12
	.word	gText_ApprenticeItemAlreadyRecommended12
	.word	gText_ApprenticeWhatHeldItem13
	.word	gText_ApprenticeHoldNothing13
	.word	gText_ApprenticeThanksNoHeldItem13
	.word	gText_ApprenticeThanksHeldItem13
	.word	gText_ApprenticeItemAlreadyRecommended13
	.word	gText_ApprenticeWhatHeldItem14
	.word	gText_ApprenticeHoldNothing14
	.word	gText_ApprenticeThanksNoHeldItem14
	.word	gText_ApprenticeThanksHeldItem14
	.word	gText_ApprenticeItemAlreadyRecommended14
	.word	gText_ApprenticeWhatHeldItem15
	.word	gText_ApprenticeHoldNothing15
	.word	gText_ApprenticeThanksNoHeldItem15
	.word	gText_ApprenticeThanksHeldItem15
	.word	gText_ApprenticeItemAlreadyRecommended15
	.align	2, 0
	.type	 sApprenticeWhichMoveTexts,object
	.size	 sApprenticeWhichMoveTexts,128
sApprenticeWhichMoveTexts:
	.word	gText_ApprenticeWhichMove0
	.word	gText_ApprenticeMoveThanks0
	.word	gText_ApprenticeWhichMove1
	.word	gText_ApprenticeMoveThanks1
	.word	gText_ApprenticeWhichMove2
	.word	gText_ApprenticeMoveThanks2
	.word	gText_ApprenticeWhichMove3
	.word	gText_ApprenticeMoveThanks3
	.word	gText_ApprenticeWhichMove4
	.word	gText_ApprenticeMoveThanks4
	.word	gText_ApprenticeWhichMove5
	.word	gText_ApprenticeMoveThanks5
	.word	gText_ApprenticeWhichMove6
	.word	gText_ApprenticeMoveThanks6
	.word	gText_ApprenticeWhichMove7
	.word	gText_ApprenticeMoveThanks7
	.word	gText_ApprenticeWhichMove8
	.word	gText_ApprenticeMoveThanks8
	.word	gText_ApprenticeWhichMove9
	.word	gText_ApprenticeMoveThanks9
	.word	gText_ApprenticeWhichMove10
	.word	gText_ApprenticeMoveThanks10
	.word	gText_ApprenticeWhichMove11
	.word	gText_ApprenticeMoveThanks11
	.word	gText_ApprenticeWhichMove12
	.word	gText_ApprenticeMoveThanks12
	.word	gText_ApprenticeWhichMove13
	.word	gText_ApprenticeMoveThanks13
	.word	gText_ApprenticeWhichMove14
	.word	gText_ApprenticeMoveThanks14
	.word	gText_ApprenticeWhichMove15
	.word	gText_ApprenticeMoveThanks15
	.align	2, 0
	.type	 sApprenticeWhichMonFirstTexts,object
	.size	 sApprenticeWhichMonFirstTexts,128
sApprenticeWhichMonFirstTexts:
	.word	gText_ApprenticeWhichMonFirst0
	.word	gText_ApprenticeMonFirstThanks0
	.word	gText_ApprenticeWhichMonFirst1
	.word	gText_ApprenticeMonFirstThanks1
	.word	gText_ApprenticeWhichMonFirst2
	.word	gText_ApprenticeMonFirstThanks2
	.word	gText_ApprenticeWhichMonFirst3
	.word	gText_ApprenticeMonFirstThanks3
	.word	gText_ApprenticeWhichMonFirst4
	.word	gText_ApprenticeMonFirstThanks4
	.word	gText_ApprenticeWhichMonFirst5
	.word	gText_ApprenticeMonFirstThanks5
	.word	gText_ApprenticeWhichMonFirst6
	.word	gText_ApprenticeMonFirstThanks6
	.word	gText_ApprenticeWhichMonFirst7
	.word	gText_ApprenticeMonFirstThanks7
	.word	gText_ApprenticeWhichMonFirst8
	.word	gText_ApprenticeMonFirstThanks8
	.word	gText_ApprenticeWhichMonFirst9
	.word	gText_ApprenticeMonFirstThanks9
	.word	gText_ApprenticeWhichMonFirst10
	.word	gText_ApprenticeMonFirstThanks10
	.word	gText_ApprenticeWhichMonFirst11
	.word	gText_ApprenticeMonFirstThanks11
	.word	gText_ApprenticeWhichMonFirst12
	.word	gText_ApprenticeMonFirstThanks12
	.word	gText_ApprenticeWhichMonFirst13
	.word	gText_ApprenticeMonFirstThanks13
	.word	gText_ApprenticeWhichMonFirst14
	.word	gText_ApprenticeMonFirstThanks14
	.word	gText_ApprenticeWhichMonFirst15
	.word	gText_ApprenticeMonFirstThanks15
	.align	2, 0
	.type	 sApprenticePickWinSpeechTexts,object
	.size	 sApprenticePickWinSpeechTexts,128
sApprenticePickWinSpeechTexts:
	.word	gText_ApprenticePickWinSpeech0
	.word	gText_ApprenticeWinSpeechThanks0
	.word	gText_ApprenticePickWinSpeech1
	.word	gText_ApprenticeWinSpeechThanks1
	.word	gText_ApprenticePickWinSpeech2
	.word	gText_ApprenticeWinSpeechThanks2
	.word	gText_ApprenticePickWinSpeech3
	.word	gText_ApprenticeWinSpeechThanks3
	.word	gText_ApprenticePickWinSpeech4
	.word	gText_ApprenticeWinSpeechThanks4
	.word	gText_ApprenticePickWinSpeech5
	.word	gText_ApprenticeWinSpeechThanks5
	.word	gText_ApprenticePickWinSpeech6
	.word	gText_ApprenticeWinSpeechThanks6
	.word	gText_ApprenticePickWinSpeech7
	.word	gText_ApprenticeWinSpeechThanks7
	.word	gText_ApprenticePickWinSpeech8
	.word	gText_ApprenticeWinSpeechThanks8
	.word	gText_ApprenticePickWinSpeech9
	.word	gText_ApprenticeWinSpeechThanks9
	.word	gText_ApprenticePickWinSpeech10
	.word	gText_ApprenticeWinSpeechThanks10
	.word	gText_ApprenticePickWinSpeech11
	.word	gText_ApprenticeWinSpeechThanks11
	.word	gText_ApprenticePickWinSpeech12
	.word	gText_ApprenticeWinSpeechThanks12
	.word	gText_ApprenticePickWinSpeech13
	.word	gText_ApprenticeWinSpeechThanks13
	.word	gText_ApprenticePickWinSpeech14
	.word	gText_ApprenticeWinSpeechThanks14
	.word	gText_ApprenticePickWinSpeech15
	.word	gText_ApprenticeWinSpeechThanks15
	.align	2, 0
	.type	 sApprenticeChallengeTexts,object
	.size	 sApprenticeChallengeTexts,64
sApprenticeChallengeTexts:
	.word	gText_ApprenticeChallenge0
	.word	gText_ApprenticeChallenge1
	.word	gText_ApprenticeChallenge2
	.word	gText_ApprenticeChallenge3
	.word	gText_ApprenticeChallenge4
	.word	gText_ApprenticeChallenge5
	.word	gText_ApprenticeChallenge6
	.word	gText_ApprenticeChallenge7
	.word	gText_ApprenticeChallenge8
	.word	gText_ApprenticeChallenge9
	.word	gText_ApprenticeChallenge10
	.word	gText_ApprenticeChallenge11
	.word	gText_ApprenticeChallenge12
	.word	gText_ApprenticeChallenge13
	.word	gText_ApprenticeChallenge14
	.word	gText_ApprenticeChallenge15
	.type	 sValidApprenticeMoves,object
	.size	 sValidApprenticeMoves,355
sValidApprenticeMoves:
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.type	 sQuestionPossibilities,object
	.size	 sQuestionPossibilities,10
sQuestionPossibilities:
	.byte	0x1
	.byte	0x1
	.byte	0x1
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x2
	.byte	0x3
	.byte	0x0
	.align	2, 0
	.type	 sApprenticeFunctions,object
sApprenticeFunctions:
	.word	Script_GivenApprenticeLvlMode
	.word	Script_SetApprenticeLvlMode
	.word	Script_SetApprenticeId
	.word	ShuffleApprenticeSpecies
	.word	Script_SetRandomQuestionData
	.word	IncrementQuestionsAnswered
	.word	IsFinalQuestion
	.word	Script_CreateApprenticeMenu
	.word	Script_PrintApprenticeMessage
	.word	Script_ResetPlayerApprentice
	.word	GetShouldCheckApprenticeGone
	.word	ApprenticeGetQuestion
	.word	GetNumApprenticePartyMonsAssigned
	.word	SetApprenticePartyMon
	.word	InitQuestionData
	.word	FreeQuestionData
	.word	ApprenticeBufferString
	.word	SetApprenticeMonMove
	.word	SetLeadApprenticeMon
	.word	Script_ApprenticeOpenBagMenu
	.word	TrySetApprenticeHeldItem
	.word	SaveApprentice
	.word	SetSavedApprenticeTrainerGfxId
	.word	SetPlayerApprenticeTrainerGfxId
	.word	GetShouldApprenticeLeave
	.word	ShiftSavedApprentices
	.size	 sApprenticeFunctions,104
	.type	 sInitialApprenticeIds,object
	.size	 sInitialApprenticeIds,8
sInitialApprenticeIds:
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x3
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
.text
	.align	2, 0
	.globl	BufferApprenticeChallengeText
	.type	 BufferApprenticeChallengeText,function
	.thumb_func
BufferApprenticeChallengeText:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r2, .L9
	ldr	r1, [r2]
	lsl	r0, r5, #0x4
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xde
	ldrb	r1, [r1]
	mov	r6, #0x0
	add	r7, r2, #0
	ldr	r0, .L9+0x4
	mov	r8, r0
	cmp	r1, #0
	beq	.L4	@cond_branch
.L5:
	add	r0, r1, #0
	mov	r1, #0xa
	bl	__udivsi3
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	cmp	r1, #0
	beq	.L4	@cond_branch
	cmp	r6, #0x3
	bls	.L5	@cond_branch
.L4:
	lsl	r4, r5, #0x4
	add	r4, r4, r5
	lsl	r4, r4, #0x2
	ldr	r1, [r7]
	add	r1, r4, r1
	mov	r0, #0x8a
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, r8
	bl	StringCopy7
	ldr	r0, [r7]
	add	r0, r0, r4
	ldr	r1, .L9+0x8
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, r8
	bl	ConvertInternationalString
	ldr	r0, .L9+0xc
	ldr	r1, [r7]
	add	r1, r1, r4
	add	r1, r1, #0xde
	ldrb	r1, [r1]
	mov	r2, #0x1
	add	r3, r6, #0
	bl	ConvertIntToDecimalStringN
	ldr	r1, .L9+0x10
	ldr	r0, [r7]
	add	r0, r0, r4
	add	r0, r0, #0xdc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x19
	add	r0, r0, r1
	ldr	r1, [r0]
	ldr	r0, .L9+0x14
	bl	StringExpandPlaceholders
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L10:
	.align	2, 0
.L9:
	.word	gSaveBlock2Ptr
	.word	gStringVar1
	.word	0x11b
	.word	gStringVar2
	.word	sApprenticeChallengeTexts
	.word	gStringVar4
.Lfe1:
	.size	 BufferApprenticeChallengeText,.Lfe1-BufferApprenticeChallengeText
	.align	2, 0
	.globl	Apprentice_EnableBothScriptContexts
	.type	 Apprentice_EnableBothScriptContexts,function
	.thumb_func
Apprentice_EnableBothScriptContexts:
	push	{lr}
	bl	EnableBothScriptContexts
	pop	{r0}
	bx	r0
.Lfe2:
	.size	 Apprentice_EnableBothScriptContexts,.Lfe2-Apprentice_EnableBothScriptContexts
	.align	2, 0
	.globl	ResetApprenticeStruct
	.type	 ResetApprenticeStruct,function
	.thumb_func
ResetApprenticeStruct:
	push	{r4, r5, lr}
	add	r3, r0, #0
	mov	r2, #0x0
	add	r4, r3, #0
	add	r4, r4, #0x28
	ldr	r0, .L18
	add	r5, r0, #0
.L16:
	lsl	r0, r2, #0x1
	add	r0, r4, r0
	ldrh	r1, [r0]
	orr	r1, r1, r5
	strh	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L16	@cond_branch
	add	r1, r3, #0
	add	r1, r1, #0x38
	mov	r0, #0xff
	strb	r0, [r1]
	ldrb	r1, [r3]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r3]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L19:
	.align	2, 0
.L18:
	.word	0xffff
.Lfe3:
	.size	 ResetApprenticeStruct,.Lfe3-ResetApprenticeStruct
	.align	2, 0
	.globl	ResetAllApprenticeData
	.type	 ResetAllApprenticeData,function
	.thumb_func
ResetAllApprenticeData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r3, .L36
	ldr	r1, [r3]
	add	r1, r1, #0xb2
	ldrb	r2, [r1]
	mov	r0, #0x19
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r0, #0x0
	mov	ip, r0
	add	r5, r3, #0
	mov	r8, r0
	ldr	r1, .L36+0x4
	mov	sl, r1
.L24:
	mov	r2, #0x0
	mov	r3, ip
	lsl	r7, r3, #0x4
	mov	r4, #0x1
	add	r4, r4, ip
	mov	r9, r4
	add	r0, r7, r3
	lsl	r3, r0, #0x2
.L28:
	ldr	r1, [r5]
	lsl	r0, r2, #0x1
	add	r0, r0, r3
	mov	r4, #0x82
	lsl	r4, r4, #0x1
	add	r1, r1, r4
	add	r1, r1, r0
	ldrh	r0, [r1]
	mov	r4, sl
	orr	r0, r0, r4
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x5
	bls	.L28	@cond_branch
	ldr	r2, [r5]
	mov	r0, ip
	add	r3, r7, r0
	lsl	r3, r3, #0x2
	add	r2, r2, r3
	add	r2, r2, #0xdc
	ldrb	r1, [r2]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x10
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r0, [r5]
	add	r0, r0, r3
	mov	r1, #0x8a
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, #0xdc
	ldrb	r2, [r1]
	mov	r0, #0x61
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, r3
	add	r0, r0, #0xde
	mov	r4, r8
	strb	r4, [r0]
	ldr	r0, [r5]
	add	r0, r0, r3
	add	r0, r0, #0xdd
	strb	r4, [r0]
	mov	r2, #0x0
	ldr	r6, .L36
	mov	r4, #0x88
	lsl	r4, r4, #0x1
.L33:
	ldr	r0, [r6]
	add	r1, r2, r3
	add	r0, r0, r4
	add	r0, r0, r1
	mov	r1, r8
	strb	r1, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L33	@cond_branch
	ldr	r0, [r5]
	mov	r3, ip
	add	r2, r7, r3
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldr	r4, .L36+0x8
	ldrb	r1, [r4]
	ldr	r3, .L36+0xc
	add	r0, r0, r3
	strb	r1, [r0]
	ldr	r0, [r5]
	mov	r4, #0x8e
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	add	r0, r0, r2
	mov	r1, r8
	str	r1, [r0]
	mov	r3, r9
	lsl	r0, r3, #0x18
	lsr	r0, r0, #0x18
	mov	ip, r0
	cmp	r0, #0x3
	bls	.L24	@cond_branch
	bl	Script_ResetPlayerApprentice
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L37:
	.align	2, 0
.L36:
	.word	gSaveBlock2Ptr
	.word	0xffff
	.word	gGameLanguage
	.word	0x11b
.Lfe4:
	.size	 ResetAllApprenticeData,.Lfe4-ResetAllApprenticeData
	.align	2, 0
	.type	 GivenApprenticeLvlMode,function
	.thumb_func
GivenApprenticeLvlMode:
	ldr	r0, .L40
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	mov	r1, #0x3
	and	r1, r1, r0
	neg	r0, r1
	orr	r0, r0, r1
	lsr	r0, r0, #0x1f
	bx	lr
.L41:
	.align	2, 0
.L40:
	.word	gSaveBlock2Ptr
.Lfe5:
	.size	 GivenApprenticeLvlMode,.Lfe5-GivenApprenticeLvlMode
	.align	2, 0
	.type	 SetApprenticeId,function
	.thumb_func
SetApprenticeId:
	push	{r4, r5, lr}
	ldr	r2, .L55
	ldr	r0, [r2]
	add	r0, r0, #0xde
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L43	@cond_branch
	add	r4, r2, #0
	ldr	r5, .L55+0x4
.L44:
	bl	Random
	ldr	r2, [r4]
	lsl	r0, r0, #0x10
	mov	r1, #0xe0
	lsl	r1, r1, #0xb
	and	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r1, r1, r5
	ldrb	r0, [r1]
	add	r2, r2, #0xb0
	strb	r0, [r2]
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0xb0
	add	r0, r0, #0xdc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	ldrb	r1, [r1]
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	beq	.L44	@cond_branch
	b	.L49
.L56:
	.align	2, 0
.L55:
	.word	gSaveBlock2Ptr
	.word	sInitialApprenticeIds
.L43:
	add	r4, r2, #0
.L50:
	bl	Random
	ldr	r2, [r4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xf
	and	r0, r0, r1
	add	r2, r2, #0xb0
	strb	r0, [r2]
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0xb0
	add	r0, r0, #0xdc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	ldrb	r1, [r1]
	lsr	r0, r0, #0x1b
	cmp	r1, r0
	beq	.L50	@cond_branch
.L49:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 SetApprenticeId,.Lfe6-SetApprenticeId
	.align	2, 0
	.type	 SetPlayersApprenticeLvlMode,function
	.thumb_func
SetPlayersApprenticeLvlMode:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L58
	ldr	r2, [r1]
	add	r2, r2, #0xb1
	mov	r1, #0x3
	and	r0, r0, r1
	ldrb	r3, [r2]
	sub	r1, r1, #0x7
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2]
	bx	lr
.L59:
	.align	2, 0
.L58:
	.word	gSaveBlock2Ptr
.Lfe7:
	.size	 SetPlayersApprenticeLvlMode,.Lfe7-SetPlayersApprenticeLvlMode
	.align	2, 0
	.type	 ShuffleApprenticeSpecies,function
	.thumb_func
ShuffleApprenticeSpecies:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0xc
	mov	r5, #0x0
.L64:
	mov	r1, sp
	add	r0, r1, r5
	strb	r5, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L64	@cond_branch
	mov	r5, #0x0
.L69:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r7, sp
	add	r2, r7, r4
	ldrb	r3, [r2]
	add	r1, r7, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x31
	bls	.L69	@cond_branch
	mov	r5, #0x0
	ldr	r6, .L76
	mov	r4, #0xf
.L74:
	ldr	r3, [r6]
	add	r3, r3, #0xb4
	add	r3, r3, r5
	lsl	r2, r5, #0x1
	mov	r1, sp
	add	r0, r1, r2
	ldrb	r0, [r0]
	add	r1, r4, #0
	and	r1, r1, r0
	lsl	r1, r1, #0x4
	add	r2, r2, #0x1
	mov	r7, sp
	add	r0, r7, r2
	ldrb	r2, [r0]
	add	r0, r4, #0
	and	r0, r0, r2
	orr	r1, r1, r0
	strb	r1, [r3]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L74	@cond_branch
	add	sp, sp, #0xc
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gSaveBlock2Ptr
.Lfe8:
	.size	 ShuffleApprenticeSpecies,.Lfe8-ShuffleApprenticeSpecies
	.align	2, 0
	.type	 GetMonIdForQuestion,function
	.thumb_func
GetMonIdForQuestion:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r5, #0x0
	cmp	r0, #0x2
	bne	.L79	@cond_branch
	ldr	r6, .L93
.L80:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r3, #0x0
	mov	r2, #0x0
	ldr	r1, [r6]
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r4, r0, #0x1
	add	r1, r1, #0x2
.L86:
	lsl	r0, r2, #0x1
	add	r0, r0, r4
	add	r0, r1, r0
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L85	@cond_branch
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L85:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x4
	bls	.L86	@cond_branch
	cmp	r3, #0x3
	bhi	.L80	@cond_branch
	b	.L91
.L94:
	.align	2, 0
.L93:
	.word	gApprenticePartyMovesData
.L79:
	cmp	r0, #0x1
	bne	.L91	@cond_branch
	ldrb	r0, [r2]
	add	r1, r1, r0
	ldrb	r5, [r1]
	add	r0, r0, #0x1
	strb	r0, [r2]
.L91:
	add	r0, r5, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe9:
	.size	 GetMonIdForQuestion,.Lfe9-GetMonIdForQuestion
	.align	2, 0
	.type	 SetRandomQuestionData,function
	.thumb_func
SetRandomQuestionData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x20
	mov	r5, #0x0
	mov	r0, sp
	add	r0, r0, #0xc
	str	r0, [sp, #0x14]
	mov	r1, sp
	add	r1, r1, #0x10
	str	r1, [sp, #0x18]
	add	r1, r0, #0
.L99:
	add	r0, r1, r5
	strb	r5, [r0]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L99	@cond_branch
	mov	r5, #0x0
	ldr	r6, [sp, #0x14]
.L104:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r6, r4
	ldrb	r3, [r2]
	add	r1, r6, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L104	@cond_branch
	mov	r5, #0x0
	ldr	r2, .L144
.L109:
	mov	r4, sp
	add	r1, r4, r5
	add	r0, r5, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x9
	bls	.L109	@cond_branch
	mov	r5, #0x0
.L114:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, sp
	add	r2, r6, r4
	ldrb	r3, [r2]
	add	r1, r6, r0
	ldrb	r0, [r1]
	strb	r0, [r2]
	strb	r3, [r1]
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x31
	bls	.L114	@cond_branch
	ldr	r4, .L144+0x4
	mov	r0, #0x30
	bl	AllocZeroed
	str	r0, [r4]
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r5, #0x0
	mov	r2, #0x4
.L119:
	mov	r3, #0x0
.L123:
	ldr	r0, [r4]
	lsl	r1, r3, #0x2
	add	r1, r1, r3
	add	r1, r5, r1
	add	r0, r0, #0x20
	add	r0, r0, r1
	strb	r2, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x2
	bls	.L123	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x4
	bls	.L119	@cond_branch
	mov	r0, #0x0
	ldr	r7, [sp, #0x18]
	strb	r0, [r7]
	mov	r5, #0x0
.L129:
	ldr	r0, .L144+0x8
	ldr	r3, [r0]
	lsl	r4, r5, #0x2
	add	r3, r3, r4
	mov	r1, sp
	add	r6, r1, r5
	ldrb	r0, [r6]
	add	r3, r3, #0xb8
	mov	r2, #0x3
	and	r2, r2, r0
	ldrb	r0, [r3]
	mov	r7, #0x4
	neg	r7, r7
	add	r1, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldrb	r0, [r6]
	add	r5, r5, #0x1
	str	r5, [sp, #0x1c]
	mov	r8, r4
	cmp	r0, #0x3
	beq	.L128	@cond_branch
	ldrb	r0, [r6]
	ldr	r1, [sp, #0x14]
	ldr	r2, [sp, #0x18]
	bl	GetMonIdForQuestion
	ldr	r1, .L144+0x8
	ldr	r3, [r1]
	add	r3, r3, r8
	add	r3, r3, #0xb8
	mov	r2, #0x3
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r0, [r3]
	mov	r4, #0xd
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3]
	ldr	r7, .L144+0x8
	ldr	r0, [r7]
	add	r0, r0, r8
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r7, r0, #0x1e
	ldrb	r0, [r6]
	cmp	r0, #0x2
	bne	.L128	@cond_branch
	lsl	r0, r7, #0x2
	add	r0, r0, r7
	mov	sl, r0
	ldr	r0, .L144+0x4
	mov	r9, r0
.L132:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r1, #0x3
	and	r4, r4, r1
	mov	r3, #0x0
	mov	r6, r9
	ldr	r2, [r6]
	ldrb	r0, [r2]
	add	r1, r0, #0x1
	lsl	r5, r7, #0x2
	cmp	r3, r1
	bge	.L134	@cond_branch
	add	r2, r2, #0x20
	mov	r6, sl
	add	r0, r2, r6
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L134	@cond_branch
	add	r6, r1, #0
	add	r1, r5, r7
.L137:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r6
	bge	.L134	@cond_branch
	add	r0, r3, r1
	add	r0, r2, r0
	ldrb	r0, [r0]
	cmp	r0, r4
	bne	.L137	@cond_branch
.L134:
	mov	r1, r9
	ldr	r0, [r1]
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	ldr	r1, .L144+0x4
	cmp	r3, r0
	bne	.L132	@cond_branch
	ldr	r0, [r1]
	orr	r5, r5, r7
	ldrb	r2, [r0]
	add	r1, r5, r2
	add	r0, r0, #0x20
	add	r0, r0, r1
	strb	r4, [r0]
	ldr	r6, .L144+0x8
	ldr	r2, [r6]
	add	r2, r2, r8
	add	r2, r2, #0xb8
	mov	r7, #0x3
	and	r4, r4, r7
	lsl	r3, r4, #0x4
	ldrb	r0, [r2]
	mov	r4, #0x31
	neg	r4, r4
	add	r1, r4, #0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
	ldr	r0, [r6]
	add	r0, r0, r8
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r0, r0, #0x1e
	bl	GetRandomAlternateMove
	ldr	r1, [r6]
	add	r1, r1, r8
	add	r1, r1, #0xba
	strh	r0, [r1]
.L128:
	ldr	r6, [sp, #0x1c]
	lsl	r0, r6, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x8
	bhi	.LCB1080
	b	.L129	@long jump
.LCB1080:
	ldr	r4, .L144+0x4
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	add	sp, sp, #0x20
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L145:
	.align	2, 0
.L144:
	.word	sQuestionPossibilities
	.word	gApprenticePartyMovesData
	.word	gSaveBlock2Ptr
.Lfe10:
	.size	 SetRandomQuestionData,.Lfe10-SetRandomQuestionData
	.align	2, 0
	.type	 GetRandomAlternateMove,function
	.thumb_func
GetRandomAlternateMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0x0
	str	r0, [sp, #0xc]
	mov	r7, #0x0
	ldr	r1, [sp]
	cmp	r1, #0x2
	bhi	.L147	@cond_branch
	ldr	r2, .L205
	ldr	r1, [r2]
	add	r0, r1, #0
	add	r0, r0, #0xb4
	ldr	r3, [sp]
	add	r0, r0, r3
	ldrb	r4, [r0]
	add	r1, r1, #0xb2
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	asr	r0, r0, r3
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r4, r4, r0
	mov	r0, #0xf
	and	r4, r4, r0
	b	.L153
.L206:
	.align	2, 0
.L205:
	.word	gSaveBlock2Ptr
.L147:
	mov	r4, #0x0
	ldr	r2, .L207
.L153:
	ldr	r3, .L207+0x4
	lsl	r1, r4, #0x1
	ldr	r4, [r2]
	add	r0, r4, #0
	add	r0, r0, #0xb0
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r3, r3, #0x34
	add	r1, r1, r3
	ldrh	r1, [r1]
	str	r1, [sp, #0x8]
	ldr	r1, .L207+0x8
	ldr	r2, [sp, #0x8]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r6, [r0]
	mov	r3, #0x0
	add	r4, r4, #0xb1
	ldrb	r1, [r4]
	mov	r0, #0x3
	and	r0, r0, r1
	mov	r5, #0x3c
	cmp	r0, #0x1
	bne	.L154	@cond_branch
	mov	r5, #0x32
.L154:
	ldrh	r1, [r6]
	ldr	r4, .L207+0xc
	cmp	r1, r4
	beq	.L157	@cond_branch
	mov	r2, #0xfe
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	and	r0, r0, r1
	lsl	r1, r5, #0x9
	cmp	r0, r1
	bgt	.L157	@cond_branch
	add	r5, r2, #0
	add	r2, r1, #0
.L158:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	cmp	r1, r4
	beq	.L157	@cond_branch
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, r2
	ble	.L158	@cond_branch
.L157:
	add	r5, r3, #0
	mov	r3, #0x0
	str	r3, [sp, #0x4]
.L164:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L166	@cond_branch
	ldr	r0, [sp, #0xc]
	cmp	r0, #0x1
	bne	.L165	@cond_branch
.L166:
	ldr	r1, .L207+0x10
	mov	r8, r1
.L170:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3a
	bl	__umodsi3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, [sp, #0x8]
	add	r1, r4, #0
	bl	CanSpeciesLearnTMHM
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L170	@cond_branch
	ldr	r2, .L207+0x14
	add	r0, r4, r2
	bl	ItemIdToBattleMoveId
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	mov	r2, #0x1
	cmp	r5, #0x4
	bhi	.L175	@cond_branch
	mov	r3, #0x0
	b	.L202
.L208:
	.align	2, 0
.L207:
	.word	gSaveBlock2Ptr
	.word	gApprentices
	.word	gLevelUpLearnsets
	.word	0xffff
	.word	0x1ff
	.word	0x121
.L175:
	sub	r0, r5, #0x4
	b	.L204
.L179:
	add	r0, r3, #0x1
.L204:
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
.L202:
	cmp	r3, r5
	bcs	.L169	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r1, r8
	and	r0, r0, r1
	cmp	r0, r7
	bne	.L179	@cond_branch
	mov	r2, #0x0
.L169:
	cmp	r2, #0x1
	bne	.L170	@cond_branch
	b	.L185
.L165:
	cmp	r5, #0x4
	bhi	.L186	@cond_branch
	mov	r2, #0x1
	str	r2, [sp, #0xc]
	b	.L162
.L186:
	sub	r4, r5, #0x4
	ldr	r3, .L209
	mov	sl, r3
	mov	r8, r3
	lsl	r0, r4, #0x18
	mov	r9, r0
.L188:
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	add	r1, r4, #0
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x17
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r7, r8
	and	r7, r7, r0
	mov	r2, #0x1
	mov	r1, r9
	lsr	r3, r1, #0x18
	cmp	r3, r5
	bcs	.L190	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	mov	r0, r8
	b	.L203
.L210:
	.align	2, 0
.L209:
	.word	0x1ff
.L193:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r5
	bcs	.L190	@cond_branch
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	ldrh	r0, [r0]
	mov	r1, sl
.L203:
	and	r0, r0, r1
	cmp	r0, r7
	bne	.L193	@cond_branch
	mov	r2, #0x0
.L190:
	cmp	r2, #0x1
	bne	.L188	@cond_branch
.L185:
	ldr	r0, [sp]
	add	r1, r7, #0
	bl	TrySetMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L162	@cond_branch
	ldr	r0, .L211
	add	r0, r7, r0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L163	@cond_branch
	ldr	r0, [sp, #0x4]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
.L162:
	ldr	r2, [sp, #0x4]
	cmp	r2, #0x4
	bhi	.LCB1468
	b	.L164	@long jump
.LCB1468:
.L163:
	ldr	r0, .L211+0x4
	ldr	r1, [r0]
	ldrb	r0, [r1]
	add	r0, r0, #0x1
	strb	r0, [r1]
	add	r0, r7, #0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L212:
	.align	2, 0
.L211:
	.word	sValidApprenticeMoves
	.word	gApprenticePartyMovesData
.Lfe11:
	.size	 GetRandomAlternateMove,.Lfe11-GetRandomAlternateMove
	.align	2, 0
	.type	 TrySetMove,function
	.thumb_func
TrySetMove:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r3, #0x0
	ldr	r0, .L221
	mov	ip, r0
	ldr	r2, [r0]
	lsl	r1, r4, #0x2
	add	r0, r1, r4
	lsl	r6, r0, #0x1
	add	r2, r2, #0x2
	add	r7, r1, #0
.L217:
	lsl	r0, r3, #0x1
	add	r0, r0, r6
	add	r0, r2, r0
	ldrh	r0, [r0]
	cmp	r0, r5
	bne	.L216	@cond_branch
	mov	r0, #0x0
	b	.L220
.L222:
	.align	2, 0
.L221:
	.word	gApprenticePartyMovesData
.L216:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x4
	bls	.L217	@cond_branch
	mov	r2, ip
	ldr	r1, [r2]
	add	r0, r7, r4
	ldrb	r2, [r1]
	add	r0, r0, r2
	lsl	r0, r0, #0x1
	add	r1, r1, #0x2
	add	r1, r1, r0
	strh	r5, [r1]
	mov	r0, #0x1
.L220:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 TrySetMove,.Lfe12-TrySetMove
	.align	2, 0
	.type	 GetLatestLearnedMoves,function
	.thumb_func
GetLatestLearnedMoves:
	push	{r4, r5, r6, r7, lr}
	mov	ip, r1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L238
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r1, [r0]
	mov	r0, #0x3
	and	r0, r0, r1
	mov	r4, #0x3c
	cmp	r0, #0x1
	bne	.L224	@cond_branch
	mov	r4, #0x32
.L224:
	ldr	r1, .L238+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r6, [r0]
	mov	r5, #0x0
	ldrh	r1, [r6]
	ldr	r3, .L238+0x8
	cmp	r1, r3
	beq	.L227	@cond_branch
	mov	r2, #0xfe
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	and	r0, r0, r1
	lsl	r1, r4, #0x9
	cmp	r0, r1
	bgt	.L227	@cond_branch
	add	r4, r2, #0
	add	r2, r1, #0
.L228:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	cmp	r1, r3
	beq	.L227	@cond_branch
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, r2
	ble	.L228	@cond_branch
.L227:
	add	r4, r5, #0
	cmp	r4, #0x4
	bls	.L232	@cond_branch
	mov	r4, #0x4
.L232:
	mov	r2, #0x0
	cmp	r2, r4
	bcs	.L234	@cond_branch
	ldr	r7, .L238+0xc
.L236:
	lsl	r3, r2, #0x1
	add	r3, r3, ip
	add	r2, r2, #0x1
	sub	r0, r5, r2
	lsl	r0, r0, #0x1
	add	r0, r0, r6
	ldrh	r1, [r0]
	add	r0, r7, #0
	and	r0, r0, r1
	strh	r0, [r3]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	cmp	r2, r4
	bcc	.L236	@cond_branch
.L234:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L239:
	.align	2, 0
.L238:
	.word	gSaveBlock2Ptr
	.word	gLevelUpLearnsets
	.word	0xffff
	.word	0x1ff
.Lfe13:
	.size	 GetLatestLearnedMoves,.Lfe13-GetLatestLearnedMoves
	.align	2, 0
	.type	 GetDefaultMove,function
	.thumb_func
GetDefaultMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r5, r2, #0x18
	ldr	r1, .L256
	ldr	r2, [r1]
	add	r0, r2, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	add	r7, r1, #0
	cmp	r0, #0x2
	bhi	.L241	@cond_branch
	mov	r0, #0x0
	b	.L255
.L257:
	.align	2, 0
.L256:
	.word	gSaveBlock2Ptr
.L241:
	mov	r4, #0x0
	mov	r3, #0x0
	add	r0, r2, #0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	ldr	r1, .L258
	mov	ip, r1
	lsl	r6, r6, #0x1
	lsl	r5, r5, #0x1
	mov	r9, r5
	cmp	r0, #0
	beq	.L243	@cond_branch
	add	r2, r7, #0
.L245:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x8
	bhi	.L243	@cond_branch
	ldr	r0, [r2]
	lsl	r1, r3, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L245	@cond_branch
.L243:
	ldr	r0, [r7]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r6, r0
	mov	r1, ip
	add	r1, r1, #0x34
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r1, sp
	bl	GetLatestLearnedMoves
	mov	r3, #0x0
	cmp	r3, r4
	bcs	.L249	@cond_branch
	ldr	r1, [r7]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	cmp	r3, r0
	bge	.L249	@cond_branch
	add	r6, r7, #0
	add	r5, r1, #0
.L251:
	lsl	r0, r3, #0x2
	add	r2, r5, r0
	add	r0, r2, #0
	add	r0, r0, #0xb8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x2
	bne	.L250	@cond_branch
	lsl	r0, r1, #0x1c
	lsr	r0, r0, #0x1e
	cmp	r0, r8
	bne	.L250	@cond_branch
	lsr	r0, r1, #0x6
	cmp	r0, #0
	beq	.L250	@cond_branch
	lsl	r0, r1, #0x1a
	lsr	r0, r0, #0x1e
	lsl	r0, r0, #0x1
	mov	r7, sp
	add	r1, r7, r0
	add	r0, r2, #0
	add	r0, r0, #0xba
	ldrh	r0, [r0]
	strh	r0, [r1]
.L250:
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, r4
	bcs	.L249	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	cmp	r3, r0
	blt	.L251	@cond_branch
.L249:
	mov	r0, sp
	add	r0, r0, r9
	ldrh	r0, [r0]
.L255:
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L259:
	.align	2, 0
.L258:
	.word	gApprentices
.Lfe14:
	.size	 GetDefaultMove,.Lfe14-GetDefaultMove
	.align	2, 0
	.type	 SaveApprenticeParty,function
	.thumb_func
SaveApprenticeParty:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	mov	r5, #0x0
	ldr	r7, .L296
	add	r6, r7, #0
	mov	r4, #0x0
.L264:
	ldr	r0, [r6]
	lsl	r2, r5, #0x1
	add	r2, r2, r5
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #0xe0
	strh	r4, [r1]
	add	r0, r0, #0xea
	strh	r4, [r0]
	mov	r3, #0x0
.L268:
	ldr	r0, [r6]
	lsl	r1, r3, #0x1
	add	r1, r1, r2
	add	r0, r0, #0xe2
	add	r0, r0, r1
	strh	r4, [r0]
	add	r0, r3, #0x1
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0x3
	bls	.L268	@cond_branch
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L264	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsr	r3, r0, #0x6
	mov	r5, #0x0
.L274:
	lsl	r0, r3, #0x2
	mov	r1, sp
	add	r2, r1, r0
	lsl	r0, r5, #0x1
	add	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, #0xe0
	ldr	r1, [r7]
	add	r1, r1, r0
	str	r1, [r2]
	add	r0, r3, #0x1
	mov	r1, #0x3
	bl	__modsi3
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L274	@cond_branch
	mov	r5, #0x0
	ldr	r7, .L296
	ldr	r6, .L296+0x4
.L279:
	ldr	r0, [r7]
	mov	ip, r0
	add	r0, r0, #0xb4
	add	r0, r0, r5
	ldrb	r2, [r0]
	mov	r0, ip
	add	r0, r0, #0xb2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	asr	r0, r0, r5
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	lsl	r0, r5, #0x2
	mov	r1, sp
	add	r3, r1, r0
	ldr	r4, [r3]
	lsl	r2, r2, #0x1
	mov	r0, ip
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, r0
	add	r2, r2, r6
	ldrh	r0, [r2]
	strh	r0, [r4]
	ldr	r1, [r3]
	ldrh	r0, [r1]
	add	r1, r1, #0x2
	bl	GetLatestLearnedMoves
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x2
	bls	.L279	@cond_branch
	mov	r5, #0x0
	cmp	r5, r8
	bcs	.L287	@cond_branch
	ldr	r7, .L296
.L289:
	ldr	r1, [r7]
	lsl	r0, r5, #0x2
	add	r4, r1, r0
	add	r0, r4, #0
	add	r0, r0, #0xb8
	ldrb	r2, [r0]
	lsl	r0, r2, #0x1e
	lsr	r1, r0, #0x1e
	lsl	r0, r2, #0x1c
	lsr	r3, r0, #0x1e
	add	r6, r3, #0
	cmp	r1, #0x1
	bne	.L290	@cond_branch
	lsr	r0, r2, #0x6
	cmp	r0, #0
	beq	.L288	@cond_branch
	lsl	r0, r3, #0x2
	add	r0, r0, sp
	ldr	r1, [r0]
	add	r0, r4, #0
	add	r0, r0, #0xba
	ldrh	r0, [r0]
	strh	r0, [r1, #0xa]
	b	.L288
.L297:
	.align	2, 0
.L296:
	.word	gSaveBlock2Ptr
	.word	gApprentices+0x34
.L290:
	cmp	r1, #0x2
	bne	.L288	@cond_branch
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x1e
	cmp	r0, #0
	beq	.L288	@cond_branch
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1e
	lsl	r0, r6, #0x2
	add	r0, r0, sp
	ldr	r1, [r0]
	lsl	r2, r2, #0x1
	add	r1, r1, #0x2
	add	r1, r1, r2
	add	r0, r4, #0
	add	r0, r0, #0xba
	ldrh	r0, [r0]
	strh	r0, [r1]
.L288:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, r8
	bcc	.L289	@cond_branch
.L287:
	add	sp, sp, #0xc
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 SaveApprenticeParty,.Lfe15-SaveApprenticeParty
	.align	2, 0
	.type	 CreateApprenticeMenu,function
	.thumb_func
CreateApprenticeMenu:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r7, #0x2
	cmp	r0, #0x6
	bls	.LCB2145
	b	.L317	@long jump
.LCB2145:
	lsl	r0, r0, #0x2
	ldr	r1, .L330
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L331:
	.align	2, 0
.L330:
	.word	.L318
	.align	2, 0
	.align	2, 0
.L318:
	.word	.L300
	.word	.L301
	.word	.L312
	.word	.L314
	.word	.L315
	.word	.L317
	.word	.L316
.L300:
	mov	r0, #0x12
	mov	sl, r0
	mov	r6, #0x8
	ldr	r0, .L332
	str	r0, [sp, #0xc]
	ldr	r0, .L332+0x4
	str	r0, [sp, #0x10]
	b	.L299
.L333:
	.align	2, 0
.L332:
	.word	gText_Lv50
	.word	gText_OpenLevel
.L301:
	mov	r7, #0x3
	mov	r1, #0x12
	mov	sl, r1
	mov	r6, #0x6
	mov	r4, #0x0
	ldr	r0, .L334
	mov	r9, r0
	ldr	r0, .L334+0x4
	ldr	r3, [r0]
	mov	r1, #0xb2
	add	r1, r1, r3
	mov	ip, r1
	add	r5, r3, #0
	add	r5, r5, #0xb0
	ldr	r0, .L334+0x8
	mov	r8, r0
.L305:
	add	r0, r3, #0
	add	r0, r0, #0xb4
	add	r0, r0, r4
	ldrb	r2, [r0]
	mov	r1, ip
	ldrb	r0, [r1]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	asr	r0, r0, r4
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	lsl	r2, r2, #0x1
	ldrb	r1, [r5]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r2, r2, r0
	add	r2, r2, r8
	ldrh	r1, [r2]
	lsl	r0, r4, #0x2
	mov	r2, sp
	add	r2, r2, r0
	add	r2, r2, #0xc
	mov	r0, #0xb
	mul	r0, r0, r1
	add	r0, r0, r9
	str	r0, [r2]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L305	@cond_branch
	b	.L299
.L335:
	.align	2, 0
.L334:
	.word	gSpeciesNames
	.word	gSaveBlock2Ptr
	.word	gApprentices+0x34
.L312:
	mov	r0, #0x12
	mov	sl, r0
	mov	r6, #0x8
	ldr	r0, .L336
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	cmp	r0, #0x2
	bls	.LCB2271
	b	.L298	@long jump
.LCB2271:
	ldr	r0, .L336+0x4
	ldr	r3, [r0]
	ldrh	r0, [r3, #0x2]
	mov	r2, #0xb
	mul	r0, r0, r2
	ldr	r1, .L336+0x8
	add	r0, r0, r1
	str	r0, [sp, #0x10]
	ldrh	r0, [r3]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp, #0xc]
	b	.L299
.L337:
	.align	2, 0
.L336:
	.word	gSaveBlock2Ptr
	.word	gApprenticeQuestionData
	.word	gSpeciesNames
.L314:
	mov	r1, #0x11
	mov	sl, r1
	mov	r6, #0x8
	ldr	r0, .L338
	ldr	r3, [r0]
	ldrh	r0, [r3, #0x4]
	mov	r2, #0xd
	mul	r0, r0, r2
	ldr	r1, .L338+0x4
	add	r0, r0, r1
	str	r0, [sp, #0xc]
	ldrh	r0, [r3, #0x6]
	mul	r0, r0, r2
	add	r0, r0, r1
	str	r0, [sp, #0x10]
	b	.L299
.L339:
	.align	2, 0
.L338:
	.word	gApprenticeQuestionData
	.word	gMoveNames
.L315:
	mov	r0, #0x12
	mov	sl, r0
	mov	r6, #0x8
	ldr	r0, .L340
	str	r0, [sp, #0xc]
	ldr	r0, .L340+0x4
	str	r0, [sp, #0x10]
	b	.L299
.L341:
	.align	2, 0
.L340:
	.word	gText_Give
	.word	gText_NoNeed
.L316:
	mov	r1, #0x14
	mov	sl, r1
	mov	r6, #0x8
	ldr	r0, .L342
	str	r0, [sp, #0xc]
	ldr	r0, .L342+0x4
	str	r0, [sp, #0x10]
	b	.L299
.L343:
	.align	2, 0
.L342:
	.word	gText_Yes
	.word	gText_No
.L317:
	mov	r0, #0x0
	mov	sl, r0
	mov	r6, #0x0
.L299:
	mov	r5, #0x0
	mov	r4, #0x0
	lsl	r1, r7, #0x19
	mov	r8, r1
	cmp	r4, r7
	bcs	.L320	@cond_branch
.L322:
	lsl	r0, r4, #0x2
	add	r0, r0, sp
	add	r0, r0, #0xc
	ldr	r1, [r0]
	mov	r0, #0x1
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, r5
	ble	.L321	@cond_branch
	add	r5, r0, #0
.L321:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r7
	bcc	.L322	@cond_branch
.L320:
	add	r0, r5, #0
	bl	ConvertPixelWidthToTileWidth
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, sl
	add	r1, r4, #0
	bl	ScriptMenu_AdjustLeftCoordFromWidth
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	mov	r0, r8
	lsr	r3, r0, #0x18
	mov	r0, sl
	add	r1, r6, #0
	add	r2, r4, #0
	bl	CreateAndShowWindow
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x0
	bl	SetStandardWindowBorderStyle
	mov	r4, #0x0
	cmp	r4, r7
	bcs	.L326	@cond_branch
.L328:
	lsl	r0, r4, #0x2
	add	r0, r0, sp
	add	r0, r0, #0xc
	ldr	r2, [r0]
	lsl	r0, r4, #0x4
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	add	r0, r5, #0
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r7
	bcc	.L328	@cond_branch
.L326:
	add	r0, r5, #0
	add	r1, r7, #0
	mov	r2, #0x0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
	mov	r0, #0x1
	add	r1, r7, #0
	add	r2, r5, #0
	bl	CreateChooseAnswerTask
.L298:
	add	sp, sp, #0x18
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 CreateApprenticeMenu,.Lfe16-CreateApprenticeMenu
	.align	2, 0
	.type	 Task_ChooseAnswer,function
	.thumb_func
Task_ChooseAnswer:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L354
	add	r4, r0, r1
	mov	r1, #0xa
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L345	@cond_branch
	bl	Menu_ProcessInputNoWrap
	b	.L353
.L355:
	.align	2, 0
.L354:
	.word	gTasks+0x8
.L345:
	bl	Menu_ProcessInput
.L353:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	mov	r0, #0x2
	neg	r0, r0
	cmp	r1, r0
	beq	.L344	@cond_branch
	add	r0, r0, #0x1
	cmp	r1, r0
	bne	.L351	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L344	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	ldr	r1, .L356
	mov	r0, #0x7f
	strh	r0, [r1]
	b	.L347
.L357:
	.align	2, 0
.L356:
	.word	gSpecialVar_Result
.L351:
	ldr	r0, .L358
	strh	r1, [r0]
.L347:
	ldrb	r0, [r4, #0xc]
	bl	RemoveAndHideWindow
	add	r0, r5, #0
	bl	DestroyTask
	bl	EnableBothScriptContexts
.L344:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L359:
	.align	2, 0
.L358:
	.word	gSpecialVar_Result
.Lfe17:
	.size	 Task_ChooseAnswer,.Lfe17-Task_ChooseAnswer
	.align	2, 0
	.type	 CreateAndShowWindow,function
	.thumb_func
CreateAndShowWindow:
	push	{r4, r5, lr}
	add	sp, sp, #-0x20
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x11
	add	r4, r4, r0
	lsr	r4, r4, #0x18
	add	r5, r5, r0
	lsr	r5, r5, #0x18
	str	r2, [sp]
	str	r3, [sp, #0x4]
	mov	r0, #0xf
	str	r0, [sp, #0x8]
	mov	r0, #0x64
	str	r0, [sp, #0xc]
	add	r0, sp, #0x10
	mov	r1, #0x0
	add	r2, r4, #0
	add	r3, r5, #0
	bl	CreateWindowTemplate
	ldr	r0, [sp, #0x10]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #0x14]		@ created by thumb_load_double_from_address
	str	r0, [sp, #0x18]
	str	r1, [sp, #0x1c]
	add	r0, sp, #0x18
	bl	AddWindow
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	PutWindowTilemap
	add	r0, r4, #0
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	r0, r4, #0
	add	sp, sp, #0x20
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe18:
	.size	 CreateAndShowWindow,.Lfe18-CreateAndShowWindow
	.align	2, 0
	.type	 RemoveAndHideWindow,function
	.thumb_func
RemoveAndHideWindow:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	mov	r1, #0x1
	bl	ClearStdWindowAndFrameToTransparent
	add	r0, r4, #0
	bl	RemoveWindow
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 RemoveAndHideWindow,.Lfe19-RemoveAndHideWindow
	.align	2, 0
	.type	 CreateChooseAnswerTask,function
	.thumb_func
CreateChooseAnswerTask:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	lsl	r2, r2, #0x18
	lsr	r6, r2, #0x18
	ldr	r0, .L366
	mov	r1, #0x50
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L366+0x4
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r0, r1
	strh	r4, [r1, #0x10]
	cmp	r5, #0x3
	bls	.L363	@cond_branch
	mov	r0, #0x1
	b	.L365
.L367:
	.align	2, 0
.L366:
	.word	Task_ChooseAnswer
	.word	gTasks
.L363:
	mov	r0, #0x0
.L365:
	strh	r0, [r1, #0x12]
	ldr	r1, .L368
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r6, [r0, #0x14]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gTasks
.Lfe20:
	.size	 CreateChooseAnswerTask,.Lfe20-CreateChooseAnswerTask
	.align	2, 0
	.globl	CallApprenticeFunction
	.type	 CallApprenticeFunction,function
	.thumb_func
CallApprenticeFunction:
	push	{lr}
	ldr	r1, .L371
	ldr	r0, .L371+0x4
	ldrh	r0, [r0]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	sApprenticeFunctions
	.word	gSpecialVar_0x8004
.Lfe21:
	.size	 CallApprenticeFunction,.Lfe21-CallApprenticeFunction
	.align	2, 0
	.type	 Script_ResetPlayerApprentice,function
	.thumb_func
Script_ResetPlayerApprentice:
	push	{r4, r5, r6, r7, lr}
	bl	SetApprenticeId
	ldr	r3, .L384
	ldr	r1, [r3]
	add	r1, r1, #0xb1
	ldrb	r2, [r1]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0xb1
	ldrb	r2, [r1]
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0xb1
	ldrb	r2, [r1]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r3]
	add	r1, r1, #0xb2
	ldrb	r2, [r1]
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	mov	r4, #0x0
	mov	r1, #0x0
.L377:
	ldr	r0, [r3]
	add	r0, r0, #0xb4
	add	r0, r0, r4
	strb	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x2
	bls	.L377	@cond_branch
	mov	r4, #0x0
	ldr	r5, .L384
	mov	r0, #0x4
	neg	r0, r0
	mov	ip, r0
	mov	r7, #0xd
	neg	r7, r7
	mov	r6, #0x31
	neg	r6, r6
.L382:
	ldr	r1, [r5]
	lsl	r3, r4, #0x2
	add	r1, r1, r3
	add	r1, r1, #0xb8
	ldrb	r2, [r1]
	mov	r0, ip
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, #0xb8
	ldrb	r2, [r1]
	add	r0, r7, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, #0xb8
	ldrb	r2, [r1]
	add	r0, r6, #0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r1, [r5]
	add	r1, r1, r3
	add	r1, r1, #0xb8
	ldrb	r2, [r1]
	mov	r0, #0x3f
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, r3
	add	r0, r0, #0xba
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x8
	bls	.L382	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L385:
	.align	2, 0
.L384:
	.word	gSaveBlock2Ptr
.Lfe22:
	.size	 Script_ResetPlayerApprentice,.Lfe22-Script_ResetPlayerApprentice
	.align	2, 0
	.type	 Script_GivenApprenticeLvlMode,function
	.thumb_func
Script_GivenApprenticeLvlMode:
	push	{lr}
	bl	GivenApprenticeLvlMode
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	bne	.L387	@cond_branch
	ldr	r0, .L389
	strh	r1, [r0]
	b	.L388
.L390:
	.align	2, 0
.L389:
	.word	gSpecialVar_Result
.L387:
	ldr	r1, .L391
	mov	r0, #0x1
	strh	r0, [r1]
.L388:
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	gSpecialVar_Result
.Lfe23:
	.size	 Script_GivenApprenticeLvlMode,.Lfe23-Script_GivenApprenticeLvlMode
	.align	2, 0
	.type	 Script_SetApprenticeLvlMode,function
	.thumb_func
Script_SetApprenticeLvlMode:
	push	{lr}
	ldr	r0, .L394
	ldrb	r0, [r0]
	bl	SetPlayersApprenticeLvlMode
	pop	{r0}
	bx	r0
.L395:
	.align	2, 0
.L394:
	.word	gSpecialVar_0x8005
.Lfe24:
	.size	 Script_SetApprenticeLvlMode,.Lfe24-Script_SetApprenticeLvlMode
	.align	2, 0
	.type	 Script_SetApprenticeId,function
	.thumb_func
Script_SetApprenticeId:
	push	{lr}
	bl	SetApprenticeId
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 Script_SetApprenticeId,.Lfe25-Script_SetApprenticeId
	.align	2, 0
	.type	 Script_SetRandomQuestionData,function
	.thumb_func
Script_SetRandomQuestionData:
	push	{lr}
	bl	SetRandomQuestionData
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 Script_SetRandomQuestionData,.Lfe26-Script_SetRandomQuestionData
	.align	2, 0
	.type	 IncrementQuestionsAnswered,function
	.thumb_func
IncrementQuestionsAnswered:
	ldr	r0, .L399
	ldr	r2, [r0]
	add	r2, r2, #0xb1
	ldrb	r3, [r2]
	lsl	r1, r3, #0x1a
	lsr	r1, r1, #0x1c
	add	r1, r1, #0x1
	mov	r0, #0xf
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x3d
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	bx	lr
.L400:
	.align	2, 0
.L399:
	.word	gSaveBlock2Ptr
.Lfe27:
	.size	 IncrementQuestionsAnswered,.Lfe27-IncrementQuestionsAnswered
	.align	2, 0
	.type	 GetNumApprenticePartyMonsAssigned,function
	.thumb_func
GetNumApprenticePartyMonsAssigned:
	ldr	r1, .L402
	ldr	r0, .L402+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	strh	r0, [r1]
	bx	lr
.L403:
	.align	2, 0
.L402:
	.word	gSpecialVar_Result
	.word	gSaveBlock2Ptr
.Lfe28:
	.size	 GetNumApprenticePartyMonsAssigned,.Lfe28-GetNumApprenticePartyMonsAssigned
	.align	2, 0
	.type	 IsFinalQuestion,function
	.thumb_func
IsFinalQuestion:
	push	{lr}
	ldr	r3, .L411
	ldr	r0, [r3]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r1, r0, #0x3
	cmp	r1, #0
	bge	.L405	@cond_branch
	ldr	r1, .L411+0x4
	mov	r0, #0x0
	strh	r0, [r1]
	b	.L406
.L412:
	.align	2, 0
.L411:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_Result
.L405:
	ldr	r2, .L413
	cmp	r1, #0x8
	ble	.L407	@cond_branch
	mov	r0, #0x1
	strh	r0, [r2]
.L407:
	ldr	r0, [r3]
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L408	@cond_branch
	mov	r0, #0x1
	b	.L410
.L414:
	.align	2, 0
.L413:
	.word	gSpecialVar_Result
.L408:
	mov	r0, #0x0
.L410:
	strh	r0, [r2]
.L406:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 IsFinalQuestion,.Lfe29-IsFinalQuestion
	.align	2, 0
	.type	 Script_CreateApprenticeMenu,function
	.thumb_func
Script_CreateApprenticeMenu:
	push	{lr}
	ldr	r0, .L416
	ldrb	r0, [r0]
	bl	CreateApprenticeMenu
	pop	{r0}
	bx	r0
.L417:
	.align	2, 0
.L416:
	.word	gSpecialVar_0x8005
.Lfe30:
	.size	 Script_CreateApprenticeMenu,.Lfe30-Script_CreateApprenticeMenu
	.align	2, 0
	.type	 Task_WaitForPrintingMessage,function
	.thumb_func
Task_WaitForPrintingMessage:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	RunTextPrintersAndIsPrinter0Active
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L419	@cond_branch
	add	r0, r4, #0
	bl	DestroyTask
	ldr	r0, .L422
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L420	@cond_branch
	ldr	r0, .L422+0x4
	bl	ExecuteFuncAfterButtonPress
	b	.L419
.L423:
	.align	2, 0
.L422:
	.word	gSpecialVar_0x8005
	.word	EnableBothScriptContexts
.L420:
	bl	EnableBothScriptContexts
.L419:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 Task_WaitForPrintingMessage,.Lfe31-Task_WaitForPrintingMessage
	.align	2, 0
	.type	 PrintApprenticeMessage,function
	.thumb_func
PrintApprenticeMessage:
	push	{lr}
	ldr	r1, .L461
	ldrh	r0, [r1]
	cmp	r0, #0x6
	bne	.L425	@cond_branch
	ldr	r1, .L461+0x4
	ldr	r0, .L461+0x8
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	b	.L459
.L462:
	.align	2, 0
.L461:
	.word	gSpecialVar_0x8006
	.word	sApprenticeWhichMonTexts
	.word	gSaveBlock2Ptr
.L425:
	cmp	r0, #0x7
	bne	.L427	@cond_branch
	ldr	r1, .L463
	ldr	r0, .L463+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	b	.L459
.L464:
	.align	2, 0
.L463:
	.word	sApprenticeWhichMonTexts
	.word	gSaveBlock2Ptr
.L427:
	cmp	r0, #0x8
	bne	.L429	@cond_branch
	ldr	r1, .L465
	ldr	r0, .L465+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	b	.L459
.L466:
	.align	2, 0
.L465:
	.word	sApprenticeWhichMoveTexts
	.word	gSaveBlock2Ptr
.L429:
	cmp	r0, #0x9
	bne	.L431	@cond_branch
	ldr	r1, .L467
	ldr	r0, .L467+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	b	.L459
.L468:
	.align	2, 0
.L467:
	.word	sApprenticeWhichMoveTexts
	.word	gSaveBlock2Ptr
.L431:
	cmp	r0, #0x4
	bne	.L433	@cond_branch
	ldr	r1, .L469
	ldr	r0, .L469+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	b	.L459
.L470:
	.align	2, 0
.L469:
	.word	sApprenticeWhichMonFirstTexts
	.word	gSaveBlock2Ptr
.L433:
	cmp	r0, #0x5
	bne	.L435	@cond_branch
	ldr	r1, .L471
	ldr	r0, .L471+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	b	.L459
.L472:
	.align	2, 0
.L471:
	.word	sApprenticeWhichMonFirstTexts
	.word	gSaveBlock2Ptr
.L435:
	cmp	r0, #0xa
	bne	.L437	@cond_branch
	ldr	r2, .L473
	ldr	r0, .L473+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	b	.L460
.L474:
	.align	2, 0
.L473:
	.word	sApprenticeHeldItemTexts
	.word	gSaveBlock2Ptr
.L437:
	cmp	r0, #0xb
	bne	.L439	@cond_branch
	ldr	r1, .L475
	ldr	r0, .L475+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	b	.L459
.L476:
	.align	2, 0
.L475:
	.word	sApprenticePickWinSpeechTexts
	.word	gSaveBlock2Ptr
.L439:
	cmp	r0, #0xc
	bne	.L441	@cond_branch
	ldr	r2, .L477
	ldr	r0, .L477+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0xc
	b	.L460
.L478:
	.align	2, 0
.L477:
	.word	sApprenticeHeldItemTexts
	.word	gSaveBlock2Ptr
.L441:
	cmp	r0, #0xd
	bne	.L443	@cond_branch
	ldr	r2, .L479
	ldr	r0, .L479+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x4
	b	.L460
.L480:
	.align	2, 0
.L479:
	.word	sApprenticeHeldItemTexts
	.word	gSaveBlock2Ptr
.L443:
	ldrh	r0, [r1]
	cmp	r0, #0x10
	bne	.L445	@cond_branch
	ldr	r2, .L481
	ldr	r0, .L481+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x10
	b	.L460
.L482:
	.align	2, 0
.L481:
	.word	sApprenticeHeldItemTexts
	.word	gSaveBlock2Ptr
.L445:
	cmp	r0, #0xe
	bne	.L447	@cond_branch
	ldr	r2, .L483
	ldr	r0, .L483+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r2, r2, #0x8
.L460:
	add	r0, r0, r2
	ldr	r1, [r0]
	b	.L426
.L484:
	.align	2, 0
.L483:
	.word	sApprenticeHeldItemTexts
	.word	gSaveBlock2Ptr
.L447:
	cmp	r0, #0xf
	bne	.L449	@cond_branch
	ldr	r1, .L485
	ldr	r0, .L485+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r1, r1, #0x4
	b	.L459
.L486:
	.align	2, 0
.L485:
	.word	sApprenticePickWinSpeechTexts
	.word	gSaveBlock2Ptr
.L449:
	cmp	r0, #0
	bne	.L451	@cond_branch
	ldr	r1, .L487
	ldr	r0, .L487+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	b	.L459
.L488:
	.align	2, 0
.L487:
	.word	sApprenticeFirstMeetingTexts
	.word	gSaveBlock2Ptr
.L451:
	cmp	r0, #0x1
	bne	.L453	@cond_branch
	ldr	r1, .L489
	ldr	r0, .L489+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r1, r1, #0x4
	b	.L459
.L490:
	.align	2, 0
.L489:
	.word	sApprenticeFirstMeetingTexts
	.word	gSaveBlock2Ptr
.L453:
	cmp	r0, #0x2
	bne	.L455	@cond_branch
	ldr	r1, .L491
	ldr	r0, .L491+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r1, r1, #0x8
	b	.L459
.L492:
	.align	2, 0
.L491:
	.word	sApprenticeFirstMeetingTexts
	.word	gSaveBlock2Ptr
.L455:
	cmp	r0, #0x3
	bne	.L457	@cond_branch
	ldr	r1, .L493
	ldr	r0, .L493+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	lsl	r0, r0, #0x4
	add	r1, r1, #0xc
.L459:
	add	r0, r0, r1
	ldr	r1, [r0]
	b	.L426
.L494:
	.align	2, 0
.L493:
	.word	sApprenticeFirstMeetingTexts
	.word	gSaveBlock2Ptr
.L457:
	bl	EnableBothScriptContexts
	b	.L424
.L426:
	ldr	r0, .L495
	bl	StringExpandPlaceholders
	mov	r0, #0x1
	bl	AddTextPrinterForMessage
	ldr	r0, .L495+0x4
	mov	r1, #0x1
	bl	CreateTask
.L424:
	pop	{r0}
	bx	r0
.L496:
	.align	2, 0
.L495:
	.word	gStringVar4
	.word	Task_WaitForPrintingMessage
.Lfe32:
	.size	 PrintApprenticeMessage,.Lfe32-PrintApprenticeMessage
	.align	2, 0
	.type	 Script_PrintApprenticeMessage,function
	.thumb_func
Script_PrintApprenticeMessage:
	push	{lr}
	bl	ScriptContext2_Enable
	bl	FreezeObjectEvents
	bl	sub_808B864
	bl	sub_808BCF4
	mov	r0, #0x0
	mov	r1, #0x1
	bl	DrawDialogueFrame
	bl	PrintApprenticeMessage
	pop	{r0}
	bx	r0
.Lfe33:
	.size	 Script_PrintApprenticeMessage,.Lfe33-Script_PrintApprenticeMessage
	.align	2, 0
	.type	 ApprenticeGetQuestion,function
	.thumb_func
ApprenticeGetQuestion:
	push	{lr}
	ldr	r0, .L511
	ldr	r2, [r0]
	add	r0, r2, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1a
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bhi	.L499	@cond_branch
	ldr	r1, .L511+0x4
	mov	r0, #0x2
	b	.L510
.L512:
	.align	2, 0
.L511:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_Result
.L499:
	lsr	r0, r1, #0x1c
	cmp	r0, #0xb
	bhi	.L507	@cond_branch
	lsr	r0, r1, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r2, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x2
	beq	.L505	@cond_branch
	cmp	r0, #0x2
	bgt	.L509	@cond_branch
	cmp	r0, #0x1
	beq	.L504	@cond_branch
	b	.L507
.L509:
	cmp	r0, #0x3
	beq	.L506	@cond_branch
	b	.L507
.L504:
	ldr	r1, .L513
	mov	r0, #0x4
	b	.L510
.L514:
	.align	2, 0
.L513:
	.word	gSpecialVar_Result
.L505:
	ldr	r1, .L515
	mov	r0, #0x3
	b	.L510
.L516:
	.align	2, 0
.L515:
	.word	gSpecialVar_Result
.L506:
	ldr	r1, .L517
	mov	r0, #0x1
	b	.L510
.L518:
	.align	2, 0
.L517:
	.word	gSpecialVar_Result
.L507:
	ldr	r1, .L519
	mov	r0, #0x5
.L510:
	strh	r0, [r1]
	pop	{r0}
	bx	r0
.L520:
	.align	2, 0
.L519:
	.word	gSpecialVar_Result
.Lfe34:
	.size	 ApprenticeGetQuestion,.Lfe34-ApprenticeGetQuestion
	.align	2, 0
	.type	 SetApprenticePartyMon,function
	.thumb_func
SetApprenticePartyMon:
	push	{r4, lr}
	ldr	r0, .L523
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L522	@cond_branch
	ldr	r4, .L523+0x4
	ldr	r0, .L523+0x8
	ldr	r2, [r0]
	add	r2, r2, #0xb2
	ldrb	r3, [r2]
	lsl	r0, r3, #0x1d
	lsr	r0, r0, #0x1d
	mov	r1, #0x1
	ldrb	r4, [r4]
	lsl	r1, r1, r4
	orr	r1, r1, r0
	mov	r0, #0x7
	and	r1, r1, r0
	mov	r0, #0x8
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
.L522:
	pop	{r4}
	pop	{r0}
	bx	r0
.L524:
	.align	2, 0
.L523:
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_0x8006
	.word	gSaveBlock2Ptr
.Lfe35:
	.size	 SetApprenticePartyMon,.Lfe35-SetApprenticePartyMon
	.align	2, 0
	.type	 SetApprenticeMonMove,function
	.thumb_func
SetApprenticeMonMove:
	push	{lr}
	ldr	r0, .L529
	ldr	r3, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x1a
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bls	.L526	@cond_branch
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L529+0x4
	ldrh	r0, [r0]
	cmp	r0, #0
	beq	.L527	@cond_branch
	lsl	r2, r2, #0x2
	add	r2, r3, r2
	add	r2, r2, #0xb8
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	b	.L526
.L530:
	.align	2, 0
.L529:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
.L527:
	lsl	r0, r2, #0x2
	add	r0, r3, r0
	add	r0, r0, #0xb8
	ldrb	r2, [r0]
	mov	r1, #0x3f
	and	r1, r1, r2
	strb	r1, [r0]
.L526:
	pop	{r0}
	bx	r0
.Lfe36:
	.size	 SetApprenticeMonMove,.Lfe36-SetApprenticeMonMove
	.align	2, 0
	.type	 InitQuestionData,function
	.thumb_func
InitQuestionData:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r6, #0x0
	mov	r2, #0x0
	ldr	r1, .L547
	ldr	r0, [r1]
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	ldr	r3, .L547+0x4
	mov	r9, r3
	cmp	r0, #0
	beq	.L533	@cond_branch
	add	r3, r1, #0
.L534:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x8
	bhi	.L533	@cond_branch
	ldr	r0, [r3]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L534	@cond_branch
.L533:
	mov	r4, r9
	mov	r0, #0x8
	bl	AllocZeroed
	add	r7, r0, #0
	str	r7, [r4]
	ldr	r0, .L547+0x8
	ldrh	r0, [r0]
	cmp	r0, #0x2
	bne	.L538	@cond_branch
	ldr	r0, .L547
	ldr	r5, [r0]
	add	r6, r5, #0
	add	r6, r6, #0xb1
	ldrb	r0, [r6]
	lsl	r1, r0, #0x1a
	lsr	r0, r1, #0x1c
	cmp	r0, #0x2
	bls	.LCB3821
	b	.L540	@long jump
.LCB3821:
	add	r2, r5, #0
	add	r2, r2, #0xb4
	add	r0, r2, r0
	ldrb	r0, [r0]
	lsr	r4, r0, #0x4
	ldr	r3, .L547+0xc
	lsl	r1, r4, #0x1
	add	r5, r5, #0xb0
	ldrb	r0, [r5]
	mov	r4, #0x58
	mul	r0, r0, r4
	add	r1, r1, r0
	add	r3, r3, #0x34
	add	r1, r1, r3
	ldrh	r0, [r1]
	strh	r0, [r7, #0x2]
	ldrb	r0, [r6]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	add	r2, r2, r0
	ldrb	r1, [r2]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x1
	ldrb	r1, [r5]
	mul	r1, r1, r4
	add	r0, r0, r1
	add	r0, r0, r3
	b	.L546
.L548:
	.align	2, 0
.L547:
	.word	gSaveBlock2Ptr
	.word	gApprenticeQuestionData
	.word	gSpecialVar_0x8005
	.word	gApprentices
.L538:
	cmp	r0, #0x3
	bne	.L541	@cond_branch
	ldr	r0, .L549
	mov	r8, r0
	ldr	r5, [r0]
	mov	r1, #0xb1
	add	r1, r1, r5
	mov	ip, r1
	ldrb	r0, [r1]
	lsl	r2, r0, #0x1a
	lsr	r0, r2, #0x1c
	cmp	r0, #0x2
	bhi	.LCB3888
	b	.L540	@long jump
.LCB3888:
	add	r1, r0, #0
	add	r0, r6, #0x3
	cmp	r1, r0
	blt	.LCB3894
	b	.L540	@long jump
.LCB3894:
	add	r0, r1, #0
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x2
	beq	.LCB3908
	b	.L540	@long jump
.LCB3908:
	add	r0, r1, #0
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r6, r0, #0x1e
	add	r0, r5, #0
	add	r0, r0, #0xb2
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1d
	asr	r1, r1, r6
	mov	r0, #0x1
	and	r1, r1, r0
	add	r0, r5, #0
	add	r0, r0, #0xb4
	add	r0, r0, r6
	ldrb	r4, [r0]
	lsl	r1, r1, #0x2
	asr	r4, r4, r1
	mov	r0, #0xf
	and	r4, r4, r0
	ldr	r2, .L549+0x4
	lsl	r1, r4, #0x1
	add	r0, r5, #0
	add	r0, r0, #0xb0
	ldrb	r3, [r0]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, r0
	add	r2, r2, #0x34
	add	r1, r1, r2
	ldrh	r0, [r1]
	strh	r0, [r7]
	mov	r3, ip
	ldrb	r0, [r3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r5, r0
	add	r0, r0, #0xb8
	ldrb	r2, [r0]
	lsl	r2, r2, #0x1a
	lsr	r2, r2, #0x1e
	add	r0, r6, #0
	add	r1, r4, #0
	bl	GetDefaultMove
	mov	r1, r9
	ldr	r2, [r1]
	strh	r0, [r2, #0x4]
	mov	r3, r8
	ldr	r1, [r3]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xba
	ldrh	r0, [r1]
	strh	r0, [r2, #0x6]
	b	.L540
.L550:
	.align	2, 0
.L549:
	.word	gSaveBlock2Ptr
	.word	gApprentices
.L541:
	cmp	r0, #0x4
	bne	.L540	@cond_branch
	ldr	r0, .L551
	ldr	r3, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x1a
	lsr	r0, r2, #0x1c
	cmp	r0, #0x2
	bls	.L540	@cond_branch
	add	r1, r0, #0
	add	r0, r6, #0x3
	cmp	r1, r0
	bge	.L540	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x1
	bne	.L540	@cond_branch
	add	r0, r1, #0
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1c
	lsr	r6, r0, #0x1e
	add	r0, r3, #0
	add	r0, r0, #0xb2
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1d
	lsr	r1, r1, #0x1d
	asr	r1, r1, r6
	mov	r0, #0x1
	and	r1, r1, r0
	add	r0, r3, #0
	add	r0, r0, #0xb4
	add	r0, r0, r6
	ldrb	r0, [r0]
	lsl	r1, r1, #0x2
	asr	r0, r0, r1
	mov	r1, #0xf
	and	r0, r0, r1
	ldr	r2, .L551+0x4
	lsl	r0, r0, #0x1
	add	r1, r3, #0
	add	r1, r1, #0xb0
	ldrb	r3, [r1]
	mov	r1, #0x58
	mul	r1, r1, r3
	add	r0, r0, r1
	add	r2, r2, #0x34
	add	r0, r0, r2
.L546:
	ldrh	r0, [r0]
	strh	r0, [r7]
.L540:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L552:
	.align	2, 0
.L551:
	.word	gSaveBlock2Ptr
	.word	gApprentices
.Lfe37:
	.size	 InitQuestionData,.Lfe37-InitQuestionData
	.align	2, 0
	.type	 FreeQuestionData,function
	.thumb_func
FreeQuestionData:
	push	{r4, lr}
	ldr	r4, .L554
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	pop	{r4}
	pop	{r0}
	bx	r0
.L555:
	.align	2, 0
.L554:
	.word	gApprenticeQuestionData
.Lfe38:
	.size	 FreeQuestionData,.Lfe38-FreeQuestionData
	.align	2, 0
	.type	 ApprenticeBufferString,function
	.thumb_func
ApprenticeBufferString:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x10
	ldr	r0, .L587
	ldrh	r0, [r0]
	cmp	r0, #0x1
	beq	.L559	@cond_branch
	cmp	r0, #0x1
	bgt	.L563	@cond_branch
	cmp	r0, #0
	beq	.L558	@cond_branch
	b	.L556
.L588:
	.align	2, 0
.L587:
	.word	gSpecialVar_0x8005
.L563:
	cmp	r0, #0x2
	beq	.L560	@cond_branch
	b	.L556
.L558:
	ldr	r5, .L589
	b	.L557
.L590:
	.align	2, 0
.L589:
	.word	gStringVar1
.L559:
	ldr	r5, .L591
	b	.L557
.L592:
	.align	2, 0
.L591:
	.word	gStringVar2
.L560:
	ldr	r5, .L593
.L557:
	ldr	r0, .L593+0x4
	ldrh	r0, [r0]
	cmp	r0, #0x9
	bls	.LCB4181
	b	.L556	@long jump
.LCB4181:
	lsl	r0, r0, #0x2
	ldr	r1, .L593+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L594:
	.align	2, 0
.L593:
	.word	gStringVar3
	.word	gSpecialVar_0x8006
	.word	.L584
	.align	2, 0
	.align	2, 0
.L584:
	.word	.L565
	.word	.L566
	.word	.L567
	.word	.L568
	.word	.L569
	.word	.L570
	.word	.L571
	.word	.L575
	.word	.L572
	.word	.L576
.L565:
	ldr	r0, .L595
	ldr	r0, [r0]
	ldrh	r1, [r0]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L595+0x4
	add	r1, r1, r0
	b	.L586
.L596:
	.align	2, 0
.L595:
	.word	gApprenticeQuestionData
	.word	gSpeciesNames
.L566:
	ldr	r0, .L597
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x2]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L597+0x4
	add	r1, r1, r0
	b	.L586
.L598:
	.align	2, 0
.L597:
	.word	gApprenticeQuestionData
	.word	gSpeciesNames
.L567:
	ldr	r0, .L599
	ldr	r0, [r0]
	ldrh	r1, [r0]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L599+0x4
	add	r1, r1, r0
	b	.L586
.L600:
	.align	2, 0
.L599:
	.word	gApprenticeQuestionData
	.word	gSpeciesNames
.L568:
	ldr	r0, .L601
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x4]
	mov	r0, #0xd
	mul	r1, r1, r0
	ldr	r0, .L601+0x4
	add	r1, r1, r0
	b	.L586
.L602:
	.align	2, 0
.L601:
	.word	gApprenticeQuestionData
	.word	gMoveNames
.L569:
	ldr	r0, .L603
	ldr	r0, [r0]
	ldrh	r1, [r0, #0x6]
	mov	r0, #0xd
	mul	r1, r1, r0
	ldr	r0, .L603+0x4
	add	r1, r1, r0
	b	.L586
.L604:
	.align	2, 0
.L603:
	.word	gApprenticeQuestionData
	.word	gMoveNames
.L570:
	ldr	r0, .L605
	ldr	r1, [r0]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xba
	ldrh	r0, [r1]
	bl	ItemId_GetName
	add	r1, r0, #0
	b	.L586
.L606:
	.align	2, 0
.L605:
	.word	gSaveBlock2Ptr
.L571:
	ldr	r0, .L607
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	mov	r1, #0x2
	bl	GetApprenticeNameInLanguage
	add	r1, r0, #0
	mov	r0, sp
	mov	r2, #0x2
	bl	TVShowConvertInternationalString
	add	r0, r5, #0
	mov	r1, sp
	bl	StringCopy
	b	.L556
.L608:
	.align	2, 0
.L607:
	.word	gSaveBlock2Ptr
.L572:
	ldr	r0, .L609
	ldr	r0, [r0]
	add	r0, r0, #0xb1
	ldrb	r1, [r0]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0x1
	bne	.L573	@cond_branch
	ldr	r1, .L609+0x4
	b	.L586
.L610:
	.align	2, 0
.L609:
	.word	gSaveBlock2Ptr
	.word	gText_Lv50
.L573:
	ldr	r1, .L611
	b	.L586
.L612:
	.align	2, 0
.L611:
	.word	gText_OpenLevel
.L575:
	ldr	r0, .L613
	ldr	r0, [r0]
	mov	r1, #0x82
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	FrontierSpeechToString
	ldr	r1, .L613+0x4
.L586:
	add	r0, r5, #0
	bl	StringCopy
	b	.L556
.L614:
	.align	2, 0
.L613:
	.word	gSaveBlock2Ptr
	.word	gStringVar4
.L576:
	ldr	r0, .L615
	ldr	r3, [r0]
	add	r1, r3, #0
	add	r1, r1, #0xb1
	ldrb	r1, [r1]
	lsl	r4, r1, #0x18
	lsr	r1, r4, #0x1e
	add	r6, r0, #0
	cmp	r1, #0x2
	bhi	.L577	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xb4
	add	r0, r0, r1
	ldrb	r2, [r0]
	add	r0, r3, #0
	add	r0, r0, #0xb2
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1d
	lsr	r0, r0, #0x1d
	asr	r0, r0, r1
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	asr	r2, r2, r0
	mov	r0, #0xf
	and	r2, r2, r0
	b	.L583
.L616:
	.align	2, 0
.L615:
	.word	gSaveBlock2Ptr
.L577:
	mov	r2, #0x0
.L583:
	ldr	r3, .L617
	lsl	r1, r2, #0x1
	ldr	r0, [r6]
	add	r0, r0, #0xb0
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, r0
	add	r3, r3, #0x34
	add	r1, r1, r3
	ldrh	r1, [r1]
	mov	r0, #0xb
	mul	r1, r1, r0
	ldr	r0, .L617+0x4
	add	r1, r1, r0
	add	r0, r5, #0
	bl	StringCopy
.L556:
	add	sp, sp, #0x10
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L618:
	.align	2, 0
.L617:
	.word	gApprentices
	.word	gSpeciesNames
.Lfe39:
	.size	 ApprenticeBufferString,.Lfe39-ApprenticeBufferString
	.align	2, 0
	.type	 SetLeadApprenticeMon,function
	.thumb_func
SetLeadApprenticeMon:
	ldr	r0, .L620
	ldr	r2, [r0]
	ldr	r0, .L620+0x4
	ldrb	r1, [r0]
	add	r2, r2, #0xb1
	lsl	r1, r1, #0x6
	ldrb	r3, [r2]
	mov	r0, #0x3f
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	bx	lr
.L621:
	.align	2, 0
.L620:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
.Lfe40:
	.size	 SetLeadApprenticeMon,.Lfe40-SetLeadApprenticeMon
	.align	2, 0
	.type	 Script_ApprenticeOpenBagMenu,function
	.thumb_func
Script_ApprenticeOpenBagMenu:
	push	{lr}
	bl	ApprenticeOpenBagMenu
	pop	{r0}
	bx	r0
.Lfe41:
	.size	 Script_ApprenticeOpenBagMenu,.Lfe41-Script_ApprenticeOpenBagMenu
	.align	2, 0
	.type	 TrySetApprenticeHeldItem,function
	.thumb_func
TrySetApprenticeHeldItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	ldr	r1, .L643
	ldr	r3, [r1]
	add	r0, r3, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	add	r7, r1, #0
	cmp	r0, #0x2
	bhi	.LCB4541
	b	.L623	@long jump
.LCB4541:
	mov	r5, #0x0
	mov	r2, #0x0
	add	r0, r3, #0
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	ldr	r1, .L643+0x4
	mov	ip, r1
	ldr	r1, .L643+0x8
	mov	r8, r1
	cmp	r0, #0
	beq	.L626	@cond_branch
	add	r3, r7, #0
.L627:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x8
	bhi	.L626	@cond_branch
	ldr	r0, [r3]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L627	@cond_branch
.L626:
	mov	r4, #0x0
	cmp	r4, r5
	bcs	.L632	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	cmp	r4, r0
	bge	.L632	@cond_branch
	add	r6, r7, #0
	mov	r9, r4
.L634:
	ldr	r3, [r6]
	lsl	r0, r4, #0x2
	add	r2, r3, r0
	add	r0, r2, #0
	add	r0, r0, #0xb8
	ldrb	r1, [r0]
	lsl	r0, r1, #0x1e
	lsr	r0, r0, #0x1e
	cmp	r0, #0x1
	bne	.L633	@cond_branch
	lsr	r0, r1, #0x6
	cmp	r0, #0
	beq	.L633	@cond_branch
	add	r0, r2, #0
	add	r0, r0, #0xba
	ldrh	r0, [r0]
	mov	r2, ip
	ldrh	r2, [r2]
	cmp	r0, r2
	bne	.L633	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r0, r3, r0
	add	r0, r0, #0xb8
	ldrb	r2, [r0]
	mov	r1, #0x3f
	and	r1, r1, r2
	strb	r1, [r0]
	ldr	r1, [r6]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	mov	r2, ip
	ldrh	r0, [r2]
	add	r1, r1, #0xba
	strh	r0, [r1]
	mov	r1, r9
	mov	r0, r8
	strh	r1, [r0]
	b	.L623
.L644:
	.align	2, 0
.L643:
	.word	gSaveBlock2Ptr
	.word	gSpecialVar_0x8005
	.word	gSpecialVar_Result
.L633:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, r5
	bcs	.L632	@cond_branch
	ldr	r0, [r6]
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	cmp	r4, r0
	blt	.L634	@cond_branch
.L632:
	ldr	r2, [r7]
	add	r0, r2, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r2, r2, r0
	add	r2, r2, #0xb8
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r1, [r7]
	add	r0, r1, #0
	add	r0, r0, #0xb1
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1c
	sub	r0, r0, #0x3
	lsl	r0, r0, #0x2
	add	r1, r1, r0
	mov	r2, ip
	ldrh	r0, [r2]
	add	r1, r1, #0xba
	strh	r0, [r1]
	mov	r0, #0x1
	mov	r1, r8
	strh	r0, [r1]
.L623:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 TrySetApprenticeHeldItem,.Lfe42-TrySetApprenticeHeldItem
	.align	2, 0
	.type	 ShiftSavedApprentices,function
	.thumb_func
ShiftSavedApprentices:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r0, .L660
	ldr	r1, [r0]
	mov	r2, #0x8a
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldrb	r1, [r1]
	add	r4, r0, #0
	cmp	r1, #0xff
	beq	.L645	@cond_branch
	mov	r5, #0x0
.L650:
	ldr	r1, [r4]
	add	r2, r5, #0x1
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r3, r1, r0
	mov	r5, #0x8a
	lsl	r5, r5, #0x1
	add	r0, r3, r5
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L649	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xdc
	add	r1, r1, #0xdc
	mov	r2, #0x44
	bl	memcpy
	b	.L645
.L661:
	.align	2, 0
.L660:
	.word	gSaveBlock2Ptr
.L649:
	add	r5, r2, #0
	cmp	r5, #0x2
	ble	.L650	@cond_branch
	ldr	r0, .L662
	mov	sl, r0
	mov	r2, #0x1
	neg	r2, r2
	mov	r9, r2
	mov	r5, #0x1
	ldr	r7, .L662+0x4
	mov	r0, #0x90
	lsl	r0, r0, #0x1
	mov	r8, r0
	mov	r6, #0x44
.L656:
	ldr	r0, [r7]
	add	r0, r0, r8
	add	r0, r0, #0x34
	bl	GetTrainerId
	add	r4, r0, #0
	ldr	r0, [r7]
	add	r0, r0, #0xa
	bl	GetTrainerId
	cmp	r4, r0
	bne	.L655	@cond_branch
	ldr	r0, [r7]
	add	r0, r0, r6
	add	r0, r0, #0xde
	ldrb	r0, [r0]
	cmp	r0, sl
	bge	.L655	@cond_branch
	mov	sl, r0
	mov	r9, r5
.L655:
	mov	r2, #0x44
	add	r8, r8, r2
	add	r6, r6, #0x44
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L656	@cond_branch
	mov	r5, r9
	cmp	r5, #0
	ble	.L645	@cond_branch
	ldr	r0, .L662+0x4
	ldr	r1, [r0]
	lsl	r0, r5, #0x4
	add	r0, r0, r9
	lsl	r0, r0, #0x2
	add	r0, r1, r0
	add	r0, r0, #0xdc
	add	r1, r1, #0xdc
	bl	memcpy
.L645:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L663:
	.align	2, 0
.L662:
	.word	0xffff
	.word	gSaveBlock2Ptr
.Lfe43:
	.size	 ShiftSavedApprentices,.Lfe43-ShiftSavedApprentices
	.align	2, 0
	.type	 SaveApprentice,function
	.thumb_func
SaveApprentice:
	push	{r4, r5, lr}
	ldr	r4, .L678
	ldr	r2, [r4]
	add	r0, r2, #0
	add	r0, r0, #0xb0
	ldrb	r0, [r0]
	add	r2, r2, #0xdc
	mov	r1, #0x1f
	and	r1, r1, r0
	ldrb	r3, [r2]
	mov	r0, #0x20
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	ldr	r2, [r4]
	add	r0, r2, #0
	add	r0, r0, #0xb1
	ldrb	r1, [r0]
	lsl	r1, r1, #0x1e
	add	r2, r2, #0xdc
	lsr	r1, r1, #0x19
	ldrb	r3, [r2]
	mov	r0, #0x61
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2]
	mov	r2, #0x0
	ldr	r0, [r4]
	b	.L677
.L679:
	.align	2, 0
.L678:
	.word	gSaveBlock2Ptr
.L667:
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x8
	bhi	.L666	@cond_branch
	ldr	r0, [r4]
	lsl	r1, r2, #0x2
	add	r0, r0, r1
.L677:
	add	r0, r0, #0xb8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L667	@cond_branch
.L666:
	ldr	r4, .L680
	ldr	r0, [r4]
	add	r0, r0, #0xdd
	strb	r2, [r0]
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0xde
	ldrb	r0, [r1]
	cmp	r0, #0xfe
	bhi	.L671	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1]
.L671:
	ldr	r0, [r4]
	add	r0, r0, #0xdd
	ldrb	r0, [r0]
	bl	SaveApprenticeParty
	mov	r2, #0x0
	add	r3, r4, #0
	mov	r4, #0x88
	lsl	r4, r4, #0x1
	add	r5, r3, #0
.L675:
	ldr	r0, [r3]
	add	r1, r0, r4
	add	r1, r1, r2
	add	r0, r0, #0xa
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x3
	bls	.L675	@cond_branch
	ldr	r1, [r5]
	mov	r2, #0x8a
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	bl	StringCopy
	ldr	r1, [r5]
	ldr	r0, .L680+0x4
	ldrb	r0, [r0]
	ldr	r2, .L680+0x8
	add	r1, r1, r2
	strb	r0, [r1]
	ldr	r0, [r5]
	add	r0, r0, #0xdc
	bl	CalcApprenticeChecksum
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L681:
	.align	2, 0
.L680:
	.word	gSaveBlock2Ptr
	.word	gGameLanguage
	.word	0x11b
.Lfe44:
	.size	 SaveApprentice,.Lfe44-SaveApprentice
	.align	2, 0
	.type	 SetSavedApprenticeTrainerGfxId,function
	.thumb_func
SetSavedApprenticeTrainerGfxId:
	push	{lr}
	ldr	r2, .L697
	ldr	r0, .L697+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xdc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1b
	lsr	r0, r0, #0x1b
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x32
	ldrb	r2, [r0]
	mov	r1, #0x0
	ldr	r3, .L697+0x8
	ldrb	r0, [r3]
	cmp	r0, r2
	beq	.L684	@cond_branch
.L685:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1d
	bhi	.L684	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L685	@cond_branch
.L684:
	cmp	r1, #0x1e
	beq	.L689	@cond_branch
	ldr	r0, .L697+0xc
	add	r0, r1, r0
	ldrb	r1, [r0]
	ldr	r0, .L697+0x10
	bl	VarSet
	b	.L682
.L698:
	.align	2, 0
.L697:
	.word	gApprentices
	.word	gSaveBlock2Ptr
	.word	gTowerMaleFacilityClasses
	.word	gTowerMaleTrainerGfxIds
	.word	0x4010
.L689:
	mov	r1, #0x0
	ldr	r3, .L699
	ldrb	r0, [r3]
	cmp	r0, r2
	beq	.L691	@cond_branch
.L692:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x13
	bhi	.L691	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L692	@cond_branch
.L691:
	cmp	r1, #0x14
	beq	.L682	@cond_branch
	ldr	r0, .L699+0x4
	add	r0, r1, r0
	ldrb	r1, [r0]
	ldr	r0, .L699+0x8
	bl	VarSet
.L682:
	pop	{r0}
	bx	r0
.L700:
	.align	2, 0
.L699:
	.word	gTowerFemaleFacilityClasses
	.word	gTowerFemaleTrainerGfxIds
	.word	0x4010
.Lfe45:
	.size	 SetSavedApprenticeTrainerGfxId,.Lfe45-SetSavedApprenticeTrainerGfxId
	.align	2, 0
	.type	 SetPlayerApprenticeTrainerGfxId,function
	.thumb_func
SetPlayerApprenticeTrainerGfxId:
	push	{lr}
	ldr	r2, .L716
	ldr	r0, .L716+0x4
	ldr	r0, [r0]
	add	r0, r0, #0xb0
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	add	r0, r0, #0x32
	ldrb	r2, [r0]
	mov	r1, #0x0
	ldr	r3, .L716+0x8
	ldrb	r0, [r3]
	cmp	r0, r2
	beq	.L703	@cond_branch
.L704:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1d
	bhi	.L703	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L704	@cond_branch
.L703:
	cmp	r1, #0x1e
	beq	.L708	@cond_branch
	ldr	r0, .L716+0xc
	add	r0, r1, r0
	ldrb	r1, [r0]
	ldr	r0, .L716+0x10
	bl	VarSet
	b	.L701
.L717:
	.align	2, 0
.L716:
	.word	gApprentices
	.word	gSaveBlock2Ptr
	.word	gTowerMaleFacilityClasses
	.word	gTowerMaleTrainerGfxIds
	.word	0x4010
.L708:
	mov	r1, #0x0
	ldr	r3, .L718
	ldrb	r0, [r3]
	cmp	r0, r2
	beq	.L710	@cond_branch
.L711:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x13
	bhi	.L710	@cond_branch
	add	r0, r1, r3
	ldrb	r0, [r0]
	cmp	r0, r2
	bne	.L711	@cond_branch
.L710:
	cmp	r1, #0x14
	beq	.L701	@cond_branch
	ldr	r0, .L718+0x4
	add	r0, r1, r0
	ldrb	r1, [r0]
	ldr	r0, .L718+0x8
	bl	VarSet
.L701:
	pop	{r0}
	bx	r0
.L719:
	.align	2, 0
.L718:
	.word	gTowerFemaleFacilityClasses
	.word	gTowerFemaleTrainerGfxIds
	.word	0x4010
.Lfe46:
	.size	 SetPlayerApprenticeTrainerGfxId,.Lfe46-SetPlayerApprenticeTrainerGfxId
	.align	2, 0
	.type	 GetShouldCheckApprenticeGone,function
	.thumb_func
GetShouldCheckApprenticeGone:
	ldr	r1, .L721
	mov	r0, #0x1
	strh	r0, [r1]
	bx	lr
.L722:
	.align	2, 0
.L721:
	.word	gSpecialVar_0x8004
.Lfe47:
	.size	 GetShouldCheckApprenticeGone,.Lfe47-GetShouldCheckApprenticeGone
	.align	2, 0
	.type	 GetShouldApprenticeLeave,function
	.thumb_func
GetShouldApprenticeLeave:
	ldr	r1, .L724
	mov	r0, #0x1
	strh	r0, [r1]
	bx	lr
.L725:
	.align	2, 0
.L724:
	.word	gSpecialVar_0x8004
.Lfe48:
	.size	 GetShouldApprenticeLeave,.Lfe48-GetShouldApprenticeLeave
	.align	2, 0
	.globl	GetApprenticeNameInLanguage
	.type	 GetApprenticeNameInLanguage,function
	.thumb_func
GetApprenticeNameInLanguage:
	push	{lr}
	mov	r2, #0x58
	mul	r2, r2, r0
	ldr	r0, .L738
	add	r2, r2, r0
	sub	r0, r1, #0x1
	cmp	r0, #0x6
	bhi	.L734	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L738+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L739:
	.align	2, 0
.L738:
	.word	gApprentices
	.word	.L735
	.align	2, 0
	.align	2, 0
.L735:
	.word	.L728
	.word	.L729
	.word	.L730
	.word	.L731
	.word	.L732
	.word	.L734
	.word	.L734
.L728:
	add	r0, r2, #0
	b	.L736
.L729:
	add	r0, r2, #0
	add	r0, r0, #0x8
	b	.L737
.L730:
	add	r0, r2, #0
	add	r0, r0, #0x10
	b	.L737
.L731:
	add	r0, r2, #0
	add	r0, r0, #0x18
	b	.L737
.L732:
	add	r0, r2, #0
	add	r0, r0, #0x20
	b	.L737
.L734:
	add	r0, r2, #0
	add	r0, r0, #0x28
.L737:
.L736:
	pop	{r1}
	bx	r1
.Lfe49:
	.size	 GetApprenticeNameInLanguage,.Lfe49-GetApprenticeNameInLanguage
	.align	2, 0
	.type	 Task_SwitchToFollowupFuncAfterButtonPress,function
	.thumb_func
Task_SwitchToFollowupFuncAfterButtonPress:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L743
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L742	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L741	@cond_branch
.L742:
	add	r0, r2, #0
	bl	SwitchTaskToFollowupFunc
.L741:
	pop	{r0}
	bx	r0
.L744:
	.align	2, 0
.L743:
	.word	gMain
.Lfe50:
	.size	 Task_SwitchToFollowupFuncAfterButtonPress,.Lfe50-Task_SwitchToFollowupFuncAfterButtonPress
	.align	2, 0
	.type	 Task_ExecuteFuncAfterButtonPress,function
	.thumb_func
Task_ExecuteFuncAfterButtonPress:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L748
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L747	@cond_branch
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L746	@cond_branch
.L747:
	ldr	r2, .L748+0x4
	ldr	r1, .L748+0x8
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x8]
	mov	r3, #0xa
	ldrsh	r0, [r0, r3]
	lsl	r0, r0, #0x10
	orr	r1, r1, r0
	str	r1, [r2]
	bl	_call_via_r1
	add	r0, r4, #0
	bl	DestroyTask
.L746:
	pop	{r4}
	pop	{r0}
	bx	r0
.L749:
	.align	2, 0
.L748:
	.word	gMain
	.word	gApprenticeFunc
	.word	gTasks
.Lfe51:
	.size	 Task_ExecuteFuncAfterButtonPress,.Lfe51-Task_ExecuteFuncAfterButtonPress
	.align	2, 0
	.type	 ExecuteFuncAfterButtonPress,function
	.thumb_func
ExecuteFuncAfterButtonPress:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L751
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L751+0x4
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r4, [r1, #0x8]
	lsr	r4, r4, #0x10
	strh	r4, [r1, #0xa]
	pop	{r4}
	pop	{r0}
	bx	r0
.L752:
	.align	2, 0
.L751:
	.word	Task_ExecuteFuncAfterButtonPress
	.word	gTasks
.Lfe52:
	.size	 ExecuteFuncAfterButtonPress,.Lfe52-ExecuteFuncAfterButtonPress
	.align	2, 0
	.type	 ExecuteFollowupFuncAfterButtonPress,function
	.thumb_func
ExecuteFollowupFuncAfterButtonPress:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L754
	add	r0, r4, #0
	mov	r1, #0x1
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r4, #0
	add	r2, r5, #0
	bl	SetTaskFuncWithFollowupFunc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L755:
	.align	2, 0
.L754:
	.word	Task_SwitchToFollowupFuncAfterButtonPress
.Lfe53:
	.size	 ExecuteFollowupFuncAfterButtonPress,.Lfe53-ExecuteFollowupFuncAfterButtonPress
	.comm	gApprenticePartyMovesData, 4	@ 4
	.comm	gApprenticeQuestionData, 4	@ 4
	.comm	gApprenticeFunc, 4	@ 4
.text
	.align	2, 0

