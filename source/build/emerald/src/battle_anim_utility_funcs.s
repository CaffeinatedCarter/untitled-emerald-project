@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 sAnimStatsChangeData,object
	.size	 sAnimStatsChangeData,4
sAnimStatsChangeData:
	.word	0x0
	.globl	gUnknown_08597418
	.section .rodata
	.align	1, 0
	.type	 gUnknown_08597418,object
	.size	 gUnknown_08597418,2
gUnknown_08597418:
	.short	0x7fff
	.globl	gUnknown_0859741A
	.type	 gUnknown_0859741A,object
gUnknown_0859741A:
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.size	 gUnknown_0859741A,4
	.globl	gUnknown_0859741E
	.type	 gUnknown_0859741E,object
gUnknown_0859741E:
	.byte	0x8
	.byte	0xa
	.byte	0xc
	.byte	0xe
	.size	 gUnknown_0859741E,4
.text
	.align	2, 0
	.globl	AnimTask_BlendBattleAnimPal
	.type	 AnimTask_BlendBattleAnimPal,function
	.thumb_func
AnimTask_BlendBattleAnimPal:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L3
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	bl	UnpackSelectedBattleAnimPalettes
	add	r6, r0, #0
	ldrh	r3, [r4]
	lsl	r3, r3, #0x10
	asr	r0, r3, #0x17
	mov	r4, #0x1
	and	r0, r0, r4
	asr	r1, r3, #0x18
	and	r1, r1, r4
	asr	r2, r3, #0x19
	and	r2, r2, r4
	asr	r3, r3, #0x1a
	and	r3, r3, r4
	bl	sub_80A76C4
	orr	r6, r6, r0
	add	r0, r5, #0
	add	r1, r6, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gBattleAnimArgs
.Lfe1:
	.size	 AnimTask_BlendBattleAnimPal,.Lfe1-AnimTask_BlendBattleAnimPal
	.align	2, 0
	.globl	AnimTask_BlendBattleAnimPalExclude
	.type	 AnimTask_BlendBattleAnimPalExclude,function
	.thumb_func
AnimTask_BlendBattleAnimPalExclude:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r1, sp
	mov	r0, #0xff
	strb	r0, [r1, #0x1]
	mov	r0, #0x1
	bl	UnpackSelectedBattleAnimPalettes
	add	r5, r0, #0
	ldr	r0, .L25
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x7
	bhi	.L6	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L25+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L26:
	.align	2, 0
.L25:
	.word	gBattleAnimArgs
	.word	.L15
	.align	2, 0
	.align	2, 0
.L15:
	.word	.L8
	.word	.L10
	.word	.L7
	.word	.L9
	.word	.L11
	.word	.L12
	.word	.L13
	.word	.L14
.L7:
	mov	r5, #0x0
.L8:
	mov	r0, sp
	ldr	r1, .L27
	b	.L23
.L28:
	.align	2, 0
.L27:
	.word	gBattleAnimAttacker
.L9:
	mov	r5, #0x0
.L10:
	mov	r0, sp
	ldr	r1, .L29
.L23:
	ldrb	r1, [r1]
	strb	r1, [r0]
	b	.L6
.L30:
	.align	2, 0
.L29:
	.word	gBattleAnimTarget
.L11:
	mov	r1, sp
	ldr	r0, .L31
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r0, .L31+0x4
	ldrb	r0, [r0]
	strb	r0, [r1, #0x1]
	b	.L6
.L32:
	.align	2, 0
.L31:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L12:
	mov	r1, sp
	mov	r0, #0xff
	strb	r0, [r1]
	b	.L6
.L13:
	mov	r5, #0x0
	mov	r2, sp
	ldr	r0, .L33
	b	.L24
.L34:
	.align	2, 0
.L33:
	.word	gBattleAnimAttacker
.L14:
	mov	r5, #0x0
	mov	r2, sp
	ldr	r0, .L35
.L24:
	ldrb	r0, [r0]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r2]
.L6:
	mov	r4, #0x0
	mov	r6, sp
.L20:
	ldrb	r0, [r6]
	cmp	r4, r0
	beq	.L19	@cond_branch
	ldrb	r0, [r6, #0x1]
	cmp	r4, r0
	beq	.L19	@cond_branch
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L19	@cond_branch
	add	r0, r4, #0
	bl	sub_80A77AC
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x80
	lsl	r1, r1, #0x9
	lsl	r1, r1, r0
	orr	r5, r5, r1
.L19:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x3
	bls	.L20	@cond_branch
	add	r0, r7, #0
	add	r1, r5, #0
	bl	StartBlendAnimSpriteColor
	add	sp, sp, #0x4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L36:
	.align	2, 0
.L35:
	.word	gBattleAnimTarget
.Lfe2:
	.size	 AnimTask_BlendBattleAnimPalExclude,.Lfe2-AnimTask_BlendBattleAnimPalExclude
	.align	2, 0
	.globl	AnimTask_SetCamouflageBlend
	.type	 AnimTask_SetCamouflageBlend,function
	.thumb_func
AnimTask_SetCamouflageBlend:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L52
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	bl	UnpackSelectedBattleAnimPalettes
	add	r2, r0, #0
	ldr	r0, .L52+0x4
	ldrb	r0, [r0]
	cmp	r0, #0x9
	bhi	.L38	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L52+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L53:
	.align	2, 0
.L52:
	.word	gBattleAnimArgs
	.word	gBattleTerrain
	.word	.L49
	.align	2, 0
	.align	2, 0
.L49:
	.word	.L39
	.word	.L40
	.word	.L41
	.word	.L42
	.word	.L43
	.word	.L44
	.word	.L45
	.word	.L46
	.word	.L47
	.word	.L48
.L39:
	ldr	r1, .L54
	ldr	r0, .L54+0x4
	b	.L51
.L55:
	.align	2, 0
.L54:
	.word	gBattleAnimArgs
	.word	0xb0c
.L40:
	ldr	r1, .L56
	mov	r0, #0x9e
	lsl	r0, r0, #0x4
	b	.L51
.L57:
	.align	2, 0
.L56:
	.word	gBattleAnimArgs
.L41:
	ldr	r1, .L58
	ldr	r0, .L58+0x4
	b	.L51
.L59:
	.align	2, 0
.L58:
	.word	gBattleAnimArgs
	.word	0x2f1e
.L42:
	ldr	r1, .L60
	mov	r0, #0x90
	lsl	r0, r0, #0x7
	b	.L51
.L61:
	.align	2, 0
.L60:
	.word	gBattleAnimArgs
.L43:
	ldr	r1, .L62
	ldr	r0, .L62+0x4
	b	.L51
.L63:
	.align	2, 0
.L62:
	.word	gBattleAnimArgs
	.word	0x7ecb
.L44:
	ldr	r1, .L64
	ldr	r0, .L64+0x4
	b	.L51
.L65:
	.align	2, 0
.L64:
	.word	gBattleAnimArgs
	.word	0x7ecb
.L45:
	ldr	r1, .L66
	ldr	r0, .L66+0x4
	b	.L51
.L67:
	.align	2, 0
.L66:
	.word	gBattleAnimArgs
	.word	0x2a16
.L46:
	ldr	r1, .L68
	ldr	r0, .L68+0x4
	b	.L51
.L69:
	.align	2, 0
.L68:
	.word	gBattleAnimArgs
	.word	0xd2e
.L47:
.L48:
	ldr	r1, .L70
	ldr	r0, .L70+0x4
.L51:
	strh	r0, [r1, #0x8]
.L38:
	add	r0, r4, #0
	add	r1, r2, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4}
	pop	{r0}
	bx	r0
.L71:
	.align	2, 0
.L70:
	.word	gBattleAnimArgs
	.word	0x7fff
.Lfe3:
	.size	 AnimTask_SetCamouflageBlend,.Lfe3-AnimTask_SetCamouflageBlend
	.align	2, 0
	.globl	AnimTask_BlendParticle
	.type	 AnimTask_BlendParticle,function
	.thumb_func
AnimTask_BlendParticle:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L73
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r1, #0x1
	lsl	r1, r1, r0
	add	r0, r4, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4}
	pop	{r0}
	bx	r0
.L74:
	.align	2, 0
.L73:
	.word	gBattleAnimArgs
.Lfe4:
	.size	 AnimTask_BlendParticle,.Lfe4-AnimTask_BlendParticle
	.align	2, 0
	.type	 StartBlendAnimSpriteColor,function
	.thumb_func
StartBlendAnimSpriteColor:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r3, .L76
	lsl	r2, r0, #0x2
	add	r2, r2, r0
	lsl	r2, r2, #0x3
	add	r2, r2, r3
	strh	r1, [r2, #0x8]
	lsr	r1, r1, #0x10
	strh	r1, [r2, #0xa]
	ldr	r3, .L76+0x4
	ldrh	r1, [r3, #0x2]
	strh	r1, [r2, #0xc]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r2, #0xe]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r2, #0x10]
	ldrh	r1, [r3, #0x8]
	strh	r1, [r2, #0x12]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r2, #0x1c]
	ldr	r1, .L76+0x8
	str	r1, [r2]
	bl	_call_via_r1
	pop	{r0}
	bx	r0
.L77:
	.align	2, 0
.L76:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_BlendSpriteColor_Step2
.Lfe5:
	.size	 StartBlendAnimSpriteColor,.Lfe5-StartBlendAnimSpriteColor
	.align	2, 0
	.type	 AnimTask_BlendSpriteColor_Step2,function
	.thumb_func
AnimTask_BlendSpriteColor_Step2:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r6, #0x0
	ldr	r2, .L90
	lsl	r5, r7, #0x2
	add	r0, r5, r7
	lsl	r0, r0, #0x3
	add	r3, r0, r2
	ldrh	r0, [r3, #0x1a]
	mov	r8, r0
	mov	r4, #0x1a
	ldrsh	r1, [r3, r4]
	mov	r4, #0xc
	ldrsh	r0, [r3, r4]
	mov	r9, r2
	cmp	r1, r0
	bne	.L79	@cond_branch
	strh	r6, [r3, #0x1a]
	mov	r0, #0x8
	ldrsh	r4, [r3, r0]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	lsl	r0, r0, #0x10
	orr	r4, r4, r0
	mov	r8, r5
	cmp	r4, #0
	beq	.L81	@cond_branch
	add	r5, r3, #0
.L82:
	mov	r0, #0x1
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L83	@cond_branch
	ldrb	r2, [r5, #0x1c]
	ldrh	r3, [r5, #0x12]
	add	r0, r6, #0
	mov	r1, #0x10
	bl	BlendPalette
.L83:
	add	r0, r6, #0
	add	r0, r0, #0x10
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsr	r4, r4, #0x1
	cmp	r4, #0
	bne	.L82	@cond_branch
.L81:
	mov	r4, r8
	add	r0, r4, r7
	lsl	r0, r0, #0x3
	mov	r1, r9
	add	r2, r0, r1
	ldrh	r0, [r2, #0x1c]
	mov	r4, #0x1c
	ldrsh	r3, [r2, r4]
	mov	r4, #0x10
	ldrsh	r1, [r2, r4]
	cmp	r3, r1
	bge	.L85	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r2, #0x1c]
	b	.L89
.L91:
	.align	2, 0
.L90:
	.word	gTasks
.L85:
	cmp	r3, r1
	ble	.L87	@cond_branch
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x1c]
	b	.L89
.L87:
	add	r0, r7, #0
	bl	DestroyAnimVisualTask
	b	.L89
.L79:
	mov	r0, r8
	add	r0, r0, #0x1
	strh	r0, [r3, #0x1a]
.L89:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 AnimTask_BlendSpriteColor_Step2,.Lfe6-AnimTask_BlendSpriteColor_Step2
	.align	2, 0
	.globl	AnimTask_HardwarePaletteFade
	.type	 AnimTask_HardwarePaletteFade,function
	.thumb_func
AnimTask_HardwarePaletteFade:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r4, .L93
	ldrb	r0, [r4]
	ldrb	r1, [r4, #0x2]
	ldrb	r2, [r4, #0x4]
	ldrb	r3, [r4, #0x6]
	ldrb	r4, [r4, #0x8]
	str	r4, [sp]
	bl	BeginHardwarePaletteFade
	ldr	r1, .L93+0x4
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r1, .L93+0x8
	str	r1, [r0]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L94:
	.align	2, 0
.L93:
	.word	gBattleAnimArgs
	.word	gTasks
	.word	AnimTask_HardwarePaletteFade_Step
.Lfe7:
	.size	 AnimTask_HardwarePaletteFade,.Lfe7-AnimTask_HardwarePaletteFade
	.align	2, 0
	.type	 AnimTask_HardwarePaletteFade_Step,function
	.thumb_func
AnimTask_HardwarePaletteFade_Step:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L97
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L96	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L96:
	pop	{r0}
	bx	r0
.L98:
	.align	2, 0
.L97:
	.word	gPaletteFade
.Lfe8:
	.size	 AnimTask_HardwarePaletteFade_Step,.Lfe8-AnimTask_HardwarePaletteFade_Step
	.align	2, 0
	.globl	AnimTask_TraceMonBlended
	.type	 AnimTask_TraceMonBlended,function
	.thumb_func
AnimTask_TraceMonBlended:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L100
	add	r1, r1, r0
	ldr	r2, .L100+0x4
	ldrh	r0, [r2]
	mov	r3, #0x0
	strh	r0, [r1, #0x8]
	strh	r3, [r1, #0xa]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r1, #0x10]
	strh	r3, [r1, #0x12]
	ldr	r0, .L100+0x8
	str	r0, [r1]
	bx	lr
.L101:
	.align	2, 0
.L100:
	.word	gTasks
	.word	gBattleAnimArgs
	.word	AnimTask_TraceMonBlended_Step
.Lfe9:
	.size	 AnimTask_TraceMonBlended,.Lfe9-AnimTask_TraceMonBlended
	.align	2, 0
	.type	 AnimTask_TraceMonBlended_Step,function
	.thumb_func
AnimTask_TraceMonBlended_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r2, r5, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L111
	add	r4, r0, r1
	mov	r1, #0x10
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L103	@cond_branch
	ldrh	r1, [r4, #0xa]
	mov	r2, #0xa
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L104	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0xa]
	b	.L109
.L112:
	.align	2, 0
.L111:
	.word	gTasks
.L104:
	ldrb	r0, [r4, #0x8]
	bl	CloneBattlerSpriteWithBlend
	strh	r0, [r4, #0x14]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	blt	.L106	@cond_branch
	ldr	r6, .L113
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r3, r1, r6
	mov	r2, #0x8
	ldrsh	r0, [r4, r2]
	mov	r2, #0x2
	cmp	r0, #0
	beq	.L107	@cond_branch
	mov	r2, #0x1
.L107:
	lsl	r2, r2, #0x2
	ldrb	r1, [r3, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	orr	r0, r0, r2
	strb	r0, [r3, #0x5]
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrh	r1, [r4, #0xe]
	strh	r1, [r0, #0x2e]
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	strh	r5, [r0, #0x30]
	mov	r0, #0x14
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	mov	r1, #0x5
	strh	r1, [r0, #0x32]
	mov	r2, #0x14
	ldrsh	r1, [r4, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r1, r6, #0
	add	r1, r1, #0x1c
	add	r0, r0, r1
	ldr	r1, .L113+0x4
	str	r1, [r0]
	ldrh	r0, [r4, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x12]
.L106:
	ldrh	r0, [r4, #0x10]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	ldrh	r0, [r4, #0xc]
	strh	r0, [r4, #0xa]
	b	.L109
.L114:
	.align	2, 0
.L113:
	.word	gSprites
	.word	AnimMonTrace
.L103:
	mov	r1, #0x12
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L109	@cond_branch
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L109:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 AnimTask_TraceMonBlended_Step,.Lfe10-AnimTask_TraceMonBlended_Step
	.align	2, 0
	.type	 AnimMonTrace,function
	.thumb_func
AnimMonTrace:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	beq	.L116	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	b	.L117
.L116:
	ldr	r3, .L118
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	lsl	r1, r1, #0x1
	mov	r0, #0x30
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r3, r3, #0x8
	add	r1, r1, r3
	ldrh	r0, [r1]
	sub	r0, r0, #0x1
	strh	r0, [r1]
	add	r0, r4, #0
	bl	obj_delete_but_dont_free_vram
.L117:
	pop	{r4}
	pop	{r0}
	bx	r0
.L119:
	.align	2, 0
.L118:
	.word	gTasks
.Lfe11:
	.size	 AnimMonTrace,.Lfe11-AnimMonTrace
	.align	2, 0
	.globl	AnimTask_DrawFallingWhiteLinesOnAttacker
	.type	 AnimTask_DrawFallingWhiteLinesOnAttacker,function
	.thumb_func
AnimTask_DrawFallingWhiteLinesOnAttacker:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	mov	r7, #0x0
	ldr	r0, .L131
	strh	r7, [r0]
	ldr	r0, .L131+0x4
	strh	r7, [r0]
	ldr	r1, .L131+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L131+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L131+0x10
	mov	r0, #0x50
	bl	SetGpuReg
	ldr	r1, .L131+0x14
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xa
	bl	GetGpuReg
	add	r4, sp, #0x10
	strh	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x4
	neg	r0, r0
	mov	r8, r0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r2, sp
	add	r2, r2, #0x11
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L121	@cond_branch
	ldrb	r1, [r4]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
.L121:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L122	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L122	@cond_branch
	ldr	r5, .L131+0x18
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L124	@cond_branch
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L122	@cond_branch
.L124:
	ldrb	r0, [r5]
	mov	r6, #0x2
	eor	r0, r0, r6
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L122	@cond_branch
	ldr	r3, .L131+0x1c
	ldr	r1, .L131+0x20
	ldrb	r0, [r5]
	eor	r0, r0, r6
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	ldrb	r1, [r4]
	mov	r0, r8
	and	r0, r0, r1
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r4]
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	mov	r7, #0x1
.L122:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L126	@cond_branch
	ldr	r0, .L131+0x24
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r5, [r0]
	b	.L127
.L132:
	.align	2, 0
.L131:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	0xc08
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gContestResources
.L126:
	ldr	r4, .L133
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L128	@cond_branch
	ldr	r1, .L133+0x4
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L133+0x8
	b	.L130
.L134:
	.align	2, 0
.L133:
	.word	gBattleAnimAttacker
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L128:
	ldr	r1, .L135
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L135+0x4
.L130:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
.L127:
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L135+0x8
	ldrb	r0, [r0]
	add	r1, r4, #0
	add	r2, r5, #0
	bl	sub_80A89C8
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, sp
	bl	sub_80A6B30
	ldr	r1, .L135+0xc
	mov	r0, sp
	mov	r2, #0x0
	bl	AnimLoadCompressedBgTilemapHandleContest
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L135+0x10
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L135+0x14
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	add	r1, r1, #0x1
	mov	r2, #0x2
	bl	LoadPalette
	ldr	r2, .L135+0x18
	ldr	r0, .L135+0x1c
	lsl	r1, r4, #0x4
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrh	r0, [r1, #0x20]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r2]
	ldr	r2, .L135+0x20
	ldrh	r0, [r1, #0x22]
	neg	r0, r0
	add	r0, r0, #0x20
	strh	r0, [r2]
	ldr	r1, .L135+0x24
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	strh	r5, [r0, #0x8]
	strh	r7, [r0, #0x14]
	ldr	r1, .L135+0x28
	str	r1, [r0]
	add	sp, sp, #0x14
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L136:
	.align	2, 0
.L135:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattleAnimAttacker
	.word	gUnknown_08C20684
	.word	gUnknown_08C20668
	.word	gUnknown_08597418
	.word	gBattle_BG1_X
	.word	gSprites
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	AnimTask_DrawFallingWhiteLinesOnAttacker_Step
.Lfe12:
	.size	 AnimTask_DrawFallingWhiteLinesOnAttacker,.Lfe12-AnimTask_DrawFallingWhiteLinesOnAttacker
	.align	2, 0
	.type	 AnimTask_DrawFallingWhiteLinesOnAttacker_Step,function
	.thumb_func
AnimTask_DrawFallingWhiteLinesOnAttacker_Step:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r6, r0, #0
	ldr	r1, .L142
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x4
	mov	r1, #0x0
	mov	r8, r1
	strh	r0, [r5, #0x1c]
	ldr	r7, .L142+0x4
	ldrh	r2, [r7]
	sub	r1, r2, #0x4
	strh	r1, [r7]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x40
	bne	.L138	@cond_branch
	mov	r0, r8
	strh	r0, [r5, #0x1c]
	add	r0, r2, #0
	add	r0, r0, #0x3c
	strh	r0, [r7]
	ldrh	r0, [r5, #0x1e]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bne	.L138	@cond_branch
	mov	r0, #0x0
	bl	sub_80A477C
	ldr	r0, .L142+0x8
	mov	r1, r8
	strh	r1, [r0]
	ldr	r0, .L142+0xc
	strh	r1, [r0]
	ldr	r4, .L142+0x10
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L140	@cond_branch
	mov	r0, #0xa
	bl	GetGpuReg
	add	r1, sp, #0x10
	strh	r0, [r1]
	ldrb	r2, [r1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldrh	r1, [r1]
	mov	r0, #0xa
	bl	SetGpuReg
.L140:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	ldr	r4, .L142+0x14
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	bl	sub_80A6C68
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L141	@cond_branch
	ldr	r2, .L142+0x18
	ldr	r0, .L142+0x1c
	ldrb	r1, [r0]
	mov	r0, #0x2
	eor	r0, r0, r1
	add	r0, r0, r2
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L141:
	mov	r2, r8
	strh	r2, [r7]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L138:
	add	sp, sp, #0x14
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L143:
	.align	2, 0
.L142:
	.word	gTasks
	.word	gBattle_BG1_Y
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe13:
	.size	 AnimTask_DrawFallingWhiteLinesOnAttacker_Step,.Lfe13-AnimTask_DrawFallingWhiteLinesOnAttacker_Step
	.align	2, 0
	.globl	sub_8116EB4
	.type	 sub_8116EB4,function
	.thumb_func
sub_8116EB4:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L150
	mov	r0, #0x18
	bl	AllocZeroed
	str	r0, [r4]
	mov	r2, #0x0
	ldr	r3, .L150+0x4
.L148:
	ldr	r1, [r4]
	lsl	r0, r2, #0x1
	add	r1, r1, #0x4
	add	r1, r1, r0
	add	r0, r0, r3
	ldrh	r0, [r0]
	strh	r0, [r1]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0x7
	bls	.L148	@cond_branch
	ldr	r0, .L150+0x8
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L150+0xc
	str	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L151:
	.align	2, 0
.L150:
	.word	sAnimStatsChangeData
	.word	gBattleAnimArgs
	.word	gTasks
	.word	sub_8116F04
.Lfe14:
	.size	 sub_8116EB4,.Lfe14-sub_8116EB4
	.align	2, 0
	.type	 sub_8116F04,function
	.thumb_func
sub_8116F04:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L169
	ldr	r1, [r0]
	mov	r2, #0x8
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L153	@cond_branch
	ldr	r0, .L169+0x4
	b	.L166
.L170:
	.align	2, 0
.L169:
	.word	sAnimStatsChangeData
	.word	gBattleAnimAttacker
.L153:
	ldr	r0, .L171
.L166:
	ldrb	r0, [r0]
	strb	r0, [r1]
	ldr	r4, .L171+0x4
	ldr	r2, [r4]
	ldrb	r0, [r2]
	mov	r1, #0x2
	eor	r0, r0, r1
	strb	r0, [r2, #0x1]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L156	@cond_branch
	ldr	r1, [r4]
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	beq	.L155	@cond_branch
	ldrb	r0, [r1, #0x1]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L155	@cond_branch
.L156:
	ldr	r1, [r4]
	mov	r0, #0x0
	strh	r0, [r1, #0xa]
.L155:
	ldr	r0, .L171+0x8
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L171+0xc
	strh	r1, [r0]
	ldr	r1, .L171+0x10
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L171+0x14
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L171+0x18
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L157	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x1
	bl	SetAnimBgAttribute
.L157:
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L158	@cond_branch
	ldr	r4, .L171+0x4
	ldr	r1, [r4]
	mov	r2, #0xa
	ldrsh	r0, [r1, r2]
	cmp	r0, #0
	bne	.L158	@cond_branch
	ldrb	r0, [r1]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L160	@cond_branch
	ldr	r0, [r4]
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L158	@cond_branch
.L160:
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0x1
	bne	.L158	@cond_branch
	ldr	r3, .L171+0x1c
	ldr	r1, .L171+0x20
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	sub	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
	mov	r0, #0x1
	mov	r1, #0x4
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	ldr	r0, [r4]
	strb	r5, [r0, #0x2]
.L158:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L162	@cond_branch
	ldr	r0, .L171+0x4
	ldr	r1, [r0]
	ldr	r0, .L171+0x24
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r0, [r0]
	b	.L167
.L172:
	.align	2, 0
.L171:
	.word	gBattleAnimTarget
	.word	sAnimStatsChangeData
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gContestResources
.L162:
	ldr	r4, .L173
	ldr	r0, [r4]
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L164	@cond_branch
	ldr	r1, .L173+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L173+0x8
	b	.L168
.L174:
	.align	2, 0
.L173:
	.word	sAnimStatsChangeData
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L164:
	ldr	r1, .L175
	ldr	r0, [r4]
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L175+0x4
.L168:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	ldr	r1, [r4]
.L167:
	strh	r0, [r1, #0x14]
	ldr	r0, .L175+0x8
	lsl	r1, r6, #0x2
	add	r1, r1, r6
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r0, .L175+0xc
	str	r0, [r1]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L176:
	.align	2, 0
.L175:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gTasks
	.word	sub_81170EC
.Lfe15:
	.size	 sub_8116F04,.Lfe15-sub_8116F04
	.align	2, 0
	.type	 sub_81170EC,function
	.thumb_func
sub_81170EC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r0, #0x0
	mov	r8, r0
	ldr	r6, .L200
	ldr	r4, .L200+0x4
	ldr	r2, [r4]
	ldrb	r0, [r2]
	add	r1, r0, r6
	ldrb	r1, [r1]
	ldrh	r2, [r2, #0x14]
	bl	sub_80A89C8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	ldr	r2, [r4]
	mov	r1, #0xa
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	beq	.L178	@cond_branch
	ldrb	r0, [r2, #0x1]
	add	r1, r0, r6
	ldrb	r1, [r1]
	ldrh	r2, [r2, #0x14]
	bl	sub_80A89C8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
.L178:
	mov	r0, sp
	bl	sub_80A6B30
	ldr	r0, [r4]
	mov	r4, #0x4
	ldrsh	r0, [r0, r4]
	cmp	r0, #0
	bne	.L179	@cond_branch
	ldr	r1, .L200+0x8
	mov	r0, sp
	mov	r2, #0x0
	bl	AnimLoadCompressedBgTilemapHandleContest
	b	.L180
.L201:
	.align	2, 0
.L200:
	.word	gBattlerSpriteIds
	.word	sAnimStatsChangeData
	.word	gBattleStatMask1_Tilemap
.L179:
	ldr	r1, .L202
	mov	r0, sp
	mov	r2, #0x0
	bl	AnimLoadCompressedBgTilemapHandleContest
.L180:
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	ldr	r1, .L202+0x4
	mov	r2, sp
	ldrh	r2, [r2, #0xa]
	bl	AnimLoadCompressedBgGfx
	ldr	r0, .L202+0x8
	ldr	r0, [r0]
	mov	r1, #0x6
	ldrsh	r0, [r0, r1]
	cmp	r0, #0x6
	bhi	.L189	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L202+0xc
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L203:
	.align	2, 0
.L202:
	.word	gBattleStatMask2_Tilemap
	.word	gBattleStatMask_Gfx
	.word	sAnimStatsChangeData
	.word	.L190
	.align	2, 0
	.align	2, 0
.L190:
	.word	.L182
	.word	.L183
	.word	.L184
	.word	.L185
	.word	.L186
	.word	.L187
	.word	.L188
.L182:
	ldr	r0, .L204
	b	.L197
.L205:
	.align	2, 0
.L204:
	.word	gBattleStatMask2_Pal
.L183:
	ldr	r0, .L206
	b	.L197
.L207:
	.align	2, 0
.L206:
	.word	gBattleStatMask1_Pal
.L184:
	ldr	r0, .L208
	b	.L197
.L209:
	.align	2, 0
.L208:
	.word	gBattleStatMask3_Pal
.L185:
	ldr	r0, .L210
	b	.L197
.L211:
	.align	2, 0
.L210:
	.word	gBattleStatMask4_Pal
.L186:
	ldr	r0, .L212
	b	.L197
.L213:
	.align	2, 0
.L212:
	.word	gBattleStatMask6_Pal
.L187:
	ldr	r0, .L214
	b	.L197
.L215:
	.align	2, 0
.L214:
	.word	gBattleStatMask7_Pal
.L188:
	ldr	r0, .L216
.L197:
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
	b	.L181
.L217:
	.align	2, 0
.L216:
	.word	gBattleStatMask8_Pal
.L189:
	ldr	r0, .L218
	mov	r1, sp
	ldrb	r1, [r1, #0x8]
	lsl	r1, r1, #0x4
	mov	r2, #0x20
	bl	LoadCompressedPalette
.L181:
	ldr	r3, .L218+0x4
	mov	r2, #0x0
	strh	r2, [r3]
	ldr	r0, .L218+0x8
	strh	r2, [r0]
	ldr	r1, .L218+0xc
	ldr	r0, [r1]
	mov	r4, #0x4
	ldrsh	r0, [r0, r4]
	add	r4, r1, #0
	cmp	r0, #0x1
	bne	.L191	@cond_branch
	mov	r0, #0x40
	strh	r0, [r3]
	ldr	r2, .L218+0x10
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldr	r1, .L218+0x14
	b	.L198
.L219:
	.align	2, 0
.L218:
	.word	gBattleStatMask5_Pal
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	sAnimStatsChangeData
	.word	gTasks
	.word	0xfffd
.L191:
	ldr	r2, .L220
	lsl	r3, r5, #0x2
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0x3
.L198:
	strh	r1, [r0, #0xa]
	ldr	r0, [r4]
	mov	r1, #0xc
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L193	@cond_branch
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0xa
	strh	r1, [r0, #0x10]
	mov	r1, #0x14
	b	.L199
.L221:
	.align	2, 0
.L220:
	.word	gTasks
.L193:
	add	r0, r3, r5
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	mov	r1, #0xd
	strh	r1, [r0, #0x10]
	mov	r1, #0x1e
.L199:
	strh	r1, [r0, #0x12]
	add	r1, r3, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	strh	r7, [r1, #0x8]
	ldr	r3, [r4]
	ldrh	r0, [r3, #0xa]
	strh	r0, [r1, #0xc]
	mov	r4, r8
	strh	r4, [r1, #0xe]
	ldrb	r0, [r3, #0x2]
	strh	r0, [r1, #0x14]
	ldr	r2, .L222
	ldrb	r0, [r3, #0x1]
	add	r0, r0, r2
	ldrb	r0, [r0]
	strh	r0, [r1, #0x16]
	ldr	r0, .L222+0x4
	str	r0, [r1]
	mov	r1, #0x4
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bne	.L195	@cond_branch
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning2
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xef
	bl	PlaySE12WithPanning
	b	.L196
.L223:
	.align	2, 0
.L222:
	.word	gBattlerSpriteIds
	.word	sub_81172EC
.L195:
	mov	r0, #0x40
	neg	r0, r0
	bl	BattleAnimAdjustPanning2
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	asr	r1, r1, #0x18
	mov	r0, #0xf5
	bl	PlaySE12WithPanning
.L196:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 sub_81170EC,.Lfe16-sub_81170EC
	.align	2, 0
	.type	 sub_81172EC,function
	.thumb_func
sub_81172EC:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r2, .L242
	ldr	r1, .L242+0x4
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r1
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r2]
	add	r0, r0, r1
	strh	r0, [r2]
	mov	r0, #0x26
	ldrsh	r2, [r5, r0]
	cmp	r2, #0x1
	beq	.L229	@cond_branch
	cmp	r2, #0x1
	bgt	.L240	@cond_branch
	cmp	r2, #0
	beq	.L226	@cond_branch
	b	.L225
.L243:
	.align	2, 0
.L242:
	.word	gBattle_BG1_Y
	.word	gTasks
.L240:
	cmp	r2, #0x2
	beq	.L231	@cond_branch
	cmp	r2, #0x3
	beq	.L234	@cond_branch
	b	.L225
.L226:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.LCB2197
	b	.L225	@long jump
.LCB2197:
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r2, #0x20
	ldrsh	r1, [r5, r2]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	beq	.LCB2219
	b	.L225	@long jump
.LCB2219:
	b	.L241
.L229:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r5, r2]
	cmp	r0, r1
	beq	.LCB2232
	b	.L225	@long jump
.LCB2232:
	b	.L241
.L231:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	ble	.L225	@cond_branch
	mov	r0, #0x0
	strh	r0, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r1, #0x20
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	bne	.L225	@cond_branch
	mov	r0, #0x0
	bl	sub_80A477C
.L241:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L225
.L234:
	ldr	r0, .L244
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L244+0x4
	strh	r1, [r0]
	ldr	r4, .L244+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L235	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x3
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L235:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L244+0xc
	add	r0, r0, r4
	bl	DestroySprite
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L236	@cond_branch
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
.L236:
	mov	r1, #0x14
	ldrsh	r0, [r5, r1]
	cmp	r0, #0x1
	bne	.L237	@cond_branch
	mov	r2, #0x16
	ldrsh	r0, [r5, r2]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r4
	ldrb	r3, [r2, #0x5]
	lsl	r1, r3, #0x1c
	lsr	r1, r1, #0x1e
	add	r1, r1, #0x1
	mov	r0, #0x3
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r1
	strb	r0, [r2, #0x5]
.L237:
	ldr	r4, .L244+0x10
	ldr	r0, [r4]
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L225:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L245:
	.align	2, 0
.L244:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
	.word	sAnimStatsChangeData
.Lfe17:
	.size	 sub_81172EC,.Lfe17-sub_81172EC
	.align	2, 0
	.globl	AnimTask_Flash
	.type	 AnimTask_Flash,function
	.thumb_func
AnimTask_Flash:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0xc
	add	r5, r0, #0
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x1
	mov	r3, #0x1
	bl	sub_80A76C4
	add	r6, r0, #0
	mov	r1, #0x0
	bl	sub_81175C4
	ldr	r0, .L247
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	lsr	r0, r6, #0x10
	mov	r5, #0x0
	strh	r0, [r4, #0x24]
	str	r5, [sp]
	str	r5, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	add	r6, r0, #0
	ldr	r1, .L247+0x4
	and	r6, r6, r1
	add	r0, r6, #0
	bl	sub_81175C4
	strh	r6, [r4, #0x26]
	strh	r5, [r4, #0x8]
	strh	r5, [r4, #0xa]
	ldr	r0, .L247+0x8
	str	r0, [r4]
	add	sp, sp, #0xc
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L248:
	.align	2, 0
.L247:
	.word	gTasks
	.word	0xffff
	.word	AnimTask_Flash_Step
.Lfe18:
	.size	 AnimTask_Flash,.Lfe18-AnimTask_Flash
	.align	2, 0
	.type	 AnimTask_Flash_Step,function
	.thumb_func
AnimTask_Flash_Step:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	ldr	r1, .L268
	add	r4, r0, r1
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	cmp	r1, #0x1
	beq	.L253	@cond_branch
	cmp	r1, #0x1
	bgt	.L266	@cond_branch
	cmp	r1, #0
	beq	.L251	@cond_branch
	b	.L250
.L269:
	.align	2, 0
.L268:
	.word	gTasks
.L266:
	cmp	r1, #0x2
	beq	.L263	@cond_branch
	b	.L250
.L251:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x6
	ble	.L250	@cond_branch
	strh	r1, [r4, #0xa]
	mov	r0, #0x10
	strh	r0, [r4, #0xc]
	b	.L267
.L253:
	ldrh	r0, [r4, #0xa]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xa]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x1
	ble	.L250	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0xa]
	ldrh	r0, [r4, #0xc]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r5, #0x0
	mov	r6, #0x1
.L258:
	mov	r1, #0x26
	ldrsh	r0, [r4, r1]
	asr	r0, r0, r5
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L259	@cond_branch
	lsl	r0, r5, #0x14
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0xc]
	mov	r1, #0x10
	ldr	r3, .L270
	bl	BlendPalette
.L259:
	mov	r1, #0x24
	ldrsh	r0, [r4, r1]
	asr	r0, r0, r5
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L257	@cond_branch
	lsl	r0, r5, #0x14
	mov	r1, #0x80
	lsl	r1, r1, #0x11
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	ldrb	r2, [r4, #0xc]
	mov	r1, #0x10
	mov	r3, #0x0
	bl	BlendPalette
.L257:
	add	r0, r5, #0x1
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0xf
	bls	.L258	@cond_branch
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L250	@cond_branch
.L267:
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	b	.L250
.L271:
	.align	2, 0
.L270:
	.word	0xffff
.L263:
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
.L250:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 AnimTask_Flash_Step,.Lfe19-AnimTask_Flash_Step
	.align	2, 0
	.type	 sub_81175C4,function
	.thumb_func
sub_81175C4:
	push	{r4, r5, r6, lr}
	add	r3, r0, #0
	lsl	r1, r1, #0x10
	lsr	r6, r1, #0x10
	mov	r2, #0x0
.L276:
	mov	r0, #0x1
	and	r0, r0, r3
	lsr	r4, r3, #0x1
	add	r5, r2, #0x1
	cmp	r0, #0
	beq	.L277	@cond_branch
	lsl	r0, r2, #0x14
	lsr	r2, r0, #0x10
	add	r0, r2, #0
	add	r0, r0, #0x10
	cmp	r2, r0
	bge	.L277	@cond_branch
	ldr	r1, .L283
	add	r3, r0, #0
.L280:
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	strh	r6, [r0]
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, r3
	blt	.L280	@cond_branch
.L277:
	add	r3, r4, #0
	lsl	r0, r5, #0x10
	lsr	r2, r0, #0x10
	cmp	r2, #0x1f
	bls	.L276	@cond_branch
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L284:
	.align	2, 0
.L283:
	.word	gPlttBufferFaded
.Lfe20:
	.size	 sub_81175C4,.Lfe20-sub_81175C4
	.align	2, 0
	.globl	AnimTask_BlendNonAttackerPalettes
	.type	 AnimTask_BlendNonAttackerPalettes,function
	.thumb_func
AnimTask_BlendNonAttackerPalettes:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r4, #0x0
	mov	r2, #0x0
	ldr	r0, .L297
	ldrb	r3, [r0]
	mov	r5, #0x1
.L289:
	cmp	r3, r2
	beq	.L288	@cond_branch
	add	r1, r2, #0
	add	r1, r1, #0x10
	add	r0, r5, #0
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L288:
	add	r2, r2, #0x1
	cmp	r2, #0x3
	bls	.L289	@cond_branch
	mov	r2, #0x5
	ldr	r0, .L297+0x4
	add	r1, r0, #0
	add	r1, r1, #0x8
.L295:
	ldrh	r0, [r1]
	strh	r0, [r1, #0x2]
	sub	r1, r1, #0x2
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L295	@cond_branch
	add	r0, r6, #0
	add	r1, r4, #0
	bl	StartBlendAnimSpriteColor
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L298:
	.align	2, 0
.L297:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe21:
	.size	 AnimTask_BlendNonAttackerPalettes,.Lfe21-AnimTask_BlendNonAttackerPalettes
	.align	2, 0
	.globl	AnimTask_StartSlidingBg
	.type	 AnimTask_StartSlidingBg,function
	.thumb_func
AnimTask_StartSlidingBg:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x0
	bl	sub_80A6DAC
	ldr	r0, .L301
	mov	r1, #0x5
	bl	CreateTask
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L301+0x4
	mov	r1, #0x4
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L300	@cond_branch
	ldr	r0, .L301+0x8
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L300	@cond_branch
	ldrh	r0, [r4]
	neg	r0, r0
	strh	r0, [r4]
	ldrh	r0, [r4, #0x2]
	neg	r0, r0
	strh	r0, [r4, #0x2]
.L300:
	ldr	r0, .L301+0xc
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldr	r2, .L301+0x4
	ldrh	r0, [r2]
	strh	r0, [r1, #0xa]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r1, #0xc]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r1, #0xe]
	ldrh	r0, [r1, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x8]
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L302:
	.align	2, 0
.L301:
	.word	AnimTask_UpdateSlidingBg
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gTasks
.Lfe22:
	.size	 AnimTask_StartSlidingBg,.Lfe22-AnimTask_StartSlidingBg
	.align	2, 0
	.type	 AnimTask_UpdateSlidingBg,function
	.thumb_func
AnimTask_UpdateSlidingBg:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L305
	lsl	r1, r5, #0x2
	add	r1, r1, r5
	lsl	r1, r1, #0x3
	add	r1, r1, r0
	ldrh	r3, [r1, #0xa]
	ldrh	r0, [r1, #0x1c]
	add	r3, r3, r0
	mov	r4, #0x0
	mov	ip, r4
	strh	r3, [r1, #0x1c]
	ldrh	r2, [r1, #0xc]
	ldrh	r7, [r1, #0x1e]
	add	r2, r2, r7
	strh	r2, [r1, #0x1e]
	ldr	r6, .L305+0x4
	lsl	r0, r3, #0x10
	asr	r0, r0, #0x18
	ldrh	r4, [r6]
	add	r0, r0, r4
	strh	r0, [r6]
	ldr	r4, .L305+0x8
	lsl	r0, r2, #0x10
	asr	r0, r0, #0x18
	ldrh	r7, [r4]
	add	r0, r0, r7
	strh	r0, [r4]
	mov	r0, #0xff
	and	r3, r3, r0
	strh	r3, [r1, #0x1c]
	and	r2, r2, r0
	strh	r2, [r1, #0x1e]
	ldr	r0, .L305+0xc
	mov	r3, #0xe
	ldrsh	r2, [r0, r3]
	mov	r7, #0xe
	ldrsh	r0, [r1, r7]
	cmp	r2, r0
	bne	.L304	@cond_branch
	mov	r0, ip
	strh	r0, [r6]
	strh	r0, [r4]
	mov	r0, #0x1
	bl	sub_80A6DAC
	add	r0, r5, #0
	bl	DestroyTask
.L304:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gTasks
	.word	gBattle_BG3_X
	.word	gBattle_BG3_Y
	.word	gBattleAnimArgs
.Lfe23:
	.size	 AnimTask_UpdateSlidingBg,.Lfe23-AnimTask_UpdateSlidingBg
	.align	2, 0
	.globl	AnimTask_GetAttackerSide
	.type	 AnimTask_GetAttackerSide,function
	.thumb_func
AnimTask_GetAttackerSide:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L308
	ldrb	r0, [r0]
	bl	GetBattlerSide
	ldr	r1, .L308+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L309:
	.align	2, 0
.L308:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe24:
	.size	 AnimTask_GetAttackerSide,.Lfe24-AnimTask_GetAttackerSide
	.align	2, 0
	.globl	AnimTask_GetTargetSide
	.type	 AnimTask_GetTargetSide,function
	.thumb_func
AnimTask_GetTargetSide:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r0, .L311
	ldrb	r0, [r0]
	bl	GetBattlerSide
	ldr	r1, .L311+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r1, #0xe]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L312:
	.align	2, 0
.L311:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.Lfe25:
	.size	 AnimTask_GetTargetSide,.Lfe25-AnimTask_GetTargetSide
	.align	2, 0
	.globl	AnimTask_GetTargetIsAttackerPartner
	.type	 AnimTask_GetTargetIsAttackerPartner,function
	.thumb_func
AnimTask_GetTargetIsAttackerPartner:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r5, .L315
	mov	r4, #0x0
	ldr	r0, .L315+0x4
	ldrb	r2, [r0]
	mov	r0, #0x2
	ldr	r1, .L315+0x8
	eor	r0, r0, r2
	ldrb	r1, [r1]
	cmp	r0, r1
	bne	.L314	@cond_branch
	mov	r4, #0x1
.L314:
	strh	r4, [r5, #0xe]
	add	r0, r3, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L316:
	.align	2, 0
.L315:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.Lfe26:
	.size	 AnimTask_GetTargetIsAttackerPartner,.Lfe26-AnimTask_GetTargetIsAttackerPartner
	.align	2, 0
	.globl	AnimTask_SetAllNonAttackersInvisiblity
	.type	 AnimTask_SetAllNonAttackersInvisiblity,function
	.thumb_func
AnimTask_SetAllNonAttackersInvisiblity:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r6, .L324
.L321:
	ldr	r0, .L324+0x4
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L320	@cond_branch
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L320	@cond_branch
	ldr	r0, .L324+0x8
	add	r0, r4, r0
	ldrb	r0, [r0]
	lsl	r2, r0, #0x4
	add	r2, r2, r0
	lsl	r2, r2, #0x2
	add	r2, r2, r6
	ldr	r1, .L324+0xc
	add	r2, r2, #0x3e
	mov	r0, #0x1
	ldrb	r3, [r1]
	and	r3, r3, r0
	lsl	r3, r3, #0x2
	ldrb	r0, [r2]
	mov	r7, #0x5
	neg	r7, r7
	add	r1, r7, #0
	and	r0, r0, r1
	orr	r0, r0, r3
	strb	r0, [r2]
.L320:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bls	.L321	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L325:
	.align	2, 0
.L324:
	.word	gSprites
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
	.word	gBattleAnimArgs
.Lfe27:
	.size	 AnimTask_SetAllNonAttackersInvisiblity,.Lfe27-AnimTask_SetAllNonAttackersInvisiblity
	.align	2, 0
	.globl	sub_8117854
	.type	 sub_8117854,function
	.thumb_func
sub_8117854:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	ldr	r1, [sp, #0x44]
	ldr	r4, [sp, #0x48]
	ldr	r5, [sp, #0x4c]
	ldr	r6, [sp, #0x50]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	str	r2, [sp, #0x14]
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	str	r4, [sp, #0x18]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x1c]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	mov	sl, r6
	mov	r0, #0x0
	str	r0, [sp, #0x20]
	mov	r0, #0x2
	add	r6, r7, #0
	eor	r6, r6, r0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L328	@cond_branch
	mov	r1, r8
	cmp	r1, #0
	beq	.L327	@cond_branch
	add	r0, r6, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L327	@cond_branch
.L328:
	mov	r2, #0x0
	mov	r8, r2
.L327:
	ldr	r0, .L336
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L336+0x4
	strh	r1, [r0]
	ldr	r1, .L336+0x8
	mov	r0, #0x48
	bl	SetGpuReg
	ldr	r1, .L336+0xc
	mov	r0, #0x4a
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L336+0x10
	mov	r0, #0x50
	bl	SetGpuReg
	mov	r1, #0x80
	lsl	r1, r1, #0x5
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xa
	bl	GetGpuReg
	add	r4, sp, #0x10
	strh	r0, [r4]
	ldrb	r1, [r4]
	mov	r0, #0x4
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r4]
	mov	r2, sp
	add	r2, r2, #0x11
	ldrb	r1, [r2]
	mov	r0, #0x3f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r0, [r2]
	mov	r1, #0x20
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L329	@cond_branch
	ldrb	r0, [r4]
	mov	r1, #0xd
	neg	r1, r1
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4]
.L329:
	ldrh	r1, [r4]
	mov	r0, #0xa
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L330	@cond_branch
	ldr	r0, .L336+0x14
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r4, [r0]
	b	.L331
.L337:
	.align	2, 0
.L336:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	0x3f3d
	.word	0x3f42
	.word	gContestResources
.L330:
	add	r0, r7, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L332	@cond_branch
	ldr	r1, .L338
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L338+0x4
	b	.L335
.L339:
	.align	2, 0
.L338:
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L332:
	ldr	r1, .L340
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L340+0x4
.L335:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L331:
	ldr	r5, .L340+0x8
	add	r0, r7, r5
	ldrb	r1, [r0]
	add	r0, r7, #0
	add	r2, r4, #0
	bl	sub_80A89C8
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	mov	r0, r8
	cmp	r0, #0
	beq	.L334	@cond_branch
	add	r0, r6, r5
	ldrb	r1, [r0]
	add	r0, r6, #0
	add	r2, r4, #0
	bl	sub_80A89C8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x20]
.L334:
	mov	r0, sp
	bl	sub_80A6B30
	mov	r0, sp
	ldr	r1, [sp, #0x58]
	mov	r2, #0x0
	bl	AnimLoadCompressedBgTilemapHandleContest
	mov	r0, sp
	ldrb	r0, [r0, #0x9]
	mov	r1, sp
	ldrh	r2, [r1, #0xa]
	ldr	r1, [sp, #0x54]
	bl	AnimLoadCompressedBgGfx
	mov	r0, sp
	ldrb	r1, [r0, #0x8]
	lsl	r1, r1, #0x4
	ldr	r0, [sp, #0x5c]
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, .L340+0xc
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L340+0x10
	strh	r1, [r0]
	ldr	r1, .L340+0x14
	mov	r2, r9
	lsl	r0, r2, #0x2
	add	r0, r0, r9
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	mov	r1, sp
	ldrh	r1, [r1, #0x14]
	strh	r1, [r0, #0xa]
	mov	r2, sp
	ldrh	r2, [r2, #0x18]
	strh	r2, [r0, #0x10]
	mov	r1, sl
	strh	r1, [r0, #0x12]
	mov	r2, sp
	ldrh	r2, [r2, #0x1c]
	strh	r2, [r0, #0x14]
	strh	r7, [r0, #0x8]
	mov	r1, r8
	strh	r1, [r0, #0xc]
	mov	r2, sp
	ldrh	r2, [r2, #0x20]
	strh	r2, [r0, #0xe]
	ldr	r1, .L340+0x18
	str	r1, [r0]
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L341:
	.align	2, 0
.L340:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
	.word	gBattlerSpriteIds
	.word	gBattle_BG1_X
	.word	gBattle_BG1_Y
	.word	gTasks
	.word	sub_8117A60
.Lfe28:
	.size	 sub_8117854,.Lfe28-sub_8117854
	.align	2, 0
	.type	 sub_8117A60,function
	.thumb_func
sub_8117A60:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r1, .L361
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r3, r0, r1
	mov	r0, #0xa
	ldrsh	r2, [r3, r0]
	add	r5, r1, #0
	cmp	r2, #0
	bge	.L343	@cond_branch
	neg	r2, r2
.L343:
	ldrh	r0, [r3, #0x22]
	add	r4, r0, r2
	strh	r4, [r3, #0x22]
	mov	r1, #0xa
	ldrsh	r0, [r3, r1]
	cmp	r0, #0
	bge	.L344	@cond_branch
	ldr	r2, .L361+0x4
	lsl	r1, r4, #0x10
	asr	r1, r1, #0x18
	ldrh	r0, [r2]
	sub	r0, r0, r1
	strh	r0, [r2]
	b	.L345
.L362:
	.align	2, 0
.L361:
	.word	gTasks
	.word	gBattle_BG1_Y
.L344:
	ldr	r1, .L363
	lsl	r0, r4, #0x10
	asr	r0, r0, #0x18
	ldrh	r2, [r1]
	add	r0, r0, r2
	strh	r0, [r1]
.L345:
	lsl	r0, r6, #0x2
	add	r0, r0, r6
	lsl	r0, r0, #0x3
	add	r5, r0, r5
	ldrh	r1, [r5, #0x22]
	mov	r0, #0xff
	and	r0, r0, r1
	mov	r2, #0x0
	strh	r0, [r5, #0x22]
	mov	r3, #0x26
	ldrsh	r0, [r5, r3]
	cmp	r0, #0x1
	beq	.L350	@cond_branch
	cmp	r0, #0x1
	bgt	.L359	@cond_branch
	cmp	r0, #0
	beq	.L347	@cond_branch
	b	.L346
.L364:
	.align	2, 0
.L363:
	.word	gBattle_BG1_Y
.L359:
	cmp	r0, #0x2
	beq	.L352	@cond_branch
	b	.L346
.L347:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x14
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	bge	.LCB3462
	b	.L346	@long jump
.LCB3462:
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	add	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r1, [r5, r0]
	mov	r2, #0x10
	ldrsh	r0, [r5, r2]
	cmp	r1, r0
	bne	.L346	@cond_branch
	b	.L360
.L350:
	ldrh	r0, [r5, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x1c]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x12
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	bne	.L346	@cond_branch
.L360:
	ldrh	r0, [r5, #0x26]
	add	r0, r0, #0x1
	strh	r0, [r5, #0x26]
	b	.L346
.L352:
	ldrh	r0, [r5, #0x1e]
	add	r1, r0, #0x1
	strh	r1, [r5, #0x1e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r3, #0x14
	ldrsh	r1, [r5, r3]
	cmp	r0, r1
	blt	.L346	@cond_branch
	strh	r2, [r5, #0x1e]
	ldrh	r1, [r5, #0x20]
	sub	r1, r1, #0x1
	strh	r1, [r5, #0x20]
	mov	r0, #0x10
	sub	r0, r0, r1
	lsl	r0, r0, #0x8
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0x20
	ldrsh	r4, [r5, r0]
	cmp	r4, #0
	bne	.L346	@cond_branch
	mov	r0, #0x0
	bl	sub_80A477C
	ldr	r0, .L365
	strh	r4, [r0]
	ldr	r0, .L365+0x4
	strh	r4, [r0]
	ldr	r4, .L365+0x8
	mov	r0, #0x48
	add	r1, r4, #0
	bl	SetGpuReg
	mov	r0, #0x4a
	add	r1, r4, #0
	bl	SetGpuReg
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L355	@cond_branch
	mov	r0, #0xa
	bl	GetGpuReg
	mov	r1, sp
	strh	r0, [r1]
	mov	r2, sp
	ldrb	r1, [r2]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
	mov	r0, sp
	ldrh	r1, [r0]
	mov	r0, #0xa
	bl	SetGpuReg
.L355:
	mov	r0, #0x0
	bl	GetGpuReg
	add	r1, r0, #0
	mov	r2, #0x80
	lsl	r2, r2, #0x8
	add	r0, r2, #0
	eor	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x0
	bl	SetGpuReg
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r3, #0x8
	ldrsh	r1, [r5, r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	ldr	r4, .L365+0xc
	add	r0, r0, r4
	bl	DestroySprite
	mov	r1, #0xc
	ldrsh	r0, [r5, r1]
	cmp	r0, #0
	beq	.L356	@cond_branch
	mov	r2, #0xe
	ldrsh	r1, [r5, r2]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	bl	DestroySprite
.L356:
	add	r0, r6, #0
	bl	DestroyAnimVisualTask
.L346:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L366:
	.align	2, 0
.L365:
	.word	gBattle_WIN0H
	.word	gBattle_WIN0V
	.word	0x3f3f
	.word	gSprites
.Lfe29:
	.size	 sub_8117A60,.Lfe29-sub_8117A60
	.align	2, 0
	.globl	AnimTask_GetBattleTerrain
	.type	 AnimTask_GetBattleTerrain,function
	.thumb_func
AnimTask_GetBattleTerrain:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L368
	ldr	r1, .L368+0x4
	ldrb	r1, [r1]
	strh	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L369:
	.align	2, 0
.L368:
	.word	gBattleAnimArgs
	.word	gBattleTerrain
.Lfe30:
	.size	 AnimTask_GetBattleTerrain,.Lfe30-AnimTask_GetBattleTerrain
	.align	2, 0
	.globl	AnimTask_AllocBackupPalBuffer
	.type	 AnimTask_AllocBackupPalBuffer,function
	.thumb_func
AnimTask_AllocBackupPalBuffer:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	ldr	r1, .L371
	ldr	r1, [r1]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	str	r0, [r1]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L372:
	.align	2, 0
.L371:
	.word	gMonSpritesGfxPtr
.Lfe31:
	.size	 AnimTask_AllocBackupPalBuffer,.Lfe31-AnimTask_AllocBackupPalBuffer
	.align	2, 0
	.globl	AnimTask_FreeBackupPalBuffer
	.type	 AnimTask_FreeBackupPalBuffer,function
	.thumb_func
AnimTask_FreeBackupPalBuffer:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	ldr	r6, .L374
	ldr	r0, [r6]
	mov	r5, #0xbe
	lsl	r5, r5, #0x1
	add	r0, r0, r5
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r6]
	add	r0, r0, r5
	mov	r1, #0x0
	str	r1, [r0]
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L375:
	.align	2, 0
.L374:
	.word	gMonSpritesGfxPtr
.Lfe32:
	.size	 AnimTask_FreeBackupPalBuffer,.Lfe32-AnimTask_FreeBackupPalBuffer
	.align	2, 0
	.globl	AnimTask_CopyPalUnfadedToBackup
	.type	 AnimTask_CopyPalUnfadedToBackup,function
	.thumb_func
AnimTask_CopyPalUnfadedToBackup:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L387
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L377	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L382	@cond_branch
	mov	r2, #0x1
.L380:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L380	@cond_branch
	b	.L382
.L388:
	.align	2, 0
.L387:
	.word	gBattleAnimArgs
.L377:
	cmp	r0, #0x1
	bne	.L383	@cond_branch
	ldr	r0, .L389
	b	.L386
.L390:
	.align	2, 0
.L389:
	.word	gBattleAnimAttacker
.L383:
	cmp	r0, #0x2
	bne	.L382	@cond_branch
	ldr	r0, .L391
.L386:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L382:
	ldr	r0, .L391+0x4
	ldr	r1, [r0]
	ldr	r0, .L391+0x8
	mov	r2, #0x2
	ldrsh	r0, [r0, r2]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	lsl	r0, r0, #0x5
	add	r0, r0, r1
	lsl	r1, r4, #0x5
	ldr	r2, .L391+0xc
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L392:
	.align	2, 0
.L391:
	.word	gBattleAnimTarget
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimArgs
	.word	gPlttBufferUnfaded
.Lfe33:
	.size	 AnimTask_CopyPalUnfadedToBackup,.Lfe33-AnimTask_CopyPalUnfadedToBackup
	.align	2, 0
	.globl	AnimTask_CopyPalUnfadedFromBackup
	.type	 AnimTask_CopyPalUnfadedFromBackup,function
	.thumb_func
AnimTask_CopyPalUnfadedFromBackup:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L404
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L394	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L399	@cond_branch
	mov	r2, #0x1
.L397:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L397	@cond_branch
	b	.L399
.L405:
	.align	2, 0
.L404:
	.word	gBattleAnimArgs
.L394:
	cmp	r0, #0x1
	bne	.L400	@cond_branch
	ldr	r0, .L406
	b	.L403
.L407:
	.align	2, 0
.L406:
	.word	gBattleAnimAttacker
.L400:
	cmp	r0, #0x2
	bne	.L399	@cond_branch
	ldr	r0, .L408
.L403:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L399:
	lsl	r0, r4, #0x5
	ldr	r1, .L408+0x4
	add	r0, r0, r1
	ldr	r1, .L408+0x8
	ldr	r2, [r1]
	ldr	r1, .L408+0xc
	mov	r3, #0x2
	ldrsh	r1, [r1, r3]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r2, r2, r3
	ldr	r2, [r2]
	lsl	r1, r1, #0x5
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L409:
	.align	2, 0
.L408:
	.word	gBattleAnimTarget
	.word	gPlttBufferUnfaded
	.word	gMonSpritesGfxPtr
	.word	gBattleAnimArgs
.Lfe34:
	.size	 AnimTask_CopyPalUnfadedFromBackup,.Lfe34-AnimTask_CopyPalUnfadedFromBackup
	.align	2, 0
	.globl	AnimTask_CopyPalFadedToUnfaded
	.type	 AnimTask_CopyPalFadedToUnfaded,function
	.thumb_func
AnimTask_CopyPalFadedToUnfaded:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r0, .L421
	mov	r1, #0x0
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L411	@cond_branch
	str	r4, [sp]
	str	r4, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	sub_80A75AC
	add	r1, r0, #0
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L416	@cond_branch
	mov	r2, #0x1
.L414:
	lsr	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r0, r1, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L414	@cond_branch
	b	.L416
.L422:
	.align	2, 0
.L421:
	.word	gBattleAnimArgs
.L411:
	cmp	r0, #0x1
	bne	.L417	@cond_branch
	ldr	r0, .L423
	b	.L420
.L424:
	.align	2, 0
.L423:
	.word	gBattleAnimAttacker
.L417:
	cmp	r0, #0x2
	bne	.L416	@cond_branch
	ldr	r0, .L425
.L420:
	ldrb	r0, [r0]
	add	r4, r0, #0
	add	r4, r4, #0x10
.L416:
	lsl	r1, r4, #0x5
	ldr	r0, .L425+0x4
	add	r0, r1, r0
	ldr	r2, .L425+0x8
	add	r1, r1, r2
	mov	r2, #0x20
	bl	memcpy
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L426:
	.align	2, 0
.L425:
	.word	gBattleAnimTarget
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
.Lfe35:
	.size	 AnimTask_CopyPalFadedToUnfaded,.Lfe35-AnimTask_CopyPalFadedToUnfaded
	.align	2, 0
	.globl	AnimTask_IsContest
	.type	 AnimTask_IsContest,function
	.thumb_func
AnimTask_IsContest:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L428	@cond_branch
	ldr	r1, .L430
	mov	r0, #0x1
	strh	r0, [r1, #0xe]
	b	.L429
.L431:
	.align	2, 0
.L430:
	.word	gBattleAnimArgs
.L428:
	ldr	r0, .L432
	strh	r1, [r0, #0xe]
.L429:
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.L433:
	.align	2, 0
.L432:
	.word	gBattleAnimArgs
.Lfe36:
	.size	 AnimTask_IsContest,.Lfe36-AnimTask_IsContest
	.align	2, 0
	.globl	AnimTask_SetAnimAttackerAndTargetForEffectTgt
	.type	 AnimTask_SetAnimAttackerAndTargetForEffectTgt,function
	.thumb_func
AnimTask_SetAnimAttackerAndTargetForEffectTgt:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L435
	ldr	r1, .L435+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	ldr	r2, .L435+0x8
	ldr	r1, .L435+0xc
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L436:
	.align	2, 0
.L435:
	.word	gBattleAnimAttacker
	.word	gBattlerTarget
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe37:
	.size	 AnimTask_SetAnimAttackerAndTargetForEffectTgt,.Lfe37-AnimTask_SetAnimAttackerAndTargetForEffectTgt
	.align	2, 0
	.globl	AnimTask_IsTargetSameSide
	.type	 AnimTask_IsTargetSameSide,function
	.thumb_func
AnimTask_IsTargetSameSide:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r0, .L441
	ldrb	r0, [r0]
	bl	GetBattlerSide
	add	r4, r0, #0
	ldr	r0, .L441+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r4, r4, #0x18
	lsl	r0, r0, #0x18
	cmp	r4, r0
	bne	.L438	@cond_branch
	ldr	r1, .L441+0x8
	mov	r0, #0x1
	b	.L440
.L442:
	.align	2, 0
.L441:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.L438:
	ldr	r1, .L443
	mov	r0, #0x0
.L440:
	strh	r0, [r1, #0xe]
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L444:
	.align	2, 0
.L443:
	.word	gBattleAnimArgs
.Lfe38:
	.size	 AnimTask_IsTargetSameSide,.Lfe38-AnimTask_IsTargetSameSide
	.align	2, 0
	.globl	AnimTask_SetAnimTargetToBattlerTarget
	.type	 AnimTask_SetAnimTargetToBattlerTarget,function
	.thumb_func
AnimTask_SetAnimTargetToBattlerTarget:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L446
	ldr	r1, .L446+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L447:
	.align	2, 0
.L446:
	.word	gBattleAnimTarget
	.word	gBattlerTarget
.Lfe39:
	.size	 AnimTask_SetAnimTargetToBattlerTarget,.Lfe39-AnimTask_SetAnimTargetToBattlerTarget
	.align	2, 0
	.globl	AnimTask_SetAnimAttackerAndTargetForEffectAtk
	.type	 AnimTask_SetAnimAttackerAndTargetForEffectAtk,function
	.thumb_func
AnimTask_SetAnimAttackerAndTargetForEffectAtk:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L449
	ldr	r1, .L449+0x4
	ldrb	r1, [r1]
	strb	r1, [r2]
	ldr	r2, .L449+0x8
	ldr	r1, .L449+0xc
	ldrb	r1, [r1]
	strb	r1, [r2]
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L450:
	.align	2, 0
.L449:
	.word	gBattleAnimAttacker
	.word	gBattlerAttacker
	.word	gBattleAnimTarget
	.word	gEffectBattler
.Lfe40:
	.size	 AnimTask_SetAnimAttackerAndTargetForEffectAtk,.Lfe40-AnimTask_SetAnimAttackerAndTargetForEffectAtk
	.align	2, 0
	.globl	AnimTask_SetAttackerInvisibleWaitForSignal
	.type	 AnimTask_SetAttackerInvisibleWaitForSignal,function
	.thumb_func
AnimTask_SetAttackerInvisibleWaitForSignal:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L452	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L453
.L452:
	ldr	r0, .L454
	lsl	r3, r4, #0x2
	add	r3, r3, r4
	lsl	r3, r3, #0x3
	add	r3, r3, r0
	ldr	r0, .L454+0x4
	ldr	r4, [r0]
	ldr	r2, .L454+0x8
	ldrb	r0, [r2]
	ldr	r1, [r4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	lsl	r0, r0, #0x1f
	lsr	r0, r0, #0x1f
	strh	r0, [r3, #0x8]
	ldrb	r1, [r2]
	ldr	r0, [r4]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1]
	mov	r2, #0x1
	orr	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, .L454+0xc
	str	r0, [r3]
	ldr	r1, .L454+0x10
	ldrb	r0, [r1]
	sub	r0, r0, #0x1
	strb	r0, [r1]
.L453:
	pop	{r4}
	pop	{r0}
	bx	r0
.L455:
	.align	2, 0
.L454:
	.word	gTasks
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
	.word	AnimTask_WaitAndRestoreVisibility
	.word	gAnimVisualTaskCount
.Lfe41:
	.size	 AnimTask_SetAttackerInvisibleWaitForSignal,.Lfe41-AnimTask_SetAttackerInvisibleWaitForSignal
	.align	2, 0
	.type	 AnimTask_WaitAndRestoreVisibility,function
	.thumb_func
AnimTask_WaitAndRestoreVisibility:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L458
	mov	r2, #0xe
	ldrsh	r1, [r0, r2]
	mov	r0, #0x80
	lsl	r0, r0, #0x5
	cmp	r1, r0
	bne	.L457	@cond_branch
	ldr	r0, .L458+0x4
	ldr	r1, [r0]
	ldr	r0, .L458+0x8
	ldrb	r3, [r0]
	ldr	r0, [r1]
	lsl	r3, r3, #0x2
	add	r3, r3, r0
	ldr	r1, .L458+0xc
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrb	r0, [r0, #0x8]
	mov	r1, #0x1
	and	r1, r1, r0
	ldrb	r2, [r3]
	mov	r0, #0x2
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r0, r4, #0
	bl	DestroyTask
.L457:
	pop	{r4}
	pop	{r0}
	bx	r0
.L459:
	.align	2, 0
.L458:
	.word	gBattleAnimArgs
	.word	gBattleSpritesDataPtr
	.word	gBattleAnimAttacker
	.word	gTasks
.Lfe42:
	.size	 AnimTask_WaitAndRestoreVisibility,.Lfe42-AnimTask_WaitAndRestoreVisibility
.text
	.align	2, 0

