@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 ShouldSwitchIfPerishSong,function
	.thumb_func
ShouldSwitchIfPerishSong:
	push	{lr}
	ldr	r1, .L6
	ldr	r0, .L6+0x4
	ldrb	r2, [r0]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L3	@cond_branch
	ldr	r0, .L6+0x8
	lsl	r1, r2, #0x3
	sub	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0xf]
	lsl	r0, r0, #0x1c
	cmp	r0, #0
	bne	.L3	@cond_branch
	ldr	r0, .L6+0xc
	ldr	r0, [r0]
	add	r0, r2, r0
	mov	r1, #0xa5
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L5
.L7:
	.align	2, 0
.L6:
	.word	gStatuses3
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gBattleStruct
.L3:
	mov	r0, #0x0
.L5:
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 ShouldSwitchIfPerishSong,.Lfe1-ShouldSwitchIfPerishSong
	.align	2, 0
	.type	 ShouldSwitchIfWonderGuard,function
	.thumb_func
ShouldSwitchIfWonderGuard:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r0, .L43
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB76
	b	.L25	@long jump
.LCB76:
	ldr	r0, .L43+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	ldr	r4, .L43+0x8
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x58
	mul	r0, r0, r1
	add	r0, r0, r4
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x19
	beq	.LCB100
	b	.L25	@long jump
.LCB100:
	mov	r0, sl
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r6, #0x0
	mov	r8, r4
	mov	r7, #0x58
	mov	r0, r2
	mul	r0, r0, r7
	add	r4, r0, r4
	mov	r0, #0x20
	add	r0, r0, r4
	mov	r9, r0
.L14:
	lsl	r1, r6, #0x1
	ldr	r5, .L43+0x4
	ldrb	r0, [r5]
	mul	r0, r0, r7
	add	r1, r1, r0
	mov	r0, r8
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldrh	r1, [r4]
	mov	r3, r9
	ldrb	r2, [r3]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB146
	b	.L25	@long jump
.LCB146:
.L13:
	add	r6, r6, #0x1
	cmp	r6, #0x3
	ble	.L14	@cond_branch
	ldr	r0, .L43
	ldr	r0, [r0]
	ldr	r1, .L43+0xc
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L18	@cond_branch
	ldrb	r1, [r5]
	mov	r0, #0x2
	and	r0, r0, r1
	add	r1, r5, #0
	cmp	r0, #0
	bne	.L19	@cond_branch
	mov	r4, #0x0
	mov	r0, #0x3
	str	r0, [sp]
	b	.L21
.L44:
	.align	2, 0
.L43:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gBattleMons
	.word	0x808000
.L19:
	mov	r4, #0x3
	mov	r3, #0x6
	str	r3, [sp]
	b	.L21
.L42:
	ldr	r0, .L45
	ldrb	r0, [r0]
	ldr	r1, .L45+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0xa5
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r6, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L40
.L46:
	.align	2, 0
.L45:
	.word	gActiveBattler
	.word	gBattleStruct
.L18:
	mov	r4, #0x0
	mov	r3, #0x6
	str	r3, [sp]
	add	r1, r5, #0
.L21:
	ldrb	r0, [r1]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L47
	mov	r9, r1
	cmp	r0, #0
	bne	.L22	@cond_branch
	ldr	r3, .L47+0x4
	mov	r9, r3
.L22:
	add	r6, r4, #0
	ldr	r0, [sp]
	cmp	r6, r0
	bge	.L25	@cond_branch
.L27:
	mov	r0, #0x64
	mov	r5, r6
	mul	r5, r5, r0
	mov	r1, r9
	add	r4, r1, r5
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L26	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L26	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L26	@cond_branch
	ldr	r1, .L47+0x8
	ldr	r0, .L47+0xc
	ldrb	r0, [r0]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L26	@cond_branch
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	add	r0, r4, #0
	mov	r1, #0x2e
	bl	GetMonData
	mov	r0, sl
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	mov	r4, #0x0
	mov	r8, r5
	ldr	r1, .L47+0x10
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r5, r0, r1
	add	r7, r5, #0
	add	r7, r7, #0x20
.L35:
	add	r1, r4, #0
	add	r1, r1, #0xd
	mov	r0, r9
	add	r0, r0, r8
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L34	@cond_branch
	ldrh	r1, [r5]
	ldrb	r2, [r7]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L34	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x1
	bls	.L42	@cond_branch
.L34:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L35	@cond_branch
.L26:
	add	r6, r6, #0x1
	ldr	r3, [sp]
	cmp	r6, r3
	blt	.L27	@cond_branch
.L25:
	mov	r0, #0x0
.L40:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L48:
	.align	2, 0
.L47:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gActiveBattler
	.word	gBattleMons
.Lfe2:
	.size	 ShouldSwitchIfWonderGuard,.Lfe2-ShouldSwitchIfWonderGuard
	.align	2, 0
	.type	 FindMonThatAbsorbsOpponentsMove,function
	.thumb_func
FindMonThatAbsorbsOpponentsMove:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	mov	r0, #0x1
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L50	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x3
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.LCB402
	b	.L72	@long jump
.LCB402:
.L50:
	ldr	r1, .L90
	ldr	r5, .L90+0x4
	ldrb	r3, [r5]
	lsl	r0, r3, #0x1
	add	r4, r0, r1
	ldrh	r1, [r4]
	cmp	r1, #0
	bne	.LCB413
	b	.L72	@long jump
.LCB413:
	ldr	r0, .L90+0x8
	cmp	r1, r0
	bne	.LCB418
	b	.L72	@long jump
.LCB418:
	ldr	r2, .L90+0xc
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.LCB429
	b	.L72	@long jump
.LCB429:
	ldr	r0, .L90+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L54	@cond_branch
	mov	r8, r3
	mov	r0, r8
	bl	GetBattlerPosition
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L90+0x14
	ldrb	r1, [r1]
	ldr	r2, .L90+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L55	@cond_branch
	ldrb	r7, [r5]
	b	.L57
.L91:
	.align	2, 0
.L90:
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	0xffff
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L55:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	b	.L57
.L54:
	add	r7, r3, #0
	mov	r8, r7
.L57:
	ldr	r3, .L92
	ldr	r1, .L92+0x4
	ldr	r2, .L92+0x8
	ldrb	r0, [r2]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrb	r0, [r0, #0x2]
	cmp	r0, #0xa
	bne	.L58	@cond_branch
	mov	r0, #0x12
	b	.L88
.L93:
	.align	2, 0
.L92:
	.word	gBattleMoves
	.word	gLastLandedMoves
	.word	gActiveBattler
.L58:
	cmp	r0, #0xb
	bne	.L60	@cond_branch
	mov	r1, #0xb
	str	r1, [sp]
	b	.L59
.L60:
	cmp	r0, #0xd
	beq	.LCB531
	b	.L72	@long jump
.LCB531:
	mov	r0, #0xa
.L88:
	str	r0, [sp]
.L59:
	ldr	r1, .L94
	ldrb	r3, [r2]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r0, r0, r1
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	ldr	r1, [sp]
	cmp	r0, r1
	bne	.LCB548
	b	.L72	@long jump
.LCB548:
	ldr	r0, .L94+0x4
	ldr	r0, [r0]
	ldr	r1, .L94+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L65	@cond_branch
	mov	r0, #0x2
	and	r3, r3, r0
	cmp	r3, #0
	bne	.L66	@cond_branch
	mov	r4, #0x0
	mov	r0, #0x3
	b	.L89
.L95:
	.align	2, 0
.L94:
	.word	gBattleMons
	.word	gBattleTypeFlags
	.word	0x808000
.L66:
	mov	r4, #0x3
	mov	r1, #0x6
	mov	sl, r1
	b	.L68
.L87:
	ldr	r0, .L96
	ldrb	r0, [r0]
	ldr	r1, .L96+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r2, #0xa5
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	strb	r5, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L86
.L97:
	.align	2, 0
.L96:
	.word	gActiveBattler
	.word	gBattleStruct
.L65:
	mov	r4, #0x0
	mov	r0, #0x6
.L89:
	mov	sl, r0
.L68:
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L98
	str	r1, [sp, #0x4]
	cmp	r0, #0
	bne	.L69	@cond_branch
	ldr	r2, .L98+0x4
	str	r2, [sp, #0x4]
.L69:
	add	r5, r4, #0
	cmp	r5, sl
	bge	.L72	@cond_branch
	ldr	r0, .L98+0x8
	mov	r9, r0
.L74:
	mov	r0, #0x64
	mul	r0, r0, r5
	ldr	r1, [sp, #0x4]
	add	r6, r1, r0
	add	r0, r6, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L73	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L73	@cond_branch
	add	r0, r6, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L73	@cond_branch
	ldr	r1, .L98+0xc
	mov	r2, r8
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L73	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L73	@cond_branch
	ldr	r0, .L98+0x10
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L73	@cond_branch
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L73	@cond_branch
	add	r0, r6, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r6, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L82	@cond_branch
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x17]
	b	.L83
.L99:
	.align	2, 0
.L98:
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBaseStats
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
.L82:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r9
	ldrb	r0, [r0, #0x16]
.L83:
	ldr	r1, [sp]
	cmp	r1, r0
	bne	.L73	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB734
	b	.L87	@long jump
.LCB734:
.L73:
	add	r5, r5, #0x1
	cmp	r5, sl
	blt	.L74	@cond_branch
.L72:
	mov	r0, #0x0
.L86:
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe3:
	.size	 FindMonThatAbsorbsOpponentsMove,.Lfe3-FindMonThatAbsorbsOpponentsMove
	.align	2, 0
	.type	 ShouldSwitchIfNaturalCure,function
	.thumb_func
ShouldSwitchIfNaturalCure:
	push	{r4, r5, lr}
	ldr	r3, .L115
	ldr	r5, .L115+0x4
	ldrb	r4, [r5]
	mov	r0, #0x58
	mov	r2, r4
	mul	r2, r2, r0
	add	r0, r3, #0
	add	r0, r0, #0x4c
	add	r0, r2, r0
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L112	@cond_branch
	add	r1, r2, r3
	add	r0, r1, #0
	add	r0, r0, #0x20
	ldrb	r0, [r0]
	cmp	r0, #0x1e
	bne	.L112	@cond_branch
	ldrh	r0, [r1, #0x2c]
	ldrh	r1, [r1, #0x28]
	lsr	r0, r0, #0x1
	cmp	r1, r0
	bcc	.L112	@cond_branch
	ldr	r1, .L115+0x8
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	cmp	r1, #0
	beq	.L105	@cond_branch
	ldr	r0, .L115+0xc
	cmp	r1, r0
	bne	.L104	@cond_branch
.L105:
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L104	@cond_branch
	ldrb	r0, [r5]
	b	.L113
.L116:
	.align	2, 0
.L115:
	.word	gBattleMons
	.word	gActiveBattler
	.word	gLastLandedMoves
	.word	0xffff
.L104:
	ldr	r2, .L117
	ldr	r1, .L117+0x4
	ldr	r4, .L117+0x8
	ldrb	r0, [r4]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.L106	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L106	@cond_branch
	ldrb	r0, [r4]
	b	.L113
.L118:
	.align	2, 0
.L117:
	.word	gBattleMoves
	.word	gLastLandedMoves
	.word	gActiveBattler
.L106:
	mov	r0, #0x8
	mov	r1, #0x1
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L114	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x1
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L114	@cond_branch
	bl	Random
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L110	@cond_branch
.L112:
	mov	r0, #0x0
	b	.L111
.L110:
	ldr	r0, .L119
	ldrb	r0, [r0]
.L113:
	ldr	r1, .L119+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r1, #0xa5
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	mov	r1, #0x6
	strb	r1, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
.L114:
	mov	r0, #0x1
.L111:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L120:
	.align	2, 0
.L119:
	.word	gActiveBattler
	.word	gBattleStruct
.Lfe4:
	.size	 ShouldSwitchIfNaturalCure,.Lfe4-ShouldSwitchIfNaturalCure
	.align	2, 0
	.type	 HasSuperEffectiveMoveAgainstOpponents,function
	.thumb_func
HasSuperEffectiveMoveAgainstOpponents:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	ldr	r0, .L148
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L148+0x4
	ldrb	r1, [r0]
	ldr	r2, .L148+0x8
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L122	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L148+0xc
	mov	r7, #0x58
	mov	r0, r3
	mul	r0, r0, r7
	add	r5, r0, r6
	mov	r0, #0x20
	add	r0, r0, r5
	mov	r8, r0
.L126:
	lsl	r1, r4, #0x1
	ldr	r0, .L148
	ldrb	r0, [r0]
	mul	r0, r0, r7
	add	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L125	@cond_branch
	ldrh	r1, [r5]
	mov	r3, r8
	ldrb	r2, [r3]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L125	@cond_branch
	mov	r0, r9
	cmp	r0, #0
	bne	.L147	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L147	@cond_branch
.L125:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L126	@cond_branch
.L122:
	ldr	r0, .L148+0x10
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L132	@cond_branch
	b	.L133
.L149:
	.align	2, 0
.L148:
	.word	gActiveBattler
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gBattleTypeFlags
.L146:
.L147:
	mov	r0, #0x1
	b	.L143
.L132:
	mov	r1, #0x2
	mov	r0, sl
	eor	r0, r0, r1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r0, .L150
	ldrb	r1, [r0]
	ldr	r2, .L150+0x4
	lsl	r0, r3, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L133	@cond_branch
	mov	r4, #0x0
	ldr	r6, .L150+0x8
	mov	r7, #0x58
	mov	r0, r3
	mul	r0, r0, r7
	add	r5, r0, r6
	mov	r3, #0x20
	add	r3, r3, r5
	mov	r8, r3
.L137:
	lsl	r1, r4, #0x1
	ldr	r0, .L150+0xc
	ldrb	r0, [r0]
	mul	r0, r0, r7
	add	r1, r1, r0
	add	r0, r6, #0
	add	r0, r0, #0xc
	add	r1, r1, r0
	ldrh	r0, [r1]
	cmp	r0, #0
	beq	.L136	@cond_branch
	ldrh	r1, [r5]
	mov	r3, r8
	ldrb	r2, [r3]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L136	@cond_branch
	mov	r0, r9
	cmp	r0, #0
	bne	.L146	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0xa
	bl	__umodsi3
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L147	@cond_branch
.L136:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L137	@cond_branch
.L133:
	mov	r0, #0x0
.L143:
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L151:
	.align	2, 0
.L150:
	.word	gAbsentBattlerFlags
	.word	gBitTable
	.word	gBattleMons
	.word	gActiveBattler
.Lfe5:
	.size	 HasSuperEffectiveMoveAgainstOpponents,.Lfe5-HasSuperEffectiveMoveAgainstOpponents
	.align	2, 0
	.type	 AreStatsRaised,function
	.thumb_func
AreStatsRaised:
	push	{r4, lr}
	mov	r4, #0x0
	ldr	r1, .L160
	ldr	r0, .L160+0x4
	ldrb	r2, [r0]
	mov	r0, #0x58
	mul	r0, r0, r2
	add	r1, r1, #0x18
	add	r2, r0, r1
	mov	r3, #0x7
.L156:
	ldrb	r1, [r2]
	mov	r0, #0x0
	ldrsb	r0, [r2, r0]
	cmp	r0, #0x6
	ble	.L155	@cond_branch
	sub	r1, r1, #0x6
	lsl	r0, r4, #0x18
	asr	r0, r0, #0x18
	add	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L155:
	add	r2, r2, #0x1
	sub	r3, r3, #0x1
	cmp	r3, #0
	bge	.L156	@cond_branch
	mov	r0, #0x0
	cmp	r4, #0x3
	bls	.L159	@cond_branch
	mov	r0, #0x1
.L159:
	pop	{r4}
	pop	{r1}
	bx	r1
.L161:
	.align	2, 0
.L160:
	.word	gBattleMons
	.word	gActiveBattler
.Lfe6:
	.size	 AreStatsRaised,.Lfe6-AreStatsRaised
	.align	2, 0
	.type	 FindMonWithFlagsAndSuperEffective,function
	.thumb_func
FindMonWithFlagsAndSuperEffective:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	str	r1, [sp, #0x4]
	ldr	r2, .L202
	ldr	r1, .L202+0x4
	ldrb	r3, [r1]
	lsl	r0, r3, #0x1
	add	r4, r0, r2
	ldrh	r2, [r4]
	add	r5, r1, #0
	cmp	r2, #0
	bne	.LCB1233
	b	.L178	@long jump
.LCB1233:
	ldr	r0, .L202+0x8
	cmp	r2, r0
	bne	.LCB1238
	b	.L178	@long jump
.LCB1238:
	ldr	r0, .L202+0xc
	add	r0, r3, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.LCB1245
	b	.L178	@long jump
.LCB1245:
	ldr	r2, .L202+0x10
	ldrh	r1, [r4]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x1]
	cmp	r0, #0
	bne	.LCB1256
	b	.L178	@long jump
.LCB1256:
	ldr	r0, .L202+0x14
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L167	@cond_branch
	mov	r9, r3
	mov	r0, r9
	bl	GetBattlerPosition
	mov	r4, #0x2
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L202+0x18
	ldrb	r1, [r1]
	ldr	r2, .L202+0x1c
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L168	@cond_branch
	ldrb	r5, [r5]
	mov	sl, r5
	b	.L170
.L203:
	.align	2, 0
.L202:
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	0xffff
	.word	gLastHitBy
	.word	gBattleMoves
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L168:
	ldrb	r0, [r5]
	bl	GetBattlerPosition
	eor	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
	b	.L170
.L167:
	mov	r9, r3
	mov	sl, r9
.L170:
	ldr	r0, .L204
	ldr	r0, [r0]
	ldr	r1, .L204+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L171	@cond_branch
	ldr	r2, .L204+0x8
	ldrb	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	add	r5, r2, #0
	cmp	r0, #0
	bne	.L172	@cond_branch
	mov	r4, #0x0
	mov	r0, #0x3
	str	r0, [sp, #0x8]
	b	.L174
.L205:
	.align	2, 0
.L204:
	.word	gBattleTypeFlags
	.word	0x808000
	.word	gActiveBattler
.L172:
	mov	r4, #0x3
	mov	r1, #0x6
	str	r1, [sp, #0x8]
	b	.L174
.L200:
	ldr	r0, .L206
	ldrb	r0, [r0]
	ldr	r1, .L206+0x4
	ldr	r1, [r1]
	add	r0, r0, r1
	mov	r2, #0xa5
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	strb	r6, [r0]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	mov	r0, #0x1
	b	.L199
.L207:
	.align	2, 0
.L206:
	.word	gActiveBattler
	.word	gBattleStruct
.L171:
	mov	r4, #0x0
	mov	r0, #0x6
	str	r0, [sp, #0x8]
	ldr	r5, .L208
.L174:
	ldrb	r0, [r5]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L208+0x4
	str	r1, [sp, #0xc]
	cmp	r0, #0
	bne	.L175	@cond_branch
	ldr	r2, .L208+0x8
	str	r2, [sp, #0xc]
.L175:
	add	r6, r4, #0
	b	.L201
.L209:
	.align	2, 0
.L208:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
.L180:
	mov	r0, #0x64
	mul	r0, r0, r6
	ldr	r1, [sp, #0xc]
	add	r5, r1, r0
	add	r0, r5, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB1430
	b	.L179	@long jump
.LCB1430:
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	bne	.LCB1436
	b	.L179	@long jump
.LCB1436:
	add	r0, r5, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L179	@cond_branch
	ldr	r1, .L210
	mov	r2, r9
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L179	@cond_branch
	mov	r2, sl
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r6, r0
	beq	.L179	@cond_branch
	ldr	r0, .L210+0x4
	ldr	r1, [r0]
	mov	r2, r9
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L179	@cond_branch
	mov	r2, sl
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r6, r0
	beq	.L179	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	add	r0, r5, #0
	mov	r1, #0x2e
	bl	GetMonData
	cmp	r0, #0
	beq	.L188	@cond_branch
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r1, .L210+0x8
	add	r0, r0, r1
	ldrb	r2, [r0, #0x17]
	b	.L189
.L211:
	.align	2, 0
.L210:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBaseStats
.L188:
	lsl	r0, r4, #0x3
	sub	r0, r0, r4
	lsl	r0, r0, #0x2
	ldr	r2, .L212
	add	r0, r0, r2
	ldrb	r2, [r0, #0x16]
.L189:
	ldr	r1, .L212+0x4
	ldr	r5, .L212+0x8
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	add	r1, r4, #0
	bl	AI_TypeCalc
	ldr	r1, [sp]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L179	@cond_branch
	ldr	r1, .L212+0xc
	ldrb	r0, [r5]
	add	r0, r0, r1
	ldrb	r0, [r0]
	mov	r9, r0
	mov	r4, #0x0
	mov	r0, #0x64
	mov	r1, r6
	mul	r1, r1, r0
	mov	r8, r1
	ldr	r1, .L212+0x10
	mov	r0, #0x58
	mov	r2, r9
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r5, r0, r1
	add	r7, r5, #0
	add	r7, r7, #0x20
.L194:
	add	r1, r4, #0
	add	r1, r1, #0xd
	ldr	r0, [sp, #0xc]
	add	r0, r0, r8
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	beq	.L193	@cond_branch
	ldrh	r1, [r5]
	ldrb	r2, [r7]
	bl	AI_TypeCalc
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	mov	r0, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L193	@cond_branch
	bl	Random
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0x4]
	bl	__modsi3
	cmp	r0, #0
	bne	.LCB1589
	b	.L200	@long jump
.LCB1589:
.L193:
	add	r4, r4, #0x1
	cmp	r4, #0x3
	ble	.L194	@cond_branch
.L179:
	add	r6, r6, #0x1
.L201:
	ldr	r0, [sp, #0x8]
	cmp	r6, r0
	bge	.LCB1605
	b	.L180	@long jump
.LCB1605:
.L178:
	mov	r0, #0x0
.L199:
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L213:
	.align	2, 0
.L212:
	.word	gBaseStats
	.word	gLastLandedMoves
	.word	gActiveBattler
	.word	gLastHitBy
	.word	gBattleMons
.Lfe7:
	.size	 FindMonWithFlagsAndSuperEffective,.Lfe7-FindMonWithFlagsAndSuperEffective
	.align	2, 0
	.type	 ShouldSwitch,function
	.thumb_func
ShouldSwitch:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	ldr	r6, .L255
	ldr	r4, .L255+0x4
	ldrb	r2, [r4]
	mov	r5, #0x58
	mov	r0, r2
	mul	r0, r0, r5
	add	r1, r6, #0
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	ldr	r1, .L255+0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1647
	b	.L252	@long jump
.LCB1647:
	ldr	r0, .L255+0xc
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldr	r1, [r1]
	mov	r0, #0x80
	lsl	r0, r0, #0x3
	and	r1, r1, r0
	cmp	r1, #0
	beq	.LCB1656
	b	.L252	@long jump
.LCB1656:
	str	r1, [sp]
	mov	r0, #0xc
	add	r1, r2, #0
	mov	r2, #0x17
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1667
	b	.L252	@long jump
.LCB1667:
	ldrb	r1, [r4]
	str	r0, [sp]
	mov	r0, #0xc
	mov	r2, #0x47
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1679
	b	.L252	@long jump
.LCB1679:
	str	r0, [sp]
	mov	r0, #0xe
	mov	r1, #0x0
	mov	r2, #0x2a
	mov	r3, #0x0
	bl	AbilityBattleEffects
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L219	@cond_branch
	ldrb	r0, [r4]
	mul	r0, r0, r5
	add	r1, r0, r6
	add	r0, r1, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.LCB1701
	b	.L252	@long jump
.LCB1701:
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldrb	r0, [r0]
	cmp	r0, #0x8
	bne	.LCB1708
	b	.L252	@long jump
.LCB1708:
.L219:
	ldr	r0, .L255+0x10
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB1716
	b	.L252	@long jump
.LCB1716:
	mov	r0, #0x0
	mov	sl, r0
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L223	@cond_branch
	ldrb	r7, [r4]
	add	r0, r7, #0
	bl	GetBattlerPosition
	mov	r5, #0x2
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L255+0x14
	ldrb	r1, [r1]
	ldr	r2, .L255+0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L224	@cond_branch
	ldrb	r6, [r4]
	b	.L226
.L256:
	.align	2, 0
.L255:
	.word	gBattleMons
	.word	gActiveBattler
	.word	0x400e000
	.word	gStatuses3
	.word	gBattleTypeFlags
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L224:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	b	.L226
.L223:
	ldrb	r6, [r4]
	add	r7, r6, #0
.L226:
	ldr	r0, .L257
	ldr	r0, [r0]
	ldr	r1, .L257+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L227	@cond_branch
	ldr	r2, .L257+0x8
	ldrb	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L228	@cond_branch
	mov	r4, #0x0
	mov	r1, #0x3
	mov	r8, r1
	b	.L230
.L258:
	.align	2, 0
.L257:
	.word	gBattleTypeFlags
	.word	0x808000
	.word	gActiveBattler
.L228:
	mov	r4, #0x3
	mov	r0, #0x6
	mov	r8, r0
	b	.L230
.L227:
	mov	r4, #0x0
	mov	r1, #0x6
	mov	r8, r1
	ldr	r2, .L259
.L230:
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L259+0x4
	mov	r9, r1
	cmp	r0, #0
	bne	.L231	@cond_branch
	ldr	r0, .L259+0x8
	mov	r9, r0
.L231:
	add	r5, r4, #0
	cmp	r5, r8
	bge	.L234	@cond_branch
.L236:
	mov	r0, #0x64
	mul	r0, r0, r5
	mov	r1, r9
	add	r4, r1, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L235	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L235	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L235	@cond_branch
	ldr	r1, .L259+0xc
	lsl	r0, r7, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L235	@cond_branch
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r5, r0
	beq	.L235	@cond_branch
	ldr	r0, .L259+0x10
	ldr	r1, [r0]
	add	r0, r7, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L235	@cond_branch
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r5, r0
	beq	.L235	@cond_branch
	mov	r0, #0x1
	add	sl, sl, r0
.L235:
	add	r5, r5, #0x1
	cmp	r5, r8
	blt	.L236	@cond_branch
.L234:
	mov	r1, sl
	cmp	r1, #0
	beq	.L252	@cond_branch
	bl	ShouldSwitchIfPerishSong
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	bl	ShouldSwitchIfWonderGuard
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	bl	FindMonThatAbsorbsOpponentsMove
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	bl	ShouldSwitchIfNaturalCure
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	mov	r0, #0x0
	bl	HasSuperEffectiveMoveAgainstOpponents
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L252	@cond_branch
	bl	AreStatsRaised
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L252	@cond_branch
	mov	r0, #0x8
	mov	r1, #0x2
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L253	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x3
	bl	FindMonWithFlagsAndSuperEffective
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L252	@cond_branch
.L253:
	mov	r0, #0x1
	b	.L254
.L260:
	.align	2, 0
.L259:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
.L252:
	mov	r0, #0x0
.L254:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 ShouldSwitch,.Lfe8-ShouldSwitch
	.align	2, 0
	.globl	AI_TrySwitchOrUseItem
	.type	 AI_TrySwitchOrUseItem,function
	.thumb_func
AI_TrySwitchOrUseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r4, .L287
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	add	r5, r6, #0
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r1, .L287+0x4
	mov	r8, r1
	cmp	r0, #0
	bne	.L262	@cond_branch
	ldr	r2, .L287+0x8
	mov	r8, r2
.L262:
	ldr	r7, .L287+0xc
	ldr	r0, [r7]
	mov	r1, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2017
	b	.L264	@long jump
.LCB2017:
	bl	ShouldSwitch
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB2024
	b	.L265	@long jump
.LCB2024:
	ldrb	r0, [r4]
	ldr	r2, .L287+0x10
	ldr	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0xa5
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0x6
	bne	.L266	@cond_branch
	bl	GetMostSuitableMonToSwitchInto
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0x6
	bne	.L267	@cond_branch
	ldr	r0, [r7]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L268	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r6, r5, #0
	b	.L269
.L288:
	.align	2, 0
.L287:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleTypeFlags
	.word	gBattleStruct
.L268:
	add	r0, r5, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	mov	r0, #0x2
	eor	r5, r5, r0
	add	r0, r5, #0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
.L269:
	ldr	r0, .L289
	ldr	r0, [r0]
	ldr	r1, .L289+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L270	@cond_branch
	ldr	r0, .L289+0x8
	ldrb	r1, [r0]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L271	@cond_branch
	mov	r0, #0x0
	mov	r7, #0x3
	b	.L273
.L290:
	.align	2, 0
.L289:
	.word	gBattleTypeFlags
	.word	0x808000
	.word	gActiveBattler
.L271:
	mov	r0, #0x3
	b	.L286
.L270:
	mov	r0, #0x0
.L286:
	mov	r7, #0x6
.L273:
	add	r4, r0, #0
	cmp	r4, r7
	bge	.L267	@cond_branch
.L277:
	mov	r0, #0x64
	mul	r0, r0, r4
	add	r0, r0, r8
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L276	@cond_branch
	ldr	r1, .L291
	lsl	r0, r6, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L276	@cond_branch
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r4, r0
	beq	.L276	@cond_branch
	ldr	r0, .L291+0x4
	ldr	r1, [r0]
	add	r0, r6, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	beq	.L276	@cond_branch
	add	r0, r5, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r4, r0
	bne	.L267	@cond_branch
.L276:
	add	r4, r4, #0x1
	cmp	r4, r7
	blt	.L277	@cond_branch
.L267:
	ldr	r0, .L291+0x8
	ldrb	r0, [r0]
	ldr	r2, .L291+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	mov	r1, #0xa5
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	strb	r4, [r0]
.L266:
	ldr	r0, .L291+0x8
	ldrb	r1, [r0]
	ldr	r0, [r2]
	add	r0, r1, r0
	add	r1, r0, #0
	add	r1, r1, #0x5c
	mov	r2, #0xa5
	lsl	r2, r2, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0]
	strb	r0, [r1]
	b	.L261
.L292:
	.align	2, 0
.L291:
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gActiveBattler
.L265:
	bl	ShouldUseItem
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L261	@cond_branch
.L264:
	ldr	r0, .L293
	ldrb	r0, [r0]
	mov	r2, #0x1
	eor	r2, r2, r0
	lsl	r2, r2, #0x8
	mov	r0, #0x1
	mov	r1, #0x0
	bl	BtlController_EmitTwoReturnValues
.L261:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L294:
	.align	2, 0
.L293:
	.word	gActiveBattler
.Lfe9:
	.size	 AI_TrySwitchOrUseItem,.Lfe9-AI_TrySwitchOrUseItem
	.align	2, 0
	.type	 ModulateByTypeEffectiveness,function
	.thumb_func
ModulateByTypeEffectiveness:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	add	r6, r3, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	mov	r7, #0x0
	ldr	r0, .L305
	mov	sl, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L297	@cond_branch
	mov	r5, sl
.L298:
	ldrb	r0, [r5]
	cmp	r0, #0xfe
	beq	.L300	@cond_branch
	ldr	r1, [sp]
	cmp	r0, r1
	bne	.L300	@cond_branch
	ldrb	r4, [r5, #0x1]
	cmp	r4, r9
	bne	.L302	@cond_branch
	ldrb	r1, [r6]
	ldrb	r0, [r5, #0x2]
	mul	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	strb	r0, [r6]
.L302:
	cmp	r4, r8
	bne	.L300	@cond_branch
	cmp	r9, r8
	beq	.L300	@cond_branch
	ldrb	r1, [r6]
	ldrb	r0, [r5, #0x2]
	mul	r0, r0, r1
	mov	r1, #0xa
	bl	__divsi3
	strb	r0, [r6]
.L300:
	add	r5, r5, #0x3
	add	r7, r7, #0x3
	mov	r1, sl
	add	r0, r7, r1
	ldrb	r0, [r0]
	cmp	r0, #0xff
	bne	.L298	@cond_branch
.L297:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L306:
	.align	2, 0
.L305:
	.word	gTypeEffectiveness
.Lfe10:
	.size	 ModulateByTypeEffectiveness,.Lfe10-ModulateByTypeEffectiveness
	.align	2, 0
	.globl	GetMostSuitableMonToSwitchInto
	.type	 GetMostSuitableMonToSwitchInto,function
	.thumb_func
GetMostSuitableMonToSwitchInto:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x24
	ldr	r4, .L362
	ldrb	r2, [r4]
	ldr	r0, .L362+0x4
	ldr	r0, [r0]
	add	r0, r2, r0
	add	r1, r0, #0
	add	r1, r1, #0x5c
	ldrb	r0, [r1]
	cmp	r0, #0x6
	beq	.LCB2361
	b	.L360	@long jump
.LCB2361:
	ldr	r0, .L362+0x8
	ldr	r1, [r0]
	mov	r0, #0x80
	lsl	r0, r0, #0xb
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L309	@cond_branch
	ldr	r1, .L362+0xc
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrb	r0, [r0]
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L360
.L363:
	.align	2, 0
.L362:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleTypeFlags
	.word	gBattlerPartyIndexes
.L309:
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L310	@cond_branch
	str	r2, [sp, #0x10]
	add	r0, r2, #0
	bl	GetBattlerPosition
	mov	r5, #0x2
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	ldr	r1, .L364
	ldrb	r1, [r1]
	ldr	r2, .L364+0x4
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L311	@cond_branch
	ldrb	r4, [r4]
	str	r4, [sp, #0x14]
	b	.L312
.L365:
	.align	2, 0
.L364:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L311:
	ldrb	r0, [r4]
	bl	GetBattlerPosition
	eor	r0, r0, r5
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x14]
.L312:
	bl	Random
	mov	r3, #0x2
	and	r0, r0, r3
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	ldr	r0, .L366
	ldrb	r1, [r0]
	ldr	r2, .L366+0x4
	ldr	r4, [sp, #0x4]
	lsl	r0, r4, #0x2
	add	r0, r0, r2
	ldr	r0, [r0]
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L314	@cond_branch
	eor	r4, r4, r3
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	b	.L314
.L367:
	.align	2, 0
.L366:
	.word	gAbsentBattlerFlags
	.word	gBitTable
.L310:
	add	r0, r2, #0
	bl	GetBattlerPosition
	mov	r1, #0x1
	eor	r0, r0, r1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x4]
	ldrb	r4, [r4]
	str	r4, [sp, #0x14]
	str	r4, [sp, #0x10]
.L314:
	ldr	r0, .L368
	ldr	r0, [r0]
	ldr	r1, .L368+0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L315	@cond_branch
	ldr	r2, .L368+0x8
	ldrb	r1, [r2]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L316	@cond_branch
	mov	r0, #0x0
	str	r0, [sp, #0x18]
	mov	r1, #0x3
	str	r1, [sp, #0x1c]
	b	.L318
.L369:
	.align	2, 0
.L368:
	.word	gBattleTypeFlags
	.word	0x808000
	.word	gActiveBattler
.L316:
	mov	r4, #0x3
	str	r4, [sp, #0x18]
	mov	r0, #0x6
	str	r0, [sp, #0x1c]
	b	.L318
.L315:
	mov	r1, #0x0
	str	r1, [sp, #0x18]
	mov	r2, #0x6
	str	r2, [sp, #0x1c]
	ldr	r2, .L370
.L318:
	ldrb	r0, [r2]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r4, .L370+0x4
	str	r4, [sp, #0x20]
	cmp	r0, #0
	bne	.L319	@cond_branch
	ldr	r0, .L370+0x8
	str	r0, [sp, #0x20]
.L319:
	mov	r1, #0x0
	mov	r9, r1
.L323:
	mov	r2, #0x0
	str	r2, [sp, #0x8]
	mov	r4, #0x6
	str	r4, [sp, #0xc]
	ldr	r7, [sp, #0x18]
	ldr	r0, [sp, #0x1c]
	cmp	r7, r0
	blt	.LCB2570
	b	.L325	@long jump
.LCB2570:
	lsl	r0, r7, #0x2
	ldr	r1, .L370+0xc
	add	r0, r0, r1
	mov	r8, r0
	mov	sl, sp
.L327:
	mov	r0, #0x64
	mul	r0, r0, r7
	ldr	r2, [sp, #0x20]
	add	r4, r2, r0
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	cmp	r5, #0
	beq	.L328	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L328	@cond_branch
	mov	r4, r8
	ldr	r0, [r4]
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L328	@cond_branch
	ldr	r1, .L370+0x10
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	beq	.L328	@cond_branch
	ldr	r4, [sp, #0x14]
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	beq	.L328	@cond_branch
	ldr	r0, .L370+0x14
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L328	@cond_branch
	add	r0, r4, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L328	@cond_branch
	ldr	r1, .L370+0x18
	lsl	r0, r5, #0x3
	sub	r0, r0, r5
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r5, [r0, #0x6]
	ldrb	r6, [r0, #0x7]
	mov	r0, #0xa
	mov	r1, sl
	strb	r0, [r1]
	mov	r0, #0x58
	ldr	r2, [sp, #0x4]
	mov	r4, r2
	mul	r4, r4, r0
	ldr	r0, .L370+0x1c
	add	r4, r4, r0
	add	r0, r4, #0
	add	r0, r0, #0x21
	ldrb	r0, [r0]
	add	r1, r5, #0
	add	r2, r6, #0
	mov	r3, sp
	bl	ModulateByTypeEffectiveness
	add	r4, r4, #0x22
	ldrb	r0, [r4]
	add	r1, r5, #0
	add	r2, r6, #0
	mov	r3, sp
	bl	ModulateByTypeEffectiveness
	ldr	r2, [sp, #0x8]
	mov	r1, sl
	ldrb	r1, [r1]
	cmp	r2, r1
	bcs	.L326	@cond_branch
	mov	r2, sl
	ldrb	r2, [r2]
	str	r2, [sp, #0x8]
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
	b	.L326
.L371:
	.align	2, 0
.L370:
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBitTable
	.word	gBattlerPartyIndexes
	.word	gBattleStruct
	.word	gBaseStats
	.word	gBattleMons
.L328:
	mov	r4, r8
	ldr	r0, [r4]
	mov	r1, r9
	orr	r1, r1, r0
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
.L326:
	mov	r2, #0x4
	add	r8, r8, r2
	add	r7, r7, #0x1
	ldr	r4, [sp, #0x1c]
	cmp	r7, r4
	blt	.L327	@cond_branch
.L325:
	ldr	r0, [sp, #0xc]
	cmp	r0, #0x6
	beq	.L332	@cond_branch
	mov	r7, #0x0
	mov	r0, #0x64
	ldr	r1, [sp, #0xc]
	mov	r5, r1
	mul	r5, r5, r0
.L336:
	add	r1, r7, #0
	add	r1, r1, #0xd
	ldr	r2, [sp, #0x20]
	add	r0, r2, r5
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0
	beq	.L335	@cond_branch
	ldr	r0, .L372
	ldrb	r1, [r0]
	add	r0, r4, #0
	ldr	r2, [sp, #0x4]
	bl	TypeCalc
	mov	r1, #0x2
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L334	@cond_branch
.L335:
	add	r7, r7, #0x1
	cmp	r7, #0x3
	ble	.L336	@cond_branch
.L334:
	cmp	r7, #0x4
	beq	.LCB2763
	b	.L343	@long jump
.LCB2763:
	ldr	r4, [sp, #0xc]
	lsl	r0, r4, #0x2
	ldr	r1, .L372+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r2, r9
	orr	r2, r2, r0
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	mov	r9, r0
	b	.L321
.L373:
	.align	2, 0
.L372:
	.word	gActiveBattler
	.word	gBitTable
.L332:
	mov	r4, #0x3f
	mov	r9, r4
.L321:
	mov	r0, r9
	cmp	r0, #0x3f
	beq	.LCB2793
	b	.L323	@long jump
.LCB2793:
	ldr	r0, .L374
	mov	r1, #0x0
	strh	r1, [r0]
	ldr	r0, .L374+0x4
	ldr	r0, [r0]
	strb	r1, [r0, #0x13]
	ldr	r0, .L374+0x8
	mov	r2, #0x1
	strb	r2, [r0, #0xe]
	ldr	r0, .L374+0xc
	strb	r1, [r0]
	ldr	r0, .L374+0x10
	strb	r2, [r0]
	mov	r1, #0x0
	str	r1, [sp, #0x8]
	mov	r2, #0x6
	str	r2, [sp, #0xc]
	ldr	r7, [sp, #0x18]
	ldr	r4, [sp, #0x1c]
	cmp	r7, r4
	bge	.L343	@cond_branch
.L345:
	mov	r0, #0x64
	mov	r6, r7
	mul	r6, r6, r0
	ldr	r0, [sp, #0x20]
	add	r4, r0, r6
	add	r0, r4, #0
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	add	r1, r7, #0x1
	mov	sl, r1
	cmp	r0, #0
	beq	.L344	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L344	@cond_branch
	ldr	r1, .L374+0x14
	ldr	r2, [sp, #0x10]
	lsl	r0, r2, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	beq	.L344	@cond_branch
	ldr	r4, [sp, #0x14]
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r0, [r0]
	cmp	r0, r7
	beq	.L344	@cond_branch
	ldr	r0, .L374+0x4
	ldr	r1, [r0]
	add	r0, r2, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L344	@cond_branch
	add	r0, r4, r1
	add	r0, r0, #0x5c
	ldrb	r0, [r0]
	cmp	r7, r0
	beq	.L344	@cond_branch
	mov	r5, #0x0
	mov	r9, r6
	ldr	r0, .L374+0x18
	mov	r8, r0
	ldr	r6, .L374+0x1c
.L355:
	add	r1, r5, #0
	add	r1, r1, #0xd
	ldr	r0, [sp, #0x20]
	add	r0, r0, r9
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	mov	r0, #0x0
	mov	r1, r8
	str	r0, [r1]
	cmp	r4, #0
	beq	.L356	@cond_branch
	ldr	r0, .L374+0x20
	lsl	r1, r4, #0x1
	add	r1, r1, r4
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	cmp	r0, #0x1
	beq	.L356	@cond_branch
	ldrb	r0, [r6]
	ldr	r1, [sp, #0x4]
	bl	AI_CalcDmg
	ldrb	r1, [r6]
	add	r0, r4, #0
	ldr	r2, [sp, #0x4]
	bl	TypeCalc
.L356:
	mov	r2, r8
	ldr	r0, [r2]
	ldr	r4, [sp, #0x8]
	cmp	r4, r0
	bge	.L354	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0x8]
	lsl	r0, r7, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp, #0xc]
.L354:
	add	r5, r5, #0x1
	cmp	r5, #0x3
	ble	.L355	@cond_branch
.L344:
	mov	r7, sl
	ldr	r0, [sp, #0x1c]
	cmp	r7, r0
	blt	.L345	@cond_branch
.L343:
	ldr	r0, [sp, #0xc]
.L360:
	add	sp, sp, #0x24
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L375:
	.align	2, 0
.L374:
	.word	gDynamicBasePower
	.word	gBattleStruct
	.word	gBattleScripting
	.word	gMoveResultFlags
	.word	gCritMultiplier
	.word	gBattlerPartyIndexes
	.word	gBattleMoveDamage
	.word	gActiveBattler
	.word	gBattleMoves
.Lfe11:
	.size	 GetMostSuitableMonToSwitchInto,.Lfe11-GetMostSuitableMonToSwitchInto
	.align	2, 0
	.type	 GetAI_ItemType,function
	.thumb_func
GetAI_ItemType:
	push	{r4, lr}
	add	r2, r1, #0
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x13
	bne	.L377	@cond_branch
	mov	r0, #0x1
	b	.L388
.L377:
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L379	@cond_branch
	mov	r0, #0x2
	b	.L388
.L379:
	ldrb	r4, [r2, #0x3]
	mov	r3, #0x3f
	add	r0, r3, #0
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L381	@cond_branch
	mov	r0, #0x3
	b	.L388
.L381:
	ldrb	r1, [r2]
	add	r0, r3, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L384	@cond_branch
	ldrb	r0, [r2, #0x1]
	cmp	r0, #0
	bne	.L384	@cond_branch
	ldrb	r0, [r2, #0x2]
	cmp	r0, #0
	beq	.L383	@cond_branch
.L384:
	mov	r0, #0x4
	b	.L388
.L383:
	mov	r0, #0x80
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L386	@cond_branch
	mov	r0, #0x6
	b	.L388
.L386:
	mov	r0, #0x5
.L388:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe12:
	.size	 GetAI_ItemType,.Lfe12-GetAI_ItemType
	.align	2, 0
	.type	 ShouldUseItem,function
	.thumb_func
ShouldUseItem:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4
	mov	r0, #0x0
	mov	sl, r0
	mov	r7, #0x0
	ldr	r0, .L446
	ldr	r0, [r0]
	mov	r1, #0x80
	lsl	r1, r1, #0xf
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L390	@cond_branch
	ldr	r0, .L446+0x4
	ldrb	r0, [r0]
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.LCB3077
	b	.L442	@long jump
.LCB3077:
.L390:
	ldr	r0, .L446+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	ldr	r5, .L446+0x8
	cmp	r0, #0
	bne	.L391	@cond_branch
	ldr	r5, .L446+0xc
.L391:
	mov	r1, #0x0
	mov	r8, r1
.L396:
	mov	r0, #0x64
	mov	r2, r8
	mul	r2, r2, r0
	add	r0, r2, #0
	add	r4, r5, r0
	add	r0, r4, #0
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L395	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	cmp	r0, #0
	beq	.L395	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x41
	bl	GetMonData
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	cmp	r0, r1
	beq	.L395	@cond_branch
	mov	r0, sl
	add	r0, r0, #0x1
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	sl, r0
.L395:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x5
	ble	.L396	@cond_branch
	mov	r2, #0x0
	mov	r8, r2
.L402:
	ldr	r1, .L446+0x10
	mov	r0, r8
	cmp	r0, #0
	beq	.L403	@cond_branch
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x50
	ldrb	r0, [r0]
	mov	r2, r8
	sub	r0, r0, r2
	add	r0, r0, #0x1
	cmp	sl, r0
	ble	.LCB3158
	b	.L401	@long jump
.LCB3158:
.L403:
	ldr	r0, [r1]
	ldr	r0, [r0, #0x18]
	mov	r2, r8
	lsl	r1, r2, #0x1
	add	r0, r0, #0x48
	add	r0, r0, r1
	ldrh	r0, [r0]
	mov	r9, r0
	str	r1, [sp]
	cmp	r0, #0
	bne	.LCB3171
	b	.L401	@long jump
.LCB3171:
	ldr	r1, .L446+0x14
	sub	r0, r0, #0xd
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r1, [r0]
	cmp	r1, #0
	bne	.LCB3178
	b	.L401	@long jump
.LCB3178:
	mov	r0, r9
	cmp	r0, #0xaf
	bne	.L406	@cond_branch
	ldr	r0, .L446+0x18
	ldr	r0, [r0]
	ldr	r1, .L446+0x1c
	add	r5, r0, r1
	b	.L407
.L447:
	.align	2, 0
.L446:
	.word	gBattleTypeFlags
	.word	gActiveBattler
	.word	gEnemyParty
	.word	gPlayerParty
	.word	gBattleResources
	.word	gItemEffectTable
	.word	gSaveBlock1Ptr
	.word	0x3214
.L406:
	add	r5, r1, #0
.L407:
	mov	r2, r9
	lsl	r0, r2, #0x18
	lsr	r0, r0, #0x18
	add	r1, r5, #0
	bl	GetAI_ItemType
	ldr	r4, .L448
	ldrb	r1, [r4]
	lsr	r1, r1, #0x1
	ldr	r3, .L448+0x4
	ldr	r2, [r3]
	add	r1, r1, r2
	add	r1, r1, #0xc4
	strb	r0, [r1]
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc4
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x5
	bls	.LCB3233
	b	.L408	@long jump
.LCB3233:
	lsl	r0, r0, #0x2
	ldr	r1, .L448+0x8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L449:
	.align	2, 0
.L448:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	.L436
	.align	2, 0
	.align	2, 0
.L436:
	.word	.L409
	.word	.L412
	.word	.L417
	.word	.L425
	.word	.L433
	.word	.L442
.L409:
	ldr	r2, .L450
	ldr	r0, .L450+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r0, r0, r2
	ldrh	r1, [r0, #0x2c]
	ldrh	r0, [r0, #0x28]
	lsr	r1, r1, #0x2
	cmp	r0, r1
	bcc	.LCB3268
	b	.L408	@long jump
.LCB3268:
	cmp	r0, #0
	bne	.LCB3270
	b	.L408	@long jump
.LCB3270:
.L445:
	mov	r7, #0x1
	b	.L441
.L451:
	.align	2, 0
.L450:
	.word	gBattleMons
	.word	gActiveBattler
.L412:
	mov	r0, r9
	mov	r1, #0x4
	mov	r2, #0x4
	bl	GetItemEffectParamOffset
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r4, #0
	bne	.LCB3291
	b	.L408	@long jump
.LCB3291:
	ldr	r2, .L452
	ldr	r0, .L452+0x4
	ldrb	r1, [r0]
	mov	r0, #0x58
	mul	r0, r0, r1
	add	r1, r0, r2
	ldrh	r2, [r1, #0x28]
	cmp	r2, #0
	bne	.LCB3302
	b	.L408	@long jump
.LCB3302:
	ldrh	r3, [r1, #0x2c]
	lsr	r0, r3, #0x2
	cmp	r2, r0
	bcc	.L445	@cond_branch
	add	r0, r2, #0
	sub	r0, r3, r0
	add	r1, r5, r4
	ldrb	r1, [r1]
	cmp	r0, r1
	bgt	.LCB3315
	b	.L408	@long jump
.LCB3315:
	b	.L445
.L453:
	.align	2, 0
.L452:
	.word	gBattleMons
	.word	gActiveBattler
.L417:
	ldr	r3, .L454
	ldrb	r0, [r3]
	lsr	r0, r0, #0x1
	ldr	r2, .L454+0x4
	ldr	r1, [r2]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	mov	r1, #0x0
	strb	r1, [r0]
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x20
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L418	@cond_branch
	ldr	r1, .L454+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L418	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L418:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x10
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L419	@cond_branch
	ldr	r1, .L454+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r1, [r0]
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L420	@cond_branch
	mov	r0, #0x80
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L419	@cond_branch
.L420:
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L419:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x8
	mov	r0, #0x8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L421	@cond_branch
	ldr	r1, .L454+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L421	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L421:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x4
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L422	@cond_branch
	ldr	r1, .L454+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L422	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L422:
	ldrb	r1, [r5, #0x3]
	mov	r6, #0x2
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L423	@cond_branch
	ldr	r1, .L454+0x8
	ldrb	r4, [r3]
	mov	r0, #0x58
	mul	r0, r0, r4
	add	r1, r1, #0x4c
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x40
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L423	@cond_branch
	lsr	r1, r4, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r6
	strb	r0, [r1]
	mov	r7, #0x1
.L423:
	ldrb	r1, [r5, #0x3]
	mov	r4, #0x1
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3514
	b	.L408	@long jump
.LCB3514:
	ldr	r1, .L454+0x8
	ldrb	r3, [r3]
	mov	r0, #0x58
	mul	r0, r0, r3
	add	r1, r1, #0x50
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	r1, #0x7
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3526
	b	.L408	@long jump
.LCB3526:
	lsr	r1, r3, #0x1
	ldr	r0, [r2]
	add	r1, r1, r0
	add	r1, r1, #0xc6
	ldrb	r0, [r1]
	orr	r0, r0, r4
	strb	r0, [r1]
	b	.L445
.L455:
	.align	2, 0
.L454:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gBattleMons
.L425:
	ldr	r4, .L456
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r3, .L456+0x4
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	mov	r1, #0x0
	strb	r1, [r0]
	ldr	r1, .L456+0x8
	ldrb	r2, [r4]
	lsl	r0, r2, #0x3
	sub	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.L408	@cond_branch
	ldrb	r1, [r5]
	mov	r6, #0xf
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L427	@cond_branch
	lsr	r2, r2, #0x1
	ldr	r0, [r3]
	add	r2, r2, r0
	add	r2, r2, #0xc6
	ldrb	r0, [r2]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r2]
.L427:
	ldrb	r1, [r5, #0x1]
	mov	r7, #0xf0
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L428	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x2
	orr	r1, r1, r2
	strb	r1, [r0]
.L428:
	ldrb	r1, [r5, #0x1]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L429	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
.L429:
	ldrb	r1, [r5, #0x2]
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L430	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x8
	orr	r1, r1, r2
	strb	r1, [r0]
.L430:
	ldrb	r1, [r5, #0x2]
	add	r0, r7, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L431	@cond_branch
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x20
	orr	r1, r1, r2
	strb	r1, [r0]
.L431:
	ldrb	r1, [r5]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB3673
	b	.L445	@long jump
.LCB3673:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x1
	ldr	r1, [r3]
	add	r0, r0, r1
	add	r0, r0, #0xc6
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L445
.L457:
	.align	2, 0
.L456:
	.word	gActiveBattler
	.word	gBattleStruct
	.word	gDisableStructs
.L433:
	ldr	r4, .L458
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	ldr	r2, .L458+0x4
	ldrb	r1, [r4]
	lsl	r0, r1, #0x3
	sub	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrb	r0, [r0, #0x16]
	cmp	r0, #0
	beq	.L408	@cond_branch
	ldr	r0, .L458+0x8
	lsl	r1, r3, #0x1
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	cmp	r0, #0
	bne	.LCB3723
	b	.L445	@long jump
.LCB3723:
.L408:
	cmp	r7, #0
	beq	.L401	@cond_branch
.L441:
	mov	r0, #0x1
	mov	r1, #0x1
	mov	r2, #0x0
	bl	BtlController_EmitTwoReturnValues
	ldr	r0, .L458
	ldrb	r0, [r0]
	lsr	r0, r0, #0x1
	ldr	r1, .L458+0xc
	ldr	r1, [r1]
	lsl	r0, r0, #0x1
	add	r0, r0, r1
	add	r0, r0, #0xc0
	mov	r1, r9
	strb	r1, [r0]
	ldr	r0, .L458+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	add	r0, r0, #0x48
	ldr	r2, [sp]
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0]
	add	r0, r7, #0
	b	.L440
.L459:
	.align	2, 0
.L458:
	.word	gActiveBattler
	.word	gDisableStructs
	.word	gSideTimers
	.word	gBattleStruct
	.word	gBattleResources
.L401:
	mov	r0, #0x1
	add	r8, r8, r0
	mov	r1, r8
	cmp	r1, #0x3
	bgt	.LCB3775
	b	.L402	@long jump
.LCB3775:
.L442:
	mov	r0, #0x0
.L440:
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe13:
	.size	 ShouldUseItem,.Lfe13-ShouldUseItem
.text
	.align	2, 0

