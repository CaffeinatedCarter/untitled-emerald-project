@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	gUnknown_02022C84
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gUnknown_02022C84,object
	.size	 gUnknown_02022C84,4
gUnknown_02022C84:
	.word	0x0
	.globl	gUnknown_02022C88
	.align	2, 0
	.type	 gUnknown_02022C88,object
	.size	 gUnknown_02022C88,4
gUnknown_02022C88:
	.word	0x0
	.globl	gUnknown_02022C8C
	.align	2, 0
	.type	 gUnknown_02022C8C,object
	.size	 gUnknown_02022C8C,4
gUnknown_02022C8C:
	.word	0x0
	.globl	gUnknown_082F2A7C
	.section .rodata
	.align	2, 0
	.type	 gUnknown_082F2A7C,object
gUnknown_082F2A7C:
	.word	sub_801DFAC
	.word	sub_801E030
	.word	sub_801E120
	.word	sub_801E240
	.word	sub_801E764
	.word	sub_801E838
	.word	sub_801E460
	.word	sub_801E5C4
	.word	sub_801E668
	.word	sub_801E978
	.size	 gUnknown_082F2A7C,40
	.type	 sKeyboardPageMaxRow,object
sKeyboardPageMaxRow:
	.byte	0x9
	.byte	0x9
	.byte	0x9
	.byte	0x9
	.size	 sKeyboardPageMaxRow,4
	.type	 gUnknown_082F2AA8,object
gUnknown_082F2AA8:
	.byte	0x0
	.byte	0x16
	.byte	0x17
	.byte	0x68
	.byte	0x19
	.byte	0x1a
	.byte	0x1b
	.byte	0x1c
	.byte	0x1d
	.byte	0x1e
	.byte	0x0
	.byte	0x20
	.byte	0x21
	.byte	0x22
	.byte	0x23
	.byte	0x24
	.byte	0x25
	.byte	0x26
	.byte	0x27
	.byte	0x28
	.byte	0x29
	.byte	0x15
	.byte	0x1
	.byte	0x2
	.byte	0x0
	.byte	0x4
	.byte	0x5
	.byte	0x6
	.byte	0x7
	.byte	0x8
	.byte	0x9
	.byte	0x0
	.byte	0xb
	.byte	0xc
	.byte	0xd
	.byte	0xe
	.byte	0xf
	.byte	0x10
	.byte	0x11
	.byte	0x12
	.byte	0x13
	.byte	0x14
	.byte	0x2a
	.byte	0x2b
	.byte	0x2c
	.byte	0x2d
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x35
	.byte	0x36
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x53
	.byte	0x54
	.byte	0x55
	.byte	0x56
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x6f
	.byte	0x5b
	.byte	0x5c
	.byte	0x5d
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x5a
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x84
	.byte	0x85
	.byte	0x86
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0xa0
	.byte	0xa1
	.byte	0xa2
	.byte	0xa3
	.byte	0xa4
	.byte	0xa5
	.byte	0xa6
	.byte	0xa7
	.byte	0xa8
	.byte	0xa9
	.byte	0xaa
	.byte	0xab
	.byte	0xac
	.byte	0xad
	.byte	0xae
	.byte	0xaf
	.byte	0xb0
	.byte	0xb1
	.byte	0xb2
	.byte	0xb3
	.byte	0xb4
	.byte	0xb5
	.byte	0xb6
	.byte	0xb7
	.byte	0xb8
	.byte	0xb9
	.byte	0xba
	.byte	0xd5
	.byte	0xd6
	.byte	0xd7
	.byte	0xd8
	.byte	0xd9
	.byte	0xda
	.byte	0xdb
	.byte	0xdc
	.byte	0xdd
	.byte	0xde
	.byte	0xdf
	.byte	0xe0
	.byte	0xe1
	.byte	0xe2
	.byte	0xe3
	.byte	0xe4
	.byte	0xe5
	.byte	0xe6
	.byte	0xe7
	.byte	0xe8
	.byte	0xe9
	.byte	0xea
	.byte	0xeb
	.byte	0xec
	.byte	0xed
	.byte	0xee
	.byte	0xbb
	.byte	0xbc
	.byte	0xbd
	.byte	0xbe
	.byte	0xbf
	.byte	0xc0
	.byte	0xc1
	.byte	0xc2
	.byte	0xc3
	.byte	0xc4
	.byte	0xc5
	.byte	0xc6
	.byte	0xc7
	.byte	0xc8
	.byte	0xc9
	.byte	0xca
	.byte	0xcb
	.byte	0xcc
	.byte	0xcd
	.byte	0xce
	.byte	0xcf
	.byte	0xd0
	.byte	0xd1
	.byte	0xd2
	.byte	0xd3
	.byte	0xd4
	.byte	0xef
	.byte	0xf0
	.byte	0xf4
	.byte	0xf5
	.byte	0xf6
	.byte	0xf1
	.byte	0xf2
	.byte	0xf3
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 gUnknown_082F2AA8,256
	.align	2, 0
	.type	 sUnionRoomKeyboardText,object
	.size	 sUnionRoomKeyboardText,120
sUnionRoomKeyboardText:
	.word	gText_UnionRoomChatKeyboard_ABCDE
	.word	gText_UnionRoomChatKeyboard_FGHIJ
	.word	gText_UnionRoomChatKeyboard_KLMNO
	.word	gText_UnionRoomChatKeyboard_PQRST
	.word	gText_UnionRoomChatKeyboard_UVWXY
	.word	gText_UnionRoomChatKeyboard_Z
	.word	gText_UnionRoomChatKeyboard_01234Upper
	.word	gText_UnionRoomChatKeyboard_56789Upper
	.word	gText_UnionRoomChatKeyboard_PunctuationUpper
	.word	gText_UnionRoomChatKeyboard_SymbolsUpper
	.word	gText_UnionRoomChatKeyboard_abcde
	.word	gText_UnionRoomChatKeyboard_fghij
	.word	gText_UnionRoomChatKeyboard_klmno
	.word	gText_UnionRoomChatKeyboard_pqrst
	.word	gText_UnionRoomChatKeyboard_uvwxy
	.word	gText_UnionRoomChatKeyboard_z
	.word	gText_UnionRoomChatKeyboard_01234Lower
	.word	gText_UnionRoomChatKeyboard_56789Lower
	.word	gText_UnionRoomChatKeyboard_PunctuationLower
	.word	gText_UnionRoomChatKeyboard_SymbolsLower
	.word	gText_UnionRoomChatKeyboard_Emoji1
	.word	gText_UnionRoomChatKeyboard_Emoji2
	.word	gText_UnionRoomChatKeyboard_Emoji3
	.word	gText_UnionRoomChatKeyboard_Emoji4
	.word	gText_UnionRoomChatKeyboard_Emoji5
	.word	gText_UnionRoomChatKeyboard_Emoji6
	.word	gText_UnionRoomChatKeyboard_Emoji7
	.word	gText_UnionRoomChatKeyboard_Emoji8
	.word	gText_UnionRoomChatKeyboard_Emoji9
	.word	gText_UnionRoomChatKeyboard_Emoji10
	.globl	gUnknown_082F2C20
	.align	1, 0
	.type	 gUnknown_082F2C20,object
gUnknown_082F2C20:
	.short	0x0
	.short	0x0
	.short	0x7fff
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.size	 gUnknown_082F2C20,32
	.globl	gUnknown_082F2C40
	.align	1, 0
	.type	 gUnknown_082F2C40,object
gUnknown_082F2C40:
	.short	0x0
	.short	0x7fde
	.short	0x0
	.short	0x7339
	.short	0x346
	.short	0x6b9b
	.short	0x7c00
	.short	0x6f59
	.short	0x1f
	.short	0x635b
	.short	0x2ff
	.short	0x6f9c
	.short	0x6318
	.short	0x1085
	.short	0x0
	.short	0x1ce7
	.size	 gUnknown_082F2C40,32
	.globl	gUnknown_082F2C60
	.align	2, 0
	.type	 gUnknown_082F2C60,object
	.size	 gUnknown_082F2C60,16
gUnknown_082F2C60:
	.byte	0x70
	.byte	0x0
	.byte	0x0
	.space	1
	.byte	0xfd
	.byte	0x11
	.byte	0x0
	.space	1
	.byte	0x7a
	.byte	0x21
	.byte	0x0
	.space	1
	.byte	0xf7
	.byte	0x70
	.byte	0x0
	.space	1
	.globl	gUnknown_082F2C70
	.align	2, 0
	.type	 gUnknown_082F2C70,object
gUnknown_082F2C70:
	.byte	0x3
	.byte	0x8
	.byte	0x1
	.byte	0x15
	.byte	0x13
	.byte	0xf
	.short	0x1
	.byte	0x1
	.byte	0x9
	.byte	0x12
	.byte	0xf
	.byte	0x2
	.byte	0xc
	.short	0x7a
	.byte	0x1
	.byte	0x0
	.byte	0x2
	.byte	0x6
	.byte	0xf
	.byte	0x7
	.short	0x20
	.byte	0x0
	.byte	0x1
	.byte	0x2
	.byte	0x7
	.byte	0x9
	.byte	0xe
	.short	0x13
	.byte	0xff
	.space	7
	.size	 gUnknown_082F2C70,40
	.globl	gUnknown_082F2C98
	.align	2, 0
	.type	 gUnknown_082F2C98,object
gUnknown_082F2C98:
	.short	0x0
	.space	2
	.word	sub_801F658
	.short	0x3
	.space	2
	.word	sub_801F6F8
	.short	0x4
	.space	2
	.word	sub_801F730
	.short	0x5
	.space	2
	.word	sub_801F768
	.short	0x1
	.space	2
	.word	sub_801F7D4
	.short	0x6
	.space	2
	.word	sub_801F7E0
	.short	0x7
	.space	2
	.word	sub_801F82C
	.short	0x8
	.space	2
	.word	sub_801F870
	.short	0x9
	.space	2
	.word	sub_801F8DC
	.short	0xa
	.space	2
	.word	sub_801F984
	.short	0xb
	.space	2
	.word	sub_801FA2C
	.short	0xc
	.space	2
	.word	sub_801FA68
	.short	0x2
	.space	2
	.word	sub_801FB44
	.short	0xd
	.space	2
	.word	sub_801FB70
	.short	0x12
	.space	2
	.word	sub_801FBB4
	.short	0x13
	.space	2
	.word	sub_801FBF8
	.short	0xe
	.space	2
	.word	sub_801FC4C
	.short	0xf
	.space	2
	.word	sub_801FC9C
	.short	0x10
	.space	2
	.word	sub_801FCEC
	.short	0x11
	.space	2
	.word	sub_801FD30
	.short	0x14
	.space	2
	.word	sub_801FD88
	.size	 gUnknown_082F2C98,168
	.globl	gUnknown_082F2D40
	.align	2, 0
	.type	 gUnknown_082F2D40,object
gUnknown_082F2D40:
	.word	gText_QuitChatting
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_RegisterTextWhere
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_RegisterTextHere
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_InputText
	.byte	0x1
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_ExitingChat
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.space	1
	.word	gText_LeaderLeftEndingChat
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.space	1
	.word	gText_RegisteredTextChanged
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_AlreadySavedFile_Unused
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_SavingDontTurnOff_Unused
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.space	1
	.word	gText_PlayerSavedGame_Unused
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.byte	0x1
	.space	1
	.word	gText_IfLeaderLeavesChatEnds
	.byte	0x2
	.byte	0x0
	.byte	0x1
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x1
	.space	1
	.size	 gUnknown_082F2D40,132
	.globl	gText_Ellipsis
	.type	 gText_Ellipsis,object
gText_Ellipsis:
	.byte	0xb0
	.byte	0xff
	.size	 gText_Ellipsis,2
	.globl	gUnknown_082F2DC8
	.align	2, 0
	.type	 gUnknown_082F2DC8,object
gUnknown_082F2DC8:
	.word	gText_Upper
	.word	0x0
	.word	gText_Lower
	.word	0x0
	.word	gText_Symbols
	.word	0x0
	.word	gText_Register2
	.word	0x0
	.word	gText_Exit2
	.word	0x0
	.size	 gUnknown_082F2DC8,40
	.globl	gUnknown_082F2DF0
	.align	1, 0
	.type	 gUnknown_082F2DF0,object
gUnknown_082F2DF0:
	.short	0x3313
	.short	0x18df
	.short	0x18d3
	.short	0x7d86
	.short	0x3000
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x0
	.short	0x7f9c
	.short	0x7f5a
	.short	0x56b5
	.short	0x39ce
	.short	0x7fff
	.short	0x2108
	.size	 gUnknown_082F2DF0,32
	.globl	gUnknown_082F2E10
	.align	2, 0
	.type	 gUnknown_082F2E10,object
gUnknown_082F2E10:
	.word	0x100010
	.word	-0xfffffc1
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f04
	.word	-0xffe0fff
	.word	0x5001f001
	.word	0xddd001
	.word	0x11d00ddd
	.word	0x21d00d11
	.word	-0x2ffdddf3
	.word	0x100f0021
	.word	0x1ff02d03
	.word	0x12222002
	.word	0x5000000d
	.word	0xffd203
	.word	-0xffe0ffd
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xcff18a0
	.word	0xb11ff60
	.word	0x1311ff
	.word	0x102170fb
	.word	0x11ff30f3
	.word	-0xfe00ff5
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0fc01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x2222fe80
	.word	0x1d00dd00
	.word	0x1d001111
	.word	0x220622
	.word	-0x2ffffde3
	.word	0x111e1003
	.word	0xd11100
	.word	0xd12222
	.word	-0xfdf8100
	.word	-0xfaf0ffd
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1a001f0
	.word	0x311efa0
	.word	0x10ff0b01
	.word	-0x7fe0af0c
	.word	0x110311eb
	.word	-0xfe16ff5
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x176509ff
	.word	0x32003f0
	.word	0x200be43
	.word	0x21000093
	.word	0x300227f
	.word	0x3100f00
	.word	0x1f0be87
	.word	0x1f001f0
	.word	-0xffe0f07
	.word	-0xffe0fff
	.word	0x22a1a001
	.word	-0x40f3ffee
	.word	0x50d20350
	.word	-0xfbfe8e3
	.word	-0xfba0ffd
	.word	-0xf84e01
	.word	-0xaf0cf0
	.word	0x71100b11
	.word	0x1f0a6f3
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0x1ffe0fff
	.word	0x40f31001
	.word	-0x4ff4ee01
	.word	0x3f1ffa1
	.word	0x1f007f1
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xf00fe10
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f01
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0xffe0fff
	.word	-0x75e575ff
	.word	0x601111d
	.word	-0x3199fd3e
	.word	0x300ffdd
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0x4368fe10
	.word	0x7100068
	.word	0x48a8203c
	.word	0x1f0a1f3
	.word	-0x6ffe0f01
	.word	0xbea7f7
	.word	-0x4fcfe05
	.word	-0xffe0f6a
	.word	0x1f0ff01
	.word	0x1f001f0
	.word	0x1d001f0
	.word	-0x10bf1cf0
	.word	0x11fffb10
	.word	-0xff4eefd
	.word	-0xffe0fd8
	.word	-0xffe0fff
	.word	-0xfe0fff
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	0x1f001f0
	.word	-0xffe0f20
	.word	0x14001
	.size	 gUnknown_082F2E10,644
	.globl	gUnknown_082F3094
	.align	2, 0
	.type	 gUnknown_082F3094,object
gUnknown_082F3094:
	.word	0x4010
	.word	-0xfffffc8
	.word	0x3001f001
	.word	-0x222222ff
	.word	0x444d0d00
	.word	-0xf2bc
	.word	0x500f40ff
	.word	0x13
	.size	 gUnknown_082F3094,32
	.globl	gUnknown_082F30B4
	.align	2, 0
	.type	 gUnknown_082F30B4,object
gUnknown_082F30B4:
	.word	0x4010
	.word	-0x4fffffe0
	.word	0xddd001
	.word	0x4429f000
	.word	-0x2bfcfff3
	.word	0xd440300
	.word	0xf080300
	.word	0xf444f0
	.word	-0xffff0f5
	.word	0x2dd0ff40
	.word	0x0
	.size	 gUnknown_082F30B4,44
	.globl	gUnknown_082F30E0
	.align	2, 0
	.type	 gUnknown_082F30E0,object
gUnknown_082F30E0:
	.word	0x8010
	.word	-0x5fffffd6
	.word	0x300f001
	.word	-0x12f9ff21
	.word	-0x20100000
	.word	-0x2220ff13
	.word	0x1c9080ed
	.word	0xfff
	.word	0xfddd
	.word	0xfddee00
	.word	-0x2212300
	.word	-0x2111f0e4
	.word	0x23100d00
	.word	0xdd0330
	.word	-0xff0
	.word	-0x12ffb040
	.word	-0x2d62223
	.word	-0x22d8ff23
	.word	-0xf900
	.word	-0x4f7fbef0
	.word	0x1
	.size	 gUnknown_082F30E0,84
	.globl	gUnknown_082F3134
	.align	2, 0
	.type	 gUnknown_082F3134,object
gUnknown_082F3134:
	.word	gUnknown_082F2E10
	.short	0x1000
	.short	0x0
	.word	gUnknown_082F30B4
	.short	0x40
	.short	0x1
	.word	gUnknown_082F3094
	.short	0x40
	.short	0x2
	.word	gUnknown_082F30E0
	.short	0x80
	.short	0x3
	.word	gUnknown_08DD4CF8
	.short	0x400
	.short	0x4
	.size	 gUnknown_082F3134,40
	.globl	gUnknown_082F315C
	.align	2, 0
	.type	 gUnknown_082F315C,object
	.size	 gUnknown_082F315C,8
gUnknown_082F315C:
	.word	gUnknown_082F2DF0
	.short	0x0
	.space	2
	.globl	gUnknown_082F3164
	.align	2, 0
	.type	 gUnknown_082F3164,object
	.size	 gUnknown_082F3164,8
gUnknown_082F3164:
	.space	1
	.byte	0x40
	.space	1
	.byte	0xc0
	.space	1
	.byte	0x4
	.space	2
	.globl	gUnknown_082F316C
	.align	2, 0
	.type	 gUnknown_082F316C,object
gUnknown_082F316C:
	.short	0x0
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F316C,8
	.globl	gUnknown_082F3174
	.align	2, 0
	.type	 gUnknown_082F3174,object
gUnknown_082F3174:
	.short	0x20
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F3174,8
	.globl	gUnknown_082F317C
	.align	2, 0
	.type	 gUnknown_082F317C,object
gUnknown_082F317C:
	.short	0x40
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F317C,8
	.globl	gUnknown_082F3184
	.align	2, 0
	.type	 gUnknown_082F3184,object
gUnknown_082F3184:
	.short	0x60
	.byte	0x1e
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F3184,8
	.globl	gUnknown_082F318C
	.align	2, 0
	.type	 gUnknown_082F318C,object
gUnknown_082F318C:
	.word	gUnknown_082F316C
	.word	gUnknown_082F3174
	.word	gUnknown_082F317C
	.word	gUnknown_082F3184
	.size	 gUnknown_082F318C,16
	.globl	gUnknown_082F319C
	.align	2, 0
	.type	 gUnknown_082F319C,object
	.size	 gUnknown_082F319C,24
gUnknown_082F319C:
	.short	0x0
	.short	0x0
	.word	gUnknown_082F3164
	.word	gUnknown_082F318C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_082F31B4
	.align	2, 0
	.type	 gUnknown_082F31B4,object
	.size	 gUnknown_082F31B4,8
gUnknown_082F31B4:
	.space	1
	.byte	0x80
	.space	1
	.byte	0x0
	.space	1
	.byte	0x8
	.space	2
	.globl	gUnknown_082F31BC
	.align	2, 0
	.type	 gUnknown_082F31BC,object
	.size	 gUnknown_082F31BC,24
gUnknown_082F31BC:
	.short	0x2
	.short	0x0
	.word	gUnknown_082F31B4
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8020ABC
	.globl	gUnknown_082F31D4
	.align	2, 0
	.type	 gUnknown_082F31D4,object
	.size	 gUnknown_082F31D4,24
gUnknown_082F31D4:
	.short	0x1
	.short	0x0
	.word	gUnknown_082F31B4
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	sub_8020AF4
	.globl	gUnknown_082F31EC
	.align	2, 0
	.type	 gUnknown_082F31EC,object
	.size	 gUnknown_082F31EC,8
gUnknown_082F31EC:
	.space	1
	.byte	0x0
	.space	1
	.byte	0x40
	.space	1
	.byte	0x8
	.space	2
	.globl	gUnknown_082F31F4
	.align	2, 0
	.type	 gUnknown_082F31F4,object
	.size	 gUnknown_082F31F4,8
gUnknown_082F31F4:
	.space	1
	.byte	0x40
	.space	1
	.byte	0x80
	.space	1
	.byte	0x8
	.space	2
	.globl	gUnknown_082F31FC
	.align	2, 0
	.type	 gUnknown_082F31FC,object
gUnknown_082F31FC:
	.short	0x0
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F31FC,8
	.globl	gUnknown_082F3204
	.align	2, 0
	.type	 gUnknown_082F3204,object
gUnknown_082F3204:
	.short	0x8
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F3204,8
	.globl	gUnknown_082F320C
	.align	2, 0
	.type	 gUnknown_082F320C,object
gUnknown_082F320C:
	.short	0x10
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F320C,8
	.globl	gUnknown_082F3214
	.align	2, 0
	.type	 gUnknown_082F3214,object
gUnknown_082F3214:
	.short	0x18
	.byte	0x2
	.space	1
	.short	-0x1
	.space	2
	.size	 gUnknown_082F3214,8
	.globl	gUnknown_082F321C
	.align	2, 0
	.type	 gUnknown_082F321C,object
gUnknown_082F321C:
	.word	gUnknown_082F31FC
	.word	gUnknown_082F3204
	.word	gUnknown_082F320C
	.word	gUnknown_082F3214
	.size	 gUnknown_082F321C,16
	.globl	gUnknown_082F322C
	.align	2, 0
	.type	 gUnknown_082F322C,object
	.size	 gUnknown_082F322C,24
gUnknown_082F322C:
	.short	0x3
	.short	0x0
	.word	gUnknown_082F31EC
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.globl	gUnknown_082F3244
	.align	2, 0
	.type	 gUnknown_082F3244,object
	.size	 gUnknown_082F3244,24
gUnknown_082F3244:
	.short	0x4
	.short	0x0
	.word	gUnknown_082F31F4
	.word	gUnknown_082F321C
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
.text
	.align	2, 0
	.globl	sub_801DD98
	.type	 sub_801DD98,function
	.thumb_func
sub_801DD98:
	push	{r4, lr}
	ldr	r4, .L3
	mov	r0, #0xde
	lsl	r0, r0, #0x1
	bl	Alloc
	str	r0, [r4]
	bl	sub_801DDD0
	ldr	r1, .L3+0x4
	mov	r0, #0x14
	strh	r0, [r1]
	mov	r0, #0x0
	bl	SetVBlankCallback
	ldr	r0, .L3+0x8
	bl	SetMainCallback2
	pop	{r4}
	pop	{r0}
	bx	r0
.L4:
	.align	2, 0
.L3:
	.word	gUnknown_02022C84
	.word	gKeyRepeatStartDelay
	.word	c2_081284E0
.Lfe1:
	.size	 sub_801DD98,.Lfe1-sub_801DD98
	.align	2, 0
	.type	 sub_801DDD0,function
	.thumb_func
sub_801DDD0:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	mov	r5, #0x0
	mov	r0, #0x0
	strh	r0, [r4, #0x4]
	strh	r0, [r4, #0x6]
	strb	r5, [r4, #0x10]
	strb	r5, [r4, #0x11]
	strb	r5, [r4, #0x12]
	strb	r5, [r4, #0x14]
	strb	r5, [r4, #0x15]
	strb	r5, [r4, #0x16]
	mov	r0, #0xff
	strb	r0, [r4, #0x1a]
	bl	GetLinkPlayerCount
	strb	r0, [r4, #0xd]
	bl	GetMultiplayerId
	strb	r0, [r4, #0x13]
	strb	r5, [r4, #0x17]
	strb	r5, [r4, #0x18]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r4, r1
	bl	sub_801EF1C
	ldr	r7, .L11
	ldr	r6, .L11+0x4
	add	r4, r4, #0xb9
	mov	r5, #0x9
.L9:
	ldr	r1, [r7]
	add	r1, r1, r6
	add	r0, r4, #0
	bl	StringCopy
	add	r6, r6, #0x15
	add	r4, r4, #0x15
	sub	r5, r5, #0x1
	cmp	r5, #0
	bge	.L9	@cond_branch
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L12:
	.align	2, 0
.L11:
	.word	gSaveBlock1Ptr
	.word	0x3c88
.Lfe2:
	.size	 sub_801DDD0,.Lfe2-sub_801DDD0
	.align	2, 0
	.globl	sub_801DE30
	.type	 sub_801DE30,function
	.thumb_func
sub_801DE30:
	push	{r4, lr}
	ldr	r4, .L14
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xe]
	bl	DestroyTask
	ldr	r0, [r4]
	ldrb	r0, [r0, #0xf]
	bl	DestroyTask
	ldr	r0, [r4]
	bl	Free
	pop	{r4}
	pop	{r0}
	bx	r0
.L15:
	.align	2, 0
.L14:
	.word	gUnknown_02022C84
.Lfe3:
	.size	 sub_801DE30,.Lfe3-sub_801DE30
	.align	2, 0
	.type	 c2_081284E0,function
	.thumb_func
c2_081284E0:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L27
	mov	r1, #0x87
	lsl	r1, r1, #0x3
	add	r6, r0, r1
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L19	@cond_branch
	cmp	r0, #0x1
	bgt	.L25	@cond_branch
	cmp	r0, #0
	beq	.L18	@cond_branch
	b	.L17
.L28:
	.align	2, 0
.L27:
	.word	gMain
.L25:
	cmp	r0, #0x2
	beq	.L21	@cond_branch
	b	.L17
.L18:
	bl	ResetTasks
	bl	ResetSpriteData
	bl	FreeAllSpritePalettes
	bl	sub_801F4D0
	b	.L26
.L19:
	bl	sub_801F5B8
	bl	sub_801F534
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L17	@cond_branch
	mov	r4, #0x1
	neg	r4, r4
	add	r0, r4, #0
	mov	r1, #0x10
	mov	r2, #0x0
	bl	BlendPalettes
	str	r5, [sp]
	add	r0, r4, #0
	add	r1, r4, #0
	mov	r2, #0x10
	mov	r3, #0x0
	bl	BeginNormalPaletteFade
	ldr	r0, .L29
	bl	SetVBlankCallback
.L26:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
	b	.L17
.L30:
	.align	2, 0
.L29:
	.word	sub_801DF20
.L21:
	bl	UpdatePaletteFade
	ldr	r0, .L31
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L17	@cond_branch
	ldr	r0, .L31+0x4
	bl	SetMainCallback2
	ldr	r0, .L31+0x8
	mov	r1, #0x8
	bl	CreateTask
	ldr	r4, .L31+0xc
	ldr	r1, [r4]
	strb	r0, [r1, #0xe]
	ldr	r0, .L31+0x10
	mov	r1, #0x7
	bl	CreateTask
	ldr	r1, [r4]
	strb	r0, [r1, #0xf]
	bl	LoadWirelessStatusIndicatorSpriteGfx
	mov	r0, #0xe8
	mov	r1, #0x96
	bl	CreateWirelessStatusIndicatorSprite
.L17:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L32:
	.align	2, 0
.L31:
	.word	gPaletteFade
	.word	sub_801DF38
	.word	sub_801DF54
	.word	gUnknown_02022C84
	.word	sub_801F2B4
.Lfe4:
	.size	 c2_081284E0,.Lfe4-c2_081284E0
	.align	2, 0
	.type	 sub_801DF20,function
	.thumb_func
sub_801DF20:
	push	{lr}
	bl	TransferPlttBuffer
	bl	LoadOam
	bl	ProcessSpriteCopyRequests
	bl	ScanlineEffect_InitHBlankDmaTransfer
	pop	{r0}
	bx	r0
.Lfe5:
	.size	 sub_801DF20,.Lfe5-sub_801DF20
	.align	2, 0
	.type	 sub_801DF38,function
	.thumb_func
sub_801DF38:
	push	{lr}
	bl	RunTasks
	bl	sub_801F5B8
	bl	AnimateSprites
	bl	BuildOamBuffer
	bl	UpdatePaletteFade
	pop	{r0}
	bx	r0
.Lfe6:
	.size	 sub_801DF38,.Lfe6-sub_801DF38
	.align	2, 0
	.type	 sub_801DF54,function
	.thumb_func
sub_801DF54:
	push	{r4, lr}
	ldr	r4, .L44
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x17]
	cmp	r0, #0x2
	beq	.L38	@cond_branch
	cmp	r0, #0x2
	bgt	.L42	@cond_branch
	cmp	r0, #0x1
	beq	.L37	@cond_branch
	b	.L36
.L45:
	.align	2, 0
.L44:
	.word	gUnknown_02022C84
.L42:
	cmp	r0, #0x3
	beq	.L39	@cond_branch
	b	.L36
.L37:
	mov	r0, #0x6
	b	.L43
.L38:
	mov	r0, #0x7
	b	.L43
.L39:
	mov	r0, #0x8
.L43:
	bl	sub_801EBD4
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x17]
.L36:
	ldr	r1, .L46
	ldr	r0, .L46+0x4
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x4]
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	_call_via_r0
	pop	{r4}
	pop	{r0}
	bx	r0
.L47:
	.align	2, 0
.L46:
	.word	gUnknown_082F2A7C
	.word	gUnknown_02022C84
.Lfe7:
	.size	 sub_801DF54,.Lfe7-sub_801DF54
	.align	2, 0
	.type	 sub_801DFAC,function
	.thumb_func
sub_801DFAC:
	push	{r4, lr}
	ldr	r4, .L59
	ldr	r0, [r4]
	ldrh	r1, [r0, #0x6]
	cmp	r1, #0x1
	beq	.L51	@cond_branch
	cmp	r1, #0x1
	bgt	.L58	@cond_branch
	cmp	r1, #0
	beq	.L50	@cond_branch
	b	.L49
.L60:
	.align	2, 0
.L59:
	.word	gUnknown_02022C84
.L58:
	cmp	r1, #0x2
	beq	.L54	@cond_branch
	b	.L49
.L50:
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	sub_801EF24
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L51:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L49	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L49	@cond_branch
	ldr	r4, .L61
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L49	@cond_branch
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L49
.L62:
	.align	2, 0
.L61:
	.word	gUnknown_02022C84
.L54:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L49	@cond_branch
	mov	r0, #0x1
	bl	sub_801EBD4
.L49:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe8:
	.size	 sub_801DFAC,.Lfe8-sub_801DFAC
	.align	2, 0
	.type	 sub_801E030,function
	.thumb_func
sub_801E030:
	push	{r4, r5, lr}
	ldr	r5, .L88
	ldr	r3, [r5]
	ldrh	r0, [r3, #0x6]
	cmp	r0, #0
	beq	.L65	@cond_branch
	cmp	r0, #0x1
	beq	.L82	@cond_branch
	b	.L64
.L89:
	.align	2, 0
.L88:
	.word	gUnknown_02022C84
.L65:
	ldr	r1, .L90
	ldrh	r2, [r1, #0x2e]
	mov	r0, #0x8
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L66	@cond_branch
	ldrb	r0, [r3, #0x15]
	cmp	r0, #0
	beq	.L64	@cond_branch
	mov	r0, #0x4
	bl	sub_801EBD4
	b	.L64
.L91:
	.align	2, 0
.L90:
	.word	gMain
.L66:
	mov	r0, #0x4
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L69	@cond_branch
	mov	r0, #0x2
	bl	sub_801EBD4
	b	.L64
.L69:
	ldrh	r1, [r1, #0x30]
	mov	r0, #0x2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L71	@cond_branch
	ldrb	r0, [r3, #0x15]
	cmp	r0, #0
	beq	.L72	@cond_branch
	bl	sub_801ED68
	mov	r0, #0x8
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r1, [r5]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L64
.L72:
	mov	r0, #0x3
	bl	sub_801EBD4
	b	.L64
.L71:
	mov	r4, #0x1
	add	r0, r4, #0
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L75	@cond_branch
	bl	sub_801EC94
	mov	r0, #0x8
	mov	r1, #0x0
	bl	sub_801F5EC
	mov	r0, #0x2
	mov	r1, #0x1
	b	.L86
.L75:
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L77	@cond_branch
	ldrb	r0, [r3, #0x10]
	cmp	r0, #0x3
	beq	.L78	@cond_branch
	bl	sub_801ED94
	mov	r0, #0x8
	b	.L87
.L78:
	mov	r0, #0x5
	bl	sub_801EBD4
	b	.L64
.L77:
	bl	sub_801EBE4
	cmp	r0, #0
	beq	.L64	@cond_branch
	mov	r0, #0x1
.L87:
	mov	r1, #0x0
.L86:
	bl	sub_801F5EC
	ldr	r0, [r5]
	strh	r4, [r0, #0x6]
	b	.L64
.L82:
	mov	r0, #0x0
	bl	sub_801F644
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x1
	bl	sub_801F644
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r4, #0
	bne	.L64	@cond_branch
	cmp	r1, #0
	bne	.L64	@cond_branch
	ldr	r0, [r5]
	strh	r1, [r0, #0x6]
.L64:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe9:
	.size	 sub_801E030,.Lfe9-sub_801E030
	.align	2, 0
	.type	 sub_801E120,function
	.thumb_func
sub_801E120:
	push	{r4, r5, r6, lr}
	ldr	r0, .L115
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x6]
	cmp	r0, #0x4
	bls	.LCB628
	b	.L92	@long jump
.LCB628:
	lsl	r0, r0, #0x2
	ldr	r1, .L115+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L116:
	.align	2, 0
.L115:
	.word	gUnknown_02022C84
	.word	.L111
	.align	2, 0
	.align	2, 0
.L111:
	.word	.L94
	.word	.L95
	.word	.L97
	.word	.L107
	.word	.L109
.L94:
	mov	r0, #0x3
	mov	r1, #0x0
	bl	sub_801F5EC
	b	.L114
.L95:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L92	@cond_branch
.L114:
	ldr	r0, .L117
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L92
.L118:
	.align	2, 0
.L117:
	.word	gUnknown_02022C84
.L97:
	bl	Menu_ProcessInput
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x8
	lsr	r6, r0, #0x10
	asr	r4, r0, #0x10
	mov	r0, #0x2
	neg	r0, r0
	cmp	r4, r0
	beq	.L102	@cond_branch
	add	r0, r0, #0x1
	cmp	r4, r0
	beq	.L104	@cond_branch
	mov	r0, #0x4
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r5, .L119
	ldr	r2, [r5]
	ldrb	r0, [r2, #0x10]
	cmp	r0, r4
	beq	.L113	@cond_branch
	cmp	r4, #0x3
	ble	.L106	@cond_branch
	b	.L113
.L120:
	.align	2, 0
.L119:
	.word	gUnknown_02022C84
.L102:
	ldr	r0, .L121
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L92	@cond_branch
	mov	r0, #0x5
	bl	PlaySE
	mov	r0, #0x1
	bl	Menu_MoveCursor
	b	.L92
.L122:
	.align	2, 0
.L121:
	.word	gMain
.L104:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	sub_801F5EC
.L113:
	ldr	r0, .L123
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L92
.L124:
	.align	2, 0
.L123:
	.word	gUnknown_02022C84
.L106:
	mov	r1, #0x0
	strb	r1, [r2, #0x11]
	ldr	r0, [r5]
	strb	r1, [r0, #0x12]
	mov	r0, #0x5
	mov	r1, #0x1
	bl	sub_801F5EC
	ldr	r0, [r5]
	strb	r6, [r0, #0x10]
	ldr	r1, [r5]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L92
.L107:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L92	@cond_branch
	mov	r0, #0x1
	bl	sub_801EBD4
	b	.L92
.L109:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L92	@cond_branch
	mov	r0, #0x1
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L92	@cond_branch
	mov	r0, #0x1
	bl	sub_801EBD4
.L92:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe10:
	.size	 sub_801E120,.Lfe10-sub_801E120
	.align	2, 0
	.type	 sub_801E240,function
	.thumb_func
sub_801E240:
	push	{r4, r5, lr}
	ldr	r1, .L167
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r2, r1, #0
	cmp	r0, #0xa
	bls	.LCB815
	b	.L126	@long jump
.LCB815:
	lsl	r0, r0, #0x2
	ldr	r1, .L167+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L168:
	.align	2, 0
.L167:
	.word	gUnknown_02022C84
	.word	.L163
	.align	2, 0
	.align	2, 0
.L163:
	.word	.L127
	.word	.L128
	.word	.L130
	.word	.L140
	.word	.L154
	.word	.L159
	.word	.L126
	.word	.L126
	.word	.L146
	.word	.L142
	.word	.L144
.L127:
	mov	r0, #0x6
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L169
	ldr	r1, [r0]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L126
.L170:
	.align	2, 0
.L169:
	.word	gUnknown_02022C84
.L128:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB857
	b	.L126	@long jump
.LCB857:
	ldr	r0, .L171
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x6]
	b	.L126
.L172:
	.align	2, 0
.L171:
	.word	gUnknown_02022C84
.L130:
	bl	sub_801FF08
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L134	@cond_branch
	cmp	r1, #0
	bgt	.L139	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L149	@cond_branch
	b	.L126
.L139:
	cmp	r1, #0x1
	beq	.LCB890
	b	.L126	@long jump
.LCB890:
	b	.L149
.L134:
	ldr	r4, .L173
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L135	@cond_branch
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	bl	sub_801EFD0
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r1, [r4]
	mov	r0, #0x9
	strh	r0, [r1, #0x6]
	b	.L126
.L174:
	.align	2, 0
.L173:
	.word	gUnknown_02022C84
.L135:
	mov	r2, #0xc8
	lsl	r2, r2, #0x1
	add	r0, r1, r2
	bl	sub_801EF7C
	ldr	r1, [r4]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L126
.L140:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB944
	b	.L126	@long jump
.LCB944:
	mov	r0, #0x1
	bl	sub_801EBD4
	b	.L126
.L142:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB956
	b	.L126	@long jump
.LCB956:
	mov	r0, #0x14
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L175
	ldr	r1, [r0]
	mov	r0, #0xa
	strh	r0, [r1, #0x6]
	b	.L126
.L176:
	.align	2, 0
.L175:
	.word	gUnknown_02022C84
.L144:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB980
	b	.L126	@long jump
.LCB980:
	ldr	r0, .L177
	ldr	r1, [r0]
	mov	r0, #0x8
	strh	r0, [r1, #0x6]
	b	.L126
.L178:
	.align	2, 0
.L177:
	.word	gUnknown_02022C84
.L146:
	bl	sub_801FF08
	lsl	r0, r0, #0x18
	asr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L150	@cond_branch
	cmp	r5, #0
	bgt	.L153	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L149	@cond_branch
	b	.L126
.L153:
	cmp	r5, #0x1
	bne	.L126	@cond_branch
.L149:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L179
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L126
.L180:
	.align	2, 0
.L179:
	.word	gUnknown_02022C84
.L150:
	bl	sub_80104B0
	ldr	r4, .L181
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	sub_801EFD0
	ldr	r0, [r4]
	mov	r1, #0x4
	strh	r1, [r0, #0x6]
	mov	r2, #0xdc
	lsl	r2, r2, #0x1
	add	r0, r0, r2
	strh	r5, [r0]
	b	.L126
.L182:
	.align	2, 0
.L181:
	.word	gUnknown_02022C84
.L154:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L155	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L155	@cond_branch
	ldr	r4, .L183
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L155	@cond_branch
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L156	@cond_branch
	mov	r0, #0x6
	b	.L165
.L184:
	.align	2, 0
.L183:
	.word	gUnknown_02022C84
.L156:
	mov	r0, #0x5
.L165:
	strh	r0, [r1, #0x6]
.L155:
	ldr	r0, .L185
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L126	@cond_branch
	b	.L166
.L186:
	.align	2, 0
.L185:
	.word	gReceivedRemoteLinkPlayers
.L159:
	ldr	r0, .L187
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L160	@cond_branch
.L166:
	mov	r0, #0x9
	bl	sub_801EBD4
	b	.L126
.L188:
	.align	2, 0
.L187:
	.word	gReceivedRemoteLinkPlayers
.L160:
	ldr	r3, [r2]
	mov	r1, #0xdc
	lsl	r1, r1, #0x1
	add	r2, r3, r1
	ldrh	r0, [r2]
	add	r0, r0, #0x1
	strh	r0, [r2]
	lsl	r0, r0, #0x10
	mov	r1, #0x96
	lsl	r1, r1, #0x11
	cmp	r0, r1
	bls	.L126	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2]
	mov	r0, #0x4
	strh	r0, [r3, #0x6]
.L126:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe11:
	.size	 sub_801E240,.Lfe11-sub_801E240
	.align	2, 0
	.type	 sub_801E460,function
	.thumb_func
sub_801E460:
	push	{r4, lr}
	ldr	r1, .L212
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r2, r1, #0
	cmp	r0, #0x7
	bls	.LCB1180
	b	.L190	@long jump
.LCB1180:
	lsl	r0, r0, #0x2
	ldr	r1, .L212+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L213:
	.align	2, 0
.L212:
	.word	gUnknown_02022C84
	.word	.L209
	.align	2, 0
	.align	2, 0
.L209:
	.word	.L191
	.word	.L193
	.word	.L195
	.word	.L197
	.word	.L199
	.word	.L201
	.word	.L203
	.word	.L206
.L191:
	ldr	r0, .L214
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB1207
	b	.L190	@long jump
.LCB1207:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L214+0x4
	ldr	r1, [r0]
	b	.L211
.L215:
	.align	2, 0
.L214:
	.word	sub_801F2B4
	.word	gUnknown_02022C84
.L193:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L190	@cond_branch
	mov	r0, #0x12
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L216
	ldr	r1, [r0]
	b	.L211
.L217:
	.align	2, 0
.L216:
	.word	gUnknown_02022C84
.L195:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r4, .L218
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	sub_801EFA8
	ldr	r1, [r4]
	b	.L211
.L219:
	.align	2, 0
.L218:
	.word	gUnknown_02022C84
.L197:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r4, .L220
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	ldr	r1, [r4]
	b	.L211
.L221:
	.align	2, 0
.L220:
	.word	gUnknown_02022C84
.L199:
	bl	GetBlockReceivedStatus
	mov	r1, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L190	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r0, .L222
	ldr	r1, [r0]
	b	.L211
.L223:
	.align	2, 0
.L222:
	.word	gUnknown_02022C84
.L201:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L190	@cond_branch
	bl	sub_8011A9C
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L190	@cond_branch
	bl	sub_800AC34
	ldr	r0, .L224
	ldr	r1, [r0]
	strh	r4, [r1, #0xa]
	b	.L211
.L225:
	.align	2, 0
.L224:
	.word	gUnknown_02022C84
.L203:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L204	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L204:
	ldr	r0, .L226
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L190	@cond_branch
	ldr	r1, [r2]
.L211:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L190
.L227:
	.align	2, 0
.L226:
	.word	gReceivedRemoteLinkPlayers
.L206:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L207	@cond_branch
	mov	r0, #0x9
	bl	sub_801EBD4
	b	.L190
.L207:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L190:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 sub_801E460,.Lfe12-sub_801E460
	.align	2, 0
	.type	 sub_801E5C4,function
	.thumb_func
sub_801E5C4:
	push	{r4, r5, lr}
	ldr	r5, .L245
	ldr	r1, [r5]
	ldrh	r0, [r1, #0x6]
	cmp	r0, #0x1
	beq	.L232	@cond_branch
	cmp	r0, #0x1
	bgt	.L242	@cond_branch
	cmp	r0, #0
	beq	.L230	@cond_branch
	b	.L229
.L246:
	.align	2, 0
.L245:
	.word	gUnknown_02022C84
.L242:
	cmp	r0, #0x2
	beq	.L234	@cond_branch
	cmp	r0, #0x3
	beq	.L237	@cond_branch
	b	.L229
.L230:
	ldr	r0, .L247
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L229	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801F5EC
	b	.L243
.L248:
	.align	2, 0
.L247:
	.word	sub_801F2B4
.L232:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L229	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L229	@cond_branch
	bl	sub_8011A9C
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L229	@cond_branch
	bl	sub_800AC34
	ldr	r1, [r5]
	strh	r4, [r1, #0xa]
	b	.L244
.L234:
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L235	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L235:
	ldr	r0, .L249
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L229	@cond_branch
.L243:
	ldr	r1, [r5]
.L244:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L229
.L250:
	.align	2, 0
.L249:
	.word	gReceivedRemoteLinkPlayers
.L237:
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L238	@cond_branch
	mov	r0, #0x9
	bl	sub_801EBD4
	b	.L229
.L238:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L229:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 sub_801E5C4,.Lfe13-sub_801E5C4
	.align	2, 0
	.type	 sub_801E668,function
	.thumb_func
sub_801E668:
	push	{r4, lr}
	ldr	r1, .L270
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r2, r1, #0
	cmp	r0, #0x4
	bhi	.L252	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L270+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L271:
	.align	2, 0
.L270:
	.word	gUnknown_02022C84
	.word	.L267
	.align	2, 0
	.align	2, 0
.L267:
	.word	.L253
	.word	.L256
	.word	.L259
	.word	.L261
	.word	.L264
.L253:
	ldr	r0, .L272
	bl	FuncIsActiveTask
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r4, .L272+0x4
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L255	@cond_branch
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801F5EC
.L255:
	ldr	r1, [r4]
	b	.L269
.L273:
	.align	2, 0
.L272:
	.word	sub_801F2B4
	.word	gUnknown_02022C84
.L256:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r4, .L274
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	beq	.L258	@cond_branch
	mov	r0, #0x13
	mov	r1, #0x0
	bl	sub_801F5EC
.L258:
	ldr	r1, [r4]
	b	.L269
.L275:
	.align	2, 0
.L274:
	.word	gUnknown_02022C84
.L259:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L252	@cond_branch
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L252	@cond_branch
	bl	sub_8011A9C
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L252	@cond_branch
	bl	sub_800AC34
	ldr	r0, .L276
	ldr	r1, [r0]
	strh	r4, [r1, #0xa]
	b	.L269
.L277:
	.align	2, 0
.L276:
	.word	gUnknown_02022C84
.L261:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bhi	.L262	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L262:
	ldr	r0, .L278
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L252	@cond_branch
	ldr	r1, [r2]
.L269:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L252
.L279:
	.align	2, 0
.L278:
	.word	gReceivedRemoteLinkPlayers
.L264:
	ldr	r1, [r2]
	ldrh	r0, [r1, #0xa]
	cmp	r0, #0x95
	bls	.L265	@cond_branch
	mov	r0, #0x9
	bl	sub_801EBD4
	b	.L252
.L265:
	add	r0, r0, #0x1
	strh	r0, [r1, #0xa]
.L252:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 sub_801E668,.Lfe14-sub_801E668
	.align	2, 0
	.type	 sub_801E764,function
	.thumb_func
sub_801E764:
	push	{r4, lr}
	ldr	r1, .L295
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r4, r1, #0
	cmp	r0, #0x4
	bhi	.L281	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L295+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L296:
	.align	2, 0
.L295:
	.word	gUnknown_02022C84
	.word	.L291
	.align	2, 0
	.align	2, 0
.L291:
	.word	.L282
	.word	.L284
	.word	.L286
	.word	.L287
	.word	.L289
.L282:
	ldr	r0, .L297
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L283	@cond_branch
	mov	r0, #0x1
	bl	sub_801EBD4
	b	.L281
.L298:
	.align	2, 0
.L297:
	.word	gReceivedRemoteLinkPlayers
.L283:
	ldr	r0, [r4]
	mov	r1, #0xc8
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	bl	sub_801EF4C
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
.L284:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L281	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L281	@cond_branch
	ldr	r4, .L299
	ldr	r1, [r4]
	mov	r0, #0xc8
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	mov	r2, #0x28
	bl	SendBlock
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L281	@cond_branch
	ldr	r1, [r4]
	b	.L293
.L300:
	.align	2, 0
.L299:
	.word	gUnknown_02022C84
.L286:
	bl	sub_801EE10
	mov	r0, #0x8
	mov	r1, #0x0
	bl	sub_801F5EC
	b	.L294
.L287:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L281	@cond_branch
.L294:
	ldr	r0, .L301
	ldr	r1, [r0]
.L293:
	ldrh	r0, [r1, #0x6]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L281
.L302:
	.align	2, 0
.L301:
	.word	gUnknown_02022C84
.L289:
	bl	IsLinkTaskFinished
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L281	@cond_branch
	mov	r0, #0x1
	bl	sub_801EBD4
.L281:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 sub_801E764,.Lfe15-sub_801E764
	.align	2, 0
	.type	 sub_801E838,function
	.thumb_func
sub_801E838:
	push	{r4, lr}
	ldr	r0, .L328
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x6]
	cmp	r0, #0x6
	bls	.LCB1847
	b	.L304	@long jump
.LCB1847:
	lsl	r0, r0, #0x2
	ldr	r1, .L328+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L329:
	.align	2, 0
.L328:
	.word	gUnknown_02022C84
	.word	.L324
	.align	2, 0
	.align	2, 0
.L324:
	.word	.L305
	.word	.L308
	.word	.L314
	.word	.L316
	.word	.L318
	.word	.L320
	.word	.L322
.L305:
	bl	sub_801EDC4
	cmp	r0, #0
	beq	.L306	@cond_branch
	mov	r0, #0x9
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L330
	ldr	r1, [r0]
	mov	r0, #0x2
	b	.L326
.L331:
	.align	2, 0
.L330:
	.word	gUnknown_02022C84
.L306:
	mov	r0, #0xd
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L332
	ldr	r1, [r0]
	mov	r0, #0x5
	b	.L326
.L333:
	.align	2, 0
.L332:
	.word	gUnknown_02022C84
.L308:
	ldr	r0, .L334
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L309	@cond_branch
	bl	sub_801EDE0
	mov	r0, #0xb
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L334+0x4
	ldr	r1, [r0]
	mov	r0, #0x3
	b	.L326
.L335:
	.align	2, 0
.L334:
	.word	gMain
	.word	gUnknown_02022C84
.L309:
	mov	r4, #0x2
	add	r0, r4, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L311	@cond_branch
	mov	r0, #0xa
	b	.L327
.L311:
	bl	sub_801EBE4
	cmp	r0, #0
	beq	.L304	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L336
	ldr	r0, [r0]
	strh	r4, [r0, #0x6]
	b	.L304
.L337:
	.align	2, 0
.L336:
	.word	gUnknown_02022C84
.L314:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	ldr	r0, .L338
	ldr	r1, [r0]
	mov	r0, #0x1
	b	.L326
.L339:
	.align	2, 0
.L338:
	.word	gUnknown_02022C84
.L316:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	mov	r0, #0xa
	b	.L327
.L318:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	mov	r0, #0x1
	bl	sub_801EBD4
	b	.L304
.L320:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L304	@cond_branch
	ldr	r0, .L340
	ldr	r1, [r0]
	mov	r0, #0x6
	b	.L326
.L341:
	.align	2, 0
.L340:
	.word	gUnknown_02022C84
.L322:
	ldr	r0, .L342
	ldrh	r1, [r0, #0x2e]
	mov	r0, #0x3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L304	@cond_branch
	mov	r0, #0x7
.L327:
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L342+0x4
	ldr	r1, [r0]
	mov	r0, #0x4
.L326:
	strh	r0, [r1, #0x6]
.L304:
	pop	{r4}
	pop	{r0}
	bx	r0
.L343:
	.align	2, 0
.L342:
	.word	gMain
	.word	gUnknown_02022C84
.Lfe16:
	.size	 sub_801E838,.Lfe16-sub_801E838
	.align	2, 0
	.type	 sub_801E978,function
	.thumb_func
sub_801E978:
	push	{r4, lr}
	add	sp, sp, #-0x4
	ldr	r1, .L387
	ldr	r0, [r1]
	ldrh	r0, [r0, #0x6]
	add	r4, r1, #0
	cmp	r0, #0xd
	bls	.LCB2064
	b	.L345	@long jump
.LCB2064:
	lsl	r0, r0, #0x2
	ldr	r1, .L387+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L388:
	.align	2, 0
.L387:
	.word	gUnknown_02022C84
	.word	.L384
	.align	2, 0
	.align	2, 0
.L384:
	.word	.L346
	.word	.L349
	.word	.L351
	.word	.L359
	.word	.L361
	.word	.L363
	.word	.L371
	.word	.L373
	.word	.L375
	.word	.L376
	.word	.L378
	.word	.L379
	.word	.L381
	.word	.L382
.L346:
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x18]
	cmp	r0, #0
	bne	.LCB2090
	b	.L386	@long jump
.LCB2090:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r1, [r4]
	mov	r0, #0x1
	strh	r0, [r1, #0x6]
	b	.L345
.L349:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2108
	b	.L345	@long jump
.LCB2108:
	mov	r0, #0xe
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L389
	ldr	r1, [r0]
	mov	r0, #0x2
	strh	r0, [r1, #0x6]
	b	.L345
.L390:
	.align	2, 0
.L389:
	.word	gUnknown_02022C84
.L351:
	bl	sub_801FF08
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L355	@cond_branch
	cmp	r1, #0
	bgt	.L358	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L354	@cond_branch
	b	.L345
.L358:
	cmp	r1, #0x1
	beq	.LCB2145
	b	.L345	@long jump
.LCB2145:
.L354:
	ldr	r0, .L391
	ldr	r1, [r0]
	b	.L386
.L392:
	.align	2, 0
.L391:
	.word	gUnknown_02022C84
.L355:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L393
	ldr	r1, [r0]
	mov	r0, #0x3
	strh	r0, [r1, #0x6]
	b	.L345
.L394:
	.align	2, 0
.L393:
	.word	gUnknown_02022C84
.L359:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2182
	b	.L345	@long jump
.LCB2182:
	mov	r0, #0xf
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L395
	ldr	r1, [r0]
	mov	r0, #0x4
	strh	r0, [r1, #0x6]
	b	.L345
.L396:
	.align	2, 0
.L395:
	.word	gUnknown_02022C84
.L361:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.LCB2206
	b	.L345	@long jump
.LCB2206:
	ldr	r0, .L397
	ldr	r1, [r0]
	mov	r0, #0x5
	strh	r0, [r1, #0x6]
	b	.L345
.L398:
	.align	2, 0
.L397:
	.word	gUnknown_02022C84
.L363:
	bl	sub_801FF08
	lsl	r0, r0, #0x18
	asr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L367	@cond_branch
	cmp	r1, #0
	bgt	.L370	@cond_branch
	mov	r0, #0x1
	neg	r0, r0
	cmp	r1, r0
	beq	.L366	@cond_branch
	b	.L345
.L370:
	cmp	r1, #0x1
	beq	.LCB2239
	b	.L345	@long jump
.LCB2239:
.L366:
	ldr	r0, .L399
	ldr	r1, [r0]
	b	.L386
.L400:
	.align	2, 0
.L399:
	.word	gUnknown_02022C84
.L367:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L401
	ldr	r1, [r0]
	mov	r0, #0x6
	strh	r0, [r1, #0x6]
	b	.L345
.L402:
	.align	2, 0
.L401:
	.word	gUnknown_02022C84
.L371:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L345	@cond_branch
	mov	r0, #0x10
	mov	r1, #0x0
	bl	sub_801F5EC
	bl	sub_801EE2C
	ldr	r0, .L403
	ldr	r1, [r0]
	mov	r0, #0x7
	strh	r0, [r1, #0x6]
	b	.L345
.L404:
	.align	2, 0
.L403:
	.word	gUnknown_02022C84
.L373:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L345	@cond_branch
	bl	SetContinueGameWarpStatusToDynamicWarp
	mov	r0, #0x0
	bl	TrySavingData
	ldr	r0, .L405
	ldr	r1, [r0]
	mov	r0, #0x8
	strh	r0, [r1, #0x6]
	b	.L345
.L406:
	.align	2, 0
.L405:
	.word	gUnknown_02022C84
.L375:
	mov	r0, #0x11
	mov	r1, #0x0
	bl	sub_801F5EC
	ldr	r0, .L407
	ldr	r1, [r0]
	mov	r0, #0x9
	strh	r0, [r1, #0x6]
	b	.L345
.L408:
	.align	2, 0
.L407:
	.word	gUnknown_02022C84
.L376:
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L345	@cond_branch
	mov	r0, #0x37
	bl	PlaySE
	bl	ClearContinueGameWarpStatus2
	ldr	r0, .L409
	ldr	r1, [r0]
	mov	r0, #0xa
	strh	r0, [r1, #0x6]
	b	.L345
.L410:
	.align	2, 0
.L409:
	.word	gUnknown_02022C84
.L378:
	ldr	r1, [r4]
	mov	r0, #0x0
	strb	r0, [r1, #0x19]
	ldr	r1, [r4]
	mov	r0, #0xb
	strh	r0, [r1, #0x6]
	b	.L345
.L379:
	ldr	r0, [r4]
	ldrb	r1, [r0, #0x19]
	add	r1, r1, #0x1
	strb	r1, [r0, #0x19]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x19]
	cmp	r0, #0x78
	bls	.L345	@cond_branch
.L386:
	mov	r0, #0xc
	strh	r0, [r1, #0x6]
	b	.L345
.L381:
	mov	r1, #0x1
	neg	r1, r1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r1, #0
	mov	r2, #0x0
	mov	r3, #0x10
	bl	BeginNormalPaletteFade
	ldr	r0, .L411
	ldr	r1, [r0]
	mov	r0, #0xd
	strh	r0, [r1, #0x6]
	b	.L345
.L412:
	.align	2, 0
.L411:
	.word	gUnknown_02022C84
.L382:
	ldr	r0, .L413
	ldrb	r1, [r0, #0x7]
	mov	r0, #0x80
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L345	@cond_branch
	bl	sub_801F544
	bl	sub_801DE30
	ldr	r0, .L413+0x4
	bl	SetMainCallback2
.L345:
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.L414:
	.align	2, 0
.L413:
	.word	gPaletteFade
	.word	CB2_ReturnToField
.Lfe17:
	.size	 sub_801E978,.Lfe17-sub_801E978
	.align	2, 0
	.type	 sub_801EBD4,function
	.thumb_func
sub_801EBD4:
	ldr	r1, .L416
	ldr	r1, [r1]
	mov	r2, #0x0
	strh	r0, [r1, #0x4]
	strh	r2, [r1, #0x6]
	bx	lr
.L417:
	.align	2, 0
.L416:
	.word	gUnknown_02022C84
.Lfe18:
	.size	 sub_801EBD4,.Lfe18-sub_801EBD4
	.align	2, 0
	.type	 sub_801EBE4,function
	.thumb_func
sub_801EBE4:
	push	{lr}
	ldr	r0, .L437
	ldrh	r2, [r0, #0x30]
	mov	r0, #0x40
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	bne	.L419	@cond_branch
	mov	r0, #0x80
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L420	@cond_branch
	ldr	r0, .L437+0x4
	ldr	r2, [r0]
	ldr	r1, .L437+0x8
	ldrb	r0, [r2, #0x10]
	add	r0, r0, r1
	ldrb	r1, [r2, #0x12]
	ldrb	r0, [r0]
	cmp	r1, r0
	bcs	.L421	@cond_branch
	add	r0, r1, #0x1
	b	.L436
.L438:
	.align	2, 0
.L437:
	.word	gMain
	.word	gUnknown_02022C84
	.word	sKeyboardPageMaxRow
.L421:
	strb	r3, [r2, #0x12]
	b	.L434
.L420:
	ldr	r0, .L439
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x10]
	cmp	r0, #0x3
	beq	.L423	@cond_branch
	mov	r0, #0x20
	and	r0, r0, r2
	lsl	r0, r0, #0x10
	lsr	r3, r0, #0x10
	cmp	r3, #0
	beq	.L424	@cond_branch
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0
	beq	.L425	@cond_branch
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	b	.L434
.L440:
	.align	2, 0
.L439:
	.word	gUnknown_02022C84
.L425:
	mov	r0, #0x4
	strb	r0, [r1, #0x11]
	b	.L434
.L424:
	mov	r0, #0x10
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L423	@cond_branch
	ldrb	r0, [r1, #0x11]
	cmp	r0, #0x3
	bhi	.L429	@cond_branch
	add	r0, r0, #0x1
	strb	r0, [r1, #0x11]
	b	.L434
.L429:
	strb	r3, [r1, #0x11]
	b	.L434
.L423:
	mov	r0, #0x0
	b	.L435
.L419:
	ldr	r0, .L441
	ldr	r2, [r0]
	ldrb	r0, [r2, #0x12]
	cmp	r0, #0
	beq	.L433	@cond_branch
	sub	r0, r0, #0x1
	b	.L436
.L442:
	.align	2, 0
.L441:
	.word	gUnknown_02022C84
.L433:
	ldr	r0, .L443
	ldrb	r1, [r2, #0x10]
	add	r1, r1, r0
	ldrb	r0, [r1]
.L436:
	strb	r0, [r2, #0x12]
.L434:
	mov	r0, #0x1
.L435:
	pop	{r1}
	bx	r1
.L444:
	.align	2, 0
.L443:
	.word	sKeyboardPageMaxRow
.Lfe19:
	.size	 sub_801EBE4,.Lfe19-sub_801EBE4
	.align	2, 0
	.type	 sub_801EC94,function
	.thumb_func
sub_801EC94:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x18
	ldr	r0, .L461
	ldr	r5, [r0]
	ldrb	r0, [r5, #0x10]
	cmp	r0, #0x3
	beq	.L446	@cond_branch
	ldr	r3, .L461+0x4
	ldrb	r1, [r5, #0x12]
	lsl	r1, r1, #0x2
	add	r2, r0, #0
	lsl	r0, r2, #0x2
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r1, r1, r0
	add	r1, r1, r3
	ldr	r4, [r1]
	ldrb	r0, [r5, #0x11]
	cmp	r0, #0
	beq	.L448	@cond_branch
	add	r1, r0, #0
.L450:
	ldrb	r0, [r4]
	cmp	r0, #0xf9
	bne	.L451	@cond_branch
	add	r4, r4, #0x1
.L451:
	add	r4, r4, #0x1
	sub	r1, r1, #0x1
	cmp	r1, #0
	bne	.L450	@cond_branch
.L448:
	mov	r5, #0x1
	b	.L453
.L462:
	.align	2, 0
.L461:
	.word	gUnknown_02022C84
	.word	sUnionRoomKeyboardText
.L446:
	ldrb	r0, [r5, #0x12]
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xb9
	add	r1, r5, r1
	mov	r0, sp
	bl	StringCopy
	mov	r1, #0x0
	strb	r1, [r0]
	mov	r1, #0xff
	strb	r1, [r0, #0x1]
	mov	r4, sp
	mov	r0, sp
	bl	StringLength_Multibyte
	add	r5, r0, #0
.L453:
	ldr	r6, .L463
	ldr	r1, [r6]
	ldrb	r0, [r1, #0x15]
	strb	r0, [r1, #0x14]
	cmp	r4, #0
	beq	.L445	@cond_branch
	bl	sub_801EE84
	add	r2, r0, #0
	sub	r5, r5, #0x1
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L456	@cond_branch
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0xe
	bhi	.L456	@cond_branch
	add	r3, r6, #0
.L457:
	ldrb	r0, [r4]
	cmp	r0, #0xf9
	bne	.L459	@cond_branch
	strb	r0, [r2]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
.L459:
	ldrb	r0, [r4]
	strb	r0, [r2]
	add	r4, r4, #0x1
	add	r2, r2, #0x1
	ldr	r1, [r3]
	ldrb	r0, [r1, #0x15]
	add	r0, r0, #0x1
	strb	r0, [r1, #0x15]
	sub	r5, r5, #0x1
	mov	r0, #0x1
	neg	r0, r0
	cmp	r5, r0
	beq	.L456	@cond_branch
	ldr	r0, [r3]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0xe
	bls	.L457	@cond_branch
.L456:
	mov	r0, #0xff
	strb	r0, [r2]
.L445:
	add	sp, sp, #0x18
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L464:
	.align	2, 0
.L463:
	.word	gUnknown_02022C84
.Lfe20:
	.size	 sub_801EC94,.Lfe20-sub_801EC94
	.align	2, 0
	.type	 sub_801ED68,function
	.thumb_func
sub_801ED68:
	push	{r4, lr}
	ldr	r4, .L467
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x15]
	strb	r0, [r1, #0x14]
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0
	beq	.L466	@cond_branch
	bl	sub_801EEA8
	mov	r1, #0xff
	strb	r1, [r0]
	ldr	r1, [r4]
	ldrb	r0, [r1, #0x15]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x15]
.L466:
	pop	{r4}
	pop	{r0}
	bx	r0
.L468:
	.align	2, 0
.L467:
	.word	gUnknown_02022C84
.Lfe21:
	.size	 sub_801ED68,.Lfe21-sub_801ED68
	.align	2, 0
	.type	 sub_801ED94,function
	.thumb_func
sub_801ED94:
	push	{lr}
	ldr	r0, .L472
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x15]
	sub	r0, r0, #0x1
	strb	r0, [r1, #0x14]
	bl	sub_801EEA8
	add	r2, r0, #0
	ldrb	r0, [r2]
	cmp	r0, #0xf9
	beq	.L470	@cond_branch
	ldr	r1, .L472+0x4
	add	r0, r0, r1
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L470	@cond_branch
	strb	r0, [r2]
.L470:
	pop	{r0}
	bx	r0
.L473:
	.align	2, 0
.L472:
	.word	gUnknown_02022C84
	.word	gUnknown_082F2AA8
.Lfe22:
	.size	 sub_801ED94,.Lfe22-sub_801ED94
	.align	2, 0
	.type	 sub_801EDC4,function
	.thumb_func
sub_801EDC4:
	push	{lr}
	ldr	r0, .L478
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	cmp	r0, #0
	bne	.L475	@cond_branch
	mov	r0, #0x0
	b	.L477
.L479:
	.align	2, 0
.L478:
	.word	gUnknown_02022C84
.L475:
	mov	r0, #0x1
.L477:
	pop	{r1}
	bx	r1
.Lfe23:
	.size	 sub_801EDC4,.Lfe23-sub_801EDC4
	.align	2, 0
	.type	 sub_801EDE0,function
	.thumb_func
sub_801EDE0:
	push	{r4, lr}
	bl	sub_801F114
	add	r1, r0, #0
	ldr	r4, .L481
	ldr	r0, [r4]
	ldrb	r3, [r0, #0x12]
	lsl	r2, r3, #0x2
	add	r2, r2, r3
	lsl	r2, r2, #0x2
	add	r2, r2, r3
	add	r2, r2, #0xb9
	add	r0, r0, r2
	bl	StringCopy
	ldr	r1, [r4]
	mov	r0, #0x1
	strb	r0, [r1, #0x18]
	pop	{r4}
	pop	{r0}
	bx	r0
.L482:
	.align	2, 0
.L481:
	.word	gUnknown_02022C84
.Lfe24:
	.size	 sub_801EDE0,.Lfe24-sub_801EDE0
	.align	2, 0
	.type	 sub_801EE10,function
	.thumb_func
sub_801EE10:
	ldr	r1, .L484
	ldr	r2, [r1]
	mov	r0, #0xff
	strb	r0, [r2, #0x1a]
	ldr	r2, [r1]
	mov	r3, #0x0
	mov	r0, #0xf
	strb	r0, [r2, #0x14]
	ldr	r0, [r1]
	strb	r3, [r0, #0x15]
	bx	lr
.L485:
	.align	2, 0
.L484:
	.word	gUnknown_02022C84
.Lfe25:
	.size	 sub_801EE10,.Lfe25-sub_801EE10
	.align	2, 0
	.type	 sub_801EE2C,function
	.thumb_func
sub_801EE2C:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	ldr	r0, .L492
	mov	r8, r0
	ldr	r7, .L492+0x4
	mov	r6, #0xb9
	ldr	r5, .L492+0x8
	mov	r4, #0x9
.L490:
	mov	r1, r8
	ldr	r0, [r1]
	add	r0, r0, r5
	ldr	r1, [r7]
	add	r1, r1, r6
	bl	StringCopy
	add	r6, r6, #0x15
	add	r5, r5, #0x15
	sub	r4, r4, #0x1
	cmp	r4, #0
	bge	.L490	@cond_branch
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L493:
	.align	2, 0
.L492:
	.word	gSaveBlock1Ptr
	.word	gUnknown_02022C84
	.word	0x3c88
.Lfe26:
	.size	 sub_801EE2C,.Lfe26-sub_801EE2C
	.align	2, 0
	.type	 sub_801EE6C,function
	.thumb_func
sub_801EE6C:
	ldr	r2, .L495
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	add	r1, r1, #0xb9
	ldr	r0, [r2]
	add	r0, r0, r1
	bx	lr
.L496:
	.align	2, 0
.L495:
	.word	gUnknown_02022C84
.Lfe27:
	.size	 sub_801EE6C,.Lfe27-sub_801EE6C
	.align	2, 0
	.type	 sub_801EE84,function
	.thumb_func
sub_801EE84:
	push	{lr}
	ldr	r0, .L502
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	ldrb	r0, [r0, #0x1a]
	cmp	r0, #0xff
	beq	.L499	@cond_branch
.L500:
	add	r1, r1, #0x1
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L500	@cond_branch
.L499:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L503:
	.align	2, 0
.L502:
	.word	gUnknown_02022C84
.Lfe28:
	.size	 sub_801EE84,.Lfe28-sub_801EE84
	.align	2, 0
	.type	 sub_801EEA8,function
	.thumb_func
sub_801EEA8:
	push	{lr}
	ldr	r0, .L510
	ldr	r0, [r0]
	add	r2, r0, #0
	add	r2, r2, #0x1a
	add	r1, r2, #0
	ldrb	r0, [r0, #0x1a]
	cmp	r0, #0xff
	beq	.L506	@cond_branch
.L507:
	add	r2, r1, #0
	ldrb	r0, [r2]
	cmp	r0, #0xf9
	bne	.L508	@cond_branch
	add	r1, r2, #0x1
.L508:
	add	r1, r1, #0x1
	ldrb	r0, [r1]
	cmp	r0, #0xff
	bne	.L507	@cond_branch
.L506:
	add	r0, r2, #0
	pop	{r1}
	bx	r1
.L511:
	.align	2, 0
.L510:
	.word	gUnknown_02022C84
.Lfe29:
	.size	 sub_801EEA8,.Lfe29-sub_801EEA8
	.align	2, 0
	.type	 sub_801EED8,function
	.thumb_func
sub_801EED8:
	push	{r4, lr}
	ldr	r4, .L520
	ldr	r0, [r4]
	add	r0, r0, #0x1a
	bl	StringLength_Multibyte
	add	r2, r0, #0
	ldr	r0, [r4]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	mov	r4, #0x0
	cmp	r2, #0xa
	bls	.L513	@cond_branch
	sub	r2, r2, #0xa
	mov	r3, #0x0
	cmp	r4, r2
	bcs	.L513	@cond_branch
.L517:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L518	@cond_branch
	add	r1, r1, #0x1
.L518:
	add	r1, r1, #0x1
	add	r4, r4, #0x1
	add	r3, r3, #0x1
	cmp	r3, r2
	bcc	.L517	@cond_branch
.L513:
	lsl	r0, r4, #0x10
	lsr	r0, r0, #0x10
	pop	{r4}
	pop	{r1}
	bx	r1
.L521:
	.align	2, 0
.L520:
	.word	gUnknown_02022C84
.Lfe30:
	.size	 sub_801EED8,.Lfe30-sub_801EED8
	.align	2, 0
	.type	 sub_801EF1C,function
	.thumb_func
sub_801EF1C:
	mov	r1, #0x0
	strb	r1, [r0]
	bx	lr
.Lfe31:
	.size	 sub_801EF1C,.Lfe31-sub_801EF1C
	.align	2, 0
	.type	 sub_801EF24,function
	.thumb_func
sub_801EF24:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x2
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L524
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L524+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L525:
	.align	2, 0
.L524:
	.word	gSaveBlock2Ptr
	.word	gUnknown_02022C84
.Lfe32:
	.size	 sub_801EF24,.Lfe32-sub_801EF24
	.align	2, 0
	.type	 sub_801EF4C,function
	.thumb_func
sub_801EF4C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x1
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L527
	ldr	r1, [r1]
	bl	StringCopy
	add	r4, r4, #0x9
	ldr	r0, .L527+0x4
	ldr	r1, [r0]
	add	r1, r1, #0x1a
	add	r0, r4, #0
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L528:
	.align	2, 0
.L527:
	.word	gSaveBlock2Ptr
	.word	gUnknown_02022C84
.Lfe33:
	.size	 sub_801EF4C,.Lfe33-sub_801EF4C
	.align	2, 0
	.type	 sub_801EF7C,function
	.thumb_func
sub_801EF7C:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x3
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L530
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L530+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	bl	sub_8011A50
	pop	{r4}
	pop	{r0}
	bx	r0
.L531:
	.align	2, 0
.L530:
	.word	gSaveBlock2Ptr
	.word	gUnknown_02022C84
.Lfe34:
	.size	 sub_801EF7C,.Lfe34-sub_801EF7C
	.align	2, 0
	.type	 sub_801EFA8,function
	.thumb_func
sub_801EFA8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x4
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L533
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L533+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L534:
	.align	2, 0
.L533:
	.word	gSaveBlock2Ptr
	.word	gUnknown_02022C84
.Lfe35:
	.size	 sub_801EFA8,.Lfe35-sub_801EFA8
	.align	2, 0
	.type	 sub_801EFD0,function
	.thumb_func
sub_801EFD0:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x5
	strb	r0, [r4]
	add	r0, r4, #0x1
	ldr	r1, .L536
	ldr	r1, [r1]
	bl	StringCopy
	ldr	r0, .L536+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	strb	r0, [r4, #0x9]
	pop	{r4}
	pop	{r0}
	bx	r0
.L537:
	.align	2, 0
.L536:
	.word	gSaveBlock2Ptr
	.word	gUnknown_02022C84
.Lfe36:
	.size	 sub_801EFD0,.Lfe36-sub_801EFD0
	.align	2, 0
	.type	 sub_801EFF8,function
	.thumb_func
sub_801EFF8:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	add	r5, r1, #0
	ldrb	r0, [r5]
	add	r1, r0, #0
	add	r4, r5, #0x1
	add	r5, r4, #0
	add	r5, r5, #0x8
	cmp	r0, #0x2
	beq	.L540	@cond_branch
	cmp	r0, #0x2
	bgt	.L548	@cond_branch
	cmp	r0, #0x1
	beq	.L542	@cond_branch
	b	.L539
.L548:
	cmp	r1, #0x3
	beq	.L544	@cond_branch
	cmp	r1, #0x5
	beq	.L543	@cond_branch
	b	.L539
.L540:
	ldr	r0, .L551
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	ldrb	r1, [r4, #0x8]
	cmp	r0, r1
	beq	.L539	@cond_branch
	bl	DynamicPlaceholderTextUtil_Reset
	mov	r0, #0x0
	add	r1, r4, #0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	ldr	r1, .L551+0x4
	b	.L550
.L552:
	.align	2, 0
.L551:
	.word	gUnknown_02022C84
	.word	gText_F700JoinedChat
.L542:
	add	r0, r6, #0
	add	r1, r4, #0
	bl	StringCopy
	mov	r1, #0xfc
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x13
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0x2a
	strb	r1, [r0]
	add	r0, r0, #0x1
	mov	r1, #0xf0
	strb	r1, [r0]
	add	r0, r0, #0x1
	add	r1, r5, #0
	bl	StringCopy
	mov	r0, #0x1
	b	.L549
.L543:
	ldr	r0, .L553
	ldr	r0, [r0]
	add	r0, r0, #0x79
	add	r1, r4, #0
	bl	StringCopy
.L544:
	ldr	r0, .L553
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x13]
	ldrb	r5, [r5]
	cmp	r0, r5
	beq	.L539	@cond_branch
	bl	DynamicPlaceholderTextUtil_Reset
	mov	r0, #0x0
	add	r1, r4, #0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	ldr	r1, .L553+0x4
.L550:
	add	r0, r6, #0
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	mov	r0, #0x1
	b	.L549
.L554:
	.align	2, 0
.L553:
	.word	gUnknown_02022C84
	.word	gText_F700LeftChat
.L539:
	mov	r0, #0x0
.L549:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 sub_801EFF8,.Lfe37-sub_801EFF8
	.align	2, 0
	.type	 GetCurrentKeyboardPage,function
	.thumb_func
GetCurrentKeyboardPage:
	ldr	r0, .L556
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x10]
	bx	lr
.L557:
	.align	2, 0
.L556:
	.word	gUnknown_02022C84
.Lfe38:
	.size	 GetCurrentKeyboardPage,.Lfe38-GetCurrentKeyboardPage
	.align	2, 0
	.type	 sub_801F0BC,function
	.thumb_func
sub_801F0BC:
	ldr	r2, .L559
	ldr	r3, [r2]
	ldrb	r2, [r3, #0x11]
	strb	r2, [r0]
	ldrb	r0, [r3, #0x12]
	strb	r0, [r1]
	bx	lr
.L560:
	.align	2, 0
.L559:
	.word	gUnknown_02022C84
.Lfe39:
	.size	 sub_801F0BC,.Lfe39-sub_801F0BC
	.align	2, 0
	.type	 sub_801F0D0,function
	.thumb_func
sub_801F0D0:
	ldr	r0, .L562
	ldr	r0, [r0]
	add	r0, r0, #0x1a
	bx	lr
.L563:
	.align	2, 0
.L562:
	.word	gUnknown_02022C84
.Lfe40:
	.size	 sub_801F0D0,.Lfe40-sub_801F0D0
	.align	2, 0
	.type	 sub_801F0DC,function
	.thumb_func
sub_801F0DC:
	push	{lr}
	bl	sub_801F0D0
	bl	StringLength_Multibyte
	pop	{r1}
	bx	r1
.Lfe41:
	.size	 sub_801F0DC,.Lfe41-sub_801F0DC
	.align	2, 0
	.type	 sub_801F0EC,function
	.thumb_func
sub_801F0EC:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L568
	ldr	r0, [r0]
	ldrb	r3, [r0, #0x15]
	ldrb	r2, [r0, #0x14]
	sub	r0, r3, r2
	cmp	r0, #0
	bge	.L566	@cond_branch
	neg	r0, r0
	str	r3, [r4]
	b	.L567
.L569:
	.align	2, 0
.L568:
	.word	gUnknown_02022C84
.L566:
	str	r2, [r4]
.L567:
	str	r0, [r1]
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe42:
	.size	 sub_801F0EC,.Lfe42-sub_801F0EC
	.align	2, 0
	.type	 sub_801F114,function
	.thumb_func
sub_801F114:
	push	{lr}
	bl	sub_801EED8
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	ldr	r0, .L577
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	cmp	r2, #0
	beq	.L572	@cond_branch
.L574:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L575	@cond_branch
	add	r1, r1, #0x1
.L575:
	add	r1, r1, #0x1
	sub	r2, r2, #0x1
	cmp	r2, #0
	bne	.L574	@cond_branch
.L572:
	add	r0, r1, #0
	pop	{r1}
	bx	r1
.L578:
	.align	2, 0
.L577:
	.word	gUnknown_02022C84
.Lfe43:
	.size	 sub_801F114,.Lfe43-sub_801F114
	.align	2, 0
	.type	 sub_801F144,function
	.thumb_func
sub_801F144:
	push	{r4, lr}
	bl	sub_801EED8
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	ldr	r0, .L586
	ldr	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x1a
	mov	r2, #0x0
	mov	r3, #0x0
	cmp	r2, r4
	bcs	.L581	@cond_branch
.L583:
	ldrb	r0, [r1]
	cmp	r0, #0xf9
	bne	.L584	@cond_branch
	add	r1, r1, #0x1
.L584:
	add	r1, r1, #0x1
	add	r0, r2, #0x1
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	add	r3, r3, #0x1
	cmp	r3, r4
	bcc	.L583	@cond_branch
.L581:
	add	r0, r2, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L587:
	.align	2, 0
.L586:
	.word	gUnknown_02022C84
.Lfe44:
	.size	 sub_801F144,.Lfe44-sub_801F144
	.align	2, 0
	.type	 sub_801F180,function
	.thumb_func
sub_801F180:
	ldr	r0, .L589
	ldr	r0, [r0]
	add	r0, r0, #0x39
	bx	lr
.L590:
	.align	2, 0
.L589:
	.word	gUnknown_02022C84
.Lfe45:
	.size	 sub_801F180,.Lfe45-sub_801F180
	.align	2, 0
	.type	 sub_801F18C,function
	.thumb_func
sub_801F18C:
	ldr	r0, .L592
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x16]
	bx	lr
.L593:
	.align	2, 0
.L592:
	.word	gUnknown_02022C84
.Lfe46:
	.size	 sub_801F18C,.Lfe46-sub_801F18C
	.align	2, 0
	.type	 sub_801F198,function
	.thumb_func
sub_801F198:
	ldr	r0, .L595
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x15]
	bx	lr
.L596:
	.align	2, 0
.L595:
	.word	gUnknown_02022C84
.Lfe47:
	.size	 sub_801F198,.Lfe47-sub_801F198
	.align	2, 0
	.type	 sub_801F1A4,function
	.thumb_func
sub_801F1A4:
	push	{lr}
	bl	sub_801EEA8
	ldrb	r1, [r0]
	cmp	r1, #0xff
	bhi	.L599	@cond_branch
	ldr	r0, .L602
	add	r0, r1, r0
	ldrb	r0, [r0]
	cmp	r0, r1
	beq	.L599	@cond_branch
	cmp	r0, #0
	bne	.L598	@cond_branch
.L599:
	mov	r0, #0x3
	b	.L601
.L603:
	.align	2, 0
.L602:
	.word	gUnknown_082F2AA8
.L598:
	mov	r0, #0x0
.L601:
	pop	{r1}
	bx	r1
.Lfe48:
	.size	 sub_801F1A4,.Lfe48-sub_801F1A4
	.align	2, 0
	.type	 sub_801F1D0,function
	.thumb_func
sub_801F1D0:
	ldr	r0, .L605
	ldr	r0, [r0]
	add	r0, r0, #0x79
	bx	lr
.L606:
	.align	2, 0
.L605:
	.word	gUnknown_02022C84
.Lfe49:
	.size	 sub_801F1D0,.Lfe49-sub_801F1D0
	.align	2, 0
	.globl	copy_strings_to_sav1
	.type	 copy_strings_to_sav1,function
	.thumb_func
copy_strings_to_sav1:
	push	{r4, lr}
	ldr	r4, .L608
	ldr	r0, [r4]
	ldr	r1, .L608+0x4
	add	r0, r0, r1
	ldr	r1, .L608+0x8
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0xc
	add	r0, r0, r1
	ldr	r1, .L608+0x10
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x14
	add	r0, r0, r1
	ldr	r1, .L608+0x18
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x1c
	add	r0, r0, r1
	ldr	r1, .L608+0x20
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x24
	add	r0, r0, r1
	ldr	r1, .L608+0x28
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x2c
	add	r0, r0, r1
	ldr	r1, .L608+0x30
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x34
	add	r0, r0, r1
	ldr	r1, .L608+0x38
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x3c
	add	r0, r0, r1
	ldr	r1, .L608+0x40
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x44
	add	r0, r0, r1
	ldr	r1, .L608+0x48
	bl	StringCopy
	ldr	r0, [r4]
	ldr	r1, .L608+0x4c
	add	r0, r0, r1
	ldr	r1, .L608+0x50
	bl	StringCopy
	pop	{r4}
	pop	{r0}
	bx	r0
.L609:
	.align	2, 0
.L608:
	.word	gSaveBlock1Ptr
	.word	0x3c88
	.word	gText_Hello
	.word	0x3c9d
	.word	gText_Pokemon2
	.word	0x3cb2
	.word	gText_Trade
	.word	0x3cc7
	.word	gText_Battle
	.word	0x3cdc
	.word	gText_Lets
	.word	0x3cf1
	.word	gText_Ok
	.word	0x3d06
	.word	gText_Sorry
	.word	0x3d1b
	.word	gText_YaySmileEmoji
	.word	0x3d30
	.word	gText_ThankYou
	.word	0x3d45
	.word	gText_ByeBye
.Lfe50:
	.size	 copy_strings_to_sav1,.Lfe50-copy_strings_to_sav1
	.align	2, 0
	.type	 sub_801F2B4,function
	.thumb_func
sub_801F2B4:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L653
	add	r4, r0, r1
	mov	r1, #0x0
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x7
	bls	.LCB3928
	b	.L610	@long jump
.LCB3928:
	lsl	r0, r0, #0x2
	ldr	r1, .L653+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L654:
	.align	2, 0
.L653:
	.word	gTasks+0x8
	.word	.L646
	.align	2, 0
	.align	2, 0
.L646:
	.word	.L612
	.word	.L614
	.word	.L643
	.word	.L617
	.word	.L637
	.word	.L640
	.word	.L642
	.word	.L635
.L612:
	ldr	r0, .L655
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.LCB3953
	b	.L648	@long jump
.LCB3953:
	mov	r0, #0x1
	strh	r0, [r4]
.L614:
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r2, r0, #0
	strh	r0, [r4, #0x8]
	ldr	r3, .L655+0x4
	ldr	r0, [r3]
	ldrb	r1, [r0, #0xd]
	mov	r5, #0x8
	ldrsh	r0, [r4, r5]
	cmp	r1, r0
	beq	.L615	@cond_branch
	mov	r0, #0x2
	strh	r0, [r4]
	ldr	r0, [r3]
	strb	r2, [r0, #0xd]
	b	.L610
.L656:
	.align	2, 0
.L655:
	.word	gReceivedRemoteLinkPlayers
	.word	gUnknown_02022C84
.L615:
	bl	GetBlockReceivedStatus
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x6]
	cmp	r0, #0
	bne	.L616	@cond_branch
	bl	sub_8011A9C
	cmp	r0, #0
	beq	.LCB3998
	b	.L610	@long jump
.LCB3998:
.L616:
	mov	r0, #0x0
	strh	r0, [r4, #0x2]
	mov	r0, #0x3
	strh	r0, [r4]
.L617:
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x4
	bgt	.L619	@cond_branch
	mov	r2, #0x6
	ldrsh	r0, [r4, r2]
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	asr	r0, r0, r1
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L619	@cond_branch
	mov	r2, #0x1
.L620:
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	bgt	.L619	@cond_branch
	mov	r5, #0x6
	ldrsh	r0, [r4, r5]
	mov	r3, #0x2
	ldrsh	r1, [r4, r3]
	asr	r0, r0, r1
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L620	@cond_branch
.L619:
	ldrh	r1, [r4, #0x2]
	mov	r5, #0x2
	ldrsh	r0, [r4, r5]
	cmp	r0, #0x5
	bne	.LCB4042
	b	.L645	@long jump
.LCB4042:
	strh	r1, [r4, #0x4]
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	bl	ResetBlockReceivedFlag
	mov	r1, #0x2
	ldrsh	r0, [r4, r1]
	lsl	r0, r0, #0x8
	ldr	r1, .L657
	add	r0, r0, r1
	ldrb	r0, [r0]
	sub	r0, r0, #0x1
	cmp	r0, #0x4
	bhi	.L627	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L657+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L658:
	.align	2, 0
.L657:
	.word	gBlockRecvBuffer
	.word	.L632
	.align	2, 0
	.align	2, 0
.L632:
	.word	.L627
	.word	.L628
	.word	.L629
	.word	.L630
	.word	.L631
.L627:
	mov	r0, #0x3
	b	.L649
.L628:
	mov	r0, #0x3
	b	.L649
.L629:
	mov	r0, #0x4
	b	.L649
.L630:
	mov	r0, #0x5
	b	.L649
.L631:
	mov	r0, #0x6
.L649:
	strh	r0, [r4, #0xa]
	ldr	r5, .L659
	ldr	r0, [r5]
	add	r0, r0, #0x39
	mov	r2, #0x2
	ldrsh	r1, [r4, r2]
	lsl	r1, r1, #0x8
	ldr	r2, .L659+0x4
	add	r1, r1, r2
	bl	sub_801EFF8
	cmp	r0, #0
	beq	.L633	@cond_branch
	ldr	r0, [r5]
	ldrh	r1, [r4, #0x2]
	strb	r1, [r0, #0x16]
	mov	r0, #0xc
	mov	r1, #0x2
	bl	sub_801F5EC
	mov	r0, #0x7
	b	.L650
.L660:
	.align	2, 0
.L659:
	.word	gUnknown_02022C84
	.word	gBlockRecvBuffer
.L633:
	ldrh	r0, [r4, #0xa]
.L650:
	strh	r0, [r4]
	ldrh	r0, [r4, #0x2]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2]
	b	.L610
.L635:
	mov	r0, #0x2
	bl	sub_801F644
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L610	@cond_branch
	ldrh	r0, [r4, #0xa]
	b	.L651
.L637:
	ldr	r6, .L661
	ldr	r0, [r6]
	ldrb	r0, [r0, #0x13]
	cmp	r0, #0
	bne	.L638	@cond_branch
	mov	r3, #0x4
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L638	@cond_branch
	bl	GetLinkPlayerCount
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x2
	bne	.L639	@cond_branch
	bl	sub_80104B0
	ldr	r1, [r6]
	mov	r0, #0x1
	b	.L652
.L662:
	.align	2, 0
.L661:
	.word	gUnknown_02022C84
.L639:
	mov	r5, #0x4
	ldrsh	r0, [r4, r5]
	bl	sub_8011DE0
.L638:
	mov	r0, #0x3
	b	.L651
.L640:
	ldr	r0, .L663
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	beq	.L648	@cond_branch
	mov	r0, #0x2
	b	.L652
.L664:
	.align	2, 0
.L663:
	.word	gUnknown_02022C84
.L642:
	ldr	r0, .L665
	ldr	r1, [r0]
	mov	r0, #0x3
.L652:
	strb	r0, [r1, #0x17]
.L648:
	add	r0, r5, #0
	bl	DestroyTask
	b	.L610
.L666:
	.align	2, 0
.L665:
	.word	gUnknown_02022C84
.L643:
	bl	sub_8011A9C
	cmp	r0, #0
	bne	.L610	@cond_branch
	ldr	r0, .L667
	ldr	r1, [r0]
	ldrb	r0, [r1, #0x13]
	cmp	r0, #0
	bne	.L645	@cond_branch
	ldrb	r0, [r1, #0xd]
	bl	sub_80110B8
.L645:
	mov	r0, #0x1
.L651:
	strh	r0, [r4]
.L610:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	gUnknown_02022C84
.Lfe51:
	.size	 sub_801F2B4,.Lfe51-sub_801F2B4
	.align	2, 0
	.type	 sub_801F4D0,function
	.thumb_func
sub_801F4D0:
	push	{r4, lr}
	ldr	r4, .L673
	ldr	r0, .L673+0x4
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L670	@cond_branch
	bl	sub_8020890
	cmp	r0, #0
	beq	.L670	@cond_branch
	mov	r0, #0x0
	bl	ResetBgsAndClearDma3BusyFlags
	ldr	r1, .L673+0x8
	mov	r0, #0x0
	mov	r2, #0x4
	bl	InitBgsFromTemplates
	ldr	r0, .L673+0xc
	bl	InitWindows
	bl	ResetTempTileDataBuffers
	bl	sub_8020770
	ldr	r0, [r4]
	bl	sub_801F574
	bl	sub_801F580
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_801F5EC
	mov	r0, #0x1
	b	.L672
.L674:
	.align	2, 0
.L673:
	.word	gUnknown_02022C88
	.word	0x2168
	.word	gUnknown_082F2C60
	.word	gUnknown_082F2C70
.L670:
	mov	r0, #0x0
.L672:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe52:
	.size	 sub_801F4D0,.Lfe52-sub_801F4D0
	.align	2, 0
	.type	 sub_801F534,function
	.thumb_func
sub_801F534:
	push	{lr}
	mov	r0, #0x0
	bl	sub_801F644
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe53:
	.size	 sub_801F534,.Lfe53-sub_801F534
	.align	2, 0
	.type	 sub_801F544,function
	.thumb_func
sub_801F544:
	push	{r4, lr}
	bl	sub_80208D0
	ldr	r4, .L678
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L677	@cond_branch
	bl	Free
	mov	r0, #0x0
	str	r0, [r4]
.L677:
	bl	FreeAllWindowBuffers
	ldr	r1, .L678+0x4
	mov	r0, #0x3
	strb	r0, [r1, #0x15]
	pop	{r4}
	pop	{r0}
	bx	r0
.L679:
	.align	2, 0
.L678:
	.word	gUnknown_02022C88
	.word	gScanlineEffect
.Lfe54:
	.size	 sub_801F544,.Lfe54-sub_801F544
	.align	2, 0
	.type	 sub_801F574,function
	.thumb_func
sub_801F574:
	mov	r2, #0x0
	mov	r1, #0xff
	strh	r1, [r0, #0x18]
	strh	r1, [r0, #0x1e]
	strh	r2, [r0, #0x1a]
	bx	lr
.Lfe55:
	.size	 sub_801F574,.Lfe55-sub_801F574
	.align	2, 0
	.type	 sub_801F580,function
	.thumb_func
sub_801F580:
	push	{r4, r5, lr}
	ldr	r1, .L688
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L681	@cond_branch
	mov	r2, #0x0
	add	r4, r1, #0
	ldr	r5, .L688+0x4
	mov	r3, #0x0
.L686:
	ldr	r0, [r4]
	lsl	r1, r2, #0x3
	add	r0, r0, r1
	str	r5, [r0]
	strb	r3, [r0, #0x4]
	ldr	r0, [r4]
	add	r0, r0, r1
	strb	r3, [r0, #0x5]
	add	r2, r2, #0x1
	cmp	r2, #0x2
	ble	.L686	@cond_branch
.L681:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L689:
	.align	2, 0
.L688:
	.word	gUnknown_02022C88
	.word	sub_801FDD8
.Lfe56:
	.size	 sub_801F580,.Lfe56-sub_801F580
	.align	2, 0
	.type	 sub_801F5B8,function
	.thumb_func
sub_801F5B8:
	push	{r4, r5, r6, lr}
	ldr	r1, .L697
	ldr	r0, [r1]
	cmp	r0, #0
	beq	.L690	@cond_branch
	mov	r5, #0x0
	add	r6, r1, #0
.L695:
	ldr	r1, [r6]
	lsl	r4, r5, #0x3
	add	r1, r1, r4
	add	r0, r1, #0x5
	ldr	r1, [r1]
	bl	_call_via_r1
	ldr	r1, [r6]
	add	r1, r1, r4
	strb	r0, [r1, #0x4]
	add	r5, r5, #0x1
	cmp	r5, #0x2
	ble	.L695	@cond_branch
.L690:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L698:
	.align	2, 0
.L697:
	.word	gUnknown_02022C88
.Lfe57:
	.size	 sub_801F5B8,.Lfe57-sub_801F5B8
	.align	2, 0
	.type	 sub_801F5EC,function
	.thumb_func
sub_801F5EC:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	ldr	r3, .L706
	ldr	r0, [r3]
	lsr	r1, r1, #0x15
	add	r0, r0, r1
	ldr	r2, .L706+0x4
	str	r2, [r0]
	mov	r4, #0x0
	add	r5, r3, #0
	add	r3, r1, #0
	mov	ip, r4
	ldr	r1, .L706+0x8
	mov	r7, #0x1
	add	r2, r1, #0x4
.L703:
	ldrh	r0, [r1]
	cmp	r0, r6
	bne	.L702	@cond_branch
	ldr	r1, [r5]
	add	r1, r1, r3
	ldr	r0, [r2]
	str	r0, [r1]
	strb	r7, [r1, #0x4]
	ldr	r0, [r5]
	add	r0, r0, r3
	mov	r1, ip
	strb	r1, [r0, #0x5]
	b	.L701
.L707:
	.align	2, 0
.L706:
	.word	gUnknown_02022C88
	.word	sub_801FDD8
	.word	gUnknown_082F2C98
.L702:
	add	r1, r1, #0x8
	add	r2, r2, #0x8
	add	r4, r4, #0x1
	cmp	r4, #0x14
	bls	.L703	@cond_branch
.L701:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe58:
	.size	 sub_801F5EC,.Lfe58-sub_801F5EC
	.align	2, 0
	.type	 sub_801F644,function
	.thumb_func
sub_801F644:
	lsl	r0, r0, #0x18
	ldr	r1, .L709
	ldr	r1, [r1]
	lsr	r0, r0, #0x15
	add	r1, r1, r0
	ldrb	r0, [r1, #0x4]
	bx	lr
.L710:
	.align	2, 0
.L709:
	.word	gUnknown_02022C88
.Lfe59:
	.size	 sub_801F644,.Lfe59-sub_801F644
	.align	2, 0
	.type	 sub_801F658,function
	.thumb_func
sub_801F658:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeTempTileDataBuffersIfPossible
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L725	@cond_branch
	ldrb	r0, [r4]
	cmp	r0, #0x6
	bhi	.L722	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L726
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L727:
	.align	2, 0
.L726:
	.word	.L723
	.align	2, 0
	.align	2, 0
.L723:
	.word	.L714
	.word	.L715
	.word	.L716
	.word	.L717
	.word	.L718
	.word	.L719
	.word	.L720
.L714:
	bl	sub_8020480
	bl	sub_8020538
	b	.L713
.L715:
	bl	sub_8020584
	b	.L713
.L716:
	bl	sub_80205B4
	b	.L713
.L717:
	bl	sub_8020604
	b	.L713
.L718:
	bl	sub_8020680
	b	.L713
.L719:
	bl	sub_80206A4
	bl	sub_80206D0
	bl	sub_8020740
	bl	sub_80206E8
	b	.L713
.L720:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L713	@cond_branch
	bl	sub_80208E8
	bl	sub_8020A68
	bl	sub_8020B20
	b	.L713
.L722:
	mov	r0, #0x0
	b	.L724
.L713:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L725:
	mov	r0, #0x1
.L724:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe60:
	.size	 sub_801F658,.Lfe60-sub_801F658
	.align	2, 0
	.type	 sub_801F6F8,function
	.thumb_func
sub_801F6F8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L730	@cond_branch
	cmp	r0, #0x1
	beq	.L731	@cond_branch
	b	.L729
.L730:
	bl	sub_80203B0
	mov	r0, #0x3
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L729
.L731:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L734
.L729:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L734:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe61:
	.size	 sub_801F6F8,.Lfe61-sub_801F6F8
	.align	2, 0
	.type	 sub_801F730,function
	.thumb_func
sub_801F730:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L737	@cond_branch
	cmp	r0, #0x1
	beq	.L738	@cond_branch
	b	.L736
.L737:
	bl	sub_802040C
	mov	r0, #0x3
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L736
.L738:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L741
.L736:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L741:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe62:
	.size	 sub_801F730,.Lfe62-sub_801F730
	.align	2, 0
	.type	 sub_801F768,function
	.thumb_func
sub_801F768:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0x1
	beq	.L746	@cond_branch
	cmp	r0, #0x1
	bgt	.L752	@cond_branch
	cmp	r0, #0
	beq	.L744	@cond_branch
	b	.L743
.L752:
	cmp	r0, #0x2
	beq	.L748	@cond_branch
	b	.L743
.L744:
	mov	r0, #0x1
	bl	sub_802091C
	bl	sub_8020320
	cmp	r0, #0
	bne	.L754	@cond_branch
	bl	sub_80201A4
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L743
.L746:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L743	@cond_branch
	b	.L754
.L748:
	bl	sub_8020368
	cmp	r0, #0
	bne	.L754	@cond_branch
	bl	sub_802093C
	mov	r0, #0x0
	bl	sub_802091C
	bl	sub_8020B80
	mov	r0, #0x0
	b	.L753
.L743:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L754:
	mov	r0, #0x1
.L753:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe63:
	.size	 sub_801F768,.Lfe63-sub_801F768
	.align	2, 0
	.type	 sub_801F7D4,function
	.thumb_func
sub_801F7D4:
	push	{lr}
	bl	sub_802093C
	mov	r0, #0x0
	pop	{r1}
	bx	r1
.Lfe64:
	.size	 sub_801F7D4,.Lfe64-sub_801F7D4
	.align	2, 0
	.type	 sub_801F7E0,function
	.thumb_func
sub_801F7E0:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L758	@cond_branch
	cmp	r0, #0x1
	beq	.L759	@cond_branch
	b	.L757
.L758:
	mov	r0, #0x0
	mov	r1, #0x0
	bl	sub_801FF18
	mov	r0, #0x17
	mov	r1, #0xb
	mov	r2, #0x1
	bl	sub_801FDDC
	ldr	r0, .L763
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L757
.L764:
	.align	2, 0
.L763:
	.word	gUnknown_02022C88
.L759:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L762
.L757:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	mov	r0, #0x1
.L762:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe65:
	.size	 sub_801F7E0,.Lfe65-sub_801F7E0
	.align	2, 0
	.type	 sub_801F82C,function
	.thumb_func
sub_801F82C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L767	@cond_branch
	cmp	r0, #0x1
	beq	.L768	@cond_branch
	b	.L766
.L767:
	bl	sub_8020094
	bl	sub_801FEBC
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	b	.L766
.L768:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L773	@cond_branch
	bl	sub_80200C8
	bl	sub_801FEE4
	mov	r0, #0x0
	b	.L772
.L766:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L773:
	mov	r0, #0x1
.L772:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe66:
	.size	 sub_801F82C,.Lfe66-sub_801F82C
	.align	2, 0
	.type	 sub_801F870,function
	.thumb_func
sub_801F870:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L776	@cond_branch
	cmp	r0, #0x1
	beq	.L777	@cond_branch
	b	.L775
.L776:
	add	r1, sp, #0x8
	add	r0, sp, #0x4
	bl	sub_801F0EC
	ldr	r0, [sp, #0x4]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp, #0x8]
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r2, #0x0
	bl	sub_80200EC
	bl	sub_801F0D0
	add	r1, r0, #0
	mov	r0, #0x2
	str	r0, [sp]
	mov	r0, #0x0
	mov	r2, #0x3
	mov	r3, #0x1
	bl	sub_8020118
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L775
.L777:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L782	@cond_branch
	bl	sub_8020B80
	mov	r0, #0x0
	b	.L781
.L775:
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
.L782:
	mov	r0, #0x1
.L781:
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe67:
	.size	 sub_801F870,.Lfe67-sub_801F870
	.align	2, 0
	.type	 sub_801F8DC,function
	.thumb_func
sub_801F8DC:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L786	@cond_branch
	cmp	r0, #0x1
	bgt	.L795	@cond_branch
	cmp	r0, #0
	beq	.L785	@cond_branch
	b	.L784
.L795:
	cmp	r0, #0x2
	beq	.L789	@cond_branch
	cmp	r0, #0x3
	beq	.L792	@cond_branch
	b	.L784
.L785:
	bl	sub_801F144
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	sub_801F114
	add	r5, r0, #0
	bl	StringLength_Multibyte
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x66
	bl	sub_80200EC
	mov	r0, #0x5
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x4
	bl	sub_8020118
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L784
.L786:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L797	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x10
	bl	sub_801FF18
	ldr	r0, .L798
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L784
.L799:
	.align	2, 0
.L798:
	.word	gUnknown_02022C88
.L789:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L797	@cond_branch
	mov	r0, #0x1
	bl	sub_80209AC
	b	.L784
.L792:
	mov	r0, #0x0
	b	.L796
.L784:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L797:
	mov	r0, #0x1
.L796:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 sub_801F8DC,.Lfe68-sub_801F8DC
	.align	2, 0
	.type	 sub_801F984,function
	.thumb_func
sub_801F984:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-0x4
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x1
	beq	.L803	@cond_branch
	cmp	r0, #0x1
	bgt	.L812	@cond_branch
	cmp	r0, #0
	beq	.L802	@cond_branch
	b	.L801
.L812:
	cmp	r0, #0x2
	beq	.L806	@cond_branch
	cmp	r0, #0x3
	beq	.L809	@cond_branch
	b	.L801
.L802:
	bl	sub_801F144
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	bl	sub_801F114
	add	r5, r0, #0
	bl	StringLength_Multibyte
	add	r1, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x0
	bl	sub_80200EC
	mov	r0, #0x2
	str	r0, [sp]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x3
	mov	r3, #0x1
	bl	sub_8020118
	mov	r0, #0x1
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L801
.L803:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L814	@cond_branch
	bl	sub_8020094
	ldr	r0, .L815
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	b	.L801
.L816:
	.align	2, 0
.L815:
	.word	gUnknown_02022C88
.L806:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L814	@cond_branch
	mov	r0, #0x0
	bl	sub_80209AC
	bl	sub_80200C8
	b	.L801
.L809:
	mov	r0, #0x0
	b	.L813
.L801:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L814:
	mov	r0, #0x1
.L813:
	add	sp, sp, #0x4
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe69:
	.size	 sub_801F984,.Lfe69-sub_801F984
	.align	2, 0
	.type	 sub_801FA2C,function
	.thumb_func
sub_801FA2C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L819	@cond_branch
	cmp	r0, #0x1
	beq	.L820	@cond_branch
	b	.L818
.L819:
	bl	sub_80201A4
	mov	r0, #0x2
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L818
.L820:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L818	@cond_branch
	mov	r0, #0x0
	b	.L825
.L818:
	mov	r0, #0x1
.L825:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe70:
	.size	 sub_801FA2C,.Lfe70-sub_801FA2C
	.align	2, 0
	.type	 sub_801FA68,function
	.thumb_func
sub_801FA68:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldrb	r0, [r6]
	cmp	r0, #0x4
	bhi	.L841	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L844
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L845:
	.align	2, 0
.L844:
	.word	.L839
	.align	2, 0
	.align	2, 0
.L839:
	.word	.L828
	.word	.L829
	.word	.L833
	.word	.L834
	.word	.L843
.L828:
	ldr	r0, .L846
	ldr	r0, [r0]
	ldrh	r5, [r0, #0x1a]
	bl	sub_801F180
	add	r4, r0, #0
	bl	sub_801F18C
	add	r2, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	add	r0, r5, #0
	add	r1, r4, #0
	bl	sub_8020420
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	b	.L827
.L847:
	.align	2, 0
.L846:
	.word	gUnknown_02022C88
.L829:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0
	bne	.L841	@cond_branch
	ldr	r0, .L848
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x1a]
	cmp	r0, #0x8
	bhi	.L831	@cond_branch
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1a]
	mov	r0, #0x4
	strb	r0, [r6]
.L843:
	mov	r0, #0x0
	b	.L840
.L849:
	.align	2, 0
.L848:
	.word	gUnknown_02022C88
.L831:
	strh	r2, [r1, #0x1c]
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L833:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x5
	mov	r3, #0x11
	bl	ScrollWindow
	mov	r0, #0x0
	mov	r1, #0x2
	bl	CopyWindowToVram
	ldr	r0, .L850
	ldr	r1, [r0]
	ldrh	r0, [r1, #0x1c]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x1c]
	ldrb	r0, [r6]
	add	r0, r0, #0x1
	strb	r0, [r6]
.L834:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L841	@cond_branch
	ldr	r0, .L850
	ldr	r0, [r0]
	ldrh	r0, [r0, #0x1c]
	cmp	r0, #0x2
	bhi	.L827	@cond_branch
	ldrb	r0, [r6]
	sub	r0, r0, #0x1
	b	.L842
.L851:
	.align	2, 0
.L850:
	.word	gUnknown_02022C88
.L827:
	ldrb	r0, [r6]
	add	r0, r0, #0x1
.L842:
	strb	r0, [r6]
.L841:
	mov	r0, #0x1
.L840:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe71:
	.size	 sub_801FA68,.Lfe71-sub_801FA68
	.align	2, 0
	.type	 sub_801FB44,function
	.thumb_func
sub_801FB44:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L854	@cond_branch
	cmp	r0, #0x1
	beq	.L855	@cond_branch
	b	.L853
.L854:
	bl	sub_80209E0
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L853
.L855:
	bl	sub_8020A1C
	b	.L858
.L853:
	mov	r0, #0x1
.L858:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe72:
	.size	 sub_801FB44,.Lfe72-sub_801FB44
	.align	2, 0
	.type	 sub_801FB70,function
	.thumb_func
sub_801FB70:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L861	@cond_branch
	cmp	r0, #0x1
	beq	.L862	@cond_branch
	b	.L860
.L861:
	mov	r0, #0x3
	mov	r1, #0x10
	bl	sub_801FF18
	ldr	r0, .L866
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L860
.L867:
	.align	2, 0
.L866:
	.word	gUnknown_02022C88
.L862:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L865
.L860:
	mov	r0, #0x1
.L865:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 sub_801FB70,.Lfe73-sub_801FB70
	.align	2, 0
	.type	 sub_801FBB4,function
	.thumb_func
sub_801FBB4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L870	@cond_branch
	cmp	r0, #0x1
	beq	.L871	@cond_branch
	b	.L869
.L870:
	mov	r0, #0x4
	mov	r1, #0x0
	bl	sub_801FF18
	ldr	r0, .L875
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L869
.L876:
	.align	2, 0
.L875:
	.word	gUnknown_02022C88
.L871:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L874
.L869:
	mov	r0, #0x1
.L874:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe74:
	.size	 sub_801FBB4,.Lfe74-sub_801FBB4
	.align	2, 0
	.type	 sub_801FBF8,function
	.thumb_func
sub_801FBF8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L879	@cond_branch
	cmp	r0, #0x1
	beq	.L880	@cond_branch
	b	.L878
.L879:
	bl	DynamicPlaceholderTextUtil_Reset
	bl	sub_801F1D0
	add	r1, r0, #0
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	mov	r0, #0x5
	mov	r1, #0x0
	bl	sub_801FF18
	ldr	r0, .L884
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L878
.L885:
	.align	2, 0
.L884:
	.word	gUnknown_02022C88
.L880:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L883
.L878:
	mov	r0, #0x1
.L883:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe75:
	.size	 sub_801FBF8,.Lfe75-sub_801FBF8
	.align	2, 0
	.type	 sub_801FC4C,function
	.thumb_func
sub_801FC4C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L888	@cond_branch
	cmp	r0, #0x1
	beq	.L889	@cond_branch
	b	.L887
.L888:
	mov	r0, #0x6
	mov	r1, #0x0
	bl	sub_801FF18
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	sub_801FDDC
	ldr	r0, .L893
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L887
.L894:
	.align	2, 0
.L893:
	.word	gUnknown_02022C88
.L889:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L892
.L887:
	mov	r0, #0x1
.L892:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe76:
	.size	 sub_801FC4C,.Lfe76-sub_801FC4C
	.align	2, 0
	.type	 sub_801FC9C,function
	.thumb_func
sub_801FC9C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L897	@cond_branch
	cmp	r0, #0x1
	beq	.L898	@cond_branch
	b	.L896
.L897:
	mov	r0, #0x7
	mov	r1, #0x0
	bl	sub_801FF18
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	sub_801FDDC
	ldr	r0, .L902
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L896
.L903:
	.align	2, 0
.L902:
	.word	gUnknown_02022C88
.L898:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L901
.L896:
	mov	r0, #0x1
.L901:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe77:
	.size	 sub_801FC9C,.Lfe77-sub_801FC9C
	.align	2, 0
	.type	 sub_801FCEC,function
	.thumb_func
sub_801FCEC:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L906	@cond_branch
	cmp	r0, #0x1
	beq	.L907	@cond_branch
	b	.L905
.L906:
	mov	r0, #0x8
	mov	r1, #0x0
	bl	sub_801FF18
	ldr	r0, .L911
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L905
.L912:
	.align	2, 0
.L911:
	.word	gUnknown_02022C88
.L907:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L910
.L905:
	mov	r0, #0x1
.L910:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe78:
	.size	 sub_801FCEC,.Lfe78-sub_801FCEC
	.align	2, 0
	.type	 sub_801FD30,function
	.thumb_func
sub_801FD30:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L915	@cond_branch
	cmp	r0, #0x1
	beq	.L916	@cond_branch
	b	.L914
.L915:
	bl	DynamicPlaceholderTextUtil_Reset
	ldr	r0, .L920
	ldr	r1, [r0]
	mov	r0, #0x0
	bl	DynamicPlaceholderTextUtil_SetPlaceholderPtr
	mov	r0, #0x9
	mov	r1, #0x0
	bl	sub_801FF18
	ldr	r0, .L920+0x4
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L914
.L921:
	.align	2, 0
.L920:
	.word	gSaveBlock2Ptr
	.word	gUnknown_02022C88
.L916:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L919
.L914:
	mov	r0, #0x1
.L919:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 sub_801FD30,.Lfe79-sub_801FD30
	.align	2, 0
	.type	 sub_801FD88,function
	.thumb_func
sub_801FD88:
	push	{r4, lr}
	add	r4, r0, #0
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L924	@cond_branch
	cmp	r0, #0x1
	beq	.L925	@cond_branch
	b	.L923
.L924:
	mov	r0, #0xa
	mov	r1, #0x0
	bl	sub_801FF18
	mov	r0, #0x17
	mov	r1, #0xa
	mov	r2, #0x1
	bl	sub_801FDDC
	ldr	r0, .L929
	ldr	r0, [r0]
	ldrb	r0, [r0, #0x1e]
	mov	r1, #0x3
	bl	CopyWindowToVram
	ldrb	r0, [r4]
	add	r0, r0, #0x1
	strb	r0, [r4]
	b	.L923
.L930:
	.align	2, 0
.L929:
	.word	gUnknown_02022C88
.L925:
	bl	IsDma3ManagerBusyWithBgCopy
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	b	.L928
.L923:
	mov	r0, #0x1
.L928:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 sub_801FD88,.Lfe80-sub_801FD88
	.align	2, 0
	.type	 sub_801FDD8,function
	.thumb_func
sub_801FDD8:
	mov	r0, #0x0
	bx	lr
.Lfe81:
	.size	 sub_801FDD8,.Lfe81-sub_801FDD8
	.align	2, 0
	.type	 sub_801FDDC,function
	.thumb_func
sub_801FDDC:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-0x14
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	ldr	r4, .L934
	ldr	r2, [sp, #0xc]
	and	r2, r2, r4
	lsr	r0, r0, #0x10
	ldr	r3, .L934+0x4
	and	r2, r2, r3
	orr	r2, r2, r0
	lsr	r1, r1, #0x8
	ldr	r0, .L934+0x8
	and	r2, r2, r0
	orr	r2, r2, r1
	ldr	r0, .L934+0xc
	and	r2, r2, r0
	mov	r0, #0xc0
	lsl	r0, r0, #0x13
	orr	r2, r2, r0
	str	r2, [sp, #0xc]
	ldr	r0, [sp, #0x10]
	and	r0, r0, r4
	mov	r1, #0x4
	orr	r0, r0, r1
	and	r0, r0, r3
	mov	r1, #0xe0
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L934+0x10
	and	r0, r0, r1
	mov	r1, #0xa4
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [sp, #0x10]
	add	r0, sp, #0xc
	bl	AddWindow
	add	r1, r0, #0
	ldr	r5, .L934+0x14
	ldr	r0, [r5]
	mov	r6, #0x0
	strh	r1, [r0, #0x18]
	lsl	r0, r1, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0xff
	beq	.L933	@cond_branch
	lsl	r0, r1, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	bl	PutWindowTilemap
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	ldr	r2, .L934+0x18
	mov	r1, #0x1
	str	r1, [sp]
	mov	r4, #0xff
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	ldr	r2, .L934+0x1c
	mov	r1, #0x11
	str	r1, [sp]
	str	r4, [sp, #0x4]
	str	r6, [sp, #0x8]
	mov	r1, #0x1
	mov	r3, #0x8
	bl	AddTextPrinterParameterized
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x1
	mov	r2, #0xd
	bl	DrawTextBorderOuter
	ldr	r0, [r5]
	ldrb	r0, [r0, #0x18]
	mov	r1, #0x2
	add	r2, r7, #0
	bl	InitMenuInUpperLeftCornerPlaySoundWhenAPressed
.L933:
	add	sp, sp, #0x14
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L935:
	.align	2, 0
.L934:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
	.word	gUnknown_02022C88
	.word	gText_Yes
	.word	gText_No
.Lfe82:
	.size	 sub_801FDDC,.Lfe82-sub_801FDDC
	.align	2, 0
	.type	 sub_801FEBC,function
	.thumb_func
sub_801FEBC:
	push	{r4, lr}
	ldr	r4, .L938
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0xff
	beq	.L937	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x18]
	bl	ClearWindowTilemap
.L937:
	pop	{r4}
	pop	{r0}
	bx	r0
.L939:
	.align	2, 0
.L938:
	.word	gUnknown_02022C88
.Lfe83:
	.size	 sub_801FEBC,.Lfe83-sub_801FEBC
	.align	2, 0
	.type	 sub_801FEE4,function
	.thumb_func
sub_801FEE4:
	push	{r4, lr}
	ldr	r4, .L942
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x18]
	cmp	r0, #0xff
	beq	.L941	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	ldr	r1, [r4]
	mov	r0, #0xff
	strh	r0, [r1, #0x18]
.L941:
	pop	{r4}
	pop	{r0}
	bx	r0
.L943:
	.align	2, 0
.L942:
	.word	gUnknown_02022C88
.Lfe84:
	.size	 sub_801FEE4,.Lfe84-sub_801FEE4
	.align	2, 0
	.type	 sub_801FF08,function
	.thumb_func
sub_801FF08:
	push	{lr}
	bl	Menu_ProcessInput
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 sub_801FF08,.Lfe85-sub_801FF08
	.align	2, 0
	.type	 sub_801FF18,function
	.thumb_func
sub_801FF18:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-0x1c
	add	r7, r0, #0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r9, r1
	ldr	r1, .L952
	ldr	r3, [sp, #0x14]
	and	r3, r3, r1
	ldr	r2, .L952+0x4
	and	r3, r3, r2
	mov	r0, #0x80
	lsl	r0, r0, #0x4
	orr	r3, r3, r0
	ldr	r0, .L952+0x8
	and	r3, r3, r0
	mov	r0, #0x80
	lsl	r0, r0, #0xd
	orr	r3, r3, r0
	ldr	r5, .L952+0xc
	and	r3, r3, r5
	mov	r0, #0xa8
	lsl	r0, r0, #0x15
	orr	r3, r3, r0
	str	r3, [sp, #0x14]
	ldr	r0, [sp, #0x18]
	and	r0, r0, r1
	mov	r1, #0x4
	orr	r0, r0, r1
	and	r0, r0, r2
	mov	r1, #0xe0
	lsl	r1, r1, #0x4
	orr	r0, r0, r1
	ldr	r1, .L952+0x10
	and	r0, r0, r1
	mov	r1, #0xd4
	lsl	r1, r1, #0xf
	orr	r0, r0, r1
	str	r0, [sp, #0x18]
	ldr	r1, .L952+0x14
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4, #0xa]
	cmp	r0, #0
	beq	.L946	@cond_branch
	lsl	r0, r3, #0x10
	mov	r1, #0xf9
	lsl	r1, r1, #0x18
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	and	r2, r2, r3
	orr	r2, r2, r0
	lsr	r1, r2, #0x18
	add	r1, r1, #0x7
	lsl	r1, r1, #0x18
	add	r0, r5, #0
	and	r0, r0, r2
	orr	r0, r0, r1
	str	r0, [sp, #0x14]
.L946:
	add	r0, sp, #0x14
	bl	AddWindow
	ldr	r5, .L952+0x18
	ldr	r1, [r5]
	strh	r0, [r1, #0x1e]
	ldrh	r0, [r1, #0x1e]
	mov	r8, r0
	cmp	r0, #0xff
	beq	.L945	@cond_branch
	ldrb	r0, [r4, #0x9]
	cmp	r0, #0
	beq	.L948	@cond_branch
	add	r0, r1, #0
	add	r0, r0, #0x22
	ldr	r1, [r4]
	bl	DynamicPlaceholderTextUtil_ExpandPlaceholders
	ldr	r0, [r5]
	add	r6, r0, #0
	add	r6, r6, #0x22
	b	.L949
.L953:
	.align	2, 0
.L952:
	.word	-0x100
	.word	-0xff01
	.word	-0xff0001
	.word	0xffffff
	.word	0xffff
	.word	gUnknown_082F2D40
	.word	gUnknown_02022C88
.L948:
	ldr	r6, [r4]
.L949:
	mov	r0, r9
	lsl	r1, r0, #0x8
	mov	r0, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r1, r8
	lsl	r0, r1, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	add	r0, r5, #0
	bl	PutWindowTilemap
	ldr	r1, .L954
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r0, [r4, #0x4]
	cmp	r0, #0x1
	bne	.L950	@cond_branch
	add	r0, r5, #0
	mov	r1, #0xa
	mov	r2, #0x2
	bl	DrawTextBorderInner
	ldrb	r3, [r4, #0x5]
	add	r3, r3, #0x8
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	ldrb	r0, [r4, #0x6]
	add	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldrb	r0, [r4, #0x7]
	str	r0, [sp, #0xc]
	ldrb	r0, [r4, #0x8]
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r6, #0
	bl	AddTextPrinterParameterized5
	b	.L951
.L955:
	.align	2, 0
.L954:
	.word	gUnknown_082F2D40
.L950:
	add	r0, r5, #0
	mov	r1, #0xa
	mov	r2, #0x2
	bl	DrawTextBorderOuter
	ldrb	r3, [r4, #0x5]
	ldrb	r0, [r4, #0x6]
	str	r0, [sp]
	mov	r0, #0xff
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	str	r0, [sp, #0x8]
	ldrb	r0, [r4, #0x7]
	str	r0, [sp, #0xc]
	ldrb	r0, [r4, #0x8]
	str	r0, [sp, #0x10]
	add	r0, r5, #0
	mov	r1, #0x1
	add	r2, r6, #0
	bl	AddTextPrinterParameterized5
.L951:
	ldr	r0, .L956
	ldr	r0, [r0]
	mov	r1, r8
	strh	r1, [r0, #0x1e]
.L945:
	add	sp, sp, #0x1c
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L957:
	.align	2, 0
.L956:
	.word	gUnknown_02022C88
.Lfe86:
	.size	 sub_801FF18,.Lfe86-sub_801FF18
	.align	2, 0
	.type	 sub_8020094,function
	.thumb_func
sub_8020094:
	push	{r4, lr}
	ldr	r4, .L960
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1e]
	cmp	r0, #0xff
	beq	.L959	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	ldr	r0, [r4]
	ldrb	r0, [r0, #0x1e]
	bl	ClearWindowTilemap
.L959:
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	pop	{r4}
	pop	{r0}
	bx	r0
.L961:
	.align	2, 0
.L960:
	.word	gUnknown_02022C88
.Lfe87:
	.size	 sub_8020094,.Lfe87-sub_8020094
	.align	2, 0
	.type	 sub_80200C8,function
	.thumb_func
sub_80200C8:
	push	{r4, lr}
	ldr	r4, .L964
	ldr	r0, [r4]
	ldrh	r0, [r0, #0x1e]
	cmp	r0, #0xff
	beq	.L963	@cond_branch
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	RemoveWindow
	ldr	r1, [r4]
	mov	r0, #0xff
	strh	r0, [r1, #0x1e]
.L963:
	pop	{r4}
	pop	{r0}
	bx	r0
.L965:
	.align	2, 0
.L964:
	.word	gUnknown_02022C88
.Lfe88:
	.size	 sub_80200C8,.Lfe88-sub_80200C8
	.align	2, 0
	.type	 sub_80200EC,function
	.thumb_func
sub_80200EC:
	push	{lr}
	add	sp, sp, #-0x8
	add	r3, r0, #0
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	lsl	r3, r3, #0x13
	lsr	r3, r3, #0x10
	lsl	r1, r1, #0x13
	lsr	r1, r1, #0x10
	str	r1, [sp]
	mov	r0, #0xe
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	add	r1, r2, #0
	add	r2, r3, #0
	mov	r3, #0x1
	bl	FillWindowPixelRect
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 sub_80200EC,.Lfe89-sub_80200EC
	.align	2, 0
	.type	 sub_8020118,function
	.thumb_func
sub_8020118:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x34
	mov	sl, r1
	ldr	r1, [sp, #0x54]
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r9, r5
	lsl	r2, r2, #0x18
	lsr	r4, r2, #0x18
	mov	r8, r4
	lsl	r3, r3, #0x18
	lsr	r7, r3, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	cmp	r4, #0
	beq	.L968	@cond_branch
	bl	sub_801F198
	add	r1, r0, #0
	sub	r1, r1, r5
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	add	r0, r5, #0
	add	r2, r4, #0
	bl	sub_80200EC
.L968:
	add	r0, sp, #0xc
	mov	r1, r8
	strb	r1, [r0]
	strb	r7, [r0, #0x1]
	strb	r6, [r0, #0x2]
	add	r4, sp, #0x10
	mov	r0, #0xfc
	strb	r0, [r4]
	mov	r0, #0x14
	strb	r0, [r4, #0x1]
	mov	r0, #0x8
	strb	r0, [r4, #0x2]
	mov	r0, sp
	add	r0, r0, #0x13
	mov	r1, sl
	bl	StringCopy
	mov	r0, r9
	lsl	r2, r0, #0x1b
	lsr	r2, r2, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r4, [sp, #0x8]
	mov	r0, #0x1
	mov	r1, #0x2
	mov	r3, #0x1
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x34
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe90:
	.size	 sub_8020118,.Lfe90-sub_8020118
	.align	2, 0
	.type	 sub_80201A4,function
	.thumb_func
sub_80201A4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x4c
	mov	r0, #0x2
	mov	r1, #0xff
	bl	FillWindowPixelBuffer
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	add	r1, sp, #0xc
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xe
	strb	r0, [r1, #0x1]
	mov	r0, #0xd
	strb	r0, [r1, #0x2]
	cmp	r2, #0x3
	beq	.L970	@cond_branch
	add	r1, sp, #0x10
	mov	r0, #0xfc
	strb	r0, [r1]
	mov	r0, #0x14
	strb	r0, [r1, #0x1]
	mov	r0, #0x8
	strb	r0, [r1, #0x2]
	str	r0, [sp, #0x40]
	str	r1, [sp, #0x44]
	cmp	r2, #0x2
	bne	.L971	@cond_branch
	mov	r1, #0x6
	str	r1, [sp, #0x40]
.L971:
	mov	r7, #0x0
	mov	r6, #0x0
	lsl	r0, r2, #0x2
	ldr	r1, .L991
	add	r0, r0, r2
	lsl	r0, r0, #0x3
	add	r4, r0, r1
	ldr	r0, [sp, #0x40]
	lsl	r5, r0, #0x18
.L975:
	ldr	r1, [r4]
	cmp	r1, #0
	bne	.LCB6665
	b	.L969	@long jump
.LCB6665:
	mov	r0, sp
	add	r0, r0, #0x13
	bl	StringCopy
	lsl	r3, r6, #0x18
	lsr	r3, r3, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r0, [sp, #0x44]
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	lsr	r2, r5, #0x18
	bl	AddTextPrinterParameterized3
	add	r4, r4, #0x4
	add	r7, r7, #0x1
	add	r0, r6, #0
	add	r0, r0, #0xc
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r7, #0x9
	ble	.L975	@cond_branch
	b	.L969
.L992:
	.align	2, 0
.L991:
	.word	sUnionRoomKeyboardText
.L970:
	mov	r1, #0x4
	str	r1, [sp, #0x40]
	mov	r7, #0x0
	mov	r6, #0x0
.L982:
	add	r0, r7, #0
	bl	sub_801EE6C
	add	r5, r0, #0
	mov	r0, #0x0
	add	r1, r5, #0
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, #0x28
	bgt	.L983	@cond_branch
	lsl	r3, r6, #0x18
	lsr	r3, r3, #0x18
	add	r4, sp, #0xc
	str	r4, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r4, #0x80
	lsl	r4, r4, #0x13
	lsr	r2, r4, #0x18
	bl	AddTextPrinterParameterized3
	add	r0, r7, #0x1
	str	r0, [sp, #0x48]
	add	r6, r6, #0xc
	mov	sl, r6
	b	.L981
.L983:
	add	r0, r5, #0
	bl	StringLength_Multibyte
	add	r4, r0, #0
	mov	r1, sp
	add	r1, r1, #0x10
	str	r1, [sp, #0x44]
	ldr	r0, [sp, #0x40]
	lsl	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r6, #0x18
	mov	r9, r1
	add	r0, r7, #0x1
	str	r0, [sp, #0x48]
	add	r6, r6, #0xc
	mov	sl, r6
	ldr	r7, [sp, #0x40]
	add	r7, r7, #0x23
	ldr	r6, [sp, #0x44]
.L985:
	sub	r4, r4, #0x1
	add	r0, r6, #0
	add	r1, r5, #0
	add	r2, r4, #0
	bl	StringCopyN_Multibyte
	mov	r0, #0x0
	add	r1, r6, #0
	mov	r2, #0x0
	bl	GetStringWidth
	cmp	r0, #0x23
	bgt	.L985	@cond_branch
	mov	r1, r8
	lsr	r2, r1, #0x18
	mov	r0, r9
	lsr	r4, r0, #0x18
	add	r1, sp, #0xc
	str	r1, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	ldr	r1, [sp, #0x44]
	str	r1, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	r2, r7, #0
	add	r0, sp, #0xc
	str	r0, [sp]
	mov	r1, #0x1
	neg	r1, r1
	str	r1, [sp, #0x4]
	ldr	r0, .L993
	str	r0, [sp, #0x8]
	mov	r0, #0x2
	mov	r1, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
.L981:
	ldr	r7, [sp, #0x48]
	mov	r4, sl
	lsl	r0, r4, #0x10
	lsr	r6, r0, #0x10
	cmp	r7, #0x9
	ble	.L982	@cond_branch
.L969:
	add	sp, sp, #0x4c
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L994:
	.align	2, 0
.L993:
	.word	gText_Ellipsis
.Lfe91:
	.size	 sub_80201A4,.Lfe91-sub_80201A4
	.align	2, 0
	.type	 sub_8020320,function
	.thumb_func
sub_8020320:
	push	{r4, lr}
	ldr	r1, .L1001
	ldr	r2, [r1]
	ldrh	r3, [r2, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r2, r4]
	cmp	r0, #0x37
	bgt	.L996	@cond_branch
	add	r0, r3, #0
	add	r0, r0, #0xc
	strh	r0, [r2, #0x20]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x37
	ble	.L1000	@cond_branch
	mov	r0, #0x38
	strh	r0, [r2, #0x20]
	b	.L996
.L1002:
	.align	2, 0
.L1001:
	.word	gUnknown_02022C88
.L1000:
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	bl	sub_80207C0
	mov	r0, #0x1
	b	.L999
.L996:
	ldr	r0, [r1]
	mov	r4, #0x20
	ldrsh	r0, [r0, r4]
	bl	sub_8020818
	mov	r0, #0x0
.L999:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe92:
	.size	 sub_8020320,.Lfe92-sub_8020320
	.align	2, 0
	.type	 sub_8020368,function
	.thumb_func
sub_8020368:
	push	{r4, lr}
	ldr	r1, .L1009
	ldr	r2, [r1]
	ldrh	r3, [r2, #0x20]
	mov	r4, #0x20
	ldrsh	r0, [r2, r4]
	cmp	r0, #0
	ble	.L1004	@cond_branch
	add	r0, r3, #0
	sub	r0, r0, #0xc
	strh	r0, [r2, #0x20]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bgt	.L1008	@cond_branch
	mov	r0, #0x0
	strh	r0, [r2, #0x20]
	b	.L1004
.L1010:
	.align	2, 0
.L1009:
	.word	gUnknown_02022C88
.L1008:
	mov	r1, #0x20
	ldrsh	r0, [r2, r1]
	bl	sub_80207C0
	mov	r0, #0x1
	b	.L1007
.L1004:
	ldr	r0, [r1]
	mov	r4, #0x20
	ldrsh	r0, [r0, r4]
	bl	sub_8020818
	mov	r0, #0x0
.L1007:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe93:
	.size	 sub_8020368,.Lfe93-sub_8020368
	.align	2, 0
	.type	 sub_80203B0,function
	.thumb_func
sub_80203B0:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0xd
	bl	DrawTextBorderOuter
	mov	r5, #0xe
	str	r5, [sp]
	mov	r4, #0x5
	str	r4, [sp, #0x4]
	ldr	r0, .L1012
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x8
	mov	r3, #0x1
	bl	PrintTextArray
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	str	r5, [sp]
	str	r4, [sp, #0x4]
	str	r0, [sp, #0x8]
	mov	r0, #0x3
	mov	r1, #0x2
	mov	r2, #0x0
	mov	r3, #0x1
	bl	sub_81983AC
	mov	r0, #0x3
	bl	PutWindowTilemap
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1013:
	.align	2, 0
.L1012:
	.word	gUnknown_082F2DC8
.Lfe94:
	.size	 sub_80203B0,.Lfe94-sub_80203B0
	.align	2, 0
	.type	 sub_802040C,function
	.thumb_func
sub_802040C:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x0
	bl	ClearStdWindowAndFrameToTransparent
	mov	r0, #0x3
	bl	ClearWindowTilemap
	pop	{r0}
	bx	r0
.Lfe95:
	.size	 sub_802040C,.Lfe95-sub_802040C
	.align	2, 0
	.type	 sub_8020420,function
	.thumb_func
sub_8020420:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	add	r5, r1, #0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r2, r2, #0x18
	add	r3, sp, #0xc
	mov	r1, #0x1
	strb	r1, [r3]
	lsr	r2, r2, #0x17
	add	r1, r2, #0x2
	strb	r1, [r3, #0x1]
	add	r1, r3, #0
	add	r2, r2, #0x3
	strb	r2, [r1, #0x2]
	lsl	r4, r0, #0x4
	sub	r4, r4, r0
	lsl	r3, r4, #0x10
	lsr	r3, r3, #0x10
	mov	r0, #0xa8
	str	r0, [sp]
	mov	r0, #0xf
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x11
	mov	r2, #0x0
	bl	FillWindowPixelRect
	add	r4, r4, #0x1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, sp, #0xc
	str	r0, [sp]
	mov	r0, #0x1
	neg	r0, r0
	str	r0, [sp, #0x4]
	str	r5, [sp, #0x8]
	mov	r0, #0x0
	mov	r1, #0x2
	mov	r2, #0x0
	add	r3, r4, #0
	bl	AddTextPrinterParameterized3
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe96:
	.size	 sub_8020420,.Lfe96-sub_8020420
	.align	2, 0
	.type	 sub_8020480,function
	.thumb_func
sub_8020480:
	push	{lr}
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x1
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x2
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgX
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	ChangeBgY
	mov	r0, #0x0
	bl	ShowBg
	mov	r0, #0x1
	bl	ShowBg
	mov	r0, #0x2
	bl	ShowBg
	mov	r0, #0x3
	bl	ShowBg
	mov	r1, #0x82
	lsl	r1, r1, #0x5
	mov	r0, #0x0
	bl	SetGpuRegBits
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r1, #0xe0
	lsl	r1, r1, #0x8
	mov	r0, #0x0
	bl	ClearGpuRegBits
	mov	r1, #0x80
	lsl	r1, r1, #0x6
	mov	r0, #0x0
	bl	SetGpuRegBits
	ldr	r1, .L1017
	mov	r0, #0x40
	bl	SetGpuReg
	mov	r0, #0x44
	mov	r1, #0x90
	bl	SetGpuReg
	mov	r0, #0x48
	mov	r1, #0x3d
	bl	SetGpuReg
	mov	r0, #0x4a
	mov	r1, #0x3f
	bl	SetGpuReg
	pop	{r0}
	bx	r0
.L1018:
	.align	2, 0
.L1017:
	.word	0x40f0
.Lfe97:
	.size	 sub_8020480,.Lfe97-sub_8020480
	.align	2, 0
	.type	 sub_8020538,function
	.thumb_func
sub_8020538:
	push	{r4, lr}
	ldr	r4, .L1020
	ldr	r1, [r4]
	mov	r0, #0x94
	lsl	r0, r0, #0x1
	add	r1, r1, r0
	mov	r0, #0x0
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L1020+0x4
	add	r1, r1, r0
	mov	r0, #0x1
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L1020+0x8
	add	r1, r1, r0
	mov	r0, #0x3
	bl	SetBgTilemapBuffer
	ldr	r1, [r4]
	ldr	r0, .L1020+0xc
	add	r1, r1, r0
	mov	r0, #0x2
	bl	SetBgTilemapBuffer
	pop	{r4}
	pop	{r0}
	bx	r0
.L1021:
	.align	2, 0
.L1020:
	.word	gUnknown_02022C88
	.word	0x928
	.word	0x1128
	.word	0x1928
.Lfe98:
	.size	 sub_8020538,.Lfe98-sub_8020538
	.align	2, 0
	.type	 sub_8020584,function
	.thumb_func
sub_8020584:
	push	{lr}
	add	sp, sp, #-0x8
	mov	r1, #0xc0
	lsl	r1, r1, #0x13
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x1
	bl	RequestDma3Fill
	mov	r0, #0x20
	str	r0, [sp]
	str	r0, [sp, #0x4]
	mov	r0, #0x0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect_Palette0
	mov	r0, #0x0
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x8
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 sub_8020584,.Lfe99-sub_8020584
	.align	2, 0
	.type	 sub_80205B4,function
	.thumb_func
sub_80205B4:
	push	{lr}
	add	sp, sp, #-0x4
	ldr	r0, .L1024
	mov	r1, #0x70
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r0, .L1024+0x4
	mov	r1, #0xc0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L1024+0x8
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	ldr	r1, .L1024+0xc
	mov	r0, #0x1
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x1
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x4
	pop	{r0}
	bx	r0
.L1025:
	.align	2, 0
.L1024:
	.word	gUnknown_08DD4BD0
	.word	gUnknown_08DD4BB0
	.word	gUnknown_08DD4BF0
	.word	gUnknown_08DD4C4C
.Lfe100:
	.size	 sub_80205B4,.Lfe100-sub_80205B4
	.align	2, 0
	.type	 sub_8020604,function
	.thumb_func
sub_8020604:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	ldr	r0, .L1028
	mov	r1, #0x0
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L1028+0x4
	mov	r0, #0x0
	str	r0, [sp]
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	DecompressAndCopyTileDataToVram
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L1027	@cond_branch
	mov	r1, #0x88
	lsl	r1, r1, #0x2
	add	r0, r5, r1
	ldr	r4, .L1028+0x8
	ldr	r1, [r4]
	ldr	r2, .L1028+0xc
	add	r1, r1, r2
	mov	r2, #0x8
	bl	CpuFastSet
	mov	r1, #0x84
	lsl	r1, r1, #0x3
	add	r0, r5, r1
	ldr	r1, [r4]
	ldr	r2, .L1028+0x10
	add	r1, r1, r2
	mov	r2, #0x8
	bl	CpuFastSet
.L1027:
	ldr	r1, .L1028+0x14
	mov	r0, #0x2
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	mov	r0, #0x2
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1029:
	.align	2, 0
.L1028:
	.word	gLinkMiscMenu_Pal
	.word	gLinkMiscMenu_Gfx
	.word	gUnknown_02022C88
	.word	0x2128
	.word	0x2148
	.word	gLinkMiscMenu_Tilemap
.Lfe101:
	.size	 sub_8020604,.Lfe101-sub_8020604
	.align	2, 0
	.type	 sub_8020680,function
	.thumb_func
sub_8020680:
	push	{lr}
	ldr	r0, .L1031
	mov	r1, #0x80
	mov	r2, #0x20
	bl	LoadPalette
	ldr	r1, .L1031+0x4
	mov	r0, #0x0
	mov	r2, #0x20
	mov	r3, #0x1
	bl	RequestDma3Fill
	pop	{r0}
	bx	r0
.L1032:
	.align	2, 0
.L1031:
	.word	gUnknown_082F2C20
	.word	0x6004020
.Lfe102:
	.size	 sub_8020680,.Lfe102-sub_8020680
	.align	2, 0
	.type	 sub_80206A4,function
	.thumb_func
sub_80206A4:
	push	{lr}
	ldr	r0, .L1034
	mov	r1, #0xf0
	mov	r2, #0x20
	bl	LoadPalette
	mov	r0, #0x0
	bl	PutWindowTilemap
	mov	r0, #0x0
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x0
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.L1035:
	.align	2, 0
.L1034:
	.word	gUnknown_082F2C40
.Lfe103:
	.size	 sub_80206A4,.Lfe103-sub_80206A4
	.align	2, 0
	.type	 sub_80206D0,function
	.thumb_func
sub_80206D0:
	push	{lr}
	mov	r0, #0x2
	bl	PutWindowTilemap
	bl	sub_80201A4
	mov	r0, #0x2
	mov	r1, #0x3
	bl	CopyWindowToVram
	pop	{r0}
	bx	r0
.Lfe104:
	.size	 sub_80206D0,.Lfe104-sub_80206D0
	.align	2, 0
	.type	 sub_80206E8,function
	.thumb_func
sub_80206E8:
	push	{r4, lr}
	add	sp, sp, #-0xc
	add	r1, sp, #0x8
	mov	r0, #0x0
	strb	r0, [r1]
	mov	r0, #0xff
	strb	r0, [r1, #0x1]
	mov	r4, #0x0
.L1041:
	ldr	r0, .L1043
	ldr	r1, [r0]
	ldr	r0, .L1043+0x4
	add	r1, r1, r0
	lsl	r2, r4, #0x13
	lsr	r2, r2, #0x10
	mov	r0, #0x8
	str	r0, [sp]
	mov	r0, #0x10
	str	r0, [sp, #0x4]
	mov	r0, #0x1
	mov	r3, #0x0
	bl	BlitBitmapToWindow
	add	r4, r4, #0x1
	cmp	r4, #0xe
	ble	.L1041	@cond_branch
	mov	r0, #0x1
	mov	r1, #0x0
	bl	FillWindowPixelBuffer
	mov	r0, #0x1
	bl	PutWindowTilemap
	mov	r0, #0x1
	mov	r1, #0x3
	bl	CopyWindowToVram
	add	sp, sp, #0xc
	pop	{r4}
	pop	{r0}
	bx	r0
.L1044:
	.align	2, 0
.L1043:
	.word	gUnknown_02022C88
	.word	0x2128
.Lfe105:
	.size	 sub_80206E8,.Lfe105-sub_80206E8
	.align	2, 0
	.type	 sub_8020740,function
	.thumb_func
sub_8020740:
	push	{lr}
	mov	r0, #0x3
	mov	r1, #0x11
	bl	FillWindowPixelBuffer
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0xd0
	bl	LoadUserWindowBorderGfx
	mov	r0, #0x3
	mov	r1, #0xa
	mov	r2, #0x20
	bl	LoadUserWindowBorderGfx_
	ldr	r0, .L1046
	mov	r1, #0xe0
	mov	r2, #0x20
	bl	LoadPalette
	pop	{r0}
	bx	r0
.L1047:
	.align	2, 0
.L1046:
	.word	gUnknown_0860F074
.Lfe106:
	.size	 sub_8020740,.Lfe106-sub_8020740
	.align	2, 0
	.type	 sub_8020770,function
	.thumb_func
sub_8020770:
	push	{lr}
	add	sp, sp, #-0x10
	ldr	r0, .L1049
	str	r0, [sp, #0x4]
	ldr	r0, .L1049+0x4
	str	r0, [sp]
	mov	r2, sp
	mov	r1, #0x0
	mov	r0, #0x1
	strb	r0, [r2, #0x8]
	mov	r0, sp
	strb	r1, [r0, #0x9]
	ldr	r0, .L1049+0x8
	ldr	r0, [r0]
	strh	r1, [r0, #0x20]
	str	r1, [sp, #0xc]
	add	r0, sp, #0xc
	ldr	r1, .L1049+0xc
	ldr	r2, .L1049+0x10
	bl	CpuFastSet
	ldr	r0, [sp]
	ldr	r1, [sp, #0x4]
	ldr	r2, [sp, #0x8]
	bl	ScanlineEffect_SetParams
	add	sp, sp, #0x10
	pop	{r0}
	bx	r0
.L1050:
	.align	2, 0
.L1049:
	.word	-0x5d9fffff
	.word	0x4000014
	.word	gUnknown_02022C88
	.word	gScanlineEffectRegBuffers
	.word	0x10003c0
.Lfe107:
	.size	 sub_8020770,.Lfe107-sub_8020770
	.align	2, 0
	.type	 sub_80207C0,function
	.thumb_func
sub_80207C0:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, sp
	strh	r0, [r1]
	ldr	r5, .L1052
	ldrb	r0, [r5, #0x14]
	lsl	r1, r0, #0x4
	sub	r1, r1, r0
	lsl	r1, r1, #0x7
	ldr	r4, .L1052+0x4
	add	r1, r1, r4
	ldr	r2, .L1052+0x8
	mov	r0, sp
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x2
	mov	r1, #0x0
	strh	r1, [r0]
	ldrb	r2, [r5, #0x14]
	lsl	r1, r2, #0x4
	sub	r1, r1, r2
	lsl	r1, r1, #0x7
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r4, r4, r2
	add	r1, r1, r4
	ldr	r2, .L1052+0xc
	bl	CpuSet
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1053:
	.align	2, 0
.L1052:
	.word	gScanlineEffect
	.word	gScanlineEffectRegBuffers
	.word	0x1000090
	.word	0x1000010
.Lfe108:
	.size	 sub_80207C0,.Lfe108-sub_80207C0
	.align	2, 0
	.type	 sub_8020818,function
	.thumb_func
sub_8020818:
	push	{r4, r5, r6, lr}
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6}
	add	sp, sp, #-0x8
	add	r4, r0, #0
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	mov	r0, sp
	strh	r4, [r0]
	ldr	r5, .L1055
	ldr	r0, .L1055+0x4
	mov	r9, r0
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, r9
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x2
	mov	r6, #0x0
	strh	r6, [r0]
	mov	r2, #0x90
	lsl	r2, r2, #0x1
	add	r1, r5, r2
	ldr	r2, .L1055+0x8
	mov	r8, r2
	bl	CpuSet
	add	r0, sp, #0x4
	strh	r4, [r0]
	mov	r2, #0xf0
	lsl	r2, r2, #0x3
	add	r1, r5, r2
	mov	r2, r9
	bl	CpuSet
	mov	r0, sp
	add	r0, r0, #0x6
	strh	r6, [r0]
	mov	r1, #0x8a
	lsl	r1, r1, #0x4
	add	r5, r5, r1
	add	r1, r5, #0
	mov	r2, r8
	bl	CpuSet
	add	sp, sp, #0x8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1056:
	.align	2, 0
.L1055:
	.word	gScanlineEffectRegBuffers
	.word	0x1000090
	.word	0x1000010
.Lfe109:
	.size	 sub_8020818,.Lfe109-sub_8020818
	.align	2, 0
	.type	 sub_8020890,function
	.thumb_func
sub_8020890:
	push	{r4, r5, lr}
	mov	r5, #0x0
	ldr	r4, .L1065
.L1061:
	add	r0, r4, #0
	bl	LoadCompressedSpriteSheet
	add	r4, r4, #0x8
	add	r5, r5, #0x1
	cmp	r5, #0x4
	bls	.L1061	@cond_branch
	ldr	r0, .L1065+0x4
	bl	LoadSpritePalette
	ldr	r4, .L1065+0x8
	mov	r0, #0x18
	bl	Alloc
	str	r0, [r4]
	cmp	r0, #0
	beq	.L1063	@cond_branch
	mov	r0, #0x1
	b	.L1064
.L1066:
	.align	2, 0
.L1065:
	.word	gUnknown_082F3134
	.word	gUnknown_082F315C
	.word	gUnknown_02022C8C
.L1063:
	mov	r0, #0x0
.L1064:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe110:
	.size	 sub_8020890,.Lfe110-sub_8020890
	.align	2, 0
	.type	 sub_80208D0,function
	.thumb_func
sub_80208D0:
	push	{lr}
	ldr	r0, .L1069
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L1068	@cond_branch
	bl	Free
.L1068:
	pop	{r0}
	bx	r0
.L1070:
	.align	2, 0
.L1069:
	.word	gUnknown_02022C8C
.Lfe111:
	.size	 sub_80208D0,.Lfe111-sub_80208D0
	.align	2, 0
	.type	 sub_80208E8,function
	.thumb_func
sub_80208E8:
	push	{lr}
	ldr	r0, .L1072
	mov	r1, #0xa
	mov	r2, #0x18
	mov	r3, #0x0
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L1072+0x4
	ldr	r2, [r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r0, .L1072+0x8
	add	r1, r1, r0
	str	r1, [r2]
	pop	{r0}
	bx	r0
.L1073:
	.align	2, 0
.L1072:
	.word	gUnknown_082F319C
	.word	gUnknown_02022C8C
	.word	gSprites
.Lfe112:
	.size	 sub_80208E8,.Lfe112-sub_80208E8
	.align	2, 0
	.type	 sub_802091C,function
	.thumb_func
sub_802091C:
	ldr	r1, .L1075
	ldr	r1, [r1]
	ldr	r2, [r1]
	add	r2, r2, #0x3e
	mov	r1, #0x1
	and	r0, r0, r1
	lsl	r0, r0, #0x2
	ldrb	r3, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r3
	orr	r1, r1, r0
	strb	r1, [r2]
	bx	lr
.L1076:
	.align	2, 0
.L1075:
	.word	gUnknown_02022C8C
.Lfe113:
	.size	 sub_802091C,.Lfe113-sub_802091C
	.align	2, 0
	.type	 sub_802093C,function
	.thumb_func
sub_802093C:
	push	{r4, r5, lr}
	add	sp, sp, #-0x4
	bl	GetCurrentKeyboardPage
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r5, sp
	add	r5, r5, #0x1
	mov	r0, sp
	add	r1, r5, #0
	bl	sub_801F0BC
	cmp	r4, #0x3
	beq	.L1078	@cond_branch
	ldr	r4, .L1081
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
	ldr	r1, [r4]
	ldr	r2, [r1]
	mov	r0, sp
	ldrb	r0, [r0]
	lsl	r0, r0, #0x3
	add	r0, r0, #0xa
	strh	r0, [r2, #0x20]
	ldr	r2, [r1]
	b	.L1080
.L1082:
	.align	2, 0
.L1081:
	.word	gUnknown_02022C8C
.L1078:
	ldr	r4, .L1083
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x2
	bl	StartSpriteAnim
	ldr	r2, [r4]
	ldr	r1, [r2]
	mov	r0, #0x18
	strh	r0, [r1, #0x20]
	ldr	r2, [r2]
.L1080:
	ldrb	r1, [r5]
	lsl	r0, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, #0x18
	strh	r0, [r2, #0x22]
	add	sp, sp, #0x4
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1084:
	.align	2, 0
.L1083:
	.word	gUnknown_02022C8C
.Lfe114:
	.size	 sub_802093C,.Lfe114-sub_802093C
	.align	2, 0
	.type	 sub_80209AC,function
	.thumb_func
sub_80209AC:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x2
	ldr	r0, .L1086
	add	r4, r4, r0
	mov	r0, #0x0
	bl	IndexOfSpritePaletteTag
	add	r1, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x4
	ldr	r0, .L1086+0x4
	add	r1, r1, r0
	lsr	r1, r1, #0x10
	add	r0, r4, #0
	mov	r2, #0x4
	bl	LoadPalette
	pop	{r4}
	pop	{r0}
	bx	r0
.L1087:
	.align	2, 0
.L1086:
	.word	gUnknown_082F2DF0+0x2
	.word	0x1010000
.Lfe115:
	.size	 sub_80209AC,.Lfe115-sub_80209AC
	.align	2, 0
	.type	 sub_80209E0,function
	.thumb_func
sub_80209E0:
	push	{lr}
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L1089	@cond_branch
	ldr	r0, .L1091
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, #0x1
	bl	StartSpriteAnim
	b	.L1090
.L1092:
	.align	2, 0
.L1091:
	.word	gUnknown_02022C8C
.L1089:
	ldr	r0, .L1093
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, #0x3
	bl	StartSpriteAnim
.L1090:
	ldr	r0, .L1093
	ldr	r1, [r0]
	mov	r0, #0x0
	strh	r0, [r1, #0x14]
	pop	{r0}
	bx	r0
.L1094:
	.align	2, 0
.L1093:
	.word	gUnknown_02022C8C
.Lfe116:
	.size	 sub_80209E0,.Lfe116-sub_80209E0
	.align	2, 0
	.type	 sub_8020A1C,function
	.thumb_func
sub_8020A1C:
	push	{r4, lr}
	ldr	r4, .L1102
	ldr	r1, [r4]
	ldrh	r0, [r1, #0x14]
	cmp	r0, #0x3
	bls	.L1096	@cond_branch
.L1101:
	mov	r0, #0x0
	b	.L1100
.L1103:
	.align	2, 0
.L1102:
	.word	gUnknown_02022C8C
.L1096:
	add	r0, r0, #0x1
	strh	r0, [r1, #0x14]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0x3
	bls	.L1097	@cond_branch
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	beq	.L1098	@cond_branch
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x0
	bl	StartSpriteAnim
	b	.L1101
.L1098:
	ldr	r0, [r4]
	ldr	r0, [r0]
	mov	r1, #0x2
	bl	StartSpriteAnim
	b	.L1101
.L1097:
	mov	r0, #0x1
.L1100:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe117:
	.size	 sub_8020A1C,.Lfe117-sub_8020A1C
	.align	2, 0
	.type	 sub_8020A68,function
	.thumb_func
sub_8020A68:
	push	{r4, r5, lr}
	ldr	r0, .L1105
	mov	r1, #0x4c
	mov	r2, #0x98
	mov	r3, #0x2
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L1105+0x4
	ldr	r2, [r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r4, .L1105+0x8
	add	r1, r1, r4
	str	r1, [r2, #0x8]
	ldr	r0, .L1105+0xc
	mov	r1, #0x40
	mov	r2, #0x98
	mov	r3, #0x1
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	str	r1, [r2, #0x4]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1106:
	.align	2, 0
.L1105:
	.word	gUnknown_082F31BC
	.word	gUnknown_02022C8C
	.word	gSprites
	.word	gUnknown_082F31D4
.Lfe118:
	.size	 sub_8020A68,.Lfe118-sub_8020A68
	.align	2, 0
	.type	 sub_8020ABC,function
	.thumb_func
sub_8020ABC:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_801F198
	add	r3, r0, #0
	cmp	r3, #0xf
	bne	.L1108	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x3e
	ldrb	r1, [r0]
	mov	r2, #0x4
	orr	r1, r1, r2
	strb	r1, [r0]
	b	.L1109
.L1108:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r0, [r2]
	mov	r1, #0x5
	neg	r1, r1
	and	r1, r1, r0
	strb	r1, [r2]
	lsl	r0, r3, #0x3
	add	r0, r0, #0x4c
	strh	r0, [r4, #0x20]
.L1109:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe119:
	.size	 sub_8020ABC,.Lfe119-sub_8020ABC
	.align	2, 0
	.type	 sub_8020AF4,function
	.thumb_func
sub_8020AF4:
	push	{lr}
	add	r1, r0, #0
	ldrh	r0, [r1, #0x2e]
	add	r0, r0, #0x1
	mov	r2, #0x0
	strh	r0, [r1, #0x2e]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L1111	@cond_branch
	strh	r2, [r1, #0x2e]
	ldrh	r0, [r1, #0x24]
	add	r0, r0, #0x1
	strh	r0, [r1, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x4
	ble	.L1111	@cond_branch
	strh	r2, [r1, #0x24]
.L1111:
	pop	{r0}
	bx	r0
.Lfe120:
	.size	 sub_8020AF4,.Lfe120-sub_8020AF4
	.align	2, 0
	.type	 sub_8020B20,function
	.thumb_func
sub_8020B20:
	push	{r4, r5, lr}
	ldr	r0, .L1114
	mov	r1, #0x8
	mov	r2, #0x98
	mov	r3, #0x3
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r5, .L1114+0x4
	ldr	r2, [r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	ldr	r4, .L1114+0x8
	add	r1, r1, r4
	str	r1, [r2, #0xc]
	ldr	r0, .L1114+0xc
	mov	r1, #0x20
	mov	r2, #0x98
	mov	r3, #0x4
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, [r5]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	str	r1, [r2, #0x10]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L1115:
	.align	2, 0
.L1114:
	.word	gUnknown_082F322C
	.word	gUnknown_02022C8C
	.word	gSprites
	.word	gUnknown_082F3244
.Lfe121:
	.size	 sub_8020B20,.Lfe121-sub_8020B20
	.align	2, 0
	.type	 sub_8020B80,function
	.thumb_func
sub_8020B80:
	push	{r4, lr}
	bl	GetCurrentKeyboardPage
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x3
	bne	.L1117	@cond_branch
	bl	sub_801F0DC
	cmp	r0, #0
	beq	.L1123	@cond_branch
	ldr	r3, .L1124
	ldr	r0, [r3]
	ldr	r1, [r0, #0x10]
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x10]
	mov	r1, #0x3
	bl	StartSpriteAnim
	b	.L1120
.L1125:
	.align	2, 0
.L1124:
	.word	gUnknown_02022C8C
.L1117:
	bl	sub_801F1A4
	add	r4, r0, #0
	cmp	r4, #0x3
	bne	.L1121	@cond_branch
.L1123:
	ldr	r0, .L1126
	ldr	r0, [r0]
	ldr	r1, [r0, #0x10]
	add	r1, r1, #0x3e
	ldrb	r0, [r1]
	mov	r2, #0x4
	orr	r0, r0, r2
	strb	r0, [r1]
	b	.L1120
.L1127:
	.align	2, 0
.L1126:
	.word	gUnknown_02022C8C
.L1121:
	ldr	r3, .L1128
	ldr	r0, [r3]
	ldr	r1, [r0, #0x10]
	add	r1, r1, #0x3e
	ldrb	r2, [r1]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	strb	r0, [r1]
	ldr	r0, [r3]
	ldr	r0, [r0, #0x10]
	lsl	r1, r4, #0x18
	lsr	r1, r1, #0x18
	bl	StartSpriteAnim
.L1120:
	pop	{r4}
	pop	{r0}
	bx	r0
.L1129:
	.align	2, 0
.L1128:
	.word	gUnknown_02022C8C
.Lfe122:
	.size	 sub_8020B80,.Lfe122-sub_8020B80
.text
	.align	2, 0

