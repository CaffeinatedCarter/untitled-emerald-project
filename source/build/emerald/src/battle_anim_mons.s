@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section ewram_data,"aw"
	.align	2, 0
	.type	 gAnimTaskAffineAnim,object
	.size	 gAnimTaskAffineAnim,4
gAnimTaskAffineAnim:
	.word	0x0
	.section .rodata
	.align	2, 0
	.type	 sBattlerCoords,object
sBattlerCoords:
	.byte	0x48
	.byte	0x50
	.space	2
	.byte	0xb0
	.byte	0x28
	.space	2
	.byte	0x30
	.byte	0x28
	.space	2
	.byte	0x70
	.byte	0x50
	.space	2
	.byte	0x20
	.byte	0x50
	.space	2
	.byte	0xc8
	.byte	0x28
	.space	2
	.byte	0x5a
	.byte	0x58
	.space	2
	.byte	0x98
	.byte	0x20
	.space	2
	.size	 sBattlerCoords,32
	.globl	gCastformFrontSpriteCoords
	.align	2, 0
	.type	 gCastformFrontSpriteCoords,object
gCastformFrontSpriteCoords:
	.byte	0x44
	.byte	0x11
	.space	2
	.byte	0x66
	.byte	0x9
	.space	2
	.byte	0x46
	.byte	0x9
	.space	2
	.byte	0x86
	.byte	0x8
	.space	2
	.size	 gCastformFrontSpriteCoords,16
	.type	 sCastformElevations,object
sCastformElevations:
	.byte	0xd
	.byte	0xe
	.byte	0xd
	.byte	0xd
	.size	 sCastformElevations,4
	.type	 sCastformBackSpriteYCoords,object
sCastformBackSpriteYCoords:
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.byte	0x0
	.size	 sCastformBackSpriteYCoords,4
	.align	2, 0
	.type	 sUnknown_08525F90,object
sUnknown_08525F90:
	.short	0xd755
	.short	0xd755
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.short	0xd756
	.short	0xd756
	.word	gOamData_AffineNormal_ObjNormal_64x64
	.word	gDummySpriteAnimTable
	.word	0x0
	.word	gDummySpriteAffineAnimTable
	.word	SpriteCallbackDummy
	.size	 sUnknown_08525F90,48
	.align	2, 0
	.type	 sUnknown_08525FC0,object
sUnknown_08525FC0:
	.word	gMiscBlank_Gfx
	.short	0x800
	.short	0xd755
	.word	gMiscBlank_Gfx
	.short	0x800
	.short	0xd756
	.size	 sUnknown_08525FC0,16
.text
	.align	2, 0
	.globl	GetBattlerSpriteCoord
	.type	 GetBattlerSpriteCoord,function
	.thumb_func
GetBattlerSpriteCoord:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r4, r1, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L3	@cond_branch
	cmp	r4, #0x3
	bne	.L3	@cond_branch
	cmp	r5, #0x3
	bne	.L3	@cond_branch
	mov	r4, #0x1
.L3:
	cmp	r4, #0x4
	bhi	.L11	@cond_branch
	lsl	r0, r4, #0x2
	ldr	r1, .L27
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L28:
	.align	2, 0
.L27:
	.word	.L24
	.align	2, 0
	.align	2, 0
.L24:
	.word	.L7
	.word	.L8
	.word	.L7
	.word	.L11
	.word	.L11
.L7:
	ldr	r4, .L29
	add	r0, r5, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L29+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0]
	b	.L5
.L30:
	.align	2, 0
.L29:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.L8:
	ldr	r4, .L31
	add	r0, r5, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L31+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r4
	ldrb	r0, [r0, #0x1]
	b	.L5
.L32:
	.align	2, 0
.L31:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.L11:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L12	@cond_branch
	ldr	r0, .L33
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L13	@cond_branch
	ldrh	r1, [r2, #0x2]
	b	.L15
.L34:
	.align	2, 0
.L33:
	.word	gContestResources
.L13:
	ldrh	r1, [r2]
	b	.L15
.L12:
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L16	@cond_branch
	ldr	r0, .L35
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r1, .L35+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L35+0x8
	b	.L25
.L36:
	.align	2, 0
.L35:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L16:
	ldr	r0, .L37
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L20	@cond_branch
	ldr	r1, .L37+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L37+0x8
.L25:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
	b	.L15
.L38:
	.align	2, 0
.L37:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L20:
	ldrh	r1, [r1, #0x2]
.L15:
	cmp	r4, #0x3
	bne	.L22	@cond_branch
	add	r0, r5, #0
	mov	r2, #0x1
	b	.L26
.L22:
	add	r0, r5, #0
	mov	r2, #0x0
.L26:
	bl	GetBattlerSpriteFinal_Y
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L5:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe1:
	.size	 GetBattlerSpriteCoord,.Lfe1-GetBattlerSpriteCoord
	.align	2, 0
	.globl	GetBattlerYDelta
	.type	 GetBattlerYDelta,function
	.thumb_func
GetBattlerYDelta:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L41	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.LCB254
	b	.L40	@long jump
.LCB254:
.L41:
	cmp	r5, #0xc9
	bne	.L42	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L43	@cond_branch
	ldr	r0, .L70
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L44	@cond_branch
	ldr	r2, [r2, #0x10]
	b	.L46
.L71:
	.align	2, 0
.L70:
	.word	gContestResources
.L44:
	ldr	r2, [r2, #0x8]
	b	.L46
.L43:
	ldr	r0, .L72
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r4, #0x2
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L47	@cond_branch
	ldr	r1, .L72+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L72+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L46
.L73:
	.align	2, 0
.L72:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L47:
	ldr	r0, .L74
	add	r0, r1, r0
	ldr	r2, [r0]
.L46:
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L49	@cond_branch
	add	r0, r5, #0
	b	.L50
.L75:
	.align	2, 0
.L74:
	.word	gTransformedPersonalities
.L49:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L50:
	ldr	r1, .L76
	lsl	r0, r0, #0x2
	b	.L67
.L77:
	.align	2, 0
.L76:
	.word	gMonBackPicCoords
.L42:
	ldr	r0, .L78
	cmp	r5, r0
	bne	.L52	@cond_branch
	ldr	r0, .L78+0x4
	ldr	r1, .L78+0x8
	add	r1, r4, r1
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L56
.L79:
	.align	2, 0
.L78:
	.word	0x181
	.word	sCastformBackSpriteYCoords
	.word	gBattleMonForms
.L52:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	bls	.L54	@cond_branch
	ldr	r0, .L80
	b	.L68
.L81:
	.align	2, 0
.L80:
	.word	gMonBackPicCoords
.L54:
	ldr	r1, .L82
	b	.L69
.L83:
	.align	2, 0
.L82:
	.word	gMonBackPicCoords
.L40:
	cmp	r5, #0xc9
	bne	.L57	@cond_branch
	ldr	r0, .L84
	ldr	r0, [r0]
	ldr	r0, [r0]
	lsl	r1, r4, #0x2
	add	r0, r1, r0
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	bne	.L58	@cond_branch
	ldr	r1, .L84+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L84+0x8
	add	r0, r0, r1
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L59
.L85:
	.align	2, 0
.L84:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L58:
	ldr	r0, .L86
	add	r0, r1, r0
	ldr	r2, [r0]
.L59:
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L60	@cond_branch
	add	r0, r5, #0
	b	.L61
.L87:
	.align	2, 0
.L86:
	.word	gTransformedPersonalities
.L60:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L61:
	ldr	r1, .L88
	lsl	r0, r0, #0x2
	b	.L67
.L89:
	.align	2, 0
.L88:
	.word	gMonFrontPicCoords
.L57:
	ldr	r0, .L90
	cmp	r5, r0
	bne	.L63	@cond_branch
	ldr	r0, .L90+0x4
	ldr	r1, .L90+0x8
	add	r1, r4, r1
	ldrb	r1, [r1]
	lsl	r1, r1, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L56
.L91:
	.align	2, 0
.L90:
	.word	0x181
	.word	gCastformFrontSpriteCoords
	.word	gBattleMonForms
.L63:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r5, r0
	bls	.L65	@cond_branch
	ldr	r0, .L92
	b	.L68
.L93:
	.align	2, 0
.L92:
	.word	gMonFrontPicCoords
.L65:
	ldr	r1, .L94
.L69:
	lsl	r0, r5, #0x2
.L67:
	add	r0, r0, r1
.L68:
	ldrb	r0, [r0, #0x1]
.L56:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L95:
	.align	2, 0
.L94:
	.word	gMonFrontPicCoords
.Lfe2:
	.size	 GetBattlerYDelta,.Lfe2-GetBattlerYDelta
	.align	2, 0
	.globl	GetBattlerElevation
	.type	 GetBattlerElevation,function
	.thumb_func
GetBattlerElevation:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r4, r1, #0x10
	add	r7, r4, #0
	mov	r5, #0x0
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L97	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L97	@cond_branch
	ldr	r0, .L104
	cmp	r4, r0
	bne	.L99	@cond_branch
	ldr	r0, .L104+0x4
	ldr	r1, .L104+0x8
	add	r1, r6, r1
	ldrb	r1, [r1]
	add	r1, r1, r0
	ldrb	r5, [r1]
	b	.L97
.L105:
	.align	2, 0
.L104:
	.word	0x181
	.word	sCastformElevations
	.word	gBattleMonForms
.L99:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r4, r0
	bls	.L101	@cond_branch
	ldr	r0, .L106
	b	.L103
.L107:
	.align	2, 0
.L106:
	.word	gEnemyMonElevation
.L101:
	ldr	r0, .L108
	add	r0, r7, r0
.L103:
	ldrb	r5, [r0]
.L97:
	add	r0, r5, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L109:
	.align	2, 0
.L108:
	.word	gEnemyMonElevation
.Lfe3:
	.size	 GetBattlerElevation,.Lfe3-GetBattlerElevation
	.align	2, 0
	.globl	GetBattlerSpriteFinal_Y
	.type	 GetBattlerSpriteFinal_Y,function
	.thumb_func
GetBattlerSpriteFinal_Y:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L112	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L111	@cond_branch
.L112:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetBattlerYDelta
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	b	.L113
.L111:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetBattlerYDelta
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r6, #0
	add	r1, r5, #0
	bl	GetBattlerElevation
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	sub	r0, r4, r0
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
.L113:
	add	r0, r6, #0
	bl	GetBattlerPosition
	ldr	r3, .L117
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x16
	ldr	r1, .L117+0x4
	ldr	r1, [r1]
	mov	r2, #0x1
	and	r1, r1, r2
	lsl	r1, r1, #0x4
	add	r0, r0, r1
	add	r0, r0, r3
	ldrb	r0, [r0, #0x1]
	add	r0, r0, r4
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	cmp	r7, #0
	beq	.L114	@cond_branch
	add	r0, r6, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L115	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x8
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
.L115:
	cmp	r4, #0x68
	bls	.L114	@cond_branch
	mov	r4, #0x68
.L114:
	add	r0, r4, #0
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L118:
	.align	2, 0
.L117:
	.word	sBattlerCoords
	.word	gBattleTypeFlags
.Lfe4:
	.size	 GetBattlerSpriteFinal_Y,.Lfe4-GetBattlerSpriteFinal_Y
	.align	2, 0
	.globl	GetBattlerSpriteCoord2
	.type	 GetBattlerSpriteCoord2,function
	.thumb_func
GetBattlerSpriteCoord2:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r5, r1, #0x18
	mov	r0, #0xfd
	lsl	r0, r0, #0x18
	add	r1, r1, r0
	lsr	r1, r1, #0x18
	cmp	r1, #0x1
	bhi	.L120	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L121	@cond_branch
	ldr	r0, .L134
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L122	@cond_branch
	ldrh	r1, [r2, #0x2]
	b	.L124
.L135:
	.align	2, 0
.L134:
	.word	gContestResources
.L122:
	ldrh	r1, [r2]
	b	.L124
.L121:
	ldr	r0, .L136
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r4, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L125	@cond_branch
	ldr	r1, .L136+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	b	.L124
.L137:
	.align	2, 0
.L136:
	.word	gBattleSpritesDataPtr
	.word	gAnimBattlerSpecies
.L125:
	ldrh	r1, [r1, #0x2]
.L124:
	cmp	r5, #0x3
	bne	.L127	@cond_branch
	add	r0, r4, #0
	mov	r2, #0x1
	bl	GetBattlerSpriteFinal_Y
	b	.L132
.L127:
	add	r0, r4, #0
	mov	r2, #0x0
	bl	GetBattlerSpriteFinal_Y
	b	.L132
.L120:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetBattlerSpriteCoord
.L132:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe5:
	.size	 GetBattlerSpriteCoord2,.Lfe5-GetBattlerSpriteCoord2
	.align	2, 0
	.globl	GetBattlerSpriteDefault_Y
	.type	 GetBattlerSpriteDefault_Y,function
	.thumb_func
GetBattlerSpriteDefault_Y:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x4
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe6:
	.size	 GetBattlerSpriteDefault_Y,.Lfe6-GetBattlerSpriteDefault_Y
	.align	2, 0
	.globl	GetSubstituteSpriteDefault_Y
	.type	 GetSubstituteSpriteDefault_Y,function
	.thumb_func
GetSubstituteSpriteDefault_Y:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L140	@cond_branch
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0x80
	lsl	r1, r1, #0xd
	b	.L142
.L140:
	add	r0, r4, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x8
	mov	r1, #0x88
	lsl	r1, r1, #0xd
.L142:
	add	r0, r0, r1
	lsr	r0, r0, #0x10
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe7:
	.size	 GetSubstituteSpriteDefault_Y,.Lfe7-GetSubstituteSpriteDefault_Y
	.align	2, 0
	.globl	GetBattlerYCoordWithElevation
	.type	 GetBattlerYCoordWithElevation,function
	.thumb_func
GetBattlerYCoordWithElevation:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r5, #0
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L144	@cond_branch
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L145	@cond_branch
	ldr	r0, .L153
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L149	@cond_branch
	ldr	r1, .L153+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L153+0x8
	b	.L152
.L154:
	.align	2, 0
.L153:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L145:
	ldr	r0, .L155
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L149	@cond_branch
	ldr	r1, .L155+0x4
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L155+0x8
.L152:
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	b	.L148
.L156:
	.align	2, 0
.L155:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L149:
	ldrh	r4, [r1, #0x2]
.L148:
	add	r0, r5, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L144	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	GetBattlerElevation
	sub	r0, r6, r0
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
.L144:
	add	r0, r6, #0
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe8:
	.size	 GetBattlerYCoordWithElevation,.Lfe8-GetBattlerYCoordWithElevation
	.align	2, 0
	.globl	GetAnimBattlerSpriteId
	.type	 GetAnimBattlerSpriteId,function
	.thumb_func
GetAnimBattlerSpriteId:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	cmp	r0, #0
	bne	.L158	@cond_branch
	ldr	r4, .L178
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L175	@cond_branch
	ldr	r1, .L178+0x4
	ldrb	r0, [r4]
	b	.L174
.L179:
	.align	2, 0
.L178:
	.word	gBattleAnimAttacker
	.word	gBattlerSpriteIds
.L158:
	cmp	r0, #0x1
	bne	.L162	@cond_branch
	ldr	r4, .L180
	ldrb	r0, [r4]
	bl	IsBattlerSpritePresent
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L175	@cond_branch
	ldr	r1, .L180+0x4
	ldrb	r0, [r4]
	b	.L174
.L181:
	.align	2, 0
.L180:
	.word	gBattleAnimTarget
	.word	gBattlerSpriteIds
.L162:
	cmp	r1, #0x2
	bne	.L166	@cond_branch
	ldr	r5, .L182
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L175	@cond_branch
	b	.L170
.L183:
	.align	2, 0
.L182:
	.word	gBattleAnimAttacker
.L166:
	ldr	r5, .L184
	ldrb	r0, [r5]
	mov	r4, #0x2
	eor	r0, r0, r4
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L170	@cond_branch
.L175:
	mov	r0, #0xff
	b	.L172
.L185:
	.align	2, 0
.L184:
	.word	gBattleAnimTarget
.L170:
	ldr	r1, .L186
	ldrb	r0, [r5]
	eor	r0, r0, r4
.L174:
	add	r0, r0, r1
	ldrb	r0, [r0]
.L172:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L187:
	.align	2, 0
.L186:
	.word	gBattlerSpriteIds
.Lfe9:
	.size	 GetAnimBattlerSpriteId,.Lfe9-GetAnimBattlerSpriteId
	.align	2, 0
	.globl	StoreSpriteCallbackInData6
	.type	 StoreSpriteCallbackInData6,function
	.thumb_func
StoreSpriteCallbackInData6:
	strh	r1, [r0, #0x3a]
	lsr	r1, r1, #0x10
	strh	r1, [r0, #0x3c]
	bx	lr
.Lfe10:
	.size	 StoreSpriteCallbackInData6,.Lfe10-StoreSpriteCallbackInData6
	.align	2, 0
	.globl	SetCallbackToStoredInData6
	.type	 SetCallbackToStoredInData6,function
	.thumb_func
SetCallbackToStoredInData6:
	ldrh	r2, [r0, #0x3a]
	mov	r3, #0x3c
	ldrsh	r1, [r0, r3]
	lsl	r1, r1, #0x10
	orr	r2, r2, r1
	str	r2, [r0, #0x1c]
	bx	lr
.Lfe11:
	.size	 SetCallbackToStoredInData6,.Lfe11-SetCallbackToStoredInData6
	.align	2, 0
	.globl	TranslateSpriteInCircleOverDuration
	.type	 TranslateSpriteInCircleOverDuration,function
	.thumb_func
TranslateSpriteInCircleOverDuration:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L191	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L192	@cond_branch
	ldr	r2, .L197
	b	.L196
.L198:
	.align	2, 0
.L197:
	.word	-0x100
.L192:
	cmp	r0, #0
	bge	.L193	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L196:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L193:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L195
.L191:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L195:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe12:
	.size	 TranslateSpriteInCircleOverDuration,.Lfe12-TranslateSpriteInCircleOverDuration
	.align	2, 0
	.globl	TranslateSpriteInGrowingCircleOverDuration
	.type	 TranslateSpriteInGrowingCircleOverDuration,function
	.thumb_func
TranslateSpriteInGrowingCircleOverDuration:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L200	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	ldrh	r1, [r4, #0x38]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	ldrh	r2, [r4, #0x30]
	add	r1, r1, r2
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x36]
	ldrh	r2, [r4, #0x38]
	add	r0, r0, r2
	strh	r0, [r4, #0x38]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L201	@cond_branch
	ldr	r2, .L206
	b	.L205
.L207:
	.align	2, 0
.L206:
	.word	-0x100
.L201:
	cmp	r0, #0
	bge	.L202	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L205:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L202:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L204
.L200:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L204:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe13:
	.size	 TranslateSpriteInGrowingCircleOverDuration,.Lfe13-TranslateSpriteInGrowingCircleOverDuration
	.align	2, 0
	.globl	sub_80A63C8
	.type	 sub_80A63C8,function
	.thumb_func
sub_80A63C8:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L209	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	ldrh	r0, [r4, #0x38]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L210	@cond_branch
	ldr	r2, .L219
	b	.L217
.L220:
	.align	2, 0
.L219:
	.word	-0x100
.L210:
	cmp	r0, #0
	bge	.L211	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L217:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L211:
	ldrh	r1, [r4, #0x36]
	mov	r2, #0x36
	ldrsh	r0, [r4, r2]
	cmp	r0, #0xff
	ble	.L213	@cond_branch
	ldr	r2, .L221
	b	.L218
.L222:
	.align	2, 0
.L221:
	.word	-0x100
.L213:
	cmp	r0, #0
	bge	.L214	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L218:
	add	r0, r1, r2
	strh	r0, [r4, #0x36]
.L214:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L216
.L209:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L216:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe14:
	.size	 sub_80A63C8,.Lfe14-sub_80A63C8
	.align	2, 0
	.globl	TranslateSpriteInEllipseOverDuration
	.type	 TranslateSpriteInEllipseOverDuration,function
	.thumb_func
TranslateSpriteInEllipseOverDuration:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x34
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L224	@cond_branch
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	bl	Sin
	strh	r0, [r4, #0x24]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x36
	ldrsh	r1, [r4, r2]
	bl	Cos
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x2e]
	add	r1, r0, r2
	strh	r1, [r4, #0x2e]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0xff
	ble	.L225	@cond_branch
	ldr	r2, .L230
	b	.L229
.L231:
	.align	2, 0
.L230:
	.word	-0x100
.L225:
	cmp	r0, #0
	bge	.L226	@cond_branch
	mov	r2, #0x80
	lsl	r2, r2, #0x1
.L229:
	add	r0, r1, r2
	strh	r0, [r4, #0x2e]
.L226:
	ldrh	r0, [r4, #0x34]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x34]
	b	.L228
.L224:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L228:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe15:
	.size	 TranslateSpriteInEllipseOverDuration,.Lfe15-TranslateSpriteInEllipseOverDuration
	.align	2, 0
	.globl	WaitAnimForDuration
	.type	 WaitAnimForDuration,function
	.thumb_func
WaitAnimForDuration:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	ble	.L233	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x2e]
	b	.L234
.L233:
	add	r0, r1, #0
	bl	SetCallbackToStoredInData6
.L234:
	pop	{r0}
	bx	r0
.Lfe16:
	.size	 WaitAnimForDuration,.Lfe16-WaitAnimForDuration
	.align	2, 0
	.type	 sub_80A64D0,function
	.thumb_func
sub_80A64D0:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_80A64EC
	ldr	r1, .L236
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L237:
	.align	2, 0
.L236:
	.word	TranslateSpriteLinear
.Lfe17:
	.size	 sub_80A64D0,.Lfe17-sub_80A64D0
	.align	2, 0
	.globl	sub_80A64EC
	.type	 sub_80A64EC,function
	.thumb_func
sub_80A64EC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	mov	r0, #0x30
	ldrsh	r1, [r4, r0]
	mov	r2, #0x32
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	ble	.L239	@cond_branch
	ldrh	r0, [r4, #0x2e]
	neg	r0, r0
	strh	r0, [r4, #0x2e]
.L239:
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r2, #0x30
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	ldrh	r5, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	cmp	r0, #0
	bge	.L240	@cond_branch
	neg	r0, r0
.L240:
	strh	r0, [r4, #0x2e]
	mov	r1, #0x36
	ldrsh	r0, [r4, r1]
	mov	r2, #0x34
	ldrsh	r1, [r4, r2]
	sub	r0, r0, r1
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x32]
	strh	r5, [r4, #0x30]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe18:
	.size	 sub_80A64EC,.Lfe18-sub_80A64EC
	.align	2, 0
	.globl	TranslateSpriteLinear
	.type	 TranslateSpriteLinear,function
	.thumb_func
TranslateSpriteLinear:
	push	{lr}
	add	r1, r0, #0
	ldrh	r2, [r1, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r1, r3]
	cmp	r0, #0
	ble	.L242	@cond_branch
	sub	r0, r2, #0x1
	strh	r0, [r1, #0x2e]
	ldrh	r0, [r1, #0x30]
	ldrh	r2, [r1, #0x24]
	add	r0, r0, r2
	strh	r0, [r1, #0x24]
	ldrh	r0, [r1, #0x32]
	ldrh	r3, [r1, #0x26]
	add	r0, r0, r3
	strh	r0, [r1, #0x26]
	b	.L243
.L242:
	add	r0, r1, #0
	bl	SetCallbackToStoredInData6
.L243:
	pop	{r0}
	bx	r0
.Lfe19:
	.size	 TranslateSpriteLinear,.Lfe19-TranslateSpriteLinear
	.align	2, 0
	.globl	TranslateSpriteLinearFixedPoint
	.type	 TranslateSpriteLinearFixedPoint,function
	.thumb_func
TranslateSpriteLinearFixedPoint:
	push	{lr}
	add	r2, r0, #0
	ldrh	r1, [r2, #0x2e]
	mov	r3, #0x2e
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	ble	.L245	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r2, #0x2e]
	ldrh	r0, [r2, #0x30]
	ldrh	r1, [r2, #0x34]
	add	r0, r0, r1
	strh	r0, [r2, #0x34]
	ldrh	r1, [r2, #0x32]
	ldrh	r3, [r2, #0x36]
	add	r1, r1, r3
	strh	r1, [r2, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r2, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r2, #0x26]
	b	.L246
.L245:
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L246:
	pop	{r0}
	bx	r0
.Lfe20:
	.size	 TranslateSpriteLinearFixedPoint,.Lfe20-TranslateSpriteLinearFixedPoint
	.align	2, 0
	.type	 TranslateSpriteLinearFixedPointIconFrame,function
	.thumb_func
TranslateSpriteLinearFixedPointIconFrame:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L248	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r4, #0x30]
	ldrh	r1, [r4, #0x34]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldrh	r1, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r1, r1, r2
	strh	r1, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r4, #0x26]
	b	.L249
.L248:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L249:
	add	r0, r4, #0
	bl	UpdateMonIconFrame
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe21:
	.size	 TranslateSpriteLinearFixedPointIconFrame,.Lfe21-TranslateSpriteLinearFixedPointIconFrame
	.align	2, 0
	.globl	sub_80A65EC
	.type	 sub_80A65EC,function
	.thumb_func
sub_80A65EC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldr	r5, .L251
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L251+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L252:
	.align	2, 0
.L251:
	.word	gBattleAnimTarget
	.word	sub_80A64D0
.Lfe22:
	.size	 sub_80A65EC,.Lfe22-sub_80A65EC
	.align	2, 0
	.globl	TranslateMonSpriteLinear
	.type	 TranslateMonSpriteLinear,function
	.thumb_func
TranslateMonSpriteLinear:
	push	{r4, lr}
	add	r3, r0, #0
	ldrh	r1, [r3, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r3, r2]
	cmp	r0, #0
	ble	.L254	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r3, #0x2e]
	ldr	r2, .L256
	mov	r4, #0x34
	ldrsh	r1, [r3, r4]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x30]
	ldrh	r4, [r0, #0x24]
	add	r1, r1, r4
	strh	r1, [r0, #0x24]
	mov	r0, #0x34
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r3, #0x32]
	ldrh	r2, [r0, #0x26]
	add	r1, r1, r2
	strh	r1, [r0, #0x26]
	b	.L255
.L257:
	.align	2, 0
.L256:
	.word	gSprites
.L254:
	add	r0, r3, #0
	bl	SetCallbackToStoredInData6
.L255:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe23:
	.size	 TranslateMonSpriteLinear,.Lfe23-TranslateMonSpriteLinear
	.align	2, 0
	.globl	TranslateMonSpriteLinearFixedPoint
	.type	 TranslateMonSpriteLinearFixedPoint,function
	.thumb_func
TranslateMonSpriteLinearFixedPoint:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L259	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x30]
	ldrh	r0, [r4, #0x34]
	add	r1, r1, r0
	strh	r1, [r4, #0x34]
	ldrh	r0, [r4, #0x32]
	ldrh	r2, [r4, #0x36]
	add	r0, r0, r2
	strh	r0, [r4, #0x36]
	ldr	r3, .L261
	mov	r0, #0x38
	ldrsh	r2, [r4, r0]
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x18
	strh	r1, [r0, #0x24]
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	ldrh	r0, [r4, #0x36]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r1, #0x26]
	b	.L260
.L262:
	.align	2, 0
.L261:
	.word	gSprites
.L259:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L260:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe24:
	.size	 TranslateMonSpriteLinearFixedPoint,.Lfe24-TranslateMonSpriteLinearFixedPoint
	.align	2, 0
	.globl	TranslateSpriteLinearAndFlicker
	.type	 TranslateSpriteLinearAndFlicker,function
	.thumb_func
TranslateSpriteLinearAndFlicker:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x2e]
	mov	r2, #0x2e
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	ble	.L264	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x24]
	ldrh	r0, [r4, #0x30]
	add	r1, r1, r0
	strh	r1, [r4, #0x32]
	ldrh	r1, [r4, #0x36]
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x18
	strh	r0, [r4, #0x26]
	ldrh	r0, [r4, #0x34]
	add	r1, r1, r0
	strh	r1, [r4, #0x36]
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	__modsi3
	cmp	r0, #0
	bne	.L267	@cond_branch
	mov	r1, #0x38
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	beq	.L267	@cond_branch
	add	r3, r4, #0
	add	r3, r3, #0x3e
	ldrb	r2, [r3]
	lsl	r0, r2, #0x1d
	lsr	r0, r0, #0x1f
	mov	r1, #0x1
	eor	r1, r1, r0
	lsl	r1, r1, #0x2
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3]
	b	.L267
.L264:
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L267:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe25:
	.size	 TranslateSpriteLinearAndFlicker,.Lfe25-TranslateSpriteLinearAndFlicker
	.align	2, 0
	.globl	DestroySpriteAndMatrix
	.type	 DestroySpriteAndMatrix,function
	.thumb_func
DestroySpriteAndMatrix:
	push	{r4, lr}
	add	r4, r0, #0
	bl	FreeSpriteOamMatrix
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe26:
	.size	 DestroySpriteAndMatrix,.Lfe26-DestroySpriteAndMatrix
	.align	2, 0
	.globl	sub_80A6760
	.type	 sub_80A6760,function
	.thumb_func
sub_80A6760:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x24]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x26]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x34]
	ldr	r5, .L270
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r4, #0x36]
	ldr	r0, .L270+0x4
	str	r0, [r4, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L271:
	.align	2, 0
.L270:
	.word	gBattleAnimAttacker
	.word	sub_80A64D0
.Lfe27:
	.size	 sub_80A6760,.Lfe27-sub_80A6760
	.align	2, 0
	.globl	sub_80A67A4
	.type	 sub_80A67A4,function
	.thumb_func
sub_80A67A4:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x38]
	bl	ResetPaletteStructByUid
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe28:
	.size	 sub_80A67A4,.Lfe28-sub_80A67A4
	.align	2, 0
	.globl	RunStoredCallbackWhenAffineAnimEnds
	.type	 RunStoredCallbackWhenAffineAnimEnds,function
	.thumb_func
RunStoredCallbackWhenAffineAnimEnds:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x20
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L274	@cond_branch
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L274:
	pop	{r0}
	bx	r0
.Lfe29:
	.size	 RunStoredCallbackWhenAffineAnimEnds,.Lfe29-RunStoredCallbackWhenAffineAnimEnds
	.align	2, 0
	.globl	RunStoredCallbackWhenAnimEnds
	.type	 RunStoredCallbackWhenAnimEnds,function
	.thumb_func
RunStoredCallbackWhenAnimEnds:
	push	{lr}
	add	r2, r0, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x10
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L276	@cond_branch
	add	r0, r2, #0
	bl	SetCallbackToStoredInData6
.L276:
	pop	{r0}
	bx	r0
.Lfe30:
	.size	 RunStoredCallbackWhenAnimEnds,.Lfe30-RunStoredCallbackWhenAnimEnds
	.align	2, 0
	.globl	DestroyAnimSpriteAndDisableBlend
	.type	 DestroyAnimSpriteAndDisableBlend,function
	.thumb_func
DestroyAnimSpriteAndDisableBlend:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimSprite
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe31:
	.size	 DestroyAnimSpriteAndDisableBlend,.Lfe31-DestroyAnimSpriteAndDisableBlend
	.align	2, 0
	.globl	DestroyAnimVisualTaskAndDisableBlend
	.type	 DestroyAnimVisualTaskAndDisableBlend,function
	.thumb_func
DestroyAnimVisualTaskAndDisableBlend:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x50
	mov	r1, #0x0
	bl	SetGpuReg
	mov	r0, #0x52
	mov	r1, #0x0
	bl	SetGpuReg
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe32:
	.size	 DestroyAnimVisualTaskAndDisableBlend,.Lfe32-DestroyAnimVisualTaskAndDisableBlend
	.align	2, 0
	.globl	SetSpriteCoordsToAnimAttackerCoords
	.type	 SetSpriteCoordsToAnimAttackerCoords,function
	.thumb_func
SetSpriteCoordsToAnimAttackerCoords:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L280
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L281:
	.align	2, 0
.L280:
	.word	gBattleAnimAttacker
.Lfe33:
	.size	 SetSpriteCoordsToAnimAttackerCoords,.Lfe33-SetSpriteCoordsToAnimAttackerCoords
	.align	2, 0
	.globl	SetAnimSpriteInitialXOffset
	.type	 SetAnimSpriteInitialXOffset,function
	.thumb_func
SetAnimSpriteInitialXOffset:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	lsl	r1, r1, #0x10
	lsr	r5, r1, #0x10
	mov	r8, r5
	ldr	r7, .L291
	ldrb	r0, [r7]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	ldr	r0, .L291+0x4
	ldrb	r0, [r0]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r6, r0
	bhi	.L289	@cond_branch
	cmp	r6, r0
	bcs	.L285	@cond_branch
	lsl	r0, r5, #0x10
	b	.L290
.L292:
	.align	2, 0
.L291:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L285:
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L287	@cond_branch
.L289:
	ldrh	r1, [r4, #0x20]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	sub	r1, r1, r0
	strh	r1, [r4, #0x20]
	b	.L284
.L287:
	mov	r1, r8
	lsl	r0, r1, #0x10
.L290:
	asr	r0, r0, #0x10
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
.L284:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe34:
	.size	 SetAnimSpriteInitialXOffset,.Lfe34-SetAnimSpriteInitialXOffset
	.align	2, 0
	.globl	InitAnimArcTranslation
	.type	 InitAnimArcTranslation,function
	.thumb_func
InitAnimArcTranslation:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	mov	r5, #0x0
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	mov	r0, #0x2e
	ldrsh	r1, [r4, r0]
	mov	r0, #0x80
	lsl	r0, r0, #0x8
	bl	__divsi3
	strh	r0, [r4, #0x3a]
	strh	r5, [r4, #0x3c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe35:
	.size	 InitAnimArcTranslation,.Lfe35-InitAnimArcTranslation
	.align	2, 0
	.globl	TranslateAnimHorizontalArc
	.type	 TranslateAnimHorizontalArc,function
	.thumb_func
TranslateAnimHorizontalArc:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L295	@cond_branch
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x26]
	add	r0, r0, r1
	strh	r0, [r4, #0x26]
	mov	r0, #0x0
	b	.L296
.L295:
	mov	r0, #0x1
.L296:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe36:
	.size	 TranslateAnimHorizontalArc,.Lfe36-TranslateAnimHorizontalArc
	.align	2, 0
	.globl	TranslateAnimVerticalArc
	.type	 TranslateAnimVerticalArc,function
	.thumb_func
TranslateAnimVerticalArc:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L298	@cond_branch
	ldrh	r0, [r4, #0x3a]
	ldrh	r1, [r4, #0x3c]
	add	r0, r0, r1
	strh	r0, [r4, #0x3c]
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x18
	mov	r2, #0x38
	ldrsh	r1, [r4, r2]
	bl	Sin
	ldrh	r1, [r4, #0x24]
	add	r0, r0, r1
	strh	r0, [r4, #0x24]
	mov	r0, #0x0
	b	.L299
.L298:
	mov	r0, #0x1
.L299:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe37:
	.size	 TranslateAnimVerticalArc,.Lfe37-TranslateAnimVerticalArc
	.align	2, 0
	.globl	SetSpritePrimaryCoordsFromSecondaryCoords
	.type	 SetSpritePrimaryCoordsFromSecondaryCoords,function
	.thumb_func
SetSpritePrimaryCoordsFromSecondaryCoords:
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r0, #0x20]
	add	r1, r1, r2
	mov	r2, #0x0
	strh	r1, [r0, #0x20]
	ldrh	r1, [r0, #0x26]
	ldrh	r3, [r0, #0x22]
	add	r1, r1, r3
	strh	r1, [r0, #0x22]
	strh	r2, [r0, #0x24]
	strh	r2, [r0, #0x26]
	bx	lr
.Lfe38:
	.size	 SetSpritePrimaryCoordsFromSecondaryCoords,.Lfe38-SetSpritePrimaryCoordsFromSecondaryCoords
	.align	2, 0
	.globl	InitSpritePosToAnimTarget
	.type	 InitSpritePosToAnimTarget,function
	.thumb_func
InitSpritePosToAnimTarget:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L302	@cond_branch
	ldr	r4, .L303
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
.L302:
	ldr	r4, .L303+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L304:
	.align	2, 0
.L303:
	.word	gBattleAnimTarget
	.word	gBattleAnimArgs
.Lfe39:
	.size	 InitSpritePosToAnimTarget,.Lfe39-InitSpritePosToAnimTarget
	.align	2, 0
	.globl	InitSpritePosToAnimAttacker
	.type	 InitSpritePosToAnimAttacker,function
	.thumb_func
InitSpritePosToAnimAttacker:
	push	{r4, r5, lr}
	add	r5, r0, #0
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L306	@cond_branch
	ldr	r4, .L309
	ldrb	r0, [r4]
	mov	r1, #0x0
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x1
	b	.L308
.L310:
	.align	2, 0
.L309:
	.word	gBattleAnimAttacker
.L306:
	ldr	r4, .L311
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
.L308:
	bl	GetBattlerSpriteCoord2
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldr	r4, .L311+0x4
	mov	r0, #0x0
	ldrsh	r1, [r4, r0]
	add	r0, r5, #0
	bl	SetAnimSpriteInitialXOffset
	ldrh	r0, [r4, #0x2]
	ldrh	r1, [r5, #0x22]
	add	r0, r0, r1
	strh	r0, [r5, #0x22]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L312:
	.align	2, 0
.L311:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.Lfe40:
	.size	 InitSpritePosToAnimAttacker,.Lfe40-InitSpritePosToAnimAttacker
	.align	2, 0
	.globl	GetBattlerSide
	.type	 GetBattlerSide,function
	.thumb_func
GetBattlerSide:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L314
	add	r0, r0, r1
	ldrb	r1, [r0]
	mov	r0, #0x1
	and	r0, r0, r1
	bx	lr
.L315:
	.align	2, 0
.L314:
	.word	gBattlerPositions
.Lfe41:
	.size	 GetBattlerSide,.Lfe41-GetBattlerSide
	.align	2, 0
	.globl	GetBattlerPosition
	.type	 GetBattlerPosition,function
	.thumb_func
GetBattlerPosition:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r1, .L317
	add	r0, r0, r1
	ldrb	r0, [r0]
	bx	lr
.L318:
	.align	2, 0
.L317:
	.word	gBattlerPositions
.Lfe42:
	.size	 GetBattlerPosition,.Lfe42-GetBattlerPosition
	.align	2, 0
	.globl	GetBattlerAtPosition
	.type	 GetBattlerAtPosition,function
	.thumb_func
GetBattlerAtPosition:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r1, #0x0
	ldr	r0, .L326
	ldrb	r2, [r0]
	cmp	r1, r2
	bcs	.L321	@cond_branch
	ldr	r4, .L326+0x4
	ldrb	r0, [r4]
	cmp	r0, r3
	beq	.L321	@cond_branch
.L322:
	add	r0, r1, #0x1
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, r2
	bcs	.L321	@cond_branch
	add	r0, r1, r4
	ldrb	r0, [r0]
	cmp	r0, r3
	bne	.L322	@cond_branch
.L321:
	add	r0, r1, #0
	pop	{r4}
	pop	{r1}
	bx	r1
.L327:
	.align	2, 0
.L326:
	.word	gBattlersCount
	.word	gBattlerPositions
.Lfe43:
	.size	 GetBattlerAtPosition,.Lfe43-GetBattlerAtPosition
	.align	2, 0
	.globl	IsBattlerSpritePresent
	.type	 IsBattlerSpritePresent,function
	.thumb_func
IsBattlerSpritePresent:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r5, r4, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L329	@cond_branch
	ldr	r0, .L344
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L342	@cond_branch
	ldr	r0, .L344+0x4
	ldrb	r0, [r0]
	cmp	r0, r4
	beq	.L342	@cond_branch
	b	.L334
.L345:
	.align	2, 0
.L344:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L329:
	ldr	r0, .L346
	add	r0, r4, r0
	ldrb	r0, [r0]
	cmp	r0, #0xff
	beq	.L334	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L337	@cond_branch
	ldr	r1, .L346+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L346+0x8
	b	.L343
.L347:
	.align	2, 0
.L346:
	.word	gBattlerPositions
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L337:
	ldr	r1, .L348
	lsl	r0, r5, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L348+0x4
.L343:
	add	r0, r0, r1
	mov	r1, #0x39
	bl	GetMonData
	cmp	r0, #0
	beq	.L334	@cond_branch
.L342:
	mov	r0, #0x1
	b	.L341
.L349:
	.align	2, 0
.L348:
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L334:
	mov	r0, #0x0
.L341:
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.Lfe44:
	.size	 IsBattlerSpritePresent,.Lfe44-IsBattlerSpritePresent
	.align	2, 0
	.globl	IsDoubleBattle
	.type	 IsDoubleBattle,function
	.thumb_func
IsDoubleBattle:
	ldr	r0, .L351
	ldr	r0, [r0]
	mov	r1, #0x1
	and	r0, r0, r1
	bx	lr
.L352:
	.align	2, 0
.L351:
	.word	gBattleTypeFlags
.Lfe45:
	.size	 IsDoubleBattle,.Lfe45-IsDoubleBattle
	.align	2, 0
	.globl	sub_80A6B30
	.type	 sub_80A6B30,function
	.thumb_func
sub_80A6B30:
	push	{r4, lr}
	add	r4, r0, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L354	@cond_branch
	ldr	r0, .L357
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L357+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	mov	r1, #0x0
	mov	r0, #0xe
	strb	r0, [r4, #0x8]
	mov	r0, #0x1
	strb	r0, [r4, #0x9]
	strh	r1, [r4, #0xa]
	b	.L356
.L358:
	.align	2, 0
.L357:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.L354:
	ldr	r0, .L359
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L359+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	mov	r0, #0x8
	strb	r0, [r4, #0x8]
	mov	r0, #0x1
	strb	r0, [r4, #0x9]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	strh	r0, [r4, #0xa]
.L356:
	strh	r1, [r4, #0xc]
	pop	{r4}
	pop	{r0}
	bx	r0
.L360:
	.align	2, 0
.L359:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.Lfe46:
	.size	 sub_80A6B30,.Lfe46-sub_80A6B30
	.align	2, 0
	.globl	sub_80A6B90
	.type	 sub_80A6B90,function
	.thumb_func
sub_80A6B90:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0
	beq	.L362	@cond_branch
	ldr	r0, .L367
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L367+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	mov	r1, #0x0
	mov	r0, #0xe
	strb	r0, [r4, #0x8]
	mov	r0, #0x1
	strb	r0, [r4, #0x9]
	strh	r1, [r4, #0xa]
	b	.L366
.L368:
	.align	2, 0
.L367:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.L362:
	cmp	r5, #0x1
	bne	.L364	@cond_branch
	add	r0, r4, #0
	bl	sub_80A6B30
	b	.L363
.L364:
	ldr	r0, .L369
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L369+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	mov	r0, #0x9
	strb	r0, [r4, #0x8]
	mov	r0, #0x2
	strb	r0, [r4, #0x9]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
	strh	r0, [r4, #0xa]
.L366:
	strh	r1, [r4, #0xc]
.L363:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L370:
	.align	2, 0
.L369:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.Lfe47:
	.size	 sub_80A6B90,.Lfe47-sub_80A6B90
	.align	2, 0
	.globl	sub_80A6BFC
	.type	 sub_80A6BFC,function
	.thumb_func
sub_80A6BFC:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, .L377
	ldr	r0, [r0]
	str	r0, [r4]
	ldr	r0, .L377+0x4
	ldr	r0, [r0]
	str	r0, [r4, #0x4]
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	cmp	r5, #0
	beq	.L372	@cond_branch
	mov	r0, #0x0
	mov	r1, #0xe
	strb	r1, [r4, #0x8]
	mov	r1, #0x1
	strb	r1, [r4, #0x9]
	strh	r0, [r4, #0xa]
	strh	r0, [r4, #0xc]
	b	.L373
.L378:
	.align	2, 0
.L377:
	.word	gUnknown_0202305C
	.word	gUnknown_02023060
.L372:
	ldr	r0, .L379
	ldrb	r0, [r0]
	bl	GetBattlerSpriteBGPriorityRank
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0x1
	bne	.L374	@cond_branch
	mov	r0, #0x8
	strb	r0, [r4, #0x8]
	strb	r1, [r4, #0x9]
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	b	.L376
.L380:
	.align	2, 0
.L379:
	.word	gBattleAnimAttacker
.L374:
	mov	r0, #0x9
	strb	r0, [r4, #0x8]
	mov	r0, #0x2
	strb	r0, [r4, #0x9]
	mov	r0, #0xc0
	lsl	r0, r0, #0x2
.L376:
	strh	r0, [r4, #0xa]
	strh	r5, [r4, #0xc]
.L373:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe48:
	.size	 sub_80A6BFC,.Lfe48-sub_80A6BFC
	.align	2, 0
	.globl	sub_80A6C68
	.type	 sub_80A6C68,function
	.thumb_func
sub_80A6C68:
	push	{lr}
	add	sp, sp, #-0x20
	add	r1, r0, #0
	add	r0, sp, #0xc
	bl	sub_80A6B90
	mov	r0, #0x0
	str	r0, [sp, #0x1c]
	add	r0, sp, #0x1c
	ldr	r1, [sp, #0xc]
	ldr	r2, .L382
	bl	CpuSet
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	ldr	r1, [sp, #0xc]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	add	r3, sp, #0xc
	ldrh	r3, [r3, #0xa]
	bl	LoadBgTiles
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	mov	r1, #0x20
	str	r1, [sp]
	mov	r1, #0x40
	str	r1, [sp, #0x4]
	mov	r1, #0x11
	str	r1, [sp, #0x8]
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	add	r0, sp, #0xc
	ldrb	r0, [r0, #0x9]
	bl	CopyBgTilemapBufferToVram
	add	sp, sp, #0x20
	pop	{r0}
	bx	r0
.L383:
	.align	2, 0
.L382:
	.word	0x5000800
.Lfe49:
	.size	 sub_80A6C68,.Lfe49-sub_80A6C68
	.align	2, 0
	.globl	AnimLoadCompressedBgGfx
	.type	 AnimLoadCompressedBgGfx,function
	.thumb_func
AnimLoadCompressedBgGfx:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	add	sp, sp, #-0x4
	add	r5, r0, #0
	mov	r8, r1
	add	r6, r2, #0
	mov	r0, #0x0
	str	r0, [sp]
	ldr	r4, .L385
	ldr	r1, [r4]
	ldr	r2, .L385+0x4
	mov	r0, sp
	bl	CpuSet
	ldr	r1, [r4]
	mov	r0, r8
	bl	LZDecompressWram
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	ldr	r1, [r4]
	mov	r2, #0x80
	lsl	r2, r2, #0x6
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	add	r0, r5, #0
	add	r3, r6, #0
	bl	LoadBgTiles
	add	sp, sp, #0x4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L386:
	.align	2, 0
.L385:
	.word	gUnknown_0202305C
	.word	0x5000800
.Lfe50:
	.size	 AnimLoadCompressedBgGfx,.Lfe50-AnimLoadCompressedBgGfx
	.align	2, 0
	.type	 InitAnimBgTilemapBuffer,function
	.thumb_func
InitAnimBgTilemapBuffer:
	push	{r4, r5, lr}
	add	sp, sp, #-0xc
	add	r4, r0, #0
	add	r5, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r0, #0x20
	str	r0, [sp]
	mov	r0, #0x40
	str	r0, [sp, #0x4]
	mov	r0, #0x11
	str	r0, [sp, #0x8]
	add	r0, r4, #0
	mov	r1, #0x0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	FillBgTilemapBufferRect
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0x0
	mov	r3, #0x0
	bl	CopyToBgTilemapBuffer
	add	sp, sp, #0xc
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe51:
	.size	 InitAnimBgTilemapBuffer,.Lfe51-InitAnimBgTilemapBuffer
	.align	2, 0
	.globl	AnimLoadCompressedBgTilemap
	.type	 AnimLoadCompressedBgTilemap,function
	.thumb_func
AnimLoadCompressedBgTilemap:
	push	{r4, lr}
	add	r4, r0, #0
	bl	InitAnimBgTilemapBuffer
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	CopyBgTilemapBufferToVram
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe52:
	.size	 AnimLoadCompressedBgTilemap,.Lfe52-AnimLoadCompressedBgTilemap
	.align	2, 0
	.globl	AnimLoadCompressedBgTilemapHandleContest
	.type	 AnimLoadCompressedBgTilemapHandleContest,function
	.thumb_func
AnimLoadCompressedBgTilemapHandleContest:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r2, #0
	ldrb	r0, [r4, #0x9]
	bl	InitAnimBgTilemapBuffer
	bl	IsContest
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	bne	.L390	@cond_branch
	ldrb	r0, [r4, #0x8]
	ldr	r1, [r4, #0x4]
	lsl	r3, r5, #0x18
	lsr	r3, r3, #0x18
	mov	r2, #0x0
	bl	sub_80A4720
.L390:
	ldrb	r0, [r4, #0x9]
	bl	CopyBgTilemapBufferToVram
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe53:
	.size	 AnimLoadCompressedBgTilemapHandleContest,.Lfe53-AnimLoadCompressedBgTilemapHandleContest
	.align	2, 0
	.globl	GetBattleBgPaletteNum
	.type	 GetBattleBgPaletteNum,function
	.thumb_func
GetBattleBgPaletteNum:
	push	{lr}
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L392	@cond_branch
	mov	r0, #0x2
	b	.L394
.L392:
	mov	r0, #0x1
.L394:
	pop	{r1}
	bx	r1
.Lfe54:
	.size	 GetBattleBgPaletteNum,.Lfe54-GetBattleBgPaletteNum
	.align	2, 0
	.globl	sub_80A6DAC
	.type	 sub_80A6DAC,function
	.thumb_func
sub_80A6DAC:
	push	{lr}
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L397	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L396	@cond_branch
.L397:
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x0
	bl	SetAnimBgAttribute
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	b	.L398
.L396:
	mov	r0, #0x3
	mov	r1, #0x0
	mov	r2, #0x1
	bl	SetAnimBgAttribute
	mov	r0, #0x3
	mov	r1, #0x1
	mov	r2, #0x0
	bl	SetAnimBgAttribute
.L398:
	pop	{r0}
	bx	r0
.Lfe55:
	.size	 sub_80A6DAC,.Lfe55-sub_80A6DAC
	.align	2, 0
	.globl	TradeMenuBouncePartySprites
	.type	 TradeMenuBouncePartySprites,function
	.thumb_func
TradeMenuBouncePartySprites:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitSpriteDataForLinearTranslation
	ldr	r1, .L400
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L401:
	.align	2, 0
.L400:
	.word	TranslateSpriteLinearFixedPointIconFrame
.Lfe56:
	.size	 TradeMenuBouncePartySprites,.Lfe56-TradeMenuBouncePartySprites
	.align	2, 0
	.globl	InitSpriteDataForLinearTranslation
	.type	 InitSpriteDataForLinearTranslation,function
	.thumb_func
InitSpriteDataForLinearTranslation:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldrh	r0, [r5, #0x32]
	ldrh	r1, [r5, #0x30]
	sub	r0, r0, r1
	ldrh	r4, [r5, #0x36]
	ldrh	r1, [r5, #0x34]
	sub	r4, r4, r1
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x10
	lsl	r0, r0, #0x18
	asr	r0, r0, #0x10
	mov	r2, #0x2e
	ldrsh	r1, [r5, r2]
	bl	__divsi3
	mov	r6, #0x0
	strh	r0, [r5, #0x30]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	mov	r0, #0x2e
	ldrsh	r1, [r5, r0]
	add	r0, r4, #0
	bl	__divsi3
	strh	r0, [r5, #0x32]
	strh	r6, [r5, #0x36]
	strh	r6, [r5, #0x34]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe57:
	.size	 InitSpriteDataForLinearTranslation,.Lfe57-InitSpriteDataForLinearTranslation
	.align	2, 0
	.globl	InitAnimLinearTranslation
	.type	 InitAnimLinearTranslation,function
	.thumb_func
InitAnimLinearTranslation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r7, r0]
	mov	r2, #0x30
	ldrsh	r0, [r7, r2]
	sub	r1, r1, r0
	mov	r3, #0x36
	ldrsh	r2, [r7, r3]
	mov	r3, #0x34
	ldrsh	r0, [r7, r3]
	sub	r2, r2, r0
	lsr	r0, r1, #0x1f
	mov	r8, r0
	lsr	r3, r2, #0x1f
	mov	r9, r3
	cmp	r1, #0
	bge	.L404	@cond_branch
	neg	r1, r1
.L404:
	lsl	r0, r1, #0x18
	lsr	r6, r0, #0x10
	add	r0, r2, #0
	cmp	r0, #0
	bge	.L405	@cond_branch
	neg	r0, r0
.L405:
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x10
	mov	r0, #0x2e
	ldrsh	r4, [r7, r0]
	add	r0, r6, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, r8
	cmp	r2, #0
	beq	.L406	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
	b	.L407
.L406:
	ldr	r0, .L410
	and	r6, r6, r0
.L407:
	mov	r3, r9
	cmp	r3, #0
	beq	.L408	@cond_branch
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L409
.L411:
	.align	2, 0
.L410:
	.word	0xfffe
.L408:
	ldr	r0, .L412
	and	r5, r5, r0
.L409:
	mov	r0, #0x0
	strh	r6, [r7, #0x30]
	strh	r5, [r7, #0x32]
	strh	r0, [r7, #0x36]
	strh	r0, [r7, #0x34]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L413:
	.align	2, 0
.L412:
	.word	0xfffe
.Lfe58:
	.size	 InitAnimLinearTranslation,.Lfe58-InitAnimLinearTranslation
	.align	2, 0
	.globl	StartAnimLinearTranslation
	.type	 StartAnimLinearTranslation,function
	.thumb_func
StartAnimLinearTranslation:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L415
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L416:
	.align	2, 0
.L415:
	.word	sub_80A6F98
.Lfe59:
	.size	 StartAnimLinearTranslation,.Lfe59-StartAnimLinearTranslation
	.align	2, 0
	.globl	sub_80A6F14
	.type	 sub_80A6F14,function
	.thumb_func
sub_80A6F14:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	ldr	r1, .L418
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L419:
	.align	2, 0
.L418:
	.word	sub_80A6FB4
.Lfe60:
	.size	 sub_80A6F14,.Lfe60-sub_80A6F14
	.align	2, 0
	.globl	AnimTranslateLinear
	.type	 AnimTranslateLinear,function
	.thumb_func
AnimTranslateLinear:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L421	@cond_branch
	mov	r0, #0x1
	b	.L426
.L421:
	ldrh	r1, [r2, #0x30]
	ldrh	r4, [r2, #0x32]
	ldrh	r6, [r2, #0x34]
	ldrh	r5, [r2, #0x36]
	add	r0, r6, r1
	lsl	r3, r0, #0x10
	lsr	r6, r3, #0x10
	add	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L422	@cond_branch
	lsr	r0, r3, #0x18
	neg	r0, r0
	b	.L427
.L422:
	lsr	r0, r3, #0x18
.L427:
	strh	r0, [r2, #0x24]
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L424	@cond_branch
	lsr	r0, r5, #0x8
	neg	r0, r0
	b	.L428
.L424:
	lsr	r0, r5, #0x8
.L428:
	strh	r0, [r2, #0x26]
	strh	r6, [r2, #0x34]
	strh	r5, [r2, #0x36]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
.L426:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe61:
	.size	 AnimTranslateLinear,.Lfe61-AnimTranslateLinear
	.align	2, 0
	.globl	sub_80A6F98
	.type	 sub_80A6F98,function
	.thumb_func
sub_80A6F98:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L430	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L430:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe62:
	.size	 sub_80A6F98,.Lfe62-sub_80A6F98
	.align	2, 0
	.type	 sub_80A6FB4,function
	.thumb_func
sub_80A6FB4:
	push	{r4, lr}
	add	r4, r0, #0
	bl	sub_8039E9C
	add	r0, r4, #0
	bl	AnimTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L432	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L432:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe63:
	.size	 sub_80A6FB4,.Lfe63-sub_80A6FB4
	.align	2, 0
	.globl	sub_80A6FD4
	.type	 sub_80A6FD4,function
	.thumb_func
sub_80A6FD4:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L434	@cond_branch
	neg	r0, r0
.L434:
	lsl	r0, r0, #0x8
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitAnimLinearTranslation
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe64:
	.size	 sub_80A6FD4,.Lfe64-sub_80A6FD4
	.align	2, 0
	.globl	sub_80A7000
	.type	 sub_80A7000,function
	.thumb_func
sub_80A7000:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	sub_80A6FD4
	ldr	r1, .L436
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L437:
	.align	2, 0
.L436:
	.word	sub_80A6F98
.Lfe65:
	.size	 sub_80A7000,.Lfe65-sub_80A7000
	.align	2, 0
	.type	 InitAnimFastLinearTranslation,function
	.thumb_func
InitAnimFastLinearTranslation:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	r7, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r7, r0]
	mov	r2, #0x30
	ldrsh	r0, [r7, r2]
	sub	r1, r1, r0
	mov	r3, #0x36
	ldrsh	r2, [r7, r3]
	mov	r3, #0x34
	ldrsh	r0, [r7, r3]
	sub	r2, r2, r0
	lsr	r0, r1, #0x1f
	mov	r8, r0
	lsr	r3, r2, #0x1f
	mov	r9, r3
	cmp	r1, #0
	bge	.L439	@cond_branch
	neg	r1, r1
.L439:
	lsl	r0, r1, #0x14
	lsr	r6, r0, #0x10
	add	r0, r2, #0
	cmp	r0, #0
	bge	.L440	@cond_branch
	neg	r0, r0
.L440:
	lsl	r0, r0, #0x14
	lsr	r5, r0, #0x10
	mov	r0, #0x2e
	ldrsh	r4, [r7, r0]
	add	r0, r6, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	add	r0, r5, #0
	add	r1, r4, #0
	bl	__divsi3
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r2, r8
	cmp	r2, #0
	beq	.L441	@cond_branch
	mov	r0, #0x1
	orr	r6, r6, r0
	b	.L442
.L441:
	ldr	r0, .L445
	and	r6, r6, r0
.L442:
	mov	r3, r9
	cmp	r3, #0
	beq	.L443	@cond_branch
	mov	r0, #0x1
	orr	r5, r5, r0
	b	.L444
.L446:
	.align	2, 0
.L445:
	.word	0xfffe
.L443:
	ldr	r0, .L447
	and	r5, r5, r0
.L444:
	mov	r0, #0x0
	strh	r6, [r7, #0x30]
	strh	r5, [r7, #0x32]
	strh	r0, [r7, #0x36]
	strh	r0, [r7, #0x34]
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L448:
	.align	2, 0
.L447:
	.word	0xfffe
.Lfe66:
	.size	 InitAnimFastLinearTranslation,.Lfe66-InitAnimFastLinearTranslation
	.align	2, 0
	.globl	InitAndRunAnimFastLinearTranslation
	.type	 InitAndRunAnimFastLinearTranslation,function
	.thumb_func
InitAndRunAnimFastLinearTranslation:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslation
	ldr	r1, .L450
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L451:
	.align	2, 0
.L450:
	.word	sub_80A7144
.Lfe67:
	.size	 InitAndRunAnimFastLinearTranslation,.Lfe67-InitAndRunAnimFastLinearTranslation
	.align	2, 0
	.globl	AnimFastTranslateLinear
	.type	 AnimFastTranslateLinear,function
	.thumb_func
AnimFastTranslateLinear:
	push	{r4, r5, r6, lr}
	add	r2, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	bne	.L453	@cond_branch
	mov	r0, #0x1
	b	.L458
.L453:
	ldrh	r1, [r2, #0x30]
	ldrh	r4, [r2, #0x32]
	ldrh	r6, [r2, #0x34]
	ldrh	r5, [r2, #0x36]
	add	r0, r6, r1
	lsl	r3, r0, #0x10
	lsr	r6, r3, #0x10
	add	r0, r5, r4
	lsl	r0, r0, #0x10
	lsr	r5, r0, #0x10
	mov	r0, #0x1
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L454	@cond_branch
	lsr	r0, r3, #0x14
	neg	r0, r0
	b	.L459
.L454:
	lsr	r0, r3, #0x14
.L459:
	strh	r0, [r2, #0x24]
	mov	r0, #0x1
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L456	@cond_branch
	lsr	r0, r5, #0x4
	neg	r0, r0
	b	.L460
.L456:
	lsr	r0, r5, #0x4
.L460:
	strh	r0, [r2, #0x26]
	strh	r6, [r2, #0x34]
	strh	r5, [r2, #0x36]
	ldrh	r0, [r2, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r2, #0x2e]
	mov	r0, #0x0
.L458:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe68:
	.size	 AnimFastTranslateLinear,.Lfe68-AnimFastTranslateLinear
	.align	2, 0
	.type	 sub_80A7144,function
	.thumb_func
sub_80A7144:
	push	{r4, lr}
	add	r4, r0, #0
	bl	AnimFastTranslateLinear
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L462	@cond_branch
	add	r0, r4, #0
	bl	SetCallbackToStoredInData6
.L462:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe69:
	.size	 sub_80A7144,.Lfe69-sub_80A7144
	.align	2, 0
	.globl	InitAnimFastLinearTranslationWithSpeed
	.type	 InitAnimFastLinearTranslationWithSpeed,function
	.thumb_func
InitAnimFastLinearTranslationWithSpeed:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r0, #0x32
	ldrsh	r1, [r4, r0]
	mov	r2, #0x30
	ldrsh	r0, [r4, r2]
	sub	r0, r1, r0
	cmp	r0, #0
	bge	.L464	@cond_branch
	neg	r0, r0
.L464:
	lsl	r0, r0, #0x4
	mov	r2, #0x2e
	ldrsh	r1, [r4, r2]
	bl	__divsi3
	strh	r0, [r4, #0x2e]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslation
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe70:
	.size	 InitAnimFastLinearTranslationWithSpeed,.Lfe70-InitAnimFastLinearTranslationWithSpeed
	.align	2, 0
	.globl	sub_80A718C
	.type	 sub_80A718C,function
	.thumb_func
sub_80A718C:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x20]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x34]
	add	r0, r4, #0
	bl	InitAnimFastLinearTranslationWithSpeed
	ldr	r1, .L466
	str	r1, [r4, #0x1c]
	add	r0, r4, #0
	bl	_call_via_r1
	pop	{r4}
	pop	{r0}
	bx	r0
.L467:
	.align	2, 0
.L466:
	.word	sub_80A7144
.Lfe71:
	.size	 sub_80A718C,.Lfe71-sub_80A718C
	.align	2, 0
	.globl	SetSpriteRotScale
	.type	 SetSpriteRotScale,function
	.thumb_func
SetSpriteRotScale:
	push	{r4, r5, lr}
	add	sp, sp, #-0x10
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x10
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	ldr	r5, .L470
	lsl	r2, r2, #0x10
	lsr	r1, r1, #0x10
	orr	r1, r1, r2
	str	r1, [sp]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r5
	orr	r0, r0, r3
	str	r0, [sp, #0x4]
	bl	sub_80A7238
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L469	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp]
	and	r1, r1, r5
	orr	r1, r1, r0
	str	r1, [sp]
.L469:
	ldr	r1, .L470+0x4
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r4, [r0, #0x3]
	lsl	r4, r4, #0x1a
	lsr	r4, r4, #0x1b
	add	r5, sp, #0x8
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	ldr	r0, .L470+0x8
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r5]
	strh	r0, [r4]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x4]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x6]
	add	sp, sp, #0x10
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L471:
	.align	2, 0
.L470:
	.word	-0x10000
	.word	gSprites
	.word	gOamMatrices
.Lfe72:
	.size	 SetSpriteRotScale,.Lfe72-SetSpriteRotScale
	.align	2, 0
	.type	 sub_80A7238,function
	.thumb_func
sub_80A7238:
	push	{r4, lr}
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L473	@cond_branch
	ldr	r4, .L478
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r4
	mov	r2, #0x32
	ldrsh	r0, [r1, r2]
	cmp	r0, #0xc9
	beq	.L473	@cond_branch
	mov	r0, #0x1
	b	.L477
.L479:
	.align	2, 0
.L478:
	.word	gSprites
.L473:
	mov	r0, #0x0
.L477:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe73:
	.size	 sub_80A7238,.Lfe73-sub_80A7238
	.align	2, 0
	.globl	PrepareBattlerSpriteForRotScale
	.type	 PrepareBattlerSpriteForRotScale,function
	.thumb_func
PrepareBattlerSpriteForRotScale:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r6, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	ldr	r1, .L484
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrh	r0, [r4, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L482	@cond_branch
	add	r0, r7, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L481	@cond_branch
.L482:
	add	r2, r4, #0
	add	r2, r2, #0x3e
	ldrb	r1, [r2]
	mov	r0, #0x5
	neg	r0, r0
	and	r0, r0, r1
	strb	r0, [r2]
.L481:
	ldr	r1, .L484
	lsl	r4, r6, #0x4
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r5, r0, r1
	mov	r0, #0x3
	mov	r1, r8
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r5, #0x1]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x1]
	add	r2, r5, #0
	add	r2, r2, #0x2c
	ldrb	r0, [r2]
	mov	r1, #0x80
	orr	r0, r0, r1
	strb	r0, [r2]
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L483	@cond_branch
	ldrb	r0, [r5, #0x1]
	lsl	r0, r0, #0x1e
	cmp	r0, #0
	bne	.L483	@cond_branch
	ldr	r0, .L484+0x4
	ldr	r0, [r0]
	ldr	r1, [r0, #0x4]
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r1, [r0, #0x6]
	mov	r0, #0x1f
	and	r1, r1, r0
	lsl	r1, r1, #0x1
	ldrb	r2, [r5, #0x3]
	mov	r0, #0x3f
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r5, #0x3]
.L483:
	ldr	r1, .L484
	add	r0, r4, r6
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r3, [r0, #0x1]
	mov	r1, #0x3
	orr	r3, r3, r1
	strb	r3, [r0, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r0, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	bl	CalcCenterToCornerVec
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L485:
	.align	2, 0
.L484:
	.word	gSprites
	.word	gBattleSpritesDataPtr
.Lfe74:
	.size	 PrepareBattlerSpriteForRotScale,.Lfe74-PrepareBattlerSpriteForRotScale
	.align	2, 0
	.globl	ResetSpriteRotScale
	.type	 ResetSpriteRotScale,function
	.thumb_func
ResetSpriteRotScale:
	push	{r4, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r2, #0x80
	lsl	r2, r2, #0x1
	add	r0, r4, #0
	add	r1, r2, #0
	mov	r3, #0x0
	bl	SetSpriteRotScale
	ldr	r1, .L487
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrb	r2, [r0, #0x1]
	mov	r1, #0x4
	neg	r1, r1
	and	r1, r1, r2
	mov	r2, #0x1
	orr	r1, r1, r2
	mov	r2, #0xd
	neg	r2, r2
	and	r1, r1, r2
	strb	r1, [r0, #0x1]
	add	r3, r0, #0
	add	r3, r3, #0x2c
	ldrb	r2, [r3]
	mov	r1, #0x7f
	and	r1, r1, r2
	strb	r1, [r3]
	ldrb	r3, [r0, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r0, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	bl	CalcCenterToCornerVec
	pop	{r4}
	pop	{r0}
	bx	r0
.L488:
	.align	2, 0
.L487:
	.word	gSprites
.Lfe75:
	.size	 ResetSpriteRotScale,.Lfe75-ResetSpriteRotScale
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromRotation
	.type	 SetBattlerSpriteYOffsetFromRotation,function
	.thumb_func
SetBattlerSpriteYOffsetFromRotation:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldr	r2, .L491
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r2, r1, r2
	ldrb	r0, [r2, #0x3]
	lsl	r0, r0, #0x1a
	lsr	r0, r0, #0x1b
	ldr	r1, .L491+0x4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r1, [r0, #0x4]
	mov	r3, #0x4
	ldrsh	r0, [r0, r3]
	cmp	r0, #0
	bge	.L490	@cond_branch
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r1, r0, #0x10
.L490:
	lsl	r0, r1, #0x10
	asr	r0, r0, #0x13
	strh	r0, [r2, #0x26]
	pop	{r0}
	bx	r0
.L492:
	.align	2, 0
.L491:
	.word	gSprites
	.word	gOamMatrices
.Lfe76:
	.size	 SetBattlerSpriteYOffsetFromRotation,.Lfe76-SetBattlerSpriteYOffsetFromRotation
	.align	2, 0
	.globl	TrySetSpriteRotScale
	.type	 TrySetSpriteRotScale,function
	.thumb_func
TrySetSpriteRotScale:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-0x10
	add	r4, r0, #0
	ldr	r0, [sp, #0x28]
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r5, r2, #0x10
	lsl	r3, r3, #0x10
	lsr	r7, r3, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r8, r0
	ldrb	r0, [r4, #0x1]
	lsl	r0, r0, #0x1e
	lsr	r0, r0, #0x1e
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L494	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #0x2c
	ldrb	r1, [r0]
	mov	r2, #0x80
	orr	r1, r1, r2
	strb	r1, [r0]
	cmp	r6, #0
	beq	.L495	@cond_branch
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
.L495:
	ldr	r6, .L497
	lsl	r0, r7, #0x10
	orr	r5, r5, r0
	str	r5, [sp]
	ldr	r0, [sp, #0x4]
	and	r0, r0, r6
	mov	r1, r8
	orr	r0, r0, r1
	str	r0, [sp, #0x4]
	bl	sub_80A7238
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L496	@cond_branch
	mov	r0, sp
	ldrh	r0, [r0]
	neg	r0, r0
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	ldr	r1, [sp]
	and	r1, r1, r6
	orr	r1, r1, r0
	str	r1, [sp]
.L496:
	ldrb	r4, [r4, #0x3]
	lsl	r4, r4, #0x1a
	lsr	r4, r4, #0x1b
	add	r5, sp, #0x8
	mov	r0, sp
	add	r1, r5, #0
	mov	r2, #0x1
	mov	r3, #0x2
	bl	ObjAffineSet
	ldr	r0, .L497+0x4
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	ldrh	r0, [r5]
	strh	r0, [r4]
	ldrh	r0, [r5, #0x2]
	strh	r0, [r4, #0x2]
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x4]
	ldrh	r0, [r5, #0x6]
	strh	r0, [r4, #0x6]
.L494:
	add	sp, sp, #0x10
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L498:
	.align	2, 0
.L497:
	.word	-0x10000
	.word	gOamMatrices
.Lfe77:
	.size	 TrySetSpriteRotScale,.Lfe77-TrySetSpriteRotScale
	.align	2, 0
	.globl	sub_80A749C
	.type	 sub_80A749C,function
	.thumb_func
sub_80A749C:
	push	{r4, lr}
	add	sp, sp, #-0x4
	add	r4, r0, #0
	mov	r3, #0x80
	lsl	r3, r3, #0x1
	mov	r0, #0x0
	str	r0, [sp]
	add	r0, r4, #0
	mov	r1, #0x1
	add	r2, r3, #0
	bl	TrySetSpriteRotScale
	add	r2, r4, #0
	add	r2, r2, #0x2c
	ldrb	r1, [r2]
	mov	r0, #0x7f
	and	r0, r0, r1
	strb	r0, [r2]
	ldrb	r3, [r4, #0x1]
	lsr	r1, r3, #0x6
	ldrb	r2, [r4, #0x3]
	lsr	r2, r2, #0x6
	lsl	r3, r3, #0x1e
	lsr	r3, r3, #0x1e
	add	r0, r4, #0
	bl	CalcCenterToCornerVec
	add	sp, sp, #0x4
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe78:
	.size	 sub_80A749C,.Lfe78-sub_80A749C
	.align	2, 0
	.type	 ArcTan2_,function
	.thumb_func
ArcTan2_:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe79:
	.size	 ArcTan2_,.Lfe79-ArcTan2_
	.align	2, 0
	.globl	ArcTan2Neg
	.type	 ArcTan2Neg,function
	.thumb_func
ArcTan2Neg:
	push	{lr}
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	asr	r1, r1, #0x10
	bl	ArcTan2_
	lsl	r0, r0, #0x10
	neg	r0, r0
	lsr	r0, r0, #0x10
	pop	{r1}
	bx	r1
.Lfe80:
	.size	 ArcTan2Neg,.Lfe80-ArcTan2Neg
	.align	2, 0
	.globl	SetGreyscaleOrOriginalPalette
	.type	 SetGreyscaleOrOriginalPalette,function
	.thumb_func
SetGreyscaleOrOriginalPalette:
	push	{r4, r5, r6, r7, lr}
	lsl	r1, r1, #0x18
	lsl	r0, r0, #0x14
	lsr	r0, r0, #0x10
	cmp	r1, #0
	bne	.L503	@cond_branch
	ldr	r2, .L510
	ldr	r1, .L510+0x4
	lsl	r0, r0, #0x1
	add	r4, r0, r1
	add	r5, r0, r2
	mov	r6, #0xf
.L507:
	ldr	r0, [r5]
	lsl	r2, r0, #0x1b
	lsr	r2, r2, #0x1b
	lsl	r1, r0, #0x16
	lsr	r1, r1, #0x1b
	add	r2, r2, r1
	lsl	r0, r0, #0x11
	lsr	r0, r0, #0x1b
	add	r0, r0, r2
	mov	r1, #0x3
	bl	__udivsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	mov	r1, #0x1f
	and	r0, r0, r1
	ldrb	r1, [r4]
	mov	r3, #0x20
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4]
	lsl	r3, r0, #0x5
	ldrh	r1, [r4]
	ldr	r7, .L510+0x8
	add	r2, r7, #0
	and	r1, r1, r2
	orr	r1, r1, r3
	strh	r1, [r4]
	lsl	r0, r0, #0x2
	ldrb	r1, [r4, #0x1]
	mov	r3, #0x7d
	neg	r3, r3
	add	r2, r3, #0
	and	r1, r1, r2
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	add	r4, r4, #0x2
	add	r5, r5, #0x2
	sub	r6, r6, #0x1
	cmp	r6, #0
	bge	.L507	@cond_branch
	b	.L509
.L511:
	.align	2, 0
.L510:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	-0x3e1
.L503:
	lsl	r1, r0, #0x1
	ldr	r0, .L512
	add	r0, r1, r0
	ldr	r2, .L512+0x4
	add	r1, r1, r2
	ldr	r2, .L512+0x8
	bl	CpuSet
.L509:
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L513:
	.align	2, 0
.L512:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
.Lfe81:
	.size	 SetGreyscaleOrOriginalPalette,.Lfe81-SetGreyscaleOrOriginalPalette
	.align	2, 0
	.globl	sub_80A75AC
	.type	 sub_80A75AC,function
	.thumb_func
sub_80A75AC:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x8
	ldr	r4, [sp, #0x28]
	ldr	r5, [sp, #0x2c]
	ldr	r6, [sp, #0x30]
	lsl	r0, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r7, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	mov	r8, r2
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r9, r3
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	sl, r4
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp]
	lsl	r6, r6, #0x18
	lsr	r6, r6, #0x18
	str	r6, [sp, #0x4]
	mov	r4, #0x0
	cmp	r0, #0
	beq	.L515	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L516	@cond_branch
	mov	r4, #0xe
	b	.L515
.L516:
	bl	GetBattleBgPaletteNum
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r4, #0x1
	lsl	r4, r4, r0
.L515:
	cmp	r7, #0
	beq	.L518	@cond_branch
	ldr	r0, .L530
	ldrb	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L518:
	mov	r0, r8
	cmp	r0, #0
	beq	.L519	@cond_branch
	ldr	r0, .L530+0x4
	ldrb	r0, [r0]
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L519:
	mov	r0, r9
	cmp	r0, #0
	beq	.L520	@cond_branch
	ldr	r6, .L530
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L520	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L520:
	mov	r0, sl
	cmp	r0, #0
	beq	.L522	@cond_branch
	ldr	r6, .L530+0x4
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L522	@cond_branch
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L522:
	ldr	r0, [sp]
	cmp	r0, #0
	beq	.L524	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L525	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	b	.L529
.L531:
	.align	2, 0
.L530:
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
.L525:
	mov	r0, #0x80
	lsl	r0, r0, #0x7
.L529:
	orr	r4, r4, r0
.L524:
	ldr	r0, [sp, #0x4]
	cmp	r0, #0
	beq	.L527	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L527	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x2
	orr	r4, r4, r0
.L527:
	add	r0, r4, #0
	add	sp, sp, #0x8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe82:
	.size	 sub_80A75AC,.Lfe82-sub_80A75AC
	.align	2, 0
	.globl	sub_80A76C4
	.type	 sub_80A76C4,function
	.thumb_func
sub_80A76C4:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r1, r1, #0x18
	lsr	r6, r1, #0x18
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x18
	lsr	r3, r3, #0x18
	mov	r8, r3
	mov	r4, #0x0
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L533	@cond_branch
	cmp	r5, #0
	beq	.L535	@cond_branch
	mov	r4, #0x80
	lsl	r4, r4, #0xb
	b	.L535
.L533:
	cmp	r5, #0
	beq	.L536	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L536	@cond_branch
	mov	r0, #0x0
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x10
	mov	r4, #0x1
	lsl	r4, r4, r0
.L536:
	cmp	r6, #0
	beq	.L538	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L538	@cond_branch
	mov	r0, #0x2
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L538:
	cmp	r7, #0
	beq	.L540	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L540	@cond_branch
	mov	r0, #0x1
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L540:
	mov	r0, r8
	cmp	r0, #0
	beq	.L535	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L535	@cond_branch
	mov	r0, #0x3
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r1, r0, #0
	add	r1, r1, #0x10
	mov	r0, #0x1
	lsl	r0, r0, r1
	orr	r4, r4, r0
.L535:
	add	r0, r4, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe83:
	.size	 sub_80A76C4,.Lfe83-sub_80A76C4
	.align	2, 0
	.globl	sub_80A77AC
	.type	 sub_80A77AC,function
	.thumb_func
sub_80A77AC:
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bx	lr
.Lfe84:
	.size	 sub_80A77AC,.Lfe84-sub_80A77AC
	.align	2, 0
	.type	 GetBattlerAtPosition_,function
	.thumb_func
GetBattlerAtPosition_:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerAtPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	pop	{r1}
	bx	r1
.Lfe85:
	.size	 GetBattlerAtPosition_,.Lfe85-GetBattlerAtPosition_
	.align	2, 0
	.globl	AnimSpriteOnMonPos
	.type	 AnimSpriteOnMonPos,function
	.thumb_func
AnimSpriteOnMonPos:
	push	{r4, lr}
	add	r4, r0, #0
	mov	r1, #0x2e
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L548	@cond_branch
	ldr	r2, .L555
	mov	r3, #0x6
	ldrsh	r0, [r2, r3]
	mov	r1, #0x0
	cmp	r0, #0
	bne	.L549	@cond_branch
	mov	r1, #0x1
.L549:
	mov	r3, #0x4
	ldrsh	r0, [r2, r3]
	cmp	r0, #0
	bne	.L551	@cond_branch
	add	r0, r4, #0
	bl	InitSpritePosToAnimAttacker
	b	.L552
.L556:
	.align	2, 0
.L555:
	.word	gBattleAnimArgs
.L551:
	add	r0, r4, #0
	bl	InitSpritePosToAnimTarget
.L552:
	ldrh	r0, [r4, #0x2e]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x2e]
	b	.L553
.L548:
	add	r0, r4, #0
	add	r0, r0, #0x3f
	ldrb	r1, [r0]
	mov	r0, #0x30
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L553	@cond_branch
	add	r0, r4, #0
	bl	DestroySpriteAndMatrix
.L553:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe86:
	.size	 AnimSpriteOnMonPos,.Lfe86-AnimSpriteOnMonPos
	.align	2, 0
	.globl	TranslateAnimSpriteToTargetMonLocation
	.type	 TranslateAnimSpriteToTargetMonLocation,function
	.thumb_func
TranslateAnimSpriteToTargetMonLocation:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r6, .L563
	mov	r1, #0xa
	ldrsh	r0, [r6, r1]
	mov	r1, #0xff
	lsl	r1, r1, #0x8
	and	r0, r0, r1
	mov	r1, #0x0
	cmp	r0, #0
	bne	.L558	@cond_branch
	mov	r1, #0x1
.L558:
	ldrb	r0, [r6, #0xa]
	mov	r7, #0x1
	cmp	r0, #0
	bne	.L560	@cond_branch
	mov	r7, #0x3
.L560:
	add	r0, r5, #0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L563+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L562	@cond_branch
	ldrh	r0, [r6, #0x4]
	neg	r0, r0
	strh	r0, [r6, #0x4]
.L562:
	ldrh	r0, [r6, #0x8]
	strh	r0, [r5, #0x2e]
	ldr	r4, .L563+0x8
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r6, #0x4]
	add	r0, r0, r1
	strh	r0, [r5, #0x32]
	ldrb	r0, [r4]
	add	r1, r7, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r6, [r6, #0x6]
	add	r0, r0, r6
	strh	r0, [r5, #0x36]
	ldr	r0, .L563+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L563+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L564:
	.align	2, 0
.L563:
	.word	gBattleAnimArgs
	.word	gBattleAnimAttacker
	.word	gBattleAnimTarget
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe87:
	.size	 TranslateAnimSpriteToTargetMonLocation,.Lfe87-TranslateAnimSpriteToTargetMonLocation
	.align	2, 0
	.globl	AnimThrowProjectile
	.type	 AnimThrowProjectile,function
	.thumb_func
AnimThrowProjectile:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	mov	r1, #0x1
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L567
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L566	@cond_branch
	ldr	r1, .L567+0x4
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L566:
	ldr	r4, .L567+0x4
	ldrh	r0, [r4, #0x8]
	strh	r0, [r6, #0x2e]
	ldr	r5, .L567+0x8
	ldrb	r0, [r5]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x4]
	add	r0, r0, r1
	strh	r0, [r6, #0x32]
	ldrb	r0, [r5]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r1, [r4, #0x6]
	add	r0, r0, r1
	strh	r0, [r6, #0x36]
	ldrh	r0, [r4, #0xa]
	strh	r0, [r6, #0x38]
	add	r0, r6, #0
	bl	InitAnimArcTranslation
	ldr	r0, .L567+0xc
	str	r0, [r6, #0x1c]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L568:
	.align	2, 0
.L567:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
	.word	AnimThrowProjectile_Step
.Lfe88:
	.size	 AnimThrowProjectile,.Lfe88-AnimThrowProjectile
	.align	2, 0
	.type	 AnimThrowProjectile_Step,function
	.thumb_func
AnimThrowProjectile_Step:
	push	{r4, lr}
	add	r4, r0, #0
	bl	TranslateAnimHorizontalArc
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L570	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L570:
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe89:
	.size	 AnimThrowProjectile_Step,.Lfe89-AnimThrowProjectile_Step
	.align	2, 0
	.globl	AnimTravelDiagonally
	.type	 AnimTravelDiagonally,function
	.thumb_func
AnimTravelDiagonally:
	push	{r4, r5, r6, r7, lr}
	add	r5, r0, #0
	ldr	r0, .L578
	mov	r2, #0xc
	ldrsh	r1, [r0, r2]
	cmp	r1, #0
	bne	.L572	@cond_branch
	mov	r4, #0x1
	mov	r7, #0x3
	b	.L573
.L579:
	.align	2, 0
.L578:
	.word	gBattleAnimArgs
.L572:
	mov	r4, #0x0
	mov	r7, #0x1
.L573:
	mov	r1, #0xa
	ldrsh	r0, [r0, r1]
	cmp	r0, #0
	bne	.L574	@cond_branch
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimAttacker
	ldr	r0, .L580
	b	.L577
.L581:
	.align	2, 0
.L580:
	.word	gBattleAnimAttacker
.L574:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimTarget
	ldr	r0, .L582
.L577:
	ldrb	r6, [r0]
	ldr	r0, .L582+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L576	@cond_branch
	ldr	r1, .L582+0x8
	ldrh	r0, [r1, #0x4]
	neg	r0, r0
	strh	r0, [r1, #0x4]
.L576:
	add	r0, r5, #0
	add	r1, r4, #0
	bl	InitSpritePosToAnimTarget
	ldr	r4, .L582+0x8
	ldrh	r0, [r4, #0x8]
	strh	r0, [r5, #0x2e]
	add	r0, r6, #0
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r2, [r4, #0x4]
	add	r0, r0, r2
	strh	r0, [r5, #0x32]
	add	r0, r6, #0
	add	r1, r7, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrh	r4, [r4, #0x6]
	add	r0, r0, r4
	strh	r0, [r5, #0x36]
	ldr	r0, .L582+0xc
	str	r0, [r5, #0x1c]
	ldr	r1, .L582+0x10
	add	r0, r5, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L583:
	.align	2, 0
.L582:
	.word	gBattleAnimTarget
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe90:
	.size	 AnimTravelDiagonally,.Lfe90-AnimTravelDiagonally
	.align	2, 0
	.globl	CloneBattlerSpriteWithBlend
	.type	 CloneBattlerSpriteWithBlend,function
	.thumb_func
CloneBattlerSpriteWithBlend:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r1, r0, #0x18
	cmp	r1, #0xff
	beq	.L585	@cond_branch
	mov	r6, #0x0
	ldr	r2, .L593
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r1, r0, #0x2
.L589:
	lsl	r0, r6, #0x4
	add	r0, r0, r6
	lsl	r0, r0, #0x2
	add	r4, r0, r2
	add	r5, r4, #0
	add	r5, r5, #0x3e
	ldrb	r0, [r5]
	lsl	r0, r0, #0x1f
	cmp	r0, #0
	bne	.L588	@cond_branch
	add	r0, r4, #0
	add	r1, r1, r2
	mov	r2, #0x44
	bl	memcpy
	ldrb	r1, [r4, #0x1]
	mov	r2, #0xd
	neg	r2, r2
	add	r0, r2, #0
	and	r1, r1, r0
	mov	r0, #0x4
	orr	r1, r1, r0
	strb	r1, [r4, #0x1]
	ldrb	r0, [r5]
	add	r2, r2, #0x8
	add	r1, r2, #0
	and	r0, r0, r1
	strb	r0, [r5]
	lsl	r0, r6, #0x10
	asr	r0, r0, #0x10
	b	.L592
.L594:
	.align	2, 0
.L593:
	.word	gSprites
.L588:
	add	r0, r6, #0x1
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	cmp	r6, #0x3f
	bls	.L589	@cond_branch
.L585:
	mov	r0, #0x1
	neg	r0, r0
.L592:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe91:
	.size	 CloneBattlerSpriteWithBlend,.Lfe91-CloneBattlerSpriteWithBlend
	.align	2, 0
	.globl	obj_delete_but_dont_free_vram
	.type	 obj_delete_but_dont_free_vram,function
	.thumb_func
obj_delete_but_dont_free_vram:
	push	{lr}
	add	r3, r0, #0
	add	r3, r3, #0x3f
	ldrb	r1, [r3]
	mov	r2, #0x40
	orr	r1, r1, r2
	strb	r1, [r3]
	bl	DestroySprite
	pop	{r0}
	bx	r0
.Lfe92:
	.size	 obj_delete_but_dont_free_vram,.Lfe92-obj_delete_but_dont_free_vram
	.align	2, 0
	.globl	AnimTask_AlphaFadeIn
	.type	 AnimTask_AlphaFadeIn,function
	.thumb_func
AnimTask_AlphaFadeIn:
	push	{r4, r5, r6, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r6, #0x0
	mov	r3, #0x0
	ldr	r2, .L601
	mov	r0, #0x4
	ldrsh	r1, [r2, r0]
	mov	r4, #0x0
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	ble	.L597	@cond_branch
	mov	r3, #0x1
.L597:
	cmp	r1, r0
	bge	.L598	@cond_branch
	ldr	r3, .L601+0x4
.L598:
	mov	r0, #0x6
	ldrsh	r1, [r2, r0]
	mov	r4, #0x2
	ldrsh	r0, [r2, r4]
	cmp	r1, r0
	ble	.L599	@cond_branch
	mov	r6, #0x1
.L599:
	cmp	r1, r0
	bge	.L600	@cond_branch
	ldr	r6, .L601+0x4
.L600:
	ldr	r0, .L601+0x8
	lsl	r4, r5, #0x2
	add	r4, r4, r5
	lsl	r4, r4, #0x3
	add	r4, r4, r0
	mov	r1, #0x0
	strh	r1, [r4, #0x8]
	ldrh	r0, [r2, #0x8]
	strh	r0, [r4, #0xa]
	strh	r1, [r4, #0xc]
	ldrh	r0, [r2]
	strh	r0, [r4, #0xe]
	ldrh	r0, [r2, #0x2]
	strh	r0, [r4, #0x10]
	strh	r3, [r4, #0x12]
	strh	r6, [r4, #0x14]
	ldrh	r0, [r2, #0x4]
	strh	r0, [r4, #0x16]
	ldrh	r0, [r2, #0x6]
	strh	r0, [r4, #0x18]
	ldrh	r1, [r2, #0x2]
	lsl	r1, r1, #0x8
	ldrh	r0, [r2]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	ldr	r0, .L601+0xc
	str	r0, [r4]
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L602:
	.align	2, 0
.L601:
	.word	gBattleAnimArgs
	.word	0xffff
	.word	gTasks
	.word	sub_80A7AFC
.Lfe93:
	.size	 AnimTask_AlphaFadeIn,.Lfe93-AnimTask_AlphaFadeIn
	.align	2, 0
	.type	 sub_80A7AFC,function
	.thumb_func
sub_80A7AFC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L610
	add	r4, r0, r1
	ldrh	r0, [r4, #0x8]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x8]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0xa
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	ble	.L604	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x8]
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	mov	r1, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L605	@cond_branch
	ldrh	r2, [r4, #0xe]
	mov	r3, #0xe
	ldrsh	r1, [r4, r3]
	mov	r3, #0x16
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	beq	.L607	@cond_branch
	ldrh	r0, [r4, #0x12]
	add	r0, r2, r0
	strh	r0, [r4, #0xe]
	b	.L607
.L611:
	.align	2, 0
.L610:
	.word	gTasks
.L605:
	ldrh	r2, [r4, #0x10]
	mov	r0, #0x10
	ldrsh	r1, [r4, r0]
	mov	r3, #0x18
	ldrsh	r0, [r4, r3]
	cmp	r1, r0
	beq	.L607	@cond_branch
	ldrh	r0, [r4, #0x14]
	add	r0, r2, r0
	strh	r0, [r4, #0x10]
.L607:
	ldrh	r1, [r4, #0x10]
	lsl	r1, r1, #0x8
	ldrh	r0, [r4, #0xe]
	orr	r1, r1, r0
	lsl	r1, r1, #0x10
	lsr	r1, r1, #0x10
	mov	r0, #0x52
	bl	SetGpuReg
	mov	r0, #0xe
	ldrsh	r1, [r4, r0]
	mov	r2, #0x16
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L604	@cond_branch
	mov	r3, #0x10
	ldrsh	r1, [r4, r3]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L604	@cond_branch
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L604:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe94:
	.size	 sub_80A7AFC,.Lfe94-sub_80A7AFC
	.align	2, 0
	.globl	AnimTask_BlendMonInAndOut
	.type	 AnimTask_BlendMonInAndOut,function
	.thumb_func
AnimTask_BlendMonInAndOut:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L614
	ldrb	r0, [r0]
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	cmp	r3, #0xff
	bne	.L613	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L612
.L615:
	.align	2, 0
.L614:
	.word	gBattleAnimArgs
.L613:
	ldr	r1, .L616
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldr	r2, .L616+0x4
	lsl	r1, r3, #0x4
	add	r1, r1, r3
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	ldrb	r1, [r1, #0x5]
	lsr	r1, r1, #0x4
	lsl	r1, r1, #0x4
	ldr	r3, .L616+0x8
	add	r2, r3, #0
	add	r1, r1, r2
	strh	r1, [r0, #0x8]
	bl	AnimTask_BlendPalInAndOutSetup
.L612:
	pop	{r4}
	pop	{r0}
	bx	r0
.L617:
	.align	2, 0
.L616:
	.word	gTasks
	.word	gSprites
	.word	0x101
.Lfe95:
	.size	 AnimTask_BlendMonInAndOut,.Lfe95-AnimTask_BlendMonInAndOut
	.align	2, 0
	.type	 AnimTask_BlendPalInAndOutSetup,function
	.thumb_func
AnimTask_BlendPalInAndOutSetup:
	ldr	r3, .L619
	ldrh	r1, [r3, #0x2]
	mov	r2, #0x0
	strh	r1, [r0, #0xa]
	strh	r2, [r0, #0xc]
	ldrh	r1, [r3, #0x4]
	strh	r1, [r0, #0xe]
	strh	r2, [r0, #0x10]
	ldrh	r1, [r3, #0x6]
	strh	r1, [r0, #0x12]
	strh	r2, [r0, #0x14]
	ldrh	r1, [r3, #0x8]
	strh	r1, [r0, #0x16]
	ldr	r1, .L619+0x4
	str	r1, [r0]
	bx	lr
.L620:
	.align	2, 0
.L619:
	.word	gBattleAnimArgs
	.word	AnimTask_BlendMonInAndOutStep
.Lfe96:
	.size	 AnimTask_BlendPalInAndOutSetup,.Lfe96-AnimTask_BlendPalInAndOutSetup
	.align	2, 0
	.type	 AnimTask_BlendMonInAndOutStep,function
	.thumb_func
AnimTask_BlendMonInAndOutStep:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r5, r0, #0
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L629
	add	r4, r0, r1
	ldrh	r0, [r4, #0x10]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x10]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	mov	r2, #0x12
	ldrsh	r1, [r4, r2]
	cmp	r0, r1
	blt	.L622	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x10]
	mov	r1, #0x14
	ldrsh	r0, [r4, r1]
	cmp	r0, #0
	bne	.L623	@cond_branch
	ldrh	r2, [r4, #0xc]
	add	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r3, [r4, #0xa]
	mov	r1, #0xf
	bl	BlendPalette
	mov	r2, #0xc
	ldrsh	r1, [r4, r2]
	mov	r2, #0xe
	ldrsh	r0, [r4, r2]
	cmp	r1, r0
	bne	.L622	@cond_branch
	mov	r0, #0x1
	strh	r0, [r4, #0x14]
	b	.L622
.L630:
	.align	2, 0
.L629:
	.word	gTasks
.L623:
	ldrh	r2, [r4, #0xc]
	sub	r2, r2, #0x1
	strh	r2, [r4, #0xc]
	ldrh	r0, [r4, #0x8]
	lsl	r2, r2, #0x18
	lsr	r2, r2, #0x18
	ldrh	r3, [r4, #0xa]
	mov	r1, #0xf
	bl	BlendPalette
	mov	r0, #0xc
	ldrsh	r1, [r4, r0]
	cmp	r1, #0
	bne	.L622	@cond_branch
	ldrh	r0, [r4, #0x16]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L627	@cond_branch
	strh	r1, [r4, #0x10]
	strh	r1, [r4, #0x14]
	b	.L622
.L627:
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L622:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe97:
	.size	 AnimTask_BlendMonInAndOutStep,.Lfe97-AnimTask_BlendMonInAndOutStep
	.align	2, 0
	.globl	AnimTask_BlendPalInAndOutByTag
	.type	 AnimTask_BlendPalInAndOutByTag,function
	.thumb_func
AnimTask_BlendPalInAndOutByTag:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	ldr	r0, .L633
	ldrh	r0, [r0]
	bl	IndexOfSpritePaletteTag
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	cmp	r2, #0xff
	bne	.L632	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimVisualTask
	b	.L631
.L634:
	.align	2, 0
.L633:
	.word	gBattleAnimArgs
.L632:
	ldr	r1, .L635
	lsl	r0, r4, #0x2
	add	r0, r0, r4
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	lsl	r1, r2, #0x4
	ldr	r2, .L635+0x4
	add	r1, r1, r2
	strh	r1, [r0, #0x8]
	bl	AnimTask_BlendPalInAndOutSetup
.L631:
	pop	{r4}
	pop	{r0}
	bx	r0
.L636:
	.align	2, 0
.L635:
	.word	gTasks
	.word	0x101
.Lfe98:
	.size	 AnimTask_BlendPalInAndOutByTag,.Lfe98-AnimTask_BlendPalInAndOutByTag
	.align	2, 0
	.globl	PrepareAffineAnimInTaskData
	.type	 PrepareAffineAnimInTaskData,function
	.thumb_func
PrepareAffineAnimInTaskData:
	push	{r4, lr}
	add	r3, r0, #0
	add	r4, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	mov	r1, #0x0
	strh	r1, [r3, #0x16]
	strh	r1, [r3, #0x18]
	strh	r1, [r3, #0x1a]
	strh	r4, [r3, #0x26]
	mov	r0, #0x80
	lsl	r0, r0, #0x1
	strh	r0, [r3, #0x1c]
	strh	r0, [r3, #0x1e]
	strh	r1, [r3, #0x20]
	add	r0, r3, #0
	add	r0, r0, #0x22
	add	r3, r3, #0x24
	add	r1, r3, #0
	bl	StorePointerInVars
	add	r0, r4, #0
	mov	r1, #0x0
	bl	PrepareBattlerSpriteForRotScale
	pop	{r4}
	pop	{r0}
	bx	r0
.Lfe99:
	.size	 PrepareAffineAnimInTaskData,.Lfe99-PrepareAffineAnimInTaskData
	.align	2, 0
	.globl	RunAffineAnimFromTaskData
	.type	 RunAffineAnimFromTaskData,function
	.thumb_func
RunAffineAnimFromTaskData:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	ldr	r5, .L659
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x24
	ldrsh	r1, [r4, r2]
	bl	LoadPointerFromVars
	mov	r3, #0x16
	ldrsh	r1, [r4, r3]
	lsl	r1, r1, #0x3
	add	r1, r0, r1
	str	r1, [r5]
	mov	r6, #0x0
	ldrsh	r2, [r1, r6]
	ldr	r0, .L659+0x4
	cmp	r2, r0
	beq	.L643	@cond_branch
	cmp	r2, r0
	bgt	.L655	@cond_branch
	sub	r0, r0, #0x1
	cmp	r2, r0
	beq	.L644	@cond_branch
	ldrb	r0, [r1, #0x5]
	cmp	r0, #0
	bne	.L641	@cond_branch
	ldrh	r0, [r1]
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x1e]
	ldrb	r0, [r1, #0x4]
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	add	r0, r1, #0
	add	r0, r0, #0x8
	str	r0, [r5]
.L641:
	ldr	r1, [r5]
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x1c]
	add	r0, r0, r2
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r1, #0x2]
	ldrh	r3, [r4, #0x1e]
	add	r0, r0, r3
	strh	r0, [r4, #0x1e]
	ldrh	r0, [r4, #0x20]
	ldrb	r1, [r1, #0x4]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x1c
	ldrsh	r1, [r4, r6]
	mov	r3, #0x1e
	ldrsh	r2, [r4, r3]
	ldrh	r3, [r4, #0x20]
	bl	SetSpriteRotScale
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromYScale
	ldrh	r0, [r4, #0x18]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	ldr	r1, [r5]
	ldrb	r1, [r1, #0x5]
	cmp	r0, r1
	blt	.L639	@cond_branch
	mov	r0, #0x0
	strh	r0, [r4, #0x18]
	b	.L645
.L660:
	.align	2, 0
.L659:
	.word	gAnimTaskAffineAnim
	.word	0x7ffe
.L643:
	ldrh	r0, [r1, #0x2]
	strh	r0, [r4, #0x16]
	b	.L639
.L644:
	ldrh	r2, [r1, #0x2]
	mov	r6, #0x2
	ldrsh	r0, [r1, r6]
	cmp	r0, #0
	beq	.L645	@cond_branch
	ldrh	r1, [r4, #0x1a]
	mov	r3, #0x1a
	ldrsh	r0, [r4, r3]
	cmp	r0, #0
	beq	.L646	@cond_branch
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x1a]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L648	@cond_branch
	b	.L645
.L646:
	strh	r2, [r4, #0x1a]
.L648:
	mov	r6, #0x16
	ldrsh	r0, [r4, r6]
	cmp	r0, #0
	beq	.L639	@cond_branch
	ldr	r3, .L661
	ldr	r5, .L661+0x4
.L650:
	ldrh	r2, [r4, #0x16]
	sub	r1, r2, #0x1
	strh	r1, [r4, #0x16]
	ldr	r0, [r3]
	sub	r0, r0, #0x8
	str	r0, [r3]
	mov	r6, #0x0
	ldrsh	r0, [r0, r6]
	cmp	r0, r5
	beq	.L658	@cond_branch
	lsl	r0, r1, #0x10
	cmp	r0, #0
	bne	.L650	@cond_branch
	b	.L639
.L662:
	.align	2, 0
.L661:
	.word	gAnimTaskAffineAnim
	.word	0x7ffd
.L645:
	ldrh	r0, [r4, #0x16]
	add	r0, r0, #0x1
	strh	r0, [r4, #0x16]
	b	.L639
.L655:
	ldr	r2, .L663
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	mov	r1, #0x0
	strh	r1, [r0, #0x26]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	ResetSpriteRotScale
	mov	r0, #0x0
	b	.L657
.L664:
	.align	2, 0
.L663:
	.word	gSprites
.L658:
	strh	r2, [r4, #0x16]
.L639:
	mov	r0, #0x1
.L657:
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.Lfe100:
	.size	 RunAffineAnimFromTaskData,.Lfe100-RunAffineAnimFromTaskData
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromYScale
	.type	 SetBattlerSpriteYOffsetFromYScale,function
	.thumb_func
SetBattlerSpriteYOffsetFromYScale:
	push	{r4, r5, lr}
	add	r4, r0, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	add	r0, r4, #0
	bl	GetBattlerYDeltaFromSpriteId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r1, #0x40
	sub	r5, r1, r0
	ldr	r1, .L667
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	lsl	r0, r5, #0x8
	ldr	r2, .L667+0x4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	cmp	r0, #0x80
	ble	.L666	@cond_branch
	mov	r0, #0x80
.L666:
	sub	r0, r5, r0
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L668:
	.align	2, 0
.L667:
	.word	gSprites
	.word	gOamMatrices
.Lfe101:
	.size	 SetBattlerSpriteYOffsetFromYScale,.Lfe101-SetBattlerSpriteYOffsetFromYScale
	.align	2, 0
	.globl	SetBattlerSpriteYOffsetFromOtherYScale
	.type	 SetBattlerSpriteYOffsetFromOtherYScale,function
	.thumb_func
SetBattlerSpriteYOffsetFromOtherYScale:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r0, r1, #0
	lsl	r4, r4, #0x18
	lsr	r4, r4, #0x18
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerYDeltaFromSpriteId
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0xf
	mov	r1, #0x40
	sub	r5, r1, r0
	ldr	r1, .L671
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r4, r0, r1
	ldrb	r1, [r4, #0x3]
	lsl	r1, r1, #0x1a
	lsr	r1, r1, #0x1b
	lsl	r0, r5, #0x8
	ldr	r2, .L671+0x4
	lsl	r1, r1, #0x3
	add	r1, r1, r2
	mov	r2, #0x6
	ldrsh	r1, [r1, r2]
	bl	__divsi3
	cmp	r0, #0x80
	ble	.L670	@cond_branch
	mov	r0, #0x80
.L670:
	sub	r0, r5, r0
	lsr	r1, r0, #0x1f
	add	r0, r0, r1
	asr	r0, r0, #0x1
	strh	r0, [r4, #0x26]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L672:
	.align	2, 0
.L671:
	.word	gSprites
	.word	gOamMatrices
.Lfe102:
	.size	 SetBattlerSpriteYOffsetFromOtherYScale,.Lfe102-SetBattlerSpriteYOffsetFromOtherYScale
	.align	2, 0
	.type	 GetBattlerYDeltaFromSpriteId,function
	.thumb_func
GetBattlerYDeltaFromSpriteId:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r1, .L695
	lsl	r0, r2, #0x4
	add	r0, r0, r2
	lsl	r0, r0, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2e]
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	mov	r4, #0x0
	ldr	r1, .L695+0x4
	ldr	r7, .L695+0x8
	ldr	r0, .L695+0xc
	add	r6, r5, r0
.L677:
	add	r0, r4, r1
	ldrb	r0, [r0]
	cmp	r0, r2
	beq	.LCB6385
	b	.L676	@long jump
.LCB6385:
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L679	@cond_branch
	ldr	r0, .L695+0x10
	ldr	r0, [r0]
	ldr	r0, [r0, #0x18]
	ldrh	r2, [r0]
	ldr	r1, .L695+0x14
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrb	r0, [r0, #0x1]
	b	.L692
.L696:
	.align	2, 0
.L695:
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	0x181
	.word	gBattleMonForms
	.word	gContestResources
	.word	gMonBackPicCoords
.L679:
	lsl	r0, r4, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L681	@cond_branch
	ldr	r0, .L697
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L682	@cond_branch
	ldr	r1, .L697+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L697+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	b	.L683
.L698:
	.align	2, 0
.L697:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L682:
	ldrh	r2, [r1, #0x2]
.L683:
	cmp	r2, r7
	bne	.L684	@cond_branch
	ldr	r0, .L699
	b	.L693
.L700:
	.align	2, 0
.L699:
	.word	sCastformBackSpriteYCoords
.L684:
	ldr	r0, .L701
	b	.L694
.L702:
	.align	2, 0
.L701:
	.word	gMonBackPicCoords
.L681:
	ldr	r0, .L703
	ldr	r0, [r0]
	ldr	r1, [r0]
	lsl	r0, r5, #0x2
	add	r1, r0, r1
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L687	@cond_branch
	ldr	r1, .L703+0x4
	lsl	r0, r4, #0x1
	add	r0, r0, r1
	ldrh	r1, [r0]
	mov	r0, #0x64
	mul	r0, r0, r1
	ldr	r1, .L703+0x8
	add	r0, r0, r1
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r2, r0, #0x10
	b	.L688
.L704:
	.align	2, 0
.L703:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L687:
	ldrh	r2, [r1, #0x2]
.L688:
	cmp	r2, r7
	bne	.L689	@cond_branch
	ldr	r0, .L705
.L693:
	ldrb	r1, [r6]
	add	r1, r1, r0
	ldrb	r0, [r1]
	b	.L692
.L706:
	.align	2, 0
.L705:
	.word	sCastformElevations
.L689:
	ldr	r0, .L707
.L694:
	lsl	r1, r2, #0x2
	add	r1, r1, r0
	ldrb	r0, [r1, #0x1]
	b	.L692
.L708:
	.align	2, 0
.L707:
	.word	gMonFrontPicCoords
.L676:
	add	r0, r4, #0x1
	lsl	r0, r0, #0x10
	lsr	r4, r0, #0x10
	cmp	r4, #0x3
	bhi	.LCB6563
	b	.L677	@long jump
.LCB6563:
	mov	r0, #0x40
.L692:
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe103:
	.size	 GetBattlerYDeltaFromSpriteId,.Lfe103-GetBattlerYDeltaFromSpriteId
	.align	2, 0
	.globl	StorePointerInVars
	.type	 StorePointerInVars,function
	.thumb_func
StorePointerInVars:
	strh	r2, [r0]
	asr	r2, r2, #0x10
	strh	r2, [r1]
	bx	lr
.Lfe104:
	.size	 StorePointerInVars,.Lfe104-StorePointerInVars
	.align	2, 0
	.globl	LoadPointerFromVars
	.type	 LoadPointerFromVars,function
	.thumb_func
LoadPointerFromVars:
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r1, r1, #0x10
	orr	r0, r0, r1
	bx	lr
.Lfe105:
	.size	 LoadPointerFromVars,.Lfe105-LoadPointerFromVars
	.align	2, 0
	.globl	sub_80A805C
	.type	 sub_80A805C,function
	.thumb_func
sub_80A805C:
	push	{r4, r5, r6, lr}
	mov	r6, r8
	push	{r6}
	mov	r8, r0
	add	r5, r3, #0
	ldr	r0, [sp, #0x14]
	ldr	r4, [sp, #0x18]
	ldr	r6, [sp, #0x1c]
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	lsl	r2, r2, #0x10
	lsr	r2, r2, #0x10
	lsl	r5, r5, #0x10
	lsr	r5, r5, #0x10
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	lsl	r6, r6, #0x10
	lsr	r6, r6, #0x10
	mov	r3, r8
	strh	r6, [r3, #0x18]
	strh	r1, [r3, #0x26]
	strh	r2, [r3, #0x1a]
	strh	r5, [r3, #0x1c]
	strh	r0, [r3, #0x22]
	strh	r4, [r3, #0x24]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	sub	r0, r0, r2
	add	r1, r6, #0
	bl	__divsi3
	mov	r1, r8
	strh	r0, [r1, #0x1e]
	lsl	r4, r4, #0x10
	asr	r4, r4, #0x10
	lsl	r5, r5, #0x10
	asr	r5, r5, #0x10
	sub	r4, r4, r5
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__divsi3
	mov	r3, r8
	strh	r0, [r3, #0x20]
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.Lfe106:
	.size	 sub_80A805C,.Lfe106-sub_80A805C
	.align	2, 0
	.globl	sub_80A80C8
	.type	 sub_80A80C8,function
	.thumb_func
sub_80A80C8:
	push	{r4, lr}
	add	r4, r0, #0
	ldrh	r1, [r4, #0x18]
	mov	r2, #0x18
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L713	@cond_branch
	mov	r0, #0x0
	b	.L718
.L713:
	sub	r0, r1, #0x1
	strh	r0, [r4, #0x18]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	beq	.L714	@cond_branch
	ldrh	r0, [r4, #0x1e]
	ldrh	r3, [r4, #0x1a]
	add	r0, r0, r3
	strh	r0, [r4, #0x1a]
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r4, #0x1c]
	add	r0, r0, r1
	b	.L719
.L714:
	ldrh	r0, [r4, #0x22]
	strh	r0, [r4, #0x1a]
	ldrh	r0, [r4, #0x24]
.L719:
	strh	r0, [r4, #0x1c]
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r2, #0x1a
	ldrsh	r1, [r4, r2]
	mov	r3, #0x1c
	ldrsh	r2, [r4, r3]
	mov	r3, #0x0
	bl	SetSpriteRotScale
	mov	r0, #0x18
	ldrsh	r3, [r4, r0]
	cmp	r3, #0
	beq	.L716	@cond_branch
	ldrh	r0, [r4, #0x26]
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	SetBattlerSpriteYOffsetFromYScale
	b	.L717
.L716:
	ldr	r2, .L720
	mov	r0, #0x26
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	strh	r3, [r0, #0x26]
.L717:
	ldrb	r0, [r4, #0x18]
.L718:
	pop	{r4}
	pop	{r1}
	bx	r1
.L721:
	.align	2, 0
.L720:
	.word	gSprites
.Lfe107:
	.size	 sub_80A80C8,.Lfe107-sub_80A80C8
	.align	2, 0
	.globl	AnimTask_GetFrustrationPowerLevel
	.type	 AnimTask_GetFrustrationPowerLevel,function
	.thumb_func
AnimTask_GetFrustrationPowerLevel:
	push	{lr}
	lsl	r0, r0, #0x18
	lsr	r2, r0, #0x18
	ldr	r0, .L729
	ldrb	r0, [r0]
	mov	r1, #0x0
	cmp	r0, #0x1e
	bls	.L724	@cond_branch
	mov	r1, #0x1
	cmp	r0, #0x64
	bls	.L724	@cond_branch
	mov	r1, #0x3
	cmp	r0, #0xc8
	bhi	.L724	@cond_branch
	mov	r1, #0x2
.L724:
	ldr	r0, .L729+0x4
	strh	r1, [r0, #0xe]
	add	r0, r2, #0
	bl	DestroyAnimVisualTask
	pop	{r0}
	bx	r0
.L730:
	.align	2, 0
.L729:
	.word	gAnimFriendship
	.word	gBattleAnimArgs
.Lfe108:
	.size	 AnimTask_GetFrustrationPowerLevel,.Lfe108-AnimTask_GetFrustrationPowerLevel
	.align	2, 0
	.globl	sub_80A8174
	.type	 sub_80A8174,function
	.thumb_func
sub_80A8174:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	add	r7, r4, #0
	ldr	r6, .L736
	ldrb	r0, [r6]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L732	@cond_branch
	ldr	r2, .L736+0x4
	ldr	r1, .L736+0x8
	ldrb	r0, [r6]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L732:
	ldr	r0, .L736+0xc
	mov	r8, r0
	ldrb	r0, [r0]
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L733	@cond_branch
	ldr	r2, .L736+0x4
	ldr	r1, .L736+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L733:
	ldrb	r0, [r6]
	mov	r5, #0x2
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L734	@cond_branch
	ldr	r2, .L736+0x4
	ldr	r1, .L736+0x8
	ldrb	r0, [r6]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	add	r2, r4, #0
	and	r2, r2, r0
	lsl	r2, r2, #0x2
	ldrb	r3, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r3
	orr	r0, r0, r2
	strb	r0, [r1, #0x5]
.L734:
	mov	r1, r8
	ldrb	r0, [r1]
	eor	r0, r0, r5
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L735	@cond_branch
	ldr	r2, .L736+0x4
	ldr	r1, .L736+0x8
	mov	r3, r8
	ldrb	r0, [r3]
	eor	r0, r0, r5
	add	r0, r0, r1
	ldrb	r0, [r0]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r2
	mov	r0, #0x3
	and	r7, r7, r0
	lsl	r3, r7, #0x2
	ldrb	r2, [r1, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r3
	strb	r0, [r1, #0x5]
.L735:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L737:
	.align	2, 0
.L736:
	.word	gBattleAnimTarget
	.word	gSprites
	.word	gBattlerSpriteIds
	.word	gBattleAnimAttacker
.Lfe109:
	.size	 sub_80A8174,.Lfe109-sub_80A8174
	.align	2, 0
	.globl	sub_80A8278
	.type	 sub_80A8278,function
	.thumb_func
sub_80A8278:
	push	{r4, r5, r6, lr}
	mov	r5, #0x0
	ldr	r0, .L745
	ldrb	r0, [r0]
	cmp	r5, r0
	bge	.L740	@cond_branch
	ldr	r6, .L745+0x4
.L742:
	lsl	r0, r5, #0x18
	lsr	r4, r0, #0x18
	add	r0, r4, #0
	bl	IsBattlerSpriteVisible
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L741	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerSpriteSubpriority
	ldr	r3, .L745+0x8
	add	r3, r5, r3
	ldrb	r2, [r3]
	lsl	r1, r2, #0x4
	add	r1, r1, r2
	lsl	r1, r1, #0x2
	add	r1, r1, r6
	add	r1, r1, #0x43
	strb	r0, [r1]
	ldrb	r1, [r3]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r6
	ldrb	r2, [r0, #0x5]
	mov	r3, #0xd
	neg	r3, r3
	add	r1, r3, #0
	and	r2, r2, r1
	mov	r1, #0x8
	orr	r2, r2, r1
	strb	r2, [r0, #0x5]
.L741:
	add	r5, r5, #0x1
	ldr	r0, .L745
	ldrb	r0, [r0]
	cmp	r5, r0
	blt	.L742	@cond_branch
.L740:
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L746:
	.align	2, 0
.L745:
	.word	gBattlersCount
	.word	gSprites
	.word	gBattlerSpriteIds
.Lfe110:
	.size	 sub_80A8278,.Lfe110-sub_80A8278
	.align	2, 0
	.globl	GetBattlerSpriteSubpriority
	.type	 GetBattlerSpriteSubpriority,function
	.thumb_func
GetBattlerSpriteSubpriority:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L748	@cond_branch
	cmp	r4, #0x2
	bne	.L749	@cond_branch
	mov	r0, #0x1e
	b	.L758
.L749:
	mov	r0, #0x28
	b	.L758
.L748:
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r1, #0x1e
	cmp	r0, #0
	beq	.L751	@cond_branch
	mov	r1, #0x14
	cmp	r0, #0x2
	beq	.L751	@cond_branch
	mov	r1, #0x32
	cmp	r0, #0x1
	bne	.L751	@cond_branch
	mov	r1, #0x28
.L751:
	add	r0, r1, #0
.L758:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe111:
	.size	 GetBattlerSpriteSubpriority,.Lfe111-GetBattlerSpriteSubpriority
	.align	2, 0
	.globl	GetBattlerSpriteBGPriority
	.type	 GetBattlerSpriteBGPriority,function
	.thumb_func
GetBattlerSpriteBGPriority:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L760	@cond_branch
	mov	r0, #0x2
	b	.L765
.L760:
	cmp	r4, #0
	beq	.L763	@cond_branch
	cmp	r4, #0x3
	bne	.L762	@cond_branch
.L763:
	mov	r0, #0x2
	b	.L767
.L762:
	mov	r0, #0x1
.L767:
	mov	r1, #0x4
	bl	GetAnimBgAttribute
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
.L765:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe112:
	.size	 GetBattlerSpriteBGPriority,.Lfe112-GetBattlerSpriteBGPriority
	.align	2, 0
	.globl	GetBattlerSpriteBGPriorityRank
	.type	 GetBattlerSpriteBGPriorityRank,function
	.thumb_func
GetBattlerSpriteBGPriorityRank:
	push	{r4, lr}
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L769	@cond_branch
	add	r0, r4, #0
	bl	GetBattlerPosition
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0
	beq	.L771	@cond_branch
	cmp	r0, #0x3
	bne	.L770	@cond_branch
.L771:
	mov	r0, #0x2
	b	.L773
.L770:
.L769:
	mov	r0, #0x1
.L773:
	pop	{r4}
	pop	{r1}
	bx	r1
.Lfe113:
	.size	 GetBattlerSpriteBGPriorityRank,.Lfe113-GetBattlerSpriteBGPriorityRank
	.align	2, 0
	.globl	sub_80A8394
	.type	 sub_80A8394,function
	.thumb_func
sub_80A8394:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-0x10
	ldr	r4, [sp, #0x30]
	ldr	r5, [sp, #0x34]
	ldr	r6, [sp, #0x38]
	mov	r8, r6
	lsl	r0, r0, #0x10
	lsr	r6, r0, #0x10
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	lsl	r2, r2, #0x18
	lsr	r7, r2, #0x18
	lsl	r3, r3, #0x10
	lsr	r3, r3, #0x10
	mov	sl, r3
	lsl	r4, r4, #0x10
	lsr	r4, r4, #0x10
	str	r4, [sp, #0x4]
	lsl	r5, r5, #0x18
	lsr	r5, r5, #0x18
	str	r5, [sp, #0x8]
	lsl	r0, r7, #0x3
	ldr	r1, .L789
	add	r0, r0, r1
	bl	LoadSpriteSheet
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	str	r0, [sp, #0xc]
	ldr	r1, .L789+0x4
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	ldr	r4, .L789+0x8
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L775	@cond_branch
	mov	r1, #0xbe
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L775	@cond_branch
	mov	r0, #0x80
	lsl	r0, r0, #0x6
	bl	AllocZeroed
	ldr	r1, [r4]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	str	r0, [r1]
.L775:
	mov	r3, r9
	cmp	r3, #0
	bne	.L776	@cond_branch
	add	r0, r6, #0
	ldr	r1, [sp, #0x3c]
	mov	r2, r8
	bl	GetMonSpritePalFromSpeciesAndPersonality
	lsl	r1, r5, #0x14
	mov	r2, #0x80
	lsl	r2, r2, #0x11
	add	r1, r1, r2
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r3, [sp, #0x44]
	cmp	r3, #0x1
	beq	.L778	@cond_branch
	ldr	r0, [sp, #0x40]
	lsl	r1, r0, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	bl	sub_80688F8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L778	@cond_branch
	ldr	r0, .L789+0xc
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r2, [sp, #0x40]
	lsl	r0, r2, #0x2
	add	r0, r0, r1
	ldrh	r0, [r0, #0x2]
	cmp	r0, #0
	beq	.L777	@cond_branch
.L778:
	lsl	r0, r6, #0x3
	ldr	r1, .L789+0x10
	add	r0, r0, r1
	ldr	r1, .L789+0x8
	ldr	r1, [r1]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r1, [r1]
	mov	r2, #0x1
	b	.L787
.L790:
	.align	2, 0
.L789:
	.word	sUnknown_08525FC0
	.word	sUnknown_08525F90
	.word	gMonSpritesGfxPtr
	.word	gBattleSpritesDataPtr
	.word	gMonFrontPicTable
.L777:
	lsl	r0, r6, #0x3
	ldr	r1, .L791
	add	r0, r0, r1
	ldr	r1, .L791+0x4
	ldr	r1, [r1]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	mov	r2, #0x1
	str	r2, [sp]
	add	r2, r6, #0
	mov	r3, r8
	bl	LoadSpecialPokePic_2
	b	.L780
.L792:
	.align	2, 0
.L791:
	.word	gMonFrontPicTable
	.word	gMonSpritesGfxPtr
.L776:
	add	r0, r6, #0
	ldr	r1, [sp, #0x3c]
	mov	r2, r8
	bl	GetMonSpritePalFromSpeciesAndPersonality
	lsl	r1, r5, #0x14
	mov	r3, #0x80
	lsl	r3, r3, #0x11
	add	r1, r1, r3
	lsr	r1, r1, #0x10
	mov	r2, #0x20
	bl	LoadCompressedPalette
	ldr	r0, [sp, #0x44]
	cmp	r0, #0x1
	beq	.L782	@cond_branch
	ldr	r2, [sp, #0x40]
	lsl	r1, r2, #0x18
	lsr	r1, r1, #0x18
	mov	r0, #0x5
	bl	sub_80688F8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	cmp	r0, #0x1
	beq	.L782	@cond_branch
	ldr	r0, .L793
	ldr	r0, [r0]
	ldr	r1, [r0]
	ldr	r3, [sp, #0x40]
	lsl	r0, r3, #0x2
	add	r0, r0, r1
	ldrh	r2, [r0, #0x2]
	cmp	r2, #0
	beq	.L781	@cond_branch
.L782:
	lsl	r0, r6, #0x3
	ldr	r1, .L793+0x4
	add	r0, r0, r1
	ldr	r1, .L793+0x8
	ldr	r1, [r1]
	mov	r2, #0xbe
	lsl	r2, r2, #0x1
	add	r1, r1, r2
	ldr	r1, [r1]
	mov	r2, #0x0
.L787:
	str	r2, [sp]
	add	r2, r6, #0
	mov	r3, r8
	bl	LoadSpecialPokePic_DontHandleDeoxys
	b	.L780
.L794:
	.align	2, 0
.L793:
	.word	gBattleSpritesDataPtr
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
.L781:
	lsl	r0, r6, #0x3
	ldr	r1, .L795
	add	r0, r0, r1
	ldr	r1, .L795+0x4
	ldr	r1, [r1]
	mov	r3, #0xbe
	lsl	r3, r3, #0x1
	add	r1, r1, r3
	ldr	r1, [r1]
	str	r2, [sp]
	add	r2, r6, #0
	mov	r3, r8
	bl	LoadSpecialPokePic_2
.L780:
	ldr	r5, .L795+0x4
	ldr	r0, [r5]
	mov	r4, #0xbe
	lsl	r4, r4, #0x1
	add	r0, r0, r4
	ldr	r0, [r0]
	ldr	r2, [sp, #0xc]
	lsl	r1, r2, #0x5
	ldr	r3, .L795+0x8
	add	r1, r1, r3
	mov	r2, #0x80
	lsl	r2, r2, #0x4
	mov	r3, #0x1
	bl	RequestDma3Copy
	ldr	r0, [r5]
	add	r0, r0, r4
	ldr	r0, [r0]
	bl	Free
	ldr	r0, [r5]
	add	r0, r0, r4
	mov	r1, #0x0
	str	r1, [r0]
	mov	r0, r9
	cmp	r0, #0
	bne	.L784	@cond_branch
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L795+0xc
	add	r0, r0, r1
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	ldr	r3, .L795+0x10
	b	.L788
.L796:
	.align	2, 0
.L795:
	.word	gMonBackPicTable
	.word	gMonSpritesGfxPtr
	.word	0x6010000
	.word	sUnknown_08525F90
	.word	gMonFrontPicCoords
.L784:
	lsl	r0, r7, #0x1
	add	r0, r0, r7
	lsl	r0, r0, #0x3
	ldr	r1, .L797
	add	r0, r0, r1
	mov	r2, sl
	lsl	r1, r2, #0x10
	asr	r1, r1, #0x10
	ldr	r3, .L797+0x4
.L788:
	lsl	r2, r6, #0x2
	add	r2, r2, r3
	ldrb	r2, [r2, #0x1]
	ldr	r3, [sp, #0x4]
	add	r2, r2, r3
	lsl	r2, r2, #0x10
	asr	r2, r2, #0x10
	ldr	r3, [sp, #0x8]
	bl	CreateSprite
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L786	@cond_branch
	ldr	r3, .L797+0x8
	lsl	r0, r4, #0x4
	add	r0, r0, r4
	lsl	r0, r0, #0x2
	add	r1, r3, #0
	add	r1, r1, #0x10
	add	r1, r0, r1
	ldr	r2, .L797+0xc
	str	r2, [r1]
	add	r0, r0, r3
	mov	r1, #0x0
	bl	StartSpriteAffineAnim
.L786:
	add	r0, r4, #0
	add	sp, sp, #0x10
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L798:
	.align	2, 0
.L797:
	.word	sUnknown_08525F90
	.word	gMonBackPicCoords
	.word	gSprites
	.word	gUnknown_082FF6C0
.Lfe114:
	.size	 sub_80A8394,.Lfe114-sub_80A8394
	.align	2, 0
	.globl	DestroySpriteAndFreeResources_
	.type	 DestroySpriteAndFreeResources_,function
	.thumb_func
DestroySpriteAndFreeResources_:
	push	{lr}
	bl	DestroySpriteAndFreeResources
	pop	{r0}
	bx	r0
.Lfe115:
	.size	 DestroySpriteAndFreeResources_,.Lfe115-DestroySpriteAndFreeResources_
	.align	2, 0
	.globl	GetBattlerSpriteCoordAttr
	.type	 GetBattlerSpriteCoordAttr,function
	.thumb_func
GetBattlerSpriteCoordAttr:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r9, r1
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L801	@cond_branch
	ldr	r0, .L850
	ldr	r0, [r0]
	ldr	r2, [r0, #0x18]
	ldrb	r1, [r2, #0x4]
	mov	r0, #0x1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L802	@cond_branch
	ldrh	r7, [r2, #0x2]
	ldr	r2, [r2, #0x10]
	b	.L803
.L851:
	.align	2, 0
.L850:
	.word	gContestResources
.L802:
	ldrh	r7, [r2]
	ldr	r2, [r2, #0x8]
.L803:
	cmp	r7, #0xc9
	bne	.L804	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L805	@cond_branch
	mov	r0, #0xc9
	b	.L806
.L805:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L806:
	lsl	r1, r0, #0x2
	ldr	r0, .L852
	b	.L844
.L853:
	.align	2, 0
.L852:
	.word	gMonBackPicCoords
.L804:
	ldr	r0, .L854
	cmp	r7, r0
	bne	.LCB7674
	b	.L845	@long jump
.LCB7674:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	bhi	.L846	@cond_branch
	lsl	r1, r7, #0x2
	ldr	r0, .L854+0x4
	b	.L844
.L855:
	.align	2, 0
.L854:
	.word	0x181
	.word	gMonBackPicCoords
.L801:
	mov	r0, r8
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L813	@cond_branch
	ldr	r0, .L856
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, r8
	lsl	r2, r1, #0x2
	add	r1, r2, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L814	@cond_branch
	ldr	r0, .L856+0x4
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L856+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L815
.L857:
	.align	2, 0
.L856:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gPlayerParty
.L814:
	ldrh	r7, [r1, #0x2]
	ldr	r0, .L858
	add	r0, r2, r0
	ldr	r2, [r0]
.L815:
	cmp	r7, #0xc9
	bne	.L816	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L817	@cond_branch
	mov	r0, #0xc9
	b	.L818
.L859:
	.align	2, 0
.L858:
	.word	gTransformedPersonalities
.L817:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L818:
	lsl	r1, r0, #0x2
	ldr	r0, .L860
	b	.L844
.L861:
	.align	2, 0
.L860:
	.word	gMonBackPicCoords
.L816:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	bls	.L820	@cond_branch
.L846:
	ldr	r4, .L862
	b	.L812
.L863:
	.align	2, 0
.L862:
	.word	gMonBackPicCoords
.L820:
	lsl	r1, r7, #0x2
	ldr	r0, .L864
	b	.L844
.L865:
	.align	2, 0
.L864:
	.word	gMonBackPicCoords
.L813:
	ldr	r0, .L866
	ldr	r0, [r0]
	ldr	r0, [r0]
	mov	r1, r8
	lsl	r2, r1, #0x2
	add	r1, r2, r0
	ldrh	r0, [r1, #0x2]
	cmp	r0, #0
	bne	.L823	@cond_branch
	ldr	r0, .L866+0x4
	mov	r1, r8
	lsl	r4, r1, #0x1
	add	r4, r4, r0
	ldrh	r0, [r4]
	mov	r6, #0x64
	mul	r0, r0, r6
	ldr	r5, .L866+0x8
	add	r0, r0, r5
	mov	r1, #0xb
	bl	GetMonData
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	ldrh	r0, [r4]
	mul	r0, r0, r6
	add	r0, r0, r5
	mov	r1, #0x0
	bl	GetMonData
	add	r2, r0, #0
	b	.L824
.L867:
	.align	2, 0
.L866:
	.word	gBattleSpritesDataPtr
	.word	gBattlerPartyIndexes
	.word	gEnemyParty
.L823:
	ldrh	r7, [r1, #0x2]
	ldr	r0, .L868
	add	r0, r2, r0
	ldr	r2, [r0]
.L824:
	cmp	r7, #0xc9
	bne	.L825	@cond_branch
	mov	r0, #0xc0
	lsl	r0, r0, #0x12
	and	r0, r0, r2
	lsr	r0, r0, #0x12
	mov	r1, #0xc0
	lsl	r1, r1, #0xa
	and	r1, r1, r2
	lsr	r1, r1, #0xc
	orr	r0, r0, r1
	mov	r1, #0xc0
	lsl	r1, r1, #0x2
	and	r1, r1, r2
	lsr	r1, r1, #0x6
	orr	r0, r0, r1
	mov	r1, #0x3
	and	r1, r1, r2
	orr	r0, r0, r1
	mov	r1, #0x1c
	bl	__umodsi3
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
	cmp	r0, #0
	bne	.L826	@cond_branch
	mov	r0, #0xc9
	b	.L827
.L869:
	.align	2, 0
.L868:
	.word	gTransformedPersonalities
.L826:
	mov	r1, #0xce
	lsl	r1, r1, #0x1
	add	r0, r0, r1
	lsl	r0, r0, #0x10
	lsr	r0, r0, #0x10
.L827:
	lsl	r1, r0, #0x2
	b	.L847
.L825:
	ldr	r0, .L870
	cmp	r7, r0
	bne	.L829	@cond_branch
.L845:
	ldr	r0, .L870+0x4
	add	r0, r0, r8
	ldrb	r0, [r0]
	lsl	r0, r0, #0x2
	ldr	r1, .L870+0x8
	add	r4, r0, r1
	b	.L812
.L871:
	.align	2, 0
.L870:
	.word	0x181
	.word	gBattleMonForms
	.word	gCastformFrontSpriteCoords
.L829:
	mov	r0, #0xce
	lsl	r0, r0, #0x1
	cmp	r7, r0
	bls	.L831	@cond_branch
	ldr	r4, .L872
	b	.L812
.L873:
	.align	2, 0
.L872:
	.word	gMonFrontPicCoords
.L831:
	lsl	r1, r7, #0x2
.L847:
	ldr	r0, .L874
.L844:
	add	r4, r1, r0
.L812:
	mov	r0, r9
	cmp	r0, #0x6
	bhi	.L841	@cond_branch
	lsl	r0, r0, #0x2
	ldr	r1, .L874+0x4
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L875:
	.align	2, 0
.L874:
	.word	gMonFrontPicCoords
	.word	.L842
	.align	2, 0
	.align	2, 0
.L842:
	.word	.L834
	.word	.L835
	.word	.L838
	.word	.L839
	.word	.L836
	.word	.L837
	.word	.L840
.L834:
	ldrb	r1, [r4]
	mov	r0, #0xf
	and	r0, r0, r1
	lsl	r0, r0, #0x3
	b	.L843
.L835:
	ldrb	r0, [r4]
	lsr	r0, r0, #0x4
	lsl	r0, r0, #0x3
	b	.L843
.L836:
	mov	r0, r8
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	lsr	r1, r1, #0x4
	b	.L848
.L837:
	mov	r0, r8
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r1, [r4]
	lsr	r1, r1, #0x4
	b	.L849
.L838:
	mov	r0, r8
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4]
	mov	r1, #0xf
	and	r1, r1, r2
.L848:
	lsl	r1, r1, #0x2
	sub	r0, r0, r1
	b	.L843
.L839:
	mov	r0, r8
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	ldrb	r2, [r4]
	mov	r1, #0xf
	and	r1, r1, r2
.L849:
	lsl	r1, r1, #0x2
	add	r0, r0, r1
	b	.L843
.L840:
	mov	r0, r8
	mov	r1, #0x1
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	add	r0, r0, #0x1f
	ldrb	r1, [r4, #0x1]
	sub	r0, r0, r1
	b	.L843
.L841:
	mov	r0, #0x0
.L843:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.Lfe116:
	.size	 GetBattlerSpriteCoordAttr,.Lfe116-GetBattlerSpriteCoordAttr
	.align	2, 0
	.globl	SetAverageBattlerPositions
	.type	 SetAverageBattlerPositions,function
	.thumb_func
SetAverageBattlerPositions:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	r9, r2
	mov	sl, r3
	lsl	r0, r0, #0x18
	lsr	r4, r0, #0x18
	lsl	r1, r1, #0x18
	cmp	r1, #0
	bne	.L877	@cond_branch
	mov	r5, #0x0
	mov	r6, #0x1
	b	.L878
.L877:
	mov	r5, #0x2
	mov	r6, #0x3
.L878:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	add	r0, r4, #0
	add	r1, r6, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r7, r0, #0x18
	bl	IsDoubleBattle
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L879	@cond_branch
	bl	IsContest
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L879	@cond_branch
	mov	r0, #0x2
	eor	r4, r4, r0
	add	r0, r4, #0
	add	r1, r5, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	add	r0, r4, #0
	add	r1, r6, #0
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r3, r0, #0x18
	mov	r0, r8
	lsl	r1, r0, #0x10
	lsl	r2, r7, #0x10
	b	.L880
.L879:
	mov	r0, r8
	lsl	r1, r0, #0x10
	lsr	r5, r1, #0x10
	lsl	r0, r7, #0x10
	lsr	r3, r0, #0x10
	add	r2, r0, #0
.L880:
	asr	r0, r1, #0x10
	add	r0, r0, r5
	asr	r0, r0, #0x1
	mov	r1, r9
	strh	r0, [r1]
	asr	r0, r2, #0x10
	add	r0, r0, r3
	asr	r0, r0, #0x1
	mov	r1, sl
	strh	r0, [r1]
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.Lfe117:
	.size	 SetAverageBattlerPositions,.Lfe117-SetAverageBattlerPositions
	.align	2, 0
	.globl	sub_80A89C8
	.type	 sub_80A89C8,function
	.thumb_func
sub_80A89C8:
	push	{r4, r5, r6, lr}
	mov	r6, sl
	mov	r5, r9
	mov	r4, r8
	push	{r4, r5, r6}
	add	sp, sp, #-0x4
	lsl	r6, r1, #0x18
	lsr	r6, r6, #0x18
	ldr	r0, .L882
	mov	sl, r0
	bl	CreateInvisibleSpriteWithCallback
	mov	r8, r0
	mov	r0, r8
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r8, r0
	ldr	r0, .L882+0x4
	mov	r9, r0
	mov	r0, r8
	lsl	r3, r0, #0x4
	add	r3, r3, r8
	lsl	r3, r3, #0x2
	mov	r0, r9
	add	r5, r3, r0
	lsl	r4, r6, #0x4
	add	r4, r4, r6
	lsl	r4, r4, #0x2
	add	r4, r4, r9
	add	r0, r5, #0
	add	r1, r4, #0
	mov	r2, #0x44
	str	r3, [sp]
	bl	memcpy
	add	r2, r5, #0
	add	r2, r2, #0x3f
	ldrb	r0, [r2]
	mov	r1, #0x40
	orr	r0, r0, r1
	strb	r0, [r2]
	ldrb	r2, [r5, #0x5]
	mov	r1, #0xd
	neg	r1, r1
	add	r0, r1, #0
	and	r0, r0, r2
	strb	r0, [r5, #0x5]
	ldrb	r0, [r5, #0x1]
	and	r1, r1, r0
	mov	r0, #0x8
	orr	r1, r1, r0
	strb	r1, [r5, #0x1]
	ldrh	r1, [r4, #0x4]
	lsl	r1, r1, #0x16
	lsr	r1, r1, #0x16
	ldrh	r2, [r5, #0x4]
	ldr	r0, .L882+0x8
	and	r0, r0, r2
	orr	r0, r0, r1
	strh	r0, [r5, #0x4]
	mov	r0, #0x1c
	add	r9, r9, r0
	ldr	r3, [sp]
	add	r3, r3, r9
	mov	r0, sl
	str	r0, [r3]
	mov	r0, r8
	add	sp, sp, #0x4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L883:
	.align	2, 0
.L882:
	.word	SpriteCallbackDummy
	.word	gSprites
	.word	-0x400
.Lfe118:
	.size	 sub_80A89C8,.Lfe118-sub_80A89C8
	.align	2, 0
	.globl	sub_80A8A6C
	.type	 sub_80A8A6C,function
	.thumb_func
sub_80A8A6C:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L887
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L885	@cond_branch
	ldr	r2, .L887+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r2, #0x6]
	neg	r0, r0
	strh	r0, [r2, #0x6]
	add	r3, r4, #0
	add	r3, r3, #0x3f
	ldrb	r0, [r3]
	mov	r1, #0x1
	orr	r0, r0, r1
	strb	r0, [r3]
	add	r1, r2, #0
	b	.L886
.L888:
	.align	2, 0
.L887:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L885:
	ldr	r1, .L889
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
.L886:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldr	r1, .L889+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L889+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L890:
	.align	2, 0
.L889:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe119:
	.size	 sub_80A8A6C,.Lfe119-sub_80A8A6C
	.align	2, 0
	.globl	sub_80A8AEC
	.type	 sub_80A8AEC,function
	.thumb_func
sub_80A8AEC:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r0, .L894
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L892	@cond_branch
	ldr	r2, .L894+0x4
	ldrh	r0, [r4, #0x20]
	ldrh	r1, [r2]
	sub	r0, r0, r1
	strh	r0, [r4, #0x20]
	mov	r1, #0x6
	ldrsh	r0, [r2, r1]
	neg	r0, r0
	strh	r0, [r2, #0x6]
	add	r1, r2, #0
	b	.L893
.L895:
	.align	2, 0
.L894:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L892:
	ldr	r1, .L896
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
.L893:
	ldrh	r0, [r1, #0x2]
	ldrh	r2, [r4, #0x22]
	add	r0, r0, r2
	strh	r0, [r4, #0x22]
	ldrh	r0, [r1, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r1, #0x6]
	strh	r0, [r4, #0x30]
	ldrh	r0, [r1, #0x8]
	strh	r0, [r4, #0x34]
	ldrh	r0, [r1, #0xa]
	strh	r0, [r4, #0x38]
	ldrb	r1, [r1, #0xc]
	add	r0, r4, #0
	bl	StartSpriteAnim
	ldr	r1, .L896+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	ldr	r0, .L896+0x8
	str	r0, [r4, #0x1c]
	pop	{r4}
	pop	{r0}
	bx	r0
.L897:
	.align	2, 0
.L896:
	.word	gBattleAnimArgs
	.word	DestroySpriteAndMatrix
	.word	TranslateSpriteLinearAndFlicker
.Lfe120:
	.size	 sub_80A8AEC,.Lfe120-sub_80A8AEC
	.align	2, 0
	.globl	AnimSpinningSparkle
	.type	 AnimSpinningSparkle,function
	.thumb_func
AnimSpinningSparkle:
	push	{r4, lr}
	add	r4, r0, #0
	bl	SetSpriteCoordsToAnimAttackerCoords
	ldr	r0, .L901
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	beq	.L899	@cond_branch
	ldr	r0, .L901+0x4
	ldrh	r1, [r4, #0x20]
	ldrh	r2, [r0]
	sub	r1, r1, r2
	strh	r1, [r4, #0x20]
	b	.L900
.L902:
	.align	2, 0
.L901:
	.word	gBattleAnimAttacker
	.word	gBattleAnimArgs
.L899:
	ldr	r1, .L903
	ldrh	r0, [r1]
	ldrh	r2, [r4, #0x20]
	add	r0, r0, r2
	strh	r0, [r4, #0x20]
	add	r0, r1, #0
.L900:
	ldrh	r0, [r0, #0x2]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x22]
	ldr	r0, .L903+0x4
	str	r0, [r4, #0x1c]
	ldr	r1, .L903+0x8
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4}
	pop	{r0}
	bx	r0
.L904:
	.align	2, 0
.L903:
	.word	gBattleAnimArgs
	.word	RunStoredCallbackWhenAnimEnds
	.word	DestroyAnimSprite
.Lfe121:
	.size	 AnimSpinningSparkle,.Lfe121-AnimSpinningSparkle
	.align	2, 0
	.globl	AnimTask_AttackerPunchWithTrace
	.type	 AnimTask_AttackerPunchWithTrace,function
	.thumb_func
AnimTask_AttackerPunchWithTrace:
	push	{r4, r5, r6, r7, lr}
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	lsl	r1, r0, #0x2
	add	r1, r1, r0
	lsl	r1, r1, #0x3
	ldr	r0, .L912
	add	r5, r1, r0
	mov	r0, #0x0
	bl	GetAnimBattlerSpriteId
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	mov	r6, #0x0
	strh	r0, [r5, #0x8]
	ldr	r7, .L912+0x4
	ldrb	r0, [r7]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	mov	r1, #0x8
	cmp	r0, #0
	beq	.L906	@cond_branch
	mov	r0, #0x8
	neg	r0, r0
	add	r1, r0, #0
.L906:
	strh	r1, [r5, #0xa]
	strh	r6, [r5, #0xc]
	strh	r6, [r5, #0xe]
	ldr	r4, .L912+0x8
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r5, #0x8]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldr	r0, .L912+0xc
	bl	AllocSpritePalette
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x10]
	strh	r6, [r5, #0x12]
	mov	r1, #0x10
	ldrsh	r0, [r5, r1]
	add	r0, r0, #0x10
	lsl	r0, r0, #0x14
	lsr	r6, r0, #0x10
	mov	r0, #0x8
	ldrsh	r1, [r5, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r4
	ldrb	r0, [r0, #0x5]
	lsr	r0, r0, #0x4
	add	r0, r0, #0x10
	lsl	r4, r0, #0x4
	ldrb	r0, [r7]
	bl	GetBattlerSpriteSubpriority
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x14]
	cmp	r0, #0x14
	beq	.L909	@cond_branch
	cmp	r0, #0x28
	bne	.L908	@cond_branch
.L909:
	mov	r0, #0x2
	b	.L911
.L913:
	.align	2, 0
.L912:
	.word	gTasks
	.word	gBattleAnimAttacker
	.word	gSprites
	.word	0x2771
.L908:
	mov	r0, #0x3
.L911:
	strh	r0, [r5, #0x14]
	lsl	r0, r4, #0x1
	ldr	r1, .L914
	add	r0, r0, r1
	lsl	r1, r6, #0x1
	ldr	r2, .L914+0x4
	add	r1, r1, r2
	ldr	r2, .L914+0x8
	bl	CpuSet
	ldr	r0, .L914+0xc
	ldrb	r2, [r0, #0x2]
	ldrh	r3, [r0]
	add	r0, r6, #0
	mov	r1, #0x10
	bl	BlendPalette
	ldr	r0, .L914+0x10
	str	r0, [r5]
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L915:
	.align	2, 0
.L914:
	.word	gPlttBufferUnfaded
	.word	gPlttBufferFaded
	.word	0x4000008
	.word	gBattleAnimArgs
	.word	sub_80A8CAC
.Lfe122:
	.size	 AnimTask_AttackerPunchWithTrace,.Lfe122-AnimTask_AttackerPunchWithTrace
	.align	2, 0
	.type	 sub_80A8CAC,function
	.thumb_func
sub_80A8CAC:
	push	{r4, r5, lr}
	lsl	r0, r0, #0x18
	lsr	r5, r0, #0x18
	lsl	r0, r5, #0x2
	add	r0, r0, r5
	lsl	r0, r0, #0x3
	ldr	r1, .L928
	add	r4, r0, r1
	mov	r1, #0xc
	ldrsh	r0, [r4, r1]
	cmp	r0, #0x1
	beq	.L920	@cond_branch
	cmp	r0, #0x1
	bgt	.L926	@cond_branch
	cmp	r0, #0
	beq	.L918	@cond_branch
	b	.L917
.L929:
	.align	2, 0
.L928:
	.word	gTasks
.L926:
	cmp	r0, #0x2
	beq	.L922	@cond_branch
	b	.L917
.L918:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80A8D78
	ldr	r2, .L930
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r2
	ldrh	r1, [r4, #0xa]
	ldrh	r2, [r0, #0x24]
	add	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r1, [r4, #0xe]
	add	r0, r1, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0x5
	bne	.L917	@cond_branch
	strh	r1, [r4, #0xe]
	b	.L927
.L931:
	.align	2, 0
.L930:
	.word	gSprites
.L920:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	sub_80A8D78
	ldr	r3, .L932
	mov	r0, #0x8
	ldrsh	r1, [r4, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r3
	ldrh	r1, [r0, #0x24]
	ldrh	r2, [r4, #0xa]
	sub	r1, r1, r2
	strh	r1, [r0, #0x24]
	ldrh	r0, [r4, #0xe]
	sub	r0, r0, #0x1
	strh	r0, [r4, #0xe]
	lsl	r0, r0, #0x10
	asr	r2, r0, #0x10
	cmp	r2, #0
	bne	.L917	@cond_branch
	mov	r1, #0x8
	ldrsh	r0, [r4, r1]
	lsl	r1, r0, #0x4
	add	r1, r1, r0
	lsl	r1, r1, #0x2
	add	r1, r1, r3
	strh	r2, [r1, #0x24]
.L927:
	ldrh	r0, [r4, #0xc]
	add	r0, r0, #0x1
	strh	r0, [r4, #0xc]
	b	.L917
.L933:
	.align	2, 0
.L932:
	.word	gSprites
.L922:
	mov	r2, #0x12
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	bne	.L917	@cond_branch
	ldr	r0, .L934
	bl	FreeSpritePaletteByTag
	add	r0, r5, #0
	bl	DestroyAnimVisualTask
.L917:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L935:
	.align	2, 0
.L934:
	.word	0x2771
.Lfe123:
	.size	 sub_80A8CAC,.Lfe123-sub_80A8CAC
	.align	2, 0
	.type	 sub_80A8D78,function
	.thumb_func
sub_80A8D78:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r6, r0, #0
	lsl	r1, r1, #0x18
	lsr	r1, r1, #0x18
	mov	r8, r1
	mov	r0, #0x0
	bl	CloneBattlerSpriteWithBlend
	lsl	r0, r0, #0x10
	lsr	r7, r0, #0x10
	asr	r0, r0, #0x10
	cmp	r0, #0
	blt	.L937	@cond_branch
	ldr	r5, .L938
	lsl	r4, r0, #0x4
	add	r4, r4, r0
	lsl	r4, r4, #0x2
	add	r3, r4, r5
	mov	r0, #0x3
	ldrb	r1, [r6, #0x14]
	and	r1, r1, r0
	lsl	r1, r1, #0x2
	ldrb	r2, [r3, #0x5]
	mov	r0, #0xd
	neg	r0, r0
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	ldrb	r1, [r6, #0x10]
	lsl	r1, r1, #0x4
	mov	r2, #0xf
	and	r0, r0, r2
	orr	r0, r0, r1
	strb	r0, [r3, #0x5]
	mov	r0, #0x8
	strh	r0, [r3, #0x2e]
	mov	r0, r8
	strh	r0, [r3, #0x30]
	strh	r7, [r3, #0x32]
	mov	r0, #0x8
	ldrsh	r1, [r6, r0]
	lsl	r0, r1, #0x4
	add	r0, r0, r1
	lsl	r0, r0, #0x2
	add	r0, r0, r5
	ldrh	r0, [r0, #0x24]
	strh	r0, [r3, #0x24]
	add	r5, r5, #0x1c
	add	r4, r4, r5
	ldr	r0, .L938+0x4
	str	r0, [r4]
	ldrh	r0, [r6, #0x12]
	add	r0, r0, #0x1
	strh	r0, [r6, #0x12]
.L937:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L939:
	.align	2, 0
.L938:
	.word	gSprites
	.word	sub_80A8DFC
.Lfe124:
	.size	 sub_80A8D78,.Lfe124-sub_80A8D78
	.align	2, 0
	.type	 sub_80A8DFC,function
	.thumb_func
sub_80A8DFC:
	push	{lr}
	add	r3, r0, #0
	ldrh	r0, [r3, #0x2e]
	sub	r0, r0, #0x1
	strh	r0, [r3, #0x2e]
	lsl	r0, r0, #0x10
	cmp	r0, #0
	bne	.L941	@cond_branch
	ldr	r2, .L942
	mov	r0, #0x30
	ldrsh	r1, [r3, r0]
	lsl	r0, r1, #0x2
	add	r0, r0, r1
	lsl	r0, r0, #0x3
	add	r0, r0, r2
	ldrh	r1, [r0, #0x12]
	sub	r1, r1, #0x1
	strh	r1, [r0, #0x12]
	add	r0, r3, #0
	bl	obj_delete_but_dont_free_vram
.L941:
	pop	{r0}
	bx	r0
.L943:
	.align	2, 0
.L942:
	.word	gTasks
.Lfe125:
	.size	 sub_80A8DFC,.Lfe125-sub_80A8DFC
	.align	2, 0
	.globl	AnimWeatherBallUp
	.type	 AnimWeatherBallUp,function
	.thumb_func
AnimWeatherBallUp:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r4, .L948
	ldrb	r0, [r4]
	mov	r1, #0x2
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x20]
	ldrb	r0, [r4]
	mov	r1, #0x3
	bl	GetBattlerSpriteCoord
	lsl	r0, r0, #0x18
	lsr	r0, r0, #0x18
	strh	r0, [r5, #0x22]
	ldrb	r0, [r4]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L945	@cond_branch
	mov	r0, #0x5
	b	.L947
.L949:
	.align	2, 0
.L948:
	.word	gBattleAnimAttacker
.L945:
	ldr	r0, .L950
.L947:
	strh	r0, [r5, #0x2e]
	ldr	r0, .L950+0x4
	strh	r0, [r5, #0x30]
	ldr	r0, .L950+0x8
	str	r0, [r5, #0x1c]
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L951:
	.align	2, 0
.L950:
	.word	0xfff6
	.word	0xffd8
	.word	sub_80A8E88
.Lfe126:
	.size	 AnimWeatherBallUp,.Lfe126-AnimWeatherBallUp
	.align	2, 0
	.type	 sub_80A8E88,function
	.thumb_func
sub_80A8E88:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldrh	r0, [r4, #0x2e]
	ldrh	r1, [r4, #0x32]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r5, [r4, #0x30]
	ldrh	r2, [r4, #0x34]
	add	r0, r5, r2
	strh	r0, [r4, #0x34]
	mov	r1, #0x32
	ldrsh	r0, [r4, r1]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x24]
	mov	r2, #0x34
	ldrsh	r0, [r4, r2]
	mov	r1, #0xa
	bl	__divsi3
	strh	r0, [r4, #0x26]
	lsl	r0, r5, #0x10
	asr	r0, r0, #0x10
	mov	r1, #0x14
	neg	r1, r1
	cmp	r0, r1
	bge	.L953	@cond_branch
	add	r0, r5, #0x1
	strh	r0, [r4, #0x30]
.L953:
	mov	r1, #0x22
	ldrsh	r0, [r4, r1]
	mov	r2, #0x26
	ldrsh	r1, [r4, r2]
	add	r0, r0, r1
	mov	r1, #0x20
	neg	r1, r1
	cmp	r0, r1
	bge	.L954	@cond_branch
	add	r0, r4, #0
	bl	DestroyAnimSprite
.L954:
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.Lfe127:
	.size	 sub_80A8E88,.Lfe127-sub_80A8E88
	.align	2, 0
	.globl	AnimWeatherBallDown
	.type	 AnimWeatherBallDown,function
	.thumb_func
AnimWeatherBallDown:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r5, .L959
	ldrh	r0, [r5, #0x4]
	strh	r0, [r4, #0x2e]
	ldrh	r0, [r5, #0x8]
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x32]
	ldrh	r0, [r5, #0xa]
	ldrh	r1, [r4, #0x22]
	add	r0, r0, r1
	strh	r0, [r4, #0x36]
	ldr	r0, .L959+0x4
	ldrb	r0, [r0]
	bl	GetBattlerSide
	lsl	r0, r0, #0x18
	cmp	r0, #0
	bne	.L956	@cond_branch
	ldrh	r0, [r5, #0x8]
	add	r0, r0, #0x1e
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x14
	b	.L958
.L960:
	.align	2, 0
.L959:
	.word	gBattleAnimArgs
	.word	gBattleAnimTarget
.L956:
	ldrh	r0, [r5, #0x8]
	sub	r0, r0, #0x1e
	ldrh	r1, [r4, #0x20]
	add	r0, r0, r1
	strh	r0, [r4, #0x20]
	ldrh	r0, [r5, #0xa]
	sub	r0, r0, #0x50
.L958:
	strh	r0, [r4, #0x22]
	ldr	r0, .L961
	str	r0, [r4, #0x1c]
	ldr	r1, .L961+0x4
	add	r0, r4, #0
	bl	StoreSpriteCallbackInData6
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L962:
	.align	2, 0
.L961:
	.word	StartAnimLinearTranslation
	.word	DestroyAnimSprite
.Lfe128:
	.size	 AnimWeatherBallDown,.Lfe128-AnimWeatherBallDown
.text
	.align	2, 0

